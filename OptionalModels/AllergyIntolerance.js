"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AllergyIntoleranceTypeEnum = exports.AllergyIntoleranceCriticalityEnum = exports.AllergyIntoleranceCategoryEnum = exports.AllergyIntolerance = exports.AllergyIntoleranceReactionSeverityEnum = exports.AllergyIntoleranceReaction = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * Details about each adverse reaction event linked to exposure to the identified substance.
 */
class AllergyIntoleranceReaction extends fhirModels.BackboneElement {
    /**
     * Default constructor for AllergyIntoleranceReaction from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["exposureRoute"] !== undefined) {
            this.exposureRoute = new fhirModels.CodeableConcept(source.exposureRoute);
        }
        if (source["manifestation"] !== undefined) {
            this.manifestation = source.manifestation.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["onset"] !== undefined) {
            this.onset = source.onset;
        }
        if (source["_onset"] !== undefined) {
            this._onset = new fhirModels.Element(source._onset);
        }
        if (source["severity"] !== undefined) {
            this.severity = source.severity;
        }
        if (source["_severity"] !== undefined) {
            this._severity = new fhirModels.Element(source._severity);
        }
        if (source["substance"] !== undefined) {
            this.substance = new fhirModels.CodeableConcept(source.substance);
        }
    }
    /**
     * Factory function to create a AllergyIntoleranceReaction from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new AllergyIntoleranceReaction(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `AllergyIntoleranceReaction is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current AllergyIntoleranceReaction contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if ((this["manifestation"] === undefined) || (this["manifestation"].length === 0)) {
            missingElements.push("manifestation");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.AllergyIntoleranceReaction = AllergyIntoleranceReaction;
/**
 * Code Values for the AllergyIntolerance.reaction.severity field
 */
var AllergyIntoleranceReactionSeverityEnum;
(function (AllergyIntoleranceReactionSeverityEnum) {
    AllergyIntoleranceReactionSeverityEnum["MILD"] = "mild";
    AllergyIntoleranceReactionSeverityEnum["MODERATE"] = "moderate";
    AllergyIntoleranceReactionSeverityEnum["SEVERE"] = "severe";
})(AllergyIntoleranceReactionSeverityEnum = exports.AllergyIntoleranceReactionSeverityEnum || (exports.AllergyIntoleranceReactionSeverityEnum = {}));
/**
 * Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
 */
class AllergyIntolerance extends fhirModels.DomainResource {
    /**
     * Default constructor for AllergyIntolerance from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "AllergyIntolerance";
        if ((source['resourceType'] !== "AllergyIntolerance") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a AllergyIntolerance';
        }
        if (source["asserter"] !== undefined) {
            this.asserter = new fhirModels.Reference(source.asserter);
        }
        if (source["category"] !== undefined) {
            this.category = source.category.map((x) => (x));
        }
        if (source["_category"] !== undefined) {
            this._category = source._category.map((x) => new fhirModels.Element(x));
        }
        if (source["clinicalStatus"] !== undefined) {
            this.clinicalStatus = new fhirModels.CodeableConcept(source.clinicalStatus);
        }
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["criticality"] !== undefined) {
            this.criticality = source.criticality;
        }
        if (source["_criticality"] !== undefined) {
            this._criticality = new fhirModels.Element(source._criticality);
        }
        if (source["encounter"] !== undefined) {
            this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["lastOccurrence"] !== undefined) {
            this.lastOccurrence = source.lastOccurrence;
        }
        if (source["_lastOccurrence"] !== undefined) {
            this._lastOccurrence = new fhirModels.Element(source._lastOccurrence);
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["onsetDateTime"] !== undefined) {
            this.onsetDateTime = source.onsetDateTime;
        }
        if (source["_onsetDateTime"] !== undefined) {
            this._onsetDateTime = new fhirModels.Element(source._onsetDateTime);
        }
        if (source["onsetAge"] !== undefined) {
            this.onsetAge = new fhirModels.Age(source.onsetAge);
        }
        if (source["onsetPeriod"] !== undefined) {
            this.onsetPeriod = new fhirModels.Period(source.onsetPeriod);
        }
        if (source["onsetRange"] !== undefined) {
            this.onsetRange = new fhirModels.Range(source.onsetRange);
        }
        if (source["onsetString"] !== undefined) {
            this.onsetString = source.onsetString;
        }
        if (source["_onsetString"] !== undefined) {
            this._onsetString = new fhirModels.Element(source._onsetString);
        }
        if (source["patient"] !== undefined) {
            this.patient = new fhirModels.Reference(source.patient);
        }
        if (source["reaction"] !== undefined) {
            this.reaction = source.reaction.map((x) => new fhirModels.AllergyIntoleranceReaction(x));
        }
        if (source["recordedDate"] !== undefined) {
            this.recordedDate = source.recordedDate;
        }
        if (source["_recordedDate"] !== undefined) {
            this._recordedDate = new fhirModels.Element(source._recordedDate);
        }
        if (source["recorder"] !== undefined) {
            this.recorder = new fhirModels.Reference(source.recorder);
        }
        if (source["type"] !== undefined) {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
        if (source["verificationStatus"] !== undefined) {
            this.verificationStatus = new fhirModels.CodeableConcept(source.verificationStatus);
        }
    }
    /**
     * Factory function to create a AllergyIntolerance from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new AllergyIntolerance(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `AllergyIntolerance is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current AllergyIntolerance contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["patient"] === undefined) {
            missingElements.push("patient");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.AllergyIntolerance = AllergyIntolerance;
/**
 * Code Values for the AllergyIntolerance.category field
 */
var AllergyIntoleranceCategoryEnum;
(function (AllergyIntoleranceCategoryEnum) {
    AllergyIntoleranceCategoryEnum["FOOD"] = "food";
    AllergyIntoleranceCategoryEnum["MEDICATION"] = "medication";
    AllergyIntoleranceCategoryEnum["ENVIRONMENT"] = "environment";
    AllergyIntoleranceCategoryEnum["BIOLOGIC"] = "biologic";
})(AllergyIntoleranceCategoryEnum = exports.AllergyIntoleranceCategoryEnum || (exports.AllergyIntoleranceCategoryEnum = {}));
/**
 * Code Values for the AllergyIntolerance.criticality field
 */
var AllergyIntoleranceCriticalityEnum;
(function (AllergyIntoleranceCriticalityEnum) {
    AllergyIntoleranceCriticalityEnum["LOW"] = "low";
    AllergyIntoleranceCriticalityEnum["HIGH"] = "high";
    AllergyIntoleranceCriticalityEnum["UNABLE_TO_ASSESS"] = "unable-to-assess";
})(AllergyIntoleranceCriticalityEnum = exports.AllergyIntoleranceCriticalityEnum || (exports.AllergyIntoleranceCriticalityEnum = {}));
/**
 * Code Values for the AllergyIntolerance.type field
 */
var AllergyIntoleranceTypeEnum;
(function (AllergyIntoleranceTypeEnum) {
    AllergyIntoleranceTypeEnum["ALLERGY"] = "allergy";
    AllergyIntoleranceTypeEnum["INTOLERANCE"] = "intolerance";
})(AllergyIntoleranceTypeEnum = exports.AllergyIntoleranceTypeEnum || (exports.AllergyIntoleranceTypeEnum = {}));
//# sourceMappingURL=AllergyIntolerance.js.map