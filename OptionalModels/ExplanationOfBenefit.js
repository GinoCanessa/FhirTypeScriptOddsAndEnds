var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * For example,  for the original treatment and follow-up exams.
 */
var ExplanationOfBenefitRelated = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitRelated, _super);
    /**
     * Default constructor for ExplanationOfBenefitRelated from an object that MAY NOT contain all required elements.
     */
    function ExplanationOfBenefitRelated(source) {
        var _this = _super.call(this, source) || this;
        if (source["claim"] !== undefined) {
            _this.claim = new fhirModels.Reference(source.claim);
        }
        if (source["reference"] !== undefined) {
            _this.reference = new fhirModels.Identifier(source.reference);
        }
        if (source["relationship"] !== undefined) {
            _this.relationship = new fhirModels.CodeableConcept(source.relationship);
        }
        return _this;
    }
    /**
     * Factory function to create a ExplanationOfBenefitRelated from an object that MUST contain all required elements.
     */
    ExplanationOfBenefitRelated.CreateStrict = function (source) {
        var dest = new ExplanationOfBenefitRelated(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ExplanationOfBenefitRelated is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ExplanationOfBenefitRelated contains all required elements.
     */
    ExplanationOfBenefitRelated.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ExplanationOfBenefitRelated;
}(fhirModels.BackboneElement));
export { ExplanationOfBenefitRelated };
/**
 * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and may choose to pay the subscriber instead.
 */
var ExplanationOfBenefitPayee = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitPayee, _super);
    /**
     * Default constructor for ExplanationOfBenefitPayee from an object that MAY NOT contain all required elements.
     */
    function ExplanationOfBenefitPayee(source) {
        var _this = _super.call(this, source) || this;
        if (source["party"] !== undefined) {
            _this.party = new fhirModels.Reference(source.party);
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    /**
     * Factory function to create a ExplanationOfBenefitPayee from an object that MUST contain all required elements.
     */
    ExplanationOfBenefitPayee.CreateStrict = function (source) {
        var dest = new ExplanationOfBenefitPayee(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ExplanationOfBenefitPayee is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ExplanationOfBenefitPayee contains all required elements.
     */
    ExplanationOfBenefitPayee.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ExplanationOfBenefitPayee;
}(fhirModels.BackboneElement));
export { ExplanationOfBenefitPayee };
/**
 * The members of the team who provided the products and services.
 */
var ExplanationOfBenefitCareTeam = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitCareTeam, _super);
    /**
     * Default constructor for ExplanationOfBenefitCareTeam from an object that MAY NOT contain all required elements.
     */
    function ExplanationOfBenefitCareTeam(source) {
        var _this = _super.call(this, source) || this;
        if (source["provider"] !== undefined) {
            _this.provider = new fhirModels.Reference(source.provider);
        }
        if (source["qualification"] !== undefined) {
            _this.qualification = new fhirModels.CodeableConcept(source.qualification);
        }
        if (source["responsible"] !== undefined) {
            _this.responsible = source.responsible;
        }
        if (source["_responsible"] !== undefined) {
            _this._responsible = new fhirModels.Element(source._responsible);
        }
        if (source["role"] !== undefined) {
            _this.role = new fhirModels.CodeableConcept(source.role);
        }
        if (source["sequence"] !== undefined) {
            _this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            _this._sequence = new fhirModels.Element(source._sequence);
        }
        return _this;
    }
    /**
     * Factory function to create a ExplanationOfBenefitCareTeam from an object that MUST contain all required elements.
     */
    ExplanationOfBenefitCareTeam.CreateStrict = function (source) {
        var dest = new ExplanationOfBenefitCareTeam(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ExplanationOfBenefitCareTeam is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ExplanationOfBenefitCareTeam contains all required elements.
     */
    ExplanationOfBenefitCareTeam.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["provider"] === undefined) {
            missingElements.push("provider");
        }
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ExplanationOfBenefitCareTeam;
}(fhirModels.BackboneElement));
export { ExplanationOfBenefitCareTeam };
/**
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
var ExplanationOfBenefitSupportingInfo = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitSupportingInfo, _super);
    /**
     * Default constructor for ExplanationOfBenefitSupportingInfo from an object that MAY NOT contain all required elements.
     */
    function ExplanationOfBenefitSupportingInfo(source) {
        var _this = _super.call(this, source) || this;
        if (source["category"] !== undefined) {
            _this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["code"] !== undefined) {
            _this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["reason"] !== undefined) {
            _this.reason = new fhirModels.Coding(source.reason);
        }
        if (source["sequence"] !== undefined) {
            _this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            _this._sequence = new fhirModels.Element(source._sequence);
        }
        if (source["timingDate"] !== undefined) {
            _this.timingDate = source.timingDate;
        }
        if (source["_timingDate"] !== undefined) {
            _this._timingDate = new fhirModels.Element(source._timingDate);
        }
        if (source["timingPeriod"] !== undefined) {
            _this.timingPeriod = new fhirModels.Period(source.timingPeriod);
        }
        if (source["valueBoolean"] !== undefined) {
            _this.valueBoolean = source.valueBoolean;
        }
        if (source["_valueBoolean"] !== undefined) {
            _this._valueBoolean = new fhirModels.Element(source._valueBoolean);
        }
        if (source["valueString"] !== undefined) {
            _this.valueString = source.valueString;
        }
        if (source["_valueString"] !== undefined) {
            _this._valueString = new fhirModels.Element(source._valueString);
        }
        if (source["valueQuantity"] !== undefined) {
            _this.valueQuantity = new fhirModels.Quantity(source.valueQuantity);
        }
        if (source["valueAttachment"] !== undefined) {
            _this.valueAttachment = new fhirModels.Attachment(source.valueAttachment);
        }
        if (source["valueReference"] !== undefined) {
            _this.valueReference = new fhirModels.Reference(source.valueReference);
        }
        return _this;
    }
    /**
     * Factory function to create a ExplanationOfBenefitSupportingInfo from an object that MUST contain all required elements.
     */
    ExplanationOfBenefitSupportingInfo.CreateStrict = function (source) {
        var dest = new ExplanationOfBenefitSupportingInfo(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ExplanationOfBenefitSupportingInfo is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ExplanationOfBenefitSupportingInfo contains all required elements.
     */
    ExplanationOfBenefitSupportingInfo.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["category"] === undefined) {
            missingElements.push("category");
        }
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ExplanationOfBenefitSupportingInfo;
}(fhirModels.BackboneElement));
export { ExplanationOfBenefitSupportingInfo };
/**
 * Information about diagnoses relevant to the claim items.
 */
var ExplanationOfBenefitDiagnosis = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitDiagnosis, _super);
    /**
     * Default constructor for ExplanationOfBenefitDiagnosis from an object that MAY NOT contain all required elements.
     */
    function ExplanationOfBenefitDiagnosis(source) {
        var _this = _super.call(this, source) || this;
        if (source["diagnosisCodeableConcept"] !== undefined) {
            _this.diagnosisCodeableConcept = new fhirModels.CodeableConcept(source.diagnosisCodeableConcept);
        }
        if (source["diagnosisReference"] !== undefined) {
            _this.diagnosisReference = new fhirModels.Reference(source.diagnosisReference);
        }
        if (source["onAdmission"] !== undefined) {
            _this.onAdmission = new fhirModels.CodeableConcept(source.onAdmission);
        }
        if (source["packageCode"] !== undefined) {
            _this.packageCode = new fhirModels.CodeableConcept(source.packageCode);
        }
        if (source["sequence"] !== undefined) {
            _this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            _this._sequence = new fhirModels.Element(source._sequence);
        }
        if (source["type"] !== undefined) {
            _this.type = source.type.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a ExplanationOfBenefitDiagnosis from an object that MUST contain all required elements.
     */
    ExplanationOfBenefitDiagnosis.CreateStrict = function (source) {
        var dest = new ExplanationOfBenefitDiagnosis(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ExplanationOfBenefitDiagnosis is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ExplanationOfBenefitDiagnosis contains all required elements.
     */
    ExplanationOfBenefitDiagnosis.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ExplanationOfBenefitDiagnosis;
}(fhirModels.BackboneElement));
export { ExplanationOfBenefitDiagnosis };
/**
 * Procedures performed on the patient relevant to the billing items with the claim.
 */
var ExplanationOfBenefitProcedure = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitProcedure, _super);
    /**
     * Default constructor for ExplanationOfBenefitProcedure from an object that MAY NOT contain all required elements.
     */
    function ExplanationOfBenefitProcedure(source) {
        var _this = _super.call(this, source) || this;
        if (source["date"] !== undefined) {
            _this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            _this._date = new fhirModels.Element(source._date);
        }
        if (source["procedureCodeableConcept"] !== undefined) {
            _this.procedureCodeableConcept = new fhirModels.CodeableConcept(source.procedureCodeableConcept);
        }
        if (source["procedureReference"] !== undefined) {
            _this.procedureReference = new fhirModels.Reference(source.procedureReference);
        }
        if (source["sequence"] !== undefined) {
            _this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            _this._sequence = new fhirModels.Element(source._sequence);
        }
        if (source["type"] !== undefined) {
            _this.type = source.type.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["udi"] !== undefined) {
            _this.udi = source.udi.map(function (x) { return new fhirModels.Reference(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a ExplanationOfBenefitProcedure from an object that MUST contain all required elements.
     */
    ExplanationOfBenefitProcedure.CreateStrict = function (source) {
        var dest = new ExplanationOfBenefitProcedure(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ExplanationOfBenefitProcedure is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ExplanationOfBenefitProcedure contains all required elements.
     */
    ExplanationOfBenefitProcedure.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ExplanationOfBenefitProcedure;
}(fhirModels.BackboneElement));
export { ExplanationOfBenefitProcedure };
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
var ExplanationOfBenefitInsurance = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitInsurance, _super);
    /**
     * Default constructor for ExplanationOfBenefitInsurance from an object that MAY NOT contain all required elements.
     */
    function ExplanationOfBenefitInsurance(source) {
        var _this = _super.call(this, source) || this;
        if (source["coverage"] !== undefined) {
            _this.coverage = new fhirModels.Reference(source.coverage);
        }
        if (source["focal"] !== undefined) {
            _this.focal = source.focal;
        }
        if (source["_focal"] !== undefined) {
            _this._focal = new fhirModels.Element(source._focal);
        }
        if (source["preAuthRef"] !== undefined) {
            _this.preAuthRef = source.preAuthRef.map(function (x) { return (x); });
        }
        if (source["_preAuthRef"] !== undefined) {
            _this._preAuthRef = source._preAuthRef.map(function (x) { return new fhirModels.Element(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a ExplanationOfBenefitInsurance from an object that MUST contain all required elements.
     */
    ExplanationOfBenefitInsurance.CreateStrict = function (source) {
        var dest = new ExplanationOfBenefitInsurance(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ExplanationOfBenefitInsurance is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ExplanationOfBenefitInsurance contains all required elements.
     */
    ExplanationOfBenefitInsurance.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["coverage"] === undefined) {
            missingElements.push("coverage");
        }
        if (this["focal"] === undefined) {
            missingElements.push("focal");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ExplanationOfBenefitInsurance;
}(fhirModels.BackboneElement));
export { ExplanationOfBenefitInsurance };
/**
 * Details of a accident which resulted in injuries which required the products and services listed in the claim.
 */
var ExplanationOfBenefitAccident = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitAccident, _super);
    /**
     * Default constructor for ExplanationOfBenefitAccident from an object that MAY NOT contain all required elements.
     */
    function ExplanationOfBenefitAccident(source) {
        var _this = _super.call(this, source) || this;
        if (source["date"] !== undefined) {
            _this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            _this._date = new fhirModels.Element(source._date);
        }
        if (source["locationAddress"] !== undefined) {
            _this.locationAddress = new fhirModels.Address(source.locationAddress);
        }
        if (source["locationReference"] !== undefined) {
            _this.locationReference = new fhirModels.Reference(source.locationReference);
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    /**
     * Factory function to create a ExplanationOfBenefitAccident from an object that MUST contain all required elements.
     */
    ExplanationOfBenefitAccident.CreateStrict = function (source) {
        var dest = new ExplanationOfBenefitAccident(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ExplanationOfBenefitAccident is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ExplanationOfBenefitAccident contains all required elements.
     */
    ExplanationOfBenefitAccident.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ExplanationOfBenefitAccident;
}(fhirModels.BackboneElement));
export { ExplanationOfBenefitAccident };
/**
 * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
 */
var ExplanationOfBenefitItemAdjudication = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitItemAdjudication, _super);
    /**
     * Default constructor for ExplanationOfBenefitItemAdjudication from an object that MAY NOT contain all required elements.
     */
    function ExplanationOfBenefitItemAdjudication(source) {
        var _this = _super.call(this, source) || this;
        if (source["amount"] !== undefined) {
            _this.amount = new fhirModels.Money(source.amount);
        }
        if (source["category"] !== undefined) {
            _this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["reason"] !== undefined) {
            _this.reason = new fhirModels.CodeableConcept(source.reason);
        }
        if (source["value"] !== undefined) {
            _this.value = source.value;
        }
        if (source["_value"] !== undefined) {
            _this._value = new fhirModels.Element(source._value);
        }
        return _this;
    }
    /**
     * Factory function to create a ExplanationOfBenefitItemAdjudication from an object that MUST contain all required elements.
     */
    ExplanationOfBenefitItemAdjudication.CreateStrict = function (source) {
        var dest = new ExplanationOfBenefitItemAdjudication(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ExplanationOfBenefitItemAdjudication is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ExplanationOfBenefitItemAdjudication contains all required elements.
     */
    ExplanationOfBenefitItemAdjudication.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["category"] === undefined) {
            missingElements.push("category");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ExplanationOfBenefitItemAdjudication;
}(fhirModels.BackboneElement));
export { ExplanationOfBenefitItemAdjudication };
/**
 * Third-tier of goods and services.
 */
var ExplanationOfBenefitItemDetailSubDetail = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitItemDetailSubDetail, _super);
    /**
     * Default constructor for ExplanationOfBenefitItemDetailSubDetail from an object that MAY NOT contain all required elements.
     */
    function ExplanationOfBenefitItemDetailSubDetail(source) {
        var _this = _super.call(this, source) || this;
        if (source["adjudication"] !== undefined) {
            _this.adjudication = source.adjudication.map(function (x) { return new fhirModels.ExplanationOfBenefitItemAdjudication(x); });
        }
        if (source["category"] !== undefined) {
            _this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["factor"] !== undefined) {
            _this.factor = source.factor;
        }
        if (source["_factor"] !== undefined) {
            _this._factor = new fhirModels.Element(source._factor);
        }
        if (source["modifier"] !== undefined) {
            _this.modifier = source.modifier.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["net"] !== undefined) {
            _this.net = new fhirModels.Money(source.net);
        }
        if (source["noteNumber"] !== undefined) {
            _this.noteNumber = source.noteNumber.map(function (x) { return (x); });
        }
        if (source["_noteNumber"] !== undefined) {
            _this._noteNumber = source._noteNumber.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["productOrService"] !== undefined) {
            _this.productOrService = new fhirModels.CodeableConcept(source.productOrService);
        }
        if (source["programCode"] !== undefined) {
            _this.programCode = source.programCode.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["quantity"] !== undefined) {
            _this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["revenue"] !== undefined) {
            _this.revenue = new fhirModels.CodeableConcept(source.revenue);
        }
        if (source["sequence"] !== undefined) {
            _this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            _this._sequence = new fhirModels.Element(source._sequence);
        }
        if (source["udi"] !== undefined) {
            _this.udi = source.udi.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["unitPrice"] !== undefined) {
            _this.unitPrice = new fhirModels.Money(source.unitPrice);
        }
        return _this;
    }
    /**
     * Factory function to create a ExplanationOfBenefitItemDetailSubDetail from an object that MUST contain all required elements.
     */
    ExplanationOfBenefitItemDetailSubDetail.CreateStrict = function (source) {
        var dest = new ExplanationOfBenefitItemDetailSubDetail(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ExplanationOfBenefitItemDetailSubDetail is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ExplanationOfBenefitItemDetailSubDetail contains all required elements.
     */
    ExplanationOfBenefitItemDetailSubDetail.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["productOrService"] === undefined) {
            missingElements.push("productOrService");
        }
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ExplanationOfBenefitItemDetailSubDetail;
}(fhirModels.BackboneElement));
export { ExplanationOfBenefitItemDetailSubDetail };
/**
 * Second-tier of goods and services.
 */
var ExplanationOfBenefitItemDetail = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitItemDetail, _super);
    /**
     * Default constructor for ExplanationOfBenefitItemDetail from an object that MAY NOT contain all required elements.
     */
    function ExplanationOfBenefitItemDetail(source) {
        var _this = _super.call(this, source) || this;
        if (source["adjudication"] !== undefined) {
            _this.adjudication = source.adjudication.map(function (x) { return new fhirModels.ExplanationOfBenefitItemAdjudication(x); });
        }
        if (source["category"] !== undefined) {
            _this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["factor"] !== undefined) {
            _this.factor = source.factor;
        }
        if (source["_factor"] !== undefined) {
            _this._factor = new fhirModels.Element(source._factor);
        }
        if (source["modifier"] !== undefined) {
            _this.modifier = source.modifier.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["net"] !== undefined) {
            _this.net = new fhirModels.Money(source.net);
        }
        if (source["noteNumber"] !== undefined) {
            _this.noteNumber = source.noteNumber.map(function (x) { return (x); });
        }
        if (source["_noteNumber"] !== undefined) {
            _this._noteNumber = source._noteNumber.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["productOrService"] !== undefined) {
            _this.productOrService = new fhirModels.CodeableConcept(source.productOrService);
        }
        if (source["programCode"] !== undefined) {
            _this.programCode = source.programCode.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["quantity"] !== undefined) {
            _this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["revenue"] !== undefined) {
            _this.revenue = new fhirModels.CodeableConcept(source.revenue);
        }
        if (source["sequence"] !== undefined) {
            _this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            _this._sequence = new fhirModels.Element(source._sequence);
        }
        if (source["subDetail"] !== undefined) {
            _this.subDetail = source.subDetail.map(function (x) { return new fhirModels.ExplanationOfBenefitItemDetailSubDetail(x); });
        }
        if (source["udi"] !== undefined) {
            _this.udi = source.udi.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["unitPrice"] !== undefined) {
            _this.unitPrice = new fhirModels.Money(source.unitPrice);
        }
        return _this;
    }
    /**
     * Factory function to create a ExplanationOfBenefitItemDetail from an object that MUST contain all required elements.
     */
    ExplanationOfBenefitItemDetail.CreateStrict = function (source) {
        var dest = new ExplanationOfBenefitItemDetail(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ExplanationOfBenefitItemDetail is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ExplanationOfBenefitItemDetail contains all required elements.
     */
    ExplanationOfBenefitItemDetail.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["productOrService"] === undefined) {
            missingElements.push("productOrService");
        }
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ExplanationOfBenefitItemDetail;
}(fhirModels.BackboneElement));
export { ExplanationOfBenefitItemDetail };
/**
 * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
 */
var ExplanationOfBenefitItem = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitItem, _super);
    /**
     * Default constructor for ExplanationOfBenefitItem from an object that MAY NOT contain all required elements.
     */
    function ExplanationOfBenefitItem(source) {
        var _this = _super.call(this, source) || this;
        if (source["adjudication"] !== undefined) {
            _this.adjudication = source.adjudication.map(function (x) { return new fhirModels.ExplanationOfBenefitItemAdjudication(x); });
        }
        if (source["bodySite"] !== undefined) {
            _this.bodySite = new fhirModels.CodeableConcept(source.bodySite);
        }
        if (source["careTeamSequence"] !== undefined) {
            _this.careTeamSequence = source.careTeamSequence.map(function (x) { return (x); });
        }
        if (source["_careTeamSequence"] !== undefined) {
            _this._careTeamSequence = source._careTeamSequence.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["category"] !== undefined) {
            _this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["detail"] !== undefined) {
            _this.detail = source.detail.map(function (x) { return new fhirModels.ExplanationOfBenefitItemDetail(x); });
        }
        if (source["diagnosisSequence"] !== undefined) {
            _this.diagnosisSequence = source.diagnosisSequence.map(function (x) { return (x); });
        }
        if (source["_diagnosisSequence"] !== undefined) {
            _this._diagnosisSequence = source._diagnosisSequence.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["encounter"] !== undefined) {
            _this.encounter = source.encounter.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["factor"] !== undefined) {
            _this.factor = source.factor;
        }
        if (source["_factor"] !== undefined) {
            _this._factor = new fhirModels.Element(source._factor);
        }
        if (source["informationSequence"] !== undefined) {
            _this.informationSequence = source.informationSequence.map(function (x) { return (x); });
        }
        if (source["_informationSequence"] !== undefined) {
            _this._informationSequence = source._informationSequence.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["locationCodeableConcept"] !== undefined) {
            _this.locationCodeableConcept = new fhirModels.CodeableConcept(source.locationCodeableConcept);
        }
        if (source["locationAddress"] !== undefined) {
            _this.locationAddress = new fhirModels.Address(source.locationAddress);
        }
        if (source["locationReference"] !== undefined) {
            _this.locationReference = new fhirModels.Reference(source.locationReference);
        }
        if (source["modifier"] !== undefined) {
            _this.modifier = source.modifier.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["net"] !== undefined) {
            _this.net = new fhirModels.Money(source.net);
        }
        if (source["noteNumber"] !== undefined) {
            _this.noteNumber = source.noteNumber.map(function (x) { return (x); });
        }
        if (source["_noteNumber"] !== undefined) {
            _this._noteNumber = source._noteNumber.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["procedureSequence"] !== undefined) {
            _this.procedureSequence = source.procedureSequence.map(function (x) { return (x); });
        }
        if (source["_procedureSequence"] !== undefined) {
            _this._procedureSequence = source._procedureSequence.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["productOrService"] !== undefined) {
            _this.productOrService = new fhirModels.CodeableConcept(source.productOrService);
        }
        if (source["programCode"] !== undefined) {
            _this.programCode = source.programCode.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["quantity"] !== undefined) {
            _this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["revenue"] !== undefined) {
            _this.revenue = new fhirModels.CodeableConcept(source.revenue);
        }
        if (source["sequence"] !== undefined) {
            _this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            _this._sequence = new fhirModels.Element(source._sequence);
        }
        if (source["servicedDate"] !== undefined) {
            _this.servicedDate = source.servicedDate;
        }
        if (source["_servicedDate"] !== undefined) {
            _this._servicedDate = new fhirModels.Element(source._servicedDate);
        }
        if (source["servicedPeriod"] !== undefined) {
            _this.servicedPeriod = new fhirModels.Period(source.servicedPeriod);
        }
        if (source["subSite"] !== undefined) {
            _this.subSite = source.subSite.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["udi"] !== undefined) {
            _this.udi = source.udi.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["unitPrice"] !== undefined) {
            _this.unitPrice = new fhirModels.Money(source.unitPrice);
        }
        return _this;
    }
    /**
     * Factory function to create a ExplanationOfBenefitItem from an object that MUST contain all required elements.
     */
    ExplanationOfBenefitItem.CreateStrict = function (source) {
        var dest = new ExplanationOfBenefitItem(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ExplanationOfBenefitItem is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ExplanationOfBenefitItem contains all required elements.
     */
    ExplanationOfBenefitItem.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["productOrService"] === undefined) {
            missingElements.push("productOrService");
        }
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ExplanationOfBenefitItem;
}(fhirModels.BackboneElement));
export { ExplanationOfBenefitItem };
/**
 * The third-tier service adjudications for payor added services.
 */
var ExplanationOfBenefitAddItemDetailSubDetail = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitAddItemDetailSubDetail, _super);
    /**
     * Default constructor for ExplanationOfBenefitAddItemDetailSubDetail from an object that MAY NOT contain all required elements.
     */
    function ExplanationOfBenefitAddItemDetailSubDetail(source) {
        var _this = _super.call(this, source) || this;
        if (source["adjudication"] !== undefined) {
            _this.adjudication = source.adjudication.map(function (x) { return new fhirModels.ExplanationOfBenefitItemAdjudication(x); });
        }
        if (source["factor"] !== undefined) {
            _this.factor = source.factor;
        }
        if (source["_factor"] !== undefined) {
            _this._factor = new fhirModels.Element(source._factor);
        }
        if (source["modifier"] !== undefined) {
            _this.modifier = source.modifier.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["net"] !== undefined) {
            _this.net = new fhirModels.Money(source.net);
        }
        if (source["noteNumber"] !== undefined) {
            _this.noteNumber = source.noteNumber.map(function (x) { return (x); });
        }
        if (source["_noteNumber"] !== undefined) {
            _this._noteNumber = source._noteNumber.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["productOrService"] !== undefined) {
            _this.productOrService = new fhirModels.CodeableConcept(source.productOrService);
        }
        if (source["quantity"] !== undefined) {
            _this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["unitPrice"] !== undefined) {
            _this.unitPrice = new fhirModels.Money(source.unitPrice);
        }
        return _this;
    }
    /**
     * Factory function to create a ExplanationOfBenefitAddItemDetailSubDetail from an object that MUST contain all required elements.
     */
    ExplanationOfBenefitAddItemDetailSubDetail.CreateStrict = function (source) {
        var dest = new ExplanationOfBenefitAddItemDetailSubDetail(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ExplanationOfBenefitAddItemDetailSubDetail is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ExplanationOfBenefitAddItemDetailSubDetail contains all required elements.
     */
    ExplanationOfBenefitAddItemDetailSubDetail.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["productOrService"] === undefined) {
            missingElements.push("productOrService");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ExplanationOfBenefitAddItemDetailSubDetail;
}(fhirModels.BackboneElement));
export { ExplanationOfBenefitAddItemDetailSubDetail };
/**
 * The second-tier service adjudications for payor added services.
 */
var ExplanationOfBenefitAddItemDetail = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitAddItemDetail, _super);
    /**
     * Default constructor for ExplanationOfBenefitAddItemDetail from an object that MAY NOT contain all required elements.
     */
    function ExplanationOfBenefitAddItemDetail(source) {
        var _this = _super.call(this, source) || this;
        if (source["adjudication"] !== undefined) {
            _this.adjudication = source.adjudication.map(function (x) { return new fhirModels.ExplanationOfBenefitItemAdjudication(x); });
        }
        if (source["factor"] !== undefined) {
            _this.factor = source.factor;
        }
        if (source["_factor"] !== undefined) {
            _this._factor = new fhirModels.Element(source._factor);
        }
        if (source["modifier"] !== undefined) {
            _this.modifier = source.modifier.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["net"] !== undefined) {
            _this.net = new fhirModels.Money(source.net);
        }
        if (source["noteNumber"] !== undefined) {
            _this.noteNumber = source.noteNumber.map(function (x) { return (x); });
        }
        if (source["_noteNumber"] !== undefined) {
            _this._noteNumber = source._noteNumber.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["productOrService"] !== undefined) {
            _this.productOrService = new fhirModels.CodeableConcept(source.productOrService);
        }
        if (source["quantity"] !== undefined) {
            _this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["subDetail"] !== undefined) {
            _this.subDetail = source.subDetail.map(function (x) { return new fhirModels.ExplanationOfBenefitAddItemDetailSubDetail(x); });
        }
        if (source["unitPrice"] !== undefined) {
            _this.unitPrice = new fhirModels.Money(source.unitPrice);
        }
        return _this;
    }
    /**
     * Factory function to create a ExplanationOfBenefitAddItemDetail from an object that MUST contain all required elements.
     */
    ExplanationOfBenefitAddItemDetail.CreateStrict = function (source) {
        var dest = new ExplanationOfBenefitAddItemDetail(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ExplanationOfBenefitAddItemDetail is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ExplanationOfBenefitAddItemDetail contains all required elements.
     */
    ExplanationOfBenefitAddItemDetail.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["productOrService"] === undefined) {
            missingElements.push("productOrService");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ExplanationOfBenefitAddItemDetail;
}(fhirModels.BackboneElement));
export { ExplanationOfBenefitAddItemDetail };
/**
 * The first-tier service adjudications for payor added product or service lines.
 */
var ExplanationOfBenefitAddItem = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitAddItem, _super);
    /**
     * Default constructor for ExplanationOfBenefitAddItem from an object that MAY NOT contain all required elements.
     */
    function ExplanationOfBenefitAddItem(source) {
        var _this = _super.call(this, source) || this;
        if (source["adjudication"] !== undefined) {
            _this.adjudication = source.adjudication.map(function (x) { return new fhirModels.ExplanationOfBenefitItemAdjudication(x); });
        }
        if (source["bodySite"] !== undefined) {
            _this.bodySite = new fhirModels.CodeableConcept(source.bodySite);
        }
        if (source["detail"] !== undefined) {
            _this.detail = source.detail.map(function (x) { return new fhirModels.ExplanationOfBenefitAddItemDetail(x); });
        }
        if (source["detailSequence"] !== undefined) {
            _this.detailSequence = source.detailSequence.map(function (x) { return (x); });
        }
        if (source["_detailSequence"] !== undefined) {
            _this._detailSequence = source._detailSequence.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["factor"] !== undefined) {
            _this.factor = source.factor;
        }
        if (source["_factor"] !== undefined) {
            _this._factor = new fhirModels.Element(source._factor);
        }
        if (source["itemSequence"] !== undefined) {
            _this.itemSequence = source.itemSequence.map(function (x) { return (x); });
        }
        if (source["_itemSequence"] !== undefined) {
            _this._itemSequence = source._itemSequence.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["locationCodeableConcept"] !== undefined) {
            _this.locationCodeableConcept = new fhirModels.CodeableConcept(source.locationCodeableConcept);
        }
        if (source["locationAddress"] !== undefined) {
            _this.locationAddress = new fhirModels.Address(source.locationAddress);
        }
        if (source["locationReference"] !== undefined) {
            _this.locationReference = new fhirModels.Reference(source.locationReference);
        }
        if (source["modifier"] !== undefined) {
            _this.modifier = source.modifier.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["net"] !== undefined) {
            _this.net = new fhirModels.Money(source.net);
        }
        if (source["noteNumber"] !== undefined) {
            _this.noteNumber = source.noteNumber.map(function (x) { return (x); });
        }
        if (source["_noteNumber"] !== undefined) {
            _this._noteNumber = source._noteNumber.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["productOrService"] !== undefined) {
            _this.productOrService = new fhirModels.CodeableConcept(source.productOrService);
        }
        if (source["programCode"] !== undefined) {
            _this.programCode = source.programCode.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["provider"] !== undefined) {
            _this.provider = source.provider.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["quantity"] !== undefined) {
            _this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["servicedDate"] !== undefined) {
            _this.servicedDate = source.servicedDate;
        }
        if (source["_servicedDate"] !== undefined) {
            _this._servicedDate = new fhirModels.Element(source._servicedDate);
        }
        if (source["servicedPeriod"] !== undefined) {
            _this.servicedPeriod = new fhirModels.Period(source.servicedPeriod);
        }
        if (source["subDetailSequence"] !== undefined) {
            _this.subDetailSequence = source.subDetailSequence.map(function (x) { return (x); });
        }
        if (source["_subDetailSequence"] !== undefined) {
            _this._subDetailSequence = source._subDetailSequence.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["subSite"] !== undefined) {
            _this.subSite = source.subSite.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["unitPrice"] !== undefined) {
            _this.unitPrice = new fhirModels.Money(source.unitPrice);
        }
        return _this;
    }
    /**
     * Factory function to create a ExplanationOfBenefitAddItem from an object that MUST contain all required elements.
     */
    ExplanationOfBenefitAddItem.CreateStrict = function (source) {
        var dest = new ExplanationOfBenefitAddItem(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ExplanationOfBenefitAddItem is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ExplanationOfBenefitAddItem contains all required elements.
     */
    ExplanationOfBenefitAddItem.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["productOrService"] === undefined) {
            missingElements.push("productOrService");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ExplanationOfBenefitAddItem;
}(fhirModels.BackboneElement));
export { ExplanationOfBenefitAddItem };
/**
 * Totals for amounts submitted, co-pays, benefits payable etc.
 */
var ExplanationOfBenefitTotal = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitTotal, _super);
    /**
     * Default constructor for ExplanationOfBenefitTotal from an object that MAY NOT contain all required elements.
     */
    function ExplanationOfBenefitTotal(source) {
        var _this = _super.call(this, source) || this;
        if (source["amount"] !== undefined) {
            _this.amount = new fhirModels.Money(source.amount);
        }
        if (source["category"] !== undefined) {
            _this.category = new fhirModels.CodeableConcept(source.category);
        }
        return _this;
    }
    /**
     * Factory function to create a ExplanationOfBenefitTotal from an object that MUST contain all required elements.
     */
    ExplanationOfBenefitTotal.CreateStrict = function (source) {
        var dest = new ExplanationOfBenefitTotal(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ExplanationOfBenefitTotal is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ExplanationOfBenefitTotal contains all required elements.
     */
    ExplanationOfBenefitTotal.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["amount"] === undefined) {
            missingElements.push("amount");
        }
        if (this["category"] === undefined) {
            missingElements.push("category");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ExplanationOfBenefitTotal;
}(fhirModels.BackboneElement));
export { ExplanationOfBenefitTotal };
/**
 * Payment details for the adjudication of the claim.
 */
var ExplanationOfBenefitPayment = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitPayment, _super);
    /**
     * Default constructor for ExplanationOfBenefitPayment from an object that MAY NOT contain all required elements.
     */
    function ExplanationOfBenefitPayment(source) {
        var _this = _super.call(this, source) || this;
        if (source["adjustment"] !== undefined) {
            _this.adjustment = new fhirModels.Money(source.adjustment);
        }
        if (source["adjustmentReason"] !== undefined) {
            _this.adjustmentReason = new fhirModels.CodeableConcept(source.adjustmentReason);
        }
        if (source["amount"] !== undefined) {
            _this.amount = new fhirModels.Money(source.amount);
        }
        if (source["date"] !== undefined) {
            _this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            _this._date = new fhirModels.Element(source._date);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = new fhirModels.Identifier(source.identifier);
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    /**
     * Factory function to create a ExplanationOfBenefitPayment from an object that MUST contain all required elements.
     */
    ExplanationOfBenefitPayment.CreateStrict = function (source) {
        var dest = new ExplanationOfBenefitPayment(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ExplanationOfBenefitPayment is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ExplanationOfBenefitPayment contains all required elements.
     */
    ExplanationOfBenefitPayment.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ExplanationOfBenefitPayment;
}(fhirModels.BackboneElement));
export { ExplanationOfBenefitPayment };
/**
 * A note that describes or explains adjudication results in a human readable form.
 */
var ExplanationOfBenefitProcessNote = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitProcessNote, _super);
    /**
     * Default constructor for ExplanationOfBenefitProcessNote from an object that MAY NOT contain all required elements.
     */
    function ExplanationOfBenefitProcessNote(source) {
        var _this = _super.call(this, source) || this;
        if (source["language"] !== undefined) {
            _this.language = new fhirModels.CodeableConcept(source.language);
        }
        if (source["number"] !== undefined) {
            _this.number = source.number;
        }
        if (source["_number"] !== undefined) {
            _this._number = new fhirModels.Element(source._number);
        }
        if (source["text"] !== undefined) {
            _this.text = source.text;
        }
        if (source["_text"] !== undefined) {
            _this._text = new fhirModels.Element(source._text);
        }
        if (source["type"] !== undefined) {
            _this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            _this._type = new fhirModels.Element(source._type);
        }
        return _this;
    }
    /**
     * Factory function to create a ExplanationOfBenefitProcessNote from an object that MUST contain all required elements.
     */
    ExplanationOfBenefitProcessNote.CreateStrict = function (source) {
        var dest = new ExplanationOfBenefitProcessNote(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ExplanationOfBenefitProcessNote is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ExplanationOfBenefitProcessNote contains all required elements.
     */
    ExplanationOfBenefitProcessNote.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ExplanationOfBenefitProcessNote;
}(fhirModels.BackboneElement));
export { ExplanationOfBenefitProcessNote };
/**
 * Code Values for the ExplanationOfBenefit.processNote.type field
 */
export var ExplanationOfBenefitProcessNoteTypeEnum;
(function (ExplanationOfBenefitProcessNoteTypeEnum) {
    ExplanationOfBenefitProcessNoteTypeEnum["DISPLAY"] = "display";
    ExplanationOfBenefitProcessNoteTypeEnum["PRINT"] = "print";
    ExplanationOfBenefitProcessNoteTypeEnum["PRINTOPER"] = "printoper";
})(ExplanationOfBenefitProcessNoteTypeEnum || (ExplanationOfBenefitProcessNoteTypeEnum = {}));
/**
 * Benefits Used to date.
 */
var ExplanationOfBenefitBenefitBalanceFinancial = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitBenefitBalanceFinancial, _super);
    /**
     * Default constructor for ExplanationOfBenefitBenefitBalanceFinancial from an object that MAY NOT contain all required elements.
     */
    function ExplanationOfBenefitBenefitBalanceFinancial(source) {
        var _this = _super.call(this, source) || this;
        if (source["allowedUnsignedInt"] !== undefined) {
            _this.allowedUnsignedInt = source.allowedUnsignedInt;
        }
        if (source["_allowedUnsignedInt"] !== undefined) {
            _this._allowedUnsignedInt = new fhirModels.Element(source._allowedUnsignedInt);
        }
        if (source["allowedString"] !== undefined) {
            _this.allowedString = source.allowedString;
        }
        if (source["_allowedString"] !== undefined) {
            _this._allowedString = new fhirModels.Element(source._allowedString);
        }
        if (source["allowedMoney"] !== undefined) {
            _this.allowedMoney = new fhirModels.Money(source.allowedMoney);
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["usedUnsignedInt"] !== undefined) {
            _this.usedUnsignedInt = source.usedUnsignedInt;
        }
        if (source["_usedUnsignedInt"] !== undefined) {
            _this._usedUnsignedInt = new fhirModels.Element(source._usedUnsignedInt);
        }
        if (source["usedMoney"] !== undefined) {
            _this.usedMoney = new fhirModels.Money(source.usedMoney);
        }
        return _this;
    }
    /**
     * Factory function to create a ExplanationOfBenefitBenefitBalanceFinancial from an object that MUST contain all required elements.
     */
    ExplanationOfBenefitBenefitBalanceFinancial.CreateStrict = function (source) {
        var dest = new ExplanationOfBenefitBenefitBalanceFinancial(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ExplanationOfBenefitBenefitBalanceFinancial is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ExplanationOfBenefitBenefitBalanceFinancial contains all required elements.
     */
    ExplanationOfBenefitBenefitBalanceFinancial.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ExplanationOfBenefitBenefitBalanceFinancial;
}(fhirModels.BackboneElement));
export { ExplanationOfBenefitBenefitBalanceFinancial };
/**
 * Balance by Benefit Category.
 */
var ExplanationOfBenefitBenefitBalance = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitBenefitBalance, _super);
    /**
     * Default constructor for ExplanationOfBenefitBenefitBalance from an object that MAY NOT contain all required elements.
     */
    function ExplanationOfBenefitBenefitBalance(source) {
        var _this = _super.call(this, source) || this;
        if (source["category"] !== undefined) {
            _this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["excluded"] !== undefined) {
            _this.excluded = source.excluded;
        }
        if (source["_excluded"] !== undefined) {
            _this._excluded = new fhirModels.Element(source._excluded);
        }
        if (source["financial"] !== undefined) {
            _this.financial = source.financial.map(function (x) { return new fhirModels.ExplanationOfBenefitBenefitBalanceFinancial(x); });
        }
        if (source["name"] !== undefined) {
            _this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            _this._name = new fhirModels.Element(source._name);
        }
        if (source["network"] !== undefined) {
            _this.network = new fhirModels.CodeableConcept(source.network);
        }
        if (source["term"] !== undefined) {
            _this.term = new fhirModels.CodeableConcept(source.term);
        }
        if (source["unit"] !== undefined) {
            _this.unit = new fhirModels.CodeableConcept(source.unit);
        }
        return _this;
    }
    /**
     * Factory function to create a ExplanationOfBenefitBenefitBalance from an object that MUST contain all required elements.
     */
    ExplanationOfBenefitBenefitBalance.CreateStrict = function (source) {
        var dest = new ExplanationOfBenefitBenefitBalance(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ExplanationOfBenefitBenefitBalance is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ExplanationOfBenefitBenefitBalance contains all required elements.
     */
    ExplanationOfBenefitBenefitBalance.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["category"] === undefined) {
            missingElements.push("category");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ExplanationOfBenefitBenefitBalance;
}(fhirModels.BackboneElement));
export { ExplanationOfBenefitBenefitBalance };
/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
var ExplanationOfBenefit = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefit, _super);
    /**
     * Default constructor for ExplanationOfBenefit from an object that MAY NOT contain all required elements.
     */
    function ExplanationOfBenefit(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "ExplanationOfBenefit";
        if ((source['resourceType'] !== "ExplanationOfBenefit") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a ExplanationOfBenefit';
        }
        if (source["accident"] !== undefined) {
            _this.accident = new fhirModels.ExplanationOfBenefitAccident(source.accident);
        }
        if (source["addItem"] !== undefined) {
            _this.addItem = source.addItem.map(function (x) { return new fhirModels.ExplanationOfBenefitAddItem(x); });
        }
        if (source["adjudication"] !== undefined) {
            _this.adjudication = source.adjudication.map(function (x) { return new fhirModels.ExplanationOfBenefitItemAdjudication(x); });
        }
        if (source["benefitBalance"] !== undefined) {
            _this.benefitBalance = source.benefitBalance.map(function (x) { return new fhirModels.ExplanationOfBenefitBenefitBalance(x); });
        }
        if (source["benefitPeriod"] !== undefined) {
            _this.benefitPeriod = new fhirModels.Period(source.benefitPeriod);
        }
        if (source["billablePeriod"] !== undefined) {
            _this.billablePeriod = new fhirModels.Period(source.billablePeriod);
        }
        if (source["careTeam"] !== undefined) {
            _this.careTeam = source.careTeam.map(function (x) { return new fhirModels.ExplanationOfBenefitCareTeam(x); });
        }
        if (source["claim"] !== undefined) {
            _this.claim = new fhirModels.Reference(source.claim);
        }
        if (source["claimResponse"] !== undefined) {
            _this.claimResponse = new fhirModels.Reference(source.claimResponse);
        }
        if (source["created"] !== undefined) {
            _this.created = source.created;
        }
        if (source["_created"] !== undefined) {
            _this._created = new fhirModels.Element(source._created);
        }
        if (source["diagnosis"] !== undefined) {
            _this.diagnosis = source.diagnosis.map(function (x) { return new fhirModels.ExplanationOfBenefitDiagnosis(x); });
        }
        if (source["disposition"] !== undefined) {
            _this.disposition = source.disposition;
        }
        if (source["_disposition"] !== undefined) {
            _this._disposition = new fhirModels.Element(source._disposition);
        }
        if (source["enterer"] !== undefined) {
            _this.enterer = new fhirModels.Reference(source.enterer);
        }
        if (source["facility"] !== undefined) {
            _this.facility = new fhirModels.Reference(source.facility);
        }
        if (source["form"] !== undefined) {
            _this.form = new fhirModels.Attachment(source.form);
        }
        if (source["formCode"] !== undefined) {
            _this.formCode = new fhirModels.CodeableConcept(source.formCode);
        }
        if (source["fundsReserve"] !== undefined) {
            _this.fundsReserve = new fhirModels.CodeableConcept(source.fundsReserve);
        }
        if (source["fundsReserveRequested"] !== undefined) {
            _this.fundsReserveRequested = new fhirModels.CodeableConcept(source.fundsReserveRequested);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["insurance"] !== undefined) {
            _this.insurance = source.insurance.map(function (x) { return new fhirModels.ExplanationOfBenefitInsurance(x); });
        }
        if (source["insurer"] !== undefined) {
            _this.insurer = new fhirModels.Reference(source.insurer);
        }
        if (source["item"] !== undefined) {
            _this.item = source.item.map(function (x) { return new fhirModels.ExplanationOfBenefitItem(x); });
        }
        if (source["originalPrescription"] !== undefined) {
            _this.originalPrescription = new fhirModels.Reference(source.originalPrescription);
        }
        if (source["outcome"] !== undefined) {
            _this.outcome = source.outcome;
        }
        if (source["_outcome"] !== undefined) {
            _this._outcome = new fhirModels.Element(source._outcome);
        }
        if (source["patient"] !== undefined) {
            _this.patient = new fhirModels.Reference(source.patient);
        }
        if (source["payee"] !== undefined) {
            _this.payee = new fhirModels.ExplanationOfBenefitPayee(source.payee);
        }
        if (source["payment"] !== undefined) {
            _this.payment = new fhirModels.ExplanationOfBenefitPayment(source.payment);
        }
        if (source["preAuthRef"] !== undefined) {
            _this.preAuthRef = source.preAuthRef.map(function (x) { return (x); });
        }
        if (source["_preAuthRef"] !== undefined) {
            _this._preAuthRef = source._preAuthRef.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["preAuthRefPeriod"] !== undefined) {
            _this.preAuthRefPeriod = source.preAuthRefPeriod.map(function (x) { return new fhirModels.Period(x); });
        }
        if (source["precedence"] !== undefined) {
            _this.precedence = source.precedence;
        }
        if (source["_precedence"] !== undefined) {
            _this._precedence = new fhirModels.Element(source._precedence);
        }
        if (source["prescription"] !== undefined) {
            _this.prescription = new fhirModels.Reference(source.prescription);
        }
        if (source["priority"] !== undefined) {
            _this.priority = new fhirModels.CodeableConcept(source.priority);
        }
        if (source["procedure"] !== undefined) {
            _this.procedure = source.procedure.map(function (x) { return new fhirModels.ExplanationOfBenefitProcedure(x); });
        }
        if (source["processNote"] !== undefined) {
            _this.processNote = source.processNote.map(function (x) { return new fhirModels.ExplanationOfBenefitProcessNote(x); });
        }
        if (source["provider"] !== undefined) {
            _this.provider = new fhirModels.Reference(source.provider);
        }
        if (source["referral"] !== undefined) {
            _this.referral = new fhirModels.Reference(source.referral);
        }
        if (source["related"] !== undefined) {
            _this.related = source.related.map(function (x) { return new fhirModels.ExplanationOfBenefitRelated(x); });
        }
        if (source["status"] !== undefined) {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["subType"] !== undefined) {
            _this.subType = new fhirModels.CodeableConcept(source.subType);
        }
        if (source["supportingInfo"] !== undefined) {
            _this.supportingInfo = source.supportingInfo.map(function (x) { return new fhirModels.ExplanationOfBenefitSupportingInfo(x); });
        }
        if (source["total"] !== undefined) {
            _this.total = source.total.map(function (x) { return new fhirModels.ExplanationOfBenefitTotal(x); });
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["use"] !== undefined) {
            _this.use = source.use;
        }
        if (source["_use"] !== undefined) {
            _this._use = new fhirModels.Element(source._use);
        }
        return _this;
    }
    /**
     * Factory function to create a ExplanationOfBenefit from an object that MUST contain all required elements.
     */
    ExplanationOfBenefit.CreateStrict = function (source) {
        var dest = new ExplanationOfBenefit(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ExplanationOfBenefit is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ExplanationOfBenefit contains all required elements.
     */
    ExplanationOfBenefit.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["created"] === undefined) {
            missingElements.push("created");
        }
        if ((this["insurance"] === undefined) || (this["insurance"].length === 0)) {
            missingElements.push("insurance");
        }
        if (this["insurer"] === undefined) {
            missingElements.push("insurer");
        }
        if (this["outcome"] === undefined) {
            missingElements.push("outcome");
        }
        if (this["patient"] === undefined) {
            missingElements.push("patient");
        }
        if (this["provider"] === undefined) {
            missingElements.push("provider");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        if (this["use"] === undefined) {
            missingElements.push("use");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ExplanationOfBenefit;
}(fhirModels.DomainResource));
export { ExplanationOfBenefit };
/**
 * Code Values for the ExplanationOfBenefit.outcome field
 */
export var ExplanationOfBenefitOutcomeEnum;
(function (ExplanationOfBenefitOutcomeEnum) {
    ExplanationOfBenefitOutcomeEnum["QUEUED"] = "queued";
    ExplanationOfBenefitOutcomeEnum["COMPLETE"] = "complete";
    ExplanationOfBenefitOutcomeEnum["ERROR"] = "error";
    ExplanationOfBenefitOutcomeEnum["PARTIAL"] = "partial";
})(ExplanationOfBenefitOutcomeEnum || (ExplanationOfBenefitOutcomeEnum = {}));
/**
 * Code Values for the ExplanationOfBenefit.status field
 */
export var ExplanationOfBenefitStatusEnum;
(function (ExplanationOfBenefitStatusEnum) {
    ExplanationOfBenefitStatusEnum["ACTIVE"] = "active";
    ExplanationOfBenefitStatusEnum["CANCELLED"] = "cancelled";
    ExplanationOfBenefitStatusEnum["DRAFT"] = "draft";
    ExplanationOfBenefitStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(ExplanationOfBenefitStatusEnum || (ExplanationOfBenefitStatusEnum = {}));
/**
 * Code Values for the ExplanationOfBenefit.use field
 */
export var ExplanationOfBenefitUseEnum;
(function (ExplanationOfBenefitUseEnum) {
    ExplanationOfBenefitUseEnum["CLAIM"] = "claim";
    ExplanationOfBenefitUseEnum["PREAUTHORIZATION"] = "preauthorization";
    ExplanationOfBenefitUseEnum["PREDETERMINATION"] = "predetermination";
})(ExplanationOfBenefitUseEnum || (ExplanationOfBenefitUseEnum = {}));
