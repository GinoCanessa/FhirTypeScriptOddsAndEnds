var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * Specific parameters for the ordered item.  For example, the size of the indicated item.
 */
var SupplyRequestParameter = /** @class */ (function (_super) {
    __extends(SupplyRequestParameter, _super);
    /**
     * Default constructor for SupplyRequestParameter from an object that MAY NOT contain all required elements.
     */
    function SupplyRequestParameter(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["valueCodeableConcept"] !== undefined) {
            _this.valueCodeableConcept = new fhirModels.CodeableConcept(source.valueCodeableConcept);
        }
        if (source["valueQuantity"] !== undefined) {
            _this.valueQuantity = new fhirModels.Quantity(source.valueQuantity);
        }
        if (source["valueRange"] !== undefined) {
            _this.valueRange = new fhirModels.Range(source.valueRange);
        }
        if (source["valueBoolean"] !== undefined) {
            _this.valueBoolean = source.valueBoolean;
        }
        if (source["_valueBoolean"] !== undefined) {
            _this._valueBoolean = new fhirModels.Element(source._valueBoolean);
        }
        return _this;
    }
    /**
     * Factory function to create a SupplyRequestParameter from an object that MUST contain all required elements.
     */
    SupplyRequestParameter.CreateStrict = function (source) {
        var dest = new SupplyRequestParameter(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "SupplyRequestParameter is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current SupplyRequestParameter contains all required elements.
     */
    SupplyRequestParameter.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return SupplyRequestParameter;
}(fhirModels.BackboneElement));
export { SupplyRequestParameter };
/**
 * A record of a request for a medication, substance or device used in the healthcare setting.
 */
var SupplyRequest = /** @class */ (function (_super) {
    __extends(SupplyRequest, _super);
    /**
     * Default constructor for SupplyRequest from an object that MAY NOT contain all required elements.
     */
    function SupplyRequest(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "SupplyRequest";
        if ((source['resourceType'] !== "SupplyRequest") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a SupplyRequest';
        }
        if (source["authoredOn"] !== undefined) {
            _this.authoredOn = source.authoredOn;
        }
        if (source["_authoredOn"] !== undefined) {
            _this._authoredOn = new fhirModels.Element(source._authoredOn);
        }
        if (source["category"] !== undefined) {
            _this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["deliverFrom"] !== undefined) {
            _this.deliverFrom = new fhirModels.Reference(source.deliverFrom);
        }
        if (source["deliverTo"] !== undefined) {
            _this.deliverTo = new fhirModels.Reference(source.deliverTo);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["itemCodeableConcept"] !== undefined) {
            _this.itemCodeableConcept = new fhirModels.CodeableConcept(source.itemCodeableConcept);
        }
        if (source["itemReference"] !== undefined) {
            _this.itemReference = new fhirModels.Reference(source.itemReference);
        }
        if (source["occurrenceDateTime"] !== undefined) {
            _this.occurrenceDateTime = source.occurrenceDateTime;
        }
        if (source["_occurrenceDateTime"] !== undefined) {
            _this._occurrenceDateTime = new fhirModels.Element(source._occurrenceDateTime);
        }
        if (source["occurrencePeriod"] !== undefined) {
            _this.occurrencePeriod = new fhirModels.Period(source.occurrencePeriod);
        }
        if (source["occurrenceTiming"] !== undefined) {
            _this.occurrenceTiming = new fhirModels.Timing(source.occurrenceTiming);
        }
        if (source["parameter"] !== undefined) {
            _this.parameter = source.parameter.map(function (x) { return new fhirModels.SupplyRequestParameter(x); });
        }
        if (source["priority"] !== undefined) {
            _this.priority = source.priority;
        }
        if (source["_priority"] !== undefined) {
            _this._priority = new fhirModels.Element(source._priority);
        }
        if (source["quantity"] !== undefined) {
            _this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["reasonCode"] !== undefined) {
            _this.reasonCode = source.reasonCode.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["reasonReference"] !== undefined) {
            _this.reasonReference = source.reasonReference.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["requester"] !== undefined) {
            _this.requester = new fhirModels.Reference(source.requester);
        }
        if (source["status"] !== undefined) {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["supplier"] !== undefined) {
            _this.supplier = source.supplier.map(function (x) { return new fhirModels.Reference(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a SupplyRequest from an object that MUST contain all required elements.
     */
    SupplyRequest.CreateStrict = function (source) {
        var dest = new SupplyRequest(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "SupplyRequest is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current SupplyRequest contains all required elements.
     */
    SupplyRequest.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["quantity"] === undefined) {
            missingElements.push("quantity");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return SupplyRequest;
}(fhirModels.DomainResource));
export { SupplyRequest };
/**
 * Code Values for the SupplyRequest.priority field
 */
export var SupplyRequestPriorityEnum;
(function (SupplyRequestPriorityEnum) {
    SupplyRequestPriorityEnum["ROUTINE"] = "routine";
    SupplyRequestPriorityEnum["URGENT"] = "urgent";
    SupplyRequestPriorityEnum["ASAP"] = "asap";
    SupplyRequestPriorityEnum["STAT"] = "stat";
})(SupplyRequestPriorityEnum || (SupplyRequestPriorityEnum = {}));
/**
 * Code Values for the SupplyRequest.status field
 */
export var SupplyRequestStatusEnum;
(function (SupplyRequestStatusEnum) {
    SupplyRequestStatusEnum["DRAFT"] = "draft";
    SupplyRequestStatusEnum["ACTIVE"] = "active";
    SupplyRequestStatusEnum["SUSPENDED"] = "suspended";
    SupplyRequestStatusEnum["CANCELLED"] = "cancelled";
    SupplyRequestStatusEnum["COMPLETED"] = "completed";
    SupplyRequestStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    SupplyRequestStatusEnum["UNKNOWN"] = "unknown";
})(SupplyRequestStatusEnum || (SupplyRequestStatusEnum = {}));
