var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple RelatedPerson.Communication associations.   If the RelatedPerson does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
 */
var RelatedPersonCommunication = /** @class */ (function (_super) {
    __extends(RelatedPersonCommunication, _super);
    /**
     * Default constructor for RelatedPersonCommunication from an object that MAY NOT contain all required elements.
     */
    function RelatedPersonCommunication(source) {
        var _this = _super.call(this, source) || this;
        if (source["language"] !== undefined) {
            _this.language = new fhirModels.CodeableConcept(source.language);
        }
        if (source["preferred"] !== undefined) {
            _this.preferred = source.preferred;
        }
        if (source["_preferred"] !== undefined) {
            _this._preferred = new fhirModels.Element(source._preferred);
        }
        return _this;
    }
    /**
     * Factory function to create a RelatedPersonCommunication from an object that MUST contain all required elements.
     */
    RelatedPersonCommunication.CreateStrict = function (source) {
        var dest = new RelatedPersonCommunication(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "RelatedPersonCommunication is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current RelatedPersonCommunication contains all required elements.
     */
    RelatedPersonCommunication.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["language"] === undefined) {
            missingElements.push("language");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return RelatedPersonCommunication;
}(fhirModels.BackboneElement));
export { RelatedPersonCommunication };
/**
 * Information about a person that is involved in the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.
 */
var RelatedPerson = /** @class */ (function (_super) {
    __extends(RelatedPerson, _super);
    /**
     * Default constructor for RelatedPerson from an object that MAY NOT contain all required elements.
     */
    function RelatedPerson(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "RelatedPerson";
        if ((source['resourceType'] !== "RelatedPerson") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a RelatedPerson';
        }
        if (source["active"] !== undefined) {
            _this.active = source.active;
        }
        if (source["_active"] !== undefined) {
            _this._active = new fhirModels.Element(source._active);
        }
        if (source["address"] !== undefined) {
            _this.address = source.address.map(function (x) { return new fhirModels.Address(x); });
        }
        if (source["birthDate"] !== undefined) {
            _this.birthDate = source.birthDate;
        }
        if (source["_birthDate"] !== undefined) {
            _this._birthDate = new fhirModels.Element(source._birthDate);
        }
        if (source["communication"] !== undefined) {
            _this.communication = source.communication.map(function (x) { return new fhirModels.RelatedPersonCommunication(x); });
        }
        if (source["gender"] !== undefined) {
            _this.gender = source.gender;
        }
        if (source["_gender"] !== undefined) {
            _this._gender = new fhirModels.Element(source._gender);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["name"] !== undefined) {
            _this.name = source.name.map(function (x) { return new fhirModels.HumanName(x); });
        }
        if (source["patient"] !== undefined) {
            _this.patient = new fhirModels.Reference(source.patient);
        }
        if (source["period"] !== undefined) {
            _this.period = new fhirModels.Period(source.period);
        }
        if (source["photo"] !== undefined) {
            _this.photo = source.photo.map(function (x) { return new fhirModels.Attachment(x); });
        }
        if (source["relationship"] !== undefined) {
            _this.relationship = source.relationship.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["telecom"] !== undefined) {
            _this.telecom = source.telecom.map(function (x) { return new fhirModels.ContactPoint(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a RelatedPerson from an object that MUST contain all required elements.
     */
    RelatedPerson.CreateStrict = function (source) {
        var dest = new RelatedPerson(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "RelatedPerson is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current RelatedPerson contains all required elements.
     */
    RelatedPerson.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["patient"] === undefined) {
            missingElements.push("patient");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return RelatedPerson;
}(fhirModels.DomainResource));
export { RelatedPerson };
/**
 * Code Values for the RelatedPerson.gender field
 */
export var RelatedPersonGenderEnum;
(function (RelatedPersonGenderEnum) {
    RelatedPersonGenderEnum["MALE"] = "male";
    RelatedPersonGenderEnum["FEMALE"] = "female";
    RelatedPersonGenderEnum["OTHER"] = "other";
    RelatedPersonGenderEnum["UNKNOWN"] = "unknown";
})(RelatedPersonGenderEnum || (RelatedPersonGenderEnum = {}));
