var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * The current status is always found in the current version of the resource, not the status history.
 */
var EncounterStatusHistory = /** @class */ (function (_super) {
    __extends(EncounterStatusHistory, _super);
    /**
     * Default constructor for EncounterStatusHistory from an object that MAY NOT contain all required elements.
     */
    function EncounterStatusHistory(source) {
        var _this = _super.call(this, source) || this;
        if (source["period"] !== undefined) {
            _this.period = new fhirModels.Period(source.period);
        }
        if (source["status"] !== undefined) {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        return _this;
    }
    /**
     * Factory function to create a EncounterStatusHistory from an object that MUST contain all required elements.
     */
    EncounterStatusHistory.CreateStrict = function (source) {
        var dest = new EncounterStatusHistory(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "EncounterStatusHistory is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current EncounterStatusHistory contains all required elements.
     */
    EncounterStatusHistory.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["period"] === undefined) {
            missingElements.push("period");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return EncounterStatusHistory;
}(fhirModels.BackboneElement));
export { EncounterStatusHistory };
/**
 * Code Values for the Encounter.statusHistory.status field
 */
export var EncounterStatusHistoryStatusEnum;
(function (EncounterStatusHistoryStatusEnum) {
    EncounterStatusHistoryStatusEnum["PLANNED"] = "planned";
    EncounterStatusHistoryStatusEnum["ARRIVED"] = "arrived";
    EncounterStatusHistoryStatusEnum["TRIAGED"] = "triaged";
    EncounterStatusHistoryStatusEnum["IN_PROGRESS"] = "in-progress";
    EncounterStatusHistoryStatusEnum["ONLEAVE"] = "onleave";
    EncounterStatusHistoryStatusEnum["FINISHED"] = "finished";
    EncounterStatusHistoryStatusEnum["CANCELLED"] = "cancelled";
    EncounterStatusHistoryStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    EncounterStatusHistoryStatusEnum["UNKNOWN"] = "unknown";
})(EncounterStatusHistoryStatusEnum || (EncounterStatusHistoryStatusEnum = {}));
/**
 * The class history permits the tracking of the encounters transitions without needing to go  through the resource history.  This would be used for a case where an admission starts of as an emergency encounter, then transitions into an inpatient scenario. Doing this and not restarting a new encounter ensures that any lab/diagnostic results can more easily follow the patient and not require re-processing and not get lost or cancelled during a kind of discharge from emergency to inpatient.
 */
var EncounterClassHistory = /** @class */ (function (_super) {
    __extends(EncounterClassHistory, _super);
    /**
     * Default constructor for EncounterClassHistory from an object that MAY NOT contain all required elements.
     */
    function EncounterClassHistory(source) {
        var _this = _super.call(this, source) || this;
        if (source["class"] !== undefined) {
            _this["class"] = new fhirModels.Coding(source["class"]);
        }
        if (source["period"] !== undefined) {
            _this.period = new fhirModels.Period(source.period);
        }
        return _this;
    }
    /**
     * Factory function to create a EncounterClassHistory from an object that MUST contain all required elements.
     */
    EncounterClassHistory.CreateStrict = function (source) {
        var dest = new EncounterClassHistory(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "EncounterClassHistory is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current EncounterClassHistory contains all required elements.
     */
    EncounterClassHistory.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["class"] === undefined) {
            missingElements.push("class");
        }
        if (this["period"] === undefined) {
            missingElements.push("period");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return EncounterClassHistory;
}(fhirModels.BackboneElement));
export { EncounterClassHistory };
/**
 * The list of people responsible for providing the service.
 */
var EncounterParticipant = /** @class */ (function (_super) {
    __extends(EncounterParticipant, _super);
    /**
     * Default constructor for EncounterParticipant from an object that MAY NOT contain all required elements.
     */
    function EncounterParticipant(source) {
        var _this = _super.call(this, source) || this;
        if (source["individual"] !== undefined) {
            _this.individual = new fhirModels.Reference(source.individual);
        }
        if (source["period"] !== undefined) {
            _this.period = new fhirModels.Period(source.period);
        }
        if (source["type"] !== undefined) {
            _this.type = source.type.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a EncounterParticipant from an object that MUST contain all required elements.
     */
    EncounterParticipant.CreateStrict = function (source) {
        var dest = new EncounterParticipant(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "EncounterParticipant is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current EncounterParticipant contains all required elements.
     */
    EncounterParticipant.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return EncounterParticipant;
}(fhirModels.BackboneElement));
export { EncounterParticipant };
/**
 * The list of diagnosis relevant to this encounter.
 */
var EncounterDiagnosis = /** @class */ (function (_super) {
    __extends(EncounterDiagnosis, _super);
    /**
     * Default constructor for EncounterDiagnosis from an object that MAY NOT contain all required elements.
     */
    function EncounterDiagnosis(source) {
        var _this = _super.call(this, source) || this;
        if (source["condition"] !== undefined) {
            _this.condition = new fhirModels.Reference(source.condition);
        }
        if (source["rank"] !== undefined) {
            _this.rank = source.rank;
        }
        if (source["_rank"] !== undefined) {
            _this._rank = new fhirModels.Element(source._rank);
        }
        if (source["use"] !== undefined) {
            _this.use = new fhirModels.CodeableConcept(source.use);
        }
        return _this;
    }
    /**
     * Factory function to create a EncounterDiagnosis from an object that MUST contain all required elements.
     */
    EncounterDiagnosis.CreateStrict = function (source) {
        var dest = new EncounterDiagnosis(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "EncounterDiagnosis is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current EncounterDiagnosis contains all required elements.
     */
    EncounterDiagnosis.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["condition"] === undefined) {
            missingElements.push("condition");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return EncounterDiagnosis;
}(fhirModels.BackboneElement));
export { EncounterDiagnosis };
/**
 * An Encounter may cover more than just the inpatient stay. Contexts such as outpatients, community clinics, and aged care facilities are also included.
 * The duration recorded in the period of this encounter covers the entire scope of this hospitalization record.
 */
var EncounterHospitalization = /** @class */ (function (_super) {
    __extends(EncounterHospitalization, _super);
    /**
     * Default constructor for EncounterHospitalization from an object that MAY NOT contain all required elements.
     */
    function EncounterHospitalization(source) {
        var _this = _super.call(this, source) || this;
        if (source["admitSource"] !== undefined) {
            _this.admitSource = new fhirModels.CodeableConcept(source.admitSource);
        }
        if (source["destination"] !== undefined) {
            _this.destination = new fhirModels.Reference(source.destination);
        }
        if (source["dietPreference"] !== undefined) {
            _this.dietPreference = source.dietPreference.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["dischargeDisposition"] !== undefined) {
            _this.dischargeDisposition = new fhirModels.CodeableConcept(source.dischargeDisposition);
        }
        if (source["origin"] !== undefined) {
            _this.origin = new fhirModels.Reference(source.origin);
        }
        if (source["preAdmissionIdentifier"] !== undefined) {
            _this.preAdmissionIdentifier = new fhirModels.Identifier(source.preAdmissionIdentifier);
        }
        if (source["reAdmission"] !== undefined) {
            _this.reAdmission = new fhirModels.CodeableConcept(source.reAdmission);
        }
        if (source["specialArrangement"] !== undefined) {
            _this.specialArrangement = source.specialArrangement.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["specialCourtesy"] !== undefined) {
            _this.specialCourtesy = source.specialCourtesy.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a EncounterHospitalization from an object that MUST contain all required elements.
     */
    EncounterHospitalization.CreateStrict = function (source) {
        var dest = new EncounterHospitalization(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "EncounterHospitalization is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current EncounterHospitalization contains all required elements.
     */
    EncounterHospitalization.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return EncounterHospitalization;
}(fhirModels.BackboneElement));
export { EncounterHospitalization };
/**
 * Virtual encounters can be recorded in the Encounter by specifying a location reference to a location of type "kind" such as "client's home" and an encounter.class = "virtual".
 */
var EncounterLocation = /** @class */ (function (_super) {
    __extends(EncounterLocation, _super);
    /**
     * Default constructor for EncounterLocation from an object that MAY NOT contain all required elements.
     */
    function EncounterLocation(source) {
        var _this = _super.call(this, source) || this;
        if (source["location"] !== undefined) {
            _this.location = new fhirModels.Reference(source.location);
        }
        if (source["period"] !== undefined) {
            _this.period = new fhirModels.Period(source.period);
        }
        if (source["physicalType"] !== undefined) {
            _this.physicalType = new fhirModels.CodeableConcept(source.physicalType);
        }
        if (source["status"] !== undefined) {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        return _this;
    }
    /**
     * Factory function to create a EncounterLocation from an object that MUST contain all required elements.
     */
    EncounterLocation.CreateStrict = function (source) {
        var dest = new EncounterLocation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "EncounterLocation is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current EncounterLocation contains all required elements.
     */
    EncounterLocation.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["location"] === undefined) {
            missingElements.push("location");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return EncounterLocation;
}(fhirModels.BackboneElement));
export { EncounterLocation };
/**
 * Code Values for the Encounter.location.status field
 */
export var EncounterLocationStatusEnum;
(function (EncounterLocationStatusEnum) {
    EncounterLocationStatusEnum["PLANNED"] = "planned";
    EncounterLocationStatusEnum["ACTIVE"] = "active";
    EncounterLocationStatusEnum["RESERVED"] = "reserved";
    EncounterLocationStatusEnum["COMPLETED"] = "completed";
})(EncounterLocationStatusEnum || (EncounterLocationStatusEnum = {}));
/**
 * An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
 */
var Encounter = /** @class */ (function (_super) {
    __extends(Encounter, _super);
    /**
     * Default constructor for Encounter from an object that MAY NOT contain all required elements.
     */
    function Encounter(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "Encounter";
        if ((source['resourceType'] !== "Encounter") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Encounter';
        }
        if (source["account"] !== undefined) {
            _this.account = source.account.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["appointment"] !== undefined) {
            _this.appointment = source.appointment.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["basedOn"] !== undefined) {
            _this.basedOn = source.basedOn.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["class"] !== undefined) {
            _this["class"] = new fhirModels.Coding(source["class"]);
        }
        if (source["classHistory"] !== undefined) {
            _this.classHistory = source.classHistory.map(function (x) { return new fhirModels.EncounterClassHistory(x); });
        }
        if (source["diagnosis"] !== undefined) {
            _this.diagnosis = source.diagnosis.map(function (x) { return new fhirModels.EncounterDiagnosis(x); });
        }
        if (source["episodeOfCare"] !== undefined) {
            _this.episodeOfCare = source.episodeOfCare.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["hospitalization"] !== undefined) {
            _this.hospitalization = new fhirModels.EncounterHospitalization(source.hospitalization);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["length"] !== undefined) {
            _this.length = new fhirModels.Duration(source.length);
        }
        if (source["location"] !== undefined) {
            _this.location = source.location.map(function (x) { return new fhirModels.EncounterLocation(x); });
        }
        if (source["participant"] !== undefined) {
            _this.participant = source.participant.map(function (x) { return new fhirModels.EncounterParticipant(x); });
        }
        if (source["partOf"] !== undefined) {
            _this.partOf = new fhirModels.Reference(source.partOf);
        }
        if (source["period"] !== undefined) {
            _this.period = new fhirModels.Period(source.period);
        }
        if (source["priority"] !== undefined) {
            _this.priority = new fhirModels.CodeableConcept(source.priority);
        }
        if (source["reasonCode"] !== undefined) {
            _this.reasonCode = source.reasonCode.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["reasonReference"] !== undefined) {
            _this.reasonReference = source.reasonReference.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["serviceProvider"] !== undefined) {
            _this.serviceProvider = new fhirModels.Reference(source.serviceProvider);
        }
        if (source["serviceType"] !== undefined) {
            _this.serviceType = new fhirModels.CodeableConcept(source.serviceType);
        }
        if (source["status"] !== undefined) {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["statusHistory"] !== undefined) {
            _this.statusHistory = source.statusHistory.map(function (x) { return new fhirModels.EncounterStatusHistory(x); });
        }
        if (source["subject"] !== undefined) {
            _this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["type"] !== undefined) {
            _this.type = source.type.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a Encounter from an object that MUST contain all required elements.
     */
    Encounter.CreateStrict = function (source) {
        var dest = new Encounter(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "Encounter is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current Encounter contains all required elements.
     */
    Encounter.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["class"] === undefined) {
            missingElements.push("class");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return Encounter;
}(fhirModels.DomainResource));
export { Encounter };
/**
 * Code Values for the Encounter.status field
 */
export var EncounterStatusEnum;
(function (EncounterStatusEnum) {
    EncounterStatusEnum["PLANNED"] = "planned";
    EncounterStatusEnum["ARRIVED"] = "arrived";
    EncounterStatusEnum["TRIAGED"] = "triaged";
    EncounterStatusEnum["IN_PROGRESS"] = "in-progress";
    EncounterStatusEnum["ONLEAVE"] = "onleave";
    EncounterStatusEnum["FINISHED"] = "finished";
    EncounterStatusEnum["CANCELLED"] = "cancelled";
    EncounterStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    EncounterStatusEnum["UNKNOWN"] = "unknown";
})(EncounterStatusEnum || (EncounterStatusEnum = {}));
