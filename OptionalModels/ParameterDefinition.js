var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
 */
var ParameterDefinition = /** @class */ (function (_super) {
    __extends(ParameterDefinition, _super);
    /**
     * Default constructor for ParameterDefinition from an object that MAY NOT contain all required elements.
     */
    function ParameterDefinition(source) {
        var _this = _super.call(this, source) || this;
        if (source["documentation"] !== undefined) {
            _this.documentation = source.documentation;
        }
        if (source["_documentation"] !== undefined) {
            _this._documentation = new fhirModels.Element(source._documentation);
        }
        if (source["max"] !== undefined) {
            _this.max = source.max;
        }
        if (source["_max"] !== undefined) {
            _this._max = new fhirModels.Element(source._max);
        }
        if (source["min"] !== undefined) {
            _this.min = source.min;
        }
        if (source["_min"] !== undefined) {
            _this._min = new fhirModels.Element(source._min);
        }
        if (source["name"] !== undefined) {
            _this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            _this._name = new fhirModels.Element(source._name);
        }
        if (source["profile"] !== undefined) {
            _this.profile = source.profile;
        }
        if (source["_profile"] !== undefined) {
            _this._profile = new fhirModels.Element(source._profile);
        }
        if (source["type"] !== undefined) {
            _this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            _this._type = new fhirModels.Element(source._type);
        }
        if (source["use"] !== undefined) {
            _this.use = source.use;
        }
        if (source["_use"] !== undefined) {
            _this._use = new fhirModels.Element(source._use);
        }
        return _this;
    }
    /**
     * Factory function to create a ParameterDefinition from an object that MUST contain all required elements.
     */
    ParameterDefinition.CreateStrict = function (source) {
        var dest = new ParameterDefinition(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ParameterDefinition is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ParameterDefinition contains all required elements.
     */
    ParameterDefinition.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        if (this["use"] === undefined) {
            missingElements.push("use");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ParameterDefinition;
}(fhirModels.Element));
export { ParameterDefinition };
/**
 * Code Values for the ParameterDefinition.use field
 */
export var ParameterDefinitionUseEnum;
(function (ParameterDefinitionUseEnum) {
    ParameterDefinitionUseEnum["IN"] = "in";
    ParameterDefinitionUseEnum["OUT"] = "out";
})(ParameterDefinitionUseEnum || (ParameterDefinitionUseEnum = {}));
