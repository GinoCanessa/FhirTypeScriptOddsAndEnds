// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels'
import * as fhirInterfaces from '../optionalinterfaces'
/**
 * A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.
 */
export class Contributor extends fhirModels.Element implements fhirInterfaces.IContributor {
  /**
   * Contact details to assist a user in finding and communicating with the contributor.
   */
  contact?: fhirModels.ContactDetail[]|undefined;
  /**
   * The name of the individual or organization responsible for the contribution.
   */
  name?: string|undefined;
  _name?: fhirModels.Element|undefined;
  /**
   * The type of contributor.
   */
  type?: ContributorTypeEnum|undefined;
  _type?: fhirModels.Element|undefined;
  /**
   * Default constructor for Contributor from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.IContributor>) {
    super(source);
    if (source["contact"] !== undefined) { this.contact = source.contact.map((x) => new fhirModels.ContactDetail(x)); }
    if (source["name"] !== undefined) { this.name = source.name; }
    if (source["_name"] !== undefined) { this._name = new fhirModels.Element(source._name); }
    if (source["type"] !== undefined) { this.type = source.type; }
    if (source["_type"] !== undefined) { this._type = new fhirModels.Element(source._type); }
  }
  /**
   * Factory function to create a Contributor from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.IContributor):Contributor {
    var dest:Contributor = new Contributor(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `Contributor is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current Contributor contains all required elements.
   */
  checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["name"] === undefined) { missingElements.push("name"); }
    if (this["type"] === undefined) { missingElements.push("type"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
/**
 * Code Values for the Contributor.type field
 */
export enum ContributorTypeEnum {
  AUTHOR = "author",
  EDITOR = "editor",
  REVIEWER = "reviewer",
  ENDORSER = "endorser",
}
