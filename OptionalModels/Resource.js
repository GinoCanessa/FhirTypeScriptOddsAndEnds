"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Resource = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * This is the base resource type for everything.
 */
class Resource {
    /**
     * Default constructor for Resource from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        /**
         * Resource Type Name
         */
        this.resourceType = 'Resource';
        if (source["id"] !== undefined) {
            this.id = source.id;
        }
        if (source["_id"] !== undefined) {
            this._id = new fhirModels.Element(source._id);
        }
        if (source["implicitRules"] !== undefined) {
            this.implicitRules = source.implicitRules;
        }
        if (source["_implicitRules"] !== undefined) {
            this._implicitRules = new fhirModels.Element(source._implicitRules);
        }
        if (source["language"] !== undefined) {
            this.language = source.language;
        }
        if (source["_language"] !== undefined) {
            this._language = new fhirModels.Element(source._language);
        }
        if (source["meta"] !== undefined) {
            this.meta = new fhirModels.Meta(source.meta);
        }
    }
    /**
     * Factory function to create a Resource from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new Resource(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Resource is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current Resource contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        return missingElements;
    }
}
exports.Resource = Resource;
//# sourceMappingURL=Resource.js.map