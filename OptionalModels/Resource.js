// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * This is the base resource type for everything.
 */
var Resource = /** @class */ (function () {
    /**
     * Default constructor for Resource from an object that MAY NOT contain all required elements.
     */
    function Resource(source) {
        /**
         * Resource Type Name
         */
        this.resourceType = 'Resource';
        if (source["id"] !== undefined) {
            this.id = source.id;
        }
        if (source["_id"] !== undefined) {
            this._id = new fhirModels.Element(source._id);
        }
        if (source["implicitRules"] !== undefined) {
            this.implicitRules = source.implicitRules;
        }
        if (source["_implicitRules"] !== undefined) {
            this._implicitRules = new fhirModels.Element(source._implicitRules);
        }
        if (source["language"] !== undefined) {
            this.language = source.language;
        }
        if (source["_language"] !== undefined) {
            this._language = new fhirModels.Element(source._language);
        }
        if (source["meta"] !== undefined) {
            this.meta = new fhirModels.Meta(source.meta);
        }
    }
    /**
     * Factory function to create a Resource from an object that MUST contain all required elements.
     */
    Resource.CreateStrict = function (source) {
        var dest = new Resource(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "Resource is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current Resource contains all required elements.
     */
    Resource.prototype.checkRequiredElements = function () {
        var missingElements = [];
        return missingElements;
    };
    return Resource;
}());
export { Resource };
