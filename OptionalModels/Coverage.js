var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * For example may be used to identify a class of coverage or employer group, Policy, Plan.
 */
var CoverageClass = /** @class */ (function (_super) {
    __extends(CoverageClass, _super);
    /**
     * Default constructor for CoverageClass from an object that MAY NOT contain all required elements.
     */
    function CoverageClass(source) {
        var _this = _super.call(this, source) || this;
        if (source["name"] !== undefined) {
            _this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            _this._name = new fhirModels.Element(source._name);
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["value"] !== undefined) {
            _this.value = source.value;
        }
        if (source["_value"] !== undefined) {
            _this._value = new fhirModels.Element(source._value);
        }
        return _this;
    }
    /**
     * Factory function to create a CoverageClass from an object that MUST contain all required elements.
     */
    CoverageClass.CreateStrict = function (source) {
        var dest = new CoverageClass(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "CoverageClass is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current CoverageClass contains all required elements.
     */
    CoverageClass.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        if (this["value"] === undefined) {
            missingElements.push("value");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return CoverageClass;
}(fhirModels.BackboneElement));
export { CoverageClass };
/**
 * A suite of codes indicating exceptions or reductions to patient costs and their effective periods.
 */
var CoverageCostToBeneficiaryException = /** @class */ (function (_super) {
    __extends(CoverageCostToBeneficiaryException, _super);
    /**
     * Default constructor for CoverageCostToBeneficiaryException from an object that MAY NOT contain all required elements.
     */
    function CoverageCostToBeneficiaryException(source) {
        var _this = _super.call(this, source) || this;
        if (source["period"] !== undefined) {
            _this.period = new fhirModels.Period(source.period);
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    /**
     * Factory function to create a CoverageCostToBeneficiaryException from an object that MUST contain all required elements.
     */
    CoverageCostToBeneficiaryException.CreateStrict = function (source) {
        var dest = new CoverageCostToBeneficiaryException(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "CoverageCostToBeneficiaryException is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current CoverageCostToBeneficiaryException contains all required elements.
     */
    CoverageCostToBeneficiaryException.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return CoverageCostToBeneficiaryException;
}(fhirModels.BackboneElement));
export { CoverageCostToBeneficiaryException };
/**
 * For example by knowing the patient visit co-pay, the provider can collect the amount prior to undertaking treatment.
 */
var CoverageCostToBeneficiary = /** @class */ (function (_super) {
    __extends(CoverageCostToBeneficiary, _super);
    /**
     * Default constructor for CoverageCostToBeneficiary from an object that MAY NOT contain all required elements.
     */
    function CoverageCostToBeneficiary(source) {
        var _this = _super.call(this, source) || this;
        if (source["exception"] !== undefined) {
            _this.exception = source.exception.map(function (x) { return new fhirModels.CoverageCostToBeneficiaryException(x); });
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["valueQuantity"] !== undefined) {
            _this.valueQuantity = new fhirModels.Quantity(source.valueQuantity);
        }
        if (source["valueMoney"] !== undefined) {
            _this.valueMoney = new fhirModels.Money(source.valueMoney);
        }
        return _this;
    }
    /**
     * Factory function to create a CoverageCostToBeneficiary from an object that MUST contain all required elements.
     */
    CoverageCostToBeneficiary.CreateStrict = function (source) {
        var dest = new CoverageCostToBeneficiary(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "CoverageCostToBeneficiary is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current CoverageCostToBeneficiary contains all required elements.
     */
    CoverageCostToBeneficiary.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return CoverageCostToBeneficiary;
}(fhirModels.BackboneElement));
export { CoverageCostToBeneficiary };
/**
 * Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment.
 */
var Coverage = /** @class */ (function (_super) {
    __extends(Coverage, _super);
    /**
     * Default constructor for Coverage from an object that MAY NOT contain all required elements.
     */
    function Coverage(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "Coverage";
        if ((source['resourceType'] !== "Coverage") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Coverage';
        }
        if (source["beneficiary"] !== undefined) {
            _this.beneficiary = new fhirModels.Reference(source.beneficiary);
        }
        if (source["class"] !== undefined) {
            _this["class"] = source["class"].map(function (x) { return new fhirModels.CoverageClass(x); });
        }
        if (source["contract"] !== undefined) {
            _this.contract = source.contract.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["costToBeneficiary"] !== undefined) {
            _this.costToBeneficiary = source.costToBeneficiary.map(function (x) { return new fhirModels.CoverageCostToBeneficiary(x); });
        }
        if (source["dependent"] !== undefined) {
            _this.dependent = source.dependent;
        }
        if (source["_dependent"] !== undefined) {
            _this._dependent = new fhirModels.Element(source._dependent);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["network"] !== undefined) {
            _this.network = source.network;
        }
        if (source["_network"] !== undefined) {
            _this._network = new fhirModels.Element(source._network);
        }
        if (source["order"] !== undefined) {
            _this.order = source.order;
        }
        if (source["_order"] !== undefined) {
            _this._order = new fhirModels.Element(source._order);
        }
        if (source["payor"] !== undefined) {
            _this.payor = source.payor.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["period"] !== undefined) {
            _this.period = new fhirModels.Period(source.period);
        }
        if (source["policyHolder"] !== undefined) {
            _this.policyHolder = new fhirModels.Reference(source.policyHolder);
        }
        if (source["relationship"] !== undefined) {
            _this.relationship = new fhirModels.CodeableConcept(source.relationship);
        }
        if (source["status"] !== undefined) {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["subrogation"] !== undefined) {
            _this.subrogation = source.subrogation;
        }
        if (source["_subrogation"] !== undefined) {
            _this._subrogation = new fhirModels.Element(source._subrogation);
        }
        if (source["subscriber"] !== undefined) {
            _this.subscriber = new fhirModels.Reference(source.subscriber);
        }
        if (source["subscriberId"] !== undefined) {
            _this.subscriberId = source.subscriberId;
        }
        if (source["_subscriberId"] !== undefined) {
            _this._subscriberId = new fhirModels.Element(source._subscriberId);
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    /**
     * Factory function to create a Coverage from an object that MUST contain all required elements.
     */
    Coverage.CreateStrict = function (source) {
        var dest = new Coverage(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "Coverage is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current Coverage contains all required elements.
     */
    Coverage.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["beneficiary"] === undefined) {
            missingElements.push("beneficiary");
        }
        if ((this["payor"] === undefined) || (this["payor"].length === 0)) {
            missingElements.push("payor");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return Coverage;
}(fhirModels.DomainResource));
export { Coverage };
/**
 * Code Values for the Coverage.status field
 */
export var CoverageStatusEnum;
(function (CoverageStatusEnum) {
    CoverageStatusEnum["ACTIVE"] = "active";
    CoverageStatusEnum["CANCELLED"] = "cancelled";
    CoverageStatusEnum["DRAFT"] = "draft";
    CoverageStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(CoverageStatusEnum || (CoverageStatusEnum = {}));
