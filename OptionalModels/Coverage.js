"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoverageStatusEnum = exports.Coverage = exports.CoverageCostToBeneficiary = exports.CoverageCostToBeneficiaryException = exports.CoverageClass = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * For example may be used to identify a class of coverage or employer group, Policy, Plan.
 */
class CoverageClass extends fhirModels.BackboneElement {
    /**
     * Default constructor for CoverageClass from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["value"] !== undefined) {
            this.value = source.value;
        }
        if (source["_value"] !== undefined) {
            this._value = new fhirModels.Element(source._value);
        }
    }
    /**
     * Factory function to create a CoverageClass from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new CoverageClass(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `CoverageClass is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current CoverageClass contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        if (this["value"] === undefined) {
            missingElements.push("value");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.CoverageClass = CoverageClass;
/**
 * A suite of codes indicating exceptions or reductions to patient costs and their effective periods.
 */
class CoverageCostToBeneficiaryException extends fhirModels.BackboneElement {
    /**
     * Default constructor for CoverageCostToBeneficiaryException from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["period"] !== undefined) {
            this.period = new fhirModels.Period(source.period);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
    /**
     * Factory function to create a CoverageCostToBeneficiaryException from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new CoverageCostToBeneficiaryException(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `CoverageCostToBeneficiaryException is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current CoverageCostToBeneficiaryException contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.CoverageCostToBeneficiaryException = CoverageCostToBeneficiaryException;
/**
 * For example by knowing the patient visit co-pay, the provider can collect the amount prior to undertaking treatment.
 */
class CoverageCostToBeneficiary extends fhirModels.BackboneElement {
    /**
     * Default constructor for CoverageCostToBeneficiary from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["exception"] !== undefined) {
            this.exception = source.exception.map((x) => new fhirModels.CoverageCostToBeneficiaryException(x));
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["valueQuantity"] !== undefined) {
            this.valueQuantity = new fhirModels.Quantity(source.valueQuantity);
        }
        if (source["valueMoney"] !== undefined) {
            this.valueMoney = new fhirModels.Money(source.valueMoney);
        }
    }
    /**
     * Factory function to create a CoverageCostToBeneficiary from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new CoverageCostToBeneficiary(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `CoverageCostToBeneficiary is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current CoverageCostToBeneficiary contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.CoverageCostToBeneficiary = CoverageCostToBeneficiary;
/**
 * Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment.
 */
class Coverage extends fhirModels.DomainResource {
    /**
     * Default constructor for Coverage from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "Coverage";
        if ((source['resourceType'] !== "Coverage") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Coverage';
        }
        if (source["beneficiary"] !== undefined) {
            this.beneficiary = new fhirModels.Reference(source.beneficiary);
        }
        if (source["class"] !== undefined) {
            this.class = source.class.map((x) => new fhirModels.CoverageClass(x));
        }
        if (source["contract"] !== undefined) {
            this.contract = source.contract.map((x) => new fhirModels.Reference(x));
        }
        if (source["costToBeneficiary"] !== undefined) {
            this.costToBeneficiary = source.costToBeneficiary.map((x) => new fhirModels.CoverageCostToBeneficiary(x));
        }
        if (source["dependent"] !== undefined) {
            this.dependent = source.dependent;
        }
        if (source["_dependent"] !== undefined) {
            this._dependent = new fhirModels.Element(source._dependent);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["network"] !== undefined) {
            this.network = source.network;
        }
        if (source["_network"] !== undefined) {
            this._network = new fhirModels.Element(source._network);
        }
        if (source["order"] !== undefined) {
            this.order = source.order;
        }
        if (source["_order"] !== undefined) {
            this._order = new fhirModels.Element(source._order);
        }
        if (source["payor"] !== undefined) {
            this.payor = source.payor.map((x) => new fhirModels.Reference(x));
        }
        if (source["period"] !== undefined) {
            this.period = new fhirModels.Period(source.period);
        }
        if (source["policyHolder"] !== undefined) {
            this.policyHolder = new fhirModels.Reference(source.policyHolder);
        }
        if (source["relationship"] !== undefined) {
            this.relationship = new fhirModels.CodeableConcept(source.relationship);
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["subrogation"] !== undefined) {
            this.subrogation = source.subrogation;
        }
        if (source["_subrogation"] !== undefined) {
            this._subrogation = new fhirModels.Element(source._subrogation);
        }
        if (source["subscriber"] !== undefined) {
            this.subscriber = new fhirModels.Reference(source.subscriber);
        }
        if (source["subscriberId"] !== undefined) {
            this.subscriberId = source.subscriberId;
        }
        if (source["_subscriberId"] !== undefined) {
            this._subscriberId = new fhirModels.Element(source._subscriberId);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
    /**
     * Factory function to create a Coverage from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new Coverage(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Coverage is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current Coverage contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["beneficiary"] === undefined) {
            missingElements.push("beneficiary");
        }
        if ((this["payor"] === undefined) || (this["payor"].length === 0)) {
            missingElements.push("payor");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.Coverage = Coverage;
/**
 * Code Values for the Coverage.status field
 */
var CoverageStatusEnum;
(function (CoverageStatusEnum) {
    CoverageStatusEnum["ACTIVE"] = "active";
    CoverageStatusEnum["CANCELLED"] = "cancelled";
    CoverageStatusEnum["DRAFT"] = "draft";
    CoverageStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(CoverageStatusEnum = exports.CoverageStatusEnum || (exports.CoverageStatusEnum = {}));
//# sourceMappingURL=Coverage.js.map