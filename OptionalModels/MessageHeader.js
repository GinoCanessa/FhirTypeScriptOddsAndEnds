var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * There SHOULD be at least one destination, but in some circumstances, the source system is unaware of any particular destination system.
 */
var MessageHeaderDestination = /** @class */ (function (_super) {
    __extends(MessageHeaderDestination, _super);
    /**
     * Default constructor for MessageHeaderDestination from an object that MAY NOT contain all required elements.
     */
    function MessageHeaderDestination(source) {
        var _this = _super.call(this, source) || this;
        if (source["endpoint"] !== undefined) {
            _this.endpoint = source.endpoint;
        }
        if (source["_endpoint"] !== undefined) {
            _this._endpoint = new fhirModels.Element(source._endpoint);
        }
        if (source["name"] !== undefined) {
            _this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            _this._name = new fhirModels.Element(source._name);
        }
        if (source["receiver"] !== undefined) {
            _this.receiver = new fhirModels.Reference(source.receiver);
        }
        if (source["target"] !== undefined) {
            _this.target = new fhirModels.Reference(source.target);
        }
        return _this;
    }
    /**
     * Factory function to create a MessageHeaderDestination from an object that MUST contain all required elements.
     */
    MessageHeaderDestination.CreateStrict = function (source) {
        var dest = new MessageHeaderDestination(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "MessageHeaderDestination is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current MessageHeaderDestination contains all required elements.
     */
    MessageHeaderDestination.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["endpoint"] === undefined) {
            missingElements.push("endpoint");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return MessageHeaderDestination;
}(fhirModels.BackboneElement));
export { MessageHeaderDestination };
/**
 * The source application from which this message originated.
 */
var MessageHeaderSource = /** @class */ (function (_super) {
    __extends(MessageHeaderSource, _super);
    /**
     * Default constructor for MessageHeaderSource from an object that MAY NOT contain all required elements.
     */
    function MessageHeaderSource(source) {
        var _this = _super.call(this, source) || this;
        if (source["contact"] !== undefined) {
            _this.contact = new fhirModels.ContactPoint(source.contact);
        }
        if (source["endpoint"] !== undefined) {
            _this.endpoint = source.endpoint;
        }
        if (source["_endpoint"] !== undefined) {
            _this._endpoint = new fhirModels.Element(source._endpoint);
        }
        if (source["name"] !== undefined) {
            _this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            _this._name = new fhirModels.Element(source._name);
        }
        if (source["software"] !== undefined) {
            _this.software = source.software;
        }
        if (source["_software"] !== undefined) {
            _this._software = new fhirModels.Element(source._software);
        }
        if (source["version"] !== undefined) {
            _this.version = source.version;
        }
        if (source["_version"] !== undefined) {
            _this._version = new fhirModels.Element(source._version);
        }
        return _this;
    }
    /**
     * Factory function to create a MessageHeaderSource from an object that MUST contain all required elements.
     */
    MessageHeaderSource.CreateStrict = function (source) {
        var dest = new MessageHeaderSource(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "MessageHeaderSource is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current MessageHeaderSource contains all required elements.
     */
    MessageHeaderSource.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["endpoint"] === undefined) {
            missingElements.push("endpoint");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return MessageHeaderSource;
}(fhirModels.BackboneElement));
export { MessageHeaderSource };
/**
 * Information about the message that this message is a response to.  Only present if this message is a response.
 */
var MessageHeaderResponse = /** @class */ (function (_super) {
    __extends(MessageHeaderResponse, _super);
    /**
     * Default constructor for MessageHeaderResponse from an object that MAY NOT contain all required elements.
     */
    function MessageHeaderResponse(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            _this._code = new fhirModels.Element(source._code);
        }
        if (source["details"] !== undefined) {
            _this.details = new fhirModels.Reference(source.details);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier;
        }
        if (source["_identifier"] !== undefined) {
            _this._identifier = new fhirModels.Element(source._identifier);
        }
        return _this;
    }
    /**
     * Factory function to create a MessageHeaderResponse from an object that MUST contain all required elements.
     */
    MessageHeaderResponse.CreateStrict = function (source) {
        var dest = new MessageHeaderResponse(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "MessageHeaderResponse is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current MessageHeaderResponse contains all required elements.
     */
    MessageHeaderResponse.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        if (this["identifier"] === undefined) {
            missingElements.push("identifier");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return MessageHeaderResponse;
}(fhirModels.BackboneElement));
export { MessageHeaderResponse };
/**
 * Code Values for the MessageHeader.response.code field
 */
export var MessageHeaderResponseCodeEnum;
(function (MessageHeaderResponseCodeEnum) {
    MessageHeaderResponseCodeEnum["OK"] = "ok";
    MessageHeaderResponseCodeEnum["TRANSIENT_ERROR"] = "transient-error";
    MessageHeaderResponseCodeEnum["FATAL_ERROR"] = "fatal-error";
})(MessageHeaderResponseCodeEnum || (MessageHeaderResponseCodeEnum = {}));
/**
 * The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
 */
var MessageHeader = /** @class */ (function (_super) {
    __extends(MessageHeader, _super);
    /**
     * Default constructor for MessageHeader from an object that MAY NOT contain all required elements.
     */
    function MessageHeader(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "MessageHeader";
        if ((source['resourceType'] !== "MessageHeader") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a MessageHeader';
        }
        if (source["author"] !== undefined) {
            _this.author = new fhirModels.Reference(source.author);
        }
        if (source["definition"] !== undefined) {
            _this.definition = source.definition;
        }
        if (source["_definition"] !== undefined) {
            _this._definition = new fhirModels.Element(source._definition);
        }
        if (source["destination"] !== undefined) {
            _this.destination = source.destination.map(function (x) { return new fhirModels.MessageHeaderDestination(x); });
        }
        if (source["enterer"] !== undefined) {
            _this.enterer = new fhirModels.Reference(source.enterer);
        }
        if (source["eventCoding"] !== undefined) {
            _this.eventCoding = new fhirModels.Coding(source.eventCoding);
        }
        if (source["eventUri"] !== undefined) {
            _this.eventUri = source.eventUri;
        }
        if (source["_eventUri"] !== undefined) {
            _this._eventUri = new fhirModels.Element(source._eventUri);
        }
        if (source["focus"] !== undefined) {
            _this.focus = source.focus.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["reason"] !== undefined) {
            _this.reason = new fhirModels.CodeableConcept(source.reason);
        }
        if (source["response"] !== undefined) {
            _this.response = new fhirModels.MessageHeaderResponse(source.response);
        }
        if (source["responsible"] !== undefined) {
            _this.responsible = new fhirModels.Reference(source.responsible);
        }
        if (source["sender"] !== undefined) {
            _this.sender = new fhirModels.Reference(source.sender);
        }
        if (source["source"] !== undefined) {
            _this.source = new fhirModels.MessageHeaderSource(source.source);
        }
        return _this;
    }
    /**
     * Factory function to create a MessageHeader from an object that MUST contain all required elements.
     */
    MessageHeader.CreateStrict = function (source) {
        var dest = new MessageHeader(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "MessageHeader is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current MessageHeader contains all required elements.
     */
    MessageHeader.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["source"] === undefined) {
            missingElements.push("source");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return MessageHeader;
}(fhirModels.DomainResource));
export { MessageHeader };
