"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dosage = exports.DosageDoseAndRate = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * The amount of medication administered.
 */
class DosageDoseAndRate extends fhirModels.Element {
    /**
     * Default constructor for DosageDoseAndRate from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["doseRange"] !== undefined) {
            this.doseRange = new fhirModels.Range(source.doseRange);
        }
        if (source["doseQuantity"] !== undefined) {
            this.doseQuantity = new fhirModels.Quantity(source.doseQuantity);
        }
        if (source["rateRatio"] !== undefined) {
            this.rateRatio = new fhirModels.Ratio(source.rateRatio);
        }
        if (source["rateRange"] !== undefined) {
            this.rateRange = new fhirModels.Range(source.rateRange);
        }
        if (source["rateQuantity"] !== undefined) {
            this.rateQuantity = new fhirModels.Quantity(source.rateQuantity);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
    /**
     * Factory function to create a DosageDoseAndRate from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new DosageDoseAndRate(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `DosageDoseAndRate is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current DosageDoseAndRate contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.DosageDoseAndRate = DosageDoseAndRate;
/**
 * Indicates how the medication is/was taken or should be taken by the patient.
 */
class Dosage extends fhirModels.BackboneElement {
    /**
     * Default constructor for Dosage from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["additionalInstruction"] !== undefined) {
            this.additionalInstruction = source.additionalInstruction.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["asNeededBoolean"] !== undefined) {
            this.asNeededBoolean = source.asNeededBoolean;
        }
        if (source["_asNeededBoolean"] !== undefined) {
            this._asNeededBoolean = new fhirModels.Element(source._asNeededBoolean);
        }
        if (source["asNeededCodeableConcept"] !== undefined) {
            this.asNeededCodeableConcept = new fhirModels.CodeableConcept(source.asNeededCodeableConcept);
        }
        if (source["doseAndRate"] !== undefined) {
            this.doseAndRate = source.doseAndRate.map((x) => new fhirModels.DosageDoseAndRate(x));
        }
        if (source["maxDosePerAdministration"] !== undefined) {
            this.maxDosePerAdministration = new fhirModels.Quantity(source.maxDosePerAdministration);
        }
        if (source["maxDosePerLifetime"] !== undefined) {
            this.maxDosePerLifetime = new fhirModels.Quantity(source.maxDosePerLifetime);
        }
        if (source["maxDosePerPeriod"] !== undefined) {
            this.maxDosePerPeriod = new fhirModels.Ratio(source.maxDosePerPeriod);
        }
        if (source["method"] !== undefined) {
            this.method = new fhirModels.CodeableConcept(source.method);
        }
        if (source["patientInstruction"] !== undefined) {
            this.patientInstruction = source.patientInstruction;
        }
        if (source["_patientInstruction"] !== undefined) {
            this._patientInstruction = new fhirModels.Element(source._patientInstruction);
        }
        if (source["route"] !== undefined) {
            this.route = new fhirModels.CodeableConcept(source.route);
        }
        if (source["sequence"] !== undefined) {
            this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            this._sequence = new fhirModels.Element(source._sequence);
        }
        if (source["site"] !== undefined) {
            this.site = new fhirModels.CodeableConcept(source.site);
        }
        if (source["text"] !== undefined) {
            this.text = source.text;
        }
        if (source["_text"] !== undefined) {
            this._text = new fhirModels.Element(source._text);
        }
        if (source["timing"] !== undefined) {
            this.timing = new fhirModels.Timing(source.timing);
        }
    }
    /**
     * Factory function to create a Dosage from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new Dosage(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Dosage is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current Dosage contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.Dosage = Dosage;
//# sourceMappingURL=Dosage.js.map