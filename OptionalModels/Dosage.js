var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * The amount of medication administered.
 */
var DosageDoseAndRate = /** @class */ (function (_super) {
    __extends(DosageDoseAndRate, _super);
    /**
     * Default constructor for DosageDoseAndRate from an object that MAY NOT contain all required elements.
     */
    function DosageDoseAndRate(source) {
        var _this = _super.call(this, source) || this;
        if (source["doseRange"] !== undefined) {
            _this.doseRange = new fhirModels.Range(source.doseRange);
        }
        if (source["doseQuantity"] !== undefined) {
            _this.doseQuantity = new fhirModels.Quantity(source.doseQuantity);
        }
        if (source["rateRatio"] !== undefined) {
            _this.rateRatio = new fhirModels.Ratio(source.rateRatio);
        }
        if (source["rateRange"] !== undefined) {
            _this.rateRange = new fhirModels.Range(source.rateRange);
        }
        if (source["rateQuantity"] !== undefined) {
            _this.rateQuantity = new fhirModels.Quantity(source.rateQuantity);
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    /**
     * Factory function to create a DosageDoseAndRate from an object that MUST contain all required elements.
     */
    DosageDoseAndRate.CreateStrict = function (source) {
        var dest = new DosageDoseAndRate(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "DosageDoseAndRate is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current DosageDoseAndRate contains all required elements.
     */
    DosageDoseAndRate.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return DosageDoseAndRate;
}(fhirModels.Element));
export { DosageDoseAndRate };
/**
 * Indicates how the medication is/was taken or should be taken by the patient.
 */
var Dosage = /** @class */ (function (_super) {
    __extends(Dosage, _super);
    /**
     * Default constructor for Dosage from an object that MAY NOT contain all required elements.
     */
    function Dosage(source) {
        var _this = _super.call(this, source) || this;
        if (source["additionalInstruction"] !== undefined) {
            _this.additionalInstruction = source.additionalInstruction.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["asNeededBoolean"] !== undefined) {
            _this.asNeededBoolean = source.asNeededBoolean;
        }
        if (source["_asNeededBoolean"] !== undefined) {
            _this._asNeededBoolean = new fhirModels.Element(source._asNeededBoolean);
        }
        if (source["asNeededCodeableConcept"] !== undefined) {
            _this.asNeededCodeableConcept = new fhirModels.CodeableConcept(source.asNeededCodeableConcept);
        }
        if (source["doseAndRate"] !== undefined) {
            _this.doseAndRate = source.doseAndRate.map(function (x) { return new fhirModels.DosageDoseAndRate(x); });
        }
        if (source["maxDosePerAdministration"] !== undefined) {
            _this.maxDosePerAdministration = new fhirModels.Quantity(source.maxDosePerAdministration);
        }
        if (source["maxDosePerLifetime"] !== undefined) {
            _this.maxDosePerLifetime = new fhirModels.Quantity(source.maxDosePerLifetime);
        }
        if (source["maxDosePerPeriod"] !== undefined) {
            _this.maxDosePerPeriod = new fhirModels.Ratio(source.maxDosePerPeriod);
        }
        if (source["method"] !== undefined) {
            _this.method = new fhirModels.CodeableConcept(source.method);
        }
        if (source["patientInstruction"] !== undefined) {
            _this.patientInstruction = source.patientInstruction;
        }
        if (source["_patientInstruction"] !== undefined) {
            _this._patientInstruction = new fhirModels.Element(source._patientInstruction);
        }
        if (source["route"] !== undefined) {
            _this.route = new fhirModels.CodeableConcept(source.route);
        }
        if (source["sequence"] !== undefined) {
            _this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            _this._sequence = new fhirModels.Element(source._sequence);
        }
        if (source["site"] !== undefined) {
            _this.site = new fhirModels.CodeableConcept(source.site);
        }
        if (source["text"] !== undefined) {
            _this.text = source.text;
        }
        if (source["_text"] !== undefined) {
            _this._text = new fhirModels.Element(source._text);
        }
        if (source["timing"] !== undefined) {
            _this.timing = new fhirModels.Timing(source.timing);
        }
        return _this;
    }
    /**
     * Factory function to create a Dosage from an object that MUST contain all required elements.
     */
    Dosage.CreateStrict = function (source) {
        var dest = new Dosage(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "Dosage is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current Dosage contains all required elements.
     */
    Dosage.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return Dosage;
}(fhirModels.BackboneElement));
export { Dosage };
