var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
 */
var Quantity = /** @class */ (function (_super) {
    __extends(Quantity, _super);
    /**
     * Default constructor for Quantity from an object that MAY NOT contain all required elements.
     */
    function Quantity(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            _this._code = new fhirModels.Element(source._code);
        }
        if (source["comparator"] !== undefined) {
            _this.comparator = source.comparator;
        }
        if (source["_comparator"] !== undefined) {
            _this._comparator = new fhirModels.Element(source._comparator);
        }
        if (source["system"] !== undefined) {
            _this.system = source.system;
        }
        if (source["_system"] !== undefined) {
            _this._system = new fhirModels.Element(source._system);
        }
        if (source["unit"] !== undefined) {
            _this.unit = source.unit;
        }
        if (source["_unit"] !== undefined) {
            _this._unit = new fhirModels.Element(source._unit);
        }
        if (source["value"] !== undefined) {
            _this.value = source.value;
        }
        if (source["_value"] !== undefined) {
            _this._value = new fhirModels.Element(source._value);
        }
        return _this;
    }
    /**
     * Factory function to create a Quantity from an object that MUST contain all required elements.
     */
    Quantity.CreateStrict = function (source) {
        var dest = new Quantity(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "Quantity is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current Quantity contains all required elements.
     */
    Quantity.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return Quantity;
}(fhirModels.Element));
export { Quantity };
/**
 * Code Values for the Quantity.comparator field
 */
export var QuantityComparatorEnum;
(function (QuantityComparatorEnum) {
    QuantityComparatorEnum["LESS_THAN"] = "<";
    QuantityComparatorEnum["LESS_THAN_OR_EQUALS"] = "<=";
    QuantityComparatorEnum["GREATER_THAN_OR_EQUALS"] = ">=";
    QuantityComparatorEnum["GREATER_THAN"] = ">";
})(QuantityComparatorEnum || (QuantityComparatorEnum = {}));
