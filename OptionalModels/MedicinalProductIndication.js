"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MedicinalProductIndication = exports.MedicinalProductIndicationOtherTherapy = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
 */
class MedicinalProductIndicationOtherTherapy extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicinalProductIndicationOtherTherapy from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["medicationCodeableConcept"] !== undefined) {
            this.medicationCodeableConcept = new fhirModels.CodeableConcept(source.medicationCodeableConcept);
        }
        if (source["medicationReference"] !== undefined) {
            this.medicationReference = new fhirModels.Reference(source.medicationReference);
        }
        if (source["therapyRelationshipType"] !== undefined) {
            this.therapyRelationshipType = new fhirModels.CodeableConcept(source.therapyRelationshipType);
        }
    }
    /**
     * Factory function to create a MedicinalProductIndicationOtherTherapy from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MedicinalProductIndicationOtherTherapy(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProductIndicationOtherTherapy is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MedicinalProductIndicationOtherTherapy contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["therapyRelationshipType"] === undefined) {
            missingElements.push("therapyRelationshipType");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MedicinalProductIndicationOtherTherapy = MedicinalProductIndicationOtherTherapy;
/**
 * Indication for the Medicinal Product.
 */
class MedicinalProductIndication extends fhirModels.DomainResource {
    /**
     * Default constructor for MedicinalProductIndication from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "MedicinalProductIndication";
        if ((source['resourceType'] !== "MedicinalProductIndication") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a MedicinalProductIndication';
        }
        if (source["comorbidity"] !== undefined) {
            this.comorbidity = source.comorbidity.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["diseaseStatus"] !== undefined) {
            this.diseaseStatus = new fhirModels.CodeableConcept(source.diseaseStatus);
        }
        if (source["diseaseSymptomProcedure"] !== undefined) {
            this.diseaseSymptomProcedure = new fhirModels.CodeableConcept(source.diseaseSymptomProcedure);
        }
        if (source["duration"] !== undefined) {
            this.duration = new fhirModels.Quantity(source.duration);
        }
        if (source["intendedEffect"] !== undefined) {
            this.intendedEffect = new fhirModels.CodeableConcept(source.intendedEffect);
        }
        if (source["otherTherapy"] !== undefined) {
            this.otherTherapy = source.otherTherapy.map((x) => new fhirModels.MedicinalProductIndicationOtherTherapy(x));
        }
        if (source["population"] !== undefined) {
            this.population = source.population.map((x) => new fhirModels.Population(x));
        }
        if (source["subject"] !== undefined) {
            this.subject = source.subject.map((x) => new fhirModels.Reference(x));
        }
        if (source["undesirableEffect"] !== undefined) {
            this.undesirableEffect = source.undesirableEffect.map((x) => new fhirModels.Reference(x));
        }
    }
    /**
     * Factory function to create a MedicinalProductIndication from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MedicinalProductIndication(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProductIndication is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MedicinalProductIndication contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MedicinalProductIndication = MedicinalProductIndication;
//# sourceMappingURL=MedicinalProductIndication.js.map