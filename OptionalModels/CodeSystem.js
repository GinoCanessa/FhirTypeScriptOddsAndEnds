var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * Note that filters defined in code systems usually require custom code on the part of any terminology engine that will make them available for use in value set filters. For this reason, they are generally only seen in high value published terminologies.
 */
var CodeSystemFilter = /** @class */ (function (_super) {
    __extends(CodeSystemFilter, _super);
    /**
     * Default constructor for CodeSystemFilter from an object that MAY NOT contain all required elements.
     */
    function CodeSystemFilter(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            _this._code = new fhirModels.Element(source._code);
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["operator"] !== undefined) {
            _this.operator = source.operator.map(function (x) { return (x); });
        }
        if (source["_operator"] !== undefined) {
            _this._operator = source._operator.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["value"] !== undefined) {
            _this.value = source.value;
        }
        if (source["_value"] !== undefined) {
            _this._value = new fhirModels.Element(source._value);
        }
        return _this;
    }
    /**
     * Factory function to create a CodeSystemFilter from an object that MUST contain all required elements.
     */
    CodeSystemFilter.CreateStrict = function (source) {
        var dest = new CodeSystemFilter(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "CodeSystemFilter is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current CodeSystemFilter contains all required elements.
     */
    CodeSystemFilter.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        if ((this["operator"] === undefined) || (this["operator"].length === 0)) {
            missingElements.push("operator");
        }
        if (this["value"] === undefined) {
            missingElements.push("value");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return CodeSystemFilter;
}(fhirModels.BackboneElement));
export { CodeSystemFilter };
/**
 * Code Values for the CodeSystem.filter.operator field
 */
export var CodeSystemFilterOperatorEnum;
(function (CodeSystemFilterOperatorEnum) {
    CodeSystemFilterOperatorEnum["EQUALS"] = "=";
    CodeSystemFilterOperatorEnum["IS_A"] = "is-a";
    CodeSystemFilterOperatorEnum["DESCENDENT_OF"] = "descendent-of";
    CodeSystemFilterOperatorEnum["IS_NOT_A"] = "is-not-a";
    CodeSystemFilterOperatorEnum["REGEX"] = "regex";
    CodeSystemFilterOperatorEnum["IN"] = "in";
    CodeSystemFilterOperatorEnum["NOT_IN"] = "not-in";
    CodeSystemFilterOperatorEnum["GENERALIZES"] = "generalizes";
    CodeSystemFilterOperatorEnum["EXISTS"] = "exists";
})(CodeSystemFilterOperatorEnum || (CodeSystemFilterOperatorEnum = {}));
/**
 * A property defines an additional slot through which additional information can be provided about a concept.
 */
var CodeSystemProperty = /** @class */ (function (_super) {
    __extends(CodeSystemProperty, _super);
    /**
     * Default constructor for CodeSystemProperty from an object that MAY NOT contain all required elements.
     */
    function CodeSystemProperty(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            _this._code = new fhirModels.Element(source._code);
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["type"] !== undefined) {
            _this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            _this._type = new fhirModels.Element(source._type);
        }
        if (source["uri"] !== undefined) {
            _this.uri = source.uri;
        }
        if (source["_uri"] !== undefined) {
            _this._uri = new fhirModels.Element(source._uri);
        }
        return _this;
    }
    /**
     * Factory function to create a CodeSystemProperty from an object that MUST contain all required elements.
     */
    CodeSystemProperty.CreateStrict = function (source) {
        var dest = new CodeSystemProperty(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "CodeSystemProperty is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current CodeSystemProperty contains all required elements.
     */
    CodeSystemProperty.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return CodeSystemProperty;
}(fhirModels.BackboneElement));
export { CodeSystemProperty };
/**
 * Code Values for the CodeSystem.property.type field
 */
export var CodeSystemPropertyTypeEnum;
(function (CodeSystemPropertyTypeEnum) {
    CodeSystemPropertyTypeEnum["CODE"] = "code";
    CodeSystemPropertyTypeEnum["CODING"] = "Coding";
    CodeSystemPropertyTypeEnum["STRING"] = "string";
    CodeSystemPropertyTypeEnum["INTEGER"] = "integer";
    CodeSystemPropertyTypeEnum["BOOLEAN"] = "boolean";
    CodeSystemPropertyTypeEnum["DATETIME"] = "dateTime";
    CodeSystemPropertyTypeEnum["DECIMAL"] = "decimal";
})(CodeSystemPropertyTypeEnum || (CodeSystemPropertyTypeEnum = {}));
/**
 * Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
 */
var CodeSystemConceptDesignation = /** @class */ (function (_super) {
    __extends(CodeSystemConceptDesignation, _super);
    /**
     * Default constructor for CodeSystemConceptDesignation from an object that MAY NOT contain all required elements.
     */
    function CodeSystemConceptDesignation(source) {
        var _this = _super.call(this, source) || this;
        if (source["language"] !== undefined) {
            _this.language = source.language;
        }
        if (source["_language"] !== undefined) {
            _this._language = new fhirModels.Element(source._language);
        }
        if (source["use"] !== undefined) {
            _this.use = new fhirModels.Coding(source.use);
        }
        if (source["value"] !== undefined) {
            _this.value = source.value;
        }
        if (source["_value"] !== undefined) {
            _this._value = new fhirModels.Element(source._value);
        }
        return _this;
    }
    /**
     * Factory function to create a CodeSystemConceptDesignation from an object that MUST contain all required elements.
     */
    CodeSystemConceptDesignation.CreateStrict = function (source) {
        var dest = new CodeSystemConceptDesignation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "CodeSystemConceptDesignation is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current CodeSystemConceptDesignation contains all required elements.
     */
    CodeSystemConceptDesignation.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["value"] === undefined) {
            missingElements.push("value");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return CodeSystemConceptDesignation;
}(fhirModels.BackboneElement));
export { CodeSystemConceptDesignation };
/**
 * A property value for this concept.
 */
var CodeSystemConceptProperty = /** @class */ (function (_super) {
    __extends(CodeSystemConceptProperty, _super);
    /**
     * Default constructor for CodeSystemConceptProperty from an object that MAY NOT contain all required elements.
     */
    function CodeSystemConceptProperty(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            _this._code = new fhirModels.Element(source._code);
        }
        if (source["valueCode"] !== undefined) {
            _this.valueCode = source.valueCode;
        }
        if (source["_valueCode"] !== undefined) {
            _this._valueCode = new fhirModels.Element(source._valueCode);
        }
        if (source["valueCoding"] !== undefined) {
            _this.valueCoding = new fhirModels.Coding(source.valueCoding);
        }
        if (source["valueString"] !== undefined) {
            _this.valueString = source.valueString;
        }
        if (source["_valueString"] !== undefined) {
            _this._valueString = new fhirModels.Element(source._valueString);
        }
        if (source["valueInteger"] !== undefined) {
            _this.valueInteger = source.valueInteger;
        }
        if (source["_valueInteger"] !== undefined) {
            _this._valueInteger = new fhirModels.Element(source._valueInteger);
        }
        if (source["valueBoolean"] !== undefined) {
            _this.valueBoolean = source.valueBoolean;
        }
        if (source["_valueBoolean"] !== undefined) {
            _this._valueBoolean = new fhirModels.Element(source._valueBoolean);
        }
        if (source["valueDateTime"] !== undefined) {
            _this.valueDateTime = source.valueDateTime;
        }
        if (source["_valueDateTime"] !== undefined) {
            _this._valueDateTime = new fhirModels.Element(source._valueDateTime);
        }
        if (source["valueDecimal"] !== undefined) {
            _this.valueDecimal = source.valueDecimal;
        }
        if (source["_valueDecimal"] !== undefined) {
            _this._valueDecimal = new fhirModels.Element(source._valueDecimal);
        }
        return _this;
    }
    /**
     * Factory function to create a CodeSystemConceptProperty from an object that MUST contain all required elements.
     */
    CodeSystemConceptProperty.CreateStrict = function (source) {
        var dest = new CodeSystemConceptProperty(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "CodeSystemConceptProperty is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current CodeSystemConceptProperty contains all required elements.
     */
    CodeSystemConceptProperty.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return CodeSystemConceptProperty;
}(fhirModels.BackboneElement));
export { CodeSystemConceptProperty };
/**
 * If this is empty, it means that the code system resource does not represent the content of the code system.
 */
var CodeSystemConcept = /** @class */ (function (_super) {
    __extends(CodeSystemConcept, _super);
    /**
     * Default constructor for CodeSystemConcept from an object that MAY NOT contain all required elements.
     */
    function CodeSystemConcept(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            _this._code = new fhirModels.Element(source._code);
        }
        if (source["concept"] !== undefined) {
            _this.concept = source.concept.map(function (x) { return new fhirModels.CodeSystemConcept(x); });
        }
        if (source["definition"] !== undefined) {
            _this.definition = source.definition;
        }
        if (source["_definition"] !== undefined) {
            _this._definition = new fhirModels.Element(source._definition);
        }
        if (source["designation"] !== undefined) {
            _this.designation = source.designation.map(function (x) { return new fhirModels.CodeSystemConceptDesignation(x); });
        }
        if (source["display"] !== undefined) {
            _this.display = source.display;
        }
        if (source["_display"] !== undefined) {
            _this._display = new fhirModels.Element(source._display);
        }
        if (source["property"] !== undefined) {
            _this.property = source.property.map(function (x) { return new fhirModels.CodeSystemConceptProperty(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a CodeSystemConcept from an object that MUST contain all required elements.
     */
    CodeSystemConcept.CreateStrict = function (source) {
        var dest = new CodeSystemConcept(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "CodeSystemConcept is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current CodeSystemConcept contains all required elements.
     */
    CodeSystemConcept.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return CodeSystemConcept;
}(fhirModels.BackboneElement));
export { CodeSystemConcept };
/**
 * The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.
 */
var CodeSystem = /** @class */ (function (_super) {
    __extends(CodeSystem, _super);
    /**
     * Default constructor for CodeSystem from an object that MAY NOT contain all required elements.
     */
    function CodeSystem(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "CodeSystem";
        if ((source['resourceType'] !== "CodeSystem") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a CodeSystem';
        }
        if (source["caseSensitive"] !== undefined) {
            _this.caseSensitive = source.caseSensitive;
        }
        if (source["_caseSensitive"] !== undefined) {
            _this._caseSensitive = new fhirModels.Element(source._caseSensitive);
        }
        if (source["compositional"] !== undefined) {
            _this.compositional = source.compositional;
        }
        if (source["_compositional"] !== undefined) {
            _this._compositional = new fhirModels.Element(source._compositional);
        }
        if (source["concept"] !== undefined) {
            _this.concept = source.concept.map(function (x) { return new fhirModels.CodeSystemConcept(x); });
        }
        if (source["contact"] !== undefined) {
            _this.contact = source.contact.map(function (x) { return new fhirModels.ContactDetail(x); });
        }
        if (source["content"] !== undefined) {
            _this.content = source.content;
        }
        if (source["_content"] !== undefined) {
            _this._content = new fhirModels.Element(source._content);
        }
        if (source["copyright"] !== undefined) {
            _this.copyright = source.copyright;
        }
        if (source["_copyright"] !== undefined) {
            _this._copyright = new fhirModels.Element(source._copyright);
        }
        if (source["count"] !== undefined) {
            _this.count = source.count;
        }
        if (source["_count"] !== undefined) {
            _this._count = new fhirModels.Element(source._count);
        }
        if (source["date"] !== undefined) {
            _this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            _this._date = new fhirModels.Element(source._date);
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["experimental"] !== undefined) {
            _this.experimental = source.experimental;
        }
        if (source["_experimental"] !== undefined) {
            _this._experimental = new fhirModels.Element(source._experimental);
        }
        if (source["filter"] !== undefined) {
            _this.filter = source.filter.map(function (x) { return new fhirModels.CodeSystemFilter(x); });
        }
        if (source["hierarchyMeaning"] !== undefined) {
            _this.hierarchyMeaning = source.hierarchyMeaning;
        }
        if (source["_hierarchyMeaning"] !== undefined) {
            _this._hierarchyMeaning = new fhirModels.Element(source._hierarchyMeaning);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["jurisdiction"] !== undefined) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["name"] !== undefined) {
            _this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            _this._name = new fhirModels.Element(source._name);
        }
        if (source["property"] !== undefined) {
            _this.property = source.property.map(function (x) { return new fhirModels.CodeSystemProperty(x); });
        }
        if (source["publisher"] !== undefined) {
            _this.publisher = source.publisher;
        }
        if (source["_publisher"] !== undefined) {
            _this._publisher = new fhirModels.Element(source._publisher);
        }
        if (source["purpose"] !== undefined) {
            _this.purpose = source.purpose;
        }
        if (source["_purpose"] !== undefined) {
            _this._purpose = new fhirModels.Element(source._purpose);
        }
        if (source["status"] !== undefined) {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["supplements"] !== undefined) {
            _this.supplements = source.supplements;
        }
        if (source["_supplements"] !== undefined) {
            _this._supplements = new fhirModels.Element(source._supplements);
        }
        if (source["title"] !== undefined) {
            _this.title = source.title;
        }
        if (source["_title"] !== undefined) {
            _this._title = new fhirModels.Element(source._title);
        }
        if (source["url"] !== undefined) {
            _this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            _this._url = new fhirModels.Element(source._url);
        }
        if (source["useContext"] !== undefined) {
            _this.useContext = source.useContext.map(function (x) { return new fhirModels.UsageContext(x); });
        }
        if (source["valueSet"] !== undefined) {
            _this.valueSet = source.valueSet;
        }
        if (source["_valueSet"] !== undefined) {
            _this._valueSet = new fhirModels.Element(source._valueSet);
        }
        if (source["version"] !== undefined) {
            _this.version = source.version;
        }
        if (source["_version"] !== undefined) {
            _this._version = new fhirModels.Element(source._version);
        }
        if (source["versionNeeded"] !== undefined) {
            _this.versionNeeded = source.versionNeeded;
        }
        if (source["_versionNeeded"] !== undefined) {
            _this._versionNeeded = new fhirModels.Element(source._versionNeeded);
        }
        return _this;
    }
    /**
     * Factory function to create a CodeSystem from an object that MUST contain all required elements.
     */
    CodeSystem.CreateStrict = function (source) {
        var dest = new CodeSystem(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "CodeSystem is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current CodeSystem contains all required elements.
     */
    CodeSystem.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["content"] === undefined) {
            missingElements.push("content");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return CodeSystem;
}(fhirModels.DomainResource));
export { CodeSystem };
/**
 * Code Values for the CodeSystem.content field
 */
export var CodeSystemContentEnum;
(function (CodeSystemContentEnum) {
    CodeSystemContentEnum["NOT_PRESENT"] = "not-present";
    CodeSystemContentEnum["EXAMPLE"] = "example";
    CodeSystemContentEnum["FRAGMENT"] = "fragment";
    CodeSystemContentEnum["COMPLETE"] = "complete";
    CodeSystemContentEnum["SUPPLEMENT"] = "supplement";
})(CodeSystemContentEnum || (CodeSystemContentEnum = {}));
/**
 * Code Values for the CodeSystem.hierarchyMeaning field
 */
export var CodeSystemHierarchyMeaningEnum;
(function (CodeSystemHierarchyMeaningEnum) {
    CodeSystemHierarchyMeaningEnum["GROUPED_BY"] = "grouped-by";
    CodeSystemHierarchyMeaningEnum["IS_A"] = "is-a";
    CodeSystemHierarchyMeaningEnum["PART_OF"] = "part-of";
    CodeSystemHierarchyMeaningEnum["CLASSIFIED_WITH"] = "classified-with";
})(CodeSystemHierarchyMeaningEnum || (CodeSystemHierarchyMeaningEnum = {}));
/**
 * Code Values for the CodeSystem.status field
 */
export var CodeSystemStatusEnum;
(function (CodeSystemStatusEnum) {
    CodeSystemStatusEnum["DRAFT"] = "draft";
    CodeSystemStatusEnum["ACTIVE"] = "active";
    CodeSystemStatusEnum["RETIRED"] = "retired";
    CodeSystemStatusEnum["UNKNOWN"] = "unknown";
})(CodeSystemStatusEnum || (CodeSystemStatusEnum = {}));
