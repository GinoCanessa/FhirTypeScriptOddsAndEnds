var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * All the identified characteristics must be true for an entity to a member of the group.
 */
var GroupCharacteristic = /** @class */ (function (_super) {
    __extends(GroupCharacteristic, _super);
    /**
     * Default constructor for GroupCharacteristic from an object that MAY NOT contain all required elements.
     */
    function GroupCharacteristic(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["exclude"] !== undefined) {
            _this.exclude = source.exclude;
        }
        if (source["_exclude"] !== undefined) {
            _this._exclude = new fhirModels.Element(source._exclude);
        }
        if (source["period"] !== undefined) {
            _this.period = new fhirModels.Period(source.period);
        }
        if (source["valueCodeableConcept"] !== undefined) {
            _this.valueCodeableConcept = new fhirModels.CodeableConcept(source.valueCodeableConcept);
        }
        if (source["valueBoolean"] !== undefined) {
            _this.valueBoolean = source.valueBoolean;
        }
        if (source["_valueBoolean"] !== undefined) {
            _this._valueBoolean = new fhirModels.Element(source._valueBoolean);
        }
        if (source["valueQuantity"] !== undefined) {
            _this.valueQuantity = new fhirModels.Quantity(source.valueQuantity);
        }
        if (source["valueRange"] !== undefined) {
            _this.valueRange = new fhirModels.Range(source.valueRange);
        }
        if (source["valueReference"] !== undefined) {
            _this.valueReference = new fhirModels.Reference(source.valueReference);
        }
        return _this;
    }
    /**
     * Factory function to create a GroupCharacteristic from an object that MUST contain all required elements.
     */
    GroupCharacteristic.CreateStrict = function (source) {
        var dest = new GroupCharacteristic(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "GroupCharacteristic is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current GroupCharacteristic contains all required elements.
     */
    GroupCharacteristic.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        if (this["exclude"] === undefined) {
            missingElements.push("exclude");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return GroupCharacteristic;
}(fhirModels.BackboneElement));
export { GroupCharacteristic };
/**
 * Identifies the resource instances that are members of the group.
 */
var GroupMember = /** @class */ (function (_super) {
    __extends(GroupMember, _super);
    /**
     * Default constructor for GroupMember from an object that MAY NOT contain all required elements.
     */
    function GroupMember(source) {
        var _this = _super.call(this, source) || this;
        if (source["entity"] !== undefined) {
            _this.entity = new fhirModels.Reference(source.entity);
        }
        if (source["inactive"] !== undefined) {
            _this.inactive = source.inactive;
        }
        if (source["_inactive"] !== undefined) {
            _this._inactive = new fhirModels.Element(source._inactive);
        }
        if (source["period"] !== undefined) {
            _this.period = new fhirModels.Period(source.period);
        }
        return _this;
    }
    /**
     * Factory function to create a GroupMember from an object that MUST contain all required elements.
     */
    GroupMember.CreateStrict = function (source) {
        var dest = new GroupMember(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "GroupMember is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current GroupMember contains all required elements.
     */
    GroupMember.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["entity"] === undefined) {
            missingElements.push("entity");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return GroupMember;
}(fhirModels.BackboneElement));
export { GroupMember };
/**
 * Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
 */
var Group = /** @class */ (function (_super) {
    __extends(Group, _super);
    /**
     * Default constructor for Group from an object that MAY NOT contain all required elements.
     */
    function Group(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "Group";
        if ((source['resourceType'] !== "Group") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Group';
        }
        if (source["active"] !== undefined) {
            _this.active = source.active;
        }
        if (source["_active"] !== undefined) {
            _this._active = new fhirModels.Element(source._active);
        }
        if (source["actual"] !== undefined) {
            _this.actual = source.actual;
        }
        if (source["_actual"] !== undefined) {
            _this._actual = new fhirModels.Element(source._actual);
        }
        if (source["characteristic"] !== undefined) {
            _this.characteristic = source.characteristic.map(function (x) { return new fhirModels.GroupCharacteristic(x); });
        }
        if (source["code"] !== undefined) {
            _this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["managingEntity"] !== undefined) {
            _this.managingEntity = new fhirModels.Reference(source.managingEntity);
        }
        if (source["member"] !== undefined) {
            _this.member = source.member.map(function (x) { return new fhirModels.GroupMember(x); });
        }
        if (source["name"] !== undefined) {
            _this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            _this._name = new fhirModels.Element(source._name);
        }
        if (source["quantity"] !== undefined) {
            _this.quantity = source.quantity;
        }
        if (source["_quantity"] !== undefined) {
            _this._quantity = new fhirModels.Element(source._quantity);
        }
        if (source["type"] !== undefined) {
            _this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            _this._type = new fhirModels.Element(source._type);
        }
        return _this;
    }
    /**
     * Factory function to create a Group from an object that MUST contain all required elements.
     */
    Group.CreateStrict = function (source) {
        var dest = new Group(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "Group is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current Group contains all required elements.
     */
    Group.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["actual"] === undefined) {
            missingElements.push("actual");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return Group;
}(fhirModels.DomainResource));
export { Group };
/**
 * Code Values for the Group.type field
 */
export var GroupTypeEnum;
(function (GroupTypeEnum) {
    GroupTypeEnum["PERSON"] = "person";
    GroupTypeEnum["ANIMAL"] = "animal";
    GroupTypeEnum["PRACTITIONER"] = "practitioner";
    GroupTypeEnum["DEVICE"] = "device";
    GroupTypeEnum["MEDICATION"] = "medication";
    GroupTypeEnum["SUBSTANCE"] = "substance";
})(GroupTypeEnum || (GroupTypeEnum = {}));
