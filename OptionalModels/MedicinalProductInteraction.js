var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * The specific medication, food or laboratory test that interacts.
 */
var MedicinalProductInteractionInteractant = /** @class */ (function (_super) {
    __extends(MedicinalProductInteractionInteractant, _super);
    /**
     * Default constructor for MedicinalProductInteractionInteractant from an object that MAY NOT contain all required elements.
     */
    function MedicinalProductInteractionInteractant(source) {
        var _this = _super.call(this, source) || this;
        if (source["itemReference"] !== undefined) {
            _this.itemReference = new fhirModels.Reference(source.itemReference);
        }
        if (source["itemCodeableConcept"] !== undefined) {
            _this.itemCodeableConcept = new fhirModels.CodeableConcept(source.itemCodeableConcept);
        }
        return _this;
    }
    /**
     * Factory function to create a MedicinalProductInteractionInteractant from an object that MUST contain all required elements.
     */
    MedicinalProductInteractionInteractant.CreateStrict = function (source) {
        var dest = new MedicinalProductInteractionInteractant(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "MedicinalProductInteractionInteractant is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current MedicinalProductInteractionInteractant contains all required elements.
     */
    MedicinalProductInteractionInteractant.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return MedicinalProductInteractionInteractant;
}(fhirModels.BackboneElement));
export { MedicinalProductInteractionInteractant };
/**
 * The interactions of the medicinal product with other medicinal products, or other forms of interactions.
 */
var MedicinalProductInteraction = /** @class */ (function (_super) {
    __extends(MedicinalProductInteraction, _super);
    /**
     * Default constructor for MedicinalProductInteraction from an object that MAY NOT contain all required elements.
     */
    function MedicinalProductInteraction(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "MedicinalProductInteraction";
        if ((source['resourceType'] !== "MedicinalProductInteraction") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a MedicinalProductInteraction';
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["effect"] !== undefined) {
            _this.effect = new fhirModels.CodeableConcept(source.effect);
        }
        if (source["incidence"] !== undefined) {
            _this.incidence = new fhirModels.CodeableConcept(source.incidence);
        }
        if (source["interactant"] !== undefined) {
            _this.interactant = source.interactant.map(function (x) { return new fhirModels.MedicinalProductInteractionInteractant(x); });
        }
        if (source["management"] !== undefined) {
            _this.management = new fhirModels.CodeableConcept(source.management);
        }
        if (source["subject"] !== undefined) {
            _this.subject = source.subject.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    /**
     * Factory function to create a MedicinalProductInteraction from an object that MUST contain all required elements.
     */
    MedicinalProductInteraction.CreateStrict = function (source) {
        var dest = new MedicinalProductInteraction(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "MedicinalProductInteraction is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current MedicinalProductInteraction contains all required elements.
     */
    MedicinalProductInteraction.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return MedicinalProductInteraction;
}(fhirModels.DomainResource));
export { MedicinalProductInteraction };
