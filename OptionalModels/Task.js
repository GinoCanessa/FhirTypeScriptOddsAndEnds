"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskStatusEnum = exports.TaskPriorityEnum = exports.TaskIntentEnum = exports.Task = exports.TaskOutput = exports.TaskInput = exports.TaskRestriction = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
 */
class TaskRestriction extends fhirModels.BackboneElement {
    /**
     * Default constructor for TaskRestriction from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["period"] !== undefined) {
            this.period = new fhirModels.Period(source.period);
        }
        if (source["recipient"] !== undefined) {
            this.recipient = source.recipient.map((x) => new fhirModels.Reference(x));
        }
        if (source["repetitions"] !== undefined) {
            this.repetitions = source.repetitions;
        }
        if (source["_repetitions"] !== undefined) {
            this._repetitions = new fhirModels.Element(source._repetitions);
        }
    }
    /**
     * Factory function to create a TaskRestriction from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new TaskRestriction(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `TaskRestriction is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current TaskRestriction contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.TaskRestriction = TaskRestriction;
/**
 * Additional information that may be needed in the execution of the task.
 */
class TaskInput extends fhirModels.BackboneElement {
    /**
     * Default constructor for TaskInput from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["valueBase64Binary"] !== undefined) {
            this.valueBase64Binary = source.valueBase64Binary;
        }
        if (source["_valueBase64Binary"] !== undefined) {
            this._valueBase64Binary = new fhirModels.Element(source._valueBase64Binary);
        }
        if (source["valueBoolean"] !== undefined) {
            this.valueBoolean = source.valueBoolean;
        }
        if (source["_valueBoolean"] !== undefined) {
            this._valueBoolean = new fhirModels.Element(source._valueBoolean);
        }
        if (source["valueCanonical"] !== undefined) {
            this.valueCanonical = source.valueCanonical;
        }
        if (source["_valueCanonical"] !== undefined) {
            this._valueCanonical = new fhirModels.Element(source._valueCanonical);
        }
        if (source["valueCode"] !== undefined) {
            this.valueCode = source.valueCode;
        }
        if (source["_valueCode"] !== undefined) {
            this._valueCode = new fhirModels.Element(source._valueCode);
        }
        if (source["valueDate"] !== undefined) {
            this.valueDate = source.valueDate;
        }
        if (source["_valueDate"] !== undefined) {
            this._valueDate = new fhirModels.Element(source._valueDate);
        }
        if (source["valueDateTime"] !== undefined) {
            this.valueDateTime = source.valueDateTime;
        }
        if (source["_valueDateTime"] !== undefined) {
            this._valueDateTime = new fhirModels.Element(source._valueDateTime);
        }
        if (source["valueDecimal"] !== undefined) {
            this.valueDecimal = source.valueDecimal;
        }
        if (source["_valueDecimal"] !== undefined) {
            this._valueDecimal = new fhirModels.Element(source._valueDecimal);
        }
        if (source["valueId"] !== undefined) {
            this.valueId = source.valueId;
        }
        if (source["_valueId"] !== undefined) {
            this._valueId = new fhirModels.Element(source._valueId);
        }
        if (source["valueInstant"] !== undefined) {
            this.valueInstant = source.valueInstant;
        }
        if (source["_valueInstant"] !== undefined) {
            this._valueInstant = new fhirModels.Element(source._valueInstant);
        }
        if (source["valueInteger"] !== undefined) {
            this.valueInteger = source.valueInteger;
        }
        if (source["_valueInteger"] !== undefined) {
            this._valueInteger = new fhirModels.Element(source._valueInteger);
        }
        if (source["valueMarkdown"] !== undefined) {
            this.valueMarkdown = source.valueMarkdown;
        }
        if (source["_valueMarkdown"] !== undefined) {
            this._valueMarkdown = new fhirModels.Element(source._valueMarkdown);
        }
        if (source["valueOid"] !== undefined) {
            this.valueOid = source.valueOid;
        }
        if (source["_valueOid"] !== undefined) {
            this._valueOid = new fhirModels.Element(source._valueOid);
        }
        if (source["valuePositiveInt"] !== undefined) {
            this.valuePositiveInt = source.valuePositiveInt;
        }
        if (source["_valuePositiveInt"] !== undefined) {
            this._valuePositiveInt = new fhirModels.Element(source._valuePositiveInt);
        }
        if (source["valueString"] !== undefined) {
            this.valueString = source.valueString;
        }
        if (source["_valueString"] !== undefined) {
            this._valueString = new fhirModels.Element(source._valueString);
        }
        if (source["valueTime"] !== undefined) {
            this.valueTime = source.valueTime;
        }
        if (source["_valueTime"] !== undefined) {
            this._valueTime = new fhirModels.Element(source._valueTime);
        }
        if (source["valueUnsignedInt"] !== undefined) {
            this.valueUnsignedInt = source.valueUnsignedInt;
        }
        if (source["_valueUnsignedInt"] !== undefined) {
            this._valueUnsignedInt = new fhirModels.Element(source._valueUnsignedInt);
        }
        if (source["valueUri"] !== undefined) {
            this.valueUri = source.valueUri;
        }
        if (source["_valueUri"] !== undefined) {
            this._valueUri = new fhirModels.Element(source._valueUri);
        }
        if (source["valueUrl"] !== undefined) {
            this.valueUrl = source.valueUrl;
        }
        if (source["_valueUrl"] !== undefined) {
            this._valueUrl = new fhirModels.Element(source._valueUrl);
        }
        if (source["valueUuid"] !== undefined) {
            this.valueUuid = source.valueUuid;
        }
        if (source["_valueUuid"] !== undefined) {
            this._valueUuid = new fhirModels.Element(source._valueUuid);
        }
        if (source["valueAddress"] !== undefined) {
            this.valueAddress = new fhirModels.Address(source.valueAddress);
        }
        if (source["valueAge"] !== undefined) {
            this.valueAge = new fhirModels.Age(source.valueAge);
        }
        if (source["valueAnnotation"] !== undefined) {
            this.valueAnnotation = new fhirModels.Annotation(source.valueAnnotation);
        }
        if (source["valueAttachment"] !== undefined) {
            this.valueAttachment = new fhirModels.Attachment(source.valueAttachment);
        }
        if (source["valueCodeableConcept"] !== undefined) {
            this.valueCodeableConcept = new fhirModels.CodeableConcept(source.valueCodeableConcept);
        }
        if (source["valueCoding"] !== undefined) {
            this.valueCoding = new fhirModels.Coding(source.valueCoding);
        }
        if (source["valueContactPoint"] !== undefined) {
            this.valueContactPoint = new fhirModels.ContactPoint(source.valueContactPoint);
        }
        if (source["valueCount"] !== undefined) {
            this.valueCount = new fhirModels.Count(source.valueCount);
        }
        if (source["valueDistance"] !== undefined) {
            this.valueDistance = new fhirModels.Distance(source.valueDistance);
        }
        if (source["valueDuration"] !== undefined) {
            this.valueDuration = new fhirModels.Duration(source.valueDuration);
        }
        if (source["valueHumanName"] !== undefined) {
            this.valueHumanName = new fhirModels.HumanName(source.valueHumanName);
        }
        if (source["valueIdentifier"] !== undefined) {
            this.valueIdentifier = new fhirModels.Identifier(source.valueIdentifier);
        }
        if (source["valueMoney"] !== undefined) {
            this.valueMoney = new fhirModels.Money(source.valueMoney);
        }
        if (source["valuePeriod"] !== undefined) {
            this.valuePeriod = new fhirModels.Period(source.valuePeriod);
        }
        if (source["valueQuantity"] !== undefined) {
            this.valueQuantity = new fhirModels.Quantity(source.valueQuantity);
        }
        if (source["valueRange"] !== undefined) {
            this.valueRange = new fhirModels.Range(source.valueRange);
        }
        if (source["valueRatio"] !== undefined) {
            this.valueRatio = new fhirModels.Ratio(source.valueRatio);
        }
        if (source["valueReference"] !== undefined) {
            this.valueReference = new fhirModels.Reference(source.valueReference);
        }
        if (source["valueSampledData"] !== undefined) {
            this.valueSampledData = new fhirModels.SampledData(source.valueSampledData);
        }
        if (source["valueSignature"] !== undefined) {
            this.valueSignature = new fhirModels.Signature(source.valueSignature);
        }
        if (source["valueTiming"] !== undefined) {
            this.valueTiming = new fhirModels.Timing(source.valueTiming);
        }
        if (source["valueContactDetail"] !== undefined) {
            this.valueContactDetail = new fhirModels.ContactDetail(source.valueContactDetail);
        }
        if (source["valueContributor"] !== undefined) {
            this.valueContributor = new fhirModels.Contributor(source.valueContributor);
        }
        if (source["valueDataRequirement"] !== undefined) {
            this.valueDataRequirement = new fhirModels.DataRequirement(source.valueDataRequirement);
        }
        if (source["valueExpression"] !== undefined) {
            this.valueExpression = new fhirModels.Expression(source.valueExpression);
        }
        if (source["valueParameterDefinition"] !== undefined) {
            this.valueParameterDefinition = new fhirModels.ParameterDefinition(source.valueParameterDefinition);
        }
        if (source["valueRelatedArtifact"] !== undefined) {
            this.valueRelatedArtifact = new fhirModels.RelatedArtifact(source.valueRelatedArtifact);
        }
        if (source["valueTriggerDefinition"] !== undefined) {
            this.valueTriggerDefinition = new fhirModels.TriggerDefinition(source.valueTriggerDefinition);
        }
        if (source["valueUsageContext"] !== undefined) {
            this.valueUsageContext = new fhirModels.UsageContext(source.valueUsageContext);
        }
        if (source["valueDosage"] !== undefined) {
            this.valueDosage = new fhirModels.Dosage(source.valueDosage);
        }
        if (source["valueMeta"] !== undefined) {
            this.valueMeta = new fhirModels.Meta(source.valueMeta);
        }
    }
    /**
     * Factory function to create a TaskInput from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new TaskInput(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `TaskInput is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current TaskInput contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.TaskInput = TaskInput;
/**
 * Outputs produced by the Task.
 */
class TaskOutput extends fhirModels.BackboneElement {
    /**
     * Default constructor for TaskOutput from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["valueBase64Binary"] !== undefined) {
            this.valueBase64Binary = source.valueBase64Binary;
        }
        if (source["_valueBase64Binary"] !== undefined) {
            this._valueBase64Binary = new fhirModels.Element(source._valueBase64Binary);
        }
        if (source["valueBoolean"] !== undefined) {
            this.valueBoolean = source.valueBoolean;
        }
        if (source["_valueBoolean"] !== undefined) {
            this._valueBoolean = new fhirModels.Element(source._valueBoolean);
        }
        if (source["valueCanonical"] !== undefined) {
            this.valueCanonical = source.valueCanonical;
        }
        if (source["_valueCanonical"] !== undefined) {
            this._valueCanonical = new fhirModels.Element(source._valueCanonical);
        }
        if (source["valueCode"] !== undefined) {
            this.valueCode = source.valueCode;
        }
        if (source["_valueCode"] !== undefined) {
            this._valueCode = new fhirModels.Element(source._valueCode);
        }
        if (source["valueDate"] !== undefined) {
            this.valueDate = source.valueDate;
        }
        if (source["_valueDate"] !== undefined) {
            this._valueDate = new fhirModels.Element(source._valueDate);
        }
        if (source["valueDateTime"] !== undefined) {
            this.valueDateTime = source.valueDateTime;
        }
        if (source["_valueDateTime"] !== undefined) {
            this._valueDateTime = new fhirModels.Element(source._valueDateTime);
        }
        if (source["valueDecimal"] !== undefined) {
            this.valueDecimal = source.valueDecimal;
        }
        if (source["_valueDecimal"] !== undefined) {
            this._valueDecimal = new fhirModels.Element(source._valueDecimal);
        }
        if (source["valueId"] !== undefined) {
            this.valueId = source.valueId;
        }
        if (source["_valueId"] !== undefined) {
            this._valueId = new fhirModels.Element(source._valueId);
        }
        if (source["valueInstant"] !== undefined) {
            this.valueInstant = source.valueInstant;
        }
        if (source["_valueInstant"] !== undefined) {
            this._valueInstant = new fhirModels.Element(source._valueInstant);
        }
        if (source["valueInteger"] !== undefined) {
            this.valueInteger = source.valueInteger;
        }
        if (source["_valueInteger"] !== undefined) {
            this._valueInteger = new fhirModels.Element(source._valueInteger);
        }
        if (source["valueMarkdown"] !== undefined) {
            this.valueMarkdown = source.valueMarkdown;
        }
        if (source["_valueMarkdown"] !== undefined) {
            this._valueMarkdown = new fhirModels.Element(source._valueMarkdown);
        }
        if (source["valueOid"] !== undefined) {
            this.valueOid = source.valueOid;
        }
        if (source["_valueOid"] !== undefined) {
            this._valueOid = new fhirModels.Element(source._valueOid);
        }
        if (source["valuePositiveInt"] !== undefined) {
            this.valuePositiveInt = source.valuePositiveInt;
        }
        if (source["_valuePositiveInt"] !== undefined) {
            this._valuePositiveInt = new fhirModels.Element(source._valuePositiveInt);
        }
        if (source["valueString"] !== undefined) {
            this.valueString = source.valueString;
        }
        if (source["_valueString"] !== undefined) {
            this._valueString = new fhirModels.Element(source._valueString);
        }
        if (source["valueTime"] !== undefined) {
            this.valueTime = source.valueTime;
        }
        if (source["_valueTime"] !== undefined) {
            this._valueTime = new fhirModels.Element(source._valueTime);
        }
        if (source["valueUnsignedInt"] !== undefined) {
            this.valueUnsignedInt = source.valueUnsignedInt;
        }
        if (source["_valueUnsignedInt"] !== undefined) {
            this._valueUnsignedInt = new fhirModels.Element(source._valueUnsignedInt);
        }
        if (source["valueUri"] !== undefined) {
            this.valueUri = source.valueUri;
        }
        if (source["_valueUri"] !== undefined) {
            this._valueUri = new fhirModels.Element(source._valueUri);
        }
        if (source["valueUrl"] !== undefined) {
            this.valueUrl = source.valueUrl;
        }
        if (source["_valueUrl"] !== undefined) {
            this._valueUrl = new fhirModels.Element(source._valueUrl);
        }
        if (source["valueUuid"] !== undefined) {
            this.valueUuid = source.valueUuid;
        }
        if (source["_valueUuid"] !== undefined) {
            this._valueUuid = new fhirModels.Element(source._valueUuid);
        }
        if (source["valueAddress"] !== undefined) {
            this.valueAddress = new fhirModels.Address(source.valueAddress);
        }
        if (source["valueAge"] !== undefined) {
            this.valueAge = new fhirModels.Age(source.valueAge);
        }
        if (source["valueAnnotation"] !== undefined) {
            this.valueAnnotation = new fhirModels.Annotation(source.valueAnnotation);
        }
        if (source["valueAttachment"] !== undefined) {
            this.valueAttachment = new fhirModels.Attachment(source.valueAttachment);
        }
        if (source["valueCodeableConcept"] !== undefined) {
            this.valueCodeableConcept = new fhirModels.CodeableConcept(source.valueCodeableConcept);
        }
        if (source["valueCoding"] !== undefined) {
            this.valueCoding = new fhirModels.Coding(source.valueCoding);
        }
        if (source["valueContactPoint"] !== undefined) {
            this.valueContactPoint = new fhirModels.ContactPoint(source.valueContactPoint);
        }
        if (source["valueCount"] !== undefined) {
            this.valueCount = new fhirModels.Count(source.valueCount);
        }
        if (source["valueDistance"] !== undefined) {
            this.valueDistance = new fhirModels.Distance(source.valueDistance);
        }
        if (source["valueDuration"] !== undefined) {
            this.valueDuration = new fhirModels.Duration(source.valueDuration);
        }
        if (source["valueHumanName"] !== undefined) {
            this.valueHumanName = new fhirModels.HumanName(source.valueHumanName);
        }
        if (source["valueIdentifier"] !== undefined) {
            this.valueIdentifier = new fhirModels.Identifier(source.valueIdentifier);
        }
        if (source["valueMoney"] !== undefined) {
            this.valueMoney = new fhirModels.Money(source.valueMoney);
        }
        if (source["valuePeriod"] !== undefined) {
            this.valuePeriod = new fhirModels.Period(source.valuePeriod);
        }
        if (source["valueQuantity"] !== undefined) {
            this.valueQuantity = new fhirModels.Quantity(source.valueQuantity);
        }
        if (source["valueRange"] !== undefined) {
            this.valueRange = new fhirModels.Range(source.valueRange);
        }
        if (source["valueRatio"] !== undefined) {
            this.valueRatio = new fhirModels.Ratio(source.valueRatio);
        }
        if (source["valueReference"] !== undefined) {
            this.valueReference = new fhirModels.Reference(source.valueReference);
        }
        if (source["valueSampledData"] !== undefined) {
            this.valueSampledData = new fhirModels.SampledData(source.valueSampledData);
        }
        if (source["valueSignature"] !== undefined) {
            this.valueSignature = new fhirModels.Signature(source.valueSignature);
        }
        if (source["valueTiming"] !== undefined) {
            this.valueTiming = new fhirModels.Timing(source.valueTiming);
        }
        if (source["valueContactDetail"] !== undefined) {
            this.valueContactDetail = new fhirModels.ContactDetail(source.valueContactDetail);
        }
        if (source["valueContributor"] !== undefined) {
            this.valueContributor = new fhirModels.Contributor(source.valueContributor);
        }
        if (source["valueDataRequirement"] !== undefined) {
            this.valueDataRequirement = new fhirModels.DataRequirement(source.valueDataRequirement);
        }
        if (source["valueExpression"] !== undefined) {
            this.valueExpression = new fhirModels.Expression(source.valueExpression);
        }
        if (source["valueParameterDefinition"] !== undefined) {
            this.valueParameterDefinition = new fhirModels.ParameterDefinition(source.valueParameterDefinition);
        }
        if (source["valueRelatedArtifact"] !== undefined) {
            this.valueRelatedArtifact = new fhirModels.RelatedArtifact(source.valueRelatedArtifact);
        }
        if (source["valueTriggerDefinition"] !== undefined) {
            this.valueTriggerDefinition = new fhirModels.TriggerDefinition(source.valueTriggerDefinition);
        }
        if (source["valueUsageContext"] !== undefined) {
            this.valueUsageContext = new fhirModels.UsageContext(source.valueUsageContext);
        }
        if (source["valueDosage"] !== undefined) {
            this.valueDosage = new fhirModels.Dosage(source.valueDosage);
        }
        if (source["valueMeta"] !== undefined) {
            this.valueMeta = new fhirModels.Meta(source.valueMeta);
        }
    }
    /**
     * Factory function to create a TaskOutput from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new TaskOutput(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `TaskOutput is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current TaskOutput contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.TaskOutput = TaskOutput;
/**
 * A task to be performed.
 */
class Task extends fhirModels.DomainResource {
    /**
     * Default constructor for Task from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "Task";
        if ((source['resourceType'] !== "Task") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Task';
        }
        if (source["authoredOn"] !== undefined) {
            this.authoredOn = source.authoredOn;
        }
        if (source["_authoredOn"] !== undefined) {
            this._authoredOn = new fhirModels.Element(source._authoredOn);
        }
        if (source["basedOn"] !== undefined) {
            this.basedOn = source.basedOn.map((x) => new fhirModels.Reference(x));
        }
        if (source["businessStatus"] !== undefined) {
            this.businessStatus = new fhirModels.CodeableConcept(source.businessStatus);
        }
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["encounter"] !== undefined) {
            this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["executionPeriod"] !== undefined) {
            this.executionPeriod = new fhirModels.Period(source.executionPeriod);
        }
        if (source["focus"] !== undefined) {
            this.focus = new fhirModels.Reference(source.focus);
        }
        if (source["for"] !== undefined) {
            this.for = new fhirModels.Reference(source.for);
        }
        if (source["groupIdentifier"] !== undefined) {
            this.groupIdentifier = new fhirModels.Identifier(source.groupIdentifier);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["input"] !== undefined) {
            this.input = source.input.map((x) => new fhirModels.TaskInput(x));
        }
        if (source["instantiatesCanonical"] !== undefined) {
            this.instantiatesCanonical = source.instantiatesCanonical;
        }
        if (source["_instantiatesCanonical"] !== undefined) {
            this._instantiatesCanonical = new fhirModels.Element(source._instantiatesCanonical);
        }
        if (source["instantiatesUri"] !== undefined) {
            this.instantiatesUri = source.instantiatesUri;
        }
        if (source["_instantiatesUri"] !== undefined) {
            this._instantiatesUri = new fhirModels.Element(source._instantiatesUri);
        }
        if (source["insurance"] !== undefined) {
            this.insurance = source.insurance.map((x) => new fhirModels.Reference(x));
        }
        if (source["intent"] !== undefined) {
            this.intent = source.intent;
        }
        if (source["_intent"] !== undefined) {
            this._intent = new fhirModels.Element(source._intent);
        }
        if (source["lastModified"] !== undefined) {
            this.lastModified = source.lastModified;
        }
        if (source["_lastModified"] !== undefined) {
            this._lastModified = new fhirModels.Element(source._lastModified);
        }
        if (source["location"] !== undefined) {
            this.location = new fhirModels.Reference(source.location);
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["output"] !== undefined) {
            this.output = source.output.map((x) => new fhirModels.TaskOutput(x));
        }
        if (source["owner"] !== undefined) {
            this.owner = new fhirModels.Reference(source.owner);
        }
        if (source["partOf"] !== undefined) {
            this.partOf = source.partOf.map((x) => new fhirModels.Reference(x));
        }
        if (source["performerType"] !== undefined) {
            this.performerType = source.performerType.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["priority"] !== undefined) {
            this.priority = source.priority;
        }
        if (source["_priority"] !== undefined) {
            this._priority = new fhirModels.Element(source._priority);
        }
        if (source["reasonCode"] !== undefined) {
            this.reasonCode = new fhirModels.CodeableConcept(source.reasonCode);
        }
        if (source["reasonReference"] !== undefined) {
            this.reasonReference = new fhirModels.Reference(source.reasonReference);
        }
        if (source["relevantHistory"] !== undefined) {
            this.relevantHistory = source.relevantHistory.map((x) => new fhirModels.Reference(x));
        }
        if (source["requester"] !== undefined) {
            this.requester = new fhirModels.Reference(source.requester);
        }
        if (source["restriction"] !== undefined) {
            this.restriction = new fhirModels.TaskRestriction(source.restriction);
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["statusReason"] !== undefined) {
            this.statusReason = new fhirModels.CodeableConcept(source.statusReason);
        }
    }
    /**
     * Factory function to create a Task from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new Task(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Task is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current Task contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["intent"] === undefined) {
            missingElements.push("intent");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.Task = Task;
/**
 * Code Values for the Task.intent field
 */
var TaskIntentEnum;
(function (TaskIntentEnum) {
    TaskIntentEnum["UNKNOWN"] = "unknown";
    TaskIntentEnum["PROPOSAL"] = "proposal";
    TaskIntentEnum["PLAN"] = "plan";
    TaskIntentEnum["ORDER"] = "order";
    TaskIntentEnum["ORIGINAL_ORDER"] = "original-order";
    TaskIntentEnum["REFLEX_ORDER"] = "reflex-order";
    TaskIntentEnum["FILLER_ORDER"] = "filler-order";
    TaskIntentEnum["INSTANCE_ORDER"] = "instance-order";
    TaskIntentEnum["OPTION"] = "option";
})(TaskIntentEnum = exports.TaskIntentEnum || (exports.TaskIntentEnum = {}));
/**
 * Code Values for the Task.priority field
 */
var TaskPriorityEnum;
(function (TaskPriorityEnum) {
    TaskPriorityEnum["ROUTINE"] = "routine";
    TaskPriorityEnum["URGENT"] = "urgent";
    TaskPriorityEnum["ASAP"] = "asap";
    TaskPriorityEnum["STAT"] = "stat";
})(TaskPriorityEnum = exports.TaskPriorityEnum || (exports.TaskPriorityEnum = {}));
/**
 * Code Values for the Task.status field
 */
var TaskStatusEnum;
(function (TaskStatusEnum) {
    TaskStatusEnum["DRAFT"] = "draft";
    TaskStatusEnum["REQUESTED"] = "requested";
    TaskStatusEnum["RECEIVED"] = "received";
    TaskStatusEnum["ACCEPTED"] = "accepted";
    TaskStatusEnum["REJECTED"] = "rejected";
    TaskStatusEnum["READY"] = "ready";
    TaskStatusEnum["CANCELLED"] = "cancelled";
    TaskStatusEnum["IN_PROGRESS"] = "in-progress";
    TaskStatusEnum["ON_HOLD"] = "on-hold";
    TaskStatusEnum["FAILED"] = "failed";
    TaskStatusEnum["COMPLETED"] = "completed";
    TaskStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(TaskStatusEnum = exports.TaskStatusEnum || (exports.TaskStatusEnum = {}));
//# sourceMappingURL=Task.js.map