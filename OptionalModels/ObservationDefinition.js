var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * Characteristics for quantitative results of this observation.
 */
var ObservationDefinitionQuantitativeDetails = /** @class */ (function (_super) {
    __extends(ObservationDefinitionQuantitativeDetails, _super);
    /**
     * Default constructor for ObservationDefinitionQuantitativeDetails from an object that MAY NOT contain all required elements.
     */
    function ObservationDefinitionQuantitativeDetails(source) {
        var _this = _super.call(this, source) || this;
        if (source["conversionFactor"] !== undefined) {
            _this.conversionFactor = source.conversionFactor;
        }
        if (source["_conversionFactor"] !== undefined) {
            _this._conversionFactor = new fhirModels.Element(source._conversionFactor);
        }
        if (source["customaryUnit"] !== undefined) {
            _this.customaryUnit = new fhirModels.CodeableConcept(source.customaryUnit);
        }
        if (source["decimalPrecision"] !== undefined) {
            _this.decimalPrecision = source.decimalPrecision;
        }
        if (source["_decimalPrecision"] !== undefined) {
            _this._decimalPrecision = new fhirModels.Element(source._decimalPrecision);
        }
        if (source["unit"] !== undefined) {
            _this.unit = new fhirModels.CodeableConcept(source.unit);
        }
        return _this;
    }
    /**
     * Factory function to create a ObservationDefinitionQuantitativeDetails from an object that MUST contain all required elements.
     */
    ObservationDefinitionQuantitativeDetails.CreateStrict = function (source) {
        var dest = new ObservationDefinitionQuantitativeDetails(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ObservationDefinitionQuantitativeDetails is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ObservationDefinitionQuantitativeDetails contains all required elements.
     */
    ObservationDefinitionQuantitativeDetails.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ObservationDefinitionQuantitativeDetails;
}(fhirModels.BackboneElement));
export { ObservationDefinitionQuantitativeDetails };
/**
 * Multiple  ranges of results qualified by different contexts for ordinal or continuous observations conforming to this ObservationDefinition.
 */
var ObservationDefinitionQualifiedInterval = /** @class */ (function (_super) {
    __extends(ObservationDefinitionQualifiedInterval, _super);
    /**
     * Default constructor for ObservationDefinitionQualifiedInterval from an object that MAY NOT contain all required elements.
     */
    function ObservationDefinitionQualifiedInterval(source) {
        var _this = _super.call(this, source) || this;
        if (source["age"] !== undefined) {
            _this.age = new fhirModels.Range(source.age);
        }
        if (source["appliesTo"] !== undefined) {
            _this.appliesTo = source.appliesTo.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["category"] !== undefined) {
            _this.category = source.category;
        }
        if (source["_category"] !== undefined) {
            _this._category = new fhirModels.Element(source._category);
        }
        if (source["condition"] !== undefined) {
            _this.condition = source.condition;
        }
        if (source["_condition"] !== undefined) {
            _this._condition = new fhirModels.Element(source._condition);
        }
        if (source["context"] !== undefined) {
            _this.context = new fhirModels.CodeableConcept(source.context);
        }
        if (source["gender"] !== undefined) {
            _this.gender = source.gender;
        }
        if (source["_gender"] !== undefined) {
            _this._gender = new fhirModels.Element(source._gender);
        }
        if (source["gestationalAge"] !== undefined) {
            _this.gestationalAge = new fhirModels.Range(source.gestationalAge);
        }
        if (source["range"] !== undefined) {
            _this.range = new fhirModels.Range(source.range);
        }
        return _this;
    }
    /**
     * Factory function to create a ObservationDefinitionQualifiedInterval from an object that MUST contain all required elements.
     */
    ObservationDefinitionQualifiedInterval.CreateStrict = function (source) {
        var dest = new ObservationDefinitionQualifiedInterval(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ObservationDefinitionQualifiedInterval is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ObservationDefinitionQualifiedInterval contains all required elements.
     */
    ObservationDefinitionQualifiedInterval.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ObservationDefinitionQualifiedInterval;
}(fhirModels.BackboneElement));
export { ObservationDefinitionQualifiedInterval };
/**
 * Code Values for the ObservationDefinition.qualifiedInterval.category field
 */
export var ObservationDefinitionQualifiedIntervalCategoryEnum;
(function (ObservationDefinitionQualifiedIntervalCategoryEnum) {
    ObservationDefinitionQualifiedIntervalCategoryEnum["REFERENCE"] = "reference";
    ObservationDefinitionQualifiedIntervalCategoryEnum["CRITICAL"] = "critical";
    ObservationDefinitionQualifiedIntervalCategoryEnum["ABSOLUTE"] = "absolute";
})(ObservationDefinitionQualifiedIntervalCategoryEnum || (ObservationDefinitionQualifiedIntervalCategoryEnum = {}));
/**
 * Code Values for the ObservationDefinition.qualifiedInterval.gender field
 */
export var ObservationDefinitionQualifiedIntervalGenderEnum;
(function (ObservationDefinitionQualifiedIntervalGenderEnum) {
    ObservationDefinitionQualifiedIntervalGenderEnum["MALE"] = "male";
    ObservationDefinitionQualifiedIntervalGenderEnum["FEMALE"] = "female";
    ObservationDefinitionQualifiedIntervalGenderEnum["OTHER"] = "other";
    ObservationDefinitionQualifiedIntervalGenderEnum["UNKNOWN"] = "unknown";
})(ObservationDefinitionQualifiedIntervalGenderEnum || (ObservationDefinitionQualifiedIntervalGenderEnum = {}));
/**
 * Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service.
 */
var ObservationDefinition = /** @class */ (function (_super) {
    __extends(ObservationDefinition, _super);
    /**
     * Default constructor for ObservationDefinition from an object that MAY NOT contain all required elements.
     */
    function ObservationDefinition(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "ObservationDefinition";
        if ((source['resourceType'] !== "ObservationDefinition") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a ObservationDefinition';
        }
        if (source["abnormalCodedValueSet"] !== undefined) {
            _this.abnormalCodedValueSet = new fhirModels.Reference(source.abnormalCodedValueSet);
        }
        if (source["category"] !== undefined) {
            _this.category = source.category.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["code"] !== undefined) {
            _this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["criticalCodedValueSet"] !== undefined) {
            _this.criticalCodedValueSet = new fhirModels.Reference(source.criticalCodedValueSet);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["method"] !== undefined) {
            _this.method = new fhirModels.CodeableConcept(source.method);
        }
        if (source["multipleResultsAllowed"] !== undefined) {
            _this.multipleResultsAllowed = source.multipleResultsAllowed;
        }
        if (source["_multipleResultsAllowed"] !== undefined) {
            _this._multipleResultsAllowed = new fhirModels.Element(source._multipleResultsAllowed);
        }
        if (source["normalCodedValueSet"] !== undefined) {
            _this.normalCodedValueSet = new fhirModels.Reference(source.normalCodedValueSet);
        }
        if (source["permittedDataType"] !== undefined) {
            _this.permittedDataType = source.permittedDataType.map(function (x) { return (x); });
        }
        if (source["_permittedDataType"] !== undefined) {
            _this._permittedDataType = source._permittedDataType.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["preferredReportName"] !== undefined) {
            _this.preferredReportName = source.preferredReportName;
        }
        if (source["_preferredReportName"] !== undefined) {
            _this._preferredReportName = new fhirModels.Element(source._preferredReportName);
        }
        if (source["qualifiedInterval"] !== undefined) {
            _this.qualifiedInterval = source.qualifiedInterval.map(function (x) { return new fhirModels.ObservationDefinitionQualifiedInterval(x); });
        }
        if (source["quantitativeDetails"] !== undefined) {
            _this.quantitativeDetails = new fhirModels.ObservationDefinitionQuantitativeDetails(source.quantitativeDetails);
        }
        if (source["validCodedValueSet"] !== undefined) {
            _this.validCodedValueSet = new fhirModels.Reference(source.validCodedValueSet);
        }
        return _this;
    }
    /**
     * Factory function to create a ObservationDefinition from an object that MUST contain all required elements.
     */
    ObservationDefinition.CreateStrict = function (source) {
        var dest = new ObservationDefinition(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ObservationDefinition is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ObservationDefinition contains all required elements.
     */
    ObservationDefinition.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ObservationDefinition;
}(fhirModels.DomainResource));
export { ObservationDefinition };
/**
 * Code Values for the ObservationDefinition.permittedDataType field
 */
export var ObservationDefinitionPermittedDataTypeEnum;
(function (ObservationDefinitionPermittedDataTypeEnum) {
    ObservationDefinitionPermittedDataTypeEnum["QUANTITY"] = "Quantity";
    ObservationDefinitionPermittedDataTypeEnum["CODEABLECONCEPT"] = "CodeableConcept";
    ObservationDefinitionPermittedDataTypeEnum["STRING"] = "string";
    ObservationDefinitionPermittedDataTypeEnum["BOOLEAN"] = "boolean";
    ObservationDefinitionPermittedDataTypeEnum["INTEGER"] = "integer";
    ObservationDefinitionPermittedDataTypeEnum["RANGE"] = "Range";
    ObservationDefinitionPermittedDataTypeEnum["RATIO"] = "Ratio";
    ObservationDefinitionPermittedDataTypeEnum["SAMPLEDDATA"] = "SampledData";
    ObservationDefinitionPermittedDataTypeEnum["TIME"] = "time";
    ObservationDefinitionPermittedDataTypeEnum["DATETIME"] = "dateTime";
    ObservationDefinitionPermittedDataTypeEnum["PERIOD"] = "Period";
})(ObservationDefinitionPermittedDataTypeEnum || (ObservationDefinitionPermittedDataTypeEnum = {}));
