var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * How this product was collected.
 */
var BiologicallyDerivedProductCollection = /** @class */ (function (_super) {
    __extends(BiologicallyDerivedProductCollection, _super);
    /**
     * Default constructor for BiologicallyDerivedProductCollection from an object that MAY NOT contain all required elements.
     */
    function BiologicallyDerivedProductCollection(source) {
        var _this = _super.call(this, source) || this;
        if (source["collectedDateTime"] !== undefined) {
            _this.collectedDateTime = source.collectedDateTime;
        }
        if (source["_collectedDateTime"] !== undefined) {
            _this._collectedDateTime = new fhirModels.Element(source._collectedDateTime);
        }
        if (source["collectedPeriod"] !== undefined) {
            _this.collectedPeriod = new fhirModels.Period(source.collectedPeriod);
        }
        if (source["collector"] !== undefined) {
            _this.collector = new fhirModels.Reference(source.collector);
        }
        if (source["source"] !== undefined) {
            _this.source = new fhirModels.Reference(source.source);
        }
        return _this;
    }
    /**
     * Factory function to create a BiologicallyDerivedProductCollection from an object that MUST contain all required elements.
     */
    BiologicallyDerivedProductCollection.CreateStrict = function (source) {
        var dest = new BiologicallyDerivedProductCollection(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "BiologicallyDerivedProductCollection is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current BiologicallyDerivedProductCollection contains all required elements.
     */
    BiologicallyDerivedProductCollection.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return BiologicallyDerivedProductCollection;
}(fhirModels.BackboneElement));
export { BiologicallyDerivedProductCollection };
/**
 * Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
 */
var BiologicallyDerivedProductProcessing = /** @class */ (function (_super) {
    __extends(BiologicallyDerivedProductProcessing, _super);
    /**
     * Default constructor for BiologicallyDerivedProductProcessing from an object that MAY NOT contain all required elements.
     */
    function BiologicallyDerivedProductProcessing(source) {
        var _this = _super.call(this, source) || this;
        if (source["additive"] !== undefined) {
            _this.additive = new fhirModels.Reference(source.additive);
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["procedure"] !== undefined) {
            _this.procedure = new fhirModels.CodeableConcept(source.procedure);
        }
        if (source["timeDateTime"] !== undefined) {
            _this.timeDateTime = source.timeDateTime;
        }
        if (source["_timeDateTime"] !== undefined) {
            _this._timeDateTime = new fhirModels.Element(source._timeDateTime);
        }
        if (source["timePeriod"] !== undefined) {
            _this.timePeriod = new fhirModels.Period(source.timePeriod);
        }
        return _this;
    }
    /**
     * Factory function to create a BiologicallyDerivedProductProcessing from an object that MUST contain all required elements.
     */
    BiologicallyDerivedProductProcessing.CreateStrict = function (source) {
        var dest = new BiologicallyDerivedProductProcessing(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "BiologicallyDerivedProductProcessing is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current BiologicallyDerivedProductProcessing contains all required elements.
     */
    BiologicallyDerivedProductProcessing.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return BiologicallyDerivedProductProcessing;
}(fhirModels.BackboneElement));
export { BiologicallyDerivedProductProcessing };
/**
 * Any manipulation of product post-collection that is intended to alter the product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
 */
var BiologicallyDerivedProductManipulation = /** @class */ (function (_super) {
    __extends(BiologicallyDerivedProductManipulation, _super);
    /**
     * Default constructor for BiologicallyDerivedProductManipulation from an object that MAY NOT contain all required elements.
     */
    function BiologicallyDerivedProductManipulation(source) {
        var _this = _super.call(this, source) || this;
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["timeDateTime"] !== undefined) {
            _this.timeDateTime = source.timeDateTime;
        }
        if (source["_timeDateTime"] !== undefined) {
            _this._timeDateTime = new fhirModels.Element(source._timeDateTime);
        }
        if (source["timePeriod"] !== undefined) {
            _this.timePeriod = new fhirModels.Period(source.timePeriod);
        }
        return _this;
    }
    /**
     * Factory function to create a BiologicallyDerivedProductManipulation from an object that MUST contain all required elements.
     */
    BiologicallyDerivedProductManipulation.CreateStrict = function (source) {
        var dest = new BiologicallyDerivedProductManipulation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "BiologicallyDerivedProductManipulation is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current BiologicallyDerivedProductManipulation contains all required elements.
     */
    BiologicallyDerivedProductManipulation.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return BiologicallyDerivedProductManipulation;
}(fhirModels.BackboneElement));
export { BiologicallyDerivedProductManipulation };
/**
 * Product storage.
 */
var BiologicallyDerivedProductStorage = /** @class */ (function (_super) {
    __extends(BiologicallyDerivedProductStorage, _super);
    /**
     * Default constructor for BiologicallyDerivedProductStorage from an object that MAY NOT contain all required elements.
     */
    function BiologicallyDerivedProductStorage(source) {
        var _this = _super.call(this, source) || this;
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["duration"] !== undefined) {
            _this.duration = new fhirModels.Period(source.duration);
        }
        if (source["scale"] !== undefined) {
            _this.scale = source.scale;
        }
        if (source["_scale"] !== undefined) {
            _this._scale = new fhirModels.Element(source._scale);
        }
        if (source["temperature"] !== undefined) {
            _this.temperature = source.temperature;
        }
        if (source["_temperature"] !== undefined) {
            _this._temperature = new fhirModels.Element(source._temperature);
        }
        return _this;
    }
    /**
     * Factory function to create a BiologicallyDerivedProductStorage from an object that MUST contain all required elements.
     */
    BiologicallyDerivedProductStorage.CreateStrict = function (source) {
        var dest = new BiologicallyDerivedProductStorage(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "BiologicallyDerivedProductStorage is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current BiologicallyDerivedProductStorage contains all required elements.
     */
    BiologicallyDerivedProductStorage.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return BiologicallyDerivedProductStorage;
}(fhirModels.BackboneElement));
export { BiologicallyDerivedProductStorage };
/**
 * Code Values for the BiologicallyDerivedProduct.storage.scale field
 */
export var BiologicallyDerivedProductStorageScaleEnum;
(function (BiologicallyDerivedProductStorageScaleEnum) {
    BiologicallyDerivedProductStorageScaleEnum["FARENHEIT"] = "farenheit";
    BiologicallyDerivedProductStorageScaleEnum["CELSIUS"] = "celsius";
    BiologicallyDerivedProductStorageScaleEnum["KELVIN"] = "kelvin";
})(BiologicallyDerivedProductStorageScaleEnum || (BiologicallyDerivedProductStorageScaleEnum = {}));
/**
 * A material substance originating from a biological entity intended to be transplanted or infused
 * into another (possibly the same) biological entity.
 */
var BiologicallyDerivedProduct = /** @class */ (function (_super) {
    __extends(BiologicallyDerivedProduct, _super);
    /**
     * Default constructor for BiologicallyDerivedProduct from an object that MAY NOT contain all required elements.
     */
    function BiologicallyDerivedProduct(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "BiologicallyDerivedProduct";
        if ((source['resourceType'] !== "BiologicallyDerivedProduct") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a BiologicallyDerivedProduct';
        }
        if (source["collection"] !== undefined) {
            _this.collection = new fhirModels.BiologicallyDerivedProductCollection(source.collection);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["manipulation"] !== undefined) {
            _this.manipulation = new fhirModels.BiologicallyDerivedProductManipulation(source.manipulation);
        }
        if (source["parent"] !== undefined) {
            _this.parent = source.parent.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["processing"] !== undefined) {
            _this.processing = source.processing.map(function (x) { return new fhirModels.BiologicallyDerivedProductProcessing(x); });
        }
        if (source["productCategory"] !== undefined) {
            _this.productCategory = source.productCategory;
        }
        if (source["_productCategory"] !== undefined) {
            _this._productCategory = new fhirModels.Element(source._productCategory);
        }
        if (source["productCode"] !== undefined) {
            _this.productCode = new fhirModels.CodeableConcept(source.productCode);
        }
        if (source["quantity"] !== undefined) {
            _this.quantity = source.quantity;
        }
        if (source["_quantity"] !== undefined) {
            _this._quantity = new fhirModels.Element(source._quantity);
        }
        if (source["request"] !== undefined) {
            _this.request = source.request.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["status"] !== undefined) {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["storage"] !== undefined) {
            _this.storage = source.storage.map(function (x) { return new fhirModels.BiologicallyDerivedProductStorage(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a BiologicallyDerivedProduct from an object that MUST contain all required elements.
     */
    BiologicallyDerivedProduct.CreateStrict = function (source) {
        var dest = new BiologicallyDerivedProduct(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "BiologicallyDerivedProduct is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current BiologicallyDerivedProduct contains all required elements.
     */
    BiologicallyDerivedProduct.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return BiologicallyDerivedProduct;
}(fhirModels.DomainResource));
export { BiologicallyDerivedProduct };
/**
 * Code Values for the BiologicallyDerivedProduct.productCategory field
 */
export var BiologicallyDerivedProductProductCategoryEnum;
(function (BiologicallyDerivedProductProductCategoryEnum) {
    BiologicallyDerivedProductProductCategoryEnum["ORGAN"] = "organ";
    BiologicallyDerivedProductProductCategoryEnum["TISSUE"] = "tissue";
    BiologicallyDerivedProductProductCategoryEnum["FLUID"] = "fluid";
    BiologicallyDerivedProductProductCategoryEnum["CELLS"] = "cells";
    BiologicallyDerivedProductProductCategoryEnum["BIOLOGICALAGENT"] = "biologicalAgent";
})(BiologicallyDerivedProductProductCategoryEnum || (BiologicallyDerivedProductProductCategoryEnum = {}));
/**
 * Code Values for the BiologicallyDerivedProduct.status field
 */
export var BiologicallyDerivedProductStatusEnum;
(function (BiologicallyDerivedProductStatusEnum) {
    BiologicallyDerivedProductStatusEnum["AVAILABLE"] = "available";
    BiologicallyDerivedProductStatusEnum["UNAVAILABLE"] = "unavailable";
})(BiologicallyDerivedProductStatusEnum || (BiologicallyDerivedProductStatusEnum = {}));
