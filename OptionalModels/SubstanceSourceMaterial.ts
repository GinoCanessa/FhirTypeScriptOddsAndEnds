// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels'
import * as fhirInterfaces from '../optionalinterfaces'
/**
 * Many complex materials are fractions of parts of plants, animals, or minerals. Fraction elements are often necessary to define both Substances and Specified Group 1 Substances. For substances derived from Plants, fraction information will be captured at the Substance information level ( . Oils, Juices and Exudates). Additional information for Extracts, such as extraction solvent composition, will be captured at the Specified Substance Group 1 information level. For plasma-derived products fraction information will be captured at the Substance and the Specified Substance Group 1 levels.
 */
export class SubstanceSourceMaterialFractionDescription extends fhirModels.BackboneElement implements fhirInterfaces.ISubstanceSourceMaterialFractionDescription {
  /**
   * This element is capturing information about the fraction of a plant part, or human plasma for fractionation.
   */
  fraction?: string|undefined;
  _fraction?: fhirModels.Element|undefined;
  /**
   * The specific type of the material constituting the component. For Herbal preparations the particulars of the extracts (liquid/dry) is described in Specified Substance Group 1.
   */
  materialType?: fhirModels.CodeableConcept|undefined;
  /**
   * Default constructor for SubstanceSourceMaterialFractionDescription from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.ISubstanceSourceMaterialFractionDescription>) {
    super(source);
    if (source["fraction"] !== undefined) { this.fraction = source.fraction; }
    if (source["_fraction"] !== undefined) { this._fraction = new fhirModels.Element(source._fraction); }
    if (source["materialType"] !== undefined) { this.materialType = new fhirModels.CodeableConcept(source.materialType); }
  }
  /**
   * Factory function to create a SubstanceSourceMaterialFractionDescription from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.ISubstanceSourceMaterialFractionDescription):SubstanceSourceMaterialFractionDescription {
    var dest:SubstanceSourceMaterialFractionDescription = new SubstanceSourceMaterialFractionDescription(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `SubstanceSourceMaterialFractionDescription is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current SubstanceSourceMaterialFractionDescription contains all required elements.
   */
  checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
/**
 * 4.9.13.6.1 Author type (Conditional).
 */
export class SubstanceSourceMaterialOrganismAuthor extends fhirModels.BackboneElement implements fhirInterfaces.ISubstanceSourceMaterialOrganismAuthor {
  /**
   * The author of an organism species shall be specified. The author year of an organism shall also be specified when applicable; refers to the year in which the first author(s) published the infraspecific plant/animal name (of any rank).
   */
  authorDescription?: string|undefined;
  _authorDescription?: fhirModels.Element|undefined;
  /**
   * The type of author of an organism species shall be specified. The parenthetical author of an organism species refers to the first author who published the plant/animal name (of any rank). The primary author of an organism species refers to the first author(s), who validly published the plant/animal name.
   */
  authorType?: fhirModels.CodeableConcept|undefined;
  /**
   * Default constructor for SubstanceSourceMaterialOrganismAuthor from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.ISubstanceSourceMaterialOrganismAuthor>) {
    super(source);
    if (source["authorDescription"] !== undefined) { this.authorDescription = source.authorDescription; }
    if (source["_authorDescription"] !== undefined) { this._authorDescription = new fhirModels.Element(source._authorDescription); }
    if (source["authorType"] !== undefined) { this.authorType = new fhirModels.CodeableConcept(source.authorType); }
  }
  /**
   * Factory function to create a SubstanceSourceMaterialOrganismAuthor from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.ISubstanceSourceMaterialOrganismAuthor):SubstanceSourceMaterialOrganismAuthor {
    var dest:SubstanceSourceMaterialOrganismAuthor = new SubstanceSourceMaterialOrganismAuthor(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `SubstanceSourceMaterialOrganismAuthor is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current SubstanceSourceMaterialOrganismAuthor contains all required elements.
   */
  checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
/**
 * 4.9.13.8.1 Hybrid species maternal organism ID (Optional).
 */
export class SubstanceSourceMaterialOrganismHybrid extends fhirModels.BackboneElement implements fhirInterfaces.ISubstanceSourceMaterialOrganismHybrid {
  /**
   * The hybrid type of an organism shall be specified.
   */
  hybridType?: fhirModels.CodeableConcept|undefined;
  /**
   * The identifier of the maternal species constituting the hybrid organism shall be specified based on a controlled vocabulary. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal.
   */
  maternalOrganismId?: string|undefined;
  _maternalOrganismId?: fhirModels.Element|undefined;
  /**
   * The name of the maternal species constituting the hybrid organism shall be specified. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal.
   */
  maternalOrganismName?: string|undefined;
  _maternalOrganismName?: fhirModels.Element|undefined;
  /**
   * The identifier of the paternal species constituting the hybrid organism shall be specified based on a controlled vocabulary.
   */
  paternalOrganismId?: string|undefined;
  _paternalOrganismId?: fhirModels.Element|undefined;
  /**
   * The name of the paternal species constituting the hybrid organism shall be specified.
   */
  paternalOrganismName?: string|undefined;
  _paternalOrganismName?: fhirModels.Element|undefined;
  /**
   * Default constructor for SubstanceSourceMaterialOrganismHybrid from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.ISubstanceSourceMaterialOrganismHybrid>) {
    super(source);
    if (source["hybridType"] !== undefined) { this.hybridType = new fhirModels.CodeableConcept(source.hybridType); }
    if (source["maternalOrganismId"] !== undefined) { this.maternalOrganismId = source.maternalOrganismId; }
    if (source["_maternalOrganismId"] !== undefined) { this._maternalOrganismId = new fhirModels.Element(source._maternalOrganismId); }
    if (source["maternalOrganismName"] !== undefined) { this.maternalOrganismName = source.maternalOrganismName; }
    if (source["_maternalOrganismName"] !== undefined) { this._maternalOrganismName = new fhirModels.Element(source._maternalOrganismName); }
    if (source["paternalOrganismId"] !== undefined) { this.paternalOrganismId = source.paternalOrganismId; }
    if (source["_paternalOrganismId"] !== undefined) { this._paternalOrganismId = new fhirModels.Element(source._paternalOrganismId); }
    if (source["paternalOrganismName"] !== undefined) { this.paternalOrganismName = source.paternalOrganismName; }
    if (source["_paternalOrganismName"] !== undefined) { this._paternalOrganismName = new fhirModels.Element(source._paternalOrganismName); }
  }
  /**
   * Factory function to create a SubstanceSourceMaterialOrganismHybrid from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.ISubstanceSourceMaterialOrganismHybrid):SubstanceSourceMaterialOrganismHybrid {
    var dest:SubstanceSourceMaterialOrganismHybrid = new SubstanceSourceMaterialOrganismHybrid(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `SubstanceSourceMaterialOrganismHybrid is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current SubstanceSourceMaterialOrganismHybrid contains all required elements.
   */
  checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
/**
 * 4.9.13.7.1 Kingdom (Conditional).
 */
export class SubstanceSourceMaterialOrganismOrganismGeneral extends fhirModels.BackboneElement implements fhirInterfaces.ISubstanceSourceMaterialOrganismOrganismGeneral {
  /**
   * The class of an organism shall be specified.
   */
  class?: fhirModels.CodeableConcept|undefined;
  /**
   * The kingdom of an organism shall be specified.
   */
  kingdom?: fhirModels.CodeableConcept|undefined;
  /**
   * The order of an organism shall be specified,.
   */
  order?: fhirModels.CodeableConcept|undefined;
  /**
   * The phylum of an organism shall be specified.
   */
  phylum?: fhirModels.CodeableConcept|undefined;
  /**
   * Default constructor for SubstanceSourceMaterialOrganismOrganismGeneral from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.ISubstanceSourceMaterialOrganismOrganismGeneral>) {
    super(source);
    if (source["class"] !== undefined) { this.class = new fhirModels.CodeableConcept(source.class); }
    if (source["kingdom"] !== undefined) { this.kingdom = new fhirModels.CodeableConcept(source.kingdom); }
    if (source["order"] !== undefined) { this.order = new fhirModels.CodeableConcept(source.order); }
    if (source["phylum"] !== undefined) { this.phylum = new fhirModels.CodeableConcept(source.phylum); }
  }
  /**
   * Factory function to create a SubstanceSourceMaterialOrganismOrganismGeneral from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.ISubstanceSourceMaterialOrganismOrganismGeneral):SubstanceSourceMaterialOrganismOrganismGeneral {
    var dest:SubstanceSourceMaterialOrganismOrganismGeneral = new SubstanceSourceMaterialOrganismOrganismGeneral(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `SubstanceSourceMaterialOrganismOrganismGeneral is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current SubstanceSourceMaterialOrganismOrganismGeneral contains all required elements.
   */
  checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
/**
 * This subclause describes the organism which the substance is derived from. For vaccines, the parent organism shall be specified based on these subclause elements. As an example, full taxonomy will be described for the Substance Name: ., Leaf.
 */
export class SubstanceSourceMaterialOrganism extends fhirModels.BackboneElement implements fhirInterfaces.ISubstanceSourceMaterialOrganism {
  /**
   * 4.9.13.6.1 Author type (Conditional).
   */
  author?: fhirModels.SubstanceSourceMaterialOrganismAuthor[]|undefined;
  /**
   * The family of an organism shall be specified.
   */
  family?: fhirModels.CodeableConcept|undefined;
  /**
   * The genus of an organism shall be specified; refers to the Latin epithet of the genus element of the plant/animal scientific name; it is present in names for genera, species and infraspecies.
   */
  genus?: fhirModels.CodeableConcept|undefined;
  /**
   * 4.9.13.8.1 Hybrid species maternal organism ID (Optional).
   */
  hybrid?: fhirModels.SubstanceSourceMaterialOrganismHybrid|undefined;
  /**
   * The intraspecific description of an organism shall be specified based on a controlled vocabulary. For Influenza Vaccine, the intraspecific description shall contain the syntax of the antigen in line with the WHO convention.
   */
  intraspecificDescription?: string|undefined;
  _intraspecificDescription?: fhirModels.Element|undefined;
  /**
   * The Intraspecific type of an organism shall be specified.
   */
  intraspecificType?: fhirModels.CodeableConcept|undefined;
  /**
   * 4.9.13.7.1 Kingdom (Conditional).
   */
  organismGeneral?: fhirModels.SubstanceSourceMaterialOrganismOrganismGeneral|undefined;
  /**
   * The species of an organism shall be specified; refers to the Latin epithet of the species of the plant/animal; it is present in names for species and infraspecies.
   */
  species?: fhirModels.CodeableConcept|undefined;
  /**
   * Default constructor for SubstanceSourceMaterialOrganism from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.ISubstanceSourceMaterialOrganism>) {
    super(source);
    if (source["author"] !== undefined) { this.author = source.author.map((x) => new fhirModels.SubstanceSourceMaterialOrganismAuthor(x)); }
    if (source["family"] !== undefined) { this.family = new fhirModels.CodeableConcept(source.family); }
    if (source["genus"] !== undefined) { this.genus = new fhirModels.CodeableConcept(source.genus); }
    if (source["hybrid"] !== undefined) { this.hybrid = new fhirModels.SubstanceSourceMaterialOrganismHybrid(source.hybrid); }
    if (source["intraspecificDescription"] !== undefined) { this.intraspecificDescription = source.intraspecificDescription; }
    if (source["_intraspecificDescription"] !== undefined) { this._intraspecificDescription = new fhirModels.Element(source._intraspecificDescription); }
    if (source["intraspecificType"] !== undefined) { this.intraspecificType = new fhirModels.CodeableConcept(source.intraspecificType); }
    if (source["organismGeneral"] !== undefined) { this.organismGeneral = new fhirModels.SubstanceSourceMaterialOrganismOrganismGeneral(source.organismGeneral); }
    if (source["species"] !== undefined) { this.species = new fhirModels.CodeableConcept(source.species); }
  }
  /**
   * Factory function to create a SubstanceSourceMaterialOrganism from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.ISubstanceSourceMaterialOrganism):SubstanceSourceMaterialOrganism {
    var dest:SubstanceSourceMaterialOrganism = new SubstanceSourceMaterialOrganism(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `SubstanceSourceMaterialOrganism is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current SubstanceSourceMaterialOrganism contains all required elements.
   */
  checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
/**
 * To do.
 */
export class SubstanceSourceMaterialPartDescription extends fhirModels.BackboneElement implements fhirInterfaces.ISubstanceSourceMaterialPartDescription {
  /**
   * Entity of anatomical origin of source material within an organism.
   */
  part?: fhirModels.CodeableConcept|undefined;
  /**
   * The detailed anatomic location when the part can be extracted from different anatomical locations of the organism. Multiple alternative locations may apply.
   */
  partLocation?: fhirModels.CodeableConcept|undefined;
  /**
   * Default constructor for SubstanceSourceMaterialPartDescription from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.ISubstanceSourceMaterialPartDescription>) {
    super(source);
    if (source["part"] !== undefined) { this.part = new fhirModels.CodeableConcept(source.part); }
    if (source["partLocation"] !== undefined) { this.partLocation = new fhirModels.CodeableConcept(source.partLocation); }
  }
  /**
   * Factory function to create a SubstanceSourceMaterialPartDescription from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.ISubstanceSourceMaterialPartDescription):SubstanceSourceMaterialPartDescription {
    var dest:SubstanceSourceMaterialPartDescription = new SubstanceSourceMaterialPartDescription(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `SubstanceSourceMaterialPartDescription is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current SubstanceSourceMaterialPartDescription contains all required elements.
   */
  checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
/**
 * Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.
 */
export class SubstanceSourceMaterial extends fhirModels.DomainResource implements fhirInterfaces.ISubstanceSourceMaterial {
  /**
   * Resource Type Name
   */
  readonly resourceType = "SubstanceSourceMaterial";
  /**
   * The country where the plant material is harvested or the countries where the plasma is sourced from as laid down in accordance with the Plasma Master File. For “Plasma-derived substances” the attribute country of origin provides information about the countries used for the manufacturing of the Cryopoor plama or Crioprecipitate.
   */
  countryOfOrigin?: fhirModels.CodeableConcept[]|undefined;
  /**
   * Stage of life for animals, plants, insects and microorganisms. This information shall be provided only when the substance is significantly different in these stages (e.g. foetal bovine serum).
   */
  developmentStage?: fhirModels.CodeableConcept|undefined;
  /**
   * Many complex materials are fractions of parts of plants, animals, or minerals. Fraction elements are often necessary to define both Substances and Specified Group 1 Substances. For substances derived from Plants, fraction information will be captured at the Substance information level ( . Oils, Juices and Exudates). Additional information for Extracts, such as extraction solvent composition, will be captured at the Specified Substance Group 1 information level. For plasma-derived products fraction information will be captured at the Substance and the Specified Substance Group 1 levels.
   */
  fractionDescription?: fhirModels.SubstanceSourceMaterialFractionDescription[]|undefined;
  /**
   * The place/region where the plant is harvested or the places/regions where the animal source material has its habitat.
   */
  geographicalLocation?: string[]|undefined;
  _geographicalLocation?: fhirModels.Element[]|undefined;
  /**
   * This subclause describes the organism which the substance is derived from. For vaccines, the parent organism shall be specified based on these subclause elements. As an example, full taxonomy will be described for the Substance Name: ., Leaf.
   */
  organism?: fhirModels.SubstanceSourceMaterialOrganism|undefined;
  /**
   * The unique identifier associated with the source material parent organism shall be specified.
   */
  organismId?: fhirModels.Identifier|undefined;
  /**
   * The organism accepted Scientific name shall be provided based on the organism taxonomy.
   */
  organismName?: string|undefined;
  _organismName?: fhirModels.Element|undefined;
  /**
   * The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID of the substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L. (Whole plant).
   */
  parentSubstanceId?: fhirModels.Identifier[]|undefined;
  /**
   * The parent substance of the Herbal Drug, or Herbal preparation.
   */
  parentSubstanceName?: string[]|undefined;
  _parentSubstanceName?: fhirModels.Element[]|undefined;
  /**
   * To do.
   */
  partDescription?: fhirModels.SubstanceSourceMaterialPartDescription[]|undefined;
  /**
   * General high level classification of the source material specific to the origin of the material.
   */
  sourceMaterialClass?: fhirModels.CodeableConcept|undefined;
  /**
   * The state of the source material when extracted.
   */
  sourceMaterialState?: fhirModels.CodeableConcept|undefined;
  /**
   * The type of the source material shall be specified based on a controlled vocabulary. For vaccines, this subclause refers to the class of infectious agent.
   */
  sourceMaterialType?: fhirModels.CodeableConcept|undefined;
  /**
   * Default constructor for SubstanceSourceMaterial from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.ISubstanceSourceMaterial>) {
    super(source);
    if ((source['resourceType'] !== "SubstanceSourceMaterial") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a SubstanceSourceMaterial'; }
    if (source["countryOfOrigin"] !== undefined) { this.countryOfOrigin = source.countryOfOrigin.map((x) => new fhirModels.CodeableConcept(x)); }
    if (source["developmentStage"] !== undefined) { this.developmentStage = new fhirModels.CodeableConcept(source.developmentStage); }
    if (source["fractionDescription"] !== undefined) { this.fractionDescription = source.fractionDescription.map((x) => new fhirModels.SubstanceSourceMaterialFractionDescription(x)); }
    if (source["geographicalLocation"] !== undefined) { this.geographicalLocation = source.geographicalLocation.map((x) => (x)); }
    if (source["_geographicalLocation"] !== undefined) { this._geographicalLocation = source._geographicalLocation.map((x) => new fhirModels.Element(x)); }
    if (source["organism"] !== undefined) { this.organism = new fhirModels.SubstanceSourceMaterialOrganism(source.organism); }
    if (source["organismId"] !== undefined) { this.organismId = new fhirModels.Identifier(source.organismId); }
    if (source["organismName"] !== undefined) { this.organismName = source.organismName; }
    if (source["_organismName"] !== undefined) { this._organismName = new fhirModels.Element(source._organismName); }
    if (source["parentSubstanceId"] !== undefined) { this.parentSubstanceId = source.parentSubstanceId.map((x) => new fhirModels.Identifier(x)); }
    if (source["parentSubstanceName"] !== undefined) { this.parentSubstanceName = source.parentSubstanceName.map((x) => (x)); }
    if (source["_parentSubstanceName"] !== undefined) { this._parentSubstanceName = source._parentSubstanceName.map((x) => new fhirModels.Element(x)); }
    if (source["partDescription"] !== undefined) { this.partDescription = source.partDescription.map((x) => new fhirModels.SubstanceSourceMaterialPartDescription(x)); }
    if (source["sourceMaterialClass"] !== undefined) { this.sourceMaterialClass = new fhirModels.CodeableConcept(source.sourceMaterialClass); }
    if (source["sourceMaterialState"] !== undefined) { this.sourceMaterialState = new fhirModels.CodeableConcept(source.sourceMaterialState); }
    if (source["sourceMaterialType"] !== undefined) { this.sourceMaterialType = new fhirModels.CodeableConcept(source.sourceMaterialType); }
  }
  /**
   * Factory function to create a SubstanceSourceMaterial from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.ISubstanceSourceMaterial):SubstanceSourceMaterial {
    var dest:SubstanceSourceMaterial = new SubstanceSourceMaterial(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `SubstanceSourceMaterial is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current SubstanceSourceMaterial contains all required elements.
   */
  checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
