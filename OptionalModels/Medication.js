"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MedicationStatusEnum = exports.Medication = exports.MedicationBatch = exports.MedicationIngredient = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * The ingredients need not be a complete list.  If an ingredient is not specified, this does not indicate whether an ingredient is present or absent.  If an ingredient is specified it does not mean that all ingredients are specified.  It is possible to specify both inactive and active ingredients.
 */
class MedicationIngredient extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicationIngredient from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["isActive"] !== undefined) {
            this.isActive = source.isActive;
        }
        if (source["_isActive"] !== undefined) {
            this._isActive = new fhirModels.Element(source._isActive);
        }
        if (source["itemCodeableConcept"] !== undefined) {
            this.itemCodeableConcept = new fhirModels.CodeableConcept(source.itemCodeableConcept);
        }
        if (source["itemReference"] !== undefined) {
            this.itemReference = new fhirModels.Reference(source.itemReference);
        }
        if (source["strength"] !== undefined) {
            this.strength = new fhirModels.Ratio(source.strength);
        }
    }
    /**
     * Factory function to create a MedicationIngredient from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MedicationIngredient(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationIngredient is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MedicationIngredient contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MedicationIngredient = MedicationIngredient;
/**
 * Information that only applies to packages (not products).
 */
class MedicationBatch extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicationBatch from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["expirationDate"] !== undefined) {
            this.expirationDate = source.expirationDate;
        }
        if (source["_expirationDate"] !== undefined) {
            this._expirationDate = new fhirModels.Element(source._expirationDate);
        }
        if (source["lotNumber"] !== undefined) {
            this.lotNumber = source.lotNumber;
        }
        if (source["_lotNumber"] !== undefined) {
            this._lotNumber = new fhirModels.Element(source._lotNumber);
        }
    }
    /**
     * Factory function to create a MedicationBatch from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MedicationBatch(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationBatch is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MedicationBatch contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MedicationBatch = MedicationBatch;
/**
 * This resource is primarily used for the identification and definition of a medication for the purposes of prescribing, dispensing, and administering a medication as well as for making statements about medication use.
 */
class Medication extends fhirModels.DomainResource {
    /**
     * Default constructor for Medication from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "Medication";
        if ((source['resourceType'] !== "Medication") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Medication';
        }
        if (source["amount"] !== undefined) {
            this.amount = new fhirModels.Ratio(source.amount);
        }
        if (source["batch"] !== undefined) {
            this.batch = new fhirModels.MedicationBatch(source.batch);
        }
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["form"] !== undefined) {
            this.form = new fhirModels.CodeableConcept(source.form);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["ingredient"] !== undefined) {
            this.ingredient = source.ingredient.map((x) => new fhirModels.MedicationIngredient(x));
        }
        if (source["manufacturer"] !== undefined) {
            this.manufacturer = new fhirModels.Reference(source.manufacturer);
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
    }
    /**
     * Factory function to create a Medication from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new Medication(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Medication is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current Medication contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.Medication = Medication;
/**
 * Code Values for the Medication.status field
 */
var MedicationStatusEnum;
(function (MedicationStatusEnum) {
    MedicationStatusEnum["ACTIVE"] = "active";
    MedicationStatusEnum["INACTIVE"] = "inactive";
    MedicationStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(MedicationStatusEnum = exports.MedicationStatusEnum || (exports.MedicationStatusEnum = {}));
//# sourceMappingURL=Medication.js.map