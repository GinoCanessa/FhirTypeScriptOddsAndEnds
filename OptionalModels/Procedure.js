var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * Limited to "real" people rather than equipment.
 */
var ProcedurePerformer = /** @class */ (function (_super) {
    __extends(ProcedurePerformer, _super);
    /**
     * Default constructor for ProcedurePerformer from an object that MAY NOT contain all required elements.
     */
    function ProcedurePerformer(source) {
        var _this = _super.call(this, source) || this;
        if (source["actor"] !== undefined) {
            _this.actor = new fhirModels.Reference(source.actor);
        }
        if (source["function"] !== undefined) {
            _this["function"] = new fhirModels.CodeableConcept(source["function"]);
        }
        if (source["onBehalfOf"] !== undefined) {
            _this.onBehalfOf = new fhirModels.Reference(source.onBehalfOf);
        }
        return _this;
    }
    /**
     * Factory function to create a ProcedurePerformer from an object that MUST contain all required elements.
     */
    ProcedurePerformer.CreateStrict = function (source) {
        var dest = new ProcedurePerformer(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ProcedurePerformer is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ProcedurePerformer contains all required elements.
     */
    ProcedurePerformer.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["actor"] === undefined) {
            missingElements.push("actor");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ProcedurePerformer;
}(fhirModels.BackboneElement));
export { ProcedurePerformer };
/**
 * A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
 */
var ProcedureFocalDevice = /** @class */ (function (_super) {
    __extends(ProcedureFocalDevice, _super);
    /**
     * Default constructor for ProcedureFocalDevice from an object that MAY NOT contain all required elements.
     */
    function ProcedureFocalDevice(source) {
        var _this = _super.call(this, source) || this;
        if (source["action"] !== undefined) {
            _this.action = new fhirModels.CodeableConcept(source.action);
        }
        if (source["manipulated"] !== undefined) {
            _this.manipulated = new fhirModels.Reference(source.manipulated);
        }
        return _this;
    }
    /**
     * Factory function to create a ProcedureFocalDevice from an object that MUST contain all required elements.
     */
    ProcedureFocalDevice.CreateStrict = function (source) {
        var dest = new ProcedureFocalDevice(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ProcedureFocalDevice is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ProcedureFocalDevice contains all required elements.
     */
    ProcedureFocalDevice.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["manipulated"] === undefined) {
            missingElements.push("manipulated");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ProcedureFocalDevice;
}(fhirModels.BackboneElement));
export { ProcedureFocalDevice };
/**
 * An action that is or was performed on or for a patient. This can be a physical intervention like an operation, or less invasive like long term services, counseling, or hypnotherapy.
 */
var Procedure = /** @class */ (function (_super) {
    __extends(Procedure, _super);
    /**
     * Default constructor for Procedure from an object that MAY NOT contain all required elements.
     */
    function Procedure(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "Procedure";
        if ((source['resourceType'] !== "Procedure") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Procedure';
        }
        if (source["asserter"] !== undefined) {
            _this.asserter = new fhirModels.Reference(source.asserter);
        }
        if (source["basedOn"] !== undefined) {
            _this.basedOn = source.basedOn.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["bodySite"] !== undefined) {
            _this.bodySite = source.bodySite.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["category"] !== undefined) {
            _this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["code"] !== undefined) {
            _this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["complication"] !== undefined) {
            _this.complication = source.complication.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["complicationDetail"] !== undefined) {
            _this.complicationDetail = source.complicationDetail.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["encounter"] !== undefined) {
            _this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["focalDevice"] !== undefined) {
            _this.focalDevice = source.focalDevice.map(function (x) { return new fhirModels.ProcedureFocalDevice(x); });
        }
        if (source["followUp"] !== undefined) {
            _this.followUp = source.followUp.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["instantiatesCanonical"] !== undefined) {
            _this.instantiatesCanonical = source.instantiatesCanonical.map(function (x) { return (x); });
        }
        if (source["_instantiatesCanonical"] !== undefined) {
            _this._instantiatesCanonical = source._instantiatesCanonical.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["instantiatesUri"] !== undefined) {
            _this.instantiatesUri = source.instantiatesUri.map(function (x) { return (x); });
        }
        if (source["_instantiatesUri"] !== undefined) {
            _this._instantiatesUri = source._instantiatesUri.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["location"] !== undefined) {
            _this.location = new fhirModels.Reference(source.location);
        }
        if (source["note"] !== undefined) {
            _this.note = source.note.map(function (x) { return new fhirModels.Annotation(x); });
        }
        if (source["outcome"] !== undefined) {
            _this.outcome = new fhirModels.CodeableConcept(source.outcome);
        }
        if (source["partOf"] !== undefined) {
            _this.partOf = source.partOf.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["performedDateTime"] !== undefined) {
            _this.performedDateTime = source.performedDateTime;
        }
        if (source["_performedDateTime"] !== undefined) {
            _this._performedDateTime = new fhirModels.Element(source._performedDateTime);
        }
        if (source["performedPeriod"] !== undefined) {
            _this.performedPeriod = new fhirModels.Period(source.performedPeriod);
        }
        if (source["performedString"] !== undefined) {
            _this.performedString = source.performedString;
        }
        if (source["_performedString"] !== undefined) {
            _this._performedString = new fhirModels.Element(source._performedString);
        }
        if (source["performedAge"] !== undefined) {
            _this.performedAge = new fhirModels.Age(source.performedAge);
        }
        if (source["performedRange"] !== undefined) {
            _this.performedRange = new fhirModels.Range(source.performedRange);
        }
        if (source["performer"] !== undefined) {
            _this.performer = source.performer.map(function (x) { return new fhirModels.ProcedurePerformer(x); });
        }
        if (source["reasonCode"] !== undefined) {
            _this.reasonCode = source.reasonCode.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["reasonReference"] !== undefined) {
            _this.reasonReference = source.reasonReference.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["recorder"] !== undefined) {
            _this.recorder = new fhirModels.Reference(source.recorder);
        }
        if (source["report"] !== undefined) {
            _this.report = source.report.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["status"] !== undefined) {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["statusReason"] !== undefined) {
            _this.statusReason = new fhirModels.CodeableConcept(source.statusReason);
        }
        if (source["subject"] !== undefined) {
            _this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["usedCode"] !== undefined) {
            _this.usedCode = source.usedCode.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["usedReference"] !== undefined) {
            _this.usedReference = source.usedReference.map(function (x) { return new fhirModels.Reference(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a Procedure from an object that MUST contain all required elements.
     */
    Procedure.CreateStrict = function (source) {
        var dest = new Procedure(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "Procedure is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current Procedure contains all required elements.
     */
    Procedure.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["subject"] === undefined) {
            missingElements.push("subject");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return Procedure;
}(fhirModels.DomainResource));
export { Procedure };
/**
 * Code Values for the Procedure.status field
 */
export var ProcedureStatusEnum;
(function (ProcedureStatusEnum) {
    ProcedureStatusEnum["PREPARATION"] = "preparation";
    ProcedureStatusEnum["IN_PROGRESS"] = "in-progress";
    ProcedureStatusEnum["NOT_DONE"] = "not-done";
    ProcedureStatusEnum["ON_HOLD"] = "on-hold";
    ProcedureStatusEnum["STOPPED"] = "stopped";
    ProcedureStatusEnum["COMPLETED"] = "completed";
    ProcedureStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    ProcedureStatusEnum["UNKNOWN"] = "unknown";
})(ProcedureStatusEnum || (ProcedureStatusEnum = {}));
