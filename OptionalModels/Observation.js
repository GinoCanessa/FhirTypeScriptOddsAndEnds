"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservationStatusEnum = exports.Observation = exports.ObservationComponent = exports.ObservationReferenceRange = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * Most observations only have one generic reference range. Systems MAY choose to restrict to only supplying the relevant reference range based on knowledge about the patient (e.g., specific to the patient's age, gender, weight and other factors), but this might not be possible or appropriate. Whenever more than one reference range is supplied, the differences between them SHOULD be provided in the reference range and/or age properties.
 */
class ObservationReferenceRange extends fhirModels.BackboneElement {
    /**
     * Default constructor for ObservationReferenceRange from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["age"] !== undefined) {
            this.age = new fhirModels.Range(source.age);
        }
        if (source["appliesTo"] !== undefined) {
            this.appliesTo = source.appliesTo.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["high"] !== undefined) {
            this.high = new fhirModels.Quantity(source.high);
        }
        if (source["low"] !== undefined) {
            this.low = new fhirModels.Quantity(source.low);
        }
        if (source["text"] !== undefined) {
            this.text = source.text;
        }
        if (source["_text"] !== undefined) {
            this._text = new fhirModels.Element(source._text);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
    /**
     * Factory function to create a ObservationReferenceRange from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ObservationReferenceRange(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ObservationReferenceRange is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ObservationReferenceRange contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ObservationReferenceRange = ObservationReferenceRange;
/**
 * For a discussion on the ways Observations can be assembled in groups together see [Notes](observation.html#notes) below.
 */
class ObservationComponent extends fhirModels.BackboneElement {
    /**
     * Default constructor for ObservationComponent from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["dataAbsentReason"] !== undefined) {
            this.dataAbsentReason = new fhirModels.CodeableConcept(source.dataAbsentReason);
        }
        if (source["interpretation"] !== undefined) {
            this.interpretation = source.interpretation.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["referenceRange"] !== undefined) {
            this.referenceRange = source.referenceRange.map((x) => new fhirModels.ObservationReferenceRange(x));
        }
        if (source["valueQuantity"] !== undefined) {
            this.valueQuantity = new fhirModels.Quantity(source.valueQuantity);
        }
        if (source["valueCodeableConcept"] !== undefined) {
            this.valueCodeableConcept = new fhirModels.CodeableConcept(source.valueCodeableConcept);
        }
        if (source["valueString"] !== undefined) {
            this.valueString = source.valueString;
        }
        if (source["_valueString"] !== undefined) {
            this._valueString = new fhirModels.Element(source._valueString);
        }
        if (source["valueBoolean"] !== undefined) {
            this.valueBoolean = source.valueBoolean;
        }
        if (source["_valueBoolean"] !== undefined) {
            this._valueBoolean = new fhirModels.Element(source._valueBoolean);
        }
        if (source["valueInteger"] !== undefined) {
            this.valueInteger = source.valueInteger;
        }
        if (source["_valueInteger"] !== undefined) {
            this._valueInteger = new fhirModels.Element(source._valueInteger);
        }
        if (source["valueRange"] !== undefined) {
            this.valueRange = new fhirModels.Range(source.valueRange);
        }
        if (source["valueRatio"] !== undefined) {
            this.valueRatio = new fhirModels.Ratio(source.valueRatio);
        }
        if (source["valueSampledData"] !== undefined) {
            this.valueSampledData = new fhirModels.SampledData(source.valueSampledData);
        }
        if (source["valueTime"] !== undefined) {
            this.valueTime = source.valueTime;
        }
        if (source["_valueTime"] !== undefined) {
            this._valueTime = new fhirModels.Element(source._valueTime);
        }
        if (source["valueDateTime"] !== undefined) {
            this.valueDateTime = source.valueDateTime;
        }
        if (source["_valueDateTime"] !== undefined) {
            this._valueDateTime = new fhirModels.Element(source._valueDateTime);
        }
        if (source["valuePeriod"] !== undefined) {
            this.valuePeriod = new fhirModels.Period(source.valuePeriod);
        }
    }
    /**
     * Factory function to create a ObservationComponent from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ObservationComponent(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ObservationComponent is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ObservationComponent contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ObservationComponent = ObservationComponent;
/**
 * Measurements and simple assertions made about a patient, device or other subject.
 */
class Observation extends fhirModels.DomainResource {
    /**
     * Default constructor for Observation from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "Observation";
        if ((source['resourceType'] !== "Observation") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Observation';
        }
        if (source["basedOn"] !== undefined) {
            this.basedOn = source.basedOn.map((x) => new fhirModels.Reference(x));
        }
        if (source["bodySite"] !== undefined) {
            this.bodySite = new fhirModels.CodeableConcept(source.bodySite);
        }
        if (source["category"] !== undefined) {
            this.category = source.category.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["component"] !== undefined) {
            this.component = source.component.map((x) => new fhirModels.ObservationComponent(x));
        }
        if (source["dataAbsentReason"] !== undefined) {
            this.dataAbsentReason = new fhirModels.CodeableConcept(source.dataAbsentReason);
        }
        if (source["derivedFrom"] !== undefined) {
            this.derivedFrom = source.derivedFrom.map((x) => new fhirModels.Reference(x));
        }
        if (source["device"] !== undefined) {
            this.device = new fhirModels.Reference(source.device);
        }
        if (source["effectiveDateTime"] !== undefined) {
            this.effectiveDateTime = source.effectiveDateTime;
        }
        if (source["_effectiveDateTime"] !== undefined) {
            this._effectiveDateTime = new fhirModels.Element(source._effectiveDateTime);
        }
        if (source["effectivePeriod"] !== undefined) {
            this.effectivePeriod = new fhirModels.Period(source.effectivePeriod);
        }
        if (source["effectiveTiming"] !== undefined) {
            this.effectiveTiming = new fhirModels.Timing(source.effectiveTiming);
        }
        if (source["effectiveInstant"] !== undefined) {
            this.effectiveInstant = source.effectiveInstant;
        }
        if (source["_effectiveInstant"] !== undefined) {
            this._effectiveInstant = new fhirModels.Element(source._effectiveInstant);
        }
        if (source["encounter"] !== undefined) {
            this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["focus"] !== undefined) {
            this.focus = source.focus.map((x) => new fhirModels.Reference(x));
        }
        if (source["hasMember"] !== undefined) {
            this.hasMember = source.hasMember.map((x) => new fhirModels.Reference(x));
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["interpretation"] !== undefined) {
            this.interpretation = source.interpretation.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["issued"] !== undefined) {
            this.issued = source.issued;
        }
        if (source["_issued"] !== undefined) {
            this._issued = new fhirModels.Element(source._issued);
        }
        if (source["method"] !== undefined) {
            this.method = new fhirModels.CodeableConcept(source.method);
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["partOf"] !== undefined) {
            this.partOf = source.partOf.map((x) => new fhirModels.Reference(x));
        }
        if (source["performer"] !== undefined) {
            this.performer = source.performer.map((x) => new fhirModels.Reference(x));
        }
        if (source["referenceRange"] !== undefined) {
            this.referenceRange = source.referenceRange.map((x) => new fhirModels.ObservationReferenceRange(x));
        }
        if (source["specimen"] !== undefined) {
            this.specimen = new fhirModels.Reference(source.specimen);
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["subject"] !== undefined) {
            this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["valueQuantity"] !== undefined) {
            this.valueQuantity = new fhirModels.Quantity(source.valueQuantity);
        }
        if (source["valueCodeableConcept"] !== undefined) {
            this.valueCodeableConcept = new fhirModels.CodeableConcept(source.valueCodeableConcept);
        }
        if (source["valueString"] !== undefined) {
            this.valueString = source.valueString;
        }
        if (source["_valueString"] !== undefined) {
            this._valueString = new fhirModels.Element(source._valueString);
        }
        if (source["valueBoolean"] !== undefined) {
            this.valueBoolean = source.valueBoolean;
        }
        if (source["_valueBoolean"] !== undefined) {
            this._valueBoolean = new fhirModels.Element(source._valueBoolean);
        }
        if (source["valueInteger"] !== undefined) {
            this.valueInteger = source.valueInteger;
        }
        if (source["_valueInteger"] !== undefined) {
            this._valueInteger = new fhirModels.Element(source._valueInteger);
        }
        if (source["valueRange"] !== undefined) {
            this.valueRange = new fhirModels.Range(source.valueRange);
        }
        if (source["valueRatio"] !== undefined) {
            this.valueRatio = new fhirModels.Ratio(source.valueRatio);
        }
        if (source["valueSampledData"] !== undefined) {
            this.valueSampledData = new fhirModels.SampledData(source.valueSampledData);
        }
        if (source["valueTime"] !== undefined) {
            this.valueTime = source.valueTime;
        }
        if (source["_valueTime"] !== undefined) {
            this._valueTime = new fhirModels.Element(source._valueTime);
        }
        if (source["valueDateTime"] !== undefined) {
            this.valueDateTime = source.valueDateTime;
        }
        if (source["_valueDateTime"] !== undefined) {
            this._valueDateTime = new fhirModels.Element(source._valueDateTime);
        }
        if (source["valuePeriod"] !== undefined) {
            this.valuePeriod = new fhirModels.Period(source.valuePeriod);
        }
    }
    /**
     * Factory function to create a Observation from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new Observation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Observation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current Observation contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.Observation = Observation;
/**
 * Code Values for the Observation.status field
 */
var ObservationStatusEnum;
(function (ObservationStatusEnum) {
    ObservationStatusEnum["REGISTERED"] = "registered";
    ObservationStatusEnum["PRELIMINARY"] = "preliminary";
    ObservationStatusEnum["FINAL"] = "final";
    ObservationStatusEnum["AMENDED"] = "amended";
    ObservationStatusEnum["CORRECTED"] = "corrected";
    ObservationStatusEnum["CANCELLED"] = "cancelled";
    ObservationStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    ObservationStatusEnum["UNKNOWN"] = "unknown";
})(ObservationStatusEnum = exports.ObservationStatusEnum || (exports.ObservationStatusEnum = {}));
//# sourceMappingURL=Observation.js.map