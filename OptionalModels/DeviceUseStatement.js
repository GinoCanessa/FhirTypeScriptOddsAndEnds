var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * A record of a device being used by a patient where the record is the result of a report from the patient or another clinician.
 */
var DeviceUseStatement = /** @class */ (function (_super) {
    __extends(DeviceUseStatement, _super);
    /**
     * Default constructor for DeviceUseStatement from an object that MAY NOT contain all required elements.
     */
    function DeviceUseStatement(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "DeviceUseStatement";
        if ((source['resourceType'] !== "DeviceUseStatement") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a DeviceUseStatement';
        }
        if (source["basedOn"] !== undefined) {
            _this.basedOn = source.basedOn.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["bodySite"] !== undefined) {
            _this.bodySite = new fhirModels.CodeableConcept(source.bodySite);
        }
        if (source["derivedFrom"] !== undefined) {
            _this.derivedFrom = source.derivedFrom.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["device"] !== undefined) {
            _this.device = new fhirModels.Reference(source.device);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["note"] !== undefined) {
            _this.note = source.note.map(function (x) { return new fhirModels.Annotation(x); });
        }
        if (source["reasonCode"] !== undefined) {
            _this.reasonCode = source.reasonCode.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["reasonReference"] !== undefined) {
            _this.reasonReference = source.reasonReference.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["recordedOn"] !== undefined) {
            _this.recordedOn = source.recordedOn;
        }
        if (source["_recordedOn"] !== undefined) {
            _this._recordedOn = new fhirModels.Element(source._recordedOn);
        }
        if (source["source"] !== undefined) {
            _this.source = new fhirModels.Reference(source.source);
        }
        if (source["status"] !== undefined) {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["subject"] !== undefined) {
            _this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["timingTiming"] !== undefined) {
            _this.timingTiming = new fhirModels.Timing(source.timingTiming);
        }
        if (source["timingPeriod"] !== undefined) {
            _this.timingPeriod = new fhirModels.Period(source.timingPeriod);
        }
        if (source["timingDateTime"] !== undefined) {
            _this.timingDateTime = source.timingDateTime;
        }
        if (source["_timingDateTime"] !== undefined) {
            _this._timingDateTime = new fhirModels.Element(source._timingDateTime);
        }
        return _this;
    }
    /**
     * Factory function to create a DeviceUseStatement from an object that MUST contain all required elements.
     */
    DeviceUseStatement.CreateStrict = function (source) {
        var dest = new DeviceUseStatement(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "DeviceUseStatement is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current DeviceUseStatement contains all required elements.
     */
    DeviceUseStatement.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["device"] === undefined) {
            missingElements.push("device");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["subject"] === undefined) {
            missingElements.push("subject");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return DeviceUseStatement;
}(fhirModels.DomainResource));
export { DeviceUseStatement };
/**
 * Code Values for the DeviceUseStatement.status field
 */
export var DeviceUseStatementStatusEnum;
(function (DeviceUseStatementStatusEnum) {
    DeviceUseStatementStatusEnum["ACTIVE"] = "active";
    DeviceUseStatementStatusEnum["COMPLETED"] = "completed";
    DeviceUseStatementStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    DeviceUseStatementStatusEnum["INTENDED"] = "intended";
    DeviceUseStatementStatusEnum["STOPPED"] = "stopped";
    DeviceUseStatementStatusEnum["ON_HOLD"] = "on-hold";
})(DeviceUseStatementStatusEnum || (DeviceUseStatementStatusEnum = {}));
