// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels'
import * as fhirInterfaces from '../optionalinterfaces'
/**
 * A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
 */
export class AppointmentResponse extends fhirModels.DomainResource implements fhirInterfaces.IAppointmentResponse {
  /**
   * Resource Type Name
   */
  readonly resourceType = "AppointmentResponse";
  /**
   * A Person, Location, HealthcareService, or Device that is participating in the appointment.
   */
  actor?: fhirModels.Reference|undefined;
  /**
   * Appointment that this response is replying to.
   */
  appointment?: fhirModels.Reference|undefined;
  /**
   * This comment is particularly important when the responder is declining, tentatively accepting or requesting another time to indicate the reasons why.
   */
  comment?: string|undefined;
  _comment?: fhirModels.Element|undefined;
  /**
   * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the end time.
   */
  end?: string|undefined;
  _end?: fhirModels.Element|undefined;
  /**
   * This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate.
   */
  identifier?: fhirModels.Identifier[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains the code entered-in-error that marks the participant as not currently valid.
   */
  participantStatus?: AppointmentResponseParticipantStatusEnum|undefined;
  _participantStatus?: fhirModels.Element|undefined;
  /**
   * The role of the participant can be used to declare what the actor will be doing in the scope of the referenced appointment.
   * If the actor is not specified, then it is expected that the actor will be filled in at a later stage of planning.
   * This value SHALL be the same as specified on the referenced Appointment so that they can be matched, and subsequently updated.
   */
  participantType?: fhirModels.CodeableConcept[]|undefined;
  /**
   * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the start time.
   */
  start?: string|undefined;
  _start?: fhirModels.Element|undefined;
  /**
   * Default constructor for AppointmentResponse from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.IAppointmentResponse>) {
    super(source);
    if ((source['resourceType'] !== "AppointmentResponse") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a AppointmentResponse'; }
    if (source["actor"] !== undefined) { this.actor = new fhirModels.Reference(source.actor); }
    if (source["appointment"] !== undefined) { this.appointment = new fhirModels.Reference(source.appointment); }
    if (source["comment"] !== undefined) { this.comment = source.comment; }
    if (source["_comment"] !== undefined) { this._comment = new fhirModels.Element(source._comment); }
    if (source["end"] !== undefined) { this.end = source.end; }
    if (source["_end"] !== undefined) { this._end = new fhirModels.Element(source._end); }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x)); }
    if (source["participantStatus"] !== undefined) { this.participantStatus = source.participantStatus; }
    if (source["_participantStatus"] !== undefined) { this._participantStatus = new fhirModels.Element(source._participantStatus); }
    if (source["participantType"] !== undefined) { this.participantType = source.participantType.map((x) => new fhirModels.CodeableConcept(x)); }
    if (source["start"] !== undefined) { this.start = source.start; }
    if (source["_start"] !== undefined) { this._start = new fhirModels.Element(source._start); }
  }
  /**
   * Factory function to create a AppointmentResponse from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.IAppointmentResponse):AppointmentResponse {
    var dest:AppointmentResponse = new AppointmentResponse(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `AppointmentResponse is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current AppointmentResponse contains all required elements.
   */
  checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["appointment"] === undefined) { missingElements.push("appointment"); }
    if (this["participantStatus"] === undefined) { missingElements.push("participantStatus"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
/**
 * Code Values for the AppointmentResponse.participantStatus field
 */
export enum AppointmentResponseParticipantStatusEnum {
  ACCEPTED = "accepted",
  DECLINED = "declined",
  TENTATIVE = "tentative",
  NEEDS_ACTION = "needs-action",
}
