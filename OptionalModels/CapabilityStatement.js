var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.
 */
var CapabilityStatementSoftware = /** @class */ (function (_super) {
    __extends(CapabilityStatementSoftware, _super);
    /**
     * Default constructor for CapabilityStatementSoftware from an object that MAY NOT contain all required elements.
     */
    function CapabilityStatementSoftware(source) {
        var _this = _super.call(this, source) || this;
        if (source["name"] !== undefined) {
            _this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            _this._name = new fhirModels.Element(source._name);
        }
        if (source["releaseDate"] !== undefined) {
            _this.releaseDate = source.releaseDate;
        }
        if (source["_releaseDate"] !== undefined) {
            _this._releaseDate = new fhirModels.Element(source._releaseDate);
        }
        if (source["version"] !== undefined) {
            _this.version = source.version;
        }
        if (source["_version"] !== undefined) {
            _this._version = new fhirModels.Element(source._version);
        }
        return _this;
    }
    /**
     * Factory function to create a CapabilityStatementSoftware from an object that MUST contain all required elements.
     */
    CapabilityStatementSoftware.CreateStrict = function (source) {
        var dest = new CapabilityStatementSoftware(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "CapabilityStatementSoftware is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current CapabilityStatementSoftware contains all required elements.
     */
    CapabilityStatementSoftware.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["name"] === undefined) {
            missingElements.push("name");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return CapabilityStatementSoftware;
}(fhirModels.BackboneElement));
export { CapabilityStatementSoftware };
/**
 * Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.
 */
var CapabilityStatementImplementation = /** @class */ (function (_super) {
    __extends(CapabilityStatementImplementation, _super);
    /**
     * Default constructor for CapabilityStatementImplementation from an object that MAY NOT contain all required elements.
     */
    function CapabilityStatementImplementation(source) {
        var _this = _super.call(this, source) || this;
        if (source["custodian"] !== undefined) {
            _this.custodian = new fhirModels.Reference(source.custodian);
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["url"] !== undefined) {
            _this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            _this._url = new fhirModels.Element(source._url);
        }
        return _this;
    }
    /**
     * Factory function to create a CapabilityStatementImplementation from an object that MUST contain all required elements.
     */
    CapabilityStatementImplementation.CreateStrict = function (source) {
        var dest = new CapabilityStatementImplementation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "CapabilityStatementImplementation is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current CapabilityStatementImplementation contains all required elements.
     */
    CapabilityStatementImplementation.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["description"] === undefined) {
            missingElements.push("description");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return CapabilityStatementImplementation;
}(fhirModels.BackboneElement));
export { CapabilityStatementImplementation };
/**
 * Information about security implementation from an interface perspective - what a client needs to know.
 */
var CapabilityStatementRestSecurity = /** @class */ (function (_super) {
    __extends(CapabilityStatementRestSecurity, _super);
    /**
     * Default constructor for CapabilityStatementRestSecurity from an object that MAY NOT contain all required elements.
     */
    function CapabilityStatementRestSecurity(source) {
        var _this = _super.call(this, source) || this;
        if (source["cors"] !== undefined) {
            _this.cors = source.cors;
        }
        if (source["_cors"] !== undefined) {
            _this._cors = new fhirModels.Element(source._cors);
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["service"] !== undefined) {
            _this.service = source.service.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a CapabilityStatementRestSecurity from an object that MUST contain all required elements.
     */
    CapabilityStatementRestSecurity.CreateStrict = function (source) {
        var dest = new CapabilityStatementRestSecurity(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "CapabilityStatementRestSecurity is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current CapabilityStatementRestSecurity contains all required elements.
     */
    CapabilityStatementRestSecurity.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return CapabilityStatementRestSecurity;
}(fhirModels.BackboneElement));
export { CapabilityStatementRestSecurity };
/**
 * In general, a Resource will only appear in a CapabilityStatement if the server actually has some capabilities - e.g. there is at least one interaction supported. However interactions can be omitted to support summarization (_summary = true).
 */
var CapabilityStatementRestResourceInteraction = /** @class */ (function (_super) {
    __extends(CapabilityStatementRestResourceInteraction, _super);
    /**
     * Default constructor for CapabilityStatementRestResourceInteraction from an object that MAY NOT contain all required elements.
     */
    function CapabilityStatementRestResourceInteraction(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            _this._code = new fhirModels.Element(source._code);
        }
        if (source["documentation"] !== undefined) {
            _this.documentation = source.documentation;
        }
        if (source["_documentation"] !== undefined) {
            _this._documentation = new fhirModels.Element(source._documentation);
        }
        return _this;
    }
    /**
     * Factory function to create a CapabilityStatementRestResourceInteraction from an object that MUST contain all required elements.
     */
    CapabilityStatementRestResourceInteraction.CreateStrict = function (source) {
        var dest = new CapabilityStatementRestResourceInteraction(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "CapabilityStatementRestResourceInteraction is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current CapabilityStatementRestResourceInteraction contains all required elements.
     */
    CapabilityStatementRestResourceInteraction.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return CapabilityStatementRestResourceInteraction;
}(fhirModels.BackboneElement));
export { CapabilityStatementRestResourceInteraction };
/**
 * Code Values for the CapabilityStatement.rest.resource.interaction.code field
 */
export var CapabilityStatementRestResourceInteractionCodeEnum;
(function (CapabilityStatementRestResourceInteractionCodeEnum) {
    CapabilityStatementRestResourceInteractionCodeEnum["READ"] = "read";
    CapabilityStatementRestResourceInteractionCodeEnum["VREAD"] = "vread";
    CapabilityStatementRestResourceInteractionCodeEnum["UPDATE"] = "update";
    CapabilityStatementRestResourceInteractionCodeEnum["PATCH"] = "patch";
    CapabilityStatementRestResourceInteractionCodeEnum["DELETE"] = "delete";
    CapabilityStatementRestResourceInteractionCodeEnum["HISTORY_INSTANCE"] = "history-instance";
    CapabilityStatementRestResourceInteractionCodeEnum["HISTORY_TYPE"] = "history-type";
    CapabilityStatementRestResourceInteractionCodeEnum["CREATE"] = "create";
    CapabilityStatementRestResourceInteractionCodeEnum["SEARCH_TYPE"] = "search-type";
})(CapabilityStatementRestResourceInteractionCodeEnum || (CapabilityStatementRestResourceInteractionCodeEnum = {}));
/**
 * The search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#CapabilityStatement.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.
 */
var CapabilityStatementRestResourceSearchParam = /** @class */ (function (_super) {
    __extends(CapabilityStatementRestResourceSearchParam, _super);
    /**
     * Default constructor for CapabilityStatementRestResourceSearchParam from an object that MAY NOT contain all required elements.
     */
    function CapabilityStatementRestResourceSearchParam(source) {
        var _this = _super.call(this, source) || this;
        if (source["definition"] !== undefined) {
            _this.definition = source.definition;
        }
        if (source["_definition"] !== undefined) {
            _this._definition = new fhirModels.Element(source._definition);
        }
        if (source["documentation"] !== undefined) {
            _this.documentation = source.documentation;
        }
        if (source["_documentation"] !== undefined) {
            _this._documentation = new fhirModels.Element(source._documentation);
        }
        if (source["name"] !== undefined) {
            _this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            _this._name = new fhirModels.Element(source._name);
        }
        if (source["type"] !== undefined) {
            _this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            _this._type = new fhirModels.Element(source._type);
        }
        return _this;
    }
    /**
     * Factory function to create a CapabilityStatementRestResourceSearchParam from an object that MUST contain all required elements.
     */
    CapabilityStatementRestResourceSearchParam.CreateStrict = function (source) {
        var dest = new CapabilityStatementRestResourceSearchParam(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "CapabilityStatementRestResourceSearchParam is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current CapabilityStatementRestResourceSearchParam contains all required elements.
     */
    CapabilityStatementRestResourceSearchParam.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["name"] === undefined) {
            missingElements.push("name");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return CapabilityStatementRestResourceSearchParam;
}(fhirModels.BackboneElement));
export { CapabilityStatementRestResourceSearchParam };
/**
 * Code Values for the CapabilityStatement.rest.resource.searchParam.type field
 */
export var CapabilityStatementRestResourceSearchParamTypeEnum;
(function (CapabilityStatementRestResourceSearchParamTypeEnum) {
    CapabilityStatementRestResourceSearchParamTypeEnum["NUMBER"] = "number";
    CapabilityStatementRestResourceSearchParamTypeEnum["DATE"] = "date";
    CapabilityStatementRestResourceSearchParamTypeEnum["STRING"] = "string";
    CapabilityStatementRestResourceSearchParamTypeEnum["TOKEN"] = "token";
    CapabilityStatementRestResourceSearchParamTypeEnum["REFERENCE"] = "reference";
    CapabilityStatementRestResourceSearchParamTypeEnum["COMPOSITE"] = "composite";
    CapabilityStatementRestResourceSearchParamTypeEnum["QUANTITY"] = "quantity";
    CapabilityStatementRestResourceSearchParamTypeEnum["URI"] = "uri";
    CapabilityStatementRestResourceSearchParamTypeEnum["SPECIAL"] = "special";
})(CapabilityStatementRestResourceSearchParamTypeEnum || (CapabilityStatementRestResourceSearchParamTypeEnum = {}));
/**
 * Operations linked from CapabilityStatement.rest.resource.operation must have OperationDefinition.type = true or OperationDefinition.instance = true.
 * If an operation that is listed in multiple CapabilityStatement.rest.resource.operation (e.g. for different resource types), then clients should understand that the operation is only supported on the specified resource types, and that may be a subset of those listed in OperationDefinition.resource.
 */
var CapabilityStatementRestResourceOperation = /** @class */ (function (_super) {
    __extends(CapabilityStatementRestResourceOperation, _super);
    /**
     * Default constructor for CapabilityStatementRestResourceOperation from an object that MAY NOT contain all required elements.
     */
    function CapabilityStatementRestResourceOperation(source) {
        var _this = _super.call(this, source) || this;
        if (source["definition"] !== undefined) {
            _this.definition = source.definition;
        }
        if (source["_definition"] !== undefined) {
            _this._definition = new fhirModels.Element(source._definition);
        }
        if (source["documentation"] !== undefined) {
            _this.documentation = source.documentation;
        }
        if (source["_documentation"] !== undefined) {
            _this._documentation = new fhirModels.Element(source._documentation);
        }
        if (source["name"] !== undefined) {
            _this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            _this._name = new fhirModels.Element(source._name);
        }
        return _this;
    }
    /**
     * Factory function to create a CapabilityStatementRestResourceOperation from an object that MUST contain all required elements.
     */
    CapabilityStatementRestResourceOperation.CreateStrict = function (source) {
        var dest = new CapabilityStatementRestResourceOperation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "CapabilityStatementRestResourceOperation is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current CapabilityStatementRestResourceOperation contains all required elements.
     */
    CapabilityStatementRestResourceOperation.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["definition"] === undefined) {
            missingElements.push("definition");
        }
        if (this["name"] === undefined) {
            missingElements.push("name");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return CapabilityStatementRestResourceOperation;
}(fhirModels.BackboneElement));
export { CapabilityStatementRestResourceOperation };
/**
 * Max of one repetition per resource type.
 */
var CapabilityStatementRestResource = /** @class */ (function (_super) {
    __extends(CapabilityStatementRestResource, _super);
    /**
     * Default constructor for CapabilityStatementRestResource from an object that MAY NOT contain all required elements.
     */
    function CapabilityStatementRestResource(source) {
        var _this = _super.call(this, source) || this;
        if (source["conditionalCreate"] !== undefined) {
            _this.conditionalCreate = source.conditionalCreate;
        }
        if (source["_conditionalCreate"] !== undefined) {
            _this._conditionalCreate = new fhirModels.Element(source._conditionalCreate);
        }
        if (source["conditionalDelete"] !== undefined) {
            _this.conditionalDelete = source.conditionalDelete;
        }
        if (source["_conditionalDelete"] !== undefined) {
            _this._conditionalDelete = new fhirModels.Element(source._conditionalDelete);
        }
        if (source["conditionalRead"] !== undefined) {
            _this.conditionalRead = source.conditionalRead;
        }
        if (source["_conditionalRead"] !== undefined) {
            _this._conditionalRead = new fhirModels.Element(source._conditionalRead);
        }
        if (source["conditionalUpdate"] !== undefined) {
            _this.conditionalUpdate = source.conditionalUpdate;
        }
        if (source["_conditionalUpdate"] !== undefined) {
            _this._conditionalUpdate = new fhirModels.Element(source._conditionalUpdate);
        }
        if (source["documentation"] !== undefined) {
            _this.documentation = source.documentation;
        }
        if (source["_documentation"] !== undefined) {
            _this._documentation = new fhirModels.Element(source._documentation);
        }
        if (source["interaction"] !== undefined) {
            _this.interaction = source.interaction.map(function (x) { return new fhirModels.CapabilityStatementRestResourceInteraction(x); });
        }
        if (source["operation"] !== undefined) {
            _this.operation = source.operation.map(function (x) { return new fhirModels.CapabilityStatementRestResourceOperation(x); });
        }
        if (source["profile"] !== undefined) {
            _this.profile = source.profile;
        }
        if (source["_profile"] !== undefined) {
            _this._profile = new fhirModels.Element(source._profile);
        }
        if (source["readHistory"] !== undefined) {
            _this.readHistory = source.readHistory;
        }
        if (source["_readHistory"] !== undefined) {
            _this._readHistory = new fhirModels.Element(source._readHistory);
        }
        if (source["referencePolicy"] !== undefined) {
            _this.referencePolicy = source.referencePolicy.map(function (x) { return (x); });
        }
        if (source["_referencePolicy"] !== undefined) {
            _this._referencePolicy = source._referencePolicy.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["searchInclude"] !== undefined) {
            _this.searchInclude = source.searchInclude.map(function (x) { return (x); });
        }
        if (source["_searchInclude"] !== undefined) {
            _this._searchInclude = source._searchInclude.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["searchParam"] !== undefined) {
            _this.searchParam = source.searchParam.map(function (x) { return new fhirModels.CapabilityStatementRestResourceSearchParam(x); });
        }
        if (source["searchRevInclude"] !== undefined) {
            _this.searchRevInclude = source.searchRevInclude.map(function (x) { return (x); });
        }
        if (source["_searchRevInclude"] !== undefined) {
            _this._searchRevInclude = source._searchRevInclude.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["supportedProfile"] !== undefined) {
            _this.supportedProfile = source.supportedProfile.map(function (x) { return (x); });
        }
        if (source["_supportedProfile"] !== undefined) {
            _this._supportedProfile = source._supportedProfile.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["type"] !== undefined) {
            _this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            _this._type = new fhirModels.Element(source._type);
        }
        if (source["updateCreate"] !== undefined) {
            _this.updateCreate = source.updateCreate;
        }
        if (source["_updateCreate"] !== undefined) {
            _this._updateCreate = new fhirModels.Element(source._updateCreate);
        }
        if (source["versioning"] !== undefined) {
            _this.versioning = source.versioning;
        }
        if (source["_versioning"] !== undefined) {
            _this._versioning = new fhirModels.Element(source._versioning);
        }
        return _this;
    }
    /**
     * Factory function to create a CapabilityStatementRestResource from an object that MUST contain all required elements.
     */
    CapabilityStatementRestResource.CreateStrict = function (source) {
        var dest = new CapabilityStatementRestResource(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "CapabilityStatementRestResource is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current CapabilityStatementRestResource contains all required elements.
     */
    CapabilityStatementRestResource.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return CapabilityStatementRestResource;
}(fhirModels.BackboneElement));
export { CapabilityStatementRestResource };
/**
 * Code Values for the CapabilityStatement.rest.resource.conditionalDelete field
 */
export var CapabilityStatementRestResourceConditionalDeleteEnum;
(function (CapabilityStatementRestResourceConditionalDeleteEnum) {
    CapabilityStatementRestResourceConditionalDeleteEnum["NOT_SUPPORTED"] = "not-supported";
    CapabilityStatementRestResourceConditionalDeleteEnum["SINGLE"] = "single";
    CapabilityStatementRestResourceConditionalDeleteEnum["MULTIPLE"] = "multiple";
})(CapabilityStatementRestResourceConditionalDeleteEnum || (CapabilityStatementRestResourceConditionalDeleteEnum = {}));
/**
 * Code Values for the CapabilityStatement.rest.resource.conditionalRead field
 */
export var CapabilityStatementRestResourceConditionalReadEnum;
(function (CapabilityStatementRestResourceConditionalReadEnum) {
    CapabilityStatementRestResourceConditionalReadEnum["NOT_SUPPORTED"] = "not-supported";
    CapabilityStatementRestResourceConditionalReadEnum["MODIFIED_SINCE"] = "modified-since";
    CapabilityStatementRestResourceConditionalReadEnum["NOT_MATCH"] = "not-match";
    CapabilityStatementRestResourceConditionalReadEnum["FULL_SUPPORT"] = "full-support";
})(CapabilityStatementRestResourceConditionalReadEnum || (CapabilityStatementRestResourceConditionalReadEnum = {}));
/**
 * Code Values for the CapabilityStatement.rest.resource.referencePolicy field
 */
export var CapabilityStatementRestResourceReferencePolicyEnum;
(function (CapabilityStatementRestResourceReferencePolicyEnum) {
    CapabilityStatementRestResourceReferencePolicyEnum["LITERAL"] = "literal";
    CapabilityStatementRestResourceReferencePolicyEnum["LOGICAL"] = "logical";
    CapabilityStatementRestResourceReferencePolicyEnum["RESOLVES"] = "resolves";
    CapabilityStatementRestResourceReferencePolicyEnum["ENFORCED"] = "enforced";
    CapabilityStatementRestResourceReferencePolicyEnum["LOCAL"] = "local";
})(CapabilityStatementRestResourceReferencePolicyEnum || (CapabilityStatementRestResourceReferencePolicyEnum = {}));
/**
 * Code Values for the CapabilityStatement.rest.resource.versioning field
 */
export var CapabilityStatementRestResourceVersioningEnum;
(function (CapabilityStatementRestResourceVersioningEnum) {
    CapabilityStatementRestResourceVersioningEnum["NO_VERSION"] = "no-version";
    CapabilityStatementRestResourceVersioningEnum["VERSIONED"] = "versioned";
    CapabilityStatementRestResourceVersioningEnum["VERSIONED_UPDATE"] = "versioned-update";
})(CapabilityStatementRestResourceVersioningEnum || (CapabilityStatementRestResourceVersioningEnum = {}));
/**
 * A specification of restful operations supported by the system.
 */
var CapabilityStatementRestInteraction = /** @class */ (function (_super) {
    __extends(CapabilityStatementRestInteraction, _super);
    /**
     * Default constructor for CapabilityStatementRestInteraction from an object that MAY NOT contain all required elements.
     */
    function CapabilityStatementRestInteraction(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            _this._code = new fhirModels.Element(source._code);
        }
        if (source["documentation"] !== undefined) {
            _this.documentation = source.documentation;
        }
        if (source["_documentation"] !== undefined) {
            _this._documentation = new fhirModels.Element(source._documentation);
        }
        return _this;
    }
    /**
     * Factory function to create a CapabilityStatementRestInteraction from an object that MUST contain all required elements.
     */
    CapabilityStatementRestInteraction.CreateStrict = function (source) {
        var dest = new CapabilityStatementRestInteraction(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "CapabilityStatementRestInteraction is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current CapabilityStatementRestInteraction contains all required elements.
     */
    CapabilityStatementRestInteraction.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return CapabilityStatementRestInteraction;
}(fhirModels.BackboneElement));
export { CapabilityStatementRestInteraction };
/**
 * Code Values for the CapabilityStatement.rest.interaction.code field
 */
export var CapabilityStatementRestInteractionCodeEnum;
(function (CapabilityStatementRestInteractionCodeEnum) {
    CapabilityStatementRestInteractionCodeEnum["TRANSACTION"] = "transaction";
    CapabilityStatementRestInteractionCodeEnum["BATCH"] = "batch";
    CapabilityStatementRestInteractionCodeEnum["SEARCH_SYSTEM"] = "search-system";
    CapabilityStatementRestInteractionCodeEnum["HISTORY_SYSTEM"] = "history-system";
})(CapabilityStatementRestInteractionCodeEnum || (CapabilityStatementRestInteractionCodeEnum = {}));
/**
 * Multiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).
 */
var CapabilityStatementRest = /** @class */ (function (_super) {
    __extends(CapabilityStatementRest, _super);
    /**
     * Default constructor for CapabilityStatementRest from an object that MAY NOT contain all required elements.
     */
    function CapabilityStatementRest(source) {
        var _this = _super.call(this, source) || this;
        if (source["compartment"] !== undefined) {
            _this.compartment = source.compartment.map(function (x) { return (x); });
        }
        if (source["_compartment"] !== undefined) {
            _this._compartment = source._compartment.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["documentation"] !== undefined) {
            _this.documentation = source.documentation;
        }
        if (source["_documentation"] !== undefined) {
            _this._documentation = new fhirModels.Element(source._documentation);
        }
        if (source["interaction"] !== undefined) {
            _this.interaction = source.interaction.map(function (x) { return new fhirModels.CapabilityStatementRestInteraction(x); });
        }
        if (source["mode"] !== undefined) {
            _this.mode = source.mode;
        }
        if (source["_mode"] !== undefined) {
            _this._mode = new fhirModels.Element(source._mode);
        }
        if (source["operation"] !== undefined) {
            _this.operation = source.operation.map(function (x) { return new fhirModels.CapabilityStatementRestResourceOperation(x); });
        }
        if (source["resource"] !== undefined) {
            _this.resource = source.resource.map(function (x) { return new fhirModels.CapabilityStatementRestResource(x); });
        }
        if (source["searchParam"] !== undefined) {
            _this.searchParam = source.searchParam.map(function (x) { return new fhirModels.CapabilityStatementRestResourceSearchParam(x); });
        }
        if (source["security"] !== undefined) {
            _this.security = new fhirModels.CapabilityStatementRestSecurity(source.security);
        }
        return _this;
    }
    /**
     * Factory function to create a CapabilityStatementRest from an object that MUST contain all required elements.
     */
    CapabilityStatementRest.CreateStrict = function (source) {
        var dest = new CapabilityStatementRest(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "CapabilityStatementRest is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current CapabilityStatementRest contains all required elements.
     */
    CapabilityStatementRest.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["mode"] === undefined) {
            missingElements.push("mode");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return CapabilityStatementRest;
}(fhirModels.BackboneElement));
export { CapabilityStatementRest };
/**
 * Code Values for the CapabilityStatement.rest.mode field
 */
export var CapabilityStatementRestModeEnum;
(function (CapabilityStatementRestModeEnum) {
    CapabilityStatementRestModeEnum["CLIENT"] = "client";
    CapabilityStatementRestModeEnum["SERVER"] = "server";
})(CapabilityStatementRestModeEnum || (CapabilityStatementRestModeEnum = {}));
/**
 * An endpoint (network accessible address) to which messages and/or replies are to be sent.
 */
var CapabilityStatementMessagingEndpoint = /** @class */ (function (_super) {
    __extends(CapabilityStatementMessagingEndpoint, _super);
    /**
     * Default constructor for CapabilityStatementMessagingEndpoint from an object that MAY NOT contain all required elements.
     */
    function CapabilityStatementMessagingEndpoint(source) {
        var _this = _super.call(this, source) || this;
        if (source["address"] !== undefined) {
            _this.address = source.address;
        }
        if (source["_address"] !== undefined) {
            _this._address = new fhirModels.Element(source._address);
        }
        if (source["protocol"] !== undefined) {
            _this.protocol = new fhirModels.Coding(source.protocol);
        }
        return _this;
    }
    /**
     * Factory function to create a CapabilityStatementMessagingEndpoint from an object that MUST contain all required elements.
     */
    CapabilityStatementMessagingEndpoint.CreateStrict = function (source) {
        var dest = new CapabilityStatementMessagingEndpoint(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "CapabilityStatementMessagingEndpoint is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current CapabilityStatementMessagingEndpoint contains all required elements.
     */
    CapabilityStatementMessagingEndpoint.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["address"] === undefined) {
            missingElements.push("address");
        }
        if (this["protocol"] === undefined) {
            missingElements.push("protocol");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return CapabilityStatementMessagingEndpoint;
}(fhirModels.BackboneElement));
export { CapabilityStatementMessagingEndpoint };
/**
 * This is a proposed alternative to the messaging.event structure.
 */
var CapabilityStatementMessagingSupportedMessage = /** @class */ (function (_super) {
    __extends(CapabilityStatementMessagingSupportedMessage, _super);
    /**
     * Default constructor for CapabilityStatementMessagingSupportedMessage from an object that MAY NOT contain all required elements.
     */
    function CapabilityStatementMessagingSupportedMessage(source) {
        var _this = _super.call(this, source) || this;
        if (source["definition"] !== undefined) {
            _this.definition = source.definition;
        }
        if (source["_definition"] !== undefined) {
            _this._definition = new fhirModels.Element(source._definition);
        }
        if (source["mode"] !== undefined) {
            _this.mode = source.mode;
        }
        if (source["_mode"] !== undefined) {
            _this._mode = new fhirModels.Element(source._mode);
        }
        return _this;
    }
    /**
     * Factory function to create a CapabilityStatementMessagingSupportedMessage from an object that MUST contain all required elements.
     */
    CapabilityStatementMessagingSupportedMessage.CreateStrict = function (source) {
        var dest = new CapabilityStatementMessagingSupportedMessage(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "CapabilityStatementMessagingSupportedMessage is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current CapabilityStatementMessagingSupportedMessage contains all required elements.
     */
    CapabilityStatementMessagingSupportedMessage.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["definition"] === undefined) {
            missingElements.push("definition");
        }
        if (this["mode"] === undefined) {
            missingElements.push("mode");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return CapabilityStatementMessagingSupportedMessage;
}(fhirModels.BackboneElement));
export { CapabilityStatementMessagingSupportedMessage };
/**
 * Code Values for the CapabilityStatement.messaging.supportedMessage.mode field
 */
export var CapabilityStatementMessagingSupportedMessageModeEnum;
(function (CapabilityStatementMessagingSupportedMessageModeEnum) {
    CapabilityStatementMessagingSupportedMessageModeEnum["SENDER"] = "sender";
    CapabilityStatementMessagingSupportedMessageModeEnum["RECEIVER"] = "receiver";
})(CapabilityStatementMessagingSupportedMessageModeEnum || (CapabilityStatementMessagingSupportedMessageModeEnum = {}));
/**
 * Multiple repetitions allow the documentation of multiple endpoints per solution.
 */
var CapabilityStatementMessaging = /** @class */ (function (_super) {
    __extends(CapabilityStatementMessaging, _super);
    /**
     * Default constructor for CapabilityStatementMessaging from an object that MAY NOT contain all required elements.
     */
    function CapabilityStatementMessaging(source) {
        var _this = _super.call(this, source) || this;
        if (source["documentation"] !== undefined) {
            _this.documentation = source.documentation;
        }
        if (source["_documentation"] !== undefined) {
            _this._documentation = new fhirModels.Element(source._documentation);
        }
        if (source["endpoint"] !== undefined) {
            _this.endpoint = source.endpoint.map(function (x) { return new fhirModels.CapabilityStatementMessagingEndpoint(x); });
        }
        if (source["reliableCache"] !== undefined) {
            _this.reliableCache = source.reliableCache;
        }
        if (source["_reliableCache"] !== undefined) {
            _this._reliableCache = new fhirModels.Element(source._reliableCache);
        }
        if (source["supportedMessage"] !== undefined) {
            _this.supportedMessage = source.supportedMessage.map(function (x) { return new fhirModels.CapabilityStatementMessagingSupportedMessage(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a CapabilityStatementMessaging from an object that MUST contain all required elements.
     */
    CapabilityStatementMessaging.CreateStrict = function (source) {
        var dest = new CapabilityStatementMessaging(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "CapabilityStatementMessaging is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current CapabilityStatementMessaging contains all required elements.
     */
    CapabilityStatementMessaging.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return CapabilityStatementMessaging;
}(fhirModels.BackboneElement));
export { CapabilityStatementMessaging };
/**
 * A document definition.
 */
var CapabilityStatementDocument = /** @class */ (function (_super) {
    __extends(CapabilityStatementDocument, _super);
    /**
     * Default constructor for CapabilityStatementDocument from an object that MAY NOT contain all required elements.
     */
    function CapabilityStatementDocument(source) {
        var _this = _super.call(this, source) || this;
        if (source["documentation"] !== undefined) {
            _this.documentation = source.documentation;
        }
        if (source["_documentation"] !== undefined) {
            _this._documentation = new fhirModels.Element(source._documentation);
        }
        if (source["mode"] !== undefined) {
            _this.mode = source.mode;
        }
        if (source["_mode"] !== undefined) {
            _this._mode = new fhirModels.Element(source._mode);
        }
        if (source["profile"] !== undefined) {
            _this.profile = source.profile;
        }
        if (source["_profile"] !== undefined) {
            _this._profile = new fhirModels.Element(source._profile);
        }
        return _this;
    }
    /**
     * Factory function to create a CapabilityStatementDocument from an object that MUST contain all required elements.
     */
    CapabilityStatementDocument.CreateStrict = function (source) {
        var dest = new CapabilityStatementDocument(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "CapabilityStatementDocument is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current CapabilityStatementDocument contains all required elements.
     */
    CapabilityStatementDocument.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["mode"] === undefined) {
            missingElements.push("mode");
        }
        if (this["profile"] === undefined) {
            missingElements.push("profile");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return CapabilityStatementDocument;
}(fhirModels.BackboneElement));
export { CapabilityStatementDocument };
/**
 * Code Values for the CapabilityStatement.document.mode field
 */
export var CapabilityStatementDocumentModeEnum;
(function (CapabilityStatementDocumentModeEnum) {
    CapabilityStatementDocumentModeEnum["PRODUCER"] = "producer";
    CapabilityStatementDocumentModeEnum["CONSUMER"] = "consumer";
})(CapabilityStatementDocumentModeEnum || (CapabilityStatementDocumentModeEnum = {}));
/**
 * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
var CapabilityStatement = /** @class */ (function (_super) {
    __extends(CapabilityStatement, _super);
    /**
     * Default constructor for CapabilityStatement from an object that MAY NOT contain all required elements.
     */
    function CapabilityStatement(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "CapabilityStatement";
        if ((source['resourceType'] !== "CapabilityStatement") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a CapabilityStatement';
        }
        if (source["contact"] !== undefined) {
            _this.contact = source.contact.map(function (x) { return new fhirModels.ContactDetail(x); });
        }
        if (source["copyright"] !== undefined) {
            _this.copyright = source.copyright;
        }
        if (source["_copyright"] !== undefined) {
            _this._copyright = new fhirModels.Element(source._copyright);
        }
        if (source["date"] !== undefined) {
            _this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            _this._date = new fhirModels.Element(source._date);
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["document"] !== undefined) {
            _this.document = source.document.map(function (x) { return new fhirModels.CapabilityStatementDocument(x); });
        }
        if (source["experimental"] !== undefined) {
            _this.experimental = source.experimental;
        }
        if (source["_experimental"] !== undefined) {
            _this._experimental = new fhirModels.Element(source._experimental);
        }
        if (source["fhirVersion"] !== undefined) {
            _this.fhirVersion = source.fhirVersion;
        }
        if (source["_fhirVersion"] !== undefined) {
            _this._fhirVersion = new fhirModels.Element(source._fhirVersion);
        }
        if (source["format"] !== undefined) {
            _this.format = source.format.map(function (x) { return (x); });
        }
        if (source["_format"] !== undefined) {
            _this._format = source._format.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["implementation"] !== undefined) {
            _this.implementation = new fhirModels.CapabilityStatementImplementation(source.implementation);
        }
        if (source["implementationGuide"] !== undefined) {
            _this.implementationGuide = source.implementationGuide.map(function (x) { return (x); });
        }
        if (source["_implementationGuide"] !== undefined) {
            _this._implementationGuide = source._implementationGuide.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["imports"] !== undefined) {
            _this.imports = source.imports.map(function (x) { return (x); });
        }
        if (source["_imports"] !== undefined) {
            _this._imports = source._imports.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["instantiates"] !== undefined) {
            _this.instantiates = source.instantiates.map(function (x) { return (x); });
        }
        if (source["_instantiates"] !== undefined) {
            _this._instantiates = source._instantiates.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["jurisdiction"] !== undefined) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["kind"] !== undefined) {
            _this.kind = source.kind;
        }
        if (source["_kind"] !== undefined) {
            _this._kind = new fhirModels.Element(source._kind);
        }
        if (source["messaging"] !== undefined) {
            _this.messaging = source.messaging.map(function (x) { return new fhirModels.CapabilityStatementMessaging(x); });
        }
        if (source["name"] !== undefined) {
            _this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            _this._name = new fhirModels.Element(source._name);
        }
        if (source["patchFormat"] !== undefined) {
            _this.patchFormat = source.patchFormat.map(function (x) { return (x); });
        }
        if (source["_patchFormat"] !== undefined) {
            _this._patchFormat = source._patchFormat.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["publisher"] !== undefined) {
            _this.publisher = source.publisher;
        }
        if (source["_publisher"] !== undefined) {
            _this._publisher = new fhirModels.Element(source._publisher);
        }
        if (source["purpose"] !== undefined) {
            _this.purpose = source.purpose;
        }
        if (source["_purpose"] !== undefined) {
            _this._purpose = new fhirModels.Element(source._purpose);
        }
        if (source["rest"] !== undefined) {
            _this.rest = source.rest.map(function (x) { return new fhirModels.CapabilityStatementRest(x); });
        }
        if (source["software"] !== undefined) {
            _this.software = new fhirModels.CapabilityStatementSoftware(source.software);
        }
        if (source["status"] !== undefined) {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["title"] !== undefined) {
            _this.title = source.title;
        }
        if (source["_title"] !== undefined) {
            _this._title = new fhirModels.Element(source._title);
        }
        if (source["url"] !== undefined) {
            _this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            _this._url = new fhirModels.Element(source._url);
        }
        if (source["useContext"] !== undefined) {
            _this.useContext = source.useContext.map(function (x) { return new fhirModels.UsageContext(x); });
        }
        if (source["version"] !== undefined) {
            _this.version = source.version;
        }
        if (source["_version"] !== undefined) {
            _this._version = new fhirModels.Element(source._version);
        }
        return _this;
    }
    /**
     * Factory function to create a CapabilityStatement from an object that MUST contain all required elements.
     */
    CapabilityStatement.CreateStrict = function (source) {
        var dest = new CapabilityStatement(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "CapabilityStatement is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current CapabilityStatement contains all required elements.
     */
    CapabilityStatement.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["date"] === undefined) {
            missingElements.push("date");
        }
        if (this["fhirVersion"] === undefined) {
            missingElements.push("fhirVersion");
        }
        if ((this["format"] === undefined) || (this["format"].length === 0)) {
            missingElements.push("format");
        }
        if (this["kind"] === undefined) {
            missingElements.push("kind");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return CapabilityStatement;
}(fhirModels.DomainResource));
export { CapabilityStatement };
/**
 * Code Values for the CapabilityStatement.format field
 */
export var CapabilityStatementFormatEnum;
(function (CapabilityStatementFormatEnum) {
    CapabilityStatementFormatEnum["XML"] = "xml";
    CapabilityStatementFormatEnum["JSON"] = "json";
    CapabilityStatementFormatEnum["TTL"] = "ttl";
    CapabilityStatementFormatEnum["MIME"] = "MIME";
})(CapabilityStatementFormatEnum || (CapabilityStatementFormatEnum = {}));
/**
 * Code Values for the CapabilityStatement.kind field
 */
export var CapabilityStatementKindEnum;
(function (CapabilityStatementKindEnum) {
    CapabilityStatementKindEnum["INSTANCE"] = "instance";
    CapabilityStatementKindEnum["CAPABILITY"] = "capability";
    CapabilityStatementKindEnum["REQUIREMENTS"] = "requirements";
})(CapabilityStatementKindEnum || (CapabilityStatementKindEnum = {}));
/**
 * Code Values for the CapabilityStatement.status field
 */
export var CapabilityStatementStatusEnum;
(function (CapabilityStatementStatusEnum) {
    CapabilityStatementStatusEnum["DRAFT"] = "draft";
    CapabilityStatementStatusEnum["ACTIVE"] = "active";
    CapabilityStatementStatusEnum["RETIRED"] = "retired";
    CapabilityStatementStatusEnum["UNKNOWN"] = "unknown";
})(CapabilityStatementStatusEnum || (CapabilityStatementStatusEnum = {}));
