var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
 */
var InsurancePlanContact = /** @class */ (function (_super) {
    __extends(InsurancePlanContact, _super);
    /**
     * Default constructor for InsurancePlanContact from an object that MAY NOT contain all required elements.
     */
    function InsurancePlanContact(source) {
        var _this = _super.call(this, source) || this;
        if (source["address"] !== undefined) {
            _this.address = new fhirModels.Address(source.address);
        }
        if (source["name"] !== undefined) {
            _this.name = new fhirModels.HumanName(source.name);
        }
        if (source["purpose"] !== undefined) {
            _this.purpose = new fhirModels.CodeableConcept(source.purpose);
        }
        if (source["telecom"] !== undefined) {
            _this.telecom = source.telecom.map(function (x) { return new fhirModels.ContactPoint(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a InsurancePlanContact from an object that MUST contain all required elements.
     */
    InsurancePlanContact.CreateStrict = function (source) {
        var dest = new InsurancePlanContact(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "InsurancePlanContact is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current InsurancePlanContact contains all required elements.
     */
    InsurancePlanContact.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return InsurancePlanContact;
}(fhirModels.BackboneElement));
export { InsurancePlanContact };
/**
 * The specific limits on the benefit.
 */
var InsurancePlanCoverageBenefitLimit = /** @class */ (function (_super) {
    __extends(InsurancePlanCoverageBenefitLimit, _super);
    /**
     * Default constructor for InsurancePlanCoverageBenefitLimit from an object that MAY NOT contain all required elements.
     */
    function InsurancePlanCoverageBenefitLimit(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["value"] !== undefined) {
            _this.value = new fhirModels.Quantity(source.value);
        }
        return _this;
    }
    /**
     * Factory function to create a InsurancePlanCoverageBenefitLimit from an object that MUST contain all required elements.
     */
    InsurancePlanCoverageBenefitLimit.CreateStrict = function (source) {
        var dest = new InsurancePlanCoverageBenefitLimit(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "InsurancePlanCoverageBenefitLimit is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current InsurancePlanCoverageBenefitLimit contains all required elements.
     */
    InsurancePlanCoverageBenefitLimit.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return InsurancePlanCoverageBenefitLimit;
}(fhirModels.BackboneElement));
export { InsurancePlanCoverageBenefitLimit };
/**
 * Specific benefits under this type of coverage.
 */
var InsurancePlanCoverageBenefit = /** @class */ (function (_super) {
    __extends(InsurancePlanCoverageBenefit, _super);
    /**
     * Default constructor for InsurancePlanCoverageBenefit from an object that MAY NOT contain all required elements.
     */
    function InsurancePlanCoverageBenefit(source) {
        var _this = _super.call(this, source) || this;
        if (source["limit"] !== undefined) {
            _this.limit = source.limit.map(function (x) { return new fhirModels.InsurancePlanCoverageBenefitLimit(x); });
        }
        if (source["requirement"] !== undefined) {
            _this.requirement = source.requirement;
        }
        if (source["_requirement"] !== undefined) {
            _this._requirement = new fhirModels.Element(source._requirement);
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    /**
     * Factory function to create a InsurancePlanCoverageBenefit from an object that MUST contain all required elements.
     */
    InsurancePlanCoverageBenefit.CreateStrict = function (source) {
        var dest = new InsurancePlanCoverageBenefit(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "InsurancePlanCoverageBenefit is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current InsurancePlanCoverageBenefit contains all required elements.
     */
    InsurancePlanCoverageBenefit.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return InsurancePlanCoverageBenefit;
}(fhirModels.BackboneElement));
export { InsurancePlanCoverageBenefit };
/**
 * Details about the coverage offered by the insurance product.
 */
var InsurancePlanCoverage = /** @class */ (function (_super) {
    __extends(InsurancePlanCoverage, _super);
    /**
     * Default constructor for InsurancePlanCoverage from an object that MAY NOT contain all required elements.
     */
    function InsurancePlanCoverage(source) {
        var _this = _super.call(this, source) || this;
        if (source["benefit"] !== undefined) {
            _this.benefit = source.benefit.map(function (x) { return new fhirModels.InsurancePlanCoverageBenefit(x); });
        }
        if (source["network"] !== undefined) {
            _this.network = source.network.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    /**
     * Factory function to create a InsurancePlanCoverage from an object that MUST contain all required elements.
     */
    InsurancePlanCoverage.CreateStrict = function (source) {
        var dest = new InsurancePlanCoverage(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "InsurancePlanCoverage is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current InsurancePlanCoverage contains all required elements.
     */
    InsurancePlanCoverage.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if ((this["benefit"] === undefined) || (this["benefit"].length === 0)) {
            missingElements.push("benefit");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return InsurancePlanCoverage;
}(fhirModels.BackboneElement));
export { InsurancePlanCoverage };
/**
 * Overall costs associated with the plan.
 */
var InsurancePlanPlanGeneralCost = /** @class */ (function (_super) {
    __extends(InsurancePlanPlanGeneralCost, _super);
    /**
     * Default constructor for InsurancePlanPlanGeneralCost from an object that MAY NOT contain all required elements.
     */
    function InsurancePlanPlanGeneralCost(source) {
        var _this = _super.call(this, source) || this;
        if (source["comment"] !== undefined) {
            _this.comment = source.comment;
        }
        if (source["_comment"] !== undefined) {
            _this._comment = new fhirModels.Element(source._comment);
        }
        if (source["cost"] !== undefined) {
            _this.cost = new fhirModels.Money(source.cost);
        }
        if (source["groupSize"] !== undefined) {
            _this.groupSize = source.groupSize;
        }
        if (source["_groupSize"] !== undefined) {
            _this._groupSize = new fhirModels.Element(source._groupSize);
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    /**
     * Factory function to create a InsurancePlanPlanGeneralCost from an object that MUST contain all required elements.
     */
    InsurancePlanPlanGeneralCost.CreateStrict = function (source) {
        var dest = new InsurancePlanPlanGeneralCost(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "InsurancePlanPlanGeneralCost is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current InsurancePlanPlanGeneralCost contains all required elements.
     */
    InsurancePlanPlanGeneralCost.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return InsurancePlanPlanGeneralCost;
}(fhirModels.BackboneElement));
export { InsurancePlanPlanGeneralCost };
/**
 * List of the costs associated with a specific benefit.
 */
var InsurancePlanPlanSpecificCostBenefitCost = /** @class */ (function (_super) {
    __extends(InsurancePlanPlanSpecificCostBenefitCost, _super);
    /**
     * Default constructor for InsurancePlanPlanSpecificCostBenefitCost from an object that MAY NOT contain all required elements.
     */
    function InsurancePlanPlanSpecificCostBenefitCost(source) {
        var _this = _super.call(this, source) || this;
        if (source["applicability"] !== undefined) {
            _this.applicability = new fhirModels.CodeableConcept(source.applicability);
        }
        if (source["qualifiers"] !== undefined) {
            _this.qualifiers = source.qualifiers.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["value"] !== undefined) {
            _this.value = new fhirModels.Quantity(source.value);
        }
        return _this;
    }
    /**
     * Factory function to create a InsurancePlanPlanSpecificCostBenefitCost from an object that MUST contain all required elements.
     */
    InsurancePlanPlanSpecificCostBenefitCost.CreateStrict = function (source) {
        var dest = new InsurancePlanPlanSpecificCostBenefitCost(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "InsurancePlanPlanSpecificCostBenefitCost is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current InsurancePlanPlanSpecificCostBenefitCost contains all required elements.
     */
    InsurancePlanPlanSpecificCostBenefitCost.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return InsurancePlanPlanSpecificCostBenefitCost;
}(fhirModels.BackboneElement));
export { InsurancePlanPlanSpecificCostBenefitCost };
/**
 * List of the specific benefits under this category of benefit.
 */
var InsurancePlanPlanSpecificCostBenefit = /** @class */ (function (_super) {
    __extends(InsurancePlanPlanSpecificCostBenefit, _super);
    /**
     * Default constructor for InsurancePlanPlanSpecificCostBenefit from an object that MAY NOT contain all required elements.
     */
    function InsurancePlanPlanSpecificCostBenefit(source) {
        var _this = _super.call(this, source) || this;
        if (source["cost"] !== undefined) {
            _this.cost = source.cost.map(function (x) { return new fhirModels.InsurancePlanPlanSpecificCostBenefitCost(x); });
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    /**
     * Factory function to create a InsurancePlanPlanSpecificCostBenefit from an object that MUST contain all required elements.
     */
    InsurancePlanPlanSpecificCostBenefit.CreateStrict = function (source) {
        var dest = new InsurancePlanPlanSpecificCostBenefit(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "InsurancePlanPlanSpecificCostBenefit is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current InsurancePlanPlanSpecificCostBenefit contains all required elements.
     */
    InsurancePlanPlanSpecificCostBenefit.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return InsurancePlanPlanSpecificCostBenefit;
}(fhirModels.BackboneElement));
export { InsurancePlanPlanSpecificCostBenefit };
/**
 * Costs associated with the coverage provided by the product.
 */
var InsurancePlanPlanSpecificCost = /** @class */ (function (_super) {
    __extends(InsurancePlanPlanSpecificCost, _super);
    /**
     * Default constructor for InsurancePlanPlanSpecificCost from an object that MAY NOT contain all required elements.
     */
    function InsurancePlanPlanSpecificCost(source) {
        var _this = _super.call(this, source) || this;
        if (source["benefit"] !== undefined) {
            _this.benefit = source.benefit.map(function (x) { return new fhirModels.InsurancePlanPlanSpecificCostBenefit(x); });
        }
        if (source["category"] !== undefined) {
            _this.category = new fhirModels.CodeableConcept(source.category);
        }
        return _this;
    }
    /**
     * Factory function to create a InsurancePlanPlanSpecificCost from an object that MUST contain all required elements.
     */
    InsurancePlanPlanSpecificCost.CreateStrict = function (source) {
        var dest = new InsurancePlanPlanSpecificCost(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "InsurancePlanPlanSpecificCost is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current InsurancePlanPlanSpecificCost contains all required elements.
     */
    InsurancePlanPlanSpecificCost.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["category"] === undefined) {
            missingElements.push("category");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return InsurancePlanPlanSpecificCost;
}(fhirModels.BackboneElement));
export { InsurancePlanPlanSpecificCost };
/**
 * Details about an insurance plan.
 */
var InsurancePlanPlan = /** @class */ (function (_super) {
    __extends(InsurancePlanPlan, _super);
    /**
     * Default constructor for InsurancePlanPlan from an object that MAY NOT contain all required elements.
     */
    function InsurancePlanPlan(source) {
        var _this = _super.call(this, source) || this;
        if (source["coverageArea"] !== undefined) {
            _this.coverageArea = source.coverageArea.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["generalCost"] !== undefined) {
            _this.generalCost = source.generalCost.map(function (x) { return new fhirModels.InsurancePlanPlanGeneralCost(x); });
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["network"] !== undefined) {
            _this.network = source.network.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["specificCost"] !== undefined) {
            _this.specificCost = source.specificCost.map(function (x) { return new fhirModels.InsurancePlanPlanSpecificCost(x); });
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    /**
     * Factory function to create a InsurancePlanPlan from an object that MUST contain all required elements.
     */
    InsurancePlanPlan.CreateStrict = function (source) {
        var dest = new InsurancePlanPlan(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "InsurancePlanPlan is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current InsurancePlanPlan contains all required elements.
     */
    InsurancePlanPlan.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return InsurancePlanPlan;
}(fhirModels.BackboneElement));
export { InsurancePlanPlan };
/**
 * Details of a Health Insurance product/plan provided by an organization.
 */
var InsurancePlan = /** @class */ (function (_super) {
    __extends(InsurancePlan, _super);
    /**
     * Default constructor for InsurancePlan from an object that MAY NOT contain all required elements.
     */
    function InsurancePlan(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "InsurancePlan";
        if ((source['resourceType'] !== "InsurancePlan") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a InsurancePlan';
        }
        if (source["administeredBy"] !== undefined) {
            _this.administeredBy = new fhirModels.Reference(source.administeredBy);
        }
        if (source["alias"] !== undefined) {
            _this.alias = source.alias.map(function (x) { return (x); });
        }
        if (source["_alias"] !== undefined) {
            _this._alias = source._alias.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["contact"] !== undefined) {
            _this.contact = source.contact.map(function (x) { return new fhirModels.InsurancePlanContact(x); });
        }
        if (source["coverage"] !== undefined) {
            _this.coverage = source.coverage.map(function (x) { return new fhirModels.InsurancePlanCoverage(x); });
        }
        if (source["coverageArea"] !== undefined) {
            _this.coverageArea = source.coverageArea.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["endpoint"] !== undefined) {
            _this.endpoint = source.endpoint.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["name"] !== undefined) {
            _this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            _this._name = new fhirModels.Element(source._name);
        }
        if (source["network"] !== undefined) {
            _this.network = source.network.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["ownedBy"] !== undefined) {
            _this.ownedBy = new fhirModels.Reference(source.ownedBy);
        }
        if (source["period"] !== undefined) {
            _this.period = new fhirModels.Period(source.period);
        }
        if (source["plan"] !== undefined) {
            _this.plan = source.plan.map(function (x) { return new fhirModels.InsurancePlanPlan(x); });
        }
        if (source["status"] !== undefined) {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["type"] !== undefined) {
            _this.type = source.type.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a InsurancePlan from an object that MUST contain all required elements.
     */
    InsurancePlan.CreateStrict = function (source) {
        var dest = new InsurancePlan(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "InsurancePlan is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current InsurancePlan contains all required elements.
     */
    InsurancePlan.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return InsurancePlan;
}(fhirModels.DomainResource));
export { InsurancePlan };
/**
 * Code Values for the InsurancePlan.status field
 */
export var InsurancePlanStatusEnum;
(function (InsurancePlanStatusEnum) {
    InsurancePlanStatusEnum["DRAFT"] = "draft";
    InsurancePlanStatusEnum["ACTIVE"] = "active";
    InsurancePlanStatusEnum["RETIRED"] = "retired";
    InsurancePlanStatusEnum["UNKNOWN"] = "unknown";
})(InsurancePlanStatusEnum || (InsurancePlanStatusEnum = {}));
