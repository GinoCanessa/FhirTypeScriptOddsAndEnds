var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
 */
var Expression = /** @class */ (function (_super) {
    __extends(Expression, _super);
    /**
     * Default constructor for Expression from an object that MAY NOT contain all required elements.
     */
    function Expression(source) {
        var _this = _super.call(this, source) || this;
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["expression"] !== undefined) {
            _this.expression = source.expression;
        }
        if (source["_expression"] !== undefined) {
            _this._expression = new fhirModels.Element(source._expression);
        }
        if (source["language"] !== undefined) {
            _this.language = source.language;
        }
        if (source["_language"] !== undefined) {
            _this._language = new fhirModels.Element(source._language);
        }
        if (source["name"] !== undefined) {
            _this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            _this._name = new fhirModels.Element(source._name);
        }
        if (source["reference"] !== undefined) {
            _this.reference = source.reference;
        }
        if (source["_reference"] !== undefined) {
            _this._reference = new fhirModels.Element(source._reference);
        }
        return _this;
    }
    /**
     * Factory function to create a Expression from an object that MUST contain all required elements.
     */
    Expression.CreateStrict = function (source) {
        var dest = new Expression(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "Expression is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current Expression contains all required elements.
     */
    Expression.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["language"] === undefined) {
            missingElements.push("language");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return Expression;
}(fhirModels.Element));
export { Expression };
/**
 * Code Values for the Expression.language field
 */
export var ExpressionLanguageEnum;
(function (ExpressionLanguageEnum) {
    ExpressionLanguageEnum["TEXT_CQL"] = "text/cql";
    ExpressionLanguageEnum["TEXT_FHIRPATH"] = "text/fhirpath";
    ExpressionLanguageEnum["APPLICATION_X_FHIR_QUERY"] = "application/x-fhir-query";
})(ExpressionLanguageEnum || (ExpressionLanguageEnum = {}));
