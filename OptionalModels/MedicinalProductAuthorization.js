var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * Authorization in areas within a country.
 */
var MedicinalProductAuthorizationJurisdictionalAuthorization = /** @class */ (function (_super) {
    __extends(MedicinalProductAuthorizationJurisdictionalAuthorization, _super);
    /**
     * Default constructor for MedicinalProductAuthorizationJurisdictionalAuthorization from an object that MAY NOT contain all required elements.
     */
    function MedicinalProductAuthorizationJurisdictionalAuthorization(source) {
        var _this = _super.call(this, source) || this;
        if (source["country"] !== undefined) {
            _this.country = new fhirModels.CodeableConcept(source.country);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["jurisdiction"] !== undefined) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["legalStatusOfSupply"] !== undefined) {
            _this.legalStatusOfSupply = new fhirModels.CodeableConcept(source.legalStatusOfSupply);
        }
        if (source["validityPeriod"] !== undefined) {
            _this.validityPeriod = new fhirModels.Period(source.validityPeriod);
        }
        return _this;
    }
    /**
     * Factory function to create a MedicinalProductAuthorizationJurisdictionalAuthorization from an object that MUST contain all required elements.
     */
    MedicinalProductAuthorizationJurisdictionalAuthorization.CreateStrict = function (source) {
        var dest = new MedicinalProductAuthorizationJurisdictionalAuthorization(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "MedicinalProductAuthorizationJurisdictionalAuthorization is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current MedicinalProductAuthorizationJurisdictionalAuthorization contains all required elements.
     */
    MedicinalProductAuthorizationJurisdictionalAuthorization.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return MedicinalProductAuthorizationJurisdictionalAuthorization;
}(fhirModels.BackboneElement));
export { MedicinalProductAuthorizationJurisdictionalAuthorization };
/**
 * The regulatory procedure for granting or amending a marketing authorization.
 */
var MedicinalProductAuthorizationProcedure = /** @class */ (function (_super) {
    __extends(MedicinalProductAuthorizationProcedure, _super);
    /**
     * Default constructor for MedicinalProductAuthorizationProcedure from an object that MAY NOT contain all required elements.
     */
    function MedicinalProductAuthorizationProcedure(source) {
        var _this = _super.call(this, source) || this;
        if (source["application"] !== undefined) {
            _this.application = source.application.map(function (x) { return new fhirModels.MedicinalProductAuthorizationProcedure(x); });
        }
        if (source["datePeriod"] !== undefined) {
            _this.datePeriod = new fhirModels.Period(source.datePeriod);
        }
        if (source["dateDateTime"] !== undefined) {
            _this.dateDateTime = source.dateDateTime;
        }
        if (source["_dateDateTime"] !== undefined) {
            _this._dateDateTime = new fhirModels.Element(source._dateDateTime);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = new fhirModels.Identifier(source.identifier);
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    /**
     * Factory function to create a MedicinalProductAuthorizationProcedure from an object that MUST contain all required elements.
     */
    MedicinalProductAuthorizationProcedure.CreateStrict = function (source) {
        var dest = new MedicinalProductAuthorizationProcedure(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "MedicinalProductAuthorizationProcedure is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current MedicinalProductAuthorizationProcedure contains all required elements.
     */
    MedicinalProductAuthorizationProcedure.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return MedicinalProductAuthorizationProcedure;
}(fhirModels.BackboneElement));
export { MedicinalProductAuthorizationProcedure };
/**
 * The regulatory authorization of a medicinal product.
 */
var MedicinalProductAuthorization = /** @class */ (function (_super) {
    __extends(MedicinalProductAuthorization, _super);
    /**
     * Default constructor for MedicinalProductAuthorization from an object that MAY NOT contain all required elements.
     */
    function MedicinalProductAuthorization(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "MedicinalProductAuthorization";
        if ((source['resourceType'] !== "MedicinalProductAuthorization") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a MedicinalProductAuthorization';
        }
        if (source["country"] !== undefined) {
            _this.country = source.country.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["dataExclusivityPeriod"] !== undefined) {
            _this.dataExclusivityPeriod = new fhirModels.Period(source.dataExclusivityPeriod);
        }
        if (source["dateOfFirstAuthorization"] !== undefined) {
            _this.dateOfFirstAuthorization = source.dateOfFirstAuthorization;
        }
        if (source["_dateOfFirstAuthorization"] !== undefined) {
            _this._dateOfFirstAuthorization = new fhirModels.Element(source._dateOfFirstAuthorization);
        }
        if (source["holder"] !== undefined) {
            _this.holder = new fhirModels.Reference(source.holder);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["internationalBirthDate"] !== undefined) {
            _this.internationalBirthDate = source.internationalBirthDate;
        }
        if (source["_internationalBirthDate"] !== undefined) {
            _this._internationalBirthDate = new fhirModels.Element(source._internationalBirthDate);
        }
        if (source["jurisdiction"] !== undefined) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["jurisdictionalAuthorization"] !== undefined) {
            _this.jurisdictionalAuthorization = source.jurisdictionalAuthorization.map(function (x) { return new fhirModels.MedicinalProductAuthorizationJurisdictionalAuthorization(x); });
        }
        if (source["legalBasis"] !== undefined) {
            _this.legalBasis = new fhirModels.CodeableConcept(source.legalBasis);
        }
        if (source["procedure"] !== undefined) {
            _this.procedure = new fhirModels.MedicinalProductAuthorizationProcedure(source.procedure);
        }
        if (source["regulator"] !== undefined) {
            _this.regulator = new fhirModels.Reference(source.regulator);
        }
        if (source["restoreDate"] !== undefined) {
            _this.restoreDate = source.restoreDate;
        }
        if (source["_restoreDate"] !== undefined) {
            _this._restoreDate = new fhirModels.Element(source._restoreDate);
        }
        if (source["status"] !== undefined) {
            _this.status = new fhirModels.CodeableConcept(source.status);
        }
        if (source["statusDate"] !== undefined) {
            _this.statusDate = source.statusDate;
        }
        if (source["_statusDate"] !== undefined) {
            _this._statusDate = new fhirModels.Element(source._statusDate);
        }
        if (source["subject"] !== undefined) {
            _this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["validityPeriod"] !== undefined) {
            _this.validityPeriod = new fhirModels.Period(source.validityPeriod);
        }
        return _this;
    }
    /**
     * Factory function to create a MedicinalProductAuthorization from an object that MUST contain all required elements.
     */
    MedicinalProductAuthorization.CreateStrict = function (source) {
        var dest = new MedicinalProductAuthorization(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "MedicinalProductAuthorization is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current MedicinalProductAuthorization contains all required elements.
     */
    MedicinalProductAuthorization.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return MedicinalProductAuthorization;
}(fhirModels.DomainResource));
export { MedicinalProductAuthorization };
