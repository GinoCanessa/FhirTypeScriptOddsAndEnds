var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * Batch numbering.
 */
var MedicinalProductPackagedBatchIdentifier = /** @class */ (function (_super) {
    __extends(MedicinalProductPackagedBatchIdentifier, _super);
    /**
     * Default constructor for MedicinalProductPackagedBatchIdentifier from an object that MAY NOT contain all required elements.
     */
    function MedicinalProductPackagedBatchIdentifier(source) {
        var _this = _super.call(this, source) || this;
        if (source["immediatePackaging"] !== undefined) {
            _this.immediatePackaging = new fhirModels.Identifier(source.immediatePackaging);
        }
        if (source["outerPackaging"] !== undefined) {
            _this.outerPackaging = new fhirModels.Identifier(source.outerPackaging);
        }
        return _this;
    }
    /**
     * Factory function to create a MedicinalProductPackagedBatchIdentifier from an object that MUST contain all required elements.
     */
    MedicinalProductPackagedBatchIdentifier.CreateStrict = function (source) {
        var dest = new MedicinalProductPackagedBatchIdentifier(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "MedicinalProductPackagedBatchIdentifier is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current MedicinalProductPackagedBatchIdentifier contains all required elements.
     */
    MedicinalProductPackagedBatchIdentifier.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["outerPackaging"] === undefined) {
            missingElements.push("outerPackaging");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return MedicinalProductPackagedBatchIdentifier;
}(fhirModels.BackboneElement));
export { MedicinalProductPackagedBatchIdentifier };
/**
 * A packaging item, as a contained for medicine, possibly with other packaging items within.
 */
var MedicinalProductPackagedPackageItem = /** @class */ (function (_super) {
    __extends(MedicinalProductPackagedPackageItem, _super);
    /**
     * Default constructor for MedicinalProductPackagedPackageItem from an object that MAY NOT contain all required elements.
     */
    function MedicinalProductPackagedPackageItem(source) {
        var _this = _super.call(this, source) || this;
        if (source["alternateMaterial"] !== undefined) {
            _this.alternateMaterial = source.alternateMaterial.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["device"] !== undefined) {
            _this.device = source.device.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["manufacturedItem"] !== undefined) {
            _this.manufacturedItem = source.manufacturedItem.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["manufacturer"] !== undefined) {
            _this.manufacturer = source.manufacturer.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["material"] !== undefined) {
            _this.material = source.material.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["otherCharacteristics"] !== undefined) {
            _this.otherCharacteristics = source.otherCharacteristics.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["packageItem"] !== undefined) {
            _this.packageItem = source.packageItem.map(function (x) { return new fhirModels.MedicinalProductPackagedPackageItem(x); });
        }
        if (source["physicalCharacteristics"] !== undefined) {
            _this.physicalCharacteristics = new fhirModels.ProdCharacteristic(source.physicalCharacteristics);
        }
        if (source["quantity"] !== undefined) {
            _this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["shelfLifeStorage"] !== undefined) {
            _this.shelfLifeStorage = source.shelfLifeStorage.map(function (x) { return new fhirModels.ProductShelfLife(x); });
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    /**
     * Factory function to create a MedicinalProductPackagedPackageItem from an object that MUST contain all required elements.
     */
    MedicinalProductPackagedPackageItem.CreateStrict = function (source) {
        var dest = new MedicinalProductPackagedPackageItem(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "MedicinalProductPackagedPackageItem is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current MedicinalProductPackagedPackageItem contains all required elements.
     */
    MedicinalProductPackagedPackageItem.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["quantity"] === undefined) {
            missingElements.push("quantity");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return MedicinalProductPackagedPackageItem;
}(fhirModels.BackboneElement));
export { MedicinalProductPackagedPackageItem };
/**
 * A medicinal product in a container or package.
 */
var MedicinalProductPackaged = /** @class */ (function (_super) {
    __extends(MedicinalProductPackaged, _super);
    /**
     * Default constructor for MedicinalProductPackaged from an object that MAY NOT contain all required elements.
     */
    function MedicinalProductPackaged(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "MedicinalProductPackaged";
        if ((source['resourceType'] !== "MedicinalProductPackaged") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a MedicinalProductPackaged';
        }
        if (source["batchIdentifier"] !== undefined) {
            _this.batchIdentifier = source.batchIdentifier.map(function (x) { return new fhirModels.MedicinalProductPackagedBatchIdentifier(x); });
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["legalStatusOfSupply"] !== undefined) {
            _this.legalStatusOfSupply = new fhirModels.CodeableConcept(source.legalStatusOfSupply);
        }
        if (source["manufacturer"] !== undefined) {
            _this.manufacturer = source.manufacturer.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["marketingAuthorization"] !== undefined) {
            _this.marketingAuthorization = new fhirModels.Reference(source.marketingAuthorization);
        }
        if (source["marketingStatus"] !== undefined) {
            _this.marketingStatus = source.marketingStatus.map(function (x) { return new fhirModels.MarketingStatus(x); });
        }
        if (source["packageItem"] !== undefined) {
            _this.packageItem = source.packageItem.map(function (x) { return new fhirModels.MedicinalProductPackagedPackageItem(x); });
        }
        if (source["subject"] !== undefined) {
            _this.subject = source.subject.map(function (x) { return new fhirModels.Reference(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a MedicinalProductPackaged from an object that MUST contain all required elements.
     */
    MedicinalProductPackaged.CreateStrict = function (source) {
        var dest = new MedicinalProductPackaged(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "MedicinalProductPackaged is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current MedicinalProductPackaged contains all required elements.
     */
    MedicinalProductPackaged.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if ((this["packageItem"] === undefined) || (this["packageItem"].length === 0)) {
            missingElements.push("packageItem");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return MedicinalProductPackaged;
}(fhirModels.DomainResource));
export { MedicinalProductPackaged };
