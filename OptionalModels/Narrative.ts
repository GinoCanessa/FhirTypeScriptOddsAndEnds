// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels'
import * as fhirInterfaces from '../optionalinterfaces'
/**
 * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
 */
export class Narrative extends fhirModels.Element implements fhirInterfaces.INarrative {
  /**
   * The contents of the html element are an XHTML fragment containing only the basic html formatting elements described in chapters 7-11 and 15 of the HTML 4.0 standard, &lt;a&gt; elements (either name or href), images and internally contained stylesheets. The XHTML content SHALL NOT contain a head, a body, external stylesheet references, scripts, forms, base/link/xlink, frames, iframes and objects.
   */
  div?: string|undefined;
  _div?: fhirModels.Element|undefined;
  /**
   * The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.
   */
  status?: NarrativeStatusEnum|undefined;
  _status?: fhirModels.Element|undefined;
  /**
   * Default constructor for Narrative from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.INarrative>) {
    super(source);
    if (source["div"] !== undefined) { this.div = source.div; }
    if (source["_div"] !== undefined) { this._div = new fhirModels.Element(source._div); }
    if (source["status"] !== undefined) { this.status = source.status; }
    if (source["_status"] !== undefined) { this._status = new fhirModels.Element(source._status); }
  }
  /**
   * Factory function to create a Narrative from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.INarrative):Narrative {
    var dest:Narrative = new Narrative(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `Narrative is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current Narrative contains all required elements.
   */
  checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["div"] === undefined) { missingElements.push("div"); }
    if (this["status"] === undefined) { missingElements.push("status"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
/**
 * Code Values for the Narrative.status field
 */
export enum NarrativeStatusEnum {
  GENERATED = "generated",
  EXTENSIONS = "extensions",
  ADDITIONAL = "additional",
  EMPTY = "empty",
}
