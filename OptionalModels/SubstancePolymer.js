"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubstancePolymer = exports.SubstancePolymerRepeat = exports.SubstancePolymerRepeatRepeatUnit = exports.SubstancePolymerRepeatRepeatUnitStructuralRepresentation = exports.SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation = exports.SubstancePolymerMonomerSet = exports.SubstancePolymerMonomerSetStartingMaterial = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * Todo.
 */
class SubstancePolymerMonomerSetStartingMaterial extends fhirModels.BackboneElement {
    /**
     * Default constructor for SubstancePolymerMonomerSetStartingMaterial from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["amount"] !== undefined) {
            this.amount = new fhirModels.SubstanceAmount(source.amount);
        }
        if (source["isDefining"] !== undefined) {
            this.isDefining = source.isDefining;
        }
        if (source["_isDefining"] !== undefined) {
            this._isDefining = new fhirModels.Element(source._isDefining);
        }
        if (source["material"] !== undefined) {
            this.material = new fhirModels.CodeableConcept(source.material);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
    /**
     * Factory function to create a SubstancePolymerMonomerSetStartingMaterial from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new SubstancePolymerMonomerSetStartingMaterial(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstancePolymerMonomerSetStartingMaterial is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current SubstancePolymerMonomerSetStartingMaterial contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.SubstancePolymerMonomerSetStartingMaterial = SubstancePolymerMonomerSetStartingMaterial;
/**
 * Todo.
 */
class SubstancePolymerMonomerSet extends fhirModels.BackboneElement {
    /**
     * Default constructor for SubstancePolymerMonomerSet from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["ratioType"] !== undefined) {
            this.ratioType = new fhirModels.CodeableConcept(source.ratioType);
        }
        if (source["startingMaterial"] !== undefined) {
            this.startingMaterial = source.startingMaterial.map((x) => new fhirModels.SubstancePolymerMonomerSetStartingMaterial(x));
        }
    }
    /**
     * Factory function to create a SubstancePolymerMonomerSet from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new SubstancePolymerMonomerSet(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstancePolymerMonomerSet is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current SubstancePolymerMonomerSet contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.SubstancePolymerMonomerSet = SubstancePolymerMonomerSet;
/**
 * Todo.
 */
class SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation extends fhirModels.BackboneElement {
    /**
     * Default constructor for SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["amount"] !== undefined) {
            this.amount = new fhirModels.SubstanceAmount(source.amount);
        }
        if (source["degree"] !== undefined) {
            this.degree = new fhirModels.CodeableConcept(source.degree);
        }
    }
    /**
     * Factory function to create a SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation = SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation;
/**
 * Todo.
 */
class SubstancePolymerRepeatRepeatUnitStructuralRepresentation extends fhirModels.BackboneElement {
    /**
     * Default constructor for SubstancePolymerRepeatRepeatUnitStructuralRepresentation from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["attachment"] !== undefined) {
            this.attachment = new fhirModels.Attachment(source.attachment);
        }
        if (source["representation"] !== undefined) {
            this.representation = source.representation;
        }
        if (source["_representation"] !== undefined) {
            this._representation = new fhirModels.Element(source._representation);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
    /**
     * Factory function to create a SubstancePolymerRepeatRepeatUnitStructuralRepresentation from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new SubstancePolymerRepeatRepeatUnitStructuralRepresentation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstancePolymerRepeatRepeatUnitStructuralRepresentation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current SubstancePolymerRepeatRepeatUnitStructuralRepresentation contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.SubstancePolymerRepeatRepeatUnitStructuralRepresentation = SubstancePolymerRepeatRepeatUnitStructuralRepresentation;
/**
 * Todo.
 */
class SubstancePolymerRepeatRepeatUnit extends fhirModels.BackboneElement {
    /**
     * Default constructor for SubstancePolymerRepeatRepeatUnit from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["amount"] !== undefined) {
            this.amount = new fhirModels.SubstanceAmount(source.amount);
        }
        if (source["degreeOfPolymerisation"] !== undefined) {
            this.degreeOfPolymerisation = source.degreeOfPolymerisation.map((x) => new fhirModels.SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(x));
        }
        if (source["orientationOfPolymerisation"] !== undefined) {
            this.orientationOfPolymerisation = new fhirModels.CodeableConcept(source.orientationOfPolymerisation);
        }
        if (source["repeatUnit"] !== undefined) {
            this.repeatUnit = source.repeatUnit;
        }
        if (source["_repeatUnit"] !== undefined) {
            this._repeatUnit = new fhirModels.Element(source._repeatUnit);
        }
        if (source["structuralRepresentation"] !== undefined) {
            this.structuralRepresentation = source.structuralRepresentation.map((x) => new fhirModels.SubstancePolymerRepeatRepeatUnitStructuralRepresentation(x));
        }
    }
    /**
     * Factory function to create a SubstancePolymerRepeatRepeatUnit from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new SubstancePolymerRepeatRepeatUnit(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstancePolymerRepeatRepeatUnit is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current SubstancePolymerRepeatRepeatUnit contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.SubstancePolymerRepeatRepeatUnit = SubstancePolymerRepeatRepeatUnit;
/**
 * Todo.
 */
class SubstancePolymerRepeat extends fhirModels.BackboneElement {
    /**
     * Default constructor for SubstancePolymerRepeat from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["averageMolecularFormula"] !== undefined) {
            this.averageMolecularFormula = source.averageMolecularFormula;
        }
        if (source["_averageMolecularFormula"] !== undefined) {
            this._averageMolecularFormula = new fhirModels.Element(source._averageMolecularFormula);
        }
        if (source["numberOfUnits"] !== undefined) {
            this.numberOfUnits = source.numberOfUnits;
        }
        if (source["_numberOfUnits"] !== undefined) {
            this._numberOfUnits = new fhirModels.Element(source._numberOfUnits);
        }
        if (source["repeatUnit"] !== undefined) {
            this.repeatUnit = source.repeatUnit.map((x) => new fhirModels.SubstancePolymerRepeatRepeatUnit(x));
        }
        if (source["repeatUnitAmountType"] !== undefined) {
            this.repeatUnitAmountType = new fhirModels.CodeableConcept(source.repeatUnitAmountType);
        }
    }
    /**
     * Factory function to create a SubstancePolymerRepeat from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new SubstancePolymerRepeat(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstancePolymerRepeat is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current SubstancePolymerRepeat contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.SubstancePolymerRepeat = SubstancePolymerRepeat;
/**
 * Todo.
 */
class SubstancePolymer extends fhirModels.DomainResource {
    /**
     * Default constructor for SubstancePolymer from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "SubstancePolymer";
        if ((source['resourceType'] !== "SubstancePolymer") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a SubstancePolymer';
        }
        if (source["class"] !== undefined) {
            this.class = new fhirModels.CodeableConcept(source.class);
        }
        if (source["copolymerConnectivity"] !== undefined) {
            this.copolymerConnectivity = source.copolymerConnectivity.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["geometry"] !== undefined) {
            this.geometry = new fhirModels.CodeableConcept(source.geometry);
        }
        if (source["modification"] !== undefined) {
            this.modification = source.modification.map((x) => (x));
        }
        if (source["_modification"] !== undefined) {
            this._modification = source._modification.map((x) => new fhirModels.Element(x));
        }
        if (source["monomerSet"] !== undefined) {
            this.monomerSet = source.monomerSet.map((x) => new fhirModels.SubstancePolymerMonomerSet(x));
        }
        if (source["repeat"] !== undefined) {
            this.repeat = source.repeat.map((x) => new fhirModels.SubstancePolymerRepeat(x));
        }
    }
    /**
     * Factory function to create a SubstancePolymer from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new SubstancePolymer(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstancePolymer is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current SubstancePolymer contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.SubstancePolymer = SubstancePolymer;
//# sourceMappingURL=SubstancePolymer.js.map