"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocationStatusEnum = exports.LocationModeEnum = exports.Location = exports.LocationHoursOfOperationDaysOfWeekEnum = exports.LocationHoursOfOperation = exports.LocationPosition = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).
 */
class LocationPosition extends fhirModels.BackboneElement {
    /**
     * Default constructor for LocationPosition from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["altitude"] !== undefined) {
            this.altitude = source.altitude;
        }
        if (source["_altitude"] !== undefined) {
            this._altitude = new fhirModels.Element(source._altitude);
        }
        if (source["latitude"] !== undefined) {
            this.latitude = source.latitude;
        }
        if (source["_latitude"] !== undefined) {
            this._latitude = new fhirModels.Element(source._latitude);
        }
        if (source["longitude"] !== undefined) {
            this.longitude = source.longitude;
        }
        if (source["_longitude"] !== undefined) {
            this._longitude = new fhirModels.Element(source._longitude);
        }
    }
    /**
     * Factory function to create a LocationPosition from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new LocationPosition(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `LocationPosition is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current LocationPosition contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["latitude"] === undefined) {
            missingElements.push("latitude");
        }
        if (this["longitude"] === undefined) {
            missingElements.push("longitude");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.LocationPosition = LocationPosition;
/**
 * This type of information is commonly found published in directories and on websites informing customers when the facility is available.
 * Specific services within the location may have their own hours which could be shorter (or longer) than the locations hours.
 */
class LocationHoursOfOperation extends fhirModels.BackboneElement {
    /**
     * Default constructor for LocationHoursOfOperation from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["allDay"] !== undefined) {
            this.allDay = source.allDay;
        }
        if (source["_allDay"] !== undefined) {
            this._allDay = new fhirModels.Element(source._allDay);
        }
        if (source["closingTime"] !== undefined) {
            this.closingTime = source.closingTime;
        }
        if (source["_closingTime"] !== undefined) {
            this._closingTime = new fhirModels.Element(source._closingTime);
        }
        if (source["daysOfWeek"] !== undefined) {
            this.daysOfWeek = source.daysOfWeek.map((x) => (x));
        }
        if (source["_daysOfWeek"] !== undefined) {
            this._daysOfWeek = source._daysOfWeek.map((x) => new fhirModels.Element(x));
        }
        if (source["openingTime"] !== undefined) {
            this.openingTime = source.openingTime;
        }
        if (source["_openingTime"] !== undefined) {
            this._openingTime = new fhirModels.Element(source._openingTime);
        }
    }
    /**
     * Factory function to create a LocationHoursOfOperation from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new LocationHoursOfOperation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `LocationHoursOfOperation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current LocationHoursOfOperation contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.LocationHoursOfOperation = LocationHoursOfOperation;
/**
 * Code Values for the Location.hoursOfOperation.daysOfWeek field
 */
var LocationHoursOfOperationDaysOfWeekEnum;
(function (LocationHoursOfOperationDaysOfWeekEnum) {
    LocationHoursOfOperationDaysOfWeekEnum["MON"] = "mon";
    LocationHoursOfOperationDaysOfWeekEnum["TUE"] = "tue";
    LocationHoursOfOperationDaysOfWeekEnum["WED"] = "wed";
    LocationHoursOfOperationDaysOfWeekEnum["THU"] = "thu";
    LocationHoursOfOperationDaysOfWeekEnum["FRI"] = "fri";
    LocationHoursOfOperationDaysOfWeekEnum["SAT"] = "sat";
    LocationHoursOfOperationDaysOfWeekEnum["SUN"] = "sun";
})(LocationHoursOfOperationDaysOfWeekEnum = exports.LocationHoursOfOperationDaysOfWeekEnum || (exports.LocationHoursOfOperationDaysOfWeekEnum = {}));
/**
 * Details and position information for a physical place where services are provided and resources and participants may be stored, found, contained, or accommodated.
 */
class Location extends fhirModels.DomainResource {
    /**
     * Default constructor for Location from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "Location";
        if ((source['resourceType'] !== "Location") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Location';
        }
        if (source["address"] !== undefined) {
            this.address = new fhirModels.Address(source.address);
        }
        if (source["alias"] !== undefined) {
            this.alias = source.alias.map((x) => (x));
        }
        if (source["_alias"] !== undefined) {
            this._alias = source._alias.map((x) => new fhirModels.Element(x));
        }
        if (source["availabilityExceptions"] !== undefined) {
            this.availabilityExceptions = source.availabilityExceptions;
        }
        if (source["_availabilityExceptions"] !== undefined) {
            this._availabilityExceptions = new fhirModels.Element(source._availabilityExceptions);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["endpoint"] !== undefined) {
            this.endpoint = source.endpoint.map((x) => new fhirModels.Reference(x));
        }
        if (source["hoursOfOperation"] !== undefined) {
            this.hoursOfOperation = source.hoursOfOperation.map((x) => new fhirModels.LocationHoursOfOperation(x));
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["managingOrganization"] !== undefined) {
            this.managingOrganization = new fhirModels.Reference(source.managingOrganization);
        }
        if (source["mode"] !== undefined) {
            this.mode = source.mode;
        }
        if (source["_mode"] !== undefined) {
            this._mode = new fhirModels.Element(source._mode);
        }
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["operationalStatus"] !== undefined) {
            this.operationalStatus = new fhirModels.Coding(source.operationalStatus);
        }
        if (source["partOf"] !== undefined) {
            this.partOf = new fhirModels.Reference(source.partOf);
        }
        if (source["physicalType"] !== undefined) {
            this.physicalType = new fhirModels.CodeableConcept(source.physicalType);
        }
        if (source["position"] !== undefined) {
            this.position = new fhirModels.LocationPosition(source.position);
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["telecom"] !== undefined) {
            this.telecom = source.telecom.map((x) => new fhirModels.ContactPoint(x));
        }
        if (source["type"] !== undefined) {
            this.type = source.type.map((x) => new fhirModels.CodeableConcept(x));
        }
    }
    /**
     * Factory function to create a Location from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new Location(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Location is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current Location contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.Location = Location;
/**
 * Code Values for the Location.mode field
 */
var LocationModeEnum;
(function (LocationModeEnum) {
    LocationModeEnum["INSTANCE"] = "instance";
    LocationModeEnum["KIND"] = "kind";
})(LocationModeEnum = exports.LocationModeEnum || (exports.LocationModeEnum = {}));
/**
 * Code Values for the Location.status field
 */
var LocationStatusEnum;
(function (LocationStatusEnum) {
    LocationStatusEnum["ACTIVE"] = "active";
    LocationStatusEnum["SUSPENDED"] = "suspended";
    LocationStatusEnum["INACTIVE"] = "inactive";
})(LocationStatusEnum = exports.LocationStatusEnum || (exports.LocationStatusEnum = {}));
//# sourceMappingURL=Location.js.map