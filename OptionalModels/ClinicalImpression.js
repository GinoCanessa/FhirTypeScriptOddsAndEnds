"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClinicalImpressionStatusEnum = exports.ClinicalImpression = exports.ClinicalImpressionFinding = exports.ClinicalImpressionInvestigation = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * One or more sets of investigations (signs, symptoms, etc.). The actual grouping of investigations varies greatly depending on the type and context of the assessment. These investigations may include data generated during the assessment process, or data previously generated and recorded that is pertinent to the outcomes.
 */
class ClinicalImpressionInvestigation extends fhirModels.BackboneElement {
    /**
     * Default constructor for ClinicalImpressionInvestigation from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["item"] !== undefined) {
            this.item = source.item.map((x) => new fhirModels.Reference(x));
        }
    }
    /**
     * Factory function to create a ClinicalImpressionInvestigation from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ClinicalImpressionInvestigation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClinicalImpressionInvestigation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ClinicalImpressionInvestigation contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ClinicalImpressionInvestigation = ClinicalImpressionInvestigation;
/**
 * Specific findings or diagnoses that were considered likely or relevant to ongoing treatment.
 */
class ClinicalImpressionFinding extends fhirModels.BackboneElement {
    /**
     * Default constructor for ClinicalImpressionFinding from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["basis"] !== undefined) {
            this.basis = source.basis;
        }
        if (source["_basis"] !== undefined) {
            this._basis = new fhirModels.Element(source._basis);
        }
        if (source["itemCodeableConcept"] !== undefined) {
            this.itemCodeableConcept = new fhirModels.CodeableConcept(source.itemCodeableConcept);
        }
        if (source["itemReference"] !== undefined) {
            this.itemReference = new fhirModels.Reference(source.itemReference);
        }
    }
    /**
     * Factory function to create a ClinicalImpressionFinding from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ClinicalImpressionFinding(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClinicalImpressionFinding is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ClinicalImpressionFinding contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ClinicalImpressionFinding = ClinicalImpressionFinding;
/**
 * A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score.
 */
class ClinicalImpression extends fhirModels.DomainResource {
    /**
     * Default constructor for ClinicalImpression from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "ClinicalImpression";
        if ((source['resourceType'] !== "ClinicalImpression") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a ClinicalImpression';
        }
        if (source["assessor"] !== undefined) {
            this.assessor = new fhirModels.Reference(source.assessor);
        }
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["effectiveDateTime"] !== undefined) {
            this.effectiveDateTime = source.effectiveDateTime;
        }
        if (source["_effectiveDateTime"] !== undefined) {
            this._effectiveDateTime = new fhirModels.Element(source._effectiveDateTime);
        }
        if (source["effectivePeriod"] !== undefined) {
            this.effectivePeriod = new fhirModels.Period(source.effectivePeriod);
        }
        if (source["encounter"] !== undefined) {
            this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["finding"] !== undefined) {
            this.finding = source.finding.map((x) => new fhirModels.ClinicalImpressionFinding(x));
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["investigation"] !== undefined) {
            this.investigation = source.investigation.map((x) => new fhirModels.ClinicalImpressionInvestigation(x));
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["previous"] !== undefined) {
            this.previous = new fhirModels.Reference(source.previous);
        }
        if (source["problem"] !== undefined) {
            this.problem = source.problem.map((x) => new fhirModels.Reference(x));
        }
        if (source["prognosisCodeableConcept"] !== undefined) {
            this.prognosisCodeableConcept = source.prognosisCodeableConcept.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["prognosisReference"] !== undefined) {
            this.prognosisReference = source.prognosisReference.map((x) => new fhirModels.Reference(x));
        }
        if (source["protocol"] !== undefined) {
            this.protocol = source.protocol.map((x) => (x));
        }
        if (source["_protocol"] !== undefined) {
            this._protocol = source._protocol.map((x) => new fhirModels.Element(x));
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["statusReason"] !== undefined) {
            this.statusReason = new fhirModels.CodeableConcept(source.statusReason);
        }
        if (source["subject"] !== undefined) {
            this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["summary"] !== undefined) {
            this.summary = source.summary;
        }
        if (source["_summary"] !== undefined) {
            this._summary = new fhirModels.Element(source._summary);
        }
        if (source["supportingInfo"] !== undefined) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhirModels.Reference(x));
        }
    }
    /**
     * Factory function to create a ClinicalImpression from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ClinicalImpression(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClinicalImpression is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ClinicalImpression contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["subject"] === undefined) {
            missingElements.push("subject");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ClinicalImpression = ClinicalImpression;
/**
 * Code Values for the ClinicalImpression.status field
 */
var ClinicalImpressionStatusEnum;
(function (ClinicalImpressionStatusEnum) {
    ClinicalImpressionStatusEnum["IN_PROGRESS"] = "in-progress";
    ClinicalImpressionStatusEnum["COMPLETED"] = "completed";
    ClinicalImpressionStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(ClinicalImpressionStatusEnum = exports.ClinicalImpressionStatusEnum || (exports.ClinicalImpressionStatusEnum = {}));
//# sourceMappingURL=ClinicalImpression.js.map