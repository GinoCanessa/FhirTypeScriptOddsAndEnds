var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * One or more sets of investigations (signs, symptoms, etc.). The actual grouping of investigations varies greatly depending on the type and context of the assessment. These investigations may include data generated during the assessment process, or data previously generated and recorded that is pertinent to the outcomes.
 */
var ClinicalImpressionInvestigation = /** @class */ (function (_super) {
    __extends(ClinicalImpressionInvestigation, _super);
    /**
     * Default constructor for ClinicalImpressionInvestigation from an object that MAY NOT contain all required elements.
     */
    function ClinicalImpressionInvestigation(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["item"] !== undefined) {
            _this.item = source.item.map(function (x) { return new fhirModels.Reference(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a ClinicalImpressionInvestigation from an object that MUST contain all required elements.
     */
    ClinicalImpressionInvestigation.CreateStrict = function (source) {
        var dest = new ClinicalImpressionInvestigation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ClinicalImpressionInvestigation is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ClinicalImpressionInvestigation contains all required elements.
     */
    ClinicalImpressionInvestigation.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ClinicalImpressionInvestigation;
}(fhirModels.BackboneElement));
export { ClinicalImpressionInvestigation };
/**
 * Specific findings or diagnoses that were considered likely or relevant to ongoing treatment.
 */
var ClinicalImpressionFinding = /** @class */ (function (_super) {
    __extends(ClinicalImpressionFinding, _super);
    /**
     * Default constructor for ClinicalImpressionFinding from an object that MAY NOT contain all required elements.
     */
    function ClinicalImpressionFinding(source) {
        var _this = _super.call(this, source) || this;
        if (source["basis"] !== undefined) {
            _this.basis = source.basis;
        }
        if (source["_basis"] !== undefined) {
            _this._basis = new fhirModels.Element(source._basis);
        }
        if (source["itemCodeableConcept"] !== undefined) {
            _this.itemCodeableConcept = new fhirModels.CodeableConcept(source.itemCodeableConcept);
        }
        if (source["itemReference"] !== undefined) {
            _this.itemReference = new fhirModels.Reference(source.itemReference);
        }
        return _this;
    }
    /**
     * Factory function to create a ClinicalImpressionFinding from an object that MUST contain all required elements.
     */
    ClinicalImpressionFinding.CreateStrict = function (source) {
        var dest = new ClinicalImpressionFinding(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ClinicalImpressionFinding is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ClinicalImpressionFinding contains all required elements.
     */
    ClinicalImpressionFinding.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ClinicalImpressionFinding;
}(fhirModels.BackboneElement));
export { ClinicalImpressionFinding };
/**
 * A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score.
 */
var ClinicalImpression = /** @class */ (function (_super) {
    __extends(ClinicalImpression, _super);
    /**
     * Default constructor for ClinicalImpression from an object that MAY NOT contain all required elements.
     */
    function ClinicalImpression(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "ClinicalImpression";
        if ((source['resourceType'] !== "ClinicalImpression") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a ClinicalImpression';
        }
        if (source["assessor"] !== undefined) {
            _this.assessor = new fhirModels.Reference(source.assessor);
        }
        if (source["code"] !== undefined) {
            _this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["date"] !== undefined) {
            _this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            _this._date = new fhirModels.Element(source._date);
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["effectiveDateTime"] !== undefined) {
            _this.effectiveDateTime = source.effectiveDateTime;
        }
        if (source["_effectiveDateTime"] !== undefined) {
            _this._effectiveDateTime = new fhirModels.Element(source._effectiveDateTime);
        }
        if (source["effectivePeriod"] !== undefined) {
            _this.effectivePeriod = new fhirModels.Period(source.effectivePeriod);
        }
        if (source["encounter"] !== undefined) {
            _this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["finding"] !== undefined) {
            _this.finding = source.finding.map(function (x) { return new fhirModels.ClinicalImpressionFinding(x); });
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["investigation"] !== undefined) {
            _this.investigation = source.investigation.map(function (x) { return new fhirModels.ClinicalImpressionInvestigation(x); });
        }
        if (source["note"] !== undefined) {
            _this.note = source.note.map(function (x) { return new fhirModels.Annotation(x); });
        }
        if (source["previous"] !== undefined) {
            _this.previous = new fhirModels.Reference(source.previous);
        }
        if (source["problem"] !== undefined) {
            _this.problem = source.problem.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["prognosisCodeableConcept"] !== undefined) {
            _this.prognosisCodeableConcept = source.prognosisCodeableConcept.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["prognosisReference"] !== undefined) {
            _this.prognosisReference = source.prognosisReference.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["protocol"] !== undefined) {
            _this.protocol = source.protocol.map(function (x) { return (x); });
        }
        if (source["_protocol"] !== undefined) {
            _this._protocol = source._protocol.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["status"] !== undefined) {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["statusReason"] !== undefined) {
            _this.statusReason = new fhirModels.CodeableConcept(source.statusReason);
        }
        if (source["subject"] !== undefined) {
            _this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["summary"] !== undefined) {
            _this.summary = source.summary;
        }
        if (source["_summary"] !== undefined) {
            _this._summary = new fhirModels.Element(source._summary);
        }
        if (source["supportingInfo"] !== undefined) {
            _this.supportingInfo = source.supportingInfo.map(function (x) { return new fhirModels.Reference(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a ClinicalImpression from an object that MUST contain all required elements.
     */
    ClinicalImpression.CreateStrict = function (source) {
        var dest = new ClinicalImpression(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ClinicalImpression is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ClinicalImpression contains all required elements.
     */
    ClinicalImpression.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["subject"] === undefined) {
            missingElements.push("subject");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ClinicalImpression;
}(fhirModels.DomainResource));
export { ClinicalImpression };
/**
 * Code Values for the ClinicalImpression.status field
 */
export var ClinicalImpressionStatusEnum;
(function (ClinicalImpressionStatusEnum) {
    ClinicalImpressionStatusEnum["IN_PROGRESS"] = "in-progress";
    ClinicalImpressionStatusEnum["COMPLETED"] = "completed";
    ClinicalImpressionStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(ClinicalImpressionStatusEnum || (ClinicalImpressionStatusEnum = {}));
