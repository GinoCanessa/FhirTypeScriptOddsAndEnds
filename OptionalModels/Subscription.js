var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * Details where to send notifications when resources are received that meet the criteria.
 */
var SubscriptionChannel = /** @class */ (function (_super) {
    __extends(SubscriptionChannel, _super);
    /**
     * Default constructor for SubscriptionChannel from an object that MAY NOT contain all required elements.
     */
    function SubscriptionChannel(source) {
        var _this = _super.call(this, source) || this;
        if (source["endpoint"] !== undefined) {
            _this.endpoint = source.endpoint;
        }
        if (source["_endpoint"] !== undefined) {
            _this._endpoint = new fhirModels.Element(source._endpoint);
        }
        if (source["header"] !== undefined) {
            _this.header = source.header.map(function (x) { return (x); });
        }
        if (source["_header"] !== undefined) {
            _this._header = source._header.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["payload"] !== undefined) {
            _this.payload = source.payload;
        }
        if (source["_payload"] !== undefined) {
            _this._payload = new fhirModels.Element(source._payload);
        }
        if (source["type"] !== undefined) {
            _this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            _this._type = new fhirModels.Element(source._type);
        }
        return _this;
    }
    /**
     * Factory function to create a SubscriptionChannel from an object that MUST contain all required elements.
     */
    SubscriptionChannel.CreateStrict = function (source) {
        var dest = new SubscriptionChannel(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "SubscriptionChannel is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current SubscriptionChannel contains all required elements.
     */
    SubscriptionChannel.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return SubscriptionChannel;
}(fhirModels.BackboneElement));
export { SubscriptionChannel };
/**
 * Code Values for the Subscription.channel.type field
 */
export var SubscriptionChannelTypeEnum;
(function (SubscriptionChannelTypeEnum) {
    SubscriptionChannelTypeEnum["REST_HOOK"] = "rest-hook";
    SubscriptionChannelTypeEnum["WEBSOCKET"] = "websocket";
    SubscriptionChannelTypeEnum["EMAIL"] = "email";
    SubscriptionChannelTypeEnum["SMS"] = "sms";
    SubscriptionChannelTypeEnum["MESSAGE"] = "message";
})(SubscriptionChannelTypeEnum || (SubscriptionChannelTypeEnum = {}));
/**
 * The subscription resource is used to define a push-based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system can take an appropriate action.
 */
var Subscription = /** @class */ (function (_super) {
    __extends(Subscription, _super);
    /**
     * Default constructor for Subscription from an object that MAY NOT contain all required elements.
     */
    function Subscription(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "Subscription";
        if ((source['resourceType'] !== "Subscription") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Subscription';
        }
        if (source["channel"] !== undefined) {
            _this.channel = new fhirModels.SubscriptionChannel(source.channel);
        }
        if (source["contact"] !== undefined) {
            _this.contact = source.contact.map(function (x) { return new fhirModels.ContactPoint(x); });
        }
        if (source["criteria"] !== undefined) {
            _this.criteria = source.criteria;
        }
        if (source["_criteria"] !== undefined) {
            _this._criteria = new fhirModels.Element(source._criteria);
        }
        if (source["end"] !== undefined) {
            _this.end = source.end;
        }
        if (source["_end"] !== undefined) {
            _this._end = new fhirModels.Element(source._end);
        }
        if (source["error"] !== undefined) {
            _this.error = source.error;
        }
        if (source["_error"] !== undefined) {
            _this._error = new fhirModels.Element(source._error);
        }
        if (source["reason"] !== undefined) {
            _this.reason = source.reason;
        }
        if (source["_reason"] !== undefined) {
            _this._reason = new fhirModels.Element(source._reason);
        }
        if (source["status"] !== undefined) {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        return _this;
    }
    /**
     * Factory function to create a Subscription from an object that MUST contain all required elements.
     */
    Subscription.CreateStrict = function (source) {
        var dest = new Subscription(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "Subscription is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current Subscription contains all required elements.
     */
    Subscription.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["channel"] === undefined) {
            missingElements.push("channel");
        }
        if (this["criteria"] === undefined) {
            missingElements.push("criteria");
        }
        if (this["reason"] === undefined) {
            missingElements.push("reason");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return Subscription;
}(fhirModels.DomainResource));
export { Subscription };
/**
 * Code Values for the Subscription.status field
 */
export var SubscriptionStatusEnum;
(function (SubscriptionStatusEnum) {
    SubscriptionStatusEnum["REQUESTED"] = "requested";
    SubscriptionStatusEnum["ACTIVE"] = "active";
    SubscriptionStatusEnum["ERROR"] = "error";
    SubscriptionStatusEnum["OFF"] = "off";
})(SubscriptionStatusEnum || (SubscriptionStatusEnum = {}));
