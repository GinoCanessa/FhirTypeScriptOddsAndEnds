// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels'
import * as fhirInterfaces from '../optionalinterfaces'
/**
 * Indicates who performed the immunization event.
 */
export class ImmunizationPerformer extends fhirModels.BackboneElement implements fhirInterfaces.IImmunizationPerformer {
  /**
   * When the individual practitioner who performed the action is known, it is best to send.
   */
  actor?: fhirModels.Reference|undefined;
  /**
   * Describes the type of performance (e.g. ordering provider, administering provider, etc.).
   */
  function?: fhirModels.CodeableConcept|undefined;
  /**
   * Default constructor for ImmunizationPerformer from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.IImmunizationPerformer>) {
    super(source);
    if (source["actor"] !== undefined) { this.actor = new fhirModels.Reference(source.actor); }
    if (source["function"] !== undefined) { this.function = new fhirModels.CodeableConcept(source.function); }
  }
  /**
   * Factory function to create a ImmunizationPerformer from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.IImmunizationPerformer):ImmunizationPerformer {
    var dest:ImmunizationPerformer = new ImmunizationPerformer(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `ImmunizationPerformer is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current ImmunizationPerformer contains all required elements.
   */
  checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["actor"] === undefined) { missingElements.push("actor"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
/**
 * Educational material presented to the patient (or guardian) at the time of vaccine administration.
 */
export class ImmunizationEducation extends fhirModels.BackboneElement implements fhirInterfaces.IImmunizationEducation {
  /**
   * Identifier of the material presented to the patient.
   */
  documentType?: string|undefined;
  _documentType?: fhirModels.Element|undefined;
  /**
   * Date the educational material was given to the patient.
   */
  presentationDate?: string|undefined;
  _presentationDate?: fhirModels.Element|undefined;
  /**
   * Date the educational material was published.
   */
  publicationDate?: string|undefined;
  _publicationDate?: fhirModels.Element|undefined;
  /**
   * Reference pointer to the educational material given to the patient if the information was on line.
   */
  reference?: string|undefined;
  _reference?: fhirModels.Element|undefined;
  /**
   * Default constructor for ImmunizationEducation from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.IImmunizationEducation>) {
    super(source);
    if (source["documentType"] !== undefined) { this.documentType = source.documentType; }
    if (source["_documentType"] !== undefined) { this._documentType = new fhirModels.Element(source._documentType); }
    if (source["presentationDate"] !== undefined) { this.presentationDate = source.presentationDate; }
    if (source["_presentationDate"] !== undefined) { this._presentationDate = new fhirModels.Element(source._presentationDate); }
    if (source["publicationDate"] !== undefined) { this.publicationDate = source.publicationDate; }
    if (source["_publicationDate"] !== undefined) { this._publicationDate = new fhirModels.Element(source._publicationDate); }
    if (source["reference"] !== undefined) { this.reference = source.reference; }
    if (source["_reference"] !== undefined) { this._reference = new fhirModels.Element(source._reference); }
  }
  /**
   * Factory function to create a ImmunizationEducation from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.IImmunizationEducation):ImmunizationEducation {
    var dest:ImmunizationEducation = new ImmunizationEducation(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `ImmunizationEducation is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current ImmunizationEducation contains all required elements.
   */
  checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
/**
 * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
 */
export class ImmunizationReaction extends fhirModels.BackboneElement implements fhirInterfaces.IImmunizationReaction {
  /**
   * Date of reaction to the immunization.
   */
  date?: string|undefined;
  _date?: fhirModels.Element|undefined;
  /**
   * Details of the reaction.
   */
  detail?: fhirModels.Reference|undefined;
  /**
   * Self-reported indicator.
   */
  reported?: boolean|undefined;
  _reported?: fhirModels.Element|undefined;
  /**
   * Default constructor for ImmunizationReaction from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.IImmunizationReaction>) {
    super(source);
    if (source["date"] !== undefined) { this.date = source.date; }
    if (source["_date"] !== undefined) { this._date = new fhirModels.Element(source._date); }
    if (source["detail"] !== undefined) { this.detail = new fhirModels.Reference(source.detail); }
    if (source["reported"] !== undefined) { this.reported = source.reported; }
    if (source["_reported"] !== undefined) { this._reported = new fhirModels.Element(source._reported); }
  }
  /**
   * Factory function to create a ImmunizationReaction from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.IImmunizationReaction):ImmunizationReaction {
    var dest:ImmunizationReaction = new ImmunizationReaction(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `ImmunizationReaction is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current ImmunizationReaction contains all required elements.
   */
  checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
/**
 * The protocol (set of recommendations) being followed by the provider who administered the dose.
 */
export class ImmunizationProtocolApplied extends fhirModels.BackboneElement implements fhirInterfaces.IImmunizationProtocolApplied {
  /**
   * Indicates the authority who published the protocol (e.g. ACIP) that is being followed.
   */
  authority?: fhirModels.Reference|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  doseNumberPositiveInt?: number|undefined;
  _doseNumberPositiveInt?: fhirModels.Element|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  doseNumberString?: string|undefined;
  _doseNumberString?: fhirModels.Element|undefined;
  /**
   * One possible path to achieve presumed immunity against a disease - within the context of an authority.
   */
  series?: string|undefined;
  _series?: fhirModels.Element|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  seriesDosesPositiveInt?: number|undefined;
  _seriesDosesPositiveInt?: fhirModels.Element|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  seriesDosesString?: string|undefined;
  _seriesDosesString?: fhirModels.Element|undefined;
  /**
   * The vaccine preventable disease the dose is being administered against.
   */
  targetDisease?: fhirModels.CodeableConcept[]|undefined;
  /**
   * Default constructor for ImmunizationProtocolApplied from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.IImmunizationProtocolApplied>) {
    super(source);
    if (source["authority"] !== undefined) { this.authority = new fhirModels.Reference(source.authority); }
    if (source["doseNumberPositiveInt"] !== undefined) { this.doseNumberPositiveInt = source.doseNumberPositiveInt; }
    if (source["_doseNumberPositiveInt"] !== undefined) { this._doseNumberPositiveInt = new fhirModels.Element(source._doseNumberPositiveInt); }
    if (source["doseNumberString"] !== undefined) { this.doseNumberString = source.doseNumberString; }
    if (source["_doseNumberString"] !== undefined) { this._doseNumberString = new fhirModels.Element(source._doseNumberString); }
    if (source["series"] !== undefined) { this.series = source.series; }
    if (source["_series"] !== undefined) { this._series = new fhirModels.Element(source._series); }
    if (source["seriesDosesPositiveInt"] !== undefined) { this.seriesDosesPositiveInt = source.seriesDosesPositiveInt; }
    if (source["_seriesDosesPositiveInt"] !== undefined) { this._seriesDosesPositiveInt = new fhirModels.Element(source._seriesDosesPositiveInt); }
    if (source["seriesDosesString"] !== undefined) { this.seriesDosesString = source.seriesDosesString; }
    if (source["_seriesDosesString"] !== undefined) { this._seriesDosesString = new fhirModels.Element(source._seriesDosesString); }
    if (source["targetDisease"] !== undefined) { this.targetDisease = source.targetDisease.map((x) => new fhirModels.CodeableConcept(x)); }
  }
  /**
   * Factory function to create a ImmunizationProtocolApplied from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.IImmunizationProtocolApplied):ImmunizationProtocolApplied {
    var dest:ImmunizationProtocolApplied = new ImmunizationProtocolApplied(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `ImmunizationProtocolApplied is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current ImmunizationProtocolApplied contains all required elements.
   */
  checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
/**
 * Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
 */
export class Immunization extends fhirModels.DomainResource implements fhirInterfaces.IImmunization {
  /**
   * Resource Type Name
   */
  readonly resourceType = "Immunization";
  /**
   * The quantity of vaccine product that was administered.
   */
  doseQuantity?: fhirModels.Quantity|undefined;
  /**
   * Educational material presented to the patient (or guardian) at the time of vaccine administration.
   */
  education?: fhirModels.ImmunizationEducation[]|undefined;
  /**
   * The visit or admission or other contact between patient and health care provider the immunization was performed as part of.
   */
  encounter?: fhirModels.Reference|undefined;
  /**
   * Date vaccine batch expires.
   */
  expirationDate?: string|undefined;
  _expirationDate?: fhirModels.Element|undefined;
  /**
   * Indicates the source of the vaccine actually administered. This may be different than the patient eligibility (e.g. the patient may be eligible for a publically purchased vaccine but due to inventory issues, vaccine purchased with private funds was actually administered).
   */
  fundingSource?: fhirModels.CodeableConcept|undefined;
  /**
   * A unique identifier assigned to this immunization record.
   */
  identifier?: fhirModels.Identifier[]|undefined;
  /**
   * Typically, the recognition of the dose being sub-potent is retrospective, after the administration (ex. notification of a manufacturer recall after administration). However, in the case of a partial administration (the patient moves unexpectedly and only some of the dose is actually administered), subpotency may be recognized immediately, but it is still important to record the event.
   */
  isSubpotent?: boolean|undefined;
  _isSubpotent?: fhirModels.Element|undefined;
  /**
   * The service delivery location where the vaccine administration occurred.
   */
  location?: fhirModels.Reference|undefined;
  /**
   * Lot number of the  vaccine product.
   */
  lotNumber?: string|undefined;
  _lotNumber?: fhirModels.Element|undefined;
  /**
   * Name of vaccine manufacturer.
   */
  manufacturer?: fhirModels.Reference|undefined;
  /**
   * Extra information about the immunization that is not conveyed by the other attributes.
   */
  note?: fhirModels.Annotation[]|undefined;
  /**
   * When immunizations are given a specific date and time should always be known.   When immunizations are patient reported, a specific date might not be known.  Although partial dates are allowed, an adult patient might not be able to recall the year a childhood immunization was given. An exact date is always preferable, but the use of the String data type is acceptable when an exact date is not known. A small number of vaccines (e.g. live oral typhoid vaccine) are given as a series of patient self-administered dose over a span of time. In cases like this, often, only the first dose (typically a provider supervised dose) is recorded with the occurrence indicating the date/time of the first dose.
   */
  occurrenceDateTime?: string|undefined;
  _occurrenceDateTime?: fhirModels.Element|undefined;
  /**
   * When immunizations are given a specific date and time should always be known.   When immunizations are patient reported, a specific date might not be known.  Although partial dates are allowed, an adult patient might not be able to recall the year a childhood immunization was given. An exact date is always preferable, but the use of the String data type is acceptable when an exact date is not known. A small number of vaccines (e.g. live oral typhoid vaccine) are given as a series of patient self-administered dose over a span of time. In cases like this, often, only the first dose (typically a provider supervised dose) is recorded with the occurrence indicating the date/time of the first dose.
   */
  occurrenceString?: string|undefined;
  _occurrenceString?: fhirModels.Element|undefined;
  /**
   * The patient who either received or did not receive the immunization.
   */
  patient?: fhirModels.Reference|undefined;
  /**
   * Indicates who performed the immunization event.
   */
  performer?: fhirModels.ImmunizationPerformer[]|undefined;
  /**
   * Reflects the “reliability” of the content.
   */
  primarySource?: boolean|undefined;
  _primarySource?: fhirModels.Element|undefined;
  /**
   * Indicates a patient's eligibility for a funding program.
   */
  programEligibility?: fhirModels.CodeableConcept[]|undefined;
  /**
   * The protocol (set of recommendations) being followed by the provider who administered the dose.
   */
  protocolApplied?: fhirModels.ImmunizationProtocolApplied[]|undefined;
  /**
   * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
   */
  reaction?: fhirModels.ImmunizationReaction[]|undefined;
  /**
   * Reasons why the vaccine was administered.
   */
  reasonCode?: fhirModels.CodeableConcept[]|undefined;
  /**
   * Condition, Observation or DiagnosticReport that supports why the immunization was administered.
   */
  reasonReference?: fhirModels.Reference[]|undefined;
  /**
   * The date the occurrence of the immunization was first captured in the record - potentially significantly after the occurrence of the event.
   */
  recorded?: string|undefined;
  _recorded?: fhirModels.Element|undefined;
  /**
   * Should not be populated if primarySource = True, not required even if primarySource = False.
   */
  reportOrigin?: fhirModels.CodeableConcept|undefined;
  /**
   * The path by which the vaccine product is taken into the body.
   */
  route?: fhirModels.CodeableConcept|undefined;
  /**
   * Body site where vaccine was administered.
   */
  site?: fhirModels.CodeableConcept|undefined;
  /**
   * Will generally be set to show that the immunization has been completed or not done.  This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status?: ImmunizationStatusEnum|undefined;
  _status?: fhirModels.Element|undefined;
  /**
   * This is generally only used for the status of "not-done". The reason for performing the immunization event is captured in reasonCode, not here.
   */
  statusReason?: fhirModels.CodeableConcept|undefined;
  /**
   * Reason why a dose is considered to be subpotent.
   */
  subpotentReason?: fhirModels.CodeableConcept[]|undefined;
  /**
   * Vaccine that was administered or was to be administered.
   */
  vaccineCode?: fhirModels.CodeableConcept|undefined;
  /**
   * Default constructor for Immunization from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.IImmunization>) {
    super(source);
    if ((source['resourceType'] !== "Immunization") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a Immunization'; }
    if (source["doseQuantity"] !== undefined) { this.doseQuantity = new fhirModels.Quantity(source.doseQuantity); }
    if (source["education"] !== undefined) { this.education = source.education.map((x) => new fhirModels.ImmunizationEducation(x)); }
    if (source["encounter"] !== undefined) { this.encounter = new fhirModels.Reference(source.encounter); }
    if (source["expirationDate"] !== undefined) { this.expirationDate = source.expirationDate; }
    if (source["_expirationDate"] !== undefined) { this._expirationDate = new fhirModels.Element(source._expirationDate); }
    if (source["fundingSource"] !== undefined) { this.fundingSource = new fhirModels.CodeableConcept(source.fundingSource); }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x)); }
    if (source["isSubpotent"] !== undefined) { this.isSubpotent = source.isSubpotent; }
    if (source["_isSubpotent"] !== undefined) { this._isSubpotent = new fhirModels.Element(source._isSubpotent); }
    if (source["location"] !== undefined) { this.location = new fhirModels.Reference(source.location); }
    if (source["lotNumber"] !== undefined) { this.lotNumber = source.lotNumber; }
    if (source["_lotNumber"] !== undefined) { this._lotNumber = new fhirModels.Element(source._lotNumber); }
    if (source["manufacturer"] !== undefined) { this.manufacturer = new fhirModels.Reference(source.manufacturer); }
    if (source["note"] !== undefined) { this.note = source.note.map((x) => new fhirModels.Annotation(x)); }
    if (source["occurrenceDateTime"] !== undefined) { this.occurrenceDateTime = source.occurrenceDateTime; }
    if (source["_occurrenceDateTime"] !== undefined) { this._occurrenceDateTime = new fhirModels.Element(source._occurrenceDateTime); }
    if (source["occurrenceString"] !== undefined) { this.occurrenceString = source.occurrenceString; }
    if (source["_occurrenceString"] !== undefined) { this._occurrenceString = new fhirModels.Element(source._occurrenceString); }
    if (source["patient"] !== undefined) { this.patient = new fhirModels.Reference(source.patient); }
    if (source["performer"] !== undefined) { this.performer = source.performer.map((x) => new fhirModels.ImmunizationPerformer(x)); }
    if (source["primarySource"] !== undefined) { this.primarySource = source.primarySource; }
    if (source["_primarySource"] !== undefined) { this._primarySource = new fhirModels.Element(source._primarySource); }
    if (source["programEligibility"] !== undefined) { this.programEligibility = source.programEligibility.map((x) => new fhirModels.CodeableConcept(x)); }
    if (source["protocolApplied"] !== undefined) { this.protocolApplied = source.protocolApplied.map((x) => new fhirModels.ImmunizationProtocolApplied(x)); }
    if (source["reaction"] !== undefined) { this.reaction = source.reaction.map((x) => new fhirModels.ImmunizationReaction(x)); }
    if (source["reasonCode"] !== undefined) { this.reasonCode = source.reasonCode.map((x) => new fhirModels.CodeableConcept(x)); }
    if (source["reasonReference"] !== undefined) { this.reasonReference = source.reasonReference.map((x) => new fhirModels.Reference(x)); }
    if (source["recorded"] !== undefined) { this.recorded = source.recorded; }
    if (source["_recorded"] !== undefined) { this._recorded = new fhirModels.Element(source._recorded); }
    if (source["reportOrigin"] !== undefined) { this.reportOrigin = new fhirModels.CodeableConcept(source.reportOrigin); }
    if (source["route"] !== undefined) { this.route = new fhirModels.CodeableConcept(source.route); }
    if (source["site"] !== undefined) { this.site = new fhirModels.CodeableConcept(source.site); }
    if (source["status"] !== undefined) { this.status = source.status; }
    if (source["_status"] !== undefined) { this._status = new fhirModels.Element(source._status); }
    if (source["statusReason"] !== undefined) { this.statusReason = new fhirModels.CodeableConcept(source.statusReason); }
    if (source["subpotentReason"] !== undefined) { this.subpotentReason = source.subpotentReason.map((x) => new fhirModels.CodeableConcept(x)); }
    if (source["vaccineCode"] !== undefined) { this.vaccineCode = new fhirModels.CodeableConcept(source.vaccineCode); }
  }
  /**
   * Factory function to create a Immunization from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.IImmunization):Immunization {
    var dest:Immunization = new Immunization(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `Immunization is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current Immunization contains all required elements.
   */
  checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["patient"] === undefined) { missingElements.push("patient"); }
    if (this["status"] === undefined) { missingElements.push("status"); }
    if (this["vaccineCode"] === undefined) { missingElements.push("vaccineCode"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
/**
 * Code Values for the Immunization.status field
 */
export enum ImmunizationStatusEnum {
  COMPLETED = "completed",
  ENTERED_IN_ERROR = "entered-in-error",
  NOT_DONE = "not-done",
}
