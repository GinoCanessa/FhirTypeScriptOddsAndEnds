"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProdCharacteristic = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available.
 */
class ProdCharacteristic extends fhirModels.BackboneElement {
    /**
     * Default constructor for ProdCharacteristic from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["color"] !== undefined) {
            this.color = source.color.map((x) => (x));
        }
        if (source["_color"] !== undefined) {
            this._color = source._color.map((x) => new fhirModels.Element(x));
        }
        if (source["depth"] !== undefined) {
            this.depth = new fhirModels.Quantity(source.depth);
        }
        if (source["externalDiameter"] !== undefined) {
            this.externalDiameter = new fhirModels.Quantity(source.externalDiameter);
        }
        if (source["height"] !== undefined) {
            this.height = new fhirModels.Quantity(source.height);
        }
        if (source["image"] !== undefined) {
            this.image = source.image.map((x) => new fhirModels.Attachment(x));
        }
        if (source["imprint"] !== undefined) {
            this.imprint = source.imprint.map((x) => (x));
        }
        if (source["_imprint"] !== undefined) {
            this._imprint = source._imprint.map((x) => new fhirModels.Element(x));
        }
        if (source["nominalVolume"] !== undefined) {
            this.nominalVolume = new fhirModels.Quantity(source.nominalVolume);
        }
        if (source["scoring"] !== undefined) {
            this.scoring = new fhirModels.CodeableConcept(source.scoring);
        }
        if (source["shape"] !== undefined) {
            this.shape = source.shape;
        }
        if (source["_shape"] !== undefined) {
            this._shape = new fhirModels.Element(source._shape);
        }
        if (source["weight"] !== undefined) {
            this.weight = new fhirModels.Quantity(source.weight);
        }
        if (source["width"] !== undefined) {
            this.width = new fhirModels.Quantity(source.width);
        }
    }
    /**
     * Factory function to create a ProdCharacteristic from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ProdCharacteristic(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ProdCharacteristic is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ProdCharacteristic contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ProdCharacteristic = ProdCharacteristic;
//# sourceMappingURL=ProdCharacteristic.js.map