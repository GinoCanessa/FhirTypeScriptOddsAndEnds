var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available.
 */
var ProdCharacteristic = /** @class */ (function (_super) {
    __extends(ProdCharacteristic, _super);
    /**
     * Default constructor for ProdCharacteristic from an object that MAY NOT contain all required elements.
     */
    function ProdCharacteristic(source) {
        var _this = _super.call(this, source) || this;
        if (source["color"] !== undefined) {
            _this.color = source.color.map(function (x) { return (x); });
        }
        if (source["_color"] !== undefined) {
            _this._color = source._color.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["depth"] !== undefined) {
            _this.depth = new fhirModels.Quantity(source.depth);
        }
        if (source["externalDiameter"] !== undefined) {
            _this.externalDiameter = new fhirModels.Quantity(source.externalDiameter);
        }
        if (source["height"] !== undefined) {
            _this.height = new fhirModels.Quantity(source.height);
        }
        if (source["image"] !== undefined) {
            _this.image = source.image.map(function (x) { return new fhirModels.Attachment(x); });
        }
        if (source["imprint"] !== undefined) {
            _this.imprint = source.imprint.map(function (x) { return (x); });
        }
        if (source["_imprint"] !== undefined) {
            _this._imprint = source._imprint.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["nominalVolume"] !== undefined) {
            _this.nominalVolume = new fhirModels.Quantity(source.nominalVolume);
        }
        if (source["scoring"] !== undefined) {
            _this.scoring = new fhirModels.CodeableConcept(source.scoring);
        }
        if (source["shape"] !== undefined) {
            _this.shape = source.shape;
        }
        if (source["_shape"] !== undefined) {
            _this._shape = new fhirModels.Element(source._shape);
        }
        if (source["weight"] !== undefined) {
            _this.weight = new fhirModels.Quantity(source.weight);
        }
        if (source["width"] !== undefined) {
            _this.width = new fhirModels.Quantity(source.width);
        }
        return _this;
    }
    /**
     * Factory function to create a ProdCharacteristic from an object that MUST contain all required elements.
     */
    ProdCharacteristic.CreateStrict = function (source) {
        var dest = new ProdCharacteristic(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ProdCharacteristic is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ProdCharacteristic contains all required elements.
     */
    ProdCharacteristic.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ProdCharacteristic;
}(fhirModels.BackboneElement));
export { ProdCharacteristic };
