"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DetectedIssueStatusEnum = exports.DetectedIssueSeverityEnum = exports.DetectedIssue = exports.DetectedIssueMitigation = exports.DetectedIssueEvidence = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * Supporting evidence or manifestations that provide the basis for identifying the detected issue such as a GuidanceResponse or MeasureReport.
 */
class DetectedIssueEvidence extends fhirModels.BackboneElement {
    /**
     * Default constructor for DetectedIssueEvidence from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = source.code.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["detail"] !== undefined) {
            this.detail = source.detail.map((x) => new fhirModels.Reference(x));
        }
    }
    /**
     * Factory function to create a DetectedIssueEvidence from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new DetectedIssueEvidence(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `DetectedIssueEvidence is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current DetectedIssueEvidence contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.DetectedIssueEvidence = DetectedIssueEvidence;
/**
 * Indicates an action that has been taken or is committed to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
 */
class DetectedIssueMitigation extends fhirModels.BackboneElement {
    /**
     * Default constructor for DetectedIssueMitigation from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["action"] !== undefined) {
            this.action = new fhirModels.CodeableConcept(source.action);
        }
        if (source["author"] !== undefined) {
            this.author = new fhirModels.Reference(source.author);
        }
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
    }
    /**
     * Factory function to create a DetectedIssueMitigation from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new DetectedIssueMitigation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `DetectedIssueMitigation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current DetectedIssueMitigation contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["action"] === undefined) {
            missingElements.push("action");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.DetectedIssueMitigation = DetectedIssueMitigation;
/**
 * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.
 */
class DetectedIssue extends fhirModels.DomainResource {
    /**
     * Default constructor for DetectedIssue from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "DetectedIssue";
        if ((source['resourceType'] !== "DetectedIssue") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a DetectedIssue';
        }
        if (source["author"] !== undefined) {
            this.author = new fhirModels.Reference(source.author);
        }
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["detail"] !== undefined) {
            this.detail = source.detail;
        }
        if (source["_detail"] !== undefined) {
            this._detail = new fhirModels.Element(source._detail);
        }
        if (source["evidence"] !== undefined) {
            this.evidence = source.evidence.map((x) => new fhirModels.DetectedIssueEvidence(x));
        }
        if (source["identifiedDateTime"] !== undefined) {
            this.identifiedDateTime = source.identifiedDateTime;
        }
        if (source["_identifiedDateTime"] !== undefined) {
            this._identifiedDateTime = new fhirModels.Element(source._identifiedDateTime);
        }
        if (source["identifiedPeriod"] !== undefined) {
            this.identifiedPeriod = new fhirModels.Period(source.identifiedPeriod);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["implicated"] !== undefined) {
            this.implicated = source.implicated.map((x) => new fhirModels.Reference(x));
        }
        if (source["mitigation"] !== undefined) {
            this.mitigation = source.mitigation.map((x) => new fhirModels.DetectedIssueMitigation(x));
        }
        if (source["patient"] !== undefined) {
            this.patient = new fhirModels.Reference(source.patient);
        }
        if (source["reference"] !== undefined) {
            this.reference = source.reference;
        }
        if (source["_reference"] !== undefined) {
            this._reference = new fhirModels.Element(source._reference);
        }
        if (source["severity"] !== undefined) {
            this.severity = source.severity;
        }
        if (source["_severity"] !== undefined) {
            this._severity = new fhirModels.Element(source._severity);
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
    }
    /**
     * Factory function to create a DetectedIssue from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new DetectedIssue(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `DetectedIssue is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current DetectedIssue contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.DetectedIssue = DetectedIssue;
/**
 * Code Values for the DetectedIssue.severity field
 */
var DetectedIssueSeverityEnum;
(function (DetectedIssueSeverityEnum) {
    DetectedIssueSeverityEnum["HIGH"] = "high";
    DetectedIssueSeverityEnum["MODERATE"] = "moderate";
    DetectedIssueSeverityEnum["LOW"] = "low";
})(DetectedIssueSeverityEnum = exports.DetectedIssueSeverityEnum || (exports.DetectedIssueSeverityEnum = {}));
/**
 * Code Values for the DetectedIssue.status field
 */
var DetectedIssueStatusEnum;
(function (DetectedIssueStatusEnum) {
    DetectedIssueStatusEnum["REGISTERED"] = "registered";
    DetectedIssueStatusEnum["PRELIMINARY"] = "preliminary";
    DetectedIssueStatusEnum["FINAL"] = "final";
    DetectedIssueStatusEnum["AMENDED"] = "amended";
    DetectedIssueStatusEnum["CORRECTED"] = "corrected";
    DetectedIssueStatusEnum["CANCELLED"] = "cancelled";
    DetectedIssueStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    DetectedIssueStatusEnum["UNKNOWN"] = "unknown";
})(DetectedIssueStatusEnum = exports.DetectedIssueStatusEnum || (exports.DetectedIssueStatusEnum = {}));
//# sourceMappingURL=DetectedIssue.js.map