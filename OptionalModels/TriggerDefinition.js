"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TriggerDefinitionTypeEnum = exports.TriggerDefinition = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.
 */
class TriggerDefinition extends fhirModels.Element {
    /**
     * Default constructor for TriggerDefinition from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["condition"] !== undefined) {
            this.condition = new fhirModels.Expression(source.condition);
        }
        if (source["data"] !== undefined) {
            this.data = source.data.map((x) => new fhirModels.DataRequirement(x));
        }
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["timingTiming"] !== undefined) {
            this.timingTiming = new fhirModels.Timing(source.timingTiming);
        }
        if (source["timingReference"] !== undefined) {
            this.timingReference = new fhirModels.Reference(source.timingReference);
        }
        if (source["timingDate"] !== undefined) {
            this.timingDate = source.timingDate;
        }
        if (source["_timingDate"] !== undefined) {
            this._timingDate = new fhirModels.Element(source._timingDate);
        }
        if (source["timingDateTime"] !== undefined) {
            this.timingDateTime = source.timingDateTime;
        }
        if (source["_timingDateTime"] !== undefined) {
            this._timingDateTime = new fhirModels.Element(source._timingDateTime);
        }
        if (source["type"] !== undefined) {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
    }
    /**
     * Factory function to create a TriggerDefinition from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new TriggerDefinition(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `TriggerDefinition is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current TriggerDefinition contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.TriggerDefinition = TriggerDefinition;
/**
 * Code Values for the TriggerDefinition.type field
 */
var TriggerDefinitionTypeEnum;
(function (TriggerDefinitionTypeEnum) {
    TriggerDefinitionTypeEnum["NAMED_EVENT"] = "named-event";
    TriggerDefinitionTypeEnum["PERIODIC"] = "periodic";
    TriggerDefinitionTypeEnum["DATA_CHANGED"] = "data-changed";
    TriggerDefinitionTypeEnum["DATA_ADDED"] = "data-added";
    TriggerDefinitionTypeEnum["DATA_MODIFIED"] = "data-modified";
    TriggerDefinitionTypeEnum["DATA_REMOVED"] = "data-removed";
    TriggerDefinitionTypeEnum["DATA_ACCESSED"] = "data-accessed";
    TriggerDefinitionTypeEnum["DATA_ACCESS_ENDED"] = "data-access-ended";
})(TriggerDefinitionTypeEnum = exports.TriggerDefinitionTypeEnum || (exports.TriggerDefinitionTypeEnum = {}));
//# sourceMappingURL=TriggerDefinition.js.map