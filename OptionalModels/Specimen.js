var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * Details concerning the specimen collection.
 */
var SpecimenCollection = /** @class */ (function (_super) {
    __extends(SpecimenCollection, _super);
    /**
     * Default constructor for SpecimenCollection from an object that MAY NOT contain all required elements.
     */
    function SpecimenCollection(source) {
        var _this = _super.call(this, source) || this;
        if (source["bodySite"] !== undefined) {
            _this.bodySite = new fhirModels.CodeableConcept(source.bodySite);
        }
        if (source["collectedDateTime"] !== undefined) {
            _this.collectedDateTime = source.collectedDateTime;
        }
        if (source["_collectedDateTime"] !== undefined) {
            _this._collectedDateTime = new fhirModels.Element(source._collectedDateTime);
        }
        if (source["collectedPeriod"] !== undefined) {
            _this.collectedPeriod = new fhirModels.Period(source.collectedPeriod);
        }
        if (source["collector"] !== undefined) {
            _this.collector = new fhirModels.Reference(source.collector);
        }
        if (source["duration"] !== undefined) {
            _this.duration = new fhirModels.Duration(source.duration);
        }
        if (source["fastingStatusCodeableConcept"] !== undefined) {
            _this.fastingStatusCodeableConcept = new fhirModels.CodeableConcept(source.fastingStatusCodeableConcept);
        }
        if (source["fastingStatusDuration"] !== undefined) {
            _this.fastingStatusDuration = new fhirModels.Duration(source.fastingStatusDuration);
        }
        if (source["method"] !== undefined) {
            _this.method = new fhirModels.CodeableConcept(source.method);
        }
        if (source["quantity"] !== undefined) {
            _this.quantity = new fhirModels.Quantity(source.quantity);
        }
        return _this;
    }
    /**
     * Factory function to create a SpecimenCollection from an object that MUST contain all required elements.
     */
    SpecimenCollection.CreateStrict = function (source) {
        var dest = new SpecimenCollection(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "SpecimenCollection is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current SpecimenCollection contains all required elements.
     */
    SpecimenCollection.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return SpecimenCollection;
}(fhirModels.BackboneElement));
export { SpecimenCollection };
/**
 * Details concerning processing and processing steps for the specimen.
 */
var SpecimenProcessing = /** @class */ (function (_super) {
    __extends(SpecimenProcessing, _super);
    /**
     * Default constructor for SpecimenProcessing from an object that MAY NOT contain all required elements.
     */
    function SpecimenProcessing(source) {
        var _this = _super.call(this, source) || this;
        if (source["additive"] !== undefined) {
            _this.additive = source.additive.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["procedure"] !== undefined) {
            _this.procedure = new fhirModels.CodeableConcept(source.procedure);
        }
        if (source["timeDateTime"] !== undefined) {
            _this.timeDateTime = source.timeDateTime;
        }
        if (source["_timeDateTime"] !== undefined) {
            _this._timeDateTime = new fhirModels.Element(source._timeDateTime);
        }
        if (source["timePeriod"] !== undefined) {
            _this.timePeriod = new fhirModels.Period(source.timePeriod);
        }
        return _this;
    }
    /**
     * Factory function to create a SpecimenProcessing from an object that MUST contain all required elements.
     */
    SpecimenProcessing.CreateStrict = function (source) {
        var dest = new SpecimenProcessing(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "SpecimenProcessing is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current SpecimenProcessing contains all required elements.
     */
    SpecimenProcessing.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return SpecimenProcessing;
}(fhirModels.BackboneElement));
export { SpecimenProcessing };
/**
 * The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.
 */
var SpecimenContainer = /** @class */ (function (_super) {
    __extends(SpecimenContainer, _super);
    /**
     * Default constructor for SpecimenContainer from an object that MAY NOT contain all required elements.
     */
    function SpecimenContainer(source) {
        var _this = _super.call(this, source) || this;
        if (source["additiveCodeableConcept"] !== undefined) {
            _this.additiveCodeableConcept = new fhirModels.CodeableConcept(source.additiveCodeableConcept);
        }
        if (source["additiveReference"] !== undefined) {
            _this.additiveReference = new fhirModels.Reference(source.additiveReference);
        }
        if (source["capacity"] !== undefined) {
            _this.capacity = new fhirModels.Quantity(source.capacity);
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["specimenQuantity"] !== undefined) {
            _this.specimenQuantity = new fhirModels.Quantity(source.specimenQuantity);
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    /**
     * Factory function to create a SpecimenContainer from an object that MUST contain all required elements.
     */
    SpecimenContainer.CreateStrict = function (source) {
        var dest = new SpecimenContainer(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "SpecimenContainer is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current SpecimenContainer contains all required elements.
     */
    SpecimenContainer.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return SpecimenContainer;
}(fhirModels.BackboneElement));
export { SpecimenContainer };
/**
 * A sample to be used for analysis.
 */
var Specimen = /** @class */ (function (_super) {
    __extends(Specimen, _super);
    /**
     * Default constructor for Specimen from an object that MAY NOT contain all required elements.
     */
    function Specimen(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "Specimen";
        if ((source['resourceType'] !== "Specimen") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Specimen';
        }
        if (source["accessionIdentifier"] !== undefined) {
            _this.accessionIdentifier = new fhirModels.Identifier(source.accessionIdentifier);
        }
        if (source["collection"] !== undefined) {
            _this.collection = new fhirModels.SpecimenCollection(source.collection);
        }
        if (source["condition"] !== undefined) {
            _this.condition = source.condition.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["container"] !== undefined) {
            _this.container = source.container.map(function (x) { return new fhirModels.SpecimenContainer(x); });
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["note"] !== undefined) {
            _this.note = source.note.map(function (x) { return new fhirModels.Annotation(x); });
        }
        if (source["parent"] !== undefined) {
            _this.parent = source.parent.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["processing"] !== undefined) {
            _this.processing = source.processing.map(function (x) { return new fhirModels.SpecimenProcessing(x); });
        }
        if (source["receivedTime"] !== undefined) {
            _this.receivedTime = source.receivedTime;
        }
        if (source["_receivedTime"] !== undefined) {
            _this._receivedTime = new fhirModels.Element(source._receivedTime);
        }
        if (source["request"] !== undefined) {
            _this.request = source.request.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["status"] !== undefined) {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["subject"] !== undefined) {
            _this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    /**
     * Factory function to create a Specimen from an object that MUST contain all required elements.
     */
    Specimen.CreateStrict = function (source) {
        var dest = new Specimen(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "Specimen is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current Specimen contains all required elements.
     */
    Specimen.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return Specimen;
}(fhirModels.DomainResource));
export { Specimen };
/**
 * Code Values for the Specimen.status field
 */
export var SpecimenStatusEnum;
(function (SpecimenStatusEnum) {
    SpecimenStatusEnum["AVAILABLE"] = "available";
    SpecimenStatusEnum["UNAVAILABLE"] = "unavailable";
    SpecimenStatusEnum["UNSATISFACTORY"] = "unsatisfactory";
    SpecimenStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(SpecimenStatusEnum || (SpecimenStatusEnum = {}));
