var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * An error, warning, or information message that results from a system action.
 */
var OperationOutcomeIssue = /** @class */ (function (_super) {
    __extends(OperationOutcomeIssue, _super);
    /**
     * Default constructor for OperationOutcomeIssue from an object that MAY NOT contain all required elements.
     */
    function OperationOutcomeIssue(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            _this._code = new fhirModels.Element(source._code);
        }
        if (source["details"] !== undefined) {
            _this.details = new fhirModels.CodeableConcept(source.details);
        }
        if (source["diagnostics"] !== undefined) {
            _this.diagnostics = source.diagnostics;
        }
        if (source["_diagnostics"] !== undefined) {
            _this._diagnostics = new fhirModels.Element(source._diagnostics);
        }
        if (source["expression"] !== undefined) {
            _this.expression = source.expression.map(function (x) { return (x); });
        }
        if (source["_expression"] !== undefined) {
            _this._expression = source._expression.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["location"] !== undefined) {
            _this.location = source.location.map(function (x) { return (x); });
        }
        if (source["_location"] !== undefined) {
            _this._location = source._location.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["severity"] !== undefined) {
            _this.severity = source.severity;
        }
        if (source["_severity"] !== undefined) {
            _this._severity = new fhirModels.Element(source._severity);
        }
        return _this;
    }
    /**
     * Factory function to create a OperationOutcomeIssue from an object that MUST contain all required elements.
     */
    OperationOutcomeIssue.CreateStrict = function (source) {
        var dest = new OperationOutcomeIssue(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "OperationOutcomeIssue is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current OperationOutcomeIssue contains all required elements.
     */
    OperationOutcomeIssue.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        if (this["severity"] === undefined) {
            missingElements.push("severity");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return OperationOutcomeIssue;
}(fhirModels.BackboneElement));
export { OperationOutcomeIssue };
/**
 * Code Values for the OperationOutcome.issue.severity field
 */
export var OperationOutcomeIssueSeverityEnum;
(function (OperationOutcomeIssueSeverityEnum) {
    OperationOutcomeIssueSeverityEnum["FATAL"] = "fatal";
    OperationOutcomeIssueSeverityEnum["ERROR"] = "error";
    OperationOutcomeIssueSeverityEnum["WARNING"] = "warning";
    OperationOutcomeIssueSeverityEnum["INFORMATION"] = "information";
})(OperationOutcomeIssueSeverityEnum || (OperationOutcomeIssueSeverityEnum = {}));
/**
 * A collection of error, warning, or information messages that result from a system action.
 */
var OperationOutcome = /** @class */ (function (_super) {
    __extends(OperationOutcome, _super);
    /**
     * Default constructor for OperationOutcome from an object that MAY NOT contain all required elements.
     */
    function OperationOutcome(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "OperationOutcome";
        if ((source['resourceType'] !== "OperationOutcome") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a OperationOutcome';
        }
        if (source["issue"] !== undefined) {
            _this.issue = source.issue.map(function (x) { return new fhirModels.OperationOutcomeIssue(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a OperationOutcome from an object that MUST contain all required elements.
     */
    OperationOutcome.CreateStrict = function (source) {
        var dest = new OperationOutcome(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "OperationOutcome is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current OperationOutcome contains all required elements.
     */
    OperationOutcome.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if ((this["issue"] === undefined) || (this["issue"].length === 0)) {
            missingElements.push("issue");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return OperationOutcome;
}(fhirModels.DomainResource));
export { OperationOutcome };
