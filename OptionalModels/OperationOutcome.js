"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OperationOutcome = exports.OperationOutcomeIssueSeverityEnum = exports.OperationOutcomeIssue = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * An error, warning, or information message that results from a system action.
 */
class OperationOutcomeIssue extends fhirModels.BackboneElement {
    /**
     * Default constructor for OperationOutcomeIssue from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            this._code = new fhirModels.Element(source._code);
        }
        if (source["details"] !== undefined) {
            this.details = new fhirModels.CodeableConcept(source.details);
        }
        if (source["diagnostics"] !== undefined) {
            this.diagnostics = source.diagnostics;
        }
        if (source["_diagnostics"] !== undefined) {
            this._diagnostics = new fhirModels.Element(source._diagnostics);
        }
        if (source["expression"] !== undefined) {
            this.expression = source.expression.map((x) => (x));
        }
        if (source["_expression"] !== undefined) {
            this._expression = source._expression.map((x) => new fhirModels.Element(x));
        }
        if (source["location"] !== undefined) {
            this.location = source.location.map((x) => (x));
        }
        if (source["_location"] !== undefined) {
            this._location = source._location.map((x) => new fhirModels.Element(x));
        }
        if (source["severity"] !== undefined) {
            this.severity = source.severity;
        }
        if (source["_severity"] !== undefined) {
            this._severity = new fhirModels.Element(source._severity);
        }
    }
    /**
     * Factory function to create a OperationOutcomeIssue from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new OperationOutcomeIssue(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `OperationOutcomeIssue is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current OperationOutcomeIssue contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        if (this["severity"] === undefined) {
            missingElements.push("severity");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.OperationOutcomeIssue = OperationOutcomeIssue;
/**
 * Code Values for the OperationOutcome.issue.severity field
 */
var OperationOutcomeIssueSeverityEnum;
(function (OperationOutcomeIssueSeverityEnum) {
    OperationOutcomeIssueSeverityEnum["FATAL"] = "fatal";
    OperationOutcomeIssueSeverityEnum["ERROR"] = "error";
    OperationOutcomeIssueSeverityEnum["WARNING"] = "warning";
    OperationOutcomeIssueSeverityEnum["INFORMATION"] = "information";
})(OperationOutcomeIssueSeverityEnum = exports.OperationOutcomeIssueSeverityEnum || (exports.OperationOutcomeIssueSeverityEnum = {}));
/**
 * A collection of error, warning, or information messages that result from a system action.
 */
class OperationOutcome extends fhirModels.DomainResource {
    /**
     * Default constructor for OperationOutcome from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "OperationOutcome";
        if ((source['resourceType'] !== "OperationOutcome") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a OperationOutcome';
        }
        if (source["issue"] !== undefined) {
            this.issue = source.issue.map((x) => new fhirModels.OperationOutcomeIssue(x));
        }
    }
    /**
     * Factory function to create a OperationOutcome from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new OperationOutcome(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `OperationOutcome is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current OperationOutcome contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if ((this["issue"] === undefined) || (this["issue"].length === 0)) {
            missingElements.push("issue");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.OperationOutcome = OperationOutcome;
//# sourceMappingURL=OperationOutcome.js.map