var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * The manufactured item as contained in the packaged medicinal product.
 */
var MedicinalProductManufactured = /** @class */ (function (_super) {
    __extends(MedicinalProductManufactured, _super);
    /**
     * Default constructor for MedicinalProductManufactured from an object that MAY NOT contain all required elements.
     */
    function MedicinalProductManufactured(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "MedicinalProductManufactured";
        if ((source['resourceType'] !== "MedicinalProductManufactured") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a MedicinalProductManufactured';
        }
        if (source["ingredient"] !== undefined) {
            _this.ingredient = source.ingredient.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["manufacturedDoseForm"] !== undefined) {
            _this.manufacturedDoseForm = new fhirModels.CodeableConcept(source.manufacturedDoseForm);
        }
        if (source["manufacturer"] !== undefined) {
            _this.manufacturer = source.manufacturer.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["otherCharacteristics"] !== undefined) {
            _this.otherCharacteristics = source.otherCharacteristics.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["physicalCharacteristics"] !== undefined) {
            _this.physicalCharacteristics = new fhirModels.ProdCharacteristic(source.physicalCharacteristics);
        }
        if (source["quantity"] !== undefined) {
            _this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["unitOfPresentation"] !== undefined) {
            _this.unitOfPresentation = new fhirModels.CodeableConcept(source.unitOfPresentation);
        }
        return _this;
    }
    /**
     * Factory function to create a MedicinalProductManufactured from an object that MUST contain all required elements.
     */
    MedicinalProductManufactured.CreateStrict = function (source) {
        var dest = new MedicinalProductManufactured(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "MedicinalProductManufactured is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current MedicinalProductManufactured contains all required elements.
     */
    MedicinalProductManufactured.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["manufacturedDoseForm"] === undefined) {
            missingElements.push("manufacturedDoseForm");
        }
        if (this["quantity"] === undefined) {
            missingElements.push("quantity");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return MedicinalProductManufactured;
}(fhirModels.DomainResource));
export { MedicinalProductManufactured };
