var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * Strength expressed in terms of a reference substance.
 */
var MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength = /** @class */ (function (_super) {
    __extends(MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength, _super);
    /**
     * Default constructor for MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength from an object that MAY NOT contain all required elements.
     */
    function MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(source) {
        var _this = _super.call(this, source) || this;
        if (source["country"] !== undefined) {
            _this.country = source.country.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["measurementPoint"] !== undefined) {
            _this.measurementPoint = source.measurementPoint;
        }
        if (source["_measurementPoint"] !== undefined) {
            _this._measurementPoint = new fhirModels.Element(source._measurementPoint);
        }
        if (source["strength"] !== undefined) {
            _this.strength = new fhirModels.Ratio(source.strength);
        }
        if (source["strengthLowLimit"] !== undefined) {
            _this.strengthLowLimit = new fhirModels.Ratio(source.strengthLowLimit);
        }
        if (source["substance"] !== undefined) {
            _this.substance = new fhirModels.CodeableConcept(source.substance);
        }
        return _this;
    }
    /**
     * Factory function to create a MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength from an object that MUST contain all required elements.
     */
    MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength.CreateStrict = function (source) {
        var dest = new MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength contains all required elements.
     */
    MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["strength"] === undefined) {
            missingElements.push("strength");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength;
}(fhirModels.BackboneElement));
export { MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength };
/**
 * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
 */
var MedicinalProductIngredientSpecifiedSubstanceStrength = /** @class */ (function (_super) {
    __extends(MedicinalProductIngredientSpecifiedSubstanceStrength, _super);
    /**
     * Default constructor for MedicinalProductIngredientSpecifiedSubstanceStrength from an object that MAY NOT contain all required elements.
     */
    function MedicinalProductIngredientSpecifiedSubstanceStrength(source) {
        var _this = _super.call(this, source) || this;
        if (source["concentration"] !== undefined) {
            _this.concentration = new fhirModels.Ratio(source.concentration);
        }
        if (source["concentrationLowLimit"] !== undefined) {
            _this.concentrationLowLimit = new fhirModels.Ratio(source.concentrationLowLimit);
        }
        if (source["country"] !== undefined) {
            _this.country = source.country.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["measurementPoint"] !== undefined) {
            _this.measurementPoint = source.measurementPoint;
        }
        if (source["_measurementPoint"] !== undefined) {
            _this._measurementPoint = new fhirModels.Element(source._measurementPoint);
        }
        if (source["presentation"] !== undefined) {
            _this.presentation = new fhirModels.Ratio(source.presentation);
        }
        if (source["presentationLowLimit"] !== undefined) {
            _this.presentationLowLimit = new fhirModels.Ratio(source.presentationLowLimit);
        }
        if (source["referenceStrength"] !== undefined) {
            _this.referenceStrength = source.referenceStrength.map(function (x) { return new fhirModels.MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a MedicinalProductIngredientSpecifiedSubstanceStrength from an object that MUST contain all required elements.
     */
    MedicinalProductIngredientSpecifiedSubstanceStrength.CreateStrict = function (source) {
        var dest = new MedicinalProductIngredientSpecifiedSubstanceStrength(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "MedicinalProductIngredientSpecifiedSubstanceStrength is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current MedicinalProductIngredientSpecifiedSubstanceStrength contains all required elements.
     */
    MedicinalProductIngredientSpecifiedSubstanceStrength.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["presentation"] === undefined) {
            missingElements.push("presentation");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return MedicinalProductIngredientSpecifiedSubstanceStrength;
}(fhirModels.BackboneElement));
export { MedicinalProductIngredientSpecifiedSubstanceStrength };
/**
 * A specified substance that comprises this ingredient.
 */
var MedicinalProductIngredientSpecifiedSubstance = /** @class */ (function (_super) {
    __extends(MedicinalProductIngredientSpecifiedSubstance, _super);
    /**
     * Default constructor for MedicinalProductIngredientSpecifiedSubstance from an object that MAY NOT contain all required elements.
     */
    function MedicinalProductIngredientSpecifiedSubstance(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["confidentiality"] !== undefined) {
            _this.confidentiality = new fhirModels.CodeableConcept(source.confidentiality);
        }
        if (source["group"] !== undefined) {
            _this.group = new fhirModels.CodeableConcept(source.group);
        }
        if (source["strength"] !== undefined) {
            _this.strength = source.strength.map(function (x) { return new fhirModels.MedicinalProductIngredientSpecifiedSubstanceStrength(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a MedicinalProductIngredientSpecifiedSubstance from an object that MUST contain all required elements.
     */
    MedicinalProductIngredientSpecifiedSubstance.CreateStrict = function (source) {
        var dest = new MedicinalProductIngredientSpecifiedSubstance(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "MedicinalProductIngredientSpecifiedSubstance is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current MedicinalProductIngredientSpecifiedSubstance contains all required elements.
     */
    MedicinalProductIngredientSpecifiedSubstance.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        if (this["group"] === undefined) {
            missingElements.push("group");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return MedicinalProductIngredientSpecifiedSubstance;
}(fhirModels.BackboneElement));
export { MedicinalProductIngredientSpecifiedSubstance };
/**
 * The ingredient substance.
 */
var MedicinalProductIngredientSubstance = /** @class */ (function (_super) {
    __extends(MedicinalProductIngredientSubstance, _super);
    /**
     * Default constructor for MedicinalProductIngredientSubstance from an object that MAY NOT contain all required elements.
     */
    function MedicinalProductIngredientSubstance(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["strength"] !== undefined) {
            _this.strength = source.strength.map(function (x) { return new fhirModels.MedicinalProductIngredientSpecifiedSubstanceStrength(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a MedicinalProductIngredientSubstance from an object that MUST contain all required elements.
     */
    MedicinalProductIngredientSubstance.CreateStrict = function (source) {
        var dest = new MedicinalProductIngredientSubstance(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "MedicinalProductIngredientSubstance is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current MedicinalProductIngredientSubstance contains all required elements.
     */
    MedicinalProductIngredientSubstance.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return MedicinalProductIngredientSubstance;
}(fhirModels.BackboneElement));
export { MedicinalProductIngredientSubstance };
/**
 * An ingredient of a manufactured item or pharmaceutical product.
 */
var MedicinalProductIngredient = /** @class */ (function (_super) {
    __extends(MedicinalProductIngredient, _super);
    /**
     * Default constructor for MedicinalProductIngredient from an object that MAY NOT contain all required elements.
     */
    function MedicinalProductIngredient(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "MedicinalProductIngredient";
        if ((source['resourceType'] !== "MedicinalProductIngredient") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a MedicinalProductIngredient';
        }
        if (source["allergenicIndicator"] !== undefined) {
            _this.allergenicIndicator = source.allergenicIndicator;
        }
        if (source["_allergenicIndicator"] !== undefined) {
            _this._allergenicIndicator = new fhirModels.Element(source._allergenicIndicator);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = new fhirModels.Identifier(source.identifier);
        }
        if (source["manufacturer"] !== undefined) {
            _this.manufacturer = source.manufacturer.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["role"] !== undefined) {
            _this.role = new fhirModels.CodeableConcept(source.role);
        }
        if (source["specifiedSubstance"] !== undefined) {
            _this.specifiedSubstance = source.specifiedSubstance.map(function (x) { return new fhirModels.MedicinalProductIngredientSpecifiedSubstance(x); });
        }
        if (source["substance"] !== undefined) {
            _this.substance = new fhirModels.MedicinalProductIngredientSubstance(source.substance);
        }
        return _this;
    }
    /**
     * Factory function to create a MedicinalProductIngredient from an object that MUST contain all required elements.
     */
    MedicinalProductIngredient.CreateStrict = function (source) {
        var dest = new MedicinalProductIngredient(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "MedicinalProductIngredient is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current MedicinalProductIngredient contains all required elements.
     */
    MedicinalProductIngredient.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["role"] === undefined) {
            missingElements.push("role");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return MedicinalProductIngredient;
}(fhirModels.DomainResource));
export { MedicinalProductIngredient };
