"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MedicinalProductIngredient = exports.MedicinalProductIngredientSubstance = exports.MedicinalProductIngredientSpecifiedSubstance = exports.MedicinalProductIngredientSpecifiedSubstanceStrength = exports.MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * Strength expressed in terms of a reference substance.
 */
class MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["country"] !== undefined) {
            this.country = source.country.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["measurementPoint"] !== undefined) {
            this.measurementPoint = source.measurementPoint;
        }
        if (source["_measurementPoint"] !== undefined) {
            this._measurementPoint = new fhirModels.Element(source._measurementPoint);
        }
        if (source["strength"] !== undefined) {
            this.strength = new fhirModels.Ratio(source.strength);
        }
        if (source["strengthLowLimit"] !== undefined) {
            this.strengthLowLimit = new fhirModels.Ratio(source.strengthLowLimit);
        }
        if (source["substance"] !== undefined) {
            this.substance = new fhirModels.CodeableConcept(source.substance);
        }
    }
    /**
     * Factory function to create a MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["strength"] === undefined) {
            missingElements.push("strength");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength = MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength;
/**
 * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
 */
class MedicinalProductIngredientSpecifiedSubstanceStrength extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicinalProductIngredientSpecifiedSubstanceStrength from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["concentration"] !== undefined) {
            this.concentration = new fhirModels.Ratio(source.concentration);
        }
        if (source["concentrationLowLimit"] !== undefined) {
            this.concentrationLowLimit = new fhirModels.Ratio(source.concentrationLowLimit);
        }
        if (source["country"] !== undefined) {
            this.country = source.country.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["measurementPoint"] !== undefined) {
            this.measurementPoint = source.measurementPoint;
        }
        if (source["_measurementPoint"] !== undefined) {
            this._measurementPoint = new fhirModels.Element(source._measurementPoint);
        }
        if (source["presentation"] !== undefined) {
            this.presentation = new fhirModels.Ratio(source.presentation);
        }
        if (source["presentationLowLimit"] !== undefined) {
            this.presentationLowLimit = new fhirModels.Ratio(source.presentationLowLimit);
        }
        if (source["referenceStrength"] !== undefined) {
            this.referenceStrength = source.referenceStrength.map((x) => new fhirModels.MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(x));
        }
    }
    /**
     * Factory function to create a MedicinalProductIngredientSpecifiedSubstanceStrength from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MedicinalProductIngredientSpecifiedSubstanceStrength(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProductIngredientSpecifiedSubstanceStrength is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MedicinalProductIngredientSpecifiedSubstanceStrength contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["presentation"] === undefined) {
            missingElements.push("presentation");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MedicinalProductIngredientSpecifiedSubstanceStrength = MedicinalProductIngredientSpecifiedSubstanceStrength;
/**
 * A specified substance that comprises this ingredient.
 */
class MedicinalProductIngredientSpecifiedSubstance extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicinalProductIngredientSpecifiedSubstance from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["confidentiality"] !== undefined) {
            this.confidentiality = new fhirModels.CodeableConcept(source.confidentiality);
        }
        if (source["group"] !== undefined) {
            this.group = new fhirModels.CodeableConcept(source.group);
        }
        if (source["strength"] !== undefined) {
            this.strength = source.strength.map((x) => new fhirModels.MedicinalProductIngredientSpecifiedSubstanceStrength(x));
        }
    }
    /**
     * Factory function to create a MedicinalProductIngredientSpecifiedSubstance from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MedicinalProductIngredientSpecifiedSubstance(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProductIngredientSpecifiedSubstance is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MedicinalProductIngredientSpecifiedSubstance contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        if (this["group"] === undefined) {
            missingElements.push("group");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MedicinalProductIngredientSpecifiedSubstance = MedicinalProductIngredientSpecifiedSubstance;
/**
 * The ingredient substance.
 */
class MedicinalProductIngredientSubstance extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicinalProductIngredientSubstance from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["strength"] !== undefined) {
            this.strength = source.strength.map((x) => new fhirModels.MedicinalProductIngredientSpecifiedSubstanceStrength(x));
        }
    }
    /**
     * Factory function to create a MedicinalProductIngredientSubstance from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MedicinalProductIngredientSubstance(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProductIngredientSubstance is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MedicinalProductIngredientSubstance contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MedicinalProductIngredientSubstance = MedicinalProductIngredientSubstance;
/**
 * An ingredient of a manufactured item or pharmaceutical product.
 */
class MedicinalProductIngredient extends fhirModels.DomainResource {
    /**
     * Default constructor for MedicinalProductIngredient from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "MedicinalProductIngredient";
        if ((source['resourceType'] !== "MedicinalProductIngredient") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a MedicinalProductIngredient';
        }
        if (source["allergenicIndicator"] !== undefined) {
            this.allergenicIndicator = source.allergenicIndicator;
        }
        if (source["_allergenicIndicator"] !== undefined) {
            this._allergenicIndicator = new fhirModels.Element(source._allergenicIndicator);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = new fhirModels.Identifier(source.identifier);
        }
        if (source["manufacturer"] !== undefined) {
            this.manufacturer = source.manufacturer.map((x) => new fhirModels.Reference(x));
        }
        if (source["role"] !== undefined) {
            this.role = new fhirModels.CodeableConcept(source.role);
        }
        if (source["specifiedSubstance"] !== undefined) {
            this.specifiedSubstance = source.specifiedSubstance.map((x) => new fhirModels.MedicinalProductIngredientSpecifiedSubstance(x));
        }
        if (source["substance"] !== undefined) {
            this.substance = new fhirModels.MedicinalProductIngredientSubstance(source.substance);
        }
    }
    /**
     * Factory function to create a MedicinalProductIngredient from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MedicinalProductIngredient(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProductIngredient is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MedicinalProductIngredient contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["role"] === undefined) {
            missingElements.push("role");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MedicinalProductIngredient = MedicinalProductIngredient;
//# sourceMappingURL=MedicinalProductIngredient.js.map