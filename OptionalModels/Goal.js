"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalLifecycleStatusEnum = exports.Goal = exports.GoalTarget = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * When multiple targets are present for a single goal instance, all targets must be met for the overall goal to be met.
 */
class GoalTarget extends fhirModels.BackboneElement {
    /**
     * Default constructor for GoalTarget from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["detailQuantity"] !== undefined) {
            this.detailQuantity = new fhirModels.Quantity(source.detailQuantity);
        }
        if (source["detailRange"] !== undefined) {
            this.detailRange = new fhirModels.Range(source.detailRange);
        }
        if (source["detailCodeableConcept"] !== undefined) {
            this.detailCodeableConcept = new fhirModels.CodeableConcept(source.detailCodeableConcept);
        }
        if (source["detailString"] !== undefined) {
            this.detailString = source.detailString;
        }
        if (source["_detailString"] !== undefined) {
            this._detailString = new fhirModels.Element(source._detailString);
        }
        if (source["detailBoolean"] !== undefined) {
            this.detailBoolean = source.detailBoolean;
        }
        if (source["_detailBoolean"] !== undefined) {
            this._detailBoolean = new fhirModels.Element(source._detailBoolean);
        }
        if (source["detailInteger"] !== undefined) {
            this.detailInteger = source.detailInteger;
        }
        if (source["_detailInteger"] !== undefined) {
            this._detailInteger = new fhirModels.Element(source._detailInteger);
        }
        if (source["detailRatio"] !== undefined) {
            this.detailRatio = new fhirModels.Ratio(source.detailRatio);
        }
        if (source["dueDate"] !== undefined) {
            this.dueDate = source.dueDate;
        }
        if (source["_dueDate"] !== undefined) {
            this._dueDate = new fhirModels.Element(source._dueDate);
        }
        if (source["dueDuration"] !== undefined) {
            this.dueDuration = new fhirModels.Duration(source.dueDuration);
        }
        if (source["measure"] !== undefined) {
            this.measure = new fhirModels.CodeableConcept(source.measure);
        }
    }
    /**
     * Factory function to create a GoalTarget from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new GoalTarget(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `GoalTarget is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current GoalTarget contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.GoalTarget = GoalTarget;
/**
 * Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
 */
class Goal extends fhirModels.DomainResource {
    /**
     * Default constructor for Goal from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "Goal";
        if ((source['resourceType'] !== "Goal") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Goal';
        }
        if (source["achievementStatus"] !== undefined) {
            this.achievementStatus = new fhirModels.CodeableConcept(source.achievementStatus);
        }
        if (source["addresses"] !== undefined) {
            this.addresses = source.addresses.map((x) => new fhirModels.Reference(x));
        }
        if (source["category"] !== undefined) {
            this.category = source.category.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["description"] !== undefined) {
            this.description = new fhirModels.CodeableConcept(source.description);
        }
        if (source["expressedBy"] !== undefined) {
            this.expressedBy = new fhirModels.Reference(source.expressedBy);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["lifecycleStatus"] !== undefined) {
            this.lifecycleStatus = source.lifecycleStatus;
        }
        if (source["_lifecycleStatus"] !== undefined) {
            this._lifecycleStatus = new fhirModels.Element(source._lifecycleStatus);
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["outcomeCode"] !== undefined) {
            this.outcomeCode = source.outcomeCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["outcomeReference"] !== undefined) {
            this.outcomeReference = source.outcomeReference.map((x) => new fhirModels.Reference(x));
        }
        if (source["priority"] !== undefined) {
            this.priority = new fhirModels.CodeableConcept(source.priority);
        }
        if (source["startDate"] !== undefined) {
            this.startDate = source.startDate;
        }
        if (source["_startDate"] !== undefined) {
            this._startDate = new fhirModels.Element(source._startDate);
        }
        if (source["startCodeableConcept"] !== undefined) {
            this.startCodeableConcept = new fhirModels.CodeableConcept(source.startCodeableConcept);
        }
        if (source["statusDate"] !== undefined) {
            this.statusDate = source.statusDate;
        }
        if (source["_statusDate"] !== undefined) {
            this._statusDate = new fhirModels.Element(source._statusDate);
        }
        if (source["statusReason"] !== undefined) {
            this.statusReason = source.statusReason;
        }
        if (source["_statusReason"] !== undefined) {
            this._statusReason = new fhirModels.Element(source._statusReason);
        }
        if (source["subject"] !== undefined) {
            this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["target"] !== undefined) {
            this.target = source.target.map((x) => new fhirModels.GoalTarget(x));
        }
    }
    /**
     * Factory function to create a Goal from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new Goal(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Goal is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current Goal contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["description"] === undefined) {
            missingElements.push("description");
        }
        if (this["lifecycleStatus"] === undefined) {
            missingElements.push("lifecycleStatus");
        }
        if (this["subject"] === undefined) {
            missingElements.push("subject");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.Goal = Goal;
/**
 * Code Values for the Goal.lifecycleStatus field
 */
var GoalLifecycleStatusEnum;
(function (GoalLifecycleStatusEnum) {
    GoalLifecycleStatusEnum["PROPOSED"] = "proposed";
    GoalLifecycleStatusEnum["PLANNED"] = "planned";
    GoalLifecycleStatusEnum["ACCEPTED"] = "accepted";
    GoalLifecycleStatusEnum["ACTIVE"] = "active";
    GoalLifecycleStatusEnum["ON_HOLD"] = "on-hold";
    GoalLifecycleStatusEnum["COMPLETED"] = "completed";
    GoalLifecycleStatusEnum["CANCELLED"] = "cancelled";
    GoalLifecycleStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    GoalLifecycleStatusEnum["REJECTED"] = "rejected";
})(GoalLifecycleStatusEnum = exports.GoalLifecycleStatusEnum || (exports.GoalLifecycleStatusEnum = {}));
//# sourceMappingURL=Goal.js.map