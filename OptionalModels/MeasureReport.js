"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MeasureReportTypeEnum = exports.MeasureReportStatusEnum = exports.MeasureReport = exports.MeasureReportGroup = exports.MeasureReportGroupStratifier = exports.MeasureReportGroupStratifierStratum = exports.MeasureReportGroupStratifierStratumPopulation = exports.MeasureReportGroupStratifierStratumComponent = exports.MeasureReportGroupPopulation = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * The populations that make up the population group, one for each type of population appropriate for the measure.
 */
class MeasureReportGroupPopulation extends fhirModels.BackboneElement {
    /**
     * Default constructor for MeasureReportGroupPopulation from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["count"] !== undefined) {
            this.count = source.count;
        }
        if (source["_count"] !== undefined) {
            this._count = new fhirModels.Element(source._count);
        }
        if (source["subjectResults"] !== undefined) {
            this.subjectResults = new fhirModels.Reference(source.subjectResults);
        }
    }
    /**
     * Factory function to create a MeasureReportGroupPopulation from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MeasureReportGroupPopulation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MeasureReportGroupPopulation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MeasureReportGroupPopulation contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MeasureReportGroupPopulation = MeasureReportGroupPopulation;
/**
 * A stratifier component value.
 */
class MeasureReportGroupStratifierStratumComponent extends fhirModels.BackboneElement {
    /**
     * Default constructor for MeasureReportGroupStratifierStratumComponent from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["value"] !== undefined) {
            this.value = new fhirModels.CodeableConcept(source.value);
        }
    }
    /**
     * Factory function to create a MeasureReportGroupStratifierStratumComponent from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MeasureReportGroupStratifierStratumComponent(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MeasureReportGroupStratifierStratumComponent is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MeasureReportGroupStratifierStratumComponent contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        if (this["value"] === undefined) {
            missingElements.push("value");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MeasureReportGroupStratifierStratumComponent = MeasureReportGroupStratifierStratumComponent;
/**
 * The populations that make up the stratum, one for each type of population appropriate to the measure.
 */
class MeasureReportGroupStratifierStratumPopulation extends fhirModels.BackboneElement {
    /**
     * Default constructor for MeasureReportGroupStratifierStratumPopulation from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["count"] !== undefined) {
            this.count = source.count;
        }
        if (source["_count"] !== undefined) {
            this._count = new fhirModels.Element(source._count);
        }
        if (source["subjectResults"] !== undefined) {
            this.subjectResults = new fhirModels.Reference(source.subjectResults);
        }
    }
    /**
     * Factory function to create a MeasureReportGroupStratifierStratumPopulation from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MeasureReportGroupStratifierStratumPopulation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MeasureReportGroupStratifierStratumPopulation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MeasureReportGroupStratifierStratumPopulation contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MeasureReportGroupStratifierStratumPopulation = MeasureReportGroupStratifierStratumPopulation;
/**
 * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
 */
class MeasureReportGroupStratifierStratum extends fhirModels.BackboneElement {
    /**
     * Default constructor for MeasureReportGroupStratifierStratum from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["component"] !== undefined) {
            this.component = source.component.map((x) => new fhirModels.MeasureReportGroupStratifierStratumComponent(x));
        }
        if (source["measureScore"] !== undefined) {
            this.measureScore = new fhirModels.Quantity(source.measureScore);
        }
        if (source["population"] !== undefined) {
            this.population = source.population.map((x) => new fhirModels.MeasureReportGroupStratifierStratumPopulation(x));
        }
        if (source["value"] !== undefined) {
            this.value = new fhirModels.CodeableConcept(source.value);
        }
    }
    /**
     * Factory function to create a MeasureReportGroupStratifierStratum from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MeasureReportGroupStratifierStratum(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MeasureReportGroupStratifierStratum is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MeasureReportGroupStratifierStratum contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MeasureReportGroupStratifierStratum = MeasureReportGroupStratifierStratum;
/**
 * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
 */
class MeasureReportGroupStratifier extends fhirModels.BackboneElement {
    /**
     * Default constructor for MeasureReportGroupStratifier from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = source.code.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["stratum"] !== undefined) {
            this.stratum = source.stratum.map((x) => new fhirModels.MeasureReportGroupStratifierStratum(x));
        }
    }
    /**
     * Factory function to create a MeasureReportGroupStratifier from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MeasureReportGroupStratifier(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MeasureReportGroupStratifier is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MeasureReportGroupStratifier contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MeasureReportGroupStratifier = MeasureReportGroupStratifier;
/**
 * The results of the calculation, one for each population group in the measure.
 */
class MeasureReportGroup extends fhirModels.BackboneElement {
    /**
     * Default constructor for MeasureReportGroup from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["measureScore"] !== undefined) {
            this.measureScore = new fhirModels.Quantity(source.measureScore);
        }
        if (source["population"] !== undefined) {
            this.population = source.population.map((x) => new fhirModels.MeasureReportGroupPopulation(x));
        }
        if (source["stratifier"] !== undefined) {
            this.stratifier = source.stratifier.map((x) => new fhirModels.MeasureReportGroupStratifier(x));
        }
    }
    /**
     * Factory function to create a MeasureReportGroup from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MeasureReportGroup(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MeasureReportGroup is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MeasureReportGroup contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MeasureReportGroup = MeasureReportGroup;
/**
 * The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.
 */
class MeasureReport extends fhirModels.DomainResource {
    /**
     * Default constructor for MeasureReport from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "MeasureReport";
        if ((source['resourceType'] !== "MeasureReport") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a MeasureReport';
        }
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["evaluatedResource"] !== undefined) {
            this.evaluatedResource = source.evaluatedResource.map((x) => new fhirModels.Reference(x));
        }
        if (source["group"] !== undefined) {
            this.group = source.group.map((x) => new fhirModels.MeasureReportGroup(x));
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["improvementNotation"] !== undefined) {
            this.improvementNotation = new fhirModels.CodeableConcept(source.improvementNotation);
        }
        if (source["measure"] !== undefined) {
            this.measure = source.measure;
        }
        if (source["_measure"] !== undefined) {
            this._measure = new fhirModels.Element(source._measure);
        }
        if (source["period"] !== undefined) {
            this.period = new fhirModels.Period(source.period);
        }
        if (source["reporter"] !== undefined) {
            this.reporter = new fhirModels.Reference(source.reporter);
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["subject"] !== undefined) {
            this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["type"] !== undefined) {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
    }
    /**
     * Factory function to create a MeasureReport from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MeasureReport(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MeasureReport is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MeasureReport contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["measure"] === undefined) {
            missingElements.push("measure");
        }
        if (this["period"] === undefined) {
            missingElements.push("period");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MeasureReport = MeasureReport;
/**
 * Code Values for the MeasureReport.status field
 */
var MeasureReportStatusEnum;
(function (MeasureReportStatusEnum) {
    MeasureReportStatusEnum["COMPLETE"] = "complete";
    MeasureReportStatusEnum["PENDING"] = "pending";
    MeasureReportStatusEnum["ERROR"] = "error";
})(MeasureReportStatusEnum = exports.MeasureReportStatusEnum || (exports.MeasureReportStatusEnum = {}));
/**
 * Code Values for the MeasureReport.type field
 */
var MeasureReportTypeEnum;
(function (MeasureReportTypeEnum) {
    MeasureReportTypeEnum["INDIVIDUAL"] = "individual";
    MeasureReportTypeEnum["SUBJECT_LIST"] = "subject-list";
    MeasureReportTypeEnum["SUMMARY"] = "summary";
    MeasureReportTypeEnum["DATA_COLLECTION"] = "data-collection";
})(MeasureReportTypeEnum = exports.MeasureReportTypeEnum || (exports.MeasureReportTypeEnum = {}));
//# sourceMappingURL=MeasureReport.js.map