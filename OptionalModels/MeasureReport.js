var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * The populations that make up the population group, one for each type of population appropriate for the measure.
 */
var MeasureReportGroupPopulation = /** @class */ (function (_super) {
    __extends(MeasureReportGroupPopulation, _super);
    /**
     * Default constructor for MeasureReportGroupPopulation from an object that MAY NOT contain all required elements.
     */
    function MeasureReportGroupPopulation(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["count"] !== undefined) {
            _this.count = source.count;
        }
        if (source["_count"] !== undefined) {
            _this._count = new fhirModels.Element(source._count);
        }
        if (source["subjectResults"] !== undefined) {
            _this.subjectResults = new fhirModels.Reference(source.subjectResults);
        }
        return _this;
    }
    /**
     * Factory function to create a MeasureReportGroupPopulation from an object that MUST contain all required elements.
     */
    MeasureReportGroupPopulation.CreateStrict = function (source) {
        var dest = new MeasureReportGroupPopulation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "MeasureReportGroupPopulation is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current MeasureReportGroupPopulation contains all required elements.
     */
    MeasureReportGroupPopulation.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return MeasureReportGroupPopulation;
}(fhirModels.BackboneElement));
export { MeasureReportGroupPopulation };
/**
 * A stratifier component value.
 */
var MeasureReportGroupStratifierStratumComponent = /** @class */ (function (_super) {
    __extends(MeasureReportGroupStratifierStratumComponent, _super);
    /**
     * Default constructor for MeasureReportGroupStratifierStratumComponent from an object that MAY NOT contain all required elements.
     */
    function MeasureReportGroupStratifierStratumComponent(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["value"] !== undefined) {
            _this.value = new fhirModels.CodeableConcept(source.value);
        }
        return _this;
    }
    /**
     * Factory function to create a MeasureReportGroupStratifierStratumComponent from an object that MUST contain all required elements.
     */
    MeasureReportGroupStratifierStratumComponent.CreateStrict = function (source) {
        var dest = new MeasureReportGroupStratifierStratumComponent(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "MeasureReportGroupStratifierStratumComponent is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current MeasureReportGroupStratifierStratumComponent contains all required elements.
     */
    MeasureReportGroupStratifierStratumComponent.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        if (this["value"] === undefined) {
            missingElements.push("value");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return MeasureReportGroupStratifierStratumComponent;
}(fhirModels.BackboneElement));
export { MeasureReportGroupStratifierStratumComponent };
/**
 * The populations that make up the stratum, one for each type of population appropriate to the measure.
 */
var MeasureReportGroupStratifierStratumPopulation = /** @class */ (function (_super) {
    __extends(MeasureReportGroupStratifierStratumPopulation, _super);
    /**
     * Default constructor for MeasureReportGroupStratifierStratumPopulation from an object that MAY NOT contain all required elements.
     */
    function MeasureReportGroupStratifierStratumPopulation(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["count"] !== undefined) {
            _this.count = source.count;
        }
        if (source["_count"] !== undefined) {
            _this._count = new fhirModels.Element(source._count);
        }
        if (source["subjectResults"] !== undefined) {
            _this.subjectResults = new fhirModels.Reference(source.subjectResults);
        }
        return _this;
    }
    /**
     * Factory function to create a MeasureReportGroupStratifierStratumPopulation from an object that MUST contain all required elements.
     */
    MeasureReportGroupStratifierStratumPopulation.CreateStrict = function (source) {
        var dest = new MeasureReportGroupStratifierStratumPopulation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "MeasureReportGroupStratifierStratumPopulation is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current MeasureReportGroupStratifierStratumPopulation contains all required elements.
     */
    MeasureReportGroupStratifierStratumPopulation.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return MeasureReportGroupStratifierStratumPopulation;
}(fhirModels.BackboneElement));
export { MeasureReportGroupStratifierStratumPopulation };
/**
 * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
 */
var MeasureReportGroupStratifierStratum = /** @class */ (function (_super) {
    __extends(MeasureReportGroupStratifierStratum, _super);
    /**
     * Default constructor for MeasureReportGroupStratifierStratum from an object that MAY NOT contain all required elements.
     */
    function MeasureReportGroupStratifierStratum(source) {
        var _this = _super.call(this, source) || this;
        if (source["component"] !== undefined) {
            _this.component = source.component.map(function (x) { return new fhirModels.MeasureReportGroupStratifierStratumComponent(x); });
        }
        if (source["measureScore"] !== undefined) {
            _this.measureScore = new fhirModels.Quantity(source.measureScore);
        }
        if (source["population"] !== undefined) {
            _this.population = source.population.map(function (x) { return new fhirModels.MeasureReportGroupStratifierStratumPopulation(x); });
        }
        if (source["value"] !== undefined) {
            _this.value = new fhirModels.CodeableConcept(source.value);
        }
        return _this;
    }
    /**
     * Factory function to create a MeasureReportGroupStratifierStratum from an object that MUST contain all required elements.
     */
    MeasureReportGroupStratifierStratum.CreateStrict = function (source) {
        var dest = new MeasureReportGroupStratifierStratum(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "MeasureReportGroupStratifierStratum is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current MeasureReportGroupStratifierStratum contains all required elements.
     */
    MeasureReportGroupStratifierStratum.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return MeasureReportGroupStratifierStratum;
}(fhirModels.BackboneElement));
export { MeasureReportGroupStratifierStratum };
/**
 * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
 */
var MeasureReportGroupStratifier = /** @class */ (function (_super) {
    __extends(MeasureReportGroupStratifier, _super);
    /**
     * Default constructor for MeasureReportGroupStratifier from an object that MAY NOT contain all required elements.
     */
    function MeasureReportGroupStratifier(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = source.code.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["stratum"] !== undefined) {
            _this.stratum = source.stratum.map(function (x) { return new fhirModels.MeasureReportGroupStratifierStratum(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a MeasureReportGroupStratifier from an object that MUST contain all required elements.
     */
    MeasureReportGroupStratifier.CreateStrict = function (source) {
        var dest = new MeasureReportGroupStratifier(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "MeasureReportGroupStratifier is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current MeasureReportGroupStratifier contains all required elements.
     */
    MeasureReportGroupStratifier.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return MeasureReportGroupStratifier;
}(fhirModels.BackboneElement));
export { MeasureReportGroupStratifier };
/**
 * The results of the calculation, one for each population group in the measure.
 */
var MeasureReportGroup = /** @class */ (function (_super) {
    __extends(MeasureReportGroup, _super);
    /**
     * Default constructor for MeasureReportGroup from an object that MAY NOT contain all required elements.
     */
    function MeasureReportGroup(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["measureScore"] !== undefined) {
            _this.measureScore = new fhirModels.Quantity(source.measureScore);
        }
        if (source["population"] !== undefined) {
            _this.population = source.population.map(function (x) { return new fhirModels.MeasureReportGroupPopulation(x); });
        }
        if (source["stratifier"] !== undefined) {
            _this.stratifier = source.stratifier.map(function (x) { return new fhirModels.MeasureReportGroupStratifier(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a MeasureReportGroup from an object that MUST contain all required elements.
     */
    MeasureReportGroup.CreateStrict = function (source) {
        var dest = new MeasureReportGroup(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "MeasureReportGroup is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current MeasureReportGroup contains all required elements.
     */
    MeasureReportGroup.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return MeasureReportGroup;
}(fhirModels.BackboneElement));
export { MeasureReportGroup };
/**
 * The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.
 */
var MeasureReport = /** @class */ (function (_super) {
    __extends(MeasureReport, _super);
    /**
     * Default constructor for MeasureReport from an object that MAY NOT contain all required elements.
     */
    function MeasureReport(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "MeasureReport";
        if ((source['resourceType'] !== "MeasureReport") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a MeasureReport';
        }
        if (source["date"] !== undefined) {
            _this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            _this._date = new fhirModels.Element(source._date);
        }
        if (source["evaluatedResource"] !== undefined) {
            _this.evaluatedResource = source.evaluatedResource.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["group"] !== undefined) {
            _this.group = source.group.map(function (x) { return new fhirModels.MeasureReportGroup(x); });
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["improvementNotation"] !== undefined) {
            _this.improvementNotation = new fhirModels.CodeableConcept(source.improvementNotation);
        }
        if (source["measure"] !== undefined) {
            _this.measure = source.measure;
        }
        if (source["_measure"] !== undefined) {
            _this._measure = new fhirModels.Element(source._measure);
        }
        if (source["period"] !== undefined) {
            _this.period = new fhirModels.Period(source.period);
        }
        if (source["reporter"] !== undefined) {
            _this.reporter = new fhirModels.Reference(source.reporter);
        }
        if (source["status"] !== undefined) {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["subject"] !== undefined) {
            _this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["type"] !== undefined) {
            _this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            _this._type = new fhirModels.Element(source._type);
        }
        return _this;
    }
    /**
     * Factory function to create a MeasureReport from an object that MUST contain all required elements.
     */
    MeasureReport.CreateStrict = function (source) {
        var dest = new MeasureReport(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "MeasureReport is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current MeasureReport contains all required elements.
     */
    MeasureReport.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["measure"] === undefined) {
            missingElements.push("measure");
        }
        if (this["period"] === undefined) {
            missingElements.push("period");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return MeasureReport;
}(fhirModels.DomainResource));
export { MeasureReport };
/**
 * Code Values for the MeasureReport.status field
 */
export var MeasureReportStatusEnum;
(function (MeasureReportStatusEnum) {
    MeasureReportStatusEnum["COMPLETE"] = "complete";
    MeasureReportStatusEnum["PENDING"] = "pending";
    MeasureReportStatusEnum["ERROR"] = "error";
})(MeasureReportStatusEnum || (MeasureReportStatusEnum = {}));
/**
 * Code Values for the MeasureReport.type field
 */
export var MeasureReportTypeEnum;
(function (MeasureReportTypeEnum) {
    MeasureReportTypeEnum["INDIVIDUAL"] = "individual";
    MeasureReportTypeEnum["SUBJECT_LIST"] = "subject-list";
    MeasureReportTypeEnum["SUMMARY"] = "summary";
    MeasureReportTypeEnum["DATA_COLLECTION"] = "data-collection";
})(MeasureReportTypeEnum || (MeasureReportTypeEnum = {}));
