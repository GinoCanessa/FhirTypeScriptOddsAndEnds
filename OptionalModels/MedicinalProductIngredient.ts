// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels'
import * as fhirInterfaces from '../optionalinterfaces'
/**
 * Strength expressed in terms of a reference substance.
 */
export class MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength extends fhirModels.BackboneElement implements fhirInterfaces.IMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength {
  /**
   * The country or countries for which the strength range applies.
   */
  country?: fhirModels.CodeableConcept[]|undefined;
  /**
   * For when strength is measured at a particular point or distance.
   */
  measurementPoint?: string|undefined;
  _measurementPoint?: fhirModels.Element|undefined;
  /**
   * Strength expressed in terms of a reference substance.
   */
  strength?: fhirModels.Ratio|undefined;
  /**
   * Strength expressed in terms of a reference substance.
   */
  strengthLowLimit?: fhirModels.Ratio|undefined;
  /**
   * Relevant reference substance.
   */
  substance?: fhirModels.CodeableConcept|undefined;
  /**
   * Default constructor for MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.IMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength>) {
    super(source);
    if (source["country"] !== undefined) { this.country = source.country.map((x) => new fhirModels.CodeableConcept(x)); }
    if (source["measurementPoint"] !== undefined) { this.measurementPoint = source.measurementPoint; }
    if (source["_measurementPoint"] !== undefined) { this._measurementPoint = new fhirModels.Element(source._measurementPoint); }
    if (source["strength"] !== undefined) { this.strength = new fhirModels.Ratio(source.strength); }
    if (source["strengthLowLimit"] !== undefined) { this.strengthLowLimit = new fhirModels.Ratio(source.strengthLowLimit); }
    if (source["substance"] !== undefined) { this.substance = new fhirModels.CodeableConcept(source.substance); }
  }
  /**
   * Factory function to create a MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.IMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength):MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength {
    var dest:MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength = new MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength contains all required elements.
   */
  checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["strength"] === undefined) { missingElements.push("strength"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
/**
 * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
 */
export class MedicinalProductIngredientSpecifiedSubstanceStrength extends fhirModels.BackboneElement implements fhirInterfaces.IMedicinalProductIngredientSpecifiedSubstanceStrength {
  /**
   * The strength per unitary volume (or mass).
   */
  concentration?: fhirModels.Ratio|undefined;
  /**
   * A lower limit for the strength per unitary volume (or mass), for when there is a range. The concentration attribute then becomes the upper limit.
   */
  concentrationLowLimit?: fhirModels.Ratio|undefined;
  /**
   * The country or countries for which the strength range applies.
   */
  country?: fhirModels.CodeableConcept[]|undefined;
  /**
   * For when strength is measured at a particular point or distance.
   */
  measurementPoint?: string|undefined;
  _measurementPoint?: fhirModels.Element|undefined;
  /**
   * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item.
   */
  presentation?: fhirModels.Ratio|undefined;
  /**
   * A lower limit for the quantity of substance in the unit of presentation. For use when there is a range of strengths, this is the lower limit, with the presentation attribute becoming the upper limit.
   */
  presentationLowLimit?: fhirModels.Ratio|undefined;
  /**
   * Strength expressed in terms of a reference substance.
   */
  referenceStrength?: fhirModels.MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength[]|undefined;
  /**
   * Default constructor for MedicinalProductIngredientSpecifiedSubstanceStrength from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.IMedicinalProductIngredientSpecifiedSubstanceStrength>) {
    super(source);
    if (source["concentration"] !== undefined) { this.concentration = new fhirModels.Ratio(source.concentration); }
    if (source["concentrationLowLimit"] !== undefined) { this.concentrationLowLimit = new fhirModels.Ratio(source.concentrationLowLimit); }
    if (source["country"] !== undefined) { this.country = source.country.map((x) => new fhirModels.CodeableConcept(x)); }
    if (source["measurementPoint"] !== undefined) { this.measurementPoint = source.measurementPoint; }
    if (source["_measurementPoint"] !== undefined) { this._measurementPoint = new fhirModels.Element(source._measurementPoint); }
    if (source["presentation"] !== undefined) { this.presentation = new fhirModels.Ratio(source.presentation); }
    if (source["presentationLowLimit"] !== undefined) { this.presentationLowLimit = new fhirModels.Ratio(source.presentationLowLimit); }
    if (source["referenceStrength"] !== undefined) { this.referenceStrength = source.referenceStrength.map((x) => new fhirModels.MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(x)); }
  }
  /**
   * Factory function to create a MedicinalProductIngredientSpecifiedSubstanceStrength from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.IMedicinalProductIngredientSpecifiedSubstanceStrength):MedicinalProductIngredientSpecifiedSubstanceStrength {
    var dest:MedicinalProductIngredientSpecifiedSubstanceStrength = new MedicinalProductIngredientSpecifiedSubstanceStrength(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `MedicinalProductIngredientSpecifiedSubstanceStrength is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current MedicinalProductIngredientSpecifiedSubstanceStrength contains all required elements.
   */
  checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["presentation"] === undefined) { missingElements.push("presentation"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
/**
 * A specified substance that comprises this ingredient.
 */
export class MedicinalProductIngredientSpecifiedSubstance extends fhirModels.BackboneElement implements fhirInterfaces.IMedicinalProductIngredientSpecifiedSubstance {
  /**
   * The specified substance.
   */
  code?: fhirModels.CodeableConcept|undefined;
  /**
   * Confidentiality level of the specified substance as the ingredient.
   */
  confidentiality?: fhirModels.CodeableConcept|undefined;
  /**
   * The group of specified substance, e.g. group 1 to 4.
   */
  group?: fhirModels.CodeableConcept|undefined;
  /**
   * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
   */
  strength?: fhirModels.MedicinalProductIngredientSpecifiedSubstanceStrength[]|undefined;
  /**
   * Default constructor for MedicinalProductIngredientSpecifiedSubstance from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.IMedicinalProductIngredientSpecifiedSubstance>) {
    super(source);
    if (source["code"] !== undefined) { this.code = new fhirModels.CodeableConcept(source.code); }
    if (source["confidentiality"] !== undefined) { this.confidentiality = new fhirModels.CodeableConcept(source.confidentiality); }
    if (source["group"] !== undefined) { this.group = new fhirModels.CodeableConcept(source.group); }
    if (source["strength"] !== undefined) { this.strength = source.strength.map((x) => new fhirModels.MedicinalProductIngredientSpecifiedSubstanceStrength(x)); }
  }
  /**
   * Factory function to create a MedicinalProductIngredientSpecifiedSubstance from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.IMedicinalProductIngredientSpecifiedSubstance):MedicinalProductIngredientSpecifiedSubstance {
    var dest:MedicinalProductIngredientSpecifiedSubstance = new MedicinalProductIngredientSpecifiedSubstance(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `MedicinalProductIngredientSpecifiedSubstance is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current MedicinalProductIngredientSpecifiedSubstance contains all required elements.
   */
  checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["code"] === undefined) { missingElements.push("code"); }
    if (this["group"] === undefined) { missingElements.push("group"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
/**
 * The ingredient substance.
 */
export class MedicinalProductIngredientSubstance extends fhirModels.BackboneElement implements fhirInterfaces.IMedicinalProductIngredientSubstance {
  /**
   * The ingredient substance.
   */
  code?: fhirModels.CodeableConcept|undefined;
  /**
   * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
   */
  strength?: fhirModels.MedicinalProductIngredientSpecifiedSubstanceStrength[]|undefined;
  /**
   * Default constructor for MedicinalProductIngredientSubstance from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.IMedicinalProductIngredientSubstance>) {
    super(source);
    if (source["code"] !== undefined) { this.code = new fhirModels.CodeableConcept(source.code); }
    if (source["strength"] !== undefined) { this.strength = source.strength.map((x) => new fhirModels.MedicinalProductIngredientSpecifiedSubstanceStrength(x)); }
  }
  /**
   * Factory function to create a MedicinalProductIngredientSubstance from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.IMedicinalProductIngredientSubstance):MedicinalProductIngredientSubstance {
    var dest:MedicinalProductIngredientSubstance = new MedicinalProductIngredientSubstance(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `MedicinalProductIngredientSubstance is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current MedicinalProductIngredientSubstance contains all required elements.
   */
  checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["code"] === undefined) { missingElements.push("code"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
/**
 * An ingredient of a manufactured item or pharmaceutical product.
 */
export class MedicinalProductIngredient extends fhirModels.DomainResource implements fhirInterfaces.IMedicinalProductIngredient {
  /**
   * Resource Type Name
   */
  readonly resourceType = "MedicinalProductIngredient";
  /**
   * If the ingredient is a known or suspected allergen.
   */
  allergenicIndicator?: boolean|undefined;
  _allergenicIndicator?: fhirModels.Element|undefined;
  /**
   * The identifier(s) of this Ingredient that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.
   */
  identifier?: fhirModels.Identifier|undefined;
  /**
   * Manufacturer of this Ingredient.
   */
  manufacturer?: fhirModels.Reference[]|undefined;
  /**
   * Ingredient role e.g. Active ingredient, excipient.
   */
  role?: fhirModels.CodeableConcept|undefined;
  /**
   * A specified substance that comprises this ingredient.
   */
  specifiedSubstance?: fhirModels.MedicinalProductIngredientSpecifiedSubstance[]|undefined;
  /**
   * The ingredient substance.
   */
  substance?: fhirModels.MedicinalProductIngredientSubstance|undefined;
  /**
   * Default constructor for MedicinalProductIngredient from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.IMedicinalProductIngredient>) {
    super(source);
    if ((source['resourceType'] !== "MedicinalProductIngredient") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a MedicinalProductIngredient'; }
    if (source["allergenicIndicator"] !== undefined) { this.allergenicIndicator = source.allergenicIndicator; }
    if (source["_allergenicIndicator"] !== undefined) { this._allergenicIndicator = new fhirModels.Element(source._allergenicIndicator); }
    if (source["identifier"] !== undefined) { this.identifier = new fhirModels.Identifier(source.identifier); }
    if (source["manufacturer"] !== undefined) { this.manufacturer = source.manufacturer.map((x) => new fhirModels.Reference(x)); }
    if (source["role"] !== undefined) { this.role = new fhirModels.CodeableConcept(source.role); }
    if (source["specifiedSubstance"] !== undefined) { this.specifiedSubstance = source.specifiedSubstance.map((x) => new fhirModels.MedicinalProductIngredientSpecifiedSubstance(x)); }
    if (source["substance"] !== undefined) { this.substance = new fhirModels.MedicinalProductIngredientSubstance(source.substance); }
  }
  /**
   * Factory function to create a MedicinalProductIngredient from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.IMedicinalProductIngredient):MedicinalProductIngredient {
    var dest:MedicinalProductIngredient = new MedicinalProductIngredient(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `MedicinalProductIngredient is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current MedicinalProductIngredient contains all required elements.
   */
  checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["role"] === undefined) { missingElements.push("role"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
