"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NutritionOrderStatusEnum = exports.NutritionOrderIntentEnum = exports.NutritionOrder = exports.NutritionOrderEnteralFormula = exports.NutritionOrderEnteralFormulaAdministration = exports.NutritionOrderSupplement = exports.NutritionOrderOralDiet = exports.NutritionOrderOralDietTexture = exports.NutritionOrderOralDietNutrient = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * Class that defines the quantity and type of nutrient modifications (for example carbohydrate, fiber or sodium) required for the oral diet.
 */
class NutritionOrderOralDietNutrient extends fhirModels.BackboneElement {
    /**
     * Default constructor for NutritionOrderOralDietNutrient from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["amount"] !== undefined) {
            this.amount = new fhirModels.Quantity(source.amount);
        }
        if (source["modifier"] !== undefined) {
            this.modifier = new fhirModels.CodeableConcept(source.modifier);
        }
    }
    /**
     * Factory function to create a NutritionOrderOralDietNutrient from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new NutritionOrderOralDietNutrient(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `NutritionOrderOralDietNutrient is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current NutritionOrderOralDietNutrient contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.NutritionOrderOralDietNutrient = NutritionOrderOralDietNutrient;
/**
 * Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
 */
class NutritionOrderOralDietTexture extends fhirModels.BackboneElement {
    /**
     * Default constructor for NutritionOrderOralDietTexture from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["foodType"] !== undefined) {
            this.foodType = new fhirModels.CodeableConcept(source.foodType);
        }
        if (source["modifier"] !== undefined) {
            this.modifier = new fhirModels.CodeableConcept(source.modifier);
        }
    }
    /**
     * Factory function to create a NutritionOrderOralDietTexture from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new NutritionOrderOralDietTexture(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `NutritionOrderOralDietTexture is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current NutritionOrderOralDietTexture contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.NutritionOrderOralDietTexture = NutritionOrderOralDietTexture;
/**
 * Diet given orally in contrast to enteral (tube) feeding.
 */
class NutritionOrderOralDiet extends fhirModels.BackboneElement {
    /**
     * Default constructor for NutritionOrderOralDiet from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["fluidConsistencyType"] !== undefined) {
            this.fluidConsistencyType = source.fluidConsistencyType.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["instruction"] !== undefined) {
            this.instruction = source.instruction;
        }
        if (source["_instruction"] !== undefined) {
            this._instruction = new fhirModels.Element(source._instruction);
        }
        if (source["nutrient"] !== undefined) {
            this.nutrient = source.nutrient.map((x) => new fhirModels.NutritionOrderOralDietNutrient(x));
        }
        if (source["schedule"] !== undefined) {
            this.schedule = source.schedule.map((x) => new fhirModels.Timing(x));
        }
        if (source["texture"] !== undefined) {
            this.texture = source.texture.map((x) => new fhirModels.NutritionOrderOralDietTexture(x));
        }
        if (source["type"] !== undefined) {
            this.type = source.type.map((x) => new fhirModels.CodeableConcept(x));
        }
    }
    /**
     * Factory function to create a NutritionOrderOralDiet from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new NutritionOrderOralDiet(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `NutritionOrderOralDiet is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current NutritionOrderOralDiet contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.NutritionOrderOralDiet = NutritionOrderOralDiet;
/**
 * Oral nutritional products given in order to add further nutritional value to the patient's diet.
 */
class NutritionOrderSupplement extends fhirModels.BackboneElement {
    /**
     * Default constructor for NutritionOrderSupplement from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["instruction"] !== undefined) {
            this.instruction = source.instruction;
        }
        if (source["_instruction"] !== undefined) {
            this._instruction = new fhirModels.Element(source._instruction);
        }
        if (source["productName"] !== undefined) {
            this.productName = source.productName;
        }
        if (source["_productName"] !== undefined) {
            this._productName = new fhirModels.Element(source._productName);
        }
        if (source["quantity"] !== undefined) {
            this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["schedule"] !== undefined) {
            this.schedule = source.schedule.map((x) => new fhirModels.Timing(x));
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
    /**
     * Factory function to create a NutritionOrderSupplement from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new NutritionOrderSupplement(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `NutritionOrderSupplement is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current NutritionOrderSupplement contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.NutritionOrderSupplement = NutritionOrderSupplement;
/**
 * See implementation notes below for further discussion on how to order continuous vs bolus enteral feeding using this resource.
 */
class NutritionOrderEnteralFormulaAdministration extends fhirModels.BackboneElement {
    /**
     * Default constructor for NutritionOrderEnteralFormulaAdministration from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["quantity"] !== undefined) {
            this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["rateQuantity"] !== undefined) {
            this.rateQuantity = new fhirModels.Quantity(source.rateQuantity);
        }
        if (source["rateRatio"] !== undefined) {
            this.rateRatio = new fhirModels.Ratio(source.rateRatio);
        }
        if (source["schedule"] !== undefined) {
            this.schedule = new fhirModels.Timing(source.schedule);
        }
    }
    /**
     * Factory function to create a NutritionOrderEnteralFormulaAdministration from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new NutritionOrderEnteralFormulaAdministration(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `NutritionOrderEnteralFormulaAdministration is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current NutritionOrderEnteralFormulaAdministration contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.NutritionOrderEnteralFormulaAdministration = NutritionOrderEnteralFormulaAdministration;
/**
 * Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
 */
class NutritionOrderEnteralFormula extends fhirModels.BackboneElement {
    /**
     * Default constructor for NutritionOrderEnteralFormula from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["additiveProductName"] !== undefined) {
            this.additiveProductName = source.additiveProductName;
        }
        if (source["_additiveProductName"] !== undefined) {
            this._additiveProductName = new fhirModels.Element(source._additiveProductName);
        }
        if (source["additiveType"] !== undefined) {
            this.additiveType = new fhirModels.CodeableConcept(source.additiveType);
        }
        if (source["administration"] !== undefined) {
            this.administration = source.administration.map((x) => new fhirModels.NutritionOrderEnteralFormulaAdministration(x));
        }
        if (source["administrationInstruction"] !== undefined) {
            this.administrationInstruction = source.administrationInstruction;
        }
        if (source["_administrationInstruction"] !== undefined) {
            this._administrationInstruction = new fhirModels.Element(source._administrationInstruction);
        }
        if (source["baseFormulaProductName"] !== undefined) {
            this.baseFormulaProductName = source.baseFormulaProductName;
        }
        if (source["_baseFormulaProductName"] !== undefined) {
            this._baseFormulaProductName = new fhirModels.Element(source._baseFormulaProductName);
        }
        if (source["baseFormulaType"] !== undefined) {
            this.baseFormulaType = new fhirModels.CodeableConcept(source.baseFormulaType);
        }
        if (source["caloricDensity"] !== undefined) {
            this.caloricDensity = new fhirModels.Quantity(source.caloricDensity);
        }
        if (source["maxVolumeToDeliver"] !== undefined) {
            this.maxVolumeToDeliver = new fhirModels.Quantity(source.maxVolumeToDeliver);
        }
        if (source["routeofAdministration"] !== undefined) {
            this.routeofAdministration = new fhirModels.CodeableConcept(source.routeofAdministration);
        }
    }
    /**
     * Factory function to create a NutritionOrderEnteralFormula from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new NutritionOrderEnteralFormula(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `NutritionOrderEnteralFormula is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current NutritionOrderEnteralFormula contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.NutritionOrderEnteralFormula = NutritionOrderEnteralFormula;
/**
 * A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
 */
class NutritionOrder extends fhirModels.DomainResource {
    /**
     * Default constructor for NutritionOrder from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "NutritionOrder";
        if ((source['resourceType'] !== "NutritionOrder") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a NutritionOrder';
        }
        if (source["allergyIntolerance"] !== undefined) {
            this.allergyIntolerance = source.allergyIntolerance.map((x) => new fhirModels.Reference(x));
        }
        if (source["dateTime"] !== undefined) {
            this.dateTime = source.dateTime;
        }
        if (source["_dateTime"] !== undefined) {
            this._dateTime = new fhirModels.Element(source._dateTime);
        }
        if (source["encounter"] !== undefined) {
            this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["enteralFormula"] !== undefined) {
            this.enteralFormula = new fhirModels.NutritionOrderEnteralFormula(source.enteralFormula);
        }
        if (source["excludeFoodModifier"] !== undefined) {
            this.excludeFoodModifier = source.excludeFoodModifier.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["foodPreferenceModifier"] !== undefined) {
            this.foodPreferenceModifier = source.foodPreferenceModifier.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["instantiates"] !== undefined) {
            this.instantiates = source.instantiates.map((x) => (x));
        }
        if (source["_instantiates"] !== undefined) {
            this._instantiates = source._instantiates.map((x) => new fhirModels.Element(x));
        }
        if (source["instantiatesCanonical"] !== undefined) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => (x));
        }
        if (source["_instantiatesCanonical"] !== undefined) {
            this._instantiatesCanonical = source._instantiatesCanonical.map((x) => new fhirModels.Element(x));
        }
        if (source["instantiatesUri"] !== undefined) {
            this.instantiatesUri = source.instantiatesUri.map((x) => (x));
        }
        if (source["_instantiatesUri"] !== undefined) {
            this._instantiatesUri = source._instantiatesUri.map((x) => new fhirModels.Element(x));
        }
        if (source["intent"] !== undefined) {
            this.intent = source.intent;
        }
        if (source["_intent"] !== undefined) {
            this._intent = new fhirModels.Element(source._intent);
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["oralDiet"] !== undefined) {
            this.oralDiet = new fhirModels.NutritionOrderOralDiet(source.oralDiet);
        }
        if (source["orderer"] !== undefined) {
            this.orderer = new fhirModels.Reference(source.orderer);
        }
        if (source["patient"] !== undefined) {
            this.patient = new fhirModels.Reference(source.patient);
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["supplement"] !== undefined) {
            this.supplement = source.supplement.map((x) => new fhirModels.NutritionOrderSupplement(x));
        }
    }
    /**
     * Factory function to create a NutritionOrder from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new NutritionOrder(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `NutritionOrder is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current NutritionOrder contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["dateTime"] === undefined) {
            missingElements.push("dateTime");
        }
        if (this["intent"] === undefined) {
            missingElements.push("intent");
        }
        if (this["patient"] === undefined) {
            missingElements.push("patient");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.NutritionOrder = NutritionOrder;
/**
 * Code Values for the NutritionOrder.intent field
 */
var NutritionOrderIntentEnum;
(function (NutritionOrderIntentEnum) {
    NutritionOrderIntentEnum["PROPOSAL"] = "proposal";
    NutritionOrderIntentEnum["PLAN"] = "plan";
    NutritionOrderIntentEnum["DIRECTIVE"] = "directive";
    NutritionOrderIntentEnum["ORDER"] = "order";
    NutritionOrderIntentEnum["ORIGINAL_ORDER"] = "original-order";
    NutritionOrderIntentEnum["REFLEX_ORDER"] = "reflex-order";
    NutritionOrderIntentEnum["FILLER_ORDER"] = "filler-order";
    NutritionOrderIntentEnum["INSTANCE_ORDER"] = "instance-order";
    NutritionOrderIntentEnum["OPTION"] = "option";
})(NutritionOrderIntentEnum = exports.NutritionOrderIntentEnum || (exports.NutritionOrderIntentEnum = {}));
/**
 * Code Values for the NutritionOrder.status field
 */
var NutritionOrderStatusEnum;
(function (NutritionOrderStatusEnum) {
    NutritionOrderStatusEnum["DRAFT"] = "draft";
    NutritionOrderStatusEnum["ACTIVE"] = "active";
    NutritionOrderStatusEnum["ON_HOLD"] = "on-hold";
    NutritionOrderStatusEnum["REVOKED"] = "revoked";
    NutritionOrderStatusEnum["COMPLETED"] = "completed";
    NutritionOrderStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    NutritionOrderStatusEnum["UNKNOWN"] = "unknown";
})(NutritionOrderStatusEnum = exports.NutritionOrderStatusEnum || (exports.NutritionOrderStatusEnum = {}));
//# sourceMappingURL=NutritionOrder.js.map