var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * Class that defines the quantity and type of nutrient modifications (for example carbohydrate, fiber or sodium) required for the oral diet.
 */
var NutritionOrderOralDietNutrient = /** @class */ (function (_super) {
    __extends(NutritionOrderOralDietNutrient, _super);
    /**
     * Default constructor for NutritionOrderOralDietNutrient from an object that MAY NOT contain all required elements.
     */
    function NutritionOrderOralDietNutrient(source) {
        var _this = _super.call(this, source) || this;
        if (source["amount"] !== undefined) {
            _this.amount = new fhirModels.Quantity(source.amount);
        }
        if (source["modifier"] !== undefined) {
            _this.modifier = new fhirModels.CodeableConcept(source.modifier);
        }
        return _this;
    }
    /**
     * Factory function to create a NutritionOrderOralDietNutrient from an object that MUST contain all required elements.
     */
    NutritionOrderOralDietNutrient.CreateStrict = function (source) {
        var dest = new NutritionOrderOralDietNutrient(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "NutritionOrderOralDietNutrient is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current NutritionOrderOralDietNutrient contains all required elements.
     */
    NutritionOrderOralDietNutrient.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return NutritionOrderOralDietNutrient;
}(fhirModels.BackboneElement));
export { NutritionOrderOralDietNutrient };
/**
 * Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
 */
var NutritionOrderOralDietTexture = /** @class */ (function (_super) {
    __extends(NutritionOrderOralDietTexture, _super);
    /**
     * Default constructor for NutritionOrderOralDietTexture from an object that MAY NOT contain all required elements.
     */
    function NutritionOrderOralDietTexture(source) {
        var _this = _super.call(this, source) || this;
        if (source["foodType"] !== undefined) {
            _this.foodType = new fhirModels.CodeableConcept(source.foodType);
        }
        if (source["modifier"] !== undefined) {
            _this.modifier = new fhirModels.CodeableConcept(source.modifier);
        }
        return _this;
    }
    /**
     * Factory function to create a NutritionOrderOralDietTexture from an object that MUST contain all required elements.
     */
    NutritionOrderOralDietTexture.CreateStrict = function (source) {
        var dest = new NutritionOrderOralDietTexture(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "NutritionOrderOralDietTexture is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current NutritionOrderOralDietTexture contains all required elements.
     */
    NutritionOrderOralDietTexture.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return NutritionOrderOralDietTexture;
}(fhirModels.BackboneElement));
export { NutritionOrderOralDietTexture };
/**
 * Diet given orally in contrast to enteral (tube) feeding.
 */
var NutritionOrderOralDiet = /** @class */ (function (_super) {
    __extends(NutritionOrderOralDiet, _super);
    /**
     * Default constructor for NutritionOrderOralDiet from an object that MAY NOT contain all required elements.
     */
    function NutritionOrderOralDiet(source) {
        var _this = _super.call(this, source) || this;
        if (source["fluidConsistencyType"] !== undefined) {
            _this.fluidConsistencyType = source.fluidConsistencyType.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["instruction"] !== undefined) {
            _this.instruction = source.instruction;
        }
        if (source["_instruction"] !== undefined) {
            _this._instruction = new fhirModels.Element(source._instruction);
        }
        if (source["nutrient"] !== undefined) {
            _this.nutrient = source.nutrient.map(function (x) { return new fhirModels.NutritionOrderOralDietNutrient(x); });
        }
        if (source["schedule"] !== undefined) {
            _this.schedule = source.schedule.map(function (x) { return new fhirModels.Timing(x); });
        }
        if (source["texture"] !== undefined) {
            _this.texture = source.texture.map(function (x) { return new fhirModels.NutritionOrderOralDietTexture(x); });
        }
        if (source["type"] !== undefined) {
            _this.type = source.type.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a NutritionOrderOralDiet from an object that MUST contain all required elements.
     */
    NutritionOrderOralDiet.CreateStrict = function (source) {
        var dest = new NutritionOrderOralDiet(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "NutritionOrderOralDiet is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current NutritionOrderOralDiet contains all required elements.
     */
    NutritionOrderOralDiet.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return NutritionOrderOralDiet;
}(fhirModels.BackboneElement));
export { NutritionOrderOralDiet };
/**
 * Oral nutritional products given in order to add further nutritional value to the patient's diet.
 */
var NutritionOrderSupplement = /** @class */ (function (_super) {
    __extends(NutritionOrderSupplement, _super);
    /**
     * Default constructor for NutritionOrderSupplement from an object that MAY NOT contain all required elements.
     */
    function NutritionOrderSupplement(source) {
        var _this = _super.call(this, source) || this;
        if (source["instruction"] !== undefined) {
            _this.instruction = source.instruction;
        }
        if (source["_instruction"] !== undefined) {
            _this._instruction = new fhirModels.Element(source._instruction);
        }
        if (source["productName"] !== undefined) {
            _this.productName = source.productName;
        }
        if (source["_productName"] !== undefined) {
            _this._productName = new fhirModels.Element(source._productName);
        }
        if (source["quantity"] !== undefined) {
            _this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["schedule"] !== undefined) {
            _this.schedule = source.schedule.map(function (x) { return new fhirModels.Timing(x); });
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    /**
     * Factory function to create a NutritionOrderSupplement from an object that MUST contain all required elements.
     */
    NutritionOrderSupplement.CreateStrict = function (source) {
        var dest = new NutritionOrderSupplement(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "NutritionOrderSupplement is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current NutritionOrderSupplement contains all required elements.
     */
    NutritionOrderSupplement.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return NutritionOrderSupplement;
}(fhirModels.BackboneElement));
export { NutritionOrderSupplement };
/**
 * See implementation notes below for further discussion on how to order continuous vs bolus enteral feeding using this resource.
 */
var NutritionOrderEnteralFormulaAdministration = /** @class */ (function (_super) {
    __extends(NutritionOrderEnteralFormulaAdministration, _super);
    /**
     * Default constructor for NutritionOrderEnteralFormulaAdministration from an object that MAY NOT contain all required elements.
     */
    function NutritionOrderEnteralFormulaAdministration(source) {
        var _this = _super.call(this, source) || this;
        if (source["quantity"] !== undefined) {
            _this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["rateQuantity"] !== undefined) {
            _this.rateQuantity = new fhirModels.Quantity(source.rateQuantity);
        }
        if (source["rateRatio"] !== undefined) {
            _this.rateRatio = new fhirModels.Ratio(source.rateRatio);
        }
        if (source["schedule"] !== undefined) {
            _this.schedule = new fhirModels.Timing(source.schedule);
        }
        return _this;
    }
    /**
     * Factory function to create a NutritionOrderEnteralFormulaAdministration from an object that MUST contain all required elements.
     */
    NutritionOrderEnteralFormulaAdministration.CreateStrict = function (source) {
        var dest = new NutritionOrderEnteralFormulaAdministration(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "NutritionOrderEnteralFormulaAdministration is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current NutritionOrderEnteralFormulaAdministration contains all required elements.
     */
    NutritionOrderEnteralFormulaAdministration.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return NutritionOrderEnteralFormulaAdministration;
}(fhirModels.BackboneElement));
export { NutritionOrderEnteralFormulaAdministration };
/**
 * Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
 */
var NutritionOrderEnteralFormula = /** @class */ (function (_super) {
    __extends(NutritionOrderEnteralFormula, _super);
    /**
     * Default constructor for NutritionOrderEnteralFormula from an object that MAY NOT contain all required elements.
     */
    function NutritionOrderEnteralFormula(source) {
        var _this = _super.call(this, source) || this;
        if (source["additiveProductName"] !== undefined) {
            _this.additiveProductName = source.additiveProductName;
        }
        if (source["_additiveProductName"] !== undefined) {
            _this._additiveProductName = new fhirModels.Element(source._additiveProductName);
        }
        if (source["additiveType"] !== undefined) {
            _this.additiveType = new fhirModels.CodeableConcept(source.additiveType);
        }
        if (source["administration"] !== undefined) {
            _this.administration = source.administration.map(function (x) { return new fhirModels.NutritionOrderEnteralFormulaAdministration(x); });
        }
        if (source["administrationInstruction"] !== undefined) {
            _this.administrationInstruction = source.administrationInstruction;
        }
        if (source["_administrationInstruction"] !== undefined) {
            _this._administrationInstruction = new fhirModels.Element(source._administrationInstruction);
        }
        if (source["baseFormulaProductName"] !== undefined) {
            _this.baseFormulaProductName = source.baseFormulaProductName;
        }
        if (source["_baseFormulaProductName"] !== undefined) {
            _this._baseFormulaProductName = new fhirModels.Element(source._baseFormulaProductName);
        }
        if (source["baseFormulaType"] !== undefined) {
            _this.baseFormulaType = new fhirModels.CodeableConcept(source.baseFormulaType);
        }
        if (source["caloricDensity"] !== undefined) {
            _this.caloricDensity = new fhirModels.Quantity(source.caloricDensity);
        }
        if (source["maxVolumeToDeliver"] !== undefined) {
            _this.maxVolumeToDeliver = new fhirModels.Quantity(source.maxVolumeToDeliver);
        }
        if (source["routeofAdministration"] !== undefined) {
            _this.routeofAdministration = new fhirModels.CodeableConcept(source.routeofAdministration);
        }
        return _this;
    }
    /**
     * Factory function to create a NutritionOrderEnteralFormula from an object that MUST contain all required elements.
     */
    NutritionOrderEnteralFormula.CreateStrict = function (source) {
        var dest = new NutritionOrderEnteralFormula(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "NutritionOrderEnteralFormula is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current NutritionOrderEnteralFormula contains all required elements.
     */
    NutritionOrderEnteralFormula.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return NutritionOrderEnteralFormula;
}(fhirModels.BackboneElement));
export { NutritionOrderEnteralFormula };
/**
 * A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
 */
var NutritionOrder = /** @class */ (function (_super) {
    __extends(NutritionOrder, _super);
    /**
     * Default constructor for NutritionOrder from an object that MAY NOT contain all required elements.
     */
    function NutritionOrder(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "NutritionOrder";
        if ((source['resourceType'] !== "NutritionOrder") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a NutritionOrder';
        }
        if (source["allergyIntolerance"] !== undefined) {
            _this.allergyIntolerance = source.allergyIntolerance.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["dateTime"] !== undefined) {
            _this.dateTime = source.dateTime;
        }
        if (source["_dateTime"] !== undefined) {
            _this._dateTime = new fhirModels.Element(source._dateTime);
        }
        if (source["encounter"] !== undefined) {
            _this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["enteralFormula"] !== undefined) {
            _this.enteralFormula = new fhirModels.NutritionOrderEnteralFormula(source.enteralFormula);
        }
        if (source["excludeFoodModifier"] !== undefined) {
            _this.excludeFoodModifier = source.excludeFoodModifier.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["foodPreferenceModifier"] !== undefined) {
            _this.foodPreferenceModifier = source.foodPreferenceModifier.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["instantiates"] !== undefined) {
            _this.instantiates = source.instantiates.map(function (x) { return (x); });
        }
        if (source["_instantiates"] !== undefined) {
            _this._instantiates = source._instantiates.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["instantiatesCanonical"] !== undefined) {
            _this.instantiatesCanonical = source.instantiatesCanonical.map(function (x) { return (x); });
        }
        if (source["_instantiatesCanonical"] !== undefined) {
            _this._instantiatesCanonical = source._instantiatesCanonical.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["instantiatesUri"] !== undefined) {
            _this.instantiatesUri = source.instantiatesUri.map(function (x) { return (x); });
        }
        if (source["_instantiatesUri"] !== undefined) {
            _this._instantiatesUri = source._instantiatesUri.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["intent"] !== undefined) {
            _this.intent = source.intent;
        }
        if (source["_intent"] !== undefined) {
            _this._intent = new fhirModels.Element(source._intent);
        }
        if (source["note"] !== undefined) {
            _this.note = source.note.map(function (x) { return new fhirModels.Annotation(x); });
        }
        if (source["oralDiet"] !== undefined) {
            _this.oralDiet = new fhirModels.NutritionOrderOralDiet(source.oralDiet);
        }
        if (source["orderer"] !== undefined) {
            _this.orderer = new fhirModels.Reference(source.orderer);
        }
        if (source["patient"] !== undefined) {
            _this.patient = new fhirModels.Reference(source.patient);
        }
        if (source["status"] !== undefined) {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["supplement"] !== undefined) {
            _this.supplement = source.supplement.map(function (x) { return new fhirModels.NutritionOrderSupplement(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a NutritionOrder from an object that MUST contain all required elements.
     */
    NutritionOrder.CreateStrict = function (source) {
        var dest = new NutritionOrder(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "NutritionOrder is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current NutritionOrder contains all required elements.
     */
    NutritionOrder.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["dateTime"] === undefined) {
            missingElements.push("dateTime");
        }
        if (this["intent"] === undefined) {
            missingElements.push("intent");
        }
        if (this["patient"] === undefined) {
            missingElements.push("patient");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return NutritionOrder;
}(fhirModels.DomainResource));
export { NutritionOrder };
/**
 * Code Values for the NutritionOrder.intent field
 */
export var NutritionOrderIntentEnum;
(function (NutritionOrderIntentEnum) {
    NutritionOrderIntentEnum["PROPOSAL"] = "proposal";
    NutritionOrderIntentEnum["PLAN"] = "plan";
    NutritionOrderIntentEnum["DIRECTIVE"] = "directive";
    NutritionOrderIntentEnum["ORDER"] = "order";
    NutritionOrderIntentEnum["ORIGINAL_ORDER"] = "original-order";
    NutritionOrderIntentEnum["REFLEX_ORDER"] = "reflex-order";
    NutritionOrderIntentEnum["FILLER_ORDER"] = "filler-order";
    NutritionOrderIntentEnum["INSTANCE_ORDER"] = "instance-order";
    NutritionOrderIntentEnum["OPTION"] = "option";
})(NutritionOrderIntentEnum || (NutritionOrderIntentEnum = {}));
/**
 * Code Values for the NutritionOrder.status field
 */
export var NutritionOrderStatusEnum;
(function (NutritionOrderStatusEnum) {
    NutritionOrderStatusEnum["DRAFT"] = "draft";
    NutritionOrderStatusEnum["ACTIVE"] = "active";
    NutritionOrderStatusEnum["ON_HOLD"] = "on-hold";
    NutritionOrderStatusEnum["REVOKED"] = "revoked";
    NutritionOrderStatusEnum["COMPLETED"] = "completed";
    NutritionOrderStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    NutritionOrderStatusEnum["UNKNOWN"] = "unknown";
})(NutritionOrderStatusEnum || (NutritionOrderStatusEnum = {}));
