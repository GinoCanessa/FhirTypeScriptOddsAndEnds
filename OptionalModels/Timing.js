var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * A set of rules that describe when the event is scheduled.
 */
var TimingRepeat = /** @class */ (function (_super) {
    __extends(TimingRepeat, _super);
    /**
     * Default constructor for TimingRepeat from an object that MAY NOT contain all required elements.
     */
    function TimingRepeat(source) {
        var _this = _super.call(this, source) || this;
        if (source["boundsDuration"] !== undefined) {
            _this.boundsDuration = new fhirModels.Duration(source.boundsDuration);
        }
        if (source["boundsRange"] !== undefined) {
            _this.boundsRange = new fhirModels.Range(source.boundsRange);
        }
        if (source["boundsPeriod"] !== undefined) {
            _this.boundsPeriod = new fhirModels.Period(source.boundsPeriod);
        }
        if (source["count"] !== undefined) {
            _this.count = source.count;
        }
        if (source["_count"] !== undefined) {
            _this._count = new fhirModels.Element(source._count);
        }
        if (source["countMax"] !== undefined) {
            _this.countMax = source.countMax;
        }
        if (source["_countMax"] !== undefined) {
            _this._countMax = new fhirModels.Element(source._countMax);
        }
        if (source["dayOfWeek"] !== undefined) {
            _this.dayOfWeek = source.dayOfWeek.map(function (x) { return (x); });
        }
        if (source["_dayOfWeek"] !== undefined) {
            _this._dayOfWeek = source._dayOfWeek.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["duration"] !== undefined) {
            _this.duration = source.duration;
        }
        if (source["_duration"] !== undefined) {
            _this._duration = new fhirModels.Element(source._duration);
        }
        if (source["durationMax"] !== undefined) {
            _this.durationMax = source.durationMax;
        }
        if (source["_durationMax"] !== undefined) {
            _this._durationMax = new fhirModels.Element(source._durationMax);
        }
        if (source["durationUnit"] !== undefined) {
            _this.durationUnit = source.durationUnit;
        }
        if (source["_durationUnit"] !== undefined) {
            _this._durationUnit = new fhirModels.Element(source._durationUnit);
        }
        if (source["frequency"] !== undefined) {
            _this.frequency = source.frequency;
        }
        if (source["_frequency"] !== undefined) {
            _this._frequency = new fhirModels.Element(source._frequency);
        }
        if (source["frequencyMax"] !== undefined) {
            _this.frequencyMax = source.frequencyMax;
        }
        if (source["_frequencyMax"] !== undefined) {
            _this._frequencyMax = new fhirModels.Element(source._frequencyMax);
        }
        if (source["offset"] !== undefined) {
            _this.offset = source.offset;
        }
        if (source["_offset"] !== undefined) {
            _this._offset = new fhirModels.Element(source._offset);
        }
        if (source["period"] !== undefined) {
            _this.period = source.period;
        }
        if (source["_period"] !== undefined) {
            _this._period = new fhirModels.Element(source._period);
        }
        if (source["periodMax"] !== undefined) {
            _this.periodMax = source.periodMax;
        }
        if (source["_periodMax"] !== undefined) {
            _this._periodMax = new fhirModels.Element(source._periodMax);
        }
        if (source["periodUnit"] !== undefined) {
            _this.periodUnit = source.periodUnit;
        }
        if (source["_periodUnit"] !== undefined) {
            _this._periodUnit = new fhirModels.Element(source._periodUnit);
        }
        if (source["timeOfDay"] !== undefined) {
            _this.timeOfDay = source.timeOfDay.map(function (x) { return (x); });
        }
        if (source["_timeOfDay"] !== undefined) {
            _this._timeOfDay = source._timeOfDay.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["when"] !== undefined) {
            _this.when = source.when.map(function (x) { return (x); });
        }
        if (source["_when"] !== undefined) {
            _this._when = source._when.map(function (x) { return new fhirModels.Element(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a TimingRepeat from an object that MUST contain all required elements.
     */
    TimingRepeat.CreateStrict = function (source) {
        var dest = new TimingRepeat(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "TimingRepeat is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current TimingRepeat contains all required elements.
     */
    TimingRepeat.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return TimingRepeat;
}(fhirModels.Element));
export { TimingRepeat };
/**
 * Code Values for the Timing.repeat.dayOfWeek field
 */
export var TimingRepeatDayOfWeekEnum;
(function (TimingRepeatDayOfWeekEnum) {
    TimingRepeatDayOfWeekEnum["MON"] = "mon";
    TimingRepeatDayOfWeekEnum["TUE"] = "tue";
    TimingRepeatDayOfWeekEnum["WED"] = "wed";
    TimingRepeatDayOfWeekEnum["THU"] = "thu";
    TimingRepeatDayOfWeekEnum["FRI"] = "fri";
    TimingRepeatDayOfWeekEnum["SAT"] = "sat";
    TimingRepeatDayOfWeekEnum["SUN"] = "sun";
})(TimingRepeatDayOfWeekEnum || (TimingRepeatDayOfWeekEnum = {}));
/**
 * Code Values for the Timing.repeat.durationUnit field
 */
export var TimingRepeatDurationUnitEnum;
(function (TimingRepeatDurationUnitEnum) {
    TimingRepeatDurationUnitEnum["S"] = "s";
    TimingRepeatDurationUnitEnum["MIN"] = "min";
    TimingRepeatDurationUnitEnum["H"] = "h";
    TimingRepeatDurationUnitEnum["D"] = "d";
    TimingRepeatDurationUnitEnum["WK"] = "wk";
    TimingRepeatDurationUnitEnum["MO"] = "mo";
    TimingRepeatDurationUnitEnum["A"] = "a";
})(TimingRepeatDurationUnitEnum || (TimingRepeatDurationUnitEnum = {}));
/**
 * Code Values for the Timing.repeat.periodUnit field
 */
export var TimingRepeatPeriodUnitEnum;
(function (TimingRepeatPeriodUnitEnum) {
    TimingRepeatPeriodUnitEnum["S"] = "s";
    TimingRepeatPeriodUnitEnum["MIN"] = "min";
    TimingRepeatPeriodUnitEnum["H"] = "h";
    TimingRepeatPeriodUnitEnum["D"] = "d";
    TimingRepeatPeriodUnitEnum["WK"] = "wk";
    TimingRepeatPeriodUnitEnum["MO"] = "mo";
    TimingRepeatPeriodUnitEnum["A"] = "a";
})(TimingRepeatPeriodUnitEnum || (TimingRepeatPeriodUnitEnum = {}));
/**
 * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
 */
var Timing = /** @class */ (function (_super) {
    __extends(Timing, _super);
    /**
     * Default constructor for Timing from an object that MAY NOT contain all required elements.
     */
    function Timing(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["event"] !== undefined) {
            _this.event = source.event.map(function (x) { return (x); });
        }
        if (source["_event"] !== undefined) {
            _this._event = source._event.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["repeat"] !== undefined) {
            _this.repeat = new fhirModels.TimingRepeat(source.repeat);
        }
        return _this;
    }
    /**
     * Factory function to create a Timing from an object that MUST contain all required elements.
     */
    Timing.CreateStrict = function (source) {
        var dest = new Timing(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "Timing is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current Timing contains all required elements.
     */
    Timing.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return Timing;
}(fhirModels.BackboneElement));
export { Timing };
