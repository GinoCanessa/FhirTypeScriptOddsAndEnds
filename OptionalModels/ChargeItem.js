var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * Indicates who or what performed or participated in the charged service.
 */
var ChargeItemPerformer = /** @class */ (function (_super) {
    __extends(ChargeItemPerformer, _super);
    /**
     * Default constructor for ChargeItemPerformer from an object that MAY NOT contain all required elements.
     */
    function ChargeItemPerformer(source) {
        var _this = _super.call(this, source) || this;
        if (source["actor"] !== undefined) {
            _this.actor = new fhirModels.Reference(source.actor);
        }
        if (source["function"] !== undefined) {
            _this["function"] = new fhirModels.CodeableConcept(source["function"]);
        }
        return _this;
    }
    /**
     * Factory function to create a ChargeItemPerformer from an object that MUST contain all required elements.
     */
    ChargeItemPerformer.CreateStrict = function (source) {
        var dest = new ChargeItemPerformer(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ChargeItemPerformer is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ChargeItemPerformer contains all required elements.
     */
    ChargeItemPerformer.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["actor"] === undefined) {
            missingElements.push("actor");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ChargeItemPerformer;
}(fhirModels.BackboneElement));
export { ChargeItemPerformer };
/**
 * The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation.
 */
var ChargeItem = /** @class */ (function (_super) {
    __extends(ChargeItem, _super);
    /**
     * Default constructor for ChargeItem from an object that MAY NOT contain all required elements.
     */
    function ChargeItem(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "ChargeItem";
        if ((source['resourceType'] !== "ChargeItem") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a ChargeItem';
        }
        if (source["account"] !== undefined) {
            _this.account = source.account.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["bodysite"] !== undefined) {
            _this.bodysite = source.bodysite.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["code"] !== undefined) {
            _this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["context"] !== undefined) {
            _this.context = new fhirModels.Reference(source.context);
        }
        if (source["costCenter"] !== undefined) {
            _this.costCenter = new fhirModels.Reference(source.costCenter);
        }
        if (source["definitionCanonical"] !== undefined) {
            _this.definitionCanonical = source.definitionCanonical.map(function (x) { return (x); });
        }
        if (source["_definitionCanonical"] !== undefined) {
            _this._definitionCanonical = source._definitionCanonical.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["definitionUri"] !== undefined) {
            _this.definitionUri = source.definitionUri.map(function (x) { return (x); });
        }
        if (source["_definitionUri"] !== undefined) {
            _this._definitionUri = source._definitionUri.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["enteredDate"] !== undefined) {
            _this.enteredDate = source.enteredDate;
        }
        if (source["_enteredDate"] !== undefined) {
            _this._enteredDate = new fhirModels.Element(source._enteredDate);
        }
        if (source["enterer"] !== undefined) {
            _this.enterer = new fhirModels.Reference(source.enterer);
        }
        if (source["factorOverride"] !== undefined) {
            _this.factorOverride = source.factorOverride;
        }
        if (source["_factorOverride"] !== undefined) {
            _this._factorOverride = new fhirModels.Element(source._factorOverride);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["note"] !== undefined) {
            _this.note = source.note.map(function (x) { return new fhirModels.Annotation(x); });
        }
        if (source["occurrenceDateTime"] !== undefined) {
            _this.occurrenceDateTime = source.occurrenceDateTime;
        }
        if (source["_occurrenceDateTime"] !== undefined) {
            _this._occurrenceDateTime = new fhirModels.Element(source._occurrenceDateTime);
        }
        if (source["occurrencePeriod"] !== undefined) {
            _this.occurrencePeriod = new fhirModels.Period(source.occurrencePeriod);
        }
        if (source["occurrenceTiming"] !== undefined) {
            _this.occurrenceTiming = new fhirModels.Timing(source.occurrenceTiming);
        }
        if (source["overrideReason"] !== undefined) {
            _this.overrideReason = source.overrideReason;
        }
        if (source["_overrideReason"] !== undefined) {
            _this._overrideReason = new fhirModels.Element(source._overrideReason);
        }
        if (source["partOf"] !== undefined) {
            _this.partOf = source.partOf.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["performer"] !== undefined) {
            _this.performer = source.performer.map(function (x) { return new fhirModels.ChargeItemPerformer(x); });
        }
        if (source["performingOrganization"] !== undefined) {
            _this.performingOrganization = new fhirModels.Reference(source.performingOrganization);
        }
        if (source["priceOverride"] !== undefined) {
            _this.priceOverride = new fhirModels.Money(source.priceOverride);
        }
        if (source["productReference"] !== undefined) {
            _this.productReference = new fhirModels.Reference(source.productReference);
        }
        if (source["productCodeableConcept"] !== undefined) {
            _this.productCodeableConcept = new fhirModels.CodeableConcept(source.productCodeableConcept);
        }
        if (source["quantity"] !== undefined) {
            _this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["reason"] !== undefined) {
            _this.reason = source.reason.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["requestingOrganization"] !== undefined) {
            _this.requestingOrganization = new fhirModels.Reference(source.requestingOrganization);
        }
        if (source["service"] !== undefined) {
            _this.service = source.service.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["status"] !== undefined) {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["subject"] !== undefined) {
            _this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["supportingInformation"] !== undefined) {
            _this.supportingInformation = source.supportingInformation.map(function (x) { return new fhirModels.Reference(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a ChargeItem from an object that MUST contain all required elements.
     */
    ChargeItem.CreateStrict = function (source) {
        var dest = new ChargeItem(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ChargeItem is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ChargeItem contains all required elements.
     */
    ChargeItem.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["subject"] === undefined) {
            missingElements.push("subject");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ChargeItem;
}(fhirModels.DomainResource));
export { ChargeItem };
/**
 * Code Values for the ChargeItem.status field
 */
export var ChargeItemStatusEnum;
(function (ChargeItemStatusEnum) {
    ChargeItemStatusEnum["PLANNED"] = "planned";
    ChargeItemStatusEnum["BILLABLE"] = "billable";
    ChargeItemStatusEnum["NOT_BILLABLE"] = "not-billable";
    ChargeItemStatusEnum["ABORTED"] = "aborted";
    ChargeItemStatusEnum["BILLED"] = "billed";
    ChargeItemStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    ChargeItemStatusEnum["UNKNOWN"] = "unknown";
})(ChargeItemStatusEnum || (ChargeItemStatusEnum = {}));
