"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImagingStudyStatusEnum = exports.ImagingStudy = exports.ImagingStudySeries = exports.ImagingStudySeriesInstance = exports.ImagingStudySeriesPerformer = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * If the person who performed the series is not known, their Organization may be recorded. A patient, or related person, may be the performer, e.g. for patient-captured images.
 */
class ImagingStudySeriesPerformer extends fhirModels.BackboneElement {
    /**
     * Default constructor for ImagingStudySeriesPerformer from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["actor"] !== undefined) {
            this.actor = new fhirModels.Reference(source.actor);
        }
        if (source["function"] !== undefined) {
            this.function = new fhirModels.CodeableConcept(source.function);
        }
    }
    /**
     * Factory function to create a ImagingStudySeriesPerformer from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ImagingStudySeriesPerformer(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ImagingStudySeriesPerformer is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ImagingStudySeriesPerformer contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["actor"] === undefined) {
            missingElements.push("actor");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ImagingStudySeriesPerformer = ImagingStudySeriesPerformer;
/**
 * A single SOP instance within the series, e.g. an image, or presentation state.
 */
class ImagingStudySeriesInstance extends fhirModels.BackboneElement {
    /**
     * Default constructor for ImagingStudySeriesInstance from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["number"] !== undefined) {
            this.number = source.number;
        }
        if (source["_number"] !== undefined) {
            this._number = new fhirModels.Element(source._number);
        }
        if (source["sopClass"] !== undefined) {
            this.sopClass = new fhirModels.Coding(source.sopClass);
        }
        if (source["title"] !== undefined) {
            this.title = source.title;
        }
        if (source["_title"] !== undefined) {
            this._title = new fhirModels.Element(source._title);
        }
        if (source["uid"] !== undefined) {
            this.uid = source.uid;
        }
        if (source["_uid"] !== undefined) {
            this._uid = new fhirModels.Element(source._uid);
        }
    }
    /**
     * Factory function to create a ImagingStudySeriesInstance from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ImagingStudySeriesInstance(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ImagingStudySeriesInstance is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ImagingStudySeriesInstance contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["sopClass"] === undefined) {
            missingElements.push("sopClass");
        }
        if (this["uid"] === undefined) {
            missingElements.push("uid");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ImagingStudySeriesInstance = ImagingStudySeriesInstance;
/**
 * Each study has one or more series of images or other content.
 */
class ImagingStudySeries extends fhirModels.BackboneElement {
    /**
     * Default constructor for ImagingStudySeries from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["bodySite"] !== undefined) {
            this.bodySite = new fhirModels.Coding(source.bodySite);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["endpoint"] !== undefined) {
            this.endpoint = source.endpoint.map((x) => new fhirModels.Reference(x));
        }
        if (source["instance"] !== undefined) {
            this.instance = source.instance.map((x) => new fhirModels.ImagingStudySeriesInstance(x));
        }
        if (source["laterality"] !== undefined) {
            this.laterality = new fhirModels.Coding(source.laterality);
        }
        if (source["modality"] !== undefined) {
            this.modality = new fhirModels.Coding(source.modality);
        }
        if (source["number"] !== undefined) {
            this.number = source.number;
        }
        if (source["_number"] !== undefined) {
            this._number = new fhirModels.Element(source._number);
        }
        if (source["numberOfInstances"] !== undefined) {
            this.numberOfInstances = source.numberOfInstances;
        }
        if (source["_numberOfInstances"] !== undefined) {
            this._numberOfInstances = new fhirModels.Element(source._numberOfInstances);
        }
        if (source["performer"] !== undefined) {
            this.performer = source.performer.map((x) => new fhirModels.ImagingStudySeriesPerformer(x));
        }
        if (source["specimen"] !== undefined) {
            this.specimen = source.specimen.map((x) => new fhirModels.Reference(x));
        }
        if (source["started"] !== undefined) {
            this.started = source.started;
        }
        if (source["_started"] !== undefined) {
            this._started = new fhirModels.Element(source._started);
        }
        if (source["uid"] !== undefined) {
            this.uid = source.uid;
        }
        if (source["_uid"] !== undefined) {
            this._uid = new fhirModels.Element(source._uid);
        }
    }
    /**
     * Factory function to create a ImagingStudySeries from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ImagingStudySeries(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ImagingStudySeries is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ImagingStudySeries contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["modality"] === undefined) {
            missingElements.push("modality");
        }
        if (this["uid"] === undefined) {
            missingElements.push("uid");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ImagingStudySeries = ImagingStudySeries;
/**
 * Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
 */
class ImagingStudy extends fhirModels.DomainResource {
    /**
     * Default constructor for ImagingStudy from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "ImagingStudy";
        if ((source['resourceType'] !== "ImagingStudy") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a ImagingStudy';
        }
        if (source["basedOn"] !== undefined) {
            this.basedOn = source.basedOn.map((x) => new fhirModels.Reference(x));
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["encounter"] !== undefined) {
            this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["endpoint"] !== undefined) {
            this.endpoint = source.endpoint.map((x) => new fhirModels.Reference(x));
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["interpreter"] !== undefined) {
            this.interpreter = source.interpreter.map((x) => new fhirModels.Reference(x));
        }
        if (source["location"] !== undefined) {
            this.location = new fhirModels.Reference(source.location);
        }
        if (source["modality"] !== undefined) {
            this.modality = source.modality.map((x) => new fhirModels.Coding(x));
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["numberOfInstances"] !== undefined) {
            this.numberOfInstances = source.numberOfInstances;
        }
        if (source["_numberOfInstances"] !== undefined) {
            this._numberOfInstances = new fhirModels.Element(source._numberOfInstances);
        }
        if (source["numberOfSeries"] !== undefined) {
            this.numberOfSeries = source.numberOfSeries;
        }
        if (source["_numberOfSeries"] !== undefined) {
            this._numberOfSeries = new fhirModels.Element(source._numberOfSeries);
        }
        if (source["procedureCode"] !== undefined) {
            this.procedureCode = source.procedureCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["procedureReference"] !== undefined) {
            this.procedureReference = new fhirModels.Reference(source.procedureReference);
        }
        if (source["reasonCode"] !== undefined) {
            this.reasonCode = source.reasonCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["reasonReference"] !== undefined) {
            this.reasonReference = source.reasonReference.map((x) => new fhirModels.Reference(x));
        }
        if (source["referrer"] !== undefined) {
            this.referrer = new fhirModels.Reference(source.referrer);
        }
        if (source["series"] !== undefined) {
            this.series = source.series.map((x) => new fhirModels.ImagingStudySeries(x));
        }
        if (source["started"] !== undefined) {
            this.started = source.started;
        }
        if (source["_started"] !== undefined) {
            this._started = new fhirModels.Element(source._started);
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["subject"] !== undefined) {
            this.subject = new fhirModels.Reference(source.subject);
        }
    }
    /**
     * Factory function to create a ImagingStudy from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ImagingStudy(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ImagingStudy is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ImagingStudy contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["subject"] === undefined) {
            missingElements.push("subject");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ImagingStudy = ImagingStudy;
/**
 * Code Values for the ImagingStudy.status field
 */
var ImagingStudyStatusEnum;
(function (ImagingStudyStatusEnum) {
    ImagingStudyStatusEnum["REGISTERED"] = "registered";
    ImagingStudyStatusEnum["AVAILABLE"] = "available";
    ImagingStudyStatusEnum["CANCELLED"] = "cancelled";
    ImagingStudyStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    ImagingStudyStatusEnum["UNKNOWN"] = "unknown";
})(ImagingStudyStatusEnum = exports.ImagingStudyStatusEnum || (exports.ImagingStudyStatusEnum = {}));
//# sourceMappingURL=ImagingStudy.js.map