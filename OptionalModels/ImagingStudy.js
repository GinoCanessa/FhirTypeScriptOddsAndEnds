var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * If the person who performed the series is not known, their Organization may be recorded. A patient, or related person, may be the performer, e.g. for patient-captured images.
 */
var ImagingStudySeriesPerformer = /** @class */ (function (_super) {
    __extends(ImagingStudySeriesPerformer, _super);
    /**
     * Default constructor for ImagingStudySeriesPerformer from an object that MAY NOT contain all required elements.
     */
    function ImagingStudySeriesPerformer(source) {
        var _this = _super.call(this, source) || this;
        if (source["actor"] !== undefined) {
            _this.actor = new fhirModels.Reference(source.actor);
        }
        if (source["function"] !== undefined) {
            _this["function"] = new fhirModels.CodeableConcept(source["function"]);
        }
        return _this;
    }
    /**
     * Factory function to create a ImagingStudySeriesPerformer from an object that MUST contain all required elements.
     */
    ImagingStudySeriesPerformer.CreateStrict = function (source) {
        var dest = new ImagingStudySeriesPerformer(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ImagingStudySeriesPerformer is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ImagingStudySeriesPerformer contains all required elements.
     */
    ImagingStudySeriesPerformer.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["actor"] === undefined) {
            missingElements.push("actor");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ImagingStudySeriesPerformer;
}(fhirModels.BackboneElement));
export { ImagingStudySeriesPerformer };
/**
 * A single SOP instance within the series, e.g. an image, or presentation state.
 */
var ImagingStudySeriesInstance = /** @class */ (function (_super) {
    __extends(ImagingStudySeriesInstance, _super);
    /**
     * Default constructor for ImagingStudySeriesInstance from an object that MAY NOT contain all required elements.
     */
    function ImagingStudySeriesInstance(source) {
        var _this = _super.call(this, source) || this;
        if (source["number"] !== undefined) {
            _this.number = source.number;
        }
        if (source["_number"] !== undefined) {
            _this._number = new fhirModels.Element(source._number);
        }
        if (source["sopClass"] !== undefined) {
            _this.sopClass = new fhirModels.Coding(source.sopClass);
        }
        if (source["title"] !== undefined) {
            _this.title = source.title;
        }
        if (source["_title"] !== undefined) {
            _this._title = new fhirModels.Element(source._title);
        }
        if (source["uid"] !== undefined) {
            _this.uid = source.uid;
        }
        if (source["_uid"] !== undefined) {
            _this._uid = new fhirModels.Element(source._uid);
        }
        return _this;
    }
    /**
     * Factory function to create a ImagingStudySeriesInstance from an object that MUST contain all required elements.
     */
    ImagingStudySeriesInstance.CreateStrict = function (source) {
        var dest = new ImagingStudySeriesInstance(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ImagingStudySeriesInstance is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ImagingStudySeriesInstance contains all required elements.
     */
    ImagingStudySeriesInstance.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["sopClass"] === undefined) {
            missingElements.push("sopClass");
        }
        if (this["uid"] === undefined) {
            missingElements.push("uid");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ImagingStudySeriesInstance;
}(fhirModels.BackboneElement));
export { ImagingStudySeriesInstance };
/**
 * Each study has one or more series of images or other content.
 */
var ImagingStudySeries = /** @class */ (function (_super) {
    __extends(ImagingStudySeries, _super);
    /**
     * Default constructor for ImagingStudySeries from an object that MAY NOT contain all required elements.
     */
    function ImagingStudySeries(source) {
        var _this = _super.call(this, source) || this;
        if (source["bodySite"] !== undefined) {
            _this.bodySite = new fhirModels.Coding(source.bodySite);
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["endpoint"] !== undefined) {
            _this.endpoint = source.endpoint.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["instance"] !== undefined) {
            _this.instance = source.instance.map(function (x) { return new fhirModels.ImagingStudySeriesInstance(x); });
        }
        if (source["laterality"] !== undefined) {
            _this.laterality = new fhirModels.Coding(source.laterality);
        }
        if (source["modality"] !== undefined) {
            _this.modality = new fhirModels.Coding(source.modality);
        }
        if (source["number"] !== undefined) {
            _this.number = source.number;
        }
        if (source["_number"] !== undefined) {
            _this._number = new fhirModels.Element(source._number);
        }
        if (source["numberOfInstances"] !== undefined) {
            _this.numberOfInstances = source.numberOfInstances;
        }
        if (source["_numberOfInstances"] !== undefined) {
            _this._numberOfInstances = new fhirModels.Element(source._numberOfInstances);
        }
        if (source["performer"] !== undefined) {
            _this.performer = source.performer.map(function (x) { return new fhirModels.ImagingStudySeriesPerformer(x); });
        }
        if (source["specimen"] !== undefined) {
            _this.specimen = source.specimen.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["started"] !== undefined) {
            _this.started = source.started;
        }
        if (source["_started"] !== undefined) {
            _this._started = new fhirModels.Element(source._started);
        }
        if (source["uid"] !== undefined) {
            _this.uid = source.uid;
        }
        if (source["_uid"] !== undefined) {
            _this._uid = new fhirModels.Element(source._uid);
        }
        return _this;
    }
    /**
     * Factory function to create a ImagingStudySeries from an object that MUST contain all required elements.
     */
    ImagingStudySeries.CreateStrict = function (source) {
        var dest = new ImagingStudySeries(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ImagingStudySeries is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ImagingStudySeries contains all required elements.
     */
    ImagingStudySeries.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["modality"] === undefined) {
            missingElements.push("modality");
        }
        if (this["uid"] === undefined) {
            missingElements.push("uid");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ImagingStudySeries;
}(fhirModels.BackboneElement));
export { ImagingStudySeries };
/**
 * Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
 */
var ImagingStudy = /** @class */ (function (_super) {
    __extends(ImagingStudy, _super);
    /**
     * Default constructor for ImagingStudy from an object that MAY NOT contain all required elements.
     */
    function ImagingStudy(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "ImagingStudy";
        if ((source['resourceType'] !== "ImagingStudy") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a ImagingStudy';
        }
        if (source["basedOn"] !== undefined) {
            _this.basedOn = source.basedOn.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["encounter"] !== undefined) {
            _this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["endpoint"] !== undefined) {
            _this.endpoint = source.endpoint.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["interpreter"] !== undefined) {
            _this.interpreter = source.interpreter.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["location"] !== undefined) {
            _this.location = new fhirModels.Reference(source.location);
        }
        if (source["modality"] !== undefined) {
            _this.modality = source.modality.map(function (x) { return new fhirModels.Coding(x); });
        }
        if (source["note"] !== undefined) {
            _this.note = source.note.map(function (x) { return new fhirModels.Annotation(x); });
        }
        if (source["numberOfInstances"] !== undefined) {
            _this.numberOfInstances = source.numberOfInstances;
        }
        if (source["_numberOfInstances"] !== undefined) {
            _this._numberOfInstances = new fhirModels.Element(source._numberOfInstances);
        }
        if (source["numberOfSeries"] !== undefined) {
            _this.numberOfSeries = source.numberOfSeries;
        }
        if (source["_numberOfSeries"] !== undefined) {
            _this._numberOfSeries = new fhirModels.Element(source._numberOfSeries);
        }
        if (source["procedureCode"] !== undefined) {
            _this.procedureCode = source.procedureCode.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["procedureReference"] !== undefined) {
            _this.procedureReference = new fhirModels.Reference(source.procedureReference);
        }
        if (source["reasonCode"] !== undefined) {
            _this.reasonCode = source.reasonCode.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["reasonReference"] !== undefined) {
            _this.reasonReference = source.reasonReference.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["referrer"] !== undefined) {
            _this.referrer = new fhirModels.Reference(source.referrer);
        }
        if (source["series"] !== undefined) {
            _this.series = source.series.map(function (x) { return new fhirModels.ImagingStudySeries(x); });
        }
        if (source["started"] !== undefined) {
            _this.started = source.started;
        }
        if (source["_started"] !== undefined) {
            _this._started = new fhirModels.Element(source._started);
        }
        if (source["status"] !== undefined) {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["subject"] !== undefined) {
            _this.subject = new fhirModels.Reference(source.subject);
        }
        return _this;
    }
    /**
     * Factory function to create a ImagingStudy from an object that MUST contain all required elements.
     */
    ImagingStudy.CreateStrict = function (source) {
        var dest = new ImagingStudy(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "ImagingStudy is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current ImagingStudy contains all required elements.
     */
    ImagingStudy.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["subject"] === undefined) {
            missingElements.push("subject");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return ImagingStudy;
}(fhirModels.DomainResource));
export { ImagingStudy };
/**
 * Code Values for the ImagingStudy.status field
 */
export var ImagingStudyStatusEnum;
(function (ImagingStudyStatusEnum) {
    ImagingStudyStatusEnum["REGISTERED"] = "registered";
    ImagingStudyStatusEnum["AVAILABLE"] = "available";
    ImagingStudyStatusEnum["CANCELLED"] = "cancelled";
    ImagingStudyStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    ImagingStudyStatusEnum["UNKNOWN"] = "unknown";
})(ImagingStudyStatusEnum || (ImagingStudyStatusEnum = {}));
