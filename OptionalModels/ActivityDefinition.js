"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActivityDefinitionStatusEnum = exports.ActivityDefinitionPriorityEnum = exports.ActivityDefinitionIntentEnum = exports.ActivityDefinition = exports.ActivityDefinitionDynamicValue = exports.ActivityDefinitionParticipantTypeEnum = exports.ActivityDefinitionParticipant = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * Indicates who should participate in performing the action described.
 */
class ActivityDefinitionParticipant extends fhirModels.BackboneElement {
    /**
     * Default constructor for ActivityDefinitionParticipant from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["role"] !== undefined) {
            this.role = new fhirModels.CodeableConcept(source.role);
        }
        if (source["type"] !== undefined) {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
    }
    /**
     * Factory function to create a ActivityDefinitionParticipant from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ActivityDefinitionParticipant(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ActivityDefinitionParticipant is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ActivityDefinitionParticipant contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ActivityDefinitionParticipant = ActivityDefinitionParticipant;
/**
 * Code Values for the ActivityDefinition.participant.type field
 */
var ActivityDefinitionParticipantTypeEnum;
(function (ActivityDefinitionParticipantTypeEnum) {
    ActivityDefinitionParticipantTypeEnum["PATIENT"] = "patient";
    ActivityDefinitionParticipantTypeEnum["PRACTITIONER"] = "practitioner";
    ActivityDefinitionParticipantTypeEnum["RELATED_PERSON"] = "related-person";
    ActivityDefinitionParticipantTypeEnum["DEVICE"] = "device";
})(ActivityDefinitionParticipantTypeEnum = exports.ActivityDefinitionParticipantTypeEnum || (exports.ActivityDefinitionParticipantTypeEnum = {}));
/**
 * Dynamic values are applied in the order in which they are defined in the ActivityDefinition. Note that if both a transform and dynamic values are specified, the dynamic values will be applied to the result of the transform.
 */
class ActivityDefinitionDynamicValue extends fhirModels.BackboneElement {
    /**
     * Default constructor for ActivityDefinitionDynamicValue from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["expression"] !== undefined) {
            this.expression = new fhirModels.Expression(source.expression);
        }
        if (source["path"] !== undefined) {
            this.path = source.path;
        }
        if (source["_path"] !== undefined) {
            this._path = new fhirModels.Element(source._path);
        }
    }
    /**
     * Factory function to create a ActivityDefinitionDynamicValue from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ActivityDefinitionDynamicValue(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ActivityDefinitionDynamicValue is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ActivityDefinitionDynamicValue contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["expression"] === undefined) {
            missingElements.push("expression");
        }
        if (this["path"] === undefined) {
            missingElements.push("path");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ActivityDefinitionDynamicValue = ActivityDefinitionDynamicValue;
/**
 * This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context.
 */
class ActivityDefinition extends fhirModels.DomainResource {
    /**
     * Default constructor for ActivityDefinition from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "ActivityDefinition";
        if ((source['resourceType'] !== "ActivityDefinition") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a ActivityDefinition';
        }
        if (source["approvalDate"] !== undefined) {
            this.approvalDate = source.approvalDate;
        }
        if (source["_approvalDate"] !== undefined) {
            this._approvalDate = new fhirModels.Element(source._approvalDate);
        }
        if (source["author"] !== undefined) {
            this.author = source.author.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["bodySite"] !== undefined) {
            this.bodySite = source.bodySite.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["contact"] !== undefined) {
            this.contact = source.contact.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["copyright"] !== undefined) {
            this.copyright = source.copyright;
        }
        if (source["_copyright"] !== undefined) {
            this._copyright = new fhirModels.Element(source._copyright);
        }
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["doNotPerform"] !== undefined) {
            this.doNotPerform = source.doNotPerform;
        }
        if (source["_doNotPerform"] !== undefined) {
            this._doNotPerform = new fhirModels.Element(source._doNotPerform);
        }
        if (source["dosage"] !== undefined) {
            this.dosage = source.dosage.map((x) => new fhirModels.Dosage(x));
        }
        if (source["dynamicValue"] !== undefined) {
            this.dynamicValue = source.dynamicValue.map((x) => new fhirModels.ActivityDefinitionDynamicValue(x));
        }
        if (source["editor"] !== undefined) {
            this.editor = source.editor.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["effectivePeriod"] !== undefined) {
            this.effectivePeriod = new fhirModels.Period(source.effectivePeriod);
        }
        if (source["endorser"] !== undefined) {
            this.endorser = source.endorser.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["experimental"] !== undefined) {
            this.experimental = source.experimental;
        }
        if (source["_experimental"] !== undefined) {
            this._experimental = new fhirModels.Element(source._experimental);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["intent"] !== undefined) {
            this.intent = source.intent;
        }
        if (source["_intent"] !== undefined) {
            this._intent = new fhirModels.Element(source._intent);
        }
        if (source["jurisdiction"] !== undefined) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["kind"] !== undefined) {
            this.kind = source.kind;
        }
        if (source["_kind"] !== undefined) {
            this._kind = new fhirModels.Element(source._kind);
        }
        if (source["lastReviewDate"] !== undefined) {
            this.lastReviewDate = source.lastReviewDate;
        }
        if (source["_lastReviewDate"] !== undefined) {
            this._lastReviewDate = new fhirModels.Element(source._lastReviewDate);
        }
        if (source["library"] !== undefined) {
            this.library = source.library.map((x) => (x));
        }
        if (source["_library"] !== undefined) {
            this._library = source._library.map((x) => new fhirModels.Element(x));
        }
        if (source["location"] !== undefined) {
            this.location = new fhirModels.Reference(source.location);
        }
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["observationRequirement"] !== undefined) {
            this.observationRequirement = source.observationRequirement.map((x) => new fhirModels.Reference(x));
        }
        if (source["observationResultRequirement"] !== undefined) {
            this.observationResultRequirement = source.observationResultRequirement.map((x) => new fhirModels.Reference(x));
        }
        if (source["participant"] !== undefined) {
            this.participant = source.participant.map((x) => new fhirModels.ActivityDefinitionParticipant(x));
        }
        if (source["priority"] !== undefined) {
            this.priority = source.priority;
        }
        if (source["_priority"] !== undefined) {
            this._priority = new fhirModels.Element(source._priority);
        }
        if (source["productReference"] !== undefined) {
            this.productReference = new fhirModels.Reference(source.productReference);
        }
        if (source["productCodeableConcept"] !== undefined) {
            this.productCodeableConcept = new fhirModels.CodeableConcept(source.productCodeableConcept);
        }
        if (source["profile"] !== undefined) {
            this.profile = source.profile;
        }
        if (source["_profile"] !== undefined) {
            this._profile = new fhirModels.Element(source._profile);
        }
        if (source["publisher"] !== undefined) {
            this.publisher = source.publisher;
        }
        if (source["_publisher"] !== undefined) {
            this._publisher = new fhirModels.Element(source._publisher);
        }
        if (source["purpose"] !== undefined) {
            this.purpose = source.purpose;
        }
        if (source["_purpose"] !== undefined) {
            this._purpose = new fhirModels.Element(source._purpose);
        }
        if (source["quantity"] !== undefined) {
            this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["relatedArtifact"] !== undefined) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhirModels.RelatedArtifact(x));
        }
        if (source["reviewer"] !== undefined) {
            this.reviewer = source.reviewer.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["specimenRequirement"] !== undefined) {
            this.specimenRequirement = source.specimenRequirement.map((x) => new fhirModels.Reference(x));
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["subjectCodeableConcept"] !== undefined) {
            this.subjectCodeableConcept = new fhirModels.CodeableConcept(source.subjectCodeableConcept);
        }
        if (source["subjectReference"] !== undefined) {
            this.subjectReference = new fhirModels.Reference(source.subjectReference);
        }
        if (source["subtitle"] !== undefined) {
            this.subtitle = source.subtitle;
        }
        if (source["_subtitle"] !== undefined) {
            this._subtitle = new fhirModels.Element(source._subtitle);
        }
        if (source["timingTiming"] !== undefined) {
            this.timingTiming = new fhirModels.Timing(source.timingTiming);
        }
        if (source["timingDateTime"] !== undefined) {
            this.timingDateTime = source.timingDateTime;
        }
        if (source["_timingDateTime"] !== undefined) {
            this._timingDateTime = new fhirModels.Element(source._timingDateTime);
        }
        if (source["timingAge"] !== undefined) {
            this.timingAge = new fhirModels.Age(source.timingAge);
        }
        if (source["timingPeriod"] !== undefined) {
            this.timingPeriod = new fhirModels.Period(source.timingPeriod);
        }
        if (source["timingRange"] !== undefined) {
            this.timingRange = new fhirModels.Range(source.timingRange);
        }
        if (source["timingDuration"] !== undefined) {
            this.timingDuration = new fhirModels.Duration(source.timingDuration);
        }
        if (source["title"] !== undefined) {
            this.title = source.title;
        }
        if (source["_title"] !== undefined) {
            this._title = new fhirModels.Element(source._title);
        }
        if (source["topic"] !== undefined) {
            this.topic = source.topic.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["transform"] !== undefined) {
            this.transform = source.transform;
        }
        if (source["_transform"] !== undefined) {
            this._transform = new fhirModels.Element(source._transform);
        }
        if (source["url"] !== undefined) {
            this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            this._url = new fhirModels.Element(source._url);
        }
        if (source["usage"] !== undefined) {
            this.usage = source.usage;
        }
        if (source["_usage"] !== undefined) {
            this._usage = new fhirModels.Element(source._usage);
        }
        if (source["useContext"] !== undefined) {
            this.useContext = source.useContext.map((x) => new fhirModels.UsageContext(x));
        }
        if (source["version"] !== undefined) {
            this.version = source.version;
        }
        if (source["_version"] !== undefined) {
            this._version = new fhirModels.Element(source._version);
        }
    }
    /**
     * Factory function to create a ActivityDefinition from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ActivityDefinition(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ActivityDefinition is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ActivityDefinition contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ActivityDefinition = ActivityDefinition;
/**
 * Code Values for the ActivityDefinition.intent field
 */
var ActivityDefinitionIntentEnum;
(function (ActivityDefinitionIntentEnum) {
    ActivityDefinitionIntentEnum["PROPOSAL"] = "proposal";
    ActivityDefinitionIntentEnum["PLAN"] = "plan";
    ActivityDefinitionIntentEnum["DIRECTIVE"] = "directive";
    ActivityDefinitionIntentEnum["ORDER"] = "order";
    ActivityDefinitionIntentEnum["ORIGINAL_ORDER"] = "original-order";
    ActivityDefinitionIntentEnum["REFLEX_ORDER"] = "reflex-order";
    ActivityDefinitionIntentEnum["FILLER_ORDER"] = "filler-order";
    ActivityDefinitionIntentEnum["INSTANCE_ORDER"] = "instance-order";
    ActivityDefinitionIntentEnum["OPTION"] = "option";
})(ActivityDefinitionIntentEnum = exports.ActivityDefinitionIntentEnum || (exports.ActivityDefinitionIntentEnum = {}));
/**
 * Code Values for the ActivityDefinition.priority field
 */
var ActivityDefinitionPriorityEnum;
(function (ActivityDefinitionPriorityEnum) {
    ActivityDefinitionPriorityEnum["ROUTINE"] = "routine";
    ActivityDefinitionPriorityEnum["URGENT"] = "urgent";
    ActivityDefinitionPriorityEnum["ASAP"] = "asap";
    ActivityDefinitionPriorityEnum["STAT"] = "stat";
})(ActivityDefinitionPriorityEnum = exports.ActivityDefinitionPriorityEnum || (exports.ActivityDefinitionPriorityEnum = {}));
/**
 * Code Values for the ActivityDefinition.status field
 */
var ActivityDefinitionStatusEnum;
(function (ActivityDefinitionStatusEnum) {
    ActivityDefinitionStatusEnum["DRAFT"] = "draft";
    ActivityDefinitionStatusEnum["ACTIVE"] = "active";
    ActivityDefinitionStatusEnum["RETIRED"] = "retired";
    ActivityDefinitionStatusEnum["UNKNOWN"] = "unknown";
})(ActivityDefinitionStatusEnum = exports.ActivityDefinitionStatusEnum || (exports.ActivityDefinitionStatusEnum = {}));
//# sourceMappingURL=ActivityDefinition.js.map