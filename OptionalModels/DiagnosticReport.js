"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiagnosticReportStatusEnum = exports.DiagnosticReport = exports.DiagnosticReportMedia = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * A list of key images associated with this report. The images are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest).
 */
class DiagnosticReportMedia extends fhirModels.BackboneElement {
    /**
     * Default constructor for DiagnosticReportMedia from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["comment"] !== undefined) {
            this.comment = source.comment;
        }
        if (source["_comment"] !== undefined) {
            this._comment = new fhirModels.Element(source._comment);
        }
        if (source["link"] !== undefined) {
            this.link = new fhirModels.Reference(source.link);
        }
    }
    /**
     * Factory function to create a DiagnosticReportMedia from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new DiagnosticReportMedia(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `DiagnosticReportMedia is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current DiagnosticReportMedia contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["link"] === undefined) {
            missingElements.push("link");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.DiagnosticReportMedia = DiagnosticReportMedia;
/**
 * The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports.
 */
class DiagnosticReport extends fhirModels.DomainResource {
    /**
     * Default constructor for DiagnosticReport from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "DiagnosticReport";
        if ((source['resourceType'] !== "DiagnosticReport") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a DiagnosticReport';
        }
        if (source["basedOn"] !== undefined) {
            this.basedOn = source.basedOn.map((x) => new fhirModels.Reference(x));
        }
        if (source["category"] !== undefined) {
            this.category = source.category.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["conclusion"] !== undefined) {
            this.conclusion = source.conclusion;
        }
        if (source["_conclusion"] !== undefined) {
            this._conclusion = new fhirModels.Element(source._conclusion);
        }
        if (source["conclusionCode"] !== undefined) {
            this.conclusionCode = source.conclusionCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["effectiveDateTime"] !== undefined) {
            this.effectiveDateTime = source.effectiveDateTime;
        }
        if (source["_effectiveDateTime"] !== undefined) {
            this._effectiveDateTime = new fhirModels.Element(source._effectiveDateTime);
        }
        if (source["effectivePeriod"] !== undefined) {
            this.effectivePeriod = new fhirModels.Period(source.effectivePeriod);
        }
        if (source["encounter"] !== undefined) {
            this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["imagingStudy"] !== undefined) {
            this.imagingStudy = source.imagingStudy.map((x) => new fhirModels.Reference(x));
        }
        if (source["issued"] !== undefined) {
            this.issued = source.issued;
        }
        if (source["_issued"] !== undefined) {
            this._issued = new fhirModels.Element(source._issued);
        }
        if (source["media"] !== undefined) {
            this.media = source.media.map((x) => new fhirModels.DiagnosticReportMedia(x));
        }
        if (source["performer"] !== undefined) {
            this.performer = source.performer.map((x) => new fhirModels.Reference(x));
        }
        if (source["presentedForm"] !== undefined) {
            this.presentedForm = source.presentedForm.map((x) => new fhirModels.Attachment(x));
        }
        if (source["result"] !== undefined) {
            this.result = source.result.map((x) => new fhirModels.Reference(x));
        }
        if (source["resultsInterpreter"] !== undefined) {
            this.resultsInterpreter = source.resultsInterpreter.map((x) => new fhirModels.Reference(x));
        }
        if (source["specimen"] !== undefined) {
            this.specimen = source.specimen.map((x) => new fhirModels.Reference(x));
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["subject"] !== undefined) {
            this.subject = new fhirModels.Reference(source.subject);
        }
    }
    /**
     * Factory function to create a DiagnosticReport from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new DiagnosticReport(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `DiagnosticReport is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current DiagnosticReport contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.DiagnosticReport = DiagnosticReport;
/**
 * Code Values for the DiagnosticReport.status field
 */
var DiagnosticReportStatusEnum;
(function (DiagnosticReportStatusEnum) {
    DiagnosticReportStatusEnum["REGISTERED"] = "registered";
    DiagnosticReportStatusEnum["PARTIAL"] = "partial";
    DiagnosticReportStatusEnum["PRELIMINARY"] = "preliminary";
    DiagnosticReportStatusEnum["FINAL"] = "final";
    DiagnosticReportStatusEnum["AMENDED"] = "amended";
    DiagnosticReportStatusEnum["CORRECTED"] = "corrected";
    DiagnosticReportStatusEnum["APPENDED"] = "appended";
    DiagnosticReportStatusEnum["CANCELLED"] = "cancelled";
    DiagnosticReportStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    DiagnosticReportStatusEnum["UNKNOWN"] = "unknown";
})(DiagnosticReportStatusEnum = exports.DiagnosticReportStatusEnum || (exports.DiagnosticReportStatusEnum = {}));
//# sourceMappingURL=DiagnosticReport.js.map