var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * More detailed availability information may be provided in associated Schedule/Slot resources.
 */
var PractitionerRoleAvailableTime = /** @class */ (function (_super) {
    __extends(PractitionerRoleAvailableTime, _super);
    /**
     * Default constructor for PractitionerRoleAvailableTime from an object that MAY NOT contain all required elements.
     */
    function PractitionerRoleAvailableTime(source) {
        var _this = _super.call(this, source) || this;
        if (source["allDay"] !== undefined) {
            _this.allDay = source.allDay;
        }
        if (source["_allDay"] !== undefined) {
            _this._allDay = new fhirModels.Element(source._allDay);
        }
        if (source["availableEndTime"] !== undefined) {
            _this.availableEndTime = source.availableEndTime;
        }
        if (source["_availableEndTime"] !== undefined) {
            _this._availableEndTime = new fhirModels.Element(source._availableEndTime);
        }
        if (source["availableStartTime"] !== undefined) {
            _this.availableStartTime = source.availableStartTime;
        }
        if (source["_availableStartTime"] !== undefined) {
            _this._availableStartTime = new fhirModels.Element(source._availableStartTime);
        }
        if (source["daysOfWeek"] !== undefined) {
            _this.daysOfWeek = source.daysOfWeek.map(function (x) { return (x); });
        }
        if (source["_daysOfWeek"] !== undefined) {
            _this._daysOfWeek = source._daysOfWeek.map(function (x) { return new fhirModels.Element(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a PractitionerRoleAvailableTime from an object that MUST contain all required elements.
     */
    PractitionerRoleAvailableTime.CreateStrict = function (source) {
        var dest = new PractitionerRoleAvailableTime(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "PractitionerRoleAvailableTime is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current PractitionerRoleAvailableTime contains all required elements.
     */
    PractitionerRoleAvailableTime.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return PractitionerRoleAvailableTime;
}(fhirModels.BackboneElement));
export { PractitionerRoleAvailableTime };
/**
 * Code Values for the PractitionerRole.availableTime.daysOfWeek field
 */
export var PractitionerRoleAvailableTimeDaysOfWeekEnum;
(function (PractitionerRoleAvailableTimeDaysOfWeekEnum) {
    PractitionerRoleAvailableTimeDaysOfWeekEnum["MON"] = "mon";
    PractitionerRoleAvailableTimeDaysOfWeekEnum["TUE"] = "tue";
    PractitionerRoleAvailableTimeDaysOfWeekEnum["WED"] = "wed";
    PractitionerRoleAvailableTimeDaysOfWeekEnum["THU"] = "thu";
    PractitionerRoleAvailableTimeDaysOfWeekEnum["FRI"] = "fri";
    PractitionerRoleAvailableTimeDaysOfWeekEnum["SAT"] = "sat";
    PractitionerRoleAvailableTimeDaysOfWeekEnum["SUN"] = "sun";
})(PractitionerRoleAvailableTimeDaysOfWeekEnum || (PractitionerRoleAvailableTimeDaysOfWeekEnum = {}));
/**
 * The practitioner is not available or performing this role during this period of time due to the provided reason.
 */
var PractitionerRoleNotAvailable = /** @class */ (function (_super) {
    __extends(PractitionerRoleNotAvailable, _super);
    /**
     * Default constructor for PractitionerRoleNotAvailable from an object that MAY NOT contain all required elements.
     */
    function PractitionerRoleNotAvailable(source) {
        var _this = _super.call(this, source) || this;
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["during"] !== undefined) {
            _this.during = new fhirModels.Period(source.during);
        }
        return _this;
    }
    /**
     * Factory function to create a PractitionerRoleNotAvailable from an object that MUST contain all required elements.
     */
    PractitionerRoleNotAvailable.CreateStrict = function (source) {
        var dest = new PractitionerRoleNotAvailable(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "PractitionerRoleNotAvailable is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current PractitionerRoleNotAvailable contains all required elements.
     */
    PractitionerRoleNotAvailable.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["description"] === undefined) {
            missingElements.push("description");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return PractitionerRoleNotAvailable;
}(fhirModels.BackboneElement));
export { PractitionerRoleNotAvailable };
/**
 * A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time.
 */
var PractitionerRole = /** @class */ (function (_super) {
    __extends(PractitionerRole, _super);
    /**
     * Default constructor for PractitionerRole from an object that MAY NOT contain all required elements.
     */
    function PractitionerRole(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "PractitionerRole";
        if ((source['resourceType'] !== "PractitionerRole") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a PractitionerRole';
        }
        if (source["active"] !== undefined) {
            _this.active = source.active;
        }
        if (source["_active"] !== undefined) {
            _this._active = new fhirModels.Element(source._active);
        }
        if (source["availabilityExceptions"] !== undefined) {
            _this.availabilityExceptions = source.availabilityExceptions;
        }
        if (source["_availabilityExceptions"] !== undefined) {
            _this._availabilityExceptions = new fhirModels.Element(source._availabilityExceptions);
        }
        if (source["availableTime"] !== undefined) {
            _this.availableTime = source.availableTime.map(function (x) { return new fhirModels.PractitionerRoleAvailableTime(x); });
        }
        if (source["code"] !== undefined) {
            _this.code = source.code.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["endpoint"] !== undefined) {
            _this.endpoint = source.endpoint.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["healthcareService"] !== undefined) {
            _this.healthcareService = source.healthcareService.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["location"] !== undefined) {
            _this.location = source.location.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["notAvailable"] !== undefined) {
            _this.notAvailable = source.notAvailable.map(function (x) { return new fhirModels.PractitionerRoleNotAvailable(x); });
        }
        if (source["organization"] !== undefined) {
            _this.organization = new fhirModels.Reference(source.organization);
        }
        if (source["period"] !== undefined) {
            _this.period = new fhirModels.Period(source.period);
        }
        if (source["practitioner"] !== undefined) {
            _this.practitioner = new fhirModels.Reference(source.practitioner);
        }
        if (source["specialty"] !== undefined) {
            _this.specialty = source.specialty.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["telecom"] !== undefined) {
            _this.telecom = source.telecom.map(function (x) { return new fhirModels.ContactPoint(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a PractitionerRole from an object that MUST contain all required elements.
     */
    PractitionerRole.CreateStrict = function (source) {
        var dest = new PractitionerRole(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "PractitionerRole is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current PractitionerRole contains all required elements.
     */
    PractitionerRole.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return PractitionerRole;
}(fhirModels.DomainResource));
export { PractitionerRole };
