"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PractitionerRole = exports.PractitionerRoleNotAvailable = exports.PractitionerRoleAvailableTimeDaysOfWeekEnum = exports.PractitionerRoleAvailableTime = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * More detailed availability information may be provided in associated Schedule/Slot resources.
 */
class PractitionerRoleAvailableTime extends fhirModels.BackboneElement {
    /**
     * Default constructor for PractitionerRoleAvailableTime from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["allDay"] !== undefined) {
            this.allDay = source.allDay;
        }
        if (source["_allDay"] !== undefined) {
            this._allDay = new fhirModels.Element(source._allDay);
        }
        if (source["availableEndTime"] !== undefined) {
            this.availableEndTime = source.availableEndTime;
        }
        if (source["_availableEndTime"] !== undefined) {
            this._availableEndTime = new fhirModels.Element(source._availableEndTime);
        }
        if (source["availableStartTime"] !== undefined) {
            this.availableStartTime = source.availableStartTime;
        }
        if (source["_availableStartTime"] !== undefined) {
            this._availableStartTime = new fhirModels.Element(source._availableStartTime);
        }
        if (source["daysOfWeek"] !== undefined) {
            this.daysOfWeek = source.daysOfWeek.map((x) => (x));
        }
        if (source["_daysOfWeek"] !== undefined) {
            this._daysOfWeek = source._daysOfWeek.map((x) => new fhirModels.Element(x));
        }
    }
    /**
     * Factory function to create a PractitionerRoleAvailableTime from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new PractitionerRoleAvailableTime(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `PractitionerRoleAvailableTime is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current PractitionerRoleAvailableTime contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.PractitionerRoleAvailableTime = PractitionerRoleAvailableTime;
/**
 * Code Values for the PractitionerRole.availableTime.daysOfWeek field
 */
var PractitionerRoleAvailableTimeDaysOfWeekEnum;
(function (PractitionerRoleAvailableTimeDaysOfWeekEnum) {
    PractitionerRoleAvailableTimeDaysOfWeekEnum["MON"] = "mon";
    PractitionerRoleAvailableTimeDaysOfWeekEnum["TUE"] = "tue";
    PractitionerRoleAvailableTimeDaysOfWeekEnum["WED"] = "wed";
    PractitionerRoleAvailableTimeDaysOfWeekEnum["THU"] = "thu";
    PractitionerRoleAvailableTimeDaysOfWeekEnum["FRI"] = "fri";
    PractitionerRoleAvailableTimeDaysOfWeekEnum["SAT"] = "sat";
    PractitionerRoleAvailableTimeDaysOfWeekEnum["SUN"] = "sun";
})(PractitionerRoleAvailableTimeDaysOfWeekEnum = exports.PractitionerRoleAvailableTimeDaysOfWeekEnum || (exports.PractitionerRoleAvailableTimeDaysOfWeekEnum = {}));
/**
 * The practitioner is not available or performing this role during this period of time due to the provided reason.
 */
class PractitionerRoleNotAvailable extends fhirModels.BackboneElement {
    /**
     * Default constructor for PractitionerRoleNotAvailable from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["during"] !== undefined) {
            this.during = new fhirModels.Period(source.during);
        }
    }
    /**
     * Factory function to create a PractitionerRoleNotAvailable from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new PractitionerRoleNotAvailable(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `PractitionerRoleNotAvailable is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current PractitionerRoleNotAvailable contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["description"] === undefined) {
            missingElements.push("description");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.PractitionerRoleNotAvailable = PractitionerRoleNotAvailable;
/**
 * A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time.
 */
class PractitionerRole extends fhirModels.DomainResource {
    /**
     * Default constructor for PractitionerRole from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "PractitionerRole";
        if ((source['resourceType'] !== "PractitionerRole") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a PractitionerRole';
        }
        if (source["active"] !== undefined) {
            this.active = source.active;
        }
        if (source["_active"] !== undefined) {
            this._active = new fhirModels.Element(source._active);
        }
        if (source["availabilityExceptions"] !== undefined) {
            this.availabilityExceptions = source.availabilityExceptions;
        }
        if (source["_availabilityExceptions"] !== undefined) {
            this._availabilityExceptions = new fhirModels.Element(source._availabilityExceptions);
        }
        if (source["availableTime"] !== undefined) {
            this.availableTime = source.availableTime.map((x) => new fhirModels.PractitionerRoleAvailableTime(x));
        }
        if (source["code"] !== undefined) {
            this.code = source.code.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["endpoint"] !== undefined) {
            this.endpoint = source.endpoint.map((x) => new fhirModels.Reference(x));
        }
        if (source["healthcareService"] !== undefined) {
            this.healthcareService = source.healthcareService.map((x) => new fhirModels.Reference(x));
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["location"] !== undefined) {
            this.location = source.location.map((x) => new fhirModels.Reference(x));
        }
        if (source["notAvailable"] !== undefined) {
            this.notAvailable = source.notAvailable.map((x) => new fhirModels.PractitionerRoleNotAvailable(x));
        }
        if (source["organization"] !== undefined) {
            this.organization = new fhirModels.Reference(source.organization);
        }
        if (source["period"] !== undefined) {
            this.period = new fhirModels.Period(source.period);
        }
        if (source["practitioner"] !== undefined) {
            this.practitioner = new fhirModels.Reference(source.practitioner);
        }
        if (source["specialty"] !== undefined) {
            this.specialty = source.specialty.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["telecom"] !== undefined) {
            this.telecom = source.telecom.map((x) => new fhirModels.ContactPoint(x));
        }
    }
    /**
     * Factory function to create a PractitionerRole from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new PractitionerRole(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `PractitionerRole is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current PractitionerRole contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.PractitionerRole = PractitionerRole;
//# sourceMappingURL=PractitionerRole.js.map