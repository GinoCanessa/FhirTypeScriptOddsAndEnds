var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * Multiple repetitions can be used to identify the same type of outcome in different timeframes as well as different types of outcomes.
 */
var RiskAssessmentPrediction = /** @class */ (function (_super) {
    __extends(RiskAssessmentPrediction, _super);
    /**
     * Default constructor for RiskAssessmentPrediction from an object that MAY NOT contain all required elements.
     */
    function RiskAssessmentPrediction(source) {
        var _this = _super.call(this, source) || this;
        if (source["outcome"] !== undefined) {
            _this.outcome = new fhirModels.CodeableConcept(source.outcome);
        }
        if (source["probabilityDecimal"] !== undefined) {
            _this.probabilityDecimal = source.probabilityDecimal;
        }
        if (source["_probabilityDecimal"] !== undefined) {
            _this._probabilityDecimal = new fhirModels.Element(source._probabilityDecimal);
        }
        if (source["probabilityRange"] !== undefined) {
            _this.probabilityRange = new fhirModels.Range(source.probabilityRange);
        }
        if (source["qualitativeRisk"] !== undefined) {
            _this.qualitativeRisk = new fhirModels.CodeableConcept(source.qualitativeRisk);
        }
        if (source["rationale"] !== undefined) {
            _this.rationale = source.rationale;
        }
        if (source["_rationale"] !== undefined) {
            _this._rationale = new fhirModels.Element(source._rationale);
        }
        if (source["relativeRisk"] !== undefined) {
            _this.relativeRisk = source.relativeRisk;
        }
        if (source["_relativeRisk"] !== undefined) {
            _this._relativeRisk = new fhirModels.Element(source._relativeRisk);
        }
        if (source["whenPeriod"] !== undefined) {
            _this.whenPeriod = new fhirModels.Period(source.whenPeriod);
        }
        if (source["whenRange"] !== undefined) {
            _this.whenRange = new fhirModels.Range(source.whenRange);
        }
        return _this;
    }
    /**
     * Factory function to create a RiskAssessmentPrediction from an object that MUST contain all required elements.
     */
    RiskAssessmentPrediction.CreateStrict = function (source) {
        var dest = new RiskAssessmentPrediction(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "RiskAssessmentPrediction is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current RiskAssessmentPrediction contains all required elements.
     */
    RiskAssessmentPrediction.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return RiskAssessmentPrediction;
}(fhirModels.BackboneElement));
export { RiskAssessmentPrediction };
/**
 * An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.
 */
var RiskAssessment = /** @class */ (function (_super) {
    __extends(RiskAssessment, _super);
    /**
     * Default constructor for RiskAssessment from an object that MAY NOT contain all required elements.
     */
    function RiskAssessment(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "RiskAssessment";
        if ((source['resourceType'] !== "RiskAssessment") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a RiskAssessment';
        }
        if (source["basedOn"] !== undefined) {
            _this.basedOn = new fhirModels.Reference(source.basedOn);
        }
        if (source["basis"] !== undefined) {
            _this.basis = source.basis.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["code"] !== undefined) {
            _this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["condition"] !== undefined) {
            _this.condition = new fhirModels.Reference(source.condition);
        }
        if (source["encounter"] !== undefined) {
            _this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["method"] !== undefined) {
            _this.method = new fhirModels.CodeableConcept(source.method);
        }
        if (source["mitigation"] !== undefined) {
            _this.mitigation = source.mitigation;
        }
        if (source["_mitigation"] !== undefined) {
            _this._mitigation = new fhirModels.Element(source._mitigation);
        }
        if (source["note"] !== undefined) {
            _this.note = source.note.map(function (x) { return new fhirModels.Annotation(x); });
        }
        if (source["occurrenceDateTime"] !== undefined) {
            _this.occurrenceDateTime = source.occurrenceDateTime;
        }
        if (source["_occurrenceDateTime"] !== undefined) {
            _this._occurrenceDateTime = new fhirModels.Element(source._occurrenceDateTime);
        }
        if (source["occurrencePeriod"] !== undefined) {
            _this.occurrencePeriod = new fhirModels.Period(source.occurrencePeriod);
        }
        if (source["parent"] !== undefined) {
            _this.parent = new fhirModels.Reference(source.parent);
        }
        if (source["performer"] !== undefined) {
            _this.performer = new fhirModels.Reference(source.performer);
        }
        if (source["prediction"] !== undefined) {
            _this.prediction = source.prediction.map(function (x) { return new fhirModels.RiskAssessmentPrediction(x); });
        }
        if (source["reasonCode"] !== undefined) {
            _this.reasonCode = source.reasonCode.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["reasonReference"] !== undefined) {
            _this.reasonReference = source.reasonReference.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["status"] !== undefined) {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["subject"] !== undefined) {
            _this.subject = new fhirModels.Reference(source.subject);
        }
        return _this;
    }
    /**
     * Factory function to create a RiskAssessment from an object that MUST contain all required elements.
     */
    RiskAssessment.CreateStrict = function (source) {
        var dest = new RiskAssessment(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "RiskAssessment is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current RiskAssessment contains all required elements.
     */
    RiskAssessment.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["subject"] === undefined) {
            missingElements.push("subject");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return RiskAssessment;
}(fhirModels.DomainResource));
export { RiskAssessment };
/**
 * Code Values for the RiskAssessment.status field
 */
export var RiskAssessmentStatusEnum;
(function (RiskAssessmentStatusEnum) {
    RiskAssessmentStatusEnum["REGISTERED"] = "registered";
    RiskAssessmentStatusEnum["PRELIMINARY"] = "preliminary";
    RiskAssessmentStatusEnum["FINAL"] = "final";
    RiskAssessmentStatusEnum["AMENDED"] = "amended";
    RiskAssessmentStatusEnum["CORRECTED"] = "corrected";
    RiskAssessmentStatusEnum["CANCELLED"] = "cancelled";
    RiskAssessmentStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    RiskAssessmentStatusEnum["UNKNOWN"] = "unknown";
})(RiskAssessmentStatusEnum || (RiskAssessmentStatusEnum = {}));
