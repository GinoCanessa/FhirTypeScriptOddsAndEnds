"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RiskAssessmentStatusEnum = exports.RiskAssessment = exports.RiskAssessmentPrediction = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * Multiple repetitions can be used to identify the same type of outcome in different timeframes as well as different types of outcomes.
 */
class RiskAssessmentPrediction extends fhirModels.BackboneElement {
    /**
     * Default constructor for RiskAssessmentPrediction from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["outcome"] !== undefined) {
            this.outcome = new fhirModels.CodeableConcept(source.outcome);
        }
        if (source["probabilityDecimal"] !== undefined) {
            this.probabilityDecimal = source.probabilityDecimal;
        }
        if (source["_probabilityDecimal"] !== undefined) {
            this._probabilityDecimal = new fhirModels.Element(source._probabilityDecimal);
        }
        if (source["probabilityRange"] !== undefined) {
            this.probabilityRange = new fhirModels.Range(source.probabilityRange);
        }
        if (source["qualitativeRisk"] !== undefined) {
            this.qualitativeRisk = new fhirModels.CodeableConcept(source.qualitativeRisk);
        }
        if (source["rationale"] !== undefined) {
            this.rationale = source.rationale;
        }
        if (source["_rationale"] !== undefined) {
            this._rationale = new fhirModels.Element(source._rationale);
        }
        if (source["relativeRisk"] !== undefined) {
            this.relativeRisk = source.relativeRisk;
        }
        if (source["_relativeRisk"] !== undefined) {
            this._relativeRisk = new fhirModels.Element(source._relativeRisk);
        }
        if (source["whenPeriod"] !== undefined) {
            this.whenPeriod = new fhirModels.Period(source.whenPeriod);
        }
        if (source["whenRange"] !== undefined) {
            this.whenRange = new fhirModels.Range(source.whenRange);
        }
    }
    /**
     * Factory function to create a RiskAssessmentPrediction from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new RiskAssessmentPrediction(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `RiskAssessmentPrediction is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current RiskAssessmentPrediction contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.RiskAssessmentPrediction = RiskAssessmentPrediction;
/**
 * An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.
 */
class RiskAssessment extends fhirModels.DomainResource {
    /**
     * Default constructor for RiskAssessment from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "RiskAssessment";
        if ((source['resourceType'] !== "RiskAssessment") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a RiskAssessment';
        }
        if (source["basedOn"] !== undefined) {
            this.basedOn = new fhirModels.Reference(source.basedOn);
        }
        if (source["basis"] !== undefined) {
            this.basis = source.basis.map((x) => new fhirModels.Reference(x));
        }
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["condition"] !== undefined) {
            this.condition = new fhirModels.Reference(source.condition);
        }
        if (source["encounter"] !== undefined) {
            this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["method"] !== undefined) {
            this.method = new fhirModels.CodeableConcept(source.method);
        }
        if (source["mitigation"] !== undefined) {
            this.mitigation = source.mitigation;
        }
        if (source["_mitigation"] !== undefined) {
            this._mitigation = new fhirModels.Element(source._mitigation);
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["occurrenceDateTime"] !== undefined) {
            this.occurrenceDateTime = source.occurrenceDateTime;
        }
        if (source["_occurrenceDateTime"] !== undefined) {
            this._occurrenceDateTime = new fhirModels.Element(source._occurrenceDateTime);
        }
        if (source["occurrencePeriod"] !== undefined) {
            this.occurrencePeriod = new fhirModels.Period(source.occurrencePeriod);
        }
        if (source["parent"] !== undefined) {
            this.parent = new fhirModels.Reference(source.parent);
        }
        if (source["performer"] !== undefined) {
            this.performer = new fhirModels.Reference(source.performer);
        }
        if (source["prediction"] !== undefined) {
            this.prediction = source.prediction.map((x) => new fhirModels.RiskAssessmentPrediction(x));
        }
        if (source["reasonCode"] !== undefined) {
            this.reasonCode = source.reasonCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["reasonReference"] !== undefined) {
            this.reasonReference = source.reasonReference.map((x) => new fhirModels.Reference(x));
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["subject"] !== undefined) {
            this.subject = new fhirModels.Reference(source.subject);
        }
    }
    /**
     * Factory function to create a RiskAssessment from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new RiskAssessment(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `RiskAssessment is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current RiskAssessment contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["subject"] === undefined) {
            missingElements.push("subject");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.RiskAssessment = RiskAssessment;
/**
 * Code Values for the RiskAssessment.status field
 */
var RiskAssessmentStatusEnum;
(function (RiskAssessmentStatusEnum) {
    RiskAssessmentStatusEnum["REGISTERED"] = "registered";
    RiskAssessmentStatusEnum["PRELIMINARY"] = "preliminary";
    RiskAssessmentStatusEnum["FINAL"] = "final";
    RiskAssessmentStatusEnum["AMENDED"] = "amended";
    RiskAssessmentStatusEnum["CORRECTED"] = "corrected";
    RiskAssessmentStatusEnum["CANCELLED"] = "cancelled";
    RiskAssessmentStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    RiskAssessmentStatusEnum["UNKNOWN"] = "unknown";
})(RiskAssessmentStatusEnum = exports.RiskAssessmentStatusEnum || (exports.RiskAssessmentStatusEnum = {}));
//# sourceMappingURL=RiskAssessment.js.map