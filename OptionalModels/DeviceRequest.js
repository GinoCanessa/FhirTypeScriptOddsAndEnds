var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels';
/**
 * Specific parameters for the ordered item.  For example, the prism value for lenses.
 */
var DeviceRequestParameter = /** @class */ (function (_super) {
    __extends(DeviceRequestParameter, _super);
    /**
     * Default constructor for DeviceRequestParameter from an object that MAY NOT contain all required elements.
     */
    function DeviceRequestParameter(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["valueCodeableConcept"] !== undefined) {
            _this.valueCodeableConcept = new fhirModels.CodeableConcept(source.valueCodeableConcept);
        }
        if (source["valueQuantity"] !== undefined) {
            _this.valueQuantity = new fhirModels.Quantity(source.valueQuantity);
        }
        if (source["valueRange"] !== undefined) {
            _this.valueRange = new fhirModels.Range(source.valueRange);
        }
        if (source["valueBoolean"] !== undefined) {
            _this.valueBoolean = source.valueBoolean;
        }
        if (source["_valueBoolean"] !== undefined) {
            _this._valueBoolean = new fhirModels.Element(source._valueBoolean);
        }
        return _this;
    }
    /**
     * Factory function to create a DeviceRequestParameter from an object that MUST contain all required elements.
     */
    DeviceRequestParameter.CreateStrict = function (source) {
        var dest = new DeviceRequestParameter(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "DeviceRequestParameter is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current DeviceRequestParameter contains all required elements.
     */
    DeviceRequestParameter.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return DeviceRequestParameter;
}(fhirModels.BackboneElement));
export { DeviceRequestParameter };
/**
 * Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.
 */
var DeviceRequest = /** @class */ (function (_super) {
    __extends(DeviceRequest, _super);
    /**
     * Default constructor for DeviceRequest from an object that MAY NOT contain all required elements.
     */
    function DeviceRequest(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "DeviceRequest";
        if ((source['resourceType'] !== "DeviceRequest") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a DeviceRequest';
        }
        if (source["authoredOn"] !== undefined) {
            _this.authoredOn = source.authoredOn;
        }
        if (source["_authoredOn"] !== undefined) {
            _this._authoredOn = new fhirModels.Element(source._authoredOn);
        }
        if (source["basedOn"] !== undefined) {
            _this.basedOn = source.basedOn.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["codeReference"] !== undefined) {
            _this.codeReference = new fhirModels.Reference(source.codeReference);
        }
        if (source["codeCodeableConcept"] !== undefined) {
            _this.codeCodeableConcept = new fhirModels.CodeableConcept(source.codeCodeableConcept);
        }
        if (source["encounter"] !== undefined) {
            _this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["groupIdentifier"] !== undefined) {
            _this.groupIdentifier = new fhirModels.Identifier(source.groupIdentifier);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["instantiatesCanonical"] !== undefined) {
            _this.instantiatesCanonical = source.instantiatesCanonical.map(function (x) { return (x); });
        }
        if (source["_instantiatesCanonical"] !== undefined) {
            _this._instantiatesCanonical = source._instantiatesCanonical.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["instantiatesUri"] !== undefined) {
            _this.instantiatesUri = source.instantiatesUri.map(function (x) { return (x); });
        }
        if (source["_instantiatesUri"] !== undefined) {
            _this._instantiatesUri = source._instantiatesUri.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["insurance"] !== undefined) {
            _this.insurance = source.insurance.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["intent"] !== undefined) {
            _this.intent = source.intent;
        }
        if (source["_intent"] !== undefined) {
            _this._intent = new fhirModels.Element(source._intent);
        }
        if (source["note"] !== undefined) {
            _this.note = source.note.map(function (x) { return new fhirModels.Annotation(x); });
        }
        if (source["occurrenceDateTime"] !== undefined) {
            _this.occurrenceDateTime = source.occurrenceDateTime;
        }
        if (source["_occurrenceDateTime"] !== undefined) {
            _this._occurrenceDateTime = new fhirModels.Element(source._occurrenceDateTime);
        }
        if (source["occurrencePeriod"] !== undefined) {
            _this.occurrencePeriod = new fhirModels.Period(source.occurrencePeriod);
        }
        if (source["occurrenceTiming"] !== undefined) {
            _this.occurrenceTiming = new fhirModels.Timing(source.occurrenceTiming);
        }
        if (source["parameter"] !== undefined) {
            _this.parameter = source.parameter.map(function (x) { return new fhirModels.DeviceRequestParameter(x); });
        }
        if (source["performer"] !== undefined) {
            _this.performer = new fhirModels.Reference(source.performer);
        }
        if (source["performerType"] !== undefined) {
            _this.performerType = new fhirModels.CodeableConcept(source.performerType);
        }
        if (source["priority"] !== undefined) {
            _this.priority = source.priority;
        }
        if (source["_priority"] !== undefined) {
            _this._priority = new fhirModels.Element(source._priority);
        }
        if (source["priorRequest"] !== undefined) {
            _this.priorRequest = source.priorRequest.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["reasonCode"] !== undefined) {
            _this.reasonCode = source.reasonCode.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["reasonReference"] !== undefined) {
            _this.reasonReference = source.reasonReference.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["relevantHistory"] !== undefined) {
            _this.relevantHistory = source.relevantHistory.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["requester"] !== undefined) {
            _this.requester = new fhirModels.Reference(source.requester);
        }
        if (source["status"] !== undefined) {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["subject"] !== undefined) {
            _this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["supportingInfo"] !== undefined) {
            _this.supportingInfo = source.supportingInfo.map(function (x) { return new fhirModels.Reference(x); });
        }
        return _this;
    }
    /**
     * Factory function to create a DeviceRequest from an object that MUST contain all required elements.
     */
    DeviceRequest.CreateStrict = function (source) {
        var dest = new DeviceRequest(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "DeviceRequest is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    /**
     * Check if the current DeviceRequest contains all required elements.
     */
    DeviceRequest.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["intent"] === undefined) {
            missingElements.push("intent");
        }
        if (this["subject"] === undefined) {
            missingElements.push("subject");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    return DeviceRequest;
}(fhirModels.DomainResource));
export { DeviceRequest };
/**
 * Code Values for the DeviceRequest.intent field
 */
export var DeviceRequestIntentEnum;
(function (DeviceRequestIntentEnum) {
    DeviceRequestIntentEnum["PROPOSAL"] = "proposal";
    DeviceRequestIntentEnum["PLAN"] = "plan";
    DeviceRequestIntentEnum["DIRECTIVE"] = "directive";
    DeviceRequestIntentEnum["ORDER"] = "order";
    DeviceRequestIntentEnum["ORIGINAL_ORDER"] = "original-order";
    DeviceRequestIntentEnum["REFLEX_ORDER"] = "reflex-order";
    DeviceRequestIntentEnum["FILLER_ORDER"] = "filler-order";
    DeviceRequestIntentEnum["INSTANCE_ORDER"] = "instance-order";
    DeviceRequestIntentEnum["OPTION"] = "option";
})(DeviceRequestIntentEnum || (DeviceRequestIntentEnum = {}));
/**
 * Code Values for the DeviceRequest.priority field
 */
export var DeviceRequestPriorityEnum;
(function (DeviceRequestPriorityEnum) {
    DeviceRequestPriorityEnum["ROUTINE"] = "routine";
    DeviceRequestPriorityEnum["URGENT"] = "urgent";
    DeviceRequestPriorityEnum["ASAP"] = "asap";
    DeviceRequestPriorityEnum["STAT"] = "stat";
})(DeviceRequestPriorityEnum || (DeviceRequestPriorityEnum = {}));
/**
 * Code Values for the DeviceRequest.status field
 */
export var DeviceRequestStatusEnum;
(function (DeviceRequestStatusEnum) {
    DeviceRequestStatusEnum["DRAFT"] = "draft";
    DeviceRequestStatusEnum["ACTIVE"] = "active";
    DeviceRequestStatusEnum["ON_HOLD"] = "on-hold";
    DeviceRequestStatusEnum["REVOKED"] = "revoked";
    DeviceRequestStatusEnum["COMPLETED"] = "completed";
    DeviceRequestStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    DeviceRequestStatusEnum["UNKNOWN"] = "unknown";
})(DeviceRequestStatusEnum || (DeviceRequestStatusEnum = {}));
