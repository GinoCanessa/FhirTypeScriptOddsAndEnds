"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentReferenceStatusEnum = exports.DocumentReferenceDocStatusEnum = exports.DocumentReference = exports.DocumentReferenceContext = exports.DocumentReferenceContent = exports.DocumentReferenceRelatesToCodeEnum = exports.DocumentReferenceRelatesTo = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * This element is labeled as a modifier because documents that append to other documents are incomplete on their own.
 */
class DocumentReferenceRelatesTo extends fhirModels.BackboneElement {
    /**
     * Default constructor for DocumentReferenceRelatesTo from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            this._code = new fhirModels.Element(source._code);
        }
        if (source["target"] !== undefined) {
            this.target = new fhirModels.Reference(source.target);
        }
    }
    /**
     * Factory function to create a DocumentReferenceRelatesTo from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new DocumentReferenceRelatesTo(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `DocumentReferenceRelatesTo is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current DocumentReferenceRelatesTo contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        if (this["target"] === undefined) {
            missingElements.push("target");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.DocumentReferenceRelatesTo = DocumentReferenceRelatesTo;
/**
 * Code Values for the DocumentReference.relatesTo.code field
 */
var DocumentReferenceRelatesToCodeEnum;
(function (DocumentReferenceRelatesToCodeEnum) {
    DocumentReferenceRelatesToCodeEnum["REPLACES"] = "replaces";
    DocumentReferenceRelatesToCodeEnum["TRANSFORMS"] = "transforms";
    DocumentReferenceRelatesToCodeEnum["SIGNS"] = "signs";
    DocumentReferenceRelatesToCodeEnum["APPENDS"] = "appends";
})(DocumentReferenceRelatesToCodeEnum = exports.DocumentReferenceRelatesToCodeEnum || (exports.DocumentReferenceRelatesToCodeEnum = {}));
/**
 * The document and format referenced. There may be multiple content element repetitions, each with a different format.
 */
class DocumentReferenceContent extends fhirModels.BackboneElement {
    /**
     * Default constructor for DocumentReferenceContent from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["attachment"] !== undefined) {
            this.attachment = new fhirModels.Attachment(source.attachment);
        }
        if (source["format"] !== undefined) {
            this.format = new fhirModels.Coding(source.format);
        }
    }
    /**
     * Factory function to create a DocumentReferenceContent from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new DocumentReferenceContent(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `DocumentReferenceContent is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current DocumentReferenceContent contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["attachment"] === undefined) {
            missingElements.push("attachment");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.DocumentReferenceContent = DocumentReferenceContent;
/**
 * These values are primarily added to help with searching for interesting/relevant documents.
 */
class DocumentReferenceContext extends fhirModels.BackboneElement {
    /**
     * Default constructor for DocumentReferenceContext from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["encounter"] !== undefined) {
            this.encounter = source.encounter.map((x) => new fhirModels.Reference(x));
        }
        if (source["event"] !== undefined) {
            this.event = source.event.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["facilityType"] !== undefined) {
            this.facilityType = new fhirModels.CodeableConcept(source.facilityType);
        }
        if (source["period"] !== undefined) {
            this.period = new fhirModels.Period(source.period);
        }
        if (source["practiceSetting"] !== undefined) {
            this.practiceSetting = new fhirModels.CodeableConcept(source.practiceSetting);
        }
        if (source["related"] !== undefined) {
            this.related = source.related.map((x) => new fhirModels.Reference(x));
        }
        if (source["sourcePatientInfo"] !== undefined) {
            this.sourcePatientInfo = new fhirModels.Reference(source.sourcePatientInfo);
        }
    }
    /**
     * Factory function to create a DocumentReferenceContext from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new DocumentReferenceContext(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `DocumentReferenceContext is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current DocumentReferenceContext contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.DocumentReferenceContext = DocumentReferenceContext;
/**
 * A reference to a document of any kind for any purpose. Provides metadata about the document so that the document can be discovered and managed. The scope of a document is any seralized object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, scanned paper, and non-patient specific documents like policy text.
 */
class DocumentReference extends fhirModels.DomainResource {
    /**
     * Default constructor for DocumentReference from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "DocumentReference";
        if ((source['resourceType'] !== "DocumentReference") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a DocumentReference';
        }
        if (source["authenticator"] !== undefined) {
            this.authenticator = new fhirModels.Reference(source.authenticator);
        }
        if (source["author"] !== undefined) {
            this.author = source.author.map((x) => new fhirModels.Reference(x));
        }
        if (source["category"] !== undefined) {
            this.category = source.category.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["content"] !== undefined) {
            this.content = source.content.map((x) => new fhirModels.DocumentReferenceContent(x));
        }
        if (source["context"] !== undefined) {
            this.context = new fhirModels.DocumentReferenceContext(source.context);
        }
        if (source["custodian"] !== undefined) {
            this.custodian = new fhirModels.Reference(source.custodian);
        }
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["docStatus"] !== undefined) {
            this.docStatus = source.docStatus;
        }
        if (source["_docStatus"] !== undefined) {
            this._docStatus = new fhirModels.Element(source._docStatus);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["masterIdentifier"] !== undefined) {
            this.masterIdentifier = new fhirModels.Identifier(source.masterIdentifier);
        }
        if (source["relatesTo"] !== undefined) {
            this.relatesTo = source.relatesTo.map((x) => new fhirModels.DocumentReferenceRelatesTo(x));
        }
        if (source["securityLabel"] !== undefined) {
            this.securityLabel = source.securityLabel.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["subject"] !== undefined) {
            this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
    /**
     * Factory function to create a DocumentReference from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new DocumentReference(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `DocumentReference is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current DocumentReference contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if ((this["content"] === undefined) || (this["content"].length === 0)) {
            missingElements.push("content");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.DocumentReference = DocumentReference;
/**
 * Code Values for the DocumentReference.docStatus field
 */
var DocumentReferenceDocStatusEnum;
(function (DocumentReferenceDocStatusEnum) {
    DocumentReferenceDocStatusEnum["PRELIMINARY"] = "preliminary";
    DocumentReferenceDocStatusEnum["FINAL"] = "final";
    DocumentReferenceDocStatusEnum["AMENDED"] = "amended";
    DocumentReferenceDocStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(DocumentReferenceDocStatusEnum = exports.DocumentReferenceDocStatusEnum || (exports.DocumentReferenceDocStatusEnum = {}));
/**
 * Code Values for the DocumentReference.status field
 */
var DocumentReferenceStatusEnum;
(function (DocumentReferenceStatusEnum) {
    DocumentReferenceStatusEnum["CURRENT"] = "current";
    DocumentReferenceStatusEnum["SUPERSEDED"] = "superseded";
    DocumentReferenceStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(DocumentReferenceStatusEnum = exports.DocumentReferenceStatusEnum || (exports.DocumentReferenceStatusEnum = {}));
//# sourceMappingURL=DocumentReference.js.map