// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
import * as fhirInterfaces from '../interfaces'
/**
 * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
 */
export class EpisodeOfCareStatusHistory extends fhirModels.BackboneElement implements fhirInterfaces.IEpisodeOfCareStatusHistory {
  /**
   * The period during this EpisodeOfCare that the specific status applied.
   */
  period: fhirModels.Period|undefined;
  /**
   * planned | waitlist | active | onhold | finished | cancelled.
   */
  status: EpisodeOfCareStatusHistoryStatusEnum|undefined;
  _status?: fhirModels.Element|undefined;
  /**
   * Default constructor for EpisodeOfCareStatusHistory from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.IEpisodeOfCareStatusHistory>) {
    super(source);
    if (source["period"] !== undefined) { this.period = new fhirModels.Period(source.period); }
    if (source["status"] !== undefined) { this.status = source.status; }
    if (source["_status"] !== undefined) { this._status = new fhirModels.Element(source._status); }
  }
  /**
   * Check if the current EpisodeOfCareStatusHistory contains all required elements.
   */
  checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["period"] === undefined) { missingElements.push("period"); }
    if (this["status"] === undefined) { missingElements.push("status"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a EpisodeOfCareStatusHistory from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.IEpisodeOfCareStatusHistory):EpisodeOfCareStatusHistory {
    var dest:EpisodeOfCareStatusHistory = new EpisodeOfCareStatusHistory(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `EpisodeOfCareStatusHistory is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
}
/**
 * Code Values for the EpisodeOfCare.statusHistory.status field
 */
export enum EpisodeOfCareStatusHistoryStatusEnum {
  PLANNED = "planned",
  WAITLIST = "waitlist",
  ACTIVE = "active",
  ONHOLD = "onhold",
  FINISHED = "finished",
  CANCELLED = "cancelled",
  ENTERED_IN_ERROR = "entered-in-error",
}
/**
 * The list of diagnosis relevant to this episode of care.
 */
export class EpisodeOfCareDiagnosis extends fhirModels.BackboneElement implements fhirInterfaces.IEpisodeOfCareDiagnosis {
  /**
   * A list of conditions/problems/diagnoses that this episode of care is intended to be providing care for.
   */
  condition: fhirModels.Reference|undefined;
  /**
   * Ranking of the diagnosis (for each role type).
   */
  rank?: number|undefined;
  _rank?: fhirModels.Element|undefined;
  /**
   * Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge â€¦).
   */
  role?: fhirModels.CodeableConcept|undefined;
  /**
   * Default constructor for EpisodeOfCareDiagnosis from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.IEpisodeOfCareDiagnosis>) {
    super(source);
    if (source["condition"] !== undefined) { this.condition = new fhirModels.Reference(source.condition); }
    if (source["rank"] !== undefined) { this.rank = source.rank; }
    if (source["_rank"] !== undefined) { this._rank = new fhirModels.Element(source._rank); }
    if (source["role"] !== undefined) { this.role = new fhirModels.CodeableConcept(source.role); }
  }
  /**
   * Check if the current EpisodeOfCareDiagnosis contains all required elements.
   */
  checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["condition"] === undefined) { missingElements.push("condition"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a EpisodeOfCareDiagnosis from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.IEpisodeOfCareDiagnosis):EpisodeOfCareDiagnosis {
    var dest:EpisodeOfCareDiagnosis = new EpisodeOfCareDiagnosis(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `EpisodeOfCareDiagnosis is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
}
/**
 * An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
 */
export class EpisodeOfCare extends fhirModels.DomainResource implements fhirInterfaces.IEpisodeOfCare {
  /**
   * Resource Type Name
   */
  readonly resourceType = "EpisodeOfCare";
  /**
   * The billing system may choose to allocate billable items associated with the EpisodeOfCare to different referenced Accounts based on internal business rules.
   */
  account?: fhirModels.Reference[]|undefined;
  /**
   * The practitioner that is the care manager/care coordinator for this patient.
   */
  careManager?: fhirModels.Reference|undefined;
  /**
   * The list of diagnosis relevant to this episode of care.
   */
  diagnosis?: fhirModels.EpisodeOfCareDiagnosis[]|undefined;
  /**
   * The EpisodeOfCare may be known by different identifiers for different contexts of use, such as when an external agency is tracking the Episode for funding purposes.
   */
  identifier?: fhirModels.Identifier[]|undefined;
  /**
   * The organization that has assumed the specific responsibilities for the specified duration.
   */
  managingOrganization?: fhirModels.Reference|undefined;
  /**
   * The patient who is the focus of this episode of care.
   */
  patient: fhirModels.Reference|undefined;
  /**
   * The interval during which the managing organization assumes the defined responsibility.
   */
  period?: fhirModels.Period|undefined;
  /**
   * Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.
   */
  referralRequest?: fhirModels.Reference[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the episode as not currently valid.
   */
  status: EpisodeOfCareStatusEnum|undefined;
  _status?: fhirModels.Element|undefined;
  /**
   * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
   */
  statusHistory?: fhirModels.EpisodeOfCareStatusHistory[]|undefined;
  /**
   * The list of practitioners that may be facilitating this episode of care for specific purposes.
   */
  team?: fhirModels.Reference[]|undefined;
  /**
   * The type can be very important in processing as this could be used in determining if the EpisodeOfCare is relevant to specific government reporting, or other types of classifications.
   */
  type?: fhirModels.CodeableConcept[]|undefined;
  /**
   * Default constructor for EpisodeOfCare from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.IEpisodeOfCare>) {
    super(source);
    if ((source['resourceType'] !== "EpisodeOfCare") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a EpisodeOfCare'; }
    if (source["account"] !== undefined) { this.account = source.account.map((x) => new fhirModels.Reference(x)); }
    if (source["careManager"] !== undefined) { this.careManager = new fhirModels.Reference(source.careManager); }
    if (source["diagnosis"] !== undefined) { this.diagnosis = source.diagnosis.map((x) => new fhirModels.EpisodeOfCareDiagnosis(x)); }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x)); }
    if (source["managingOrganization"] !== undefined) { this.managingOrganization = new fhirModels.Reference(source.managingOrganization); }
    if (source["patient"] !== undefined) { this.patient = new fhirModels.Reference(source.patient); }
    if (source["period"] !== undefined) { this.period = new fhirModels.Period(source.period); }
    if (source["referralRequest"] !== undefined) { this.referralRequest = source.referralRequest.map((x) => new fhirModels.Reference(x)); }
    if (source["status"] !== undefined) { this.status = source.status; }
    if (source["_status"] !== undefined) { this._status = new fhirModels.Element(source._status); }
    if (source["statusHistory"] !== undefined) { this.statusHistory = source.statusHistory.map((x) => new fhirModels.EpisodeOfCareStatusHistory(x)); }
    if (source["team"] !== undefined) { this.team = source.team.map((x) => new fhirModels.Reference(x)); }
    if (source["type"] !== undefined) { this.type = source.type.map((x) => new fhirModels.CodeableConcept(x)); }
  }
  /**
   * Check if the current EpisodeOfCare contains all required elements.
   */
  checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["patient"] === undefined) { missingElements.push("patient"); }
    if (this["status"] === undefined) { missingElements.push("status"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a EpisodeOfCare from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.IEpisodeOfCare):EpisodeOfCare {
    var dest:EpisodeOfCare = new EpisodeOfCare(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `EpisodeOfCare is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
}
/**
 * Code Values for the EpisodeOfCare.status field
 */
export enum EpisodeOfCareStatusEnum {
  PLANNED = "planned",
  WAITLIST = "waitlist",
  ACTIVE = "active",
  ONHOLD = "onhold",
  FINISHED = "finished",
  CANCELLED = "cancelled",
  ENTERED_IN_ERROR = "entered-in-error",
}
