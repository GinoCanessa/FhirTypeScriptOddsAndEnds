// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
 */
export class EpisodeOfCareStatusHistory extends fhirModels.BackboneElement {
  /**
   * The period during this EpisodeOfCare that the specific status applied.
   */
  period: fhirModels.Period;
  /**
   * planned | waitlist | active | onhold | finished | cancelled.
   */
  status: EpisodeOfCareStatusHistoryStatusEnum;
  _status?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: EpisodeOfCareStatusHistory) {
    super(source);
    if (source["period"] === undefined) { throw 'Missing required element period';}
    this.period = source.period;
    if (source["status"] === undefined) { throw 'Missing required element status';}
    this.status = source.status;
    if (source["_status"] !== undefined) { this._status = source._status; }
  }
}
/**
 * Code Values for the EpisodeOfCare.statusHistory.status field
 */
export enum EpisodeOfCareStatusHistoryStatusEnum {
  PLANNED = "planned",
  WAITLIST = "waitlist",
  ACTIVE = "active",
  ONHOLD = "onhold",
  FINISHED = "finished",
  CANCELLED = "cancelled",
  ENTERED_IN_ERROR = "entered-in-error",
}
/**
 * The list of diagnosis relevant to this episode of care.
 */
export class EpisodeOfCareDiagnosis extends fhirModels.BackboneElement {
  /**
   * A list of conditions/problems/diagnoses that this episode of care is intended to be providing care for.
   */
  condition: fhirModels.Reference;
  /**
   * Ranking of the diagnosis (for each role type).
   */
  rank?: number;
  _rank?: fhirModels.Element;
  /**
   * Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge â€¦).
   */
  role?: fhirModels.CodeableConcept;
  /**
   * Default constructor
   */
  constructor(source: EpisodeOfCareDiagnosis) {
    super(source);
    if (source["condition"] === undefined) { throw 'Missing required element condition';}
    this.condition = source.condition;
    if (source["rank"] !== undefined) { this.rank = source.rank; }
    if (source["_rank"] !== undefined) { this._rank = source._rank; }
    if (source["role"] !== undefined) { this.role = source.role; }
  }
}
/**
 * An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
 */
export class EpisodeOfCare extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "EpisodeOfCare";
  /**
   * The billing system may choose to allocate billable items associated with the EpisodeOfCare to different referenced Accounts based on internal business rules.
   */
  account?: fhirModels.Reference[];
  /**
   * The practitioner that is the care manager/care coordinator for this patient.
   */
  careManager?: fhirModels.Reference;
  /**
   * The list of diagnosis relevant to this episode of care.
   */
  diagnosis?: fhirModels.EpisodeOfCareDiagnosis[];
  /**
   * The EpisodeOfCare may be known by different identifiers for different contexts of use, such as when an external agency is tracking the Episode for funding purposes.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * The organization that has assumed the specific responsibilities for the specified duration.
   */
  managingOrganization?: fhirModels.Reference;
  /**
   * The patient who is the focus of this episode of care.
   */
  patient: fhirModels.Reference;
  /**
   * The interval during which the managing organization assumes the defined responsibility.
   */
  period?: fhirModels.Period;
  /**
   * Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.
   */
  referralRequest?: fhirModels.Reference[];
  /**
   * This element is labeled as a modifier because the status contains codes that mark the episode as not currently valid.
   */
  status: EpisodeOfCareStatusEnum;
  _status?: fhirModels.Element;
  /**
   * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
   */
  statusHistory?: fhirModels.EpisodeOfCareStatusHistory[];
  /**
   * The list of practitioners that may be facilitating this episode of care for specific purposes.
   */
  team?: fhirModels.Reference[];
  /**
   * The type can be very important in processing as this could be used in determining if the EpisodeOfCare is relevant to specific government reporting, or other types of classifications.
   */
  type?: fhirModels.CodeableConcept[];
  /**
   * Default constructor
   */
  constructor(source: EpisodeOfCare) {
    super(source);
    if ((source['resourceType'] !== "EpisodeOfCare") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a EpisodeOfCare'; }
    if (source["account"] !== undefined) { this.account = source.account; }
    if (source["careManager"] !== undefined) { this.careManager = source.careManager; }
    if (source["diagnosis"] !== undefined) { this.diagnosis = source.diagnosis; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["managingOrganization"] !== undefined) { this.managingOrganization = source.managingOrganization; }
    if (source["patient"] === undefined) { throw 'Missing required element patient';}
    this.patient = source.patient;
    if (source["period"] !== undefined) { this.period = source.period; }
    if (source["referralRequest"] !== undefined) { this.referralRequest = source.referralRequest; }
    if (source["status"] === undefined) { throw 'Missing required element status';}
    this.status = source.status;
    if (source["_status"] !== undefined) { this._status = source._status; }
    if (source["statusHistory"] !== undefined) { this.statusHistory = source.statusHistory; }
    if (source["team"] !== undefined) { this.team = source.team; }
    if (source["type"] !== undefined) { this.type = source.type; }
  }
}
/**
 * Code Values for the EpisodeOfCare.status field
 */
export enum EpisodeOfCareStatusEnum {
  PLANNED = "planned",
  WAITLIST = "waitlist",
  ACTIVE = "active",
  ONHOLD = "onhold",
  FINISHED = "finished",
  CANCELLED = "cancelled",
  ENTERED_IN_ERROR = "entered-in-error",
}
