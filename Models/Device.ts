// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
 */
export class DeviceUdiCarrier extends fhirModels.BackboneElement {
  /**
   * The AIDC form of UDIs should be scanned or otherwise used for the identification of the device whenever possible to minimize errors in records resulting from manual transcriptions. If separate barcodes for DI and PI are present, concatenate the string with DI first and in order of human readable expression on label.
   */
  carrierAIDC?: string;
  _carrierAIDC?: fhirModels.Element;
  /**
   * If separate barcodes for DI and PI are present, concatenate the string with DI first and in order of human readable expression on label.
   */
  carrierHRF?: string;
  _carrierHRF?: fhirModels.Element;
  /**
   * The device identifier (DI) is a mandatory, fixed portion of a UDI that identifies the labeler and the specific version or model of a device.
   */
  deviceIdentifier?: string;
  _deviceIdentifier?: fhirModels.Element;
  /**
   * A coded entry to indicate how the data was entered.
   */
  entryType?: DeviceUdiCarrierEntryTypeEnum;
  _entryType?: fhirModels.Element;
  /**
   * Organization that is charged with issuing UDIs for devices.  For example, the US FDA issuers include :
   * 1) GS1: 
   * http://hl7.org/fhir/NamingSystem/gs1-di, 
   * 2) HIBCC:
   * http://hl7.org/fhir/NamingSystem/hibcc-dI, 
   * 3) ICCBBA for blood containers:
   * http://hl7.org/fhir/NamingSystem/iccbba-blood-di, 
   * 4) ICCBA for other devices:
   * http://hl7.org/fhir/NamingSystem/iccbba-other-di.
   */
  issuer?: string;
  _issuer?: fhirModels.Element;
  /**
   * The identity of the authoritative source for UDI generation within a  jurisdiction.  All UDIs are globally unique within a single namespace with the appropriate repository uri as the system.  For example,  UDIs of devices managed in the U.S. by the FDA, the value is  http://hl7.org/fhir/NamingSystem/fda-udi.
   */
  jurisdiction?: string;
  _jurisdiction?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: DeviceUdiCarrier) {
    super(source);
    if (source["carrierAIDC"] !== undefined) { this.carrierAIDC = source.carrierAIDC; }
    if (source["_carrierAIDC"] !== undefined) { this._carrierAIDC = source._carrierAIDC; }
    if (source["carrierHRF"] !== undefined) { this.carrierHRF = source.carrierHRF; }
    if (source["_carrierHRF"] !== undefined) { this._carrierHRF = source._carrierHRF; }
    if (source["deviceIdentifier"] !== undefined) { this.deviceIdentifier = source.deviceIdentifier; }
    if (source["_deviceIdentifier"] !== undefined) { this._deviceIdentifier = source._deviceIdentifier; }
    if (source["entryType"] !== undefined) { this.entryType = source.entryType; }
    if (source["_entryType"] !== undefined) { this._entryType = source._entryType; }
    if (source["issuer"] !== undefined) { this.issuer = source.issuer; }
    if (source["_issuer"] !== undefined) { this._issuer = source._issuer; }
    if (source["jurisdiction"] !== undefined) { this.jurisdiction = source.jurisdiction; }
    if (source["_jurisdiction"] !== undefined) { this._jurisdiction = source._jurisdiction; }
  }
}
/**
 * Code Values for the Device.udiCarrier.entryType field
 */
export enum DeviceUdiCarrierEntryTypeEnum {
  BARCODE = "barcode",
  RFID = "rfid",
  MANUAL = "manual",
  CARD = "card",
  SELF_REPORTED = "self-reported",
  UNKNOWN = "unknown",
}
/**
 * This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
 */
export class DeviceDeviceName extends fhirModels.BackboneElement {
  /**
   * The name of the device.
   */
  name: string;
  _name?: fhirModels.Element;
  /**
   * The type of deviceName.
   * UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName.
   */
  type: DeviceDeviceNameTypeEnum;
  _type?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: DeviceDeviceName) {
    super(source);
    if (source["name"] === undefined) { throw 'Missing required element name';}
    this.name = source.name;
    if (source["_name"] !== undefined) { this._name = source._name; }
    if (source["type"] === undefined) { throw 'Missing required element type';}
    this.type = source.type;
    if (source["_type"] !== undefined) { this._type = source._type; }
  }
}
/**
 * Code Values for the Device.deviceName.type field
 */
export enum DeviceDeviceNameTypeEnum {
  UDI_LABEL_NAME = "udi-label-name",
  USER_FRIENDLY_NAME = "user-friendly-name",
  PATIENT_REPORTED_NAME = "patient-reported-name",
  MANUFACTURER_NAME = "manufacturer-name",
  MODEL_NAME = "model-name",
  OTHER = "other",
}
/**
 * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
 */
export class DeviceSpecialization extends fhirModels.BackboneElement {
  /**
   * The standard that is used to operate and communicate.
   */
  systemType: fhirModels.CodeableConcept;
  /**
   * The version of the standard that is used to operate and communicate.
   */
  version?: string;
  _version?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: DeviceSpecialization) {
    super(source);
    if (source["systemType"] === undefined) { throw 'Missing required element systemType';}
    this.systemType = source.systemType;
    if (source["version"] !== undefined) { this.version = source.version; }
    if (source["_version"] !== undefined) { this._version = source._version; }
  }
}
/**
 * The actual design of the device or software version running on the device.
 */
export class DeviceVersion extends fhirModels.BackboneElement {
  /**
   * A single component of the device version.
   */
  component?: fhirModels.Identifier;
  /**
   * The type of the device version.
   */
  type?: fhirModels.CodeableConcept;
  /**
   * The version text.
   */
  value: string;
  _value?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: DeviceVersion) {
    super(source);
    if (source["component"] !== undefined) { this.component = source.component; }
    if (source["type"] !== undefined) { this.type = source.type; }
    if (source["value"] === undefined) { throw 'Missing required element value';}
    this.value = source.value;
    if (source["_value"] !== undefined) { this._value = source._value; }
  }
}
/**
 * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
 */
export class DeviceProperty extends fhirModels.BackboneElement {
  /**
   * Code that specifies the property DeviceDefinitionPropetyCode (Extensible).
   */
  type: fhirModels.CodeableConcept;
  /**
   * Property value as a code, e.g., NTP4 (synced to NTP).
   */
  valueCode?: fhirModels.CodeableConcept[];
  /**
   * Property value as a quantity.
   */
  valueQuantity?: fhirModels.Quantity[];
  /**
   * Default constructor
   */
  constructor(source: DeviceProperty) {
    super(source);
    if (source["type"] === undefined) { throw 'Missing required element type';}
    this.type = source.type;
    if (source["valueCode"] !== undefined) { this.valueCode = source.valueCode; }
    if (source["valueQuantity"] !== undefined) { this.valueQuantity = source.valueQuantity; }
  }
}
/**
 * A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.
 */
export class Device extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "Device";
  /**
   * used for troubleshooting etc.
   */
  contact?: fhirModels.ContactPoint[];
  /**
   * The reference to the definition for the device.
   */
  definition?: fhirModels.Reference;
  /**
   * This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
   */
  deviceName?: fhirModels.DeviceDeviceName[];
  /**
   * For example, this applies to devices in the United States regulated under *Code of Federal Regulation 21CFRÂ§1271.290(c)*.
   */
  distinctIdentifier?: string;
  _distinctIdentifier?: fhirModels.Element;
  /**
   * The date and time beyond which this device is no longer valid or should not be used (if applicable).
   */
  expirationDate?: string;
  _expirationDate?: fhirModels.Element;
  /**
   * The barcode string from a barcode present on a device label or package may identify the instance, include names given to the device in local usage, or may identify the type of device. If the identifier identifies the type of device, Device.type element should be used.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * The place where the device can be found.
   */
  location?: fhirModels.Reference;
  /**
   * Lot number assigned by the manufacturer.
   */
  lotNumber?: string;
  _lotNumber?: fhirModels.Element;
  /**
   * The date and time when the device was manufactured.
   */
  manufactureDate?: string;
  _manufactureDate?: fhirModels.Element;
  /**
   * A name of the manufacturer.
   */
  manufacturer?: string;
  _manufacturer?: fhirModels.Element;
  /**
   * The model number for the device.
   */
  modelNumber?: string;
  _modelNumber?: fhirModels.Element;
  /**
   * Descriptive information, usage information or implantation information that is not captured in an existing element.
   */
  note?: fhirModels.Annotation[];
  /**
   * An organization that is responsible for the provision and ongoing maintenance of the device.
   */
  owner?: fhirModels.Reference;
  /**
   * The parent device.
   */
  parent?: fhirModels.Reference;
  /**
   * Alphanumeric Maximum 20.
   */
  partNumber?: string;
  _partNumber?: fhirModels.Element;
  /**
   * Patient information, If the device is affixed to a person.
   */
  patient?: fhirModels.Reference;
  /**
   * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
   */
  property?: fhirModels.DeviceProperty[];
  /**
   * Provides additional safety characteristics about a medical device.  For example devices containing latex.
   */
  safety?: fhirModels.CodeableConcept[];
  /**
   * Alphanumeric Maximum 20.
   */
  serialNumber?: string;
  _serialNumber?: fhirModels.Element;
  /**
   * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
   */
  specialization?: fhirModels.DeviceSpecialization[];
  /**
   * This element is labeled as a modifier because the status contains the codes inactive and entered-in-error that mark the device (record)as not currently valid.
   */
  status?: DeviceStatusEnum;
  _status?: fhirModels.Element;
  /**
   * Reason for the dtatus of the Device availability.
   */
  statusReason?: fhirModels.CodeableConcept[];
  /**
   * The kind or type of device.
   */
  type?: fhirModels.CodeableConcept;
  /**
   * UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
   */
  udiCarrier?: fhirModels.DeviceUdiCarrier[];
  /**
   * If the device is running a FHIR server, the network address should  be the Base URL from which a conformance statement may be retrieved.
   */
  url?: string;
  _url?: fhirModels.Element;
  /**
   * The actual design of the device or software version running on the device.
   */
  version?: fhirModels.DeviceVersion[];
  /**
   * Default constructor
   */
  constructor(source: Device) {
    super(source);
    if ((source['resourceType'] !== "Device") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a Device'; }
    if (source["contact"] !== undefined) { this.contact = source.contact; }
    if (source["definition"] !== undefined) { this.definition = source.definition; }
    if (source["deviceName"] !== undefined) { this.deviceName = source.deviceName; }
    if (source["distinctIdentifier"] !== undefined) { this.distinctIdentifier = source.distinctIdentifier; }
    if (source["_distinctIdentifier"] !== undefined) { this._distinctIdentifier = source._distinctIdentifier; }
    if (source["expirationDate"] !== undefined) { this.expirationDate = source.expirationDate; }
    if (source["_expirationDate"] !== undefined) { this._expirationDate = source._expirationDate; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["location"] !== undefined) { this.location = source.location; }
    if (source["lotNumber"] !== undefined) { this.lotNumber = source.lotNumber; }
    if (source["_lotNumber"] !== undefined) { this._lotNumber = source._lotNumber; }
    if (source["manufactureDate"] !== undefined) { this.manufactureDate = source.manufactureDate; }
    if (source["_manufactureDate"] !== undefined) { this._manufactureDate = source._manufactureDate; }
    if (source["manufacturer"] !== undefined) { this.manufacturer = source.manufacturer; }
    if (source["_manufacturer"] !== undefined) { this._manufacturer = source._manufacturer; }
    if (source["modelNumber"] !== undefined) { this.modelNumber = source.modelNumber; }
    if (source["_modelNumber"] !== undefined) { this._modelNumber = source._modelNumber; }
    if (source["note"] !== undefined) { this.note = source.note; }
    if (source["owner"] !== undefined) { this.owner = source.owner; }
    if (source["parent"] !== undefined) { this.parent = source.parent; }
    if (source["partNumber"] !== undefined) { this.partNumber = source.partNumber; }
    if (source["_partNumber"] !== undefined) { this._partNumber = source._partNumber; }
    if (source["patient"] !== undefined) { this.patient = source.patient; }
    if (source["property"] !== undefined) { this.property = source.property; }
    if (source["safety"] !== undefined) { this.safety = source.safety; }
    if (source["serialNumber"] !== undefined) { this.serialNumber = source.serialNumber; }
    if (source["_serialNumber"] !== undefined) { this._serialNumber = source._serialNumber; }
    if (source["specialization"] !== undefined) { this.specialization = source.specialization; }
    if (source["status"] !== undefined) { this.status = source.status; }
    if (source["_status"] !== undefined) { this._status = source._status; }
    if (source["statusReason"] !== undefined) { this.statusReason = source.statusReason; }
    if (source["type"] !== undefined) { this.type = source.type; }
    if (source["udiCarrier"] !== undefined) { this.udiCarrier = source.udiCarrier; }
    if (source["url"] !== undefined) { this.url = source.url; }
    if (source["_url"] !== undefined) { this._url = source._url; }
    if (source["version"] !== undefined) { this.version = source.version; }
  }
}
/**
 * Code Values for the Device.status field
 */
export enum DeviceStatusEnum {
  ACTIVE = "active",
  INACTIVE = "inactive",
  ENTERED_IN_ERROR = "entered-in-error",
  UNKNOWN = "unknown",
}
