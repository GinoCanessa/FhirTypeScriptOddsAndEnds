// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
 */
export class MedicinalProductContraindicationOtherTherapy extends fhirModels.BackboneElement {
  /**
   * Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication.
   */
  medicationCodeableConcept?: fhirModels.CodeableConcept;
  /**
   * Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication.
   */
  medicationReference?: fhirModels.Reference;
  /**
   * The type of relationship between the medicinal product indication or contraindication and another therapy.
   */
  therapyRelationshipType: fhirModels.CodeableConcept;
  /**
   * Default constructor
   */
  constructor(source: MedicinalProductContraindicationOtherTherapy) {
    super(source);
    if (source["medicationCodeableConcept"] !== undefined) { this.medicationCodeableConcept = source.medicationCodeableConcept; }
    if (source["medicationReference"] !== undefined) { this.medicationReference = source.medicationReference; }
    if (source["therapyRelationshipType"] === undefined) { throw 'Missing required element therapyRelationshipType';}
    this.therapyRelationshipType = source.therapyRelationshipType;
  }
}
/**
 * The clinical particulars - indications, contraindications etc. of a medicinal product, including for regulatory purposes.
 */
export class MedicinalProductContraindication extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "MedicinalProductContraindication";
  /**
   * A comorbidity (concurrent condition) or coinfection.
   */
  comorbidity?: fhirModels.CodeableConcept[];
  /**
   * The disease, symptom or procedure for the contraindication.
   */
  disease?: fhirModels.CodeableConcept;
  /**
   * The status of the disease or symptom for the contraindication.
   */
  diseaseStatus?: fhirModels.CodeableConcept;
  /**
   * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
   */
  otherTherapy?: fhirModels.MedicinalProductContraindicationOtherTherapy[];
  /**
   * The population group to which this applies.
   */
  population?: fhirModels.Population[];
  /**
   * The medication for which this is an indication.
   */
  subject?: fhirModels.Reference[];
  /**
   * Information about the use of the medicinal product in relation to other therapies as part of the indication.
   */
  therapeuticIndication?: fhirModels.Reference[];
  /**
   * Default constructor
   */
  constructor(source: MedicinalProductContraindication) {
    super(source);
    if ((source['resourceType'] !== "MedicinalProductContraindication") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a MedicinalProductContraindication'; }
    if (source["comorbidity"] !== undefined) { this.comorbidity = source.comorbidity; }
    if (source["disease"] !== undefined) { this.disease = source.disease; }
    if (source["diseaseStatus"] !== undefined) { this.diseaseStatus = source.diseaseStatus; }
    if (source["otherTherapy"] !== undefined) { this.otherTherapy = source.otherTherapy; }
    if (source["population"] !== undefined) { this.population = source.population; }
    if (source["subject"] !== undefined) { this.subject = source.subject; }
    if (source["therapeuticIndication"] !== undefined) { this.therapeuticIndication = source.therapeuticIndication; }
  }
}
