// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * A parameter passed to or received from the operation.
 */
export class ParametersParameter extends fhirModels.BackboneElement {
  /**
   * The name of the parameter (reference to the operation definition).
   */
  name: string;
  _name?: fhirModels.Element;
  /**
   * Only one level of nested parameters is allowed.
   */
  part?: fhirModels.ParametersParameter[];
  /**
   * When resolving references in resources, the operation definition may specify how references may be resolved between parameters. If a reference cannot be resolved between the parameters, the application should fall back to it's general resource resolution methods.
   */
  resource?: fhirModels.FhirResource;
  /**
   * If the parameter is a data type.
   */
  valueBase64Binary?: string;
  _valueBase64Binary?: fhirModels.Element;
  /**
   * If the parameter is a data type.
   */
  valueBoolean?: boolean;
  _valueBoolean?: fhirModels.Element;
  /**
   * If the parameter is a data type.
   */
  valueCanonical?: string;
  _valueCanonical?: fhirModels.Element;
  /**
   * If the parameter is a data type.
   */
  valueCode?: string;
  _valueCode?: fhirModels.Element;
  /**
   * If the parameter is a data type.
   */
  valueDate?: string;
  _valueDate?: fhirModels.Element;
  /**
   * If the parameter is a data type.
   */
  valueDateTime?: string;
  _valueDateTime?: fhirModels.Element;
  /**
   * If the parameter is a data type.
   */
  valueDecimal?: number;
  _valueDecimal?: fhirModels.Element;
  /**
   * If the parameter is a data type.
   */
  valueId?: string;
  _valueId?: fhirModels.Element;
  /**
   * If the parameter is a data type.
   */
  valueInstant?: string;
  _valueInstant?: fhirModels.Element;
  /**
   * If the parameter is a data type.
   */
  valueInteger?: number;
  _valueInteger?: fhirModels.Element;
  /**
   * If the parameter is a data type.
   */
  valueMarkdown?: string;
  _valueMarkdown?: fhirModels.Element;
  /**
   * If the parameter is a data type.
   */
  valueOid?: string;
  _valueOid?: fhirModels.Element;
  /**
   * If the parameter is a data type.
   */
  valuePositiveInt?: number;
  _valuePositiveInt?: fhirModels.Element;
  /**
   * If the parameter is a data type.
   */
  valueString?: string;
  _valueString?: fhirModels.Element;
  /**
   * If the parameter is a data type.
   */
  valueTime?: string;
  _valueTime?: fhirModels.Element;
  /**
   * If the parameter is a data type.
   */
  valueUnsignedInt?: number;
  _valueUnsignedInt?: fhirModels.Element;
  /**
   * If the parameter is a data type.
   */
  valueUri?: string;
  _valueUri?: fhirModels.Element;
  /**
   * If the parameter is a data type.
   */
  valueUrl?: string;
  _valueUrl?: fhirModels.Element;
  /**
   * If the parameter is a data type.
   */
  valueUuid?: string;
  _valueUuid?: fhirModels.Element;
  /**
   * If the parameter is a data type.
   */
  valueAddress?: fhirModels.Address;
  /**
   * If the parameter is a data type.
   */
  valueAge?: fhirModels.Age;
  /**
   * If the parameter is a data type.
   */
  valueAnnotation?: fhirModels.Annotation;
  /**
   * If the parameter is a data type.
   */
  valueAttachment?: fhirModels.Attachment;
  /**
   * If the parameter is a data type.
   */
  valueCodeableConcept?: fhirModels.CodeableConcept;
  /**
   * If the parameter is a data type.
   */
  valueCoding?: fhirModels.Coding;
  /**
   * If the parameter is a data type.
   */
  valueContactPoint?: fhirModels.ContactPoint;
  /**
   * If the parameter is a data type.
   */
  valueCount?: fhirModels.Count;
  /**
   * If the parameter is a data type.
   */
  valueDistance?: fhirModels.Distance;
  /**
   * If the parameter is a data type.
   */
  valueDuration?: fhirModels.Duration;
  /**
   * If the parameter is a data type.
   */
  valueHumanName?: fhirModels.HumanName;
  /**
   * If the parameter is a data type.
   */
  valueIdentifier?: fhirModels.Identifier;
  /**
   * If the parameter is a data type.
   */
  valueMoney?: fhirModels.Money;
  /**
   * If the parameter is a data type.
   */
  valuePeriod?: fhirModels.Period;
  /**
   * If the parameter is a data type.
   */
  valueQuantity?: fhirModels.Quantity;
  /**
   * If the parameter is a data type.
   */
  valueRange?: fhirModels.Range;
  /**
   * If the parameter is a data type.
   */
  valueRatio?: fhirModels.Ratio;
  /**
   * If the parameter is a data type.
   */
  valueReference?: fhirModels.Reference;
  /**
   * If the parameter is a data type.
   */
  valueSampledData?: fhirModels.SampledData;
  /**
   * If the parameter is a data type.
   */
  valueSignature?: fhirModels.Signature;
  /**
   * If the parameter is a data type.
   */
  valueTiming?: fhirModels.Timing;
  /**
   * If the parameter is a data type.
   */
  valueContactDetail?: fhirModels.ContactDetail;
  /**
   * If the parameter is a data type.
   */
  valueContributor?: fhirModels.Contributor;
  /**
   * If the parameter is a data type.
   */
  valueDataRequirement?: fhirModels.DataRequirement;
  /**
   * If the parameter is a data type.
   */
  valueExpression?: fhirModels.Expression;
  /**
   * If the parameter is a data type.
   */
  valueParameterDefinition?: fhirModels.ParameterDefinition;
  /**
   * If the parameter is a data type.
   */
  valueRelatedArtifact?: fhirModels.RelatedArtifact;
  /**
   * If the parameter is a data type.
   */
  valueTriggerDefinition?: fhirModels.TriggerDefinition;
  /**
   * If the parameter is a data type.
   */
  valueUsageContext?: fhirModels.UsageContext;
  /**
   * If the parameter is a data type.
   */
  valueDosage?: fhirModels.Dosage;
  /**
   * If the parameter is a data type.
   */
  valueMeta?: fhirModels.Meta;
  /**
   * Default constructor
   */
  constructor(source: ParametersParameter) {
    super(source);
    if (source["name"] === undefined) { throw 'Missing required element name';}
    this.name = source.name;
    if (source["_name"] !== undefined) { this._name = source._name; }
    if (source["part"] !== undefined) { this.part = source.part; }
    if (source["resource"] !== undefined) { this.resource = source.resource; }
    if (source["valueBase64Binary"] !== undefined) { this.valueBase64Binary = source.valueBase64Binary; }
    if (source["_valueBase64Binary"] !== undefined) { this._valueBase64Binary = source._valueBase64Binary; }
    if (source["valueBoolean"] !== undefined) { this.valueBoolean = source.valueBoolean; }
    if (source["_valueBoolean"] !== undefined) { this._valueBoolean = source._valueBoolean; }
    if (source["valueCanonical"] !== undefined) { this.valueCanonical = source.valueCanonical; }
    if (source["_valueCanonical"] !== undefined) { this._valueCanonical = source._valueCanonical; }
    if (source["valueCode"] !== undefined) { this.valueCode = source.valueCode; }
    if (source["_valueCode"] !== undefined) { this._valueCode = source._valueCode; }
    if (source["valueDate"] !== undefined) { this.valueDate = source.valueDate; }
    if (source["_valueDate"] !== undefined) { this._valueDate = source._valueDate; }
    if (source["valueDateTime"] !== undefined) { this.valueDateTime = source.valueDateTime; }
    if (source["_valueDateTime"] !== undefined) { this._valueDateTime = source._valueDateTime; }
    if (source["valueDecimal"] !== undefined) { this.valueDecimal = source.valueDecimal; }
    if (source["_valueDecimal"] !== undefined) { this._valueDecimal = source._valueDecimal; }
    if (source["valueId"] !== undefined) { this.valueId = source.valueId; }
    if (source["_valueId"] !== undefined) { this._valueId = source._valueId; }
    if (source["valueInstant"] !== undefined) { this.valueInstant = source.valueInstant; }
    if (source["_valueInstant"] !== undefined) { this._valueInstant = source._valueInstant; }
    if (source["valueInteger"] !== undefined) { this.valueInteger = source.valueInteger; }
    if (source["_valueInteger"] !== undefined) { this._valueInteger = source._valueInteger; }
    if (source["valueMarkdown"] !== undefined) { this.valueMarkdown = source.valueMarkdown; }
    if (source["_valueMarkdown"] !== undefined) { this._valueMarkdown = source._valueMarkdown; }
    if (source["valueOid"] !== undefined) { this.valueOid = source.valueOid; }
    if (source["_valueOid"] !== undefined) { this._valueOid = source._valueOid; }
    if (source["valuePositiveInt"] !== undefined) { this.valuePositiveInt = source.valuePositiveInt; }
    if (source["_valuePositiveInt"] !== undefined) { this._valuePositiveInt = source._valuePositiveInt; }
    if (source["valueString"] !== undefined) { this.valueString = source.valueString; }
    if (source["_valueString"] !== undefined) { this._valueString = source._valueString; }
    if (source["valueTime"] !== undefined) { this.valueTime = source.valueTime; }
    if (source["_valueTime"] !== undefined) { this._valueTime = source._valueTime; }
    if (source["valueUnsignedInt"] !== undefined) { this.valueUnsignedInt = source.valueUnsignedInt; }
    if (source["_valueUnsignedInt"] !== undefined) { this._valueUnsignedInt = source._valueUnsignedInt; }
    if (source["valueUri"] !== undefined) { this.valueUri = source.valueUri; }
    if (source["_valueUri"] !== undefined) { this._valueUri = source._valueUri; }
    if (source["valueUrl"] !== undefined) { this.valueUrl = source.valueUrl; }
    if (source["_valueUrl"] !== undefined) { this._valueUrl = source._valueUrl; }
    if (source["valueUuid"] !== undefined) { this.valueUuid = source.valueUuid; }
    if (source["_valueUuid"] !== undefined) { this._valueUuid = source._valueUuid; }
    if (source["valueAddress"] !== undefined) { this.valueAddress = source.valueAddress; }
    if (source["valueAge"] !== undefined) { this.valueAge = source.valueAge; }
    if (source["valueAnnotation"] !== undefined) { this.valueAnnotation = source.valueAnnotation; }
    if (source["valueAttachment"] !== undefined) { this.valueAttachment = source.valueAttachment; }
    if (source["valueCodeableConcept"] !== undefined) { this.valueCodeableConcept = source.valueCodeableConcept; }
    if (source["valueCoding"] !== undefined) { this.valueCoding = source.valueCoding; }
    if (source["valueContactPoint"] !== undefined) { this.valueContactPoint = source.valueContactPoint; }
    if (source["valueCount"] !== undefined) { this.valueCount = source.valueCount; }
    if (source["valueDistance"] !== undefined) { this.valueDistance = source.valueDistance; }
    if (source["valueDuration"] !== undefined) { this.valueDuration = source.valueDuration; }
    if (source["valueHumanName"] !== undefined) { this.valueHumanName = source.valueHumanName; }
    if (source["valueIdentifier"] !== undefined) { this.valueIdentifier = source.valueIdentifier; }
    if (source["valueMoney"] !== undefined) { this.valueMoney = source.valueMoney; }
    if (source["valuePeriod"] !== undefined) { this.valuePeriod = source.valuePeriod; }
    if (source["valueQuantity"] !== undefined) { this.valueQuantity = source.valueQuantity; }
    if (source["valueRange"] !== undefined) { this.valueRange = source.valueRange; }
    if (source["valueRatio"] !== undefined) { this.valueRatio = source.valueRatio; }
    if (source["valueReference"] !== undefined) { this.valueReference = source.valueReference; }
    if (source["valueSampledData"] !== undefined) { this.valueSampledData = source.valueSampledData; }
    if (source["valueSignature"] !== undefined) { this.valueSignature = source.valueSignature; }
    if (source["valueTiming"] !== undefined) { this.valueTiming = source.valueTiming; }
    if (source["valueContactDetail"] !== undefined) { this.valueContactDetail = source.valueContactDetail; }
    if (source["valueContributor"] !== undefined) { this.valueContributor = source.valueContributor; }
    if (source["valueDataRequirement"] !== undefined) { this.valueDataRequirement = source.valueDataRequirement; }
    if (source["valueExpression"] !== undefined) { this.valueExpression = source.valueExpression; }
    if (source["valueParameterDefinition"] !== undefined) { this.valueParameterDefinition = source.valueParameterDefinition; }
    if (source["valueRelatedArtifact"] !== undefined) { this.valueRelatedArtifact = source.valueRelatedArtifact; }
    if (source["valueTriggerDefinition"] !== undefined) { this.valueTriggerDefinition = source.valueTriggerDefinition; }
    if (source["valueUsageContext"] !== undefined) { this.valueUsageContext = source.valueUsageContext; }
    if (source["valueDosage"] !== undefined) { this.valueDosage = source.valueDosage; }
    if (source["valueMeta"] !== undefined) { this.valueMeta = source.valueMeta; }
  }
}
/**
 * This resource is a non-persisted resource used to pass information into and back from an [operation](operations.html). It has no other use, and there is no RESTful endpoint associated with it.
 */
export class Parameters extends fhirModels.Resource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "Parameters";
  /**
   * A parameter passed to or received from the operation.
   */
  parameter?: fhirModels.ParametersParameter[];
  /**
   * Default constructor
   */
  constructor(source: Parameters) {
    super(source);
    if ((source['resourceType'] !== "Parameters") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a Parameters'; }
    if (source["parameter"] !== undefined) { this.parameter = source.parameter; }
  }
}
