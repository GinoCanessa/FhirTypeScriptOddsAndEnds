// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * This resource provides enrollment and plan details from the processing of an EnrollmentRequest resource.
 */
export class EnrollmentResponse extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "EnrollmentResponse";
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  created?: string;
  _created?: fhirModels.Element;
  /**
   * A description of the status of the adjudication.
   */
  disposition?: string;
  _disposition?: fhirModels.Element;
  /**
   * The Response business identifier.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * The Insurer who produced this adjudicated response.
   */
  organization?: fhirModels.Reference;
  /**
   * Processing status: error, complete.
   */
  outcome?: EnrollmentResponseOutcomeEnum;
  _outcome?: fhirModels.Element;
  /**
   * Original request resource reference.
   */
  request?: fhirModels.Reference;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  requestProvider?: fhirModels.Reference;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the response as not currently valid.
   */
  status?: EnrollmentResponseStatusEnum;
  _status?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: EnrollmentResponse) {
    super(source);
    if ((source['resourceType'] !== "EnrollmentResponse") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a EnrollmentResponse'; }
    if (source["created"] !== undefined) { this.created = source.created; }
    if (source["_created"] !== undefined) { this._created = source._created; }
    if (source["disposition"] !== undefined) { this.disposition = source.disposition; }
    if (source["_disposition"] !== undefined) { this._disposition = source._disposition; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["organization"] !== undefined) { this.organization = source.organization; }
    if (source["outcome"] !== undefined) { this.outcome = source.outcome; }
    if (source["_outcome"] !== undefined) { this._outcome = source._outcome; }
    if (source["request"] !== undefined) { this.request = source.request; }
    if (source["requestProvider"] !== undefined) { this.requestProvider = source.requestProvider; }
    if (source["status"] !== undefined) { this.status = source.status; }
    if (source["_status"] !== undefined) { this._status = source._status; }
  }
}
/**
 * Code Values for the EnrollmentResponse.outcome field
 */
export enum EnrollmentResponseOutcomeEnum {
  QUEUED = "queued",
  COMPLETE = "complete",
  ERROR = "error",
  PARTIAL = "partial",
}
/**
 * Code Values for the EnrollmentResponse.status field
 */
export enum EnrollmentResponseStatusEnum {
  ACTIVE = "active",
  CANCELLED = "cancelled",
  DRAFT = "draft",
  ENTERED_IN_ERROR = "entered-in-error",
}
