// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * A participant in the test execution, either the execution engine, a client, or a server.
 */
export class TestReportParticipant extends fhirModels.BackboneElement {
  /**
   * The display name of the participant.
   */
  display?: string;
  _display?: fhirModels.Element;
  /**
   * The type of participant.
   */
  type: TestReportParticipantTypeEnum;
  _type?: fhirModels.Element;
  /**
   * The uri of the participant. An absolute URL is preferred.
   */
  uri: string;
  _uri?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: TestReportParticipant) {
    super(source);
    if (source["display"] !== undefined) { this.display = source.display; }
    if (source["_display"] !== undefined) { this._display = source._display; }
    if (source["type"] === undefined) { throw 'Missing required element type';}
    this.type = source.type;
    if (source["_type"] !== undefined) { this._type = source._type; }
    if (source["uri"] === undefined) { throw 'Missing required element uri';}
    this.uri = source.uri;
    if (source["_uri"] !== undefined) { this._uri = source._uri; }
  }
}
/**
 * Code Values for the TestReport.participant.type field
 */
export enum TestReportParticipantTypeEnum {
  TEST_ENGINE = "test-engine",
  CLIENT = "client",
  SERVER = "server",
}
/**
 * The operation performed.
 */
export class TestReportSetupActionOperation extends fhirModels.BackboneElement {
  /**
   * A link to further details on the result.
   */
  detail?: string;
  _detail?: fhirModels.Element;
  /**
   * An explanatory message associated with the result.
   */
  message?: string;
  _message?: fhirModels.Element;
  /**
   * The result of this operation.
   */
  result: TestReportSetupActionOperationResultEnum;
  _result?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: TestReportSetupActionOperation) {
    super(source);
    if (source["detail"] !== undefined) { this.detail = source.detail; }
    if (source["_detail"] !== undefined) { this._detail = source._detail; }
    if (source["message"] !== undefined) { this.message = source.message; }
    if (source["_message"] !== undefined) { this._message = source._message; }
    if (source["result"] === undefined) { throw 'Missing required element result';}
    this.result = source.result;
    if (source["_result"] !== undefined) { this._result = source._result; }
  }
}
/**
 * Code Values for the TestReport.setup.action.operation.result field
 */
export enum TestReportSetupActionOperationResultEnum {
  PASS = "pass",
  SKIP = "skip",
  FAIL = "fail",
  WARNING = "warning",
  ERROR = "error",
}
/**
 * The results of the assertion performed on the previous operations.
 */
export class TestReportSetupActionAssert extends fhirModels.BackboneElement {
  /**
   * A link to further details on the result.
   */
  detail?: string;
  _detail?: fhirModels.Element;
  /**
   * An explanatory message associated with the result.
   */
  message?: string;
  _message?: fhirModels.Element;
  /**
   * The result of this assertion.
   */
  result: TestReportSetupActionAssertResultEnum;
  _result?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: TestReportSetupActionAssert) {
    super(source);
    if (source["detail"] !== undefined) { this.detail = source.detail; }
    if (source["_detail"] !== undefined) { this._detail = source._detail; }
    if (source["message"] !== undefined) { this.message = source.message; }
    if (source["_message"] !== undefined) { this._message = source._message; }
    if (source["result"] === undefined) { throw 'Missing required element result';}
    this.result = source.result;
    if (source["_result"] !== undefined) { this._result = source._result; }
  }
}
/**
 * Code Values for the TestReport.setup.action.assert.result field
 */
export enum TestReportSetupActionAssertResultEnum {
  PASS = "pass",
  SKIP = "skip",
  FAIL = "fail",
  WARNING = "warning",
  ERROR = "error",
}
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestReportSetupAction extends fhirModels.BackboneElement {
  /**
   * The results of the assertion performed on the previous operations.
   */
  assert?: fhirModels.TestReportSetupActionAssert;
  /**
   * The operation performed.
   */
  operation?: fhirModels.TestReportSetupActionOperation;
  /**
   * Default constructor
   */
  constructor(source: TestReportSetupAction) {
    super(source);
    if (source["assert"] !== undefined) { this.assert = source.assert; }
    if (source["operation"] !== undefined) { this.operation = source.operation; }
  }
}
/**
 * The results of the series of required setup operations before the tests were executed.
 */
export class TestReportSetup extends fhirModels.BackboneElement {
  /**
   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
   */
  action: fhirModels.TestReportSetupAction[];
  /**
   * Default constructor
   */
  constructor(source: TestReportSetup) {
    super(source);
    if (source["action"] === undefined) { throw 'Missing required element action';}
    this.action = source.action;
  }
}
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestReportTestAction extends fhirModels.BackboneElement {
  /**
   * The results of the assertion performed on the previous operations.
   */
  assert?: fhirModels.TestReportSetupActionAssert;
  /**
   * An operation would involve a REST request to a server.
   */
  operation?: fhirModels.TestReportSetupActionOperation;
  /**
   * Default constructor
   */
  constructor(source: TestReportTestAction) {
    super(source);
    if (source["assert"] !== undefined) { this.assert = source.assert; }
    if (source["operation"] !== undefined) { this.operation = source.operation; }
  }
}
/**
 * A test executed from the test script.
 */
export class TestReportTest extends fhirModels.BackboneElement {
  /**
   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
   */
  action: fhirModels.TestReportTestAction[];
  /**
   * A short description of the test used by test engines for tracking and reporting purposes.
   */
  description?: string;
  _description?: fhirModels.Element;
  /**
   * The name of this test used for tracking/logging purposes by test engines.
   */
  name?: string;
  _name?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: TestReportTest) {
    super(source);
    if (source["action"] === undefined) { throw 'Missing required element action';}
    this.action = source.action;
    if (source["description"] !== undefined) { this.description = source.description; }
    if (source["_description"] !== undefined) { this._description = source._description; }
    if (source["name"] !== undefined) { this.name = source.name; }
    if (source["_name"] !== undefined) { this._name = source._name; }
  }
}
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestReportTeardownAction extends fhirModels.BackboneElement {
  /**
   * An operation would involve a REST request to a server.
   */
  operation: fhirModels.TestReportSetupActionOperation;
  /**
   * Default constructor
   */
  constructor(source: TestReportTeardownAction) {
    super(source);
    if (source["operation"] === undefined) { throw 'Missing required element operation';}
    this.operation = source.operation;
  }
}
/**
 * The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
 */
export class TestReportTeardown extends fhirModels.BackboneElement {
  /**
   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
   */
  action: fhirModels.TestReportTeardownAction[];
  /**
   * Default constructor
   */
  constructor(source: TestReportTeardown) {
    super(source);
    if (source["action"] === undefined) { throw 'Missing required element action';}
    this.action = source.action;
  }
}
/**
 * A summary of information based on the results of executing a TestScript.
 */
export class TestReport extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "TestReport";
  /**
   * Identifier for the TestScript assigned for external purposes outside the context of FHIR.
   */
  identifier?: fhirModels.Identifier;
  /**
   * Additional specific dates may be added as extensions.
   */
  issued?: string;
  _issued?: fhirModels.Element;
  /**
   * Not expected to be globally unique.
   */
  name?: string;
  _name?: fhirModels.Element;
  /**
   * A participant in the test execution, either the execution engine, a client, or a server.
   */
  participant?: fhirModels.TestReportParticipant[];
  /**
   * The pass and fail result represents a completed test script execution. The pending result represents a test script execution that has not yet started or is currently in progress.
   */
  result: TestReportResultEnum;
  _result?: fhirModels.Element;
  /**
   * The final score (percentage of tests passed) resulting from the execution of the TestScript.
   */
  score?: number;
  _score?: fhirModels.Element;
  /**
   * The results of the series of required setup operations before the tests were executed.
   */
  setup?: fhirModels.TestReportSetup;
  /**
   * The status represents where the execution is currently within the test script execution life cycle.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: TestReportStatusEnum;
  _status?: fhirModels.Element;
  /**
   * The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
   */
  teardown?: fhirModels.TestReportTeardown;
  /**
   * A test executed from the test script.
   */
  test?: fhirModels.TestReportTest[];
  /**
   * Usually an organization, but may be an individual. This item SHOULD be populated unless the information is available from context.
   */
  tester?: string;
  _tester?: fhirModels.Element;
  /**
   * Ideally this is an absolute URL that is used to identify the version-specific TestScript that was executed, matching the `TestScript.url`.
   */
  testScript: fhirModels.Reference;
  /**
   * Default constructor
   */
  constructor(source: TestReport) {
    super(source);
    if ((source['resourceType'] !== "TestReport") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a TestReport'; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["issued"] !== undefined) { this.issued = source.issued; }
    if (source["_issued"] !== undefined) { this._issued = source._issued; }
    if (source["name"] !== undefined) { this.name = source.name; }
    if (source["_name"] !== undefined) { this._name = source._name; }
    if (source["participant"] !== undefined) { this.participant = source.participant; }
    if (source["result"] === undefined) { throw 'Missing required element result';}
    this.result = source.result;
    if (source["_result"] !== undefined) { this._result = source._result; }
    if (source["score"] !== undefined) { this.score = source.score; }
    if (source["_score"] !== undefined) { this._score = source._score; }
    if (source["setup"] !== undefined) { this.setup = source.setup; }
    if (source["status"] === undefined) { throw 'Missing required element status';}
    this.status = source.status;
    if (source["_status"] !== undefined) { this._status = source._status; }
    if (source["teardown"] !== undefined) { this.teardown = source.teardown; }
    if (source["test"] !== undefined) { this.test = source.test; }
    if (source["tester"] !== undefined) { this.tester = source.tester; }
    if (source["_tester"] !== undefined) { this._tester = source._tester; }
    if (source["testScript"] === undefined) { throw 'Missing required element testScript';}
    this.testScript = source.testScript;
  }
}
/**
 * Code Values for the TestReport.result field
 */
export enum TestReportResultEnum {
  PASS = "pass",
  FAIL = "fail",
  PENDING = "pending",
}
/**
 * Code Values for the TestReport.status field
 */
export enum TestReportStatusEnum {
  COMPLETED = "completed",
  IN_PROGRESS = "in-progress",
  WAITING = "waiting",
  STOPPED = "stopped",
  ENTERED_IN_ERROR = "entered-in-error",
}
