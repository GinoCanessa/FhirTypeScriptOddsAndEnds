// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * Authorization in areas within a country.
 */
export class MedicinalProductAuthorizationJurisdictionalAuthorization extends fhirModels.BackboneElement {
  /**
   * Country of authorization.
   */
  country?: fhirModels.CodeableConcept;
  /**
   * The assigned number for the marketing authorization.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * Jurisdiction within a country.
   */
  jurisdiction?: fhirModels.CodeableConcept[];
  /**
   * The legal status of supply in a jurisdiction or region.
   */
  legalStatusOfSupply?: fhirModels.CodeableConcept;
  /**
   * The start and expected end date of the authorization.
   */
  validityPeriod?: fhirModels.Period;
  /**
   * Default constructor
   */
  constructor(source: MedicinalProductAuthorizationJurisdictionalAuthorization) {
    super(source);
    if (source["country"] !== undefined) { this.country = source.country; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["jurisdiction"] !== undefined) { this.jurisdiction = source.jurisdiction; }
    if (source["legalStatusOfSupply"] !== undefined) { this.legalStatusOfSupply = source.legalStatusOfSupply; }
    if (source["validityPeriod"] !== undefined) { this.validityPeriod = source.validityPeriod; }
  }
}
/**
 * The regulatory procedure for granting or amending a marketing authorization.
 */
export class MedicinalProductAuthorizationProcedure extends fhirModels.BackboneElement {
  /**
   * Applcations submitted to obtain a marketing authorization.
   */
  application?: fhirModels.MedicinalProductAuthorizationProcedure[];
  /**
   * Date of procedure.
   */
  datePeriod?: fhirModels.Period;
  /**
   * Date of procedure.
   */
  dateDateTime?: string;
  _dateDateTime?: fhirModels.Element;
  /**
   * Identifier for this procedure.
   */
  identifier?: fhirModels.Identifier;
  /**
   * Type of procedure.
   */
  type: fhirModels.CodeableConcept;
  /**
   * Default constructor
   */
  constructor(source: MedicinalProductAuthorizationProcedure) {
    super(source);
    if (source["application"] !== undefined) { this.application = source.application; }
    if (source["datePeriod"] !== undefined) { this.datePeriod = source.datePeriod; }
    if (source["dateDateTime"] !== undefined) { this.dateDateTime = source.dateDateTime; }
    if (source["_dateDateTime"] !== undefined) { this._dateDateTime = source._dateDateTime; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["type"] === undefined) { throw 'Missing required element type';}
    this.type = source.type;
  }
}
/**
 * The regulatory authorization of a medicinal product.
 */
export class MedicinalProductAuthorization extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "MedicinalProductAuthorization";
  /**
   * The country in which the marketing authorization has been granted.
   */
  country?: fhirModels.CodeableConcept[];
  /**
   * A period of time after authorization before generic product applicatiosn can be submitted.
   */
  dataExclusivityPeriod?: fhirModels.Period;
  /**
   * The date when the first authorization was granted by a Medicines Regulatory Agency.
   */
  dateOfFirstAuthorization?: string;
  _dateOfFirstAuthorization?: fhirModels.Element;
  /**
   * Marketing Authorization Holder.
   */
  holder?: fhirModels.Reference;
  /**
   * Business identifier for the marketing authorization, as assigned by a regulator.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * Date of first marketing authorization for a company's new medicinal product in any country in the World.
   */
  internationalBirthDate?: string;
  _internationalBirthDate?: fhirModels.Element;
  /**
   * Jurisdiction within a country.
   */
  jurisdiction?: fhirModels.CodeableConcept[];
  /**
   * Authorization in areas within a country.
   */
  jurisdictionalAuthorization?: fhirModels.MedicinalProductAuthorizationJurisdictionalAuthorization[];
  /**
   * The legal framework against which this authorization is granted.
   */
  legalBasis?: fhirModels.CodeableConcept;
  /**
   * The regulatory procedure for granting or amending a marketing authorization.
   */
  procedure?: fhirModels.MedicinalProductAuthorizationProcedure;
  /**
   * Medicines Regulatory Agency.
   */
  regulator?: fhirModels.Reference;
  /**
   * The date when a suspended the marketing or the marketing authorization of the product is anticipated to be restored.
   */
  restoreDate?: string;
  _restoreDate?: fhirModels.Element;
  /**
   * The status of the marketing authorization.
   */
  status?: fhirModels.CodeableConcept;
  /**
   * The date at which the given status has become applicable.
   */
  statusDate?: string;
  _statusDate?: fhirModels.Element;
  /**
   * The medicinal product that is being authorized.
   */
  subject?: fhirModels.Reference;
  /**
   * The beginning of the time period in which the marketing authorization is in the specific status shall be specified A complete date consisting of day, month and year shall be specified using the ISO 8601 date format.
   */
  validityPeriod?: fhirModels.Period;
  /**
   * Default constructor
   */
  constructor(source: MedicinalProductAuthorization) {
    super(source);
    if ((source['resourceType'] !== "MedicinalProductAuthorization") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a MedicinalProductAuthorization'; }
    if (source["country"] !== undefined) { this.country = source.country; }
    if (source["dataExclusivityPeriod"] !== undefined) { this.dataExclusivityPeriod = source.dataExclusivityPeriod; }
    if (source["dateOfFirstAuthorization"] !== undefined) { this.dateOfFirstAuthorization = source.dateOfFirstAuthorization; }
    if (source["_dateOfFirstAuthorization"] !== undefined) { this._dateOfFirstAuthorization = source._dateOfFirstAuthorization; }
    if (source["holder"] !== undefined) { this.holder = source.holder; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["internationalBirthDate"] !== undefined) { this.internationalBirthDate = source.internationalBirthDate; }
    if (source["_internationalBirthDate"] !== undefined) { this._internationalBirthDate = source._internationalBirthDate; }
    if (source["jurisdiction"] !== undefined) { this.jurisdiction = source.jurisdiction; }
    if (source["jurisdictionalAuthorization"] !== undefined) { this.jurisdictionalAuthorization = source.jurisdictionalAuthorization; }
    if (source["legalBasis"] !== undefined) { this.legalBasis = source.legalBasis; }
    if (source["procedure"] !== undefined) { this.procedure = source.procedure; }
    if (source["regulator"] !== undefined) { this.regulator = source.regulator; }
    if (source["restoreDate"] !== undefined) { this.restoreDate = source.restoreDate; }
    if (source["_restoreDate"] !== undefined) { this._restoreDate = source._restoreDate; }
    if (source["status"] !== undefined) { this.status = source.status; }
    if (source["statusDate"] !== undefined) { this.statusDate = source.statusDate; }
    if (source["_statusDate"] !== undefined) { this._statusDate = source._statusDate; }
    if (source["subject"] !== undefined) { this.subject = source.subject; }
    if (source["validityPeriod"] !== undefined) { this.validityPeriod = source.validityPeriod; }
  }
}
