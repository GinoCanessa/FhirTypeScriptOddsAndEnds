// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * Coding words or phrases of the name.
 */
export class MedicinalProductNameNamePart extends fhirModels.BackboneElement {
  /**
   * A fragment of a product name.
   */
  part: string;
  _part?: fhirModels.Element;
  /**
   * Idenifying type for this part of the name (e.g. strength part).
   */
  type: fhirModels.Coding;
  /**
   * Default constructor
   */
  constructor(source: MedicinalProductNameNamePart) {
    super(source);
    if (source["part"] === undefined) { throw 'Missing required element part';}
    this.part = source.part;
    if (source["_part"] !== undefined) { this._part = source._part; }
    if (source["type"] === undefined) { throw 'Missing required element type';}
    this.type = source.type;
  }
}
/**
 * Country where the name applies.
 */
export class MedicinalProductNameCountryLanguage extends fhirModels.BackboneElement {
  /**
   * Country code for where this name applies.
   */
  country: fhirModels.CodeableConcept;
  /**
   * Jurisdiction code for where this name applies.
   */
  jurisdiction?: fhirModels.CodeableConcept;
  /**
   * Language code for this name.
   */
  language: fhirModels.CodeableConcept;
  /**
   * Default constructor
   */
  constructor(source: MedicinalProductNameCountryLanguage) {
    super(source);
    if (source["country"] === undefined) { throw 'Missing required element country';}
    this.country = source.country;
    if (source["jurisdiction"] !== undefined) { this.jurisdiction = source.jurisdiction; }
    if (source["language"] === undefined) { throw 'Missing required element language';}
    this.language = source.language;
  }
}
/**
 * The product's name, including full name and possibly coded parts.
 */
export class MedicinalProductName extends fhirModels.BackboneElement {
  /**
   * Country where the name applies.
   */
  countryLanguage?: fhirModels.MedicinalProductNameCountryLanguage[];
  /**
   * Coding words or phrases of the name.
   */
  namePart?: fhirModels.MedicinalProductNameNamePart[];
  /**
   * The full product name.
   */
  productName: string;
  _productName?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: MedicinalProductName) {
    super(source);
    if (source["countryLanguage"] !== undefined) { this.countryLanguage = source.countryLanguage; }
    if (source["namePart"] !== undefined) { this.namePart = source.namePart; }
    if (source["productName"] === undefined) { throw 'Missing required element productName';}
    this.productName = source.productName;
    if (source["_productName"] !== undefined) { this._productName = source._productName; }
  }
}
/**
 * An operation applied to the product, for manufacturing or adminsitrative purpose.
 */
export class MedicinalProductManufacturingBusinessOperation extends fhirModels.BackboneElement {
  /**
   * Regulatory authorization reference number.
   */
  authorisationReferenceNumber?: fhirModels.Identifier;
  /**
   * To indicate if this proces is commercially confidential.
   */
  confidentialityIndicator?: fhirModels.CodeableConcept;
  /**
   * Regulatory authorization date.
   */
  effectiveDate?: string;
  _effectiveDate?: fhirModels.Element;
  /**
   * The manufacturer or establishment associated with the process.
   */
  manufacturer?: fhirModels.Reference[];
  /**
   * The type of manufacturing operation.
   */
  operationType?: fhirModels.CodeableConcept;
  /**
   * A regulator which oversees the operation.
   */
  regulator?: fhirModels.Reference;
  /**
   * Default constructor
   */
  constructor(source: MedicinalProductManufacturingBusinessOperation) {
    super(source);
    if (source["authorisationReferenceNumber"] !== undefined) { this.authorisationReferenceNumber = source.authorisationReferenceNumber; }
    if (source["confidentialityIndicator"] !== undefined) { this.confidentialityIndicator = source.confidentialityIndicator; }
    if (source["effectiveDate"] !== undefined) { this.effectiveDate = source.effectiveDate; }
    if (source["_effectiveDate"] !== undefined) { this._effectiveDate = source._effectiveDate; }
    if (source["manufacturer"] !== undefined) { this.manufacturer = source.manufacturer; }
    if (source["operationType"] !== undefined) { this.operationType = source.operationType; }
    if (source["regulator"] !== undefined) { this.regulator = source.regulator; }
  }
}
/**
 * Indicates if the medicinal product has an orphan designation for the treatment of a rare disease.
 */
export class MedicinalProductSpecialDesignation extends fhirModels.BackboneElement {
  /**
   * Date when the designation was granted.
   */
  date?: string;
  _date?: fhirModels.Element;
  /**
   * Identifier for the designation, or procedure number.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * Condition for which the medicinal use applies.
   */
  indicationCodeableConcept?: fhirModels.CodeableConcept;
  /**
   * Condition for which the medicinal use applies.
   */
  indicationReference?: fhirModels.Reference;
  /**
   * The intended use of the product, e.g. prevention, treatment.
   */
  intendedUse?: fhirModels.CodeableConcept;
  /**
   * Animal species for which this applies.
   */
  species?: fhirModels.CodeableConcept;
  /**
   * For example granted, pending, expired or withdrawn.
   */
  status?: fhirModels.CodeableConcept;
  /**
   * The type of special designation, e.g. orphan drug, minor use.
   */
  type?: fhirModels.CodeableConcept;
  /**
   * Default constructor
   */
  constructor(source: MedicinalProductSpecialDesignation) {
    super(source);
    if (source["date"] !== undefined) { this.date = source.date; }
    if (source["_date"] !== undefined) { this._date = source._date; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["indicationCodeableConcept"] !== undefined) { this.indicationCodeableConcept = source.indicationCodeableConcept; }
    if (source["indicationReference"] !== undefined) { this.indicationReference = source.indicationReference; }
    if (source["intendedUse"] !== undefined) { this.intendedUse = source.intendedUse; }
    if (source["species"] !== undefined) { this.species = source.species; }
    if (source["status"] !== undefined) { this.status = source.status; }
    if (source["type"] !== undefined) { this.type = source.type; }
  }
}
/**
 * Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).
 */
export class MedicinalProduct extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "MedicinalProduct";
  /**
   * Whether the Medicinal Product is subject to additional monitoring for regulatory reasons.
   */
  additionalMonitoringIndicator?: fhirModels.CodeableConcept;
  /**
   * Supporting documentation, typically for regulatory submission.
   */
  attachedDocument?: fhirModels.Reference[];
  /**
   * Clinical trials or studies that this product is involved in.
   */
  clinicalTrial?: fhirModels.Reference[];
  /**
   * The dose form for a single part product, or combined form of a multiple part product.
   */
  combinedPharmaceuticalDoseForm?: fhirModels.CodeableConcept;
  /**
   * A product specific contact, person (in a role), or an organization.
   */
  contact?: fhirModels.Reference[];
  /**
   * Reference to another product, e.g. for linking authorised to investigational product.
   */
  crossReference?: fhirModels.Identifier[];
  /**
   * If this medicine applies to human or veterinary uses.
   */
  domain?: fhirModels.Coding;
  /**
   * Business identifier for this product. Could be an MPID.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * The legal status of supply of the medicinal product as classified by the regulator.
   */
  legalStatusOfSupply?: fhirModels.CodeableConcept;
  /**
   * An operation applied to the product, for manufacturing or adminsitrative purpose.
   */
  manufacturingBusinessOperation?: fhirModels.MedicinalProductManufacturingBusinessOperation[];
  /**
   * Marketing status of the medicinal product, in contrast to marketing authorizaton.
   */
  marketingStatus?: fhirModels.MarketingStatus[];
  /**
   * A master file for to the medicinal product (e.g. Pharmacovigilance System Master File).
   */
  masterFile?: fhirModels.Reference[];
  /**
   * The product's name, including full name and possibly coded parts.
   */
  name: fhirModels.MedicinalProductName[];
  /**
   * Package representation for the product.
   */
  packagedMedicinalProduct?: fhirModels.Reference[];
  /**
   * If authorised for use in children.
   */
  paediatricUseIndicator?: fhirModels.CodeableConcept;
  /**
   * Pharmaceutical aspects of product.
   */
  pharmaceuticalProduct?: fhirModels.Reference[];
  /**
   * Allows the product to be classified by various systems.
   */
  productClassification?: fhirModels.CodeableConcept[];
  /**
   * Indicates if the medicinal product has an orphan designation for the treatment of a rare disease.
   */
  specialDesignation?: fhirModels.MedicinalProductSpecialDesignation[];
  /**
   * Whether the Medicinal Product is subject to special measures for regulatory reasons.
   */
  specialMeasures?: string[];
  _specialMeasures?: fhirModels.Element[];
  /**
   * Regulatory type, e.g. Investigational or Authorized.
   */
  type?: fhirModels.CodeableConcept;
  /**
   * Default constructor
   */
  constructor(source: MedicinalProduct) {
    super(source);
    if ((source['resourceType'] !== "MedicinalProduct") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a MedicinalProduct'; }
    if (source["additionalMonitoringIndicator"] !== undefined) { this.additionalMonitoringIndicator = source.additionalMonitoringIndicator; }
    if (source["attachedDocument"] !== undefined) { this.attachedDocument = source.attachedDocument; }
    if (source["clinicalTrial"] !== undefined) { this.clinicalTrial = source.clinicalTrial; }
    if (source["combinedPharmaceuticalDoseForm"] !== undefined) { this.combinedPharmaceuticalDoseForm = source.combinedPharmaceuticalDoseForm; }
    if (source["contact"] !== undefined) { this.contact = source.contact; }
    if (source["crossReference"] !== undefined) { this.crossReference = source.crossReference; }
    if (source["domain"] !== undefined) { this.domain = source.domain; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["legalStatusOfSupply"] !== undefined) { this.legalStatusOfSupply = source.legalStatusOfSupply; }
    if (source["manufacturingBusinessOperation"] !== undefined) { this.manufacturingBusinessOperation = source.manufacturingBusinessOperation; }
    if (source["marketingStatus"] !== undefined) { this.marketingStatus = source.marketingStatus; }
    if (source["masterFile"] !== undefined) { this.masterFile = source.masterFile; }
    if (source["name"] === undefined) { throw 'Missing required element name';}
    this.name = source.name;
    if (source["packagedMedicinalProduct"] !== undefined) { this.packagedMedicinalProduct = source.packagedMedicinalProduct; }
    if (source["paediatricUseIndicator"] !== undefined) { this.paediatricUseIndicator = source.paediatricUseIndicator; }
    if (source["pharmaceuticalProduct"] !== undefined) { this.pharmaceuticalProduct = source.pharmaceuticalProduct; }
    if (source["productClassification"] !== undefined) { this.productClassification = source.productClassification; }
    if (source["specialDesignation"] !== undefined) { this.specialDesignation = source.specialDesignation; }
    if (source["specialMeasures"] !== undefined) { this.specialMeasures = source.specialMeasures; }
    if (source["_specialMeasures"] !== undefined) { this._specialMeasures = source._specialMeasures; }
    if (source["type"] !== undefined) { this.type = source.type; }
  }
}
