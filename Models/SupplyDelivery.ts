// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * The item that is being delivered or has been supplied.
 */
export class SupplyDeliverySuppliedItem extends fhirModels.BackboneElement {
  /**
   * Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
   */
  itemCodeableConcept?: fhirModels.CodeableConcept;
  /**
   * Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
   */
  itemReference?: fhirModels.Reference;
  /**
   * The amount of supply that has been dispensed. Includes unit of measure.
   */
  quantity?: fhirModels.Quantity;
  /**
   * Default constructor
   */
  constructor(source: SupplyDeliverySuppliedItem) {
    super(source);
    if (source["itemCodeableConcept"] !== undefined) { this.itemCodeableConcept = source.itemCodeableConcept; }
    if (source["itemReference"] !== undefined) { this.itemReference = source.itemReference; }
    if (source["quantity"] !== undefined) { this.quantity = source.quantity; }
  }
}
/**
 * Record of delivery of what is supplied.
 */
export class SupplyDelivery extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "SupplyDelivery";
  /**
   * A plan, proposal or order that is fulfilled in whole or in part by this event.
   */
  basedOn?: fhirModels.Reference[];
  /**
   * Identification of the facility/location where the Supply was shipped to, as part of the dispense event.
   */
  destination?: fhirModels.Reference;
  /**
   * This identifier is typically assigned by the dispenser, and may be used to reference the delivery when exchanging information about it with other systems.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * [The list of types may be constrained as appropriate for the type of event].
   */
  occurrenceDateTime?: string;
  _occurrenceDateTime?: fhirModels.Element;
  /**
   * [The list of types may be constrained as appropriate for the type of event].
   */
  occurrencePeriod?: fhirModels.Period;
  /**
   * [The list of types may be constrained as appropriate for the type of event].
   */
  occurrenceTiming?: fhirModels.Timing;
  /**
   * Not to be used to link an event to an Encounter - use Event.context for that.
   * [The allowed reference resources may be adjusted as appropriate for the event resource].
   */
  partOf?: fhirModels.Reference[];
  /**
   * A link to a resource representing the person whom the delivered item is for.
   */
  patient?: fhirModels.Reference;
  /**
   * Identifies the person who picked up the Supply.
   */
  receiver?: fhirModels.Reference[];
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status?: SupplyDeliveryStatusEnum;
  _status?: fhirModels.Element;
  /**
   * The item that is being delivered or has been supplied.
   */
  suppliedItem?: fhirModels.SupplyDeliverySuppliedItem;
  /**
   * The individual responsible for dispensing the medication, supplier or device.
   */
  supplier?: fhirModels.Reference;
  /**
   * Indicates the type of dispensing event that is performed. Examples include: Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
   */
  type?: fhirModels.CodeableConcept;
  /**
   * Default constructor
   */
  constructor(source: SupplyDelivery) {
    super(source);
    if ((source['resourceType'] !== "SupplyDelivery") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a SupplyDelivery'; }
    if (source["basedOn"] !== undefined) { this.basedOn = source.basedOn; }
    if (source["destination"] !== undefined) { this.destination = source.destination; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["occurrenceDateTime"] !== undefined) { this.occurrenceDateTime = source.occurrenceDateTime; }
    if (source["_occurrenceDateTime"] !== undefined) { this._occurrenceDateTime = source._occurrenceDateTime; }
    if (source["occurrencePeriod"] !== undefined) { this.occurrencePeriod = source.occurrencePeriod; }
    if (source["occurrenceTiming"] !== undefined) { this.occurrenceTiming = source.occurrenceTiming; }
    if (source["partOf"] !== undefined) { this.partOf = source.partOf; }
    if (source["patient"] !== undefined) { this.patient = source.patient; }
    if (source["receiver"] !== undefined) { this.receiver = source.receiver; }
    if (source["status"] !== undefined) { this.status = source.status; }
    if (source["_status"] !== undefined) { this._status = source._status; }
    if (source["suppliedItem"] !== undefined) { this.suppliedItem = source.suppliedItem; }
    if (source["supplier"] !== undefined) { this.supplier = source.supplier; }
    if (source["type"] !== undefined) { this.type = source.type; }
  }
}
/**
 * Code Values for the SupplyDelivery.status field
 */
export enum SupplyDeliveryStatusEnum {
  IN_PROGRESS = "in-progress",
  COMPLETED = "completed",
  ABANDONED = "abandoned",
  ENTERED_IN_ERROR = "entered-in-error",
}
