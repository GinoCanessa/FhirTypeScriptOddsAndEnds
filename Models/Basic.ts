// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification.
 */
export class Basic extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "Basic";
  /**
   * Indicates who was responsible for creating the resource instance.
   */
  author?: fhirModels.Reference;
  /**
   * Because resource references will only be able to indicate 'Basic', the type of reference will need to be specified in a Profile identified as part of the resource.  Refer to the resource notes section for information on appropriate terminologies for this code.
   * This element is labeled as a modifier because it defines the meaning of the resource and cannot be ignored.
   */
  code: fhirModels.CodeableConcept;
  /**
   * Identifies when the resource was first created.
   */
  created?: string;
  _created?: fhirModels.Element;
  /**
   * Identifier assigned to the resource for business purposes, outside the context of FHIR.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * Optional as not all potential resources will have subjects.  Resources associated with multiple subjects can handle this via extension.
   */
  subject?: fhirModels.Reference;
  /**
   * Default constructor
   */
  constructor(source: Basic) {
    super(source);
    if ((source['resourceType'] !== "Basic") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a Basic'; }
    if (source["author"] !== undefined) { this.author = source.author; }
    if (source["code"] === undefined) { throw 'Missing required element code';}
    this.code = source.code;
    if (source["created"] !== undefined) { this.created = source.created; }
    if (source["_created"] !== undefined) { this._created = source._created; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["subject"] !== undefined) { this.subject = source.subject; }
  }
}
