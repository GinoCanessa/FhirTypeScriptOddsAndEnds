// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * Batch numbering.
 */
export class MedicinalProductPackagedBatchIdentifier extends fhirModels.BackboneElement {
  /**
   * A number appearing on the immediate packaging (and not the outer packaging).
   */
  immediatePackaging?: fhirModels.Identifier;
  /**
   * A number appearing on the outer packaging of a specific batch.
   */
  outerPackaging: fhirModels.Identifier;
  /**
   * Default constructor
   */
  constructor(source: MedicinalProductPackagedBatchIdentifier) {
    super(source);
    if (source["immediatePackaging"] !== undefined) { this.immediatePackaging = source.immediatePackaging; }
    if (source["outerPackaging"] === undefined) { throw 'Missing required element outerPackaging';}
    this.outerPackaging = source.outerPackaging;
  }
}
/**
 * A packaging item, as a contained for medicine, possibly with other packaging items within.
 */
export class MedicinalProductPackagedPackageItem extends fhirModels.BackboneElement {
  /**
   * A possible alternate material for the packaging.
   */
  alternateMaterial?: fhirModels.CodeableConcept[];
  /**
   * A device accompanying a medicinal product.
   */
  device?: fhirModels.Reference[];
  /**
   * Including possibly Data Carrier Identifier.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * The manufactured item as contained in the packaged medicinal product.
   */
  manufacturedItem?: fhirModels.Reference[];
  /**
   * Manufacturer of this Package Item.
   */
  manufacturer?: fhirModels.Reference[];
  /**
   * Material type of the package item.
   */
  material?: fhirModels.CodeableConcept[];
  /**
   * Other codeable characteristics.
   */
  otherCharacteristics?: fhirModels.CodeableConcept[];
  /**
   * Allows containers within containers.
   */
  packageItem?: fhirModels.MedicinalProductPackagedPackageItem[];
  /**
   * Dimensions, color etc.
   */
  physicalCharacteristics?: fhirModels.ProdCharacteristic;
  /**
   * The quantity of this package in the medicinal product, at the current level of packaging. The outermost is always 1.
   */
  quantity: fhirModels.Quantity;
  /**
   * Shelf Life and storage information.
   */
  shelfLifeStorage?: fhirModels.ProductShelfLife[];
  /**
   * The physical type of the container of the medicine.
   */
  type: fhirModels.CodeableConcept;
  /**
   * Default constructor
   */
  constructor(source: MedicinalProductPackagedPackageItem) {
    super(source);
    if (source["alternateMaterial"] !== undefined) { this.alternateMaterial = source.alternateMaterial; }
    if (source["device"] !== undefined) { this.device = source.device; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["manufacturedItem"] !== undefined) { this.manufacturedItem = source.manufacturedItem; }
    if (source["manufacturer"] !== undefined) { this.manufacturer = source.manufacturer; }
    if (source["material"] !== undefined) { this.material = source.material; }
    if (source["otherCharacteristics"] !== undefined) { this.otherCharacteristics = source.otherCharacteristics; }
    if (source["packageItem"] !== undefined) { this.packageItem = source.packageItem; }
    if (source["physicalCharacteristics"] !== undefined) { this.physicalCharacteristics = source.physicalCharacteristics; }
    if (source["quantity"] === undefined) { throw 'Missing required element quantity';}
    this.quantity = source.quantity;
    if (source["shelfLifeStorage"] !== undefined) { this.shelfLifeStorage = source.shelfLifeStorage; }
    if (source["type"] === undefined) { throw 'Missing required element type';}
    this.type = source.type;
  }
}
/**
 * A medicinal product in a container or package.
 */
export class MedicinalProductPackaged extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "MedicinalProductPackaged";
  /**
   * Batch numbering.
   */
  batchIdentifier?: fhirModels.MedicinalProductPackagedBatchIdentifier[];
  /**
   * Textual description.
   */
  description?: string;
  _description?: fhirModels.Element;
  /**
   * Unique identifier.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * The legal status of supply of the medicinal product as classified by the regulator.
   */
  legalStatusOfSupply?: fhirModels.CodeableConcept;
  /**
   * Manufacturer of this Package Item.
   */
  manufacturer?: fhirModels.Reference[];
  /**
   * Manufacturer of this Package Item.
   */
  marketingAuthorization?: fhirModels.Reference;
  /**
   * Marketing information.
   */
  marketingStatus?: fhirModels.MarketingStatus[];
  /**
   * A packaging item, as a contained for medicine, possibly with other packaging items within.
   */
  packageItem: fhirModels.MedicinalProductPackagedPackageItem[];
  /**
   * The product with this is a pack for.
   */
  subject?: fhirModels.Reference[];
  /**
   * Default constructor
   */
  constructor(source: MedicinalProductPackaged) {
    super(source);
    if ((source['resourceType'] !== "MedicinalProductPackaged") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a MedicinalProductPackaged'; }
    if (source["batchIdentifier"] !== undefined) { this.batchIdentifier = source.batchIdentifier; }
    if (source["description"] !== undefined) { this.description = source.description; }
    if (source["_description"] !== undefined) { this._description = source._description; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["legalStatusOfSupply"] !== undefined) { this.legalStatusOfSupply = source.legalStatusOfSupply; }
    if (source["manufacturer"] !== undefined) { this.manufacturer = source.manufacturer; }
    if (source["marketingAuthorization"] !== undefined) { this.marketingAuthorization = source.marketingAuthorization; }
    if (source["marketingStatus"] !== undefined) { this.marketingStatus = source.marketingStatus; }
    if (source["packageItem"] === undefined) { throw 'Missing required element packageItem';}
    this.packageItem = source.packageItem;
    if (source["subject"] !== undefined) { this.subject = source.subject; }
  }
}
