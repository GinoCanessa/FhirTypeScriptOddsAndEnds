// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
 */
export class ImmunizationRecommendationRecommendationDateCriterion extends fhirModels.BackboneElement {
  /**
   * Date classification of recommendation.  For example, earliest date to give, latest date to give, etc.
   */
  code: fhirModels.CodeableConcept;
  /**
   * The date whose meaning is specified by dateCriterion.code.
   */
  value: string;
  _value?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: ImmunizationRecommendationRecommendationDateCriterion) {
    super(source);
    if (source["code"] === undefined) { throw 'Missing required element code';}
    this.code = source.code;
    if (source["value"] === undefined) { throw 'Missing required element value';}
    this.value = source.value;
    if (source["_value"] !== undefined) { this._value = source._value; }
  }
}
/**
 * Vaccine administration recommendations.
 */
export class ImmunizationRecommendationRecommendation extends fhirModels.BackboneElement {
  /**
   * Vaccine(s) which should not be used to fulfill the recommendation.
   */
  contraindicatedVaccineCode?: fhirModels.CodeableConcept[];
  /**
   * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
   */
  dateCriterion?: fhirModels.ImmunizationRecommendationRecommendationDateCriterion[];
  /**
   * Contains the description about the protocol under which the vaccine was administered.
   */
  description?: string;
  _description?: fhirModels.Element;
  /**
   * The use of an integer is prefered if known. A string should only be used in cases where an interger is not available (such as when documenting a recurring booster dose).
   */
  doseNumberPositiveInt?: number;
  _doseNumberPositiveInt?: fhirModels.Element;
  /**
   * The use of an integer is prefered if known. A string should only be used in cases where an interger is not available (such as when documenting a recurring booster dose).
   */
  doseNumberString?: string;
  _doseNumberString?: fhirModels.Element;
  /**
   * The reason for the assigned forecast status.
   */
  forecastReason?: fhirModels.CodeableConcept[];
  /**
   * Indicates the patient status with respect to the path to immunity for the target disease.
   */
  forecastStatus: fhirModels.CodeableConcept;
  /**
   * One possible path to achieve presumed immunity against a disease - within the context of an authority.
   */
  series?: string;
  _series?: fhirModels.Element;
  /**
   * The use of an integer is prefered if known. A string should only be used in cases where an interger is not available (such as when documenting a recurring booster dose).
   */
  seriesDosesPositiveInt?: number;
  _seriesDosesPositiveInt?: fhirModels.Element;
  /**
   * The use of an integer is prefered if known. A string should only be used in cases where an interger is not available (such as when documenting a recurring booster dose).
   */
  seriesDosesString?: string;
  _seriesDosesString?: fhirModels.Element;
  /**
   * Immunization event history and/or evaluation that supports the status and recommendation.
   */
  supportingImmunization?: fhirModels.Reference[];
  /**
   * Patient Information that supports the status and recommendation.  This includes patient observations, adverse reactions and allergy/intolerance information.
   */
  supportingPatientInformation?: fhirModels.Reference[];
  /**
   * The targeted disease for the recommendation.
   */
  targetDisease?: fhirModels.CodeableConcept;
  /**
   * Vaccine(s) or vaccine group that pertain to the recommendation.
   */
  vaccineCode?: fhirModels.CodeableConcept[];
  /**
   * Default constructor
   */
  constructor(source: ImmunizationRecommendationRecommendation) {
    super(source);
    if (source["contraindicatedVaccineCode"] !== undefined) { this.contraindicatedVaccineCode = source.contraindicatedVaccineCode; }
    if (source["dateCriterion"] !== undefined) { this.dateCriterion = source.dateCriterion; }
    if (source["description"] !== undefined) { this.description = source.description; }
    if (source["_description"] !== undefined) { this._description = source._description; }
    if (source["doseNumberPositiveInt"] !== undefined) { this.doseNumberPositiveInt = source.doseNumberPositiveInt; }
    if (source["_doseNumberPositiveInt"] !== undefined) { this._doseNumberPositiveInt = source._doseNumberPositiveInt; }
    if (source["doseNumberString"] !== undefined) { this.doseNumberString = source.doseNumberString; }
    if (source["_doseNumberString"] !== undefined) { this._doseNumberString = source._doseNumberString; }
    if (source["forecastReason"] !== undefined) { this.forecastReason = source.forecastReason; }
    if (source["forecastStatus"] === undefined) { throw 'Missing required element forecastStatus';}
    this.forecastStatus = source.forecastStatus;
    if (source["series"] !== undefined) { this.series = source.series; }
    if (source["_series"] !== undefined) { this._series = source._series; }
    if (source["seriesDosesPositiveInt"] !== undefined) { this.seriesDosesPositiveInt = source.seriesDosesPositiveInt; }
    if (source["_seriesDosesPositiveInt"] !== undefined) { this._seriesDosesPositiveInt = source._seriesDosesPositiveInt; }
    if (source["seriesDosesString"] !== undefined) { this.seriesDosesString = source.seriesDosesString; }
    if (source["_seriesDosesString"] !== undefined) { this._seriesDosesString = source._seriesDosesString; }
    if (source["supportingImmunization"] !== undefined) { this.supportingImmunization = source.supportingImmunization; }
    if (source["supportingPatientInformation"] !== undefined) { this.supportingPatientInformation = source.supportingPatientInformation; }
    if (source["targetDisease"] !== undefined) { this.targetDisease = source.targetDisease; }
    if (source["vaccineCode"] !== undefined) { this.vaccineCode = source.vaccineCode; }
  }
}
/**
 * A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification.
 */
export class ImmunizationRecommendation extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "ImmunizationRecommendation";
  /**
   * Indicates the authority who published the protocol (e.g. ACIP).
   */
  authority?: fhirModels.Reference;
  /**
   * The date the immunization recommendation(s) were created.
   */
  date: string;
  _date?: fhirModels.Element;
  /**
   * A unique identifier assigned to this particular recommendation record.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * The patient the recommendation(s) are for.
   */
  patient: fhirModels.Reference;
  /**
   * Vaccine administration recommendations.
   */
  recommendation: fhirModels.ImmunizationRecommendationRecommendation[];
  /**
   * Default constructor
   */
  constructor(source: ImmunizationRecommendation) {
    super(source);
    if ((source['resourceType'] !== "ImmunizationRecommendation") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a ImmunizationRecommendation'; }
    if (source["authority"] !== undefined) { this.authority = source.authority; }
    if (source["date"] === undefined) { throw 'Missing required element date';}
    this.date = source.date;
    if (source["_date"] !== undefined) { this._date = source._date; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["patient"] === undefined) { throw 'Missing required element patient';}
    this.patient = source.patient;
    if (source["recommendation"] === undefined) { throw 'Missing required element recommendation';}
    this.recommendation = source.recommendation;
  }
}
