// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * Distribution of the payment amount for a previously acknowledged payable.
 */
export class PaymentReconciliationDetail extends fhirModels.BackboneElement {
  /**
   * The monetary amount allocated from the total payment to the payable.
   */
  amount?: fhirModels.Money;
  /**
   * The date from the response resource containing a commitment to pay.
   */
  date?: string;
  _date?: fhirModels.Element;
  /**
   * Unique identifier for the current payment item for the referenced payable.
   */
  identifier?: fhirModels.Identifier;
  /**
   * The party which is receiving the payment.
   */
  payee?: fhirModels.Reference;
  /**
   * Unique identifier for the prior payment item for the referenced payable.
   */
  predecessor?: fhirModels.Identifier;
  /**
   * A resource, such as a Claim, the evaluation of which could lead to payment.
   */
  request?: fhirModels.Reference;
  /**
   * A resource, such as a ClaimResponse, which contains a commitment to payment.
   */
  response?: fhirModels.Reference;
  /**
   * A reference to the individual who is responsible for inquiries regarding the response and its payment.
   */
  responsible?: fhirModels.Reference;
  /**
   * The party which submitted the claim or financial transaction.
   */
  submitter?: fhirModels.Reference;
  /**
   * For example: payment, adjustment, funds advance, etc.
   */
  type: fhirModels.CodeableConcept;
  /**
   * Default constructor
   */
  constructor(source: PaymentReconciliationDetail) {
    super(source);
    if (source["amount"] !== undefined) { this.amount = source.amount; }
    if (source["date"] !== undefined) { this.date = source.date; }
    if (source["_date"] !== undefined) { this._date = source._date; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["payee"] !== undefined) { this.payee = source.payee; }
    if (source["predecessor"] !== undefined) { this.predecessor = source.predecessor; }
    if (source["request"] !== undefined) { this.request = source.request; }
    if (source["response"] !== undefined) { this.response = source.response; }
    if (source["responsible"] !== undefined) { this.responsible = source.responsible; }
    if (source["submitter"] !== undefined) { this.submitter = source.submitter; }
    if (source["type"] === undefined) { throw 'Missing required element type';}
    this.type = source.type;
  }
}
/**
 * A note that describes or explains the processing in a human readable form.
 */
export class PaymentReconciliationProcessNote extends fhirModels.BackboneElement {
  /**
   * The explanation or description associated with the processing.
   */
  text?: string;
  _text?: fhirModels.Element;
  /**
   * The business purpose of the note text.
   */
  type?: PaymentReconciliationProcessNoteTypeEnum;
  _type?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: PaymentReconciliationProcessNote) {
    super(source);
    if (source["text"] !== undefined) { this.text = source.text; }
    if (source["_text"] !== undefined) { this._text = source._text; }
    if (source["type"] !== undefined) { this.type = source.type; }
    if (source["_type"] !== undefined) { this._type = source._type; }
  }
}
/**
 * Code Values for the PaymentReconciliation.processNote.type field
 */
export enum PaymentReconciliationProcessNoteTypeEnum {
  DISPLAY = "display",
  PRINT = "print",
  PRINTOPER = "printoper",
}
/**
 * This resource provides the details including amount of a payment and allocates the payment items being paid.
 */
export class PaymentReconciliation extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "PaymentReconciliation";
  /**
   * The date when the resource was created.
   */
  created: string;
  _created?: fhirModels.Element;
  /**
   * Distribution of the payment amount for a previously acknowledged payable.
   */
  detail?: fhirModels.PaymentReconciliationDetail[];
  /**
   * A human readable description of the status of the request for the reconciliation.
   */
  disposition?: string;
  _disposition?: fhirModels.Element;
  /**
   * May be needed to identify specific jurisdictional forms.
   */
  formCode?: fhirModels.CodeableConcept;
  /**
   * A unique identifier assigned to this payment reconciliation.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * The resource may be used to indicate that: the request has been held (queued) for processing; that it has been processed and errors found (error); that no errors were found and that some of the adjudication has been undertaken (partial) or that all of the adjudication has been undertaken (complete).
   */
  outcome?: PaymentReconciliationOutcomeEnum;
  _outcome?: fhirModels.Element;
  /**
   * Total payment amount as indicated on the financial instrument.
   */
  paymentAmount: fhirModels.Money;
  /**
   * The date of payment as indicated on the financial instrument.
   */
  paymentDate: string;
  _paymentDate?: fhirModels.Element;
  /**
   * For example: EFT number or check number.
   */
  paymentIdentifier?: fhirModels.Identifier;
  /**
   * This party is also responsible for the reconciliation.
   */
  paymentIssuer?: fhirModels.Reference;
  /**
   * The period of time for which payments have been gathered into this bulk payment for settlement.
   */
  period?: fhirModels.Period;
  /**
   * A note that describes or explains the processing in a human readable form.
   */
  processNote?: fhirModels.PaymentReconciliationProcessNote[];
  /**
   * Original request resource reference.
   */
  request?: fhirModels.Reference;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  requestor?: fhirModels.Reference;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: PaymentReconciliationStatusEnum;
  _status?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: PaymentReconciliation) {
    super(source);
    if ((source['resourceType'] !== "PaymentReconciliation") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a PaymentReconciliation'; }
    if (source["created"] === undefined) { throw 'Missing required element created';}
    this.created = source.created;
    if (source["_created"] !== undefined) { this._created = source._created; }
    if (source["detail"] !== undefined) { this.detail = source.detail; }
    if (source["disposition"] !== undefined) { this.disposition = source.disposition; }
    if (source["_disposition"] !== undefined) { this._disposition = source._disposition; }
    if (source["formCode"] !== undefined) { this.formCode = source.formCode; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["outcome"] !== undefined) { this.outcome = source.outcome; }
    if (source["_outcome"] !== undefined) { this._outcome = source._outcome; }
    if (source["paymentAmount"] === undefined) { throw 'Missing required element paymentAmount';}
    this.paymentAmount = source.paymentAmount;
    if (source["paymentDate"] === undefined) { throw 'Missing required element paymentDate';}
    this.paymentDate = source.paymentDate;
    if (source["_paymentDate"] !== undefined) { this._paymentDate = source._paymentDate; }
    if (source["paymentIdentifier"] !== undefined) { this.paymentIdentifier = source.paymentIdentifier; }
    if (source["paymentIssuer"] !== undefined) { this.paymentIssuer = source.paymentIssuer; }
    if (source["period"] !== undefined) { this.period = source.period; }
    if (source["processNote"] !== undefined) { this.processNote = source.processNote; }
    if (source["request"] !== undefined) { this.request = source.request; }
    if (source["requestor"] !== undefined) { this.requestor = source.requestor; }
    if (source["status"] === undefined) { throw 'Missing required element status';}
    this.status = source.status;
    if (source["_status"] !== undefined) { this._status = source._status; }
  }
}
/**
 * Code Values for the PaymentReconciliation.outcome field
 */
export enum PaymentReconciliationOutcomeEnum {
  QUEUED = "queued",
  COMPLETE = "complete",
  ERROR = "error",
  PARTIAL = "partial",
}
/**
 * Code Values for the PaymentReconciliation.status field
 */
export enum PaymentReconciliationStatusEnum {
  ACTIVE = "active",
  CANCELLED = "cancelled",
  DRAFT = "draft",
  ENTERED_IN_ERROR = "entered-in-error",
}
