// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
 */
export class ParameterDefinition extends fhirModels.Element {
  /**
   * A brief discussion of what the parameter is for and how it is used by the module.
   */
  documentation?: string;
  _documentation?: fhirModels.Element;
  /**
   * The maximum number of times this element is permitted to appear in the request or response.
   */
  max?: string;
  _max?: fhirModels.Element;
  /**
   * The minimum number of times this parameter SHALL appear in the request or response.
   */
  min?: number;
  _min?: fhirModels.Element;
  /**
   * The name of the parameter used to allow access to the value of the parameter in evaluation contexts.
   */
  name?: string;
  _name?: fhirModels.Element;
  /**
   * If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.
   */
  profile?: string;
  _profile?: fhirModels.Element;
  /**
   * The type of the parameter.
   */
  type: string;
  _type?: fhirModels.Element;
  /**
   * Whether the parameter is input or output for the module.
   */
  use: ParameterDefinitionUseEnum;
  _use?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: ParameterDefinition) {
    super(source);
    if (source["documentation"] !== undefined) { this.documentation = source.documentation; }
    if (source["_documentation"] !== undefined) { this._documentation = source._documentation; }
    if (source["max"] !== undefined) { this.max = source.max; }
    if (source["_max"] !== undefined) { this._max = source._max; }
    if (source["min"] !== undefined) { this.min = source.min; }
    if (source["_min"] !== undefined) { this._min = source._min; }
    if (source["name"] !== undefined) { this.name = source.name; }
    if (source["_name"] !== undefined) { this._name = source._name; }
    if (source["profile"] !== undefined) { this.profile = source.profile; }
    if (source["_profile"] !== undefined) { this._profile = source._profile; }
    if (source["type"] === undefined) { throw 'Missing required element type';}
    this.type = source.type;
    if (source["_type"] !== undefined) { this._type = source._type; }
    if (source["use"] === undefined) { throw 'Missing required element use';}
    this.use = source.use;
    if (source["_use"] !== undefined) { this._use = source._use; }
  }
}
/**
 * Code Values for the ParameterDefinition.use field
 */
export enum ParameterDefinitionUseEnum {
  IN = "in",
  OUT = "out",
}
