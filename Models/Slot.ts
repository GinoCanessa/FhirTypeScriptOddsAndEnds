// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * A slot of time on a schedule that may be available for booking appointments.
 */
export class Slot extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "Slot";
  /**
   * The style of appointment or patient that may be booked in the slot (not service type).
   */
  appointmentType?: fhirModels.CodeableConcept;
  /**
   * Comments on the slot to describe any extended information. Such as custom constraints on the slot.
   */
  comment?: string;
  _comment?: fhirModels.Element;
  /**
   * Date/Time that the slot is to conclude.
   */
  end: string;
  _end?: fhirModels.Element;
  /**
   * External Ids for this item.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * This slot has already been overbooked, appointments are unlikely to be accepted for this time.
   */
  overbooked?: boolean;
  _overbooked?: fhirModels.Element;
  /**
   * The schedule resource that this slot defines an interval of status information.
   */
  schedule: fhirModels.Reference;
  /**
   * A broad categorization of the service that is to be performed during this appointment.
   */
  serviceCategory?: fhirModels.CodeableConcept[];
  /**
   * The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the availability resource.
   */
  serviceType?: fhirModels.CodeableConcept[];
  /**
   * The specialty of a practitioner that would be required to perform the service requested in this appointment.
   */
  specialty?: fhirModels.CodeableConcept[];
  /**
   * Date/Time that the slot is to begin.
   */
  start: string;
  _start?: fhirModels.Element;
  /**
   * busy | free | busy-unavailable | busy-tentative | entered-in-error.
   */
  status: SlotStatusEnum;
  _status?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: Slot) {
    super(source);
    if ((source['resourceType'] !== "Slot") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a Slot'; }
    if (source["appointmentType"] !== undefined) { this.appointmentType = source.appointmentType; }
    if (source["comment"] !== undefined) { this.comment = source.comment; }
    if (source["_comment"] !== undefined) { this._comment = source._comment; }
    if (source["end"] === undefined) { throw 'Missing required element end';}
    this.end = source.end;
    if (source["_end"] !== undefined) { this._end = source._end; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["overbooked"] !== undefined) { this.overbooked = source.overbooked; }
    if (source["_overbooked"] !== undefined) { this._overbooked = source._overbooked; }
    if (source["schedule"] === undefined) { throw 'Missing required element schedule';}
    this.schedule = source.schedule;
    if (source["serviceCategory"] !== undefined) { this.serviceCategory = source.serviceCategory; }
    if (source["serviceType"] !== undefined) { this.serviceType = source.serviceType; }
    if (source["specialty"] !== undefined) { this.specialty = source.specialty; }
    if (source["start"] === undefined) { throw 'Missing required element start';}
    this.start = source.start;
    if (source["_start"] !== undefined) { this._start = source._start; }
    if (source["status"] === undefined) { throw 'Missing required element status';}
    this.status = source.status;
    if (source["_status"] !== undefined) { this._status = source._status; }
  }
}
/**
 * Code Values for the Slot.status field
 */
export enum SlotStatusEnum {
  BUSY = "busy",
  FREE = "free",
  BUSY_UNAVAILABLE = "busy-unavailable",
  BUSY_TENTATIVE = "busy-tentative",
  ENTERED_IN_ERROR = "entered-in-error",
}
