// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * The manufactured item as contained in the packaged medicinal product.
 */
export class MedicinalProductManufactured extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "MedicinalProductManufactured";
  /**
   * Ingredient.
   */
  ingredient?: fhirModels.Reference[];
  /**
   * Dose form as manufactured and before any transformation into the pharmaceutical product.
   */
  manufacturedDoseForm: fhirModels.CodeableConcept;
  /**
   * Manufacturer of the item (Note that this should be named "manufacturer" but it currently causes technical issues).
   */
  manufacturer?: fhirModels.Reference[];
  /**
   * Other codeable characteristics.
   */
  otherCharacteristics?: fhirModels.CodeableConcept[];
  /**
   * Dimensions, color etc.
   */
  physicalCharacteristics?: fhirModels.ProdCharacteristic;
  /**
   * The quantity or "count number" of the manufactured item.
   */
  quantity: fhirModels.Quantity;
  /**
   * The “real world” units in which the quantity of the manufactured item is described.
   */
  unitOfPresentation?: fhirModels.CodeableConcept;
  /**
   * Default constructor
   */
  constructor(source: MedicinalProductManufactured) {
    super(source);
    if ((source['resourceType'] !== "MedicinalProductManufactured") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a MedicinalProductManufactured'; }
    if (source["ingredient"] !== undefined) { this.ingredient = source.ingredient; }
    if (source["manufacturedDoseForm"] === undefined) { throw 'Missing required element manufacturedDoseForm';}
    this.manufacturedDoseForm = source.manufacturedDoseForm;
    if (source["manufacturer"] !== undefined) { this.manufacturer = source.manufacturer; }
    if (source["otherCharacteristics"] !== undefined) { this.otherCharacteristics = source.otherCharacteristics; }
    if (source["physicalCharacteristics"] !== undefined) { this.physicalCharacteristics = source.physicalCharacteristics; }
    if (source["quantity"] === undefined) { throw 'Missing required element quantity';}
    this.quantity = source.quantity;
    if (source["unitOfPresentation"] !== undefined) { this.unitOfPresentation = source.unitOfPresentation; }
  }
}
