// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * A physical entity which is the primary unit of operational and/or administrative interest in a study.
 */
export class ResearchSubject extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "ResearchSubject";
  /**
   * The name of the arm in the study the subject actually followed as part of this study.
   */
  actualArm?: string;
  _actualArm?: fhirModels.Element;
  /**
   * The name of the arm in the study the subject is expected to follow as part of this study.
   */
  assignedArm?: string;
  _assignedArm?: fhirModels.Element;
  /**
   * A record of the patient's informed agreement to participate in the study.
   */
  consent?: fhirModels.Reference;
  /**
   * Identifiers assigned to this research subject for a study.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * The record of the person or animal who is involved in the study.
   */
  individual: fhirModels.Reference;
  /**
   * The dates the subject began and ended their participation in the study.
   */
  period?: fhirModels.Period;
  /**
   * The current state of the subject.
   */
  status: ResearchSubjectStatusEnum;
  _status?: fhirModels.Element;
  /**
   * Reference to the study the subject is participating in.
   */
  study: fhirModels.Reference;
  /**
   * Default constructor
   */
  constructor(source: ResearchSubject) {
    super(source);
    if ((source['resourceType'] !== "ResearchSubject") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a ResearchSubject'; }
    if (source["actualArm"] !== undefined) { this.actualArm = source.actualArm; }
    if (source["_actualArm"] !== undefined) { this._actualArm = source._actualArm; }
    if (source["assignedArm"] !== undefined) { this.assignedArm = source.assignedArm; }
    if (source["_assignedArm"] !== undefined) { this._assignedArm = source._assignedArm; }
    if (source["consent"] !== undefined) { this.consent = source.consent; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["individual"] === undefined) { throw 'Missing required element individual';}
    this.individual = source.individual;
    if (source["period"] !== undefined) { this.period = source.period; }
    if (source["status"] === undefined) { throw 'Missing required element status';}
    this.status = source.status;
    if (source["_status"] !== undefined) { this._status = source._status; }
    if (source["study"] === undefined) { throw 'Missing required element study';}
    this.study = source.study;
  }
}
/**
 * Code Values for the ResearchSubject.status field
 */
export enum ResearchSubjectStatusEnum {
  CANDIDATE = "candidate",
  ELIGIBLE = "eligible",
  FOLLOW_UP = "follow-up",
  INELIGIBLE = "ineligible",
  NOT_REGISTERED = "not-registered",
  OFF_STUDY = "off-study",
  ON_STUDY = "on-study",
  ON_STUDY_INTERVENTION = "on-study-intervention",
  ON_STUDY_OBSERVATION = "on-study-observation",
  PENDING_ON_STUDY = "pending-on-study",
  POTENTIAL_CANDIDATE = "potential-candidate",
  SCREENING = "screening",
  WITHDRAWN = "withdrawn",
}
