// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * Characteristics e.g. a products onset of action.
 */
export class MedicinalProductPharmaceuticalCharacteristics extends fhirModels.BackboneElement {
  /**
   * A coded characteristic.
   */
  code: fhirModels.CodeableConcept;
  /**
   * The status of characteristic e.g. assigned or pending.
   */
  status?: fhirModels.CodeableConcept;
  /**
   * Default constructor
   */
  constructor(source: MedicinalProductPharmaceuticalCharacteristics) {
    super(source);
    if (source["code"] === undefined) { throw 'Missing required element code';}
    this.code = source.code;
    if (source["status"] !== undefined) { this.status = source.status; }
  }
}
/**
 * A species specific time during which consumption of animal product is not appropriate.
 */
export class MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod extends fhirModels.BackboneElement {
  /**
   * Extra information about the withdrawal period.
   */
  supportingInformation?: string;
  _supportingInformation?: fhirModels.Element;
  /**
   * Coded expression for the type of tissue for which the withdrawal period applues, e.g. meat, milk.
   */
  tissue: fhirModels.CodeableConcept;
  /**
   * A value for the time.
   */
  value: fhirModels.Quantity;
  /**
   * Default constructor
   */
  constructor(source: MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod) {
    super(source);
    if (source["supportingInformation"] !== undefined) { this.supportingInformation = source.supportingInformation; }
    if (source["_supportingInformation"] !== undefined) { this._supportingInformation = source._supportingInformation; }
    if (source["tissue"] === undefined) { throw 'Missing required element tissue';}
    this.tissue = source.tissue;
    if (source["value"] === undefined) { throw 'Missing required element value';}
    this.value = source.value;
  }
}
/**
 * A species for which this route applies.
 */
export class MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies extends fhirModels.BackboneElement {
  /**
   * Coded expression for the species.
   */
  code: fhirModels.CodeableConcept;
  /**
   * A species specific time during which consumption of animal product is not appropriate.
   */
  withdrawalPeriod?: fhirModels.MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod[];
  /**
   * Default constructor
   */
  constructor(source: MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies) {
    super(source);
    if (source["code"] === undefined) { throw 'Missing required element code';}
    this.code = source.code;
    if (source["withdrawalPeriod"] !== undefined) { this.withdrawalPeriod = source.withdrawalPeriod; }
  }
}
/**
 * The path by which the pharmaceutical product is taken into or makes contact with the body.
 */
export class MedicinalProductPharmaceuticalRouteOfAdministration extends fhirModels.BackboneElement {
  /**
   * Coded expression for the route.
   */
  code: fhirModels.CodeableConcept;
  /**
   * The first dose (dose quantity) administered in humans can be specified, for a product under investigation, using a numerical value and its unit of measurement.
   */
  firstDose?: fhirModels.Quantity;
  /**
   * The maximum dose per day (maximum dose quantity to be administered in any one 24-h period) that can be administered as per the protocol referenced in the clinical trial authorisation.
   */
  maxDosePerDay?: fhirModels.Quantity;
  /**
   * The maximum dose per treatment period that can be administered as per the protocol referenced in the clinical trial authorisation.
   */
  maxDosePerTreatmentPeriod?: fhirModels.Ratio;
  /**
   * The maximum single dose that can be administered as per the protocol of a clinical trial can be specified using a numerical value and its unit of measurement.
   */
  maxSingleDose?: fhirModels.Quantity;
  /**
   * The maximum treatment period during which an Investigational Medicinal Product can be administered as per the protocol referenced in the clinical trial authorisation.
   */
  maxTreatmentPeriod?: fhirModels.Duration;
  /**
   * A species for which this route applies.
   */
  targetSpecies?: fhirModels.MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies[];
  /**
   * Default constructor
   */
  constructor(source: MedicinalProductPharmaceuticalRouteOfAdministration) {
    super(source);
    if (source["code"] === undefined) { throw 'Missing required element code';}
    this.code = source.code;
    if (source["firstDose"] !== undefined) { this.firstDose = source.firstDose; }
    if (source["maxDosePerDay"] !== undefined) { this.maxDosePerDay = source.maxDosePerDay; }
    if (source["maxDosePerTreatmentPeriod"] !== undefined) { this.maxDosePerTreatmentPeriod = source.maxDosePerTreatmentPeriod; }
    if (source["maxSingleDose"] !== undefined) { this.maxSingleDose = source.maxSingleDose; }
    if (source["maxTreatmentPeriod"] !== undefined) { this.maxTreatmentPeriod = source.maxTreatmentPeriod; }
    if (source["targetSpecies"] !== undefined) { this.targetSpecies = source.targetSpecies; }
  }
}
/**
 * A pharmaceutical product described in terms of its composition and dose form.
 */
export class MedicinalProductPharmaceutical extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "MedicinalProductPharmaceutical";
  /**
   * The administrable dose form, after necessary reconstitution.
   */
  administrableDoseForm: fhirModels.CodeableConcept;
  /**
   * Characteristics e.g. a products onset of action.
   */
  characteristics?: fhirModels.MedicinalProductPharmaceuticalCharacteristics[];
  /**
   * Accompanying device.
   */
  device?: fhirModels.Reference[];
  /**
   * An identifier for the pharmaceutical medicinal product.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * Ingredient.
   */
  ingredient?: fhirModels.Reference[];
  /**
   * The path by which the pharmaceutical product is taken into or makes contact with the body.
   */
  routeOfAdministration: fhirModels.MedicinalProductPharmaceuticalRouteOfAdministration[];
  /**
   * Todo.
   */
  unitOfPresentation?: fhirModels.CodeableConcept;
  /**
   * Default constructor
   */
  constructor(source: MedicinalProductPharmaceutical) {
    super(source);
    if ((source['resourceType'] !== "MedicinalProductPharmaceutical") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a MedicinalProductPharmaceutical'; }
    if (source["administrableDoseForm"] === undefined) { throw 'Missing required element administrableDoseForm';}
    this.administrableDoseForm = source.administrableDoseForm;
    if (source["characteristics"] !== undefined) { this.characteristics = source.characteristics; }
    if (source["device"] !== undefined) { this.device = source.device; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["ingredient"] !== undefined) { this.ingredient = source.ingredient; }
    if (source["routeOfAdministration"] === undefined) { throw 'Missing required element routeOfAdministration';}
    this.routeOfAdministration = source.routeOfAdministration;
    if (source["unitOfPresentation"] !== undefined) { this.unitOfPresentation = source.unitOfPresentation; }
  }
}
