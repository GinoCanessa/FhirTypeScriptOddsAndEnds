// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * Specific parameters for the ordered item.  For example, the size of the indicated item.
 */
export class SupplyRequestParameter extends fhirModels.BackboneElement {
  /**
   * A code or string that identifies the device detail being asserted.
   */
  code?: fhirModels.CodeableConcept;
  /**
   * Range means device should have a value that falls somewhere within the specified range.
   */
  valueCodeableConcept?: fhirModels.CodeableConcept;
  /**
   * Range means device should have a value that falls somewhere within the specified range.
   */
  valueQuantity?: fhirModels.Quantity;
  /**
   * Range means device should have a value that falls somewhere within the specified range.
   */
  valueRange?: fhirModels.Range;
  /**
   * Range means device should have a value that falls somewhere within the specified range.
   */
  valueBoolean?: boolean;
  _valueBoolean?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: SupplyRequestParameter) {
    super(source);
    if (source["code"] !== undefined) { this.code = source.code; }
    if (source["valueCodeableConcept"] !== undefined) { this.valueCodeableConcept = source.valueCodeableConcept; }
    if (source["valueQuantity"] !== undefined) { this.valueQuantity = source.valueQuantity; }
    if (source["valueRange"] !== undefined) { this.valueRange = source.valueRange; }
    if (source["valueBoolean"] !== undefined) { this.valueBoolean = source.valueBoolean; }
    if (source["_valueBoolean"] !== undefined) { this._valueBoolean = source._valueBoolean; }
  }
}
/**
 * A record of a request for a medication, substance or device used in the healthcare setting.
 */
export class SupplyRequest extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "SupplyRequest";
  /**
   * When the request was made.
   */
  authoredOn?: string;
  _authoredOn?: fhirModels.Element;
  /**
   * Category of supply, e.g.  central, non-stock, etc. This is used to support work flows associated with the supply process.
   */
  category?: fhirModels.CodeableConcept;
  /**
   * Where the supply is expected to come from.
   */
  deliverFrom?: fhirModels.Reference;
  /**
   * Where the supply is destined to go.
   */
  deliverTo?: fhirModels.Reference;
  /**
   * The identifier.type element is used to distinguish between the identifiers assigned by the requester/placer and the performer/filler.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * Note that there's a difference between a prescription - an instruction to take a medication, along with a (sometimes) implicit supply, and an explicit request to supply, with no explicit instructions.
   */
  itemCodeableConcept?: fhirModels.CodeableConcept;
  /**
   * Note that there's a difference between a prescription - an instruction to take a medication, along with a (sometimes) implicit supply, and an explicit request to supply, with no explicit instructions.
   */
  itemReference?: fhirModels.Reference;
  /**
   * When the request should be fulfilled.
   */
  occurrenceDateTime?: string;
  _occurrenceDateTime?: fhirModels.Element;
  /**
   * When the request should be fulfilled.
   */
  occurrencePeriod?: fhirModels.Period;
  /**
   * When the request should be fulfilled.
   */
  occurrenceTiming?: fhirModels.Timing;
  /**
   * Specific parameters for the ordered item.  For example, the size of the indicated item.
   */
  parameter?: fhirModels.SupplyRequestParameter[];
  /**
   * Indicates how quickly this SupplyRequest should be addressed with respect to other requests.
   */
  priority?: SupplyRequestPriorityEnum;
  _priority?: fhirModels.Element;
  /**
   * The amount that is being ordered of the indicated item.
   */
  quantity: fhirModels.Quantity;
  /**
   * The reason why the supply item was requested.
   */
  reasonCode?: fhirModels.CodeableConcept[];
  /**
   * The reason why the supply item was requested.
   */
  reasonReference?: fhirModels.Reference[];
  /**
   * The device, practitioner, etc. who initiated the request.
   */
  requester?: fhirModels.Reference;
  /**
   * Status of the supply request.
   */
  status?: SupplyRequestStatusEnum;
  _status?: fhirModels.Element;
  /**
   * Who is intended to fulfill the request.
   */
  supplier?: fhirModels.Reference[];
  /**
   * Default constructor
   */
  constructor(source: SupplyRequest) {
    super(source);
    if ((source['resourceType'] !== "SupplyRequest") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a SupplyRequest'; }
    if (source["authoredOn"] !== undefined) { this.authoredOn = source.authoredOn; }
    if (source["_authoredOn"] !== undefined) { this._authoredOn = source._authoredOn; }
    if (source["category"] !== undefined) { this.category = source.category; }
    if (source["deliverFrom"] !== undefined) { this.deliverFrom = source.deliverFrom; }
    if (source["deliverTo"] !== undefined) { this.deliverTo = source.deliverTo; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["itemCodeableConcept"] !== undefined) { this.itemCodeableConcept = source.itemCodeableConcept; }
    if (source["itemReference"] !== undefined) { this.itemReference = source.itemReference; }
    if (source["occurrenceDateTime"] !== undefined) { this.occurrenceDateTime = source.occurrenceDateTime; }
    if (source["_occurrenceDateTime"] !== undefined) { this._occurrenceDateTime = source._occurrenceDateTime; }
    if (source["occurrencePeriod"] !== undefined) { this.occurrencePeriod = source.occurrencePeriod; }
    if (source["occurrenceTiming"] !== undefined) { this.occurrenceTiming = source.occurrenceTiming; }
    if (source["parameter"] !== undefined) { this.parameter = source.parameter; }
    if (source["priority"] !== undefined) { this.priority = source.priority; }
    if (source["_priority"] !== undefined) { this._priority = source._priority; }
    if (source["quantity"] === undefined) { throw 'Missing required element quantity';}
    this.quantity = source.quantity;
    if (source["reasonCode"] !== undefined) { this.reasonCode = source.reasonCode; }
    if (source["reasonReference"] !== undefined) { this.reasonReference = source.reasonReference; }
    if (source["requester"] !== undefined) { this.requester = source.requester; }
    if (source["status"] !== undefined) { this.status = source.status; }
    if (source["_status"] !== undefined) { this._status = source._status; }
    if (source["supplier"] !== undefined) { this.supplier = source.supplier; }
  }
}
/**
 * Code Values for the SupplyRequest.priority field
 */
export enum SupplyRequestPriorityEnum {
  ROUTINE = "routine",
  URGENT = "urgent",
  ASAP = "asap",
  STAT = "stat",
}
/**
 * Code Values for the SupplyRequest.status field
 */
export enum SupplyRequestStatusEnum {
  DRAFT = "draft",
  ACTIVE = "active",
  SUSPENDED = "suspended",
  CANCELLED = "cancelled",
  COMPLETED = "completed",
  ENTERED_IN_ERROR = "entered-in-error",
  UNKNOWN = "unknown",
}
