// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
 */
export class AppointmentResponse extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "AppointmentResponse";
  /**
   * A Person, Location, HealthcareService, or Device that is participating in the appointment.
   */
  actor?: fhirModels.Reference;
  /**
   * Appointment that this response is replying to.
   */
  appointment: fhirModels.Reference;
  /**
   * This comment is particularly important when the responder is declining, tentatively accepting or requesting another time to indicate the reasons why.
   */
  comment?: string;
  _comment?: fhirModels.Element;
  /**
   * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the end time.
   */
  end?: string;
  _end?: fhirModels.Element;
  /**
   * This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * This element is labeled as a modifier because the status contains the code entered-in-error that marks the participant as not currently valid.
   */
  participantStatus: AppointmentResponseParticipantStatusEnum;
  _participantStatus?: fhirModels.Element;
  /**
   * The role of the participant can be used to declare what the actor will be doing in the scope of the referenced appointment.
   * If the actor is not specified, then it is expected that the actor will be filled in at a later stage of planning.
   * This value SHALL be the same as specified on the referenced Appointment so that they can be matched, and subsequently updated.
   */
  participantType?: fhirModels.CodeableConcept[];
  /**
   * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the start time.
   */
  start?: string;
  _start?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: AppointmentResponse) {
    super(source);
    if ((source['resourceType'] !== "AppointmentResponse") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a AppointmentResponse'; }
    if (source["actor"] !== undefined) { this.actor = source.actor; }
    if (source["appointment"] === undefined) { throw 'Missing required element appointment';}
    this.appointment = source.appointment;
    if (source["comment"] !== undefined) { this.comment = source.comment; }
    if (source["_comment"] !== undefined) { this._comment = source._comment; }
    if (source["end"] !== undefined) { this.end = source.end; }
    if (source["_end"] !== undefined) { this._end = source._end; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["participantStatus"] === undefined) { throw 'Missing required element participantStatus';}
    this.participantStatus = source.participantStatus;
    if (source["_participantStatus"] !== undefined) { this._participantStatus = source._participantStatus; }
    if (source["participantType"] !== undefined) { this.participantType = source.participantType; }
    if (source["start"] !== undefined) { this.start = source.start; }
    if (source["_start"] !== undefined) { this._start = source._start; }
  }
}
/**
 * Code Values for the AppointmentResponse.participantStatus field
 */
export enum AppointmentResponseParticipantStatusEnum {
  ACCEPTED = "accepted",
  DECLINED = "declined",
  TENTATIVE = "tentative",
  NEEDS_ACTION = "needs-action",
}
