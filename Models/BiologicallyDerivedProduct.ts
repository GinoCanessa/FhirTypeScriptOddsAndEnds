// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * How this product was collected.
 */
export class BiologicallyDerivedProductCollection extends fhirModels.BackboneElement {
  /**
   * Time of product collection.
   */
  collectedDateTime?: string;
  _collectedDateTime?: fhirModels.Element;
  /**
   * Time of product collection.
   */
  collectedPeriod?: fhirModels.Period;
  /**
   * Healthcare professional who is performing the collection.
   */
  collector?: fhirModels.Reference;
  /**
   * The patient or entity, such as a hospital or vendor in the case of a processed/manipulated/manufactured product, providing the product.
   */
  source?: fhirModels.Reference;
  /**
   * Default constructor
   */
  constructor(source: BiologicallyDerivedProductCollection) {
    super(source);
    if (source["collectedDateTime"] !== undefined) { this.collectedDateTime = source.collectedDateTime; }
    if (source["_collectedDateTime"] !== undefined) { this._collectedDateTime = source._collectedDateTime; }
    if (source["collectedPeriod"] !== undefined) { this.collectedPeriod = source.collectedPeriod; }
    if (source["collector"] !== undefined) { this.collector = source.collector; }
    if (source["source"] !== undefined) { this.source = source.source; }
  }
}
/**
 * Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
 */
export class BiologicallyDerivedProductProcessing extends fhirModels.BackboneElement {
  /**
   * Substance added during processing.
   */
  additive?: fhirModels.Reference;
  /**
   * Description of of processing.
   */
  description?: string;
  _description?: fhirModels.Element;
  /**
   * Procesing code.
   */
  procedure?: fhirModels.CodeableConcept;
  /**
   * Time of processing.
   */
  timeDateTime?: string;
  _timeDateTime?: fhirModels.Element;
  /**
   * Time of processing.
   */
  timePeriod?: fhirModels.Period;
  /**
   * Default constructor
   */
  constructor(source: BiologicallyDerivedProductProcessing) {
    super(source);
    if (source["additive"] !== undefined) { this.additive = source.additive; }
    if (source["description"] !== undefined) { this.description = source.description; }
    if (source["_description"] !== undefined) { this._description = source._description; }
    if (source["procedure"] !== undefined) { this.procedure = source.procedure; }
    if (source["timeDateTime"] !== undefined) { this.timeDateTime = source.timeDateTime; }
    if (source["_timeDateTime"] !== undefined) { this._timeDateTime = source._timeDateTime; }
    if (source["timePeriod"] !== undefined) { this.timePeriod = source.timePeriod; }
  }
}
/**
 * Any manipulation of product post-collection that is intended to alter the product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
 */
export class BiologicallyDerivedProductManipulation extends fhirModels.BackboneElement {
  /**
   * Description of manipulation.
   */
  description?: string;
  _description?: fhirModels.Element;
  /**
   * Time of manipulation.
   */
  timeDateTime?: string;
  _timeDateTime?: fhirModels.Element;
  /**
   * Time of manipulation.
   */
  timePeriod?: fhirModels.Period;
  /**
   * Default constructor
   */
  constructor(source: BiologicallyDerivedProductManipulation) {
    super(source);
    if (source["description"] !== undefined) { this.description = source.description; }
    if (source["_description"] !== undefined) { this._description = source._description; }
    if (source["timeDateTime"] !== undefined) { this.timeDateTime = source.timeDateTime; }
    if (source["_timeDateTime"] !== undefined) { this._timeDateTime = source._timeDateTime; }
    if (source["timePeriod"] !== undefined) { this.timePeriod = source.timePeriod; }
  }
}
/**
 * Product storage.
 */
export class BiologicallyDerivedProductStorage extends fhirModels.BackboneElement {
  /**
   * Description of storage.
   */
  description?: string;
  _description?: fhirModels.Element;
  /**
   * Storage timeperiod.
   */
  duration?: fhirModels.Period;
  /**
   * Temperature scale used.
   */
  scale?: BiologicallyDerivedProductStorageScaleEnum;
  _scale?: fhirModels.Element;
  /**
   * Storage temperature.
   */
  temperature?: number;
  _temperature?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: BiologicallyDerivedProductStorage) {
    super(source);
    if (source["description"] !== undefined) { this.description = source.description; }
    if (source["_description"] !== undefined) { this._description = source._description; }
    if (source["duration"] !== undefined) { this.duration = source.duration; }
    if (source["scale"] !== undefined) { this.scale = source.scale; }
    if (source["_scale"] !== undefined) { this._scale = source._scale; }
    if (source["temperature"] !== undefined) { this.temperature = source.temperature; }
    if (source["_temperature"] !== undefined) { this._temperature = source._temperature; }
  }
}
/**
 * Code Values for the BiologicallyDerivedProduct.storage.scale field
 */
export enum BiologicallyDerivedProductStorageScaleEnum {
  FARENHEIT = "farenheit",
  CELSIUS = "celsius",
  KELVIN = "kelvin",
}
/**
 * A material substance originating from a biological entity intended to be transplanted or infused
 * into another (possibly the same) biological entity.
 */
export class BiologicallyDerivedProduct extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "BiologicallyDerivedProduct";
  /**
   * How this product was collected.
   */
  collection?: fhirModels.BiologicallyDerivedProductCollection;
  /**
   * This records identifiers associated with this biologically derived product instance that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  identifier?: fhirModels.Identifier[];
  /**
   * Any manipulation of product post-collection that is intended to alter the product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
   */
  manipulation?: fhirModels.BiologicallyDerivedProductManipulation;
  /**
   * For products that have multiple collections. For example Peripheral Blood Stem Cells may be collected over several days from a single donor and the donation split into in multiple containers which must be linked to the parent donation.
   */
  parent?: fhirModels.Reference[];
  /**
   * Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
   */
  processing?: fhirModels.BiologicallyDerivedProductProcessing[];
  /**
   * Broad category of this product.
   */
  productCategory?: BiologicallyDerivedProductProductCategoryEnum;
  _productCategory?: fhirModels.Element;
  /**
   * A code that identifies the kind of this biologically derived product (SNOMED Ctcode).
   */
  productCode?: fhirModels.CodeableConcept;
  /**
   * Number of discrete units within this product.
   */
  quantity?: number;
  _quantity?: fhirModels.Element;
  /**
   * Procedure request to obtain this biologically derived product.
   */
  request?: fhirModels.Reference[];
  /**
   * Whether the product is currently available.
   */
  status?: BiologicallyDerivedProductStatusEnum;
  _status?: fhirModels.Element;
  /**
   * Product storage.
   */
  storage?: fhirModels.BiologicallyDerivedProductStorage[];
  /**
   * Default constructor
   */
  constructor(source: BiologicallyDerivedProduct) {
    super(source);
    if ((source['resourceType'] !== "BiologicallyDerivedProduct") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a BiologicallyDerivedProduct'; }
    if (source["collection"] !== undefined) { this.collection = source.collection; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["manipulation"] !== undefined) { this.manipulation = source.manipulation; }
    if (source["parent"] !== undefined) { this.parent = source.parent; }
    if (source["processing"] !== undefined) { this.processing = source.processing; }
    if (source["productCategory"] !== undefined) { this.productCategory = source.productCategory; }
    if (source["_productCategory"] !== undefined) { this._productCategory = source._productCategory; }
    if (source["productCode"] !== undefined) { this.productCode = source.productCode; }
    if (source["quantity"] !== undefined) { this.quantity = source.quantity; }
    if (source["_quantity"] !== undefined) { this._quantity = source._quantity; }
    if (source["request"] !== undefined) { this.request = source.request; }
    if (source["status"] !== undefined) { this.status = source.status; }
    if (source["_status"] !== undefined) { this._status = source._status; }
    if (source["storage"] !== undefined) { this.storage = source.storage; }
  }
}
/**
 * Code Values for the BiologicallyDerivedProduct.productCategory field
 */
export enum BiologicallyDerivedProductProductCategoryEnum {
  ORGAN = "organ",
  TISSUE = "tissue",
  FLUID = "fluid",
  CELLS = "cells",
  BIOLOGICALAGENT = "biologicalAgent",
}
/**
 * Code Values for the BiologicallyDerivedProduct.status field
 */
export enum BiologicallyDerivedProductStatusEnum {
  AVAILABLE = "available",
  UNAVAILABLE = "unavailable",
}
