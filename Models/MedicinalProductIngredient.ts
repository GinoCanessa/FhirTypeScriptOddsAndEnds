// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * Strength expressed in terms of a reference substance.
 */
export class MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength extends fhirModels.BackboneElement {
  /**
   * The country or countries for which the strength range applies.
   */
  country?: fhirModels.CodeableConcept[];
  /**
   * For when strength is measured at a particular point or distance.
   */
  measurementPoint?: string;
  _measurementPoint?: fhirModels.Element;
  /**
   * Strength expressed in terms of a reference substance.
   */
  strength: fhirModels.Ratio;
  /**
   * Strength expressed in terms of a reference substance.
   */
  strengthLowLimit?: fhirModels.Ratio;
  /**
   * Relevant reference substance.
   */
  substance?: fhirModels.CodeableConcept;
  /**
   * Default constructor
   */
  constructor(source: MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength) {
    super(source);
    if (source["country"] !== undefined) { this.country = source.country; }
    if (source["measurementPoint"] !== undefined) { this.measurementPoint = source.measurementPoint; }
    if (source["_measurementPoint"] !== undefined) { this._measurementPoint = source._measurementPoint; }
    if (source["strength"] === undefined) { throw 'Missing required element strength';}
    this.strength = source.strength;
    if (source["strengthLowLimit"] !== undefined) { this.strengthLowLimit = source.strengthLowLimit; }
    if (source["substance"] !== undefined) { this.substance = source.substance; }
  }
}
/**
 * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
 */
export class MedicinalProductIngredientSpecifiedSubstanceStrength extends fhirModels.BackboneElement {
  /**
   * The strength per unitary volume (or mass).
   */
  concentration?: fhirModels.Ratio;
  /**
   * A lower limit for the strength per unitary volume (or mass), for when there is a range. The concentration attribute then becomes the upper limit.
   */
  concentrationLowLimit?: fhirModels.Ratio;
  /**
   * The country or countries for which the strength range applies.
   */
  country?: fhirModels.CodeableConcept[];
  /**
   * For when strength is measured at a particular point or distance.
   */
  measurementPoint?: string;
  _measurementPoint?: fhirModels.Element;
  /**
   * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item.
   */
  presentation: fhirModels.Ratio;
  /**
   * A lower limit for the quantity of substance in the unit of presentation. For use when there is a range of strengths, this is the lower limit, with the presentation attribute becoming the upper limit.
   */
  presentationLowLimit?: fhirModels.Ratio;
  /**
   * Strength expressed in terms of a reference substance.
   */
  referenceStrength?: fhirModels.MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength[];
  /**
   * Default constructor
   */
  constructor(source: MedicinalProductIngredientSpecifiedSubstanceStrength) {
    super(source);
    if (source["concentration"] !== undefined) { this.concentration = source.concentration; }
    if (source["concentrationLowLimit"] !== undefined) { this.concentrationLowLimit = source.concentrationLowLimit; }
    if (source["country"] !== undefined) { this.country = source.country; }
    if (source["measurementPoint"] !== undefined) { this.measurementPoint = source.measurementPoint; }
    if (source["_measurementPoint"] !== undefined) { this._measurementPoint = source._measurementPoint; }
    if (source["presentation"] === undefined) { throw 'Missing required element presentation';}
    this.presentation = source.presentation;
    if (source["presentationLowLimit"] !== undefined) { this.presentationLowLimit = source.presentationLowLimit; }
    if (source["referenceStrength"] !== undefined) { this.referenceStrength = source.referenceStrength; }
  }
}
/**
 * A specified substance that comprises this ingredient.
 */
export class MedicinalProductIngredientSpecifiedSubstance extends fhirModels.BackboneElement {
  /**
   * The specified substance.
   */
  code: fhirModels.CodeableConcept;
  /**
   * Confidentiality level of the specified substance as the ingredient.
   */
  confidentiality?: fhirModels.CodeableConcept;
  /**
   * The group of specified substance, e.g. group 1 to 4.
   */
  group: fhirModels.CodeableConcept;
  /**
   * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
   */
  strength?: fhirModels.MedicinalProductIngredientSpecifiedSubstanceStrength[];
  /**
   * Default constructor
   */
  constructor(source: MedicinalProductIngredientSpecifiedSubstance) {
    super(source);
    if (source["code"] === undefined) { throw 'Missing required element code';}
    this.code = source.code;
    if (source["confidentiality"] !== undefined) { this.confidentiality = source.confidentiality; }
    if (source["group"] === undefined) { throw 'Missing required element group';}
    this.group = source.group;
    if (source["strength"] !== undefined) { this.strength = source.strength; }
  }
}
/**
 * The ingredient substance.
 */
export class MedicinalProductIngredientSubstance extends fhirModels.BackboneElement {
  /**
   * The ingredient substance.
   */
  code: fhirModels.CodeableConcept;
  /**
   * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
   */
  strength?: fhirModels.MedicinalProductIngredientSpecifiedSubstanceStrength[];
  /**
   * Default constructor
   */
  constructor(source: MedicinalProductIngredientSubstance) {
    super(source);
    if (source["code"] === undefined) { throw 'Missing required element code';}
    this.code = source.code;
    if (source["strength"] !== undefined) { this.strength = source.strength; }
  }
}
/**
 * An ingredient of a manufactured item or pharmaceutical product.
 */
export class MedicinalProductIngredient extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "MedicinalProductIngredient";
  /**
   * If the ingredient is a known or suspected allergen.
   */
  allergenicIndicator?: boolean;
  _allergenicIndicator?: fhirModels.Element;
  /**
   * The identifier(s) of this Ingredient that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.
   */
  identifier?: fhirModels.Identifier;
  /**
   * Manufacturer of this Ingredient.
   */
  manufacturer?: fhirModels.Reference[];
  /**
   * Ingredient role e.g. Active ingredient, excipient.
   */
  role: fhirModels.CodeableConcept;
  /**
   * A specified substance that comprises this ingredient.
   */
  specifiedSubstance?: fhirModels.MedicinalProductIngredientSpecifiedSubstance[];
  /**
   * The ingredient substance.
   */
  substance?: fhirModels.MedicinalProductIngredientSubstance;
  /**
   * Default constructor
   */
  constructor(source: MedicinalProductIngredient) {
    super(source);
    if ((source['resourceType'] !== "MedicinalProductIngredient") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a MedicinalProductIngredient'; }
    if (source["allergenicIndicator"] !== undefined) { this.allergenicIndicator = source.allergenicIndicator; }
    if (source["_allergenicIndicator"] !== undefined) { this._allergenicIndicator = source._allergenicIndicator; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["manufacturer"] !== undefined) { this.manufacturer = source.manufacturer; }
    if (source["role"] === undefined) { throw 'Missing required element role';}
    this.role = source.role;
    if (source["specifiedSubstance"] !== undefined) { this.specifiedSubstance = source.specifiedSubstance; }
    if (source["substance"] !== undefined) { this.substance = source.substance; }
  }
}
