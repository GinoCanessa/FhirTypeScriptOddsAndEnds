// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * Used for example, to point to a substance, or to a device used to administer a medication.
 */
export class CatalogEntryRelatedEntry extends fhirModels.BackboneElement {
  /**
   * The reference to the related item.
   */
  item: fhirModels.Reference;
  /**
   * The type of relation to the related item: child, parent, packageContent, containerPackage, usedIn, uses, requires, etc.
   */
  relationtype: CatalogEntryRelatedEntryRelationtypeEnum;
  _relationtype?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: CatalogEntryRelatedEntry) {
    super(source);
    if (source["item"] === undefined) { throw 'Missing required element item';}
    this.item = source.item;
    if (source["relationtype"] === undefined) { throw 'Missing required element relationtype';}
    this.relationtype = source.relationtype;
    if (source["_relationtype"] !== undefined) { this._relationtype = source._relationtype; }
  }
}
/**
 * Code Values for the CatalogEntry.relatedEntry.relationtype field
 */
export enum CatalogEntryRelatedEntryRelationtypeEnum {
  TRIGGERS = "triggers",
  IS_REPLACED_BY = "is-replaced-by",
}
/**
 * Catalog entries are wrappers that contextualize items included in a catalog.
 */
export class CatalogEntry extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "CatalogEntry";
  /**
   * Used for examplefor Out of Formulary, or any specifics.
   */
  additionalCharacteristic?: fhirModels.CodeableConcept[];
  /**
   * User for example for ATC classification, or.
   */
  additionalClassification?: fhirModels.CodeableConcept[];
  /**
   * Used in supporting related concepts, e.g. NDC to RxNorm.
   */
  additionalIdentifier?: fhirModels.Identifier[];
  /**
   * Classes of devices, or ATC for medication.
   */
  classification?: fhirModels.CodeableConcept[];
  /**
   * Used in supporting different identifiers for the same product, e.g. manufacturer code and retailer code.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * Perhaps not needed - if we use fhir resource metadata.
   */
  lastUpdated?: string;
  _lastUpdated?: fhirModels.Element;
  /**
   * Whether the entry represents an orderable item.
   */
  orderable: boolean;
  _orderable?: fhirModels.Element;
  /**
   * The item in a catalog or definition.
   */
  referencedItem: fhirModels.Reference;
  /**
   * Used for example, to point to a substance, or to a device used to administer a medication.
   */
  relatedEntry?: fhirModels.CatalogEntryRelatedEntry[];
  /**
   * Used to support catalog exchange even for unsupported products, e.g. getting list of medications even if not prescribable.
   */
  status?: CatalogEntryStatusEnum;
  _status?: fhirModels.Element;
  /**
   * The type of item - medication, device, service, protocol or other.
   */
  type?: fhirModels.CodeableConcept;
  /**
   * The time period in which this catalog entry is expected to be active.
   */
  validityPeriod?: fhirModels.Period;
  /**
   * The date until which this catalog entry is expected to be active.
   */
  validTo?: string;
  _validTo?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: CatalogEntry) {
    super(source);
    if ((source['resourceType'] !== "CatalogEntry") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a CatalogEntry'; }
    if (source["additionalCharacteristic"] !== undefined) { this.additionalCharacteristic = source.additionalCharacteristic; }
    if (source["additionalClassification"] !== undefined) { this.additionalClassification = source.additionalClassification; }
    if (source["additionalIdentifier"] !== undefined) { this.additionalIdentifier = source.additionalIdentifier; }
    if (source["classification"] !== undefined) { this.classification = source.classification; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["lastUpdated"] !== undefined) { this.lastUpdated = source.lastUpdated; }
    if (source["_lastUpdated"] !== undefined) { this._lastUpdated = source._lastUpdated; }
    if (source["orderable"] === undefined) { throw 'Missing required element orderable';}
    this.orderable = source.orderable;
    if (source["_orderable"] !== undefined) { this._orderable = source._orderable; }
    if (source["referencedItem"] === undefined) { throw 'Missing required element referencedItem';}
    this.referencedItem = source.referencedItem;
    if (source["relatedEntry"] !== undefined) { this.relatedEntry = source.relatedEntry; }
    if (source["status"] !== undefined) { this.status = source.status; }
    if (source["_status"] !== undefined) { this._status = source._status; }
    if (source["type"] !== undefined) { this.type = source.type; }
    if (source["validityPeriod"] !== undefined) { this.validityPeriod = source.validityPeriod; }
    if (source["validTo"] !== undefined) { this.validTo = source.validTo; }
    if (source["_validTo"] !== undefined) { this._validTo = source._validTo; }
  }
}
/**
 * Code Values for the CatalogEntry.status field
 */
export enum CatalogEntryStatusEnum {
  DRAFT = "draft",
  ACTIVE = "active",
  RETIRED = "retired",
  UNKNOWN = "unknown",
}
