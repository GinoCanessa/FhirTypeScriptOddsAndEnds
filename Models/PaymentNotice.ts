// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * This resource provides the status of the payment for goods and services rendered, and the request and response resource references.
 */
export class PaymentNotice extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "PaymentNotice";
  /**
   * The amount sent to the payee.
   */
  amount: fhirModels.Money;
  /**
   * The date when this resource was created.
   */
  created: string;
  _created?: fhirModels.Element;
  /**
   * A unique identifier assigned to this payment notice.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * The party who will receive or has received payment that is the subject of this notification.
   */
  payee?: fhirModels.Reference;
  /**
   * A reference to the payment which is the subject of this notice.
   */
  payment: fhirModels.Reference;
  /**
   * The date when the above payment action occurred.
   */
  paymentDate?: string;
  _paymentDate?: fhirModels.Element;
  /**
   * Typically paid: payment sent, cleared: payment received.
   */
  paymentStatus?: fhirModels.CodeableConcept;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  provider?: fhirModels.Reference;
  /**
   * The party who is notified of the payment status.
   */
  recipient: fhirModels.Reference;
  /**
   * Reference of resource for which payment is being made.
   */
  request?: fhirModels.Reference;
  /**
   * Reference of response to resource for which payment is being made.
   */
  response?: fhirModels.Reference;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: PaymentNoticeStatusEnum;
  _status?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: PaymentNotice) {
    super(source);
    if ((source['resourceType'] !== "PaymentNotice") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a PaymentNotice'; }
    if (source["amount"] === undefined) { throw 'Missing required element amount';}
    this.amount = source.amount;
    if (source["created"] === undefined) { throw 'Missing required element created';}
    this.created = source.created;
    if (source["_created"] !== undefined) { this._created = source._created; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["payee"] !== undefined) { this.payee = source.payee; }
    if (source["payment"] === undefined) { throw 'Missing required element payment';}
    this.payment = source.payment;
    if (source["paymentDate"] !== undefined) { this.paymentDate = source.paymentDate; }
    if (source["_paymentDate"] !== undefined) { this._paymentDate = source._paymentDate; }
    if (source["paymentStatus"] !== undefined) { this.paymentStatus = source.paymentStatus; }
    if (source["provider"] !== undefined) { this.provider = source.provider; }
    if (source["recipient"] === undefined) { throw 'Missing required element recipient';}
    this.recipient = source.recipient;
    if (source["request"] !== undefined) { this.request = source.request; }
    if (source["response"] !== undefined) { this.response = source.response; }
    if (source["status"] === undefined) { throw 'Missing required element status';}
    this.status = source.status;
    if (source["_status"] !== undefined) { this._status = source._status; }
  }
}
/**
 * Code Values for the PaymentNotice.status field
 */
export enum PaymentNoticeStatusEnum {
  ACTIVE = "active",
  CANCELLED = "cancelled",
  DRAFT = "draft",
  ENTERED_IN_ERROR = "entered-in-error",
}
