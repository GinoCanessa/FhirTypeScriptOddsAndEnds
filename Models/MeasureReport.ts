// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * The populations that make up the population group, one for each type of population appropriate for the measure.
 */
export class MeasureReportGroupPopulation extends fhirModels.BackboneElement {
  /**
   * The type of the population.
   */
  code?: fhirModels.CodeableConcept;
  /**
   * The number of members of the population.
   */
  count?: number;
  _count?: fhirModels.Element;
  /**
   * This element refers to a List of subject level MeasureReport resources, one for each subject in this population.
   */
  subjectResults?: fhirModels.Reference;
  /**
   * Default constructor
   */
  constructor(source: MeasureReportGroupPopulation) {
    super(source);
    if (source["code"] !== undefined) { this.code = source.code; }
    if (source["count"] !== undefined) { this.count = source.count; }
    if (source["_count"] !== undefined) { this._count = source._count; }
    if (source["subjectResults"] !== undefined) { this.subjectResults = source.subjectResults; }
  }
}
/**
 * A stratifier component value.
 */
export class MeasureReportGroupStratifierStratumComponent extends fhirModels.BackboneElement {
  /**
   * The code for the stratum component value.
   */
  code: fhirModels.CodeableConcept;
  /**
   * The stratum component value.
   */
  value: fhirModels.CodeableConcept;
  /**
   * Default constructor
   */
  constructor(source: MeasureReportGroupStratifierStratumComponent) {
    super(source);
    if (source["code"] === undefined) { throw 'Missing required element code';}
    this.code = source.code;
    if (source["value"] === undefined) { throw 'Missing required element value';}
    this.value = source.value;
  }
}
/**
 * The populations that make up the stratum, one for each type of population appropriate to the measure.
 */
export class MeasureReportGroupStratifierStratumPopulation extends fhirModels.BackboneElement {
  /**
   * The type of the population.
   */
  code?: fhirModels.CodeableConcept;
  /**
   * The number of members of the population in this stratum.
   */
  count?: number;
  _count?: fhirModels.Element;
  /**
   * This element refers to a List of subject level MeasureReport resources, one for each subject in this population in this stratum.
   */
  subjectResults?: fhirModels.Reference;
  /**
   * Default constructor
   */
  constructor(source: MeasureReportGroupStratifierStratumPopulation) {
    super(source);
    if (source["code"] !== undefined) { this.code = source.code; }
    if (source["count"] !== undefined) { this.count = source.count; }
    if (source["_count"] !== undefined) { this._count = source._count; }
    if (source["subjectResults"] !== undefined) { this.subjectResults = source.subjectResults; }
  }
}
/**
 * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
 */
export class MeasureReportGroupStratifierStratum extends fhirModels.BackboneElement {
  /**
   * A stratifier component value.
   */
  component?: fhirModels.MeasureReportGroupStratifierStratumComponent[];
  /**
   * The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
   */
  measureScore?: fhirModels.Quantity;
  /**
   * The populations that make up the stratum, one for each type of population appropriate to the measure.
   */
  population?: fhirModels.MeasureReportGroupStratifierStratumPopulation[];
  /**
   * The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
   */
  value?: fhirModels.CodeableConcept;
  /**
   * Default constructor
   */
  constructor(source: MeasureReportGroupStratifierStratum) {
    super(source);
    if (source["component"] !== undefined) { this.component = source.component; }
    if (source["measureScore"] !== undefined) { this.measureScore = source.measureScore; }
    if (source["population"] !== undefined) { this.population = source.population; }
    if (source["value"] !== undefined) { this.value = source.value; }
  }
}
/**
 * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
 */
export class MeasureReportGroupStratifier extends fhirModels.BackboneElement {
  /**
   * The meaning of this stratifier, as defined in the measure definition.
   */
  code?: fhirModels.CodeableConcept[];
  /**
   * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
   */
  stratum?: fhirModels.MeasureReportGroupStratifierStratum[];
  /**
   * Default constructor
   */
  constructor(source: MeasureReportGroupStratifier) {
    super(source);
    if (source["code"] !== undefined) { this.code = source.code; }
    if (source["stratum"] !== undefined) { this.stratum = source.stratum; }
  }
}
/**
 * The results of the calculation, one for each population group in the measure.
 */
export class MeasureReportGroup extends fhirModels.BackboneElement {
  /**
   * The meaning of the population group as defined in the measure definition.
   */
  code?: fhirModels.CodeableConcept;
  /**
   * The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
   */
  measureScore?: fhirModels.Quantity;
  /**
   * The populations that make up the population group, one for each type of population appropriate for the measure.
   */
  population?: fhirModels.MeasureReportGroupPopulation[];
  /**
   * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
   */
  stratifier?: fhirModels.MeasureReportGroupStratifier[];
  /**
   * Default constructor
   */
  constructor(source: MeasureReportGroup) {
    super(source);
    if (source["code"] !== undefined) { this.code = source.code; }
    if (source["measureScore"] !== undefined) { this.measureScore = source.measureScore; }
    if (source["population"] !== undefined) { this.population = source.population; }
    if (source["stratifier"] !== undefined) { this.stratifier = source.stratifier; }
  }
}
/**
 * The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.
 */
export class MeasureReport extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "MeasureReport";
  /**
   * The date this measure report was generated.
   */
  date?: string;
  _date?: fhirModels.Element;
  /**
   * A reference to a Bundle containing the Resources that were used in the calculation of this measure.
   */
  evaluatedResource?: fhirModels.Reference[];
  /**
   * The results of the calculation, one for each population group in the measure.
   */
  group?: fhirModels.MeasureReportGroup[];
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II data type - e.g. to identify this {{title}} outside of FHIR, where the logical URL is not possible to use.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * This element is typically defined by the measure, but reproduced here to ensure the measure score can be interpreted. The element is labeled as a modifier because it changes the interpretation of the reported measure score.
   */
  improvementNotation?: fhirModels.CodeableConcept;
  /**
   * A reference to the Measure that was calculated to produce this report.
   */
  measure: string;
  _measure?: fhirModels.Element;
  /**
   * The reporting period for which the report was calculated.
   */
  period: fhirModels.Period;
  /**
   * The individual, location, or organization that is reporting the data.
   */
  reporter?: fhirModels.Reference;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: MeasureReportStatusEnum;
  _status?: fhirModels.Element;
  /**
   * Optional subject identifying the individual or individuals the report is for.
   */
  subject?: fhirModels.Reference;
  /**
   * Data-collection reports are used only to communicate data-of-interest for a measure. They do not necessarily include all the data for a particular subject or population, but they may.
   */
  type: MeasureReportTypeEnum;
  _type?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: MeasureReport) {
    super(source);
    if ((source['resourceType'] !== "MeasureReport") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a MeasureReport'; }
    if (source["date"] !== undefined) { this.date = source.date; }
    if (source["_date"] !== undefined) { this._date = source._date; }
    if (source["evaluatedResource"] !== undefined) { this.evaluatedResource = source.evaluatedResource; }
    if (source["group"] !== undefined) { this.group = source.group; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["improvementNotation"] !== undefined) { this.improvementNotation = source.improvementNotation; }
    if (source["measure"] === undefined) { throw 'Missing required element measure';}
    this.measure = source.measure;
    if (source["_measure"] !== undefined) { this._measure = source._measure; }
    if (source["period"] === undefined) { throw 'Missing required element period';}
    this.period = source.period;
    if (source["reporter"] !== undefined) { this.reporter = source.reporter; }
    if (source["status"] === undefined) { throw 'Missing required element status';}
    this.status = source.status;
    if (source["_status"] !== undefined) { this._status = source._status; }
    if (source["subject"] !== undefined) { this.subject = source.subject; }
    if (source["type"] === undefined) { throw 'Missing required element type';}
    this.type = source.type;
    if (source["_type"] !== undefined) { this._type = source._type; }
  }
}
/**
 * Code Values for the MeasureReport.status field
 */
export enum MeasureReportStatusEnum {
  COMPLETE = "complete",
  PENDING = "pending",
  ERROR = "error",
}
/**
 * Code Values for the MeasureReport.type field
 */
export enum MeasureReportTypeEnum {
  INDIVIDUAL = "individual",
  SUBJECT_LIST = "subject-list",
  SUMMARY = "summary",
  DATA_COLLECTION = "data-collection",
}
