// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * All the identified characteristics must be true for an entity to a member of the group.
 */
export class GroupCharacteristic extends fhirModels.BackboneElement {
  /**
   * A code that identifies the kind of trait being asserted.
   */
  code: fhirModels.CodeableConcept;
  /**
   * This is labeled as "Is Modifier" because applications cannot wrongly include excluded members as included or vice versa.
   */
  exclude: boolean;
  _exclude?: fhirModels.Element;
  /**
   * The period over which the characteristic is tested; e.g. the patient had an operation during the month of June.
   */
  period?: fhirModels.Period;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueCodeableConcept?: fhirModels.CodeableConcept;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueBoolean?: boolean;
  _valueBoolean?: fhirModels.Element;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueQuantity?: fhirModels.Quantity;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueRange?: fhirModels.Range;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueReference?: fhirModels.Reference;
  /**
   * Default constructor
   */
  constructor(source: GroupCharacteristic) {
    super(source);
    if (source["code"] === undefined) { throw 'Missing required element code';}
    this.code = source.code;
    if (source["exclude"] === undefined) { throw 'Missing required element exclude';}
    this.exclude = source.exclude;
    if (source["_exclude"] !== undefined) { this._exclude = source._exclude; }
    if (source["period"] !== undefined) { this.period = source.period; }
    if (source["valueCodeableConcept"] !== undefined) { this.valueCodeableConcept = source.valueCodeableConcept; }
    if (source["valueBoolean"] !== undefined) { this.valueBoolean = source.valueBoolean; }
    if (source["_valueBoolean"] !== undefined) { this._valueBoolean = source._valueBoolean; }
    if (source["valueQuantity"] !== undefined) { this.valueQuantity = source.valueQuantity; }
    if (source["valueRange"] !== undefined) { this.valueRange = source.valueRange; }
    if (source["valueReference"] !== undefined) { this.valueReference = source.valueReference; }
  }
}
/**
 * Identifies the resource instances that are members of the group.
 */
export class GroupMember extends fhirModels.BackboneElement {
  /**
   * A reference to the entity that is a member of the group. Must be consistent with Group.type. If the entity is another group, then the type must be the same.
   */
  entity: fhirModels.Reference;
  /**
   * A flag to indicate that the member is no longer in the group, but previously may have been a member.
   */
  inactive?: boolean;
  _inactive?: fhirModels.Element;
  /**
   * The period that the member was in the group, if known.
   */
  period?: fhirModels.Period;
  /**
   * Default constructor
   */
  constructor(source: GroupMember) {
    super(source);
    if (source["entity"] === undefined) { throw 'Missing required element entity';}
    this.entity = source.entity;
    if (source["inactive"] !== undefined) { this.inactive = source.inactive; }
    if (source["_inactive"] !== undefined) { this._inactive = source._inactive; }
    if (source["period"] !== undefined) { this.period = source.period; }
  }
}
/**
 * Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
 */
export class Group extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "Group";
  /**
   * Indicates whether the record for the group is available for use or is merely being retained for historical purposes.
   */
  active?: boolean;
  _active?: fhirModels.Element;
  /**
   * If true, indicates that the resource refers to a specific group of real individuals.  If false, the group defines a set of intended individuals.
   */
  actual: boolean;
  _actual?: fhirModels.Element;
  /**
   * All the identified characteristics must be true for an entity to a member of the group.
   */
  characteristic?: fhirModels.GroupCharacteristic[];
  /**
   * This would generally be omitted for Person resources.
   */
  code?: fhirModels.CodeableConcept;
  /**
   * A unique business identifier for this group.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * This does not strictly align with ownership of a herd or flock, but may suffice to represent that relationship in simple cases. More complex cases will require an extension.
   */
  managingEntity?: fhirModels.Reference;
  /**
   * Identifies the resource instances that are members of the group.
   */
  member?: fhirModels.GroupMember[];
  /**
   * A label assigned to the group for human identification and communication.
   */
  name?: string;
  _name?: fhirModels.Element;
  /**
   * Note that the quantity may be less than the number of members if some of the members are not active.
   */
  quantity?: number;
  _quantity?: fhirModels.Element;
  /**
   * Group members SHALL be of the appropriate resource type (Patient for person or animal; or Practitioner, Device, Medication or Substance for the other types.).
   */
  type: GroupTypeEnum;
  _type?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: Group) {
    super(source);
    if ((source['resourceType'] !== "Group") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a Group'; }
    if (source["active"] !== undefined) { this.active = source.active; }
    if (source["_active"] !== undefined) { this._active = source._active; }
    if (source["actual"] === undefined) { throw 'Missing required element actual';}
    this.actual = source.actual;
    if (source["_actual"] !== undefined) { this._actual = source._actual; }
    if (source["characteristic"] !== undefined) { this.characteristic = source.characteristic; }
    if (source["code"] !== undefined) { this.code = source.code; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["managingEntity"] !== undefined) { this.managingEntity = source.managingEntity; }
    if (source["member"] !== undefined) { this.member = source.member; }
    if (source["name"] !== undefined) { this.name = source.name; }
    if (source["_name"] !== undefined) { this._name = source._name; }
    if (source["quantity"] !== undefined) { this.quantity = source.quantity; }
    if (source["_quantity"] !== undefined) { this._quantity = source._quantity; }
    if (source["type"] === undefined) { throw 'Missing required element type';}
    this.type = source.type;
    if (source["_type"] !== undefined) { this._type = source._type; }
  }
}
/**
 * Code Values for the Group.type field
 */
export enum GroupTypeEnum {
  PERSON = "person",
  ANIMAL = "animal",
  PRACTITIONER = "practitioner",
  DEVICE = "device",
  MEDICATION = "medication",
  SUBSTANCE = "substance",
}
