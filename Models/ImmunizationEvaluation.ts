// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * Describes a comparison of an immunization event against published recommendations to determine if the administration is "valid" in relation to those  recommendations.
 */
export class ImmunizationEvaluation extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "ImmunizationEvaluation";
  /**
   * Indicates the authority who published the protocol (e.g. ACIP).
   */
  authority?: fhirModels.Reference;
  /**
   * The date the evaluation of the vaccine administration event was performed.
   */
  date?: string;
  _date?: fhirModels.Element;
  /**
   * Additional information about the evaluation.
   */
  description?: string;
  _description?: fhirModels.Element;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  doseNumberPositiveInt?: number;
  _doseNumberPositiveInt?: fhirModels.Element;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  doseNumberString?: string;
  _doseNumberString?: fhirModels.Element;
  /**
   * Indicates if the dose is valid or not valid with respect to the published recommendations.
   */
  doseStatus: fhirModels.CodeableConcept;
  /**
   * Provides an explanation as to why the vaccine administration event is valid or not relative to the published recommendations.
   */
  doseStatusReason?: fhirModels.CodeableConcept[];
  /**
   * A unique identifier assigned to this immunization evaluation record.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * The vaccine administration event being evaluated.
   */
  immunizationEvent: fhirModels.Reference;
  /**
   * The individual for whom the evaluation is being done.
   */
  patient: fhirModels.Reference;
  /**
   * One possible path to achieve presumed immunity against a disease - within the context of an authority.
   */
  series?: string;
  _series?: fhirModels.Element;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  seriesDosesPositiveInt?: number;
  _seriesDosesPositiveInt?: fhirModels.Element;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  seriesDosesString?: string;
  _seriesDosesString?: fhirModels.Element;
  /**
   * Indicates the current status of the evaluation of the vaccination administration event.
   */
  status: ImmunizationEvaluationStatusEnum;
  _status?: fhirModels.Element;
  /**
   * The vaccine preventable disease the dose is being evaluated against.
   */
  targetDisease: fhirModels.CodeableConcept;
  /**
   * Default constructor
   */
  constructor(source: ImmunizationEvaluation) {
    super(source);
    if ((source['resourceType'] !== "ImmunizationEvaluation") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a ImmunizationEvaluation'; }
    if (source["authority"] !== undefined) { this.authority = source.authority; }
    if (source["date"] !== undefined) { this.date = source.date; }
    if (source["_date"] !== undefined) { this._date = source._date; }
    if (source["description"] !== undefined) { this.description = source.description; }
    if (source["_description"] !== undefined) { this._description = source._description; }
    if (source["doseNumberPositiveInt"] !== undefined) { this.doseNumberPositiveInt = source.doseNumberPositiveInt; }
    if (source["_doseNumberPositiveInt"] !== undefined) { this._doseNumberPositiveInt = source._doseNumberPositiveInt; }
    if (source["doseNumberString"] !== undefined) { this.doseNumberString = source.doseNumberString; }
    if (source["_doseNumberString"] !== undefined) { this._doseNumberString = source._doseNumberString; }
    if (source["doseStatus"] === undefined) { throw 'Missing required element doseStatus';}
    this.doseStatus = source.doseStatus;
    if (source["doseStatusReason"] !== undefined) { this.doseStatusReason = source.doseStatusReason; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["immunizationEvent"] === undefined) { throw 'Missing required element immunizationEvent';}
    this.immunizationEvent = source.immunizationEvent;
    if (source["patient"] === undefined) { throw 'Missing required element patient';}
    this.patient = source.patient;
    if (source["series"] !== undefined) { this.series = source.series; }
    if (source["_series"] !== undefined) { this._series = source._series; }
    if (source["seriesDosesPositiveInt"] !== undefined) { this.seriesDosesPositiveInt = source.seriesDosesPositiveInt; }
    if (source["_seriesDosesPositiveInt"] !== undefined) { this._seriesDosesPositiveInt = source._seriesDosesPositiveInt; }
    if (source["seriesDosesString"] !== undefined) { this.seriesDosesString = source.seriesDosesString; }
    if (source["_seriesDosesString"] !== undefined) { this._seriesDosesString = source._seriesDosesString; }
    if (source["status"] === undefined) { throw 'Missing required element status';}
    this.status = source.status;
    if (source["_status"] !== undefined) { this._status = source._status; }
    if (source["targetDisease"] === undefined) { throw 'Missing required element targetDisease';}
    this.targetDisease = source.targetDisease;
  }
}
/**
 * Code Values for the ImmunizationEvaluation.status field
 */
export enum ImmunizationEvaluationStatusEnum {
  COMPLETED = "completed",
  ENTERED_IN_ERROR = "entered-in-error",
}
