// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
 */
export class LinkageItem extends fhirModels.BackboneElement {
  /**
   * The resource instance being linked as part of the group.
   */
  resource: fhirModels.Reference;
  /**
   * Distinguishes which item is "source of truth" (if any) and which items are no longer considered to be current representations.
   */
  type: LinkageItemTypeEnum;
  _type?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: LinkageItem) {
    super(source);
    if (source["resource"] === undefined) { throw 'Missing required element resource';}
    this.resource = source.resource;
    if (source["type"] === undefined) { throw 'Missing required element type';}
    this.type = source.type;
    if (source["_type"] !== undefined) { this._type = source._type; }
  }
}
/**
 * Code Values for the Linkage.item.type field
 */
export enum LinkageItemTypeEnum {
  SOURCE = "source",
  ALTERNATE = "alternate",
  HISTORICAL = "historical",
}
/**
 * Identifies two or more records (resource instances) that refer to the same real-world "occurrence".
 */
export class Linkage extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "Linkage";
  /**
   * If false, any asserted linkages should not be considered current/relevant/applicable.
   */
  active?: boolean;
  _active?: fhirModels.Element;
  /**
   * Identifies the user or organization responsible for asserting the linkages as well as the user or organization who establishes the context in which the nature of each linkage is evaluated.
   */
  author?: fhirModels.Reference;
  /**
   * Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
   */
  item: fhirModels.LinkageItem[];
  /**
   * Default constructor
   */
  constructor(source: Linkage) {
    super(source);
    if ((source['resourceType'] !== "Linkage") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a Linkage'; }
    if (source["active"] !== undefined) { this.active = source.active; }
    if (source["_active"] !== undefined) { this._active = source._active; }
    if (source["author"] !== undefined) { this.author = source.author; }
    if (source["item"] === undefined) { throw 'Missing required element item';}
    this.item = source.item;
  }
}
