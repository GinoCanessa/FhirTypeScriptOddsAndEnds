// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
 */
export class InsurancePlanContact extends fhirModels.BackboneElement {
  /**
   * Visiting or postal addresses for the contact.
   */
  address?: fhirModels.Address;
  /**
   * A name associated with the contact.
   */
  name?: fhirModels.HumanName;
  /**
   * Indicates a purpose for which the contact can be reached.
   */
  purpose?: fhirModels.CodeableConcept;
  /**
   * A contact detail (e.g. a telephone number or an email address) by which the party may be contacted.
   */
  telecom?: fhirModels.ContactPoint[];
  /**
   * Default constructor
   */
  constructor(source: InsurancePlanContact) {
    super(source);
    if (source["address"] !== undefined) { this.address = source.address; }
    if (source["name"] !== undefined) { this.name = source.name; }
    if (source["purpose"] !== undefined) { this.purpose = source.purpose; }
    if (source["telecom"] !== undefined) { this.telecom = source.telecom; }
  }
}
/**
 * The specific limits on the benefit.
 */
export class InsurancePlanCoverageBenefitLimit extends fhirModels.BackboneElement {
  /**
   * Use `CodeableConcept.text` element if the data is free (uncoded) text.
   */
  code?: fhirModels.CodeableConcept;
  /**
   * May also be called “eligible expense,” “payment allowance,” or “negotiated rate.”.
   */
  value?: fhirModels.Quantity;
  /**
   * Default constructor
   */
  constructor(source: InsurancePlanCoverageBenefitLimit) {
    super(source);
    if (source["code"] !== undefined) { this.code = source.code; }
    if (source["value"] !== undefined) { this.value = source.value; }
  }
}
/**
 * Specific benefits under this type of coverage.
 */
export class InsurancePlanCoverageBenefit extends fhirModels.BackboneElement {
  /**
   * The specific limits on the benefit.
   */
  limit?: fhirModels.InsurancePlanCoverageBenefitLimit[];
  /**
   * The referral requirements to have access/coverage for this benefit.
   */
  requirement?: string;
  _requirement?: fhirModels.Element;
  /**
   * Type of benefit (primary care; speciality care; inpatient; outpatient).
   */
  type: fhirModels.CodeableConcept;
  /**
   * Default constructor
   */
  constructor(source: InsurancePlanCoverageBenefit) {
    super(source);
    if (source["limit"] !== undefined) { this.limit = source.limit; }
    if (source["requirement"] !== undefined) { this.requirement = source.requirement; }
    if (source["_requirement"] !== undefined) { this._requirement = source._requirement; }
    if (source["type"] === undefined) { throw 'Missing required element type';}
    this.type = source.type;
  }
}
/**
 * Details about the coverage offered by the insurance product.
 */
export class InsurancePlanCoverage extends fhirModels.BackboneElement {
  /**
   * Specific benefits under this type of coverage.
   */
  benefit: fhirModels.InsurancePlanCoverageBenefit[];
  /**
   * Networks are represented as a hierarchy of organization resources.
   */
  network?: fhirModels.Reference[];
  /**
   * Type of coverage  (Medical; Dental; Mental Health; Substance Abuse; Vision; Drug; Short Term; Long Term Care; Hospice; Home Health).
   */
  type: fhirModels.CodeableConcept;
  /**
   * Default constructor
   */
  constructor(source: InsurancePlanCoverage) {
    super(source);
    if (source["benefit"] === undefined) { throw 'Missing required element benefit';}
    this.benefit = source.benefit;
    if (source["network"] !== undefined) { this.network = source.network; }
    if (source["type"] === undefined) { throw 'Missing required element type';}
    this.type = source.type;
  }
}
/**
 * Overall costs associated with the plan.
 */
export class InsurancePlanPlanGeneralCost extends fhirModels.BackboneElement {
  /**
   * Additional information about the general costs associated with this plan.
   */
  comment?: string;
  _comment?: fhirModels.Element;
  /**
   * Value of the cost.
   */
  cost?: fhirModels.Money;
  /**
   * Number of participants enrolled in the plan.
   */
  groupSize?: number;
  _groupSize?: fhirModels.Element;
  /**
   * Type of cost.
   */
  type?: fhirModels.CodeableConcept;
  /**
   * Default constructor
   */
  constructor(source: InsurancePlanPlanGeneralCost) {
    super(source);
    if (source["comment"] !== undefined) { this.comment = source.comment; }
    if (source["_comment"] !== undefined) { this._comment = source._comment; }
    if (source["cost"] !== undefined) { this.cost = source.cost; }
    if (source["groupSize"] !== undefined) { this.groupSize = source.groupSize; }
    if (source["_groupSize"] !== undefined) { this._groupSize = source._groupSize; }
    if (source["type"] !== undefined) { this.type = source.type; }
  }
}
/**
 * List of the costs associated with a specific benefit.
 */
export class InsurancePlanPlanSpecificCostBenefitCost extends fhirModels.BackboneElement {
  /**
   * Whether the cost applies to in-network or out-of-network providers (in-network; out-of-network; other).
   */
  applicability?: fhirModels.CodeableConcept;
  /**
   * Additional information about the cost, such as information about funding sources (e.g. HSA, HRA, FSA, RRA).
   */
  qualifiers?: fhirModels.CodeableConcept[];
  /**
   * Type of cost (copay; individual cap; family cap; coinsurance; deductible).
   */
  type: fhirModels.CodeableConcept;
  /**
   * The actual cost value. (some of the costs may be represented as percentages rather than currency, e.g. 10% coinsurance).
   */
  value?: fhirModels.Quantity;
  /**
   * Default constructor
   */
  constructor(source: InsurancePlanPlanSpecificCostBenefitCost) {
    super(source);
    if (source["applicability"] !== undefined) { this.applicability = source.applicability; }
    if (source["qualifiers"] !== undefined) { this.qualifiers = source.qualifiers; }
    if (source["type"] === undefined) { throw 'Missing required element type';}
    this.type = source.type;
    if (source["value"] !== undefined) { this.value = source.value; }
  }
}
/**
 * List of the specific benefits under this category of benefit.
 */
export class InsurancePlanPlanSpecificCostBenefit extends fhirModels.BackboneElement {
  /**
   * List of the costs associated with a specific benefit.
   */
  cost?: fhirModels.InsurancePlanPlanSpecificCostBenefitCost[];
  /**
   * Type of specific benefit (preventative; primary care office visit; speciality office visit; hospitalization; emergency room; urgent care).
   */
  type: fhirModels.CodeableConcept;
  /**
   * Default constructor
   */
  constructor(source: InsurancePlanPlanSpecificCostBenefit) {
    super(source);
    if (source["cost"] !== undefined) { this.cost = source.cost; }
    if (source["type"] === undefined) { throw 'Missing required element type';}
    this.type = source.type;
  }
}
/**
 * Costs associated with the coverage provided by the product.
 */
export class InsurancePlanPlanSpecificCost extends fhirModels.BackboneElement {
  /**
   * List of the specific benefits under this category of benefit.
   */
  benefit?: fhirModels.InsurancePlanPlanSpecificCostBenefit[];
  /**
   * General category of benefit (Medical; Dental; Vision; Drug; Mental Health; Substance Abuse; Hospice, Home Health).
   */
  category: fhirModels.CodeableConcept;
  /**
   * Default constructor
   */
  constructor(source: InsurancePlanPlanSpecificCost) {
    super(source);
    if (source["benefit"] !== undefined) { this.benefit = source.benefit; }
    if (source["category"] === undefined) { throw 'Missing required element category';}
    this.category = source.category;
  }
}
/**
 * Details about an insurance plan.
 */
export class InsurancePlanPlan extends fhirModels.BackboneElement {
  /**
   * The geographic region in which a health insurance plan's benefits apply.
   */
  coverageArea?: fhirModels.Reference[];
  /**
   * Overall costs associated with the plan.
   */
  generalCost?: fhirModels.InsurancePlanPlanGeneralCost[];
  /**
   * Business identifiers assigned to this health insurance plan which remain constant as the resource is updated and propagates from server to server.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * Networks are represented as a hierarchy of organization resources.
   */
  network?: fhirModels.Reference[];
  /**
   * Costs associated with the coverage provided by the product.
   */
  specificCost?: fhirModels.InsurancePlanPlanSpecificCost[];
  /**
   * Type of plan. For example, "Platinum" or "High Deductable".
   */
  type?: fhirModels.CodeableConcept;
  /**
   * Default constructor
   */
  constructor(source: InsurancePlanPlan) {
    super(source);
    if (source["coverageArea"] !== undefined) { this.coverageArea = source.coverageArea; }
    if (source["generalCost"] !== undefined) { this.generalCost = source.generalCost; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["network"] !== undefined) { this.network = source.network; }
    if (source["specificCost"] !== undefined) { this.specificCost = source.specificCost; }
    if (source["type"] !== undefined) { this.type = source.type; }
  }
}
/**
 * Details of a Health Insurance product/plan provided by an organization.
 */
export class InsurancePlan extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "InsurancePlan";
  /**
   * An organization which administer other services such as underwriting, customer service and/or claims processing on behalf of the health insurance product owner.
   */
  administeredBy?: fhirModels.Reference;
  /**
   * There are no dates associated with the alias/historic names, as this is not intended to track when names were used, but to assist in searching so that older names can still result in identifying the product/plan.
   */
  alias?: string[];
  _alias?: fhirModels.Element[];
  /**
   * Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
   */
  contact?: fhirModels.InsurancePlanContact[];
  /**
   * Details about the coverage offered by the insurance product.
   */
  coverage?: fhirModels.InsurancePlanCoverage[];
  /**
   * The geographic region in which a health insurance product's benefits apply.
   */
  coverageArea?: fhirModels.Reference[];
  /**
   * The technical endpoints providing access to services operated for the health insurance product.
   */
  endpoint?: fhirModels.Reference[];
  /**
   * Business identifiers assigned to this health insurance product which remain constant as the resource is updated and propagates from server to server.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * If the name of the product/plan changes, consider putting the old name in the alias column so that it can still be located through searches.
   */
  name?: string;
  _name?: fhirModels.Element;
  /**
   * Networks are represented as a hierarchy of organization resources.
   */
  network?: fhirModels.Reference[];
  /**
   * The entity that is providing  the health insurance product and underwriting the risk.  This is typically an insurance carriers, other third-party payers, or health plan sponsors comonly referred to as 'payers'.
   */
  ownedBy?: fhirModels.Reference;
  /**
   * The period of time that the health insurance product is available.
   */
  period?: fhirModels.Period;
  /**
   * Details about an insurance plan.
   */
  plan?: fhirModels.InsurancePlanPlan[];
  /**
   * The current state of the health insurance product.
   */
  status?: InsurancePlanStatusEnum;
  _status?: fhirModels.Element;
  /**
   * The kind of health insurance product.
   */
  type?: fhirModels.CodeableConcept[];
  /**
   * Default constructor
   */
  constructor(source: InsurancePlan) {
    super(source);
    if ((source['resourceType'] !== "InsurancePlan") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a InsurancePlan'; }
    if (source["administeredBy"] !== undefined) { this.administeredBy = source.administeredBy; }
    if (source["alias"] !== undefined) { this.alias = source.alias; }
    if (source["_alias"] !== undefined) { this._alias = source._alias; }
    if (source["contact"] !== undefined) { this.contact = source.contact; }
    if (source["coverage"] !== undefined) { this.coverage = source.coverage; }
    if (source["coverageArea"] !== undefined) { this.coverageArea = source.coverageArea; }
    if (source["endpoint"] !== undefined) { this.endpoint = source.endpoint; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["name"] !== undefined) { this.name = source.name; }
    if (source["_name"] !== undefined) { this._name = source._name; }
    if (source["network"] !== undefined) { this.network = source.network; }
    if (source["ownedBy"] !== undefined) { this.ownedBy = source.ownedBy; }
    if (source["period"] !== undefined) { this.period = source.period; }
    if (source["plan"] !== undefined) { this.plan = source.plan; }
    if (source["status"] !== undefined) { this.status = source.status; }
    if (source["_status"] !== undefined) { this._status = source._status; }
    if (source["type"] !== undefined) { this.type = source.type; }
  }
}
/**
 * Code Values for the InsurancePlan.status field
 */
export enum InsurancePlanStatusEnum {
  DRAFT = "draft",
  ACTIVE = "active",
  RETIRED = "retired",
  UNKNOWN = "unknown",
}
