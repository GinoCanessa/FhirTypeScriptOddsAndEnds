// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * Indicates who performed the immunization event.
 */
export class ImmunizationPerformer extends fhirModels.BackboneElement {
  /**
   * When the individual practitioner who performed the action is known, it is best to send.
   */
  actor: fhirModels.Reference;
  /**
   * Describes the type of performance (e.g. ordering provider, administering provider, etc.).
   */
  function?: fhirModels.CodeableConcept;
  /**
   * Default constructor
   */
  constructor(source: ImmunizationPerformer) {
    super(source);
    if (source["actor"] === undefined) { throw 'Missing required element actor';}
    this.actor = source.actor;
    if (source["function"] !== undefined) { this.function = source.function; }
  }
}
/**
 * Educational material presented to the patient (or guardian) at the time of vaccine administration.
 */
export class ImmunizationEducation extends fhirModels.BackboneElement {
  /**
   * Identifier of the material presented to the patient.
   */
  documentType?: string;
  _documentType?: fhirModels.Element;
  /**
   * Date the educational material was given to the patient.
   */
  presentationDate?: string;
  _presentationDate?: fhirModels.Element;
  /**
   * Date the educational material was published.
   */
  publicationDate?: string;
  _publicationDate?: fhirModels.Element;
  /**
   * Reference pointer to the educational material given to the patient if the information was on line.
   */
  reference?: string;
  _reference?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: ImmunizationEducation) {
    super(source);
    if (source["documentType"] !== undefined) { this.documentType = source.documentType; }
    if (source["_documentType"] !== undefined) { this._documentType = source._documentType; }
    if (source["presentationDate"] !== undefined) { this.presentationDate = source.presentationDate; }
    if (source["_presentationDate"] !== undefined) { this._presentationDate = source._presentationDate; }
    if (source["publicationDate"] !== undefined) { this.publicationDate = source.publicationDate; }
    if (source["_publicationDate"] !== undefined) { this._publicationDate = source._publicationDate; }
    if (source["reference"] !== undefined) { this.reference = source.reference; }
    if (source["_reference"] !== undefined) { this._reference = source._reference; }
  }
}
/**
 * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
 */
export class ImmunizationReaction extends fhirModels.BackboneElement {
  /**
   * Date of reaction to the immunization.
   */
  date?: string;
  _date?: fhirModels.Element;
  /**
   * Details of the reaction.
   */
  detail?: fhirModels.Reference;
  /**
   * Self-reported indicator.
   */
  reported?: boolean;
  _reported?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: ImmunizationReaction) {
    super(source);
    if (source["date"] !== undefined) { this.date = source.date; }
    if (source["_date"] !== undefined) { this._date = source._date; }
    if (source["detail"] !== undefined) { this.detail = source.detail; }
    if (source["reported"] !== undefined) { this.reported = source.reported; }
    if (source["_reported"] !== undefined) { this._reported = source._reported; }
  }
}
/**
 * The protocol (set of recommendations) being followed by the provider who administered the dose.
 */
export class ImmunizationProtocolApplied extends fhirModels.BackboneElement {
  /**
   * Indicates the authority who published the protocol (e.g. ACIP) that is being followed.
   */
  authority?: fhirModels.Reference;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  doseNumberPositiveInt?: number;
  _doseNumberPositiveInt?: fhirModels.Element;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  doseNumberString?: string;
  _doseNumberString?: fhirModels.Element;
  /**
   * One possible path to achieve presumed immunity against a disease - within the context of an authority.
   */
  series?: string;
  _series?: fhirModels.Element;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  seriesDosesPositiveInt?: number;
  _seriesDosesPositiveInt?: fhirModels.Element;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  seriesDosesString?: string;
  _seriesDosesString?: fhirModels.Element;
  /**
   * The vaccine preventable disease the dose is being administered against.
   */
  targetDisease?: fhirModels.CodeableConcept[];
  /**
   * Default constructor
   */
  constructor(source: ImmunizationProtocolApplied) {
    super(source);
    if (source["authority"] !== undefined) { this.authority = source.authority; }
    if (source["doseNumberPositiveInt"] !== undefined) { this.doseNumberPositiveInt = source.doseNumberPositiveInt; }
    if (source["_doseNumberPositiveInt"] !== undefined) { this._doseNumberPositiveInt = source._doseNumberPositiveInt; }
    if (source["doseNumberString"] !== undefined) { this.doseNumberString = source.doseNumberString; }
    if (source["_doseNumberString"] !== undefined) { this._doseNumberString = source._doseNumberString; }
    if (source["series"] !== undefined) { this.series = source.series; }
    if (source["_series"] !== undefined) { this._series = source._series; }
    if (source["seriesDosesPositiveInt"] !== undefined) { this.seriesDosesPositiveInt = source.seriesDosesPositiveInt; }
    if (source["_seriesDosesPositiveInt"] !== undefined) { this._seriesDosesPositiveInt = source._seriesDosesPositiveInt; }
    if (source["seriesDosesString"] !== undefined) { this.seriesDosesString = source.seriesDosesString; }
    if (source["_seriesDosesString"] !== undefined) { this._seriesDosesString = source._seriesDosesString; }
    if (source["targetDisease"] !== undefined) { this.targetDisease = source.targetDisease; }
  }
}
/**
 * Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
 */
export class Immunization extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "Immunization";
  /**
   * The quantity of vaccine product that was administered.
   */
  doseQuantity?: fhirModels.Quantity;
  /**
   * Educational material presented to the patient (or guardian) at the time of vaccine administration.
   */
  education?: fhirModels.ImmunizationEducation[];
  /**
   * The visit or admission or other contact between patient and health care provider the immunization was performed as part of.
   */
  encounter?: fhirModels.Reference;
  /**
   * Date vaccine batch expires.
   */
  expirationDate?: string;
  _expirationDate?: fhirModels.Element;
  /**
   * Indicates the source of the vaccine actually administered. This may be different than the patient eligibility (e.g. the patient may be eligible for a publically purchased vaccine but due to inventory issues, vaccine purchased with private funds was actually administered).
   */
  fundingSource?: fhirModels.CodeableConcept;
  /**
   * A unique identifier assigned to this immunization record.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * Typically, the recognition of the dose being sub-potent is retrospective, after the administration (ex. notification of a manufacturer recall after administration). However, in the case of a partial administration (the patient moves unexpectedly and only some of the dose is actually administered), subpotency may be recognized immediately, but it is still important to record the event.
   */
  isSubpotent?: boolean;
  _isSubpotent?: fhirModels.Element;
  /**
   * The service delivery location where the vaccine administration occurred.
   */
  location?: fhirModels.Reference;
  /**
   * Lot number of the  vaccine product.
   */
  lotNumber?: string;
  _lotNumber?: fhirModels.Element;
  /**
   * Name of vaccine manufacturer.
   */
  manufacturer?: fhirModels.Reference;
  /**
   * Extra information about the immunization that is not conveyed by the other attributes.
   */
  note?: fhirModels.Annotation[];
  /**
   * When immunizations are given a specific date and time should always be known.   When immunizations are patient reported, a specific date might not be known.  Although partial dates are allowed, an adult patient might not be able to recall the year a childhood immunization was given. An exact date is always preferable, but the use of the String data type is acceptable when an exact date is not known. A small number of vaccines (e.g. live oral typhoid vaccine) are given as a series of patient self-administered dose over a span of time. In cases like this, often, only the first dose (typically a provider supervised dose) is recorded with the occurrence indicating the date/time of the first dose.
   */
  occurrenceDateTime?: string;
  _occurrenceDateTime?: fhirModels.Element;
  /**
   * When immunizations are given a specific date and time should always be known.   When immunizations are patient reported, a specific date might not be known.  Although partial dates are allowed, an adult patient might not be able to recall the year a childhood immunization was given. An exact date is always preferable, but the use of the String data type is acceptable when an exact date is not known. A small number of vaccines (e.g. live oral typhoid vaccine) are given as a series of patient self-administered dose over a span of time. In cases like this, often, only the first dose (typically a provider supervised dose) is recorded with the occurrence indicating the date/time of the first dose.
   */
  occurrenceString?: string;
  _occurrenceString?: fhirModels.Element;
  /**
   * The patient who either received or did not receive the immunization.
   */
  patient: fhirModels.Reference;
  /**
   * Indicates who performed the immunization event.
   */
  performer?: fhirModels.ImmunizationPerformer[];
  /**
   * Reflects the “reliability” of the content.
   */
  primarySource?: boolean;
  _primarySource?: fhirModels.Element;
  /**
   * Indicates a patient's eligibility for a funding program.
   */
  programEligibility?: fhirModels.CodeableConcept[];
  /**
   * The protocol (set of recommendations) being followed by the provider who administered the dose.
   */
  protocolApplied?: fhirModels.ImmunizationProtocolApplied[];
  /**
   * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
   */
  reaction?: fhirModels.ImmunizationReaction[];
  /**
   * Reasons why the vaccine was administered.
   */
  reasonCode?: fhirModels.CodeableConcept[];
  /**
   * Condition, Observation or DiagnosticReport that supports why the immunization was administered.
   */
  reasonReference?: fhirModels.Reference[];
  /**
   * The date the occurrence of the immunization was first captured in the record - potentially significantly after the occurrence of the event.
   */
  recorded?: string;
  _recorded?: fhirModels.Element;
  /**
   * Should not be populated if primarySource = True, not required even if primarySource = False.
   */
  reportOrigin?: fhirModels.CodeableConcept;
  /**
   * The path by which the vaccine product is taken into the body.
   */
  route?: fhirModels.CodeableConcept;
  /**
   * Body site where vaccine was administered.
   */
  site?: fhirModels.CodeableConcept;
  /**
   * Will generally be set to show that the immunization has been completed or not done.  This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ImmunizationStatusEnum;
  _status?: fhirModels.Element;
  /**
   * This is generally only used for the status of "not-done". The reason for performing the immunization event is captured in reasonCode, not here.
   */
  statusReason?: fhirModels.CodeableConcept;
  /**
   * Reason why a dose is considered to be subpotent.
   */
  subpotentReason?: fhirModels.CodeableConcept[];
  /**
   * Vaccine that was administered or was to be administered.
   */
  vaccineCode: fhirModels.CodeableConcept;
  /**
   * Default constructor
   */
  constructor(source: Immunization) {
    super(source);
    if ((source['resourceType'] !== "Immunization") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a Immunization'; }
    if (source["doseQuantity"] !== undefined) { this.doseQuantity = source.doseQuantity; }
    if (source["education"] !== undefined) { this.education = source.education; }
    if (source["encounter"] !== undefined) { this.encounter = source.encounter; }
    if (source["expirationDate"] !== undefined) { this.expirationDate = source.expirationDate; }
    if (source["_expirationDate"] !== undefined) { this._expirationDate = source._expirationDate; }
    if (source["fundingSource"] !== undefined) { this.fundingSource = source.fundingSource; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["isSubpotent"] !== undefined) { this.isSubpotent = source.isSubpotent; }
    if (source["_isSubpotent"] !== undefined) { this._isSubpotent = source._isSubpotent; }
    if (source["location"] !== undefined) { this.location = source.location; }
    if (source["lotNumber"] !== undefined) { this.lotNumber = source.lotNumber; }
    if (source["_lotNumber"] !== undefined) { this._lotNumber = source._lotNumber; }
    if (source["manufacturer"] !== undefined) { this.manufacturer = source.manufacturer; }
    if (source["note"] !== undefined) { this.note = source.note; }
    if (source["occurrenceDateTime"] !== undefined) { this.occurrenceDateTime = source.occurrenceDateTime; }
    if (source["_occurrenceDateTime"] !== undefined) { this._occurrenceDateTime = source._occurrenceDateTime; }
    if (source["occurrenceString"] !== undefined) { this.occurrenceString = source.occurrenceString; }
    if (source["_occurrenceString"] !== undefined) { this._occurrenceString = source._occurrenceString; }
    if (source["patient"] === undefined) { throw 'Missing required element patient';}
    this.patient = source.patient;
    if (source["performer"] !== undefined) { this.performer = source.performer; }
    if (source["primarySource"] !== undefined) { this.primarySource = source.primarySource; }
    if (source["_primarySource"] !== undefined) { this._primarySource = source._primarySource; }
    if (source["programEligibility"] !== undefined) { this.programEligibility = source.programEligibility; }
    if (source["protocolApplied"] !== undefined) { this.protocolApplied = source.protocolApplied; }
    if (source["reaction"] !== undefined) { this.reaction = source.reaction; }
    if (source["reasonCode"] !== undefined) { this.reasonCode = source.reasonCode; }
    if (source["reasonReference"] !== undefined) { this.reasonReference = source.reasonReference; }
    if (source["recorded"] !== undefined) { this.recorded = source.recorded; }
    if (source["_recorded"] !== undefined) { this._recorded = source._recorded; }
    if (source["reportOrigin"] !== undefined) { this.reportOrigin = source.reportOrigin; }
    if (source["route"] !== undefined) { this.route = source.route; }
    if (source["site"] !== undefined) { this.site = source.site; }
    if (source["status"] === undefined) { throw 'Missing required element status';}
    this.status = source.status;
    if (source["_status"] !== undefined) { this._status = source._status; }
    if (source["statusReason"] !== undefined) { this.statusReason = source.statusReason; }
    if (source["subpotentReason"] !== undefined) { this.subpotentReason = source.subpotentReason; }
    if (source["vaccineCode"] === undefined) { throw 'Missing required element vaccineCode';}
    this.vaccineCode = source.vaccineCode;
  }
}
/**
 * Code Values for the Immunization.status field
 */
export enum ImmunizationStatusEnum {
  COMPLETED = "completed",
  ENTERED_IN_ERROR = "entered-in-error",
  NOT_DONE = "not-done",
}
