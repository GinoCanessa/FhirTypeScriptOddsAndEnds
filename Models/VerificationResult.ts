// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * Information about the primary source(s) involved in validation.
 */
export class VerificationResultPrimarySource extends fhirModels.BackboneElement {
  /**
   * Ability of the primary source to push updates/alerts (yes; no; undetermined).
   */
  canPushUpdates?: fhirModels.CodeableConcept;
  /**
   * Method for communicating with the primary source (manual; API; Push).
   */
  communicationMethod?: fhirModels.CodeableConcept[];
  /**
   * Type of alerts/updates the primary source can send (specific requested changes; any changes; as defined by source).
   */
  pushTypeAvailable?: fhirModels.CodeableConcept[];
  /**
   * Type of primary source (License Board; Primary Education; Continuing Education; Postal Service; Relationship owner; Registration Authority; legal source; issuing source; authoritative source).
   */
  type?: fhirModels.CodeableConcept[];
  /**
   * When the target was validated against the primary source.
   */
  validationDate?: string;
  _validationDate?: fhirModels.Element;
  /**
   * Status of the validation of the target against the primary source (successful; failed; unknown).
   */
  validationStatus?: fhirModels.CodeableConcept;
  /**
   * Reference to the primary source.
   */
  who?: fhirModels.Reference;
  /**
   * Default constructor
   */
  constructor(source: VerificationResultPrimarySource) {
    super(source);
    if (source["canPushUpdates"] !== undefined) { this.canPushUpdates = source.canPushUpdates; }
    if (source["communicationMethod"] !== undefined) { this.communicationMethod = source.communicationMethod; }
    if (source["pushTypeAvailable"] !== undefined) { this.pushTypeAvailable = source.pushTypeAvailable; }
    if (source["type"] !== undefined) { this.type = source.type; }
    if (source["validationDate"] !== undefined) { this.validationDate = source.validationDate; }
    if (source["_validationDate"] !== undefined) { this._validationDate = source._validationDate; }
    if (source["validationStatus"] !== undefined) { this.validationStatus = source.validationStatus; }
    if (source["who"] !== undefined) { this.who = source.who; }
  }
}
/**
 * Information about the entity attesting to information.
 */
export class VerificationResultAttestation extends fhirModels.BackboneElement {
  /**
   * The method by which attested information was submitted/retrieved (manual; API; Push).
   */
  communicationMethod?: fhirModels.CodeableConcept;
  /**
   * The date the information was attested to.
   */
  date?: string;
  _date?: fhirModels.Element;
  /**
   * When the who is asserting on behalf of another (organization or individual).
   */
  onBehalfOf?: fhirModels.Reference;
  /**
   * A digital identity certificate associated with the proxy entity submitting attested information on behalf of the attestation source.
   */
  proxyIdentityCertificate?: string;
  _proxyIdentityCertificate?: fhirModels.Element;
  /**
   * Signed assertion by the proxy entity indicating that they have the right to submit attested information on behalf of the attestation source.
   */
  proxySignature?: fhirModels.Signature;
  /**
   * A digital identity certificate associated with the attestation source.
   */
  sourceIdentityCertificate?: string;
  _sourceIdentityCertificate?: fhirModels.Element;
  /**
   * Signed assertion by the attestation source that they have attested to the information.
   */
  sourceSignature?: fhirModels.Signature;
  /**
   * The individual or organization attesting to information.
   */
  who?: fhirModels.Reference;
  /**
   * Default constructor
   */
  constructor(source: VerificationResultAttestation) {
    super(source);
    if (source["communicationMethod"] !== undefined) { this.communicationMethod = source.communicationMethod; }
    if (source["date"] !== undefined) { this.date = source.date; }
    if (source["_date"] !== undefined) { this._date = source._date; }
    if (source["onBehalfOf"] !== undefined) { this.onBehalfOf = source.onBehalfOf; }
    if (source["proxyIdentityCertificate"] !== undefined) { this.proxyIdentityCertificate = source.proxyIdentityCertificate; }
    if (source["_proxyIdentityCertificate"] !== undefined) { this._proxyIdentityCertificate = source._proxyIdentityCertificate; }
    if (source["proxySignature"] !== undefined) { this.proxySignature = source.proxySignature; }
    if (source["sourceIdentityCertificate"] !== undefined) { this.sourceIdentityCertificate = source.sourceIdentityCertificate; }
    if (source["_sourceIdentityCertificate"] !== undefined) { this._sourceIdentityCertificate = source._sourceIdentityCertificate; }
    if (source["sourceSignature"] !== undefined) { this.sourceSignature = source.sourceSignature; }
    if (source["who"] !== undefined) { this.who = source.who; }
  }
}
/**
 * Information about the entity validating information.
 */
export class VerificationResultValidator extends fhirModels.BackboneElement {
  /**
   * Signed assertion by the validator that they have validated the information.
   */
  attestationSignature?: fhirModels.Signature;
  /**
   * A digital identity certificate associated with the validator.
   */
  identityCertificate?: string;
  _identityCertificate?: fhirModels.Element;
  /**
   * Reference to the organization validating information.
   */
  organization: fhirModels.Reference;
  /**
   * Default constructor
   */
  constructor(source: VerificationResultValidator) {
    super(source);
    if (source["attestationSignature"] !== undefined) { this.attestationSignature = source.attestationSignature; }
    if (source["identityCertificate"] !== undefined) { this.identityCertificate = source.identityCertificate; }
    if (source["_identityCertificate"] !== undefined) { this._identityCertificate = source._identityCertificate; }
    if (source["organization"] === undefined) { throw 'Missing required element organization';}
    this.organization = source.organization;
  }
}
/**
 * Describes validation requirements, source(s), status and dates for one or more elements.
 */
export class VerificationResult extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "VerificationResult";
  /**
   * Information about the entity attesting to information.
   */
  attestation?: fhirModels.VerificationResultAttestation;
  /**
   * The result if validation fails (fatal; warning; record only; none).
   */
  failureAction?: fhirModels.CodeableConcept;
  /**
   * Frequency of revalidation.
   */
  frequency?: fhirModels.Timing;
  /**
   * The date/time validation was last completed (including failed validations).
   */
  lastPerformed?: string;
  _lastPerformed?: fhirModels.Element;
  /**
   * The frequency with which the target must be validated (none; initial; periodic).
   */
  need?: fhirModels.CodeableConcept;
  /**
   * The date when target is next validated, if appropriate.
   */
  nextScheduled?: string;
  _nextScheduled?: fhirModels.Element;
  /**
   * Information about the primary source(s) involved in validation.
   */
  primarySource?: fhirModels.VerificationResultPrimarySource[];
  /**
   * The validation status of the target (attested; validated; in process; requires revalidation; validation failed; revalidation failed).
   */
  status: VerificationResultStatusEnum;
  _status?: fhirModels.Element;
  /**
   * When the validation status was updated.
   */
  statusDate?: string;
  _statusDate?: fhirModels.Element;
  /**
   * A resource that was validated.
   */
  target?: fhirModels.Reference[];
  /**
   * The fhirpath location(s) within the resource that was validated.
   */
  targetLocation?: string[];
  _targetLocation?: fhirModels.Element[];
  /**
   * The primary process by which the target is validated (edit check; value set; primary source; multiple sources; standalone; in context).
   */
  validationProcess?: fhirModels.CodeableConcept[];
  /**
   * What the target is validated against (nothing; primary source; multiple sources).
   */
  validationType?: fhirModels.CodeableConcept;
  /**
   * Information about the entity validating information.
   */
  validator?: fhirModels.VerificationResultValidator[];
  /**
   * Default constructor
   */
  constructor(source: VerificationResult) {
    super(source);
    if ((source['resourceType'] !== "VerificationResult") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a VerificationResult'; }
    if (source["attestation"] !== undefined) { this.attestation = source.attestation; }
    if (source["failureAction"] !== undefined) { this.failureAction = source.failureAction; }
    if (source["frequency"] !== undefined) { this.frequency = source.frequency; }
    if (source["lastPerformed"] !== undefined) { this.lastPerformed = source.lastPerformed; }
    if (source["_lastPerformed"] !== undefined) { this._lastPerformed = source._lastPerformed; }
    if (source["need"] !== undefined) { this.need = source.need; }
    if (source["nextScheduled"] !== undefined) { this.nextScheduled = source.nextScheduled; }
    if (source["_nextScheduled"] !== undefined) { this._nextScheduled = source._nextScheduled; }
    if (source["primarySource"] !== undefined) { this.primarySource = source.primarySource; }
    if (source["status"] === undefined) { throw 'Missing required element status';}
    this.status = source.status;
    if (source["_status"] !== undefined) { this._status = source._status; }
    if (source["statusDate"] !== undefined) { this.statusDate = source.statusDate; }
    if (source["_statusDate"] !== undefined) { this._statusDate = source._statusDate; }
    if (source["target"] !== undefined) { this.target = source.target; }
    if (source["targetLocation"] !== undefined) { this.targetLocation = source.targetLocation; }
    if (source["_targetLocation"] !== undefined) { this._targetLocation = source._targetLocation; }
    if (source["validationProcess"] !== undefined) { this.validationProcess = source.validationProcess; }
    if (source["validationType"] !== undefined) { this.validationType = source.validationType; }
    if (source["validator"] !== undefined) { this.validator = source.validator; }
  }
}
/**
 * Code Values for the VerificationResult.status field
 */
export enum VerificationResultStatusEnum {
  ATTESTED = "attested",
  VALIDATED = "validated",
  IN_PROCESS = "in-process",
  REQ_REVALID = "req-revalid",
  VAL_FAIL = "val-fail",
  REVAL_FAIL = "reval-fail",
}
