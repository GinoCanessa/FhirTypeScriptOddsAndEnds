// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * Reference range of possible or expected values.
 */
export class SubstanceAmountReferenceRange extends fhirModels.Element {
  /**
   * Upper limit possible or expected.
   */
  highLimit?: fhirModels.Quantity;
  /**
   * Lower limit possible or expected.
   */
  lowLimit?: fhirModels.Quantity;
  /**
   * Default constructor
   */
  constructor(source: SubstanceAmountReferenceRange) {
    super(source);
    if (source["highLimit"] !== undefined) { this.highLimit = source.highLimit; }
    if (source["lowLimit"] !== undefined) { this.lowLimit = source.lowLimit; }
  }
}
/**
 * Chemical substances are a single substance type whose primary defining element is the molecular structure. Chemical substances shall be defined on the basis of their complete covalent molecular structure; the presence of a salt (counter-ion) and/or solvates (water, alcohols) is also captured. Purity, grade, physical form or particle size are not taken into account in the definition of a chemical substance or in the assignment of a Substance ID.
 */
export class SubstanceAmount extends fhirModels.BackboneElement {
  /**
   * Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
   */
  amountQuantity?: fhirModels.Quantity;
  /**
   * Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
   */
  amountRange?: fhirModels.Range;
  /**
   * Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
   */
  amountString?: string;
  _amountString?: fhirModels.Element;
  /**
   * A textual comment on a numeric value.
   */
  amountText?: string;
  _amountText?: fhirModels.Element;
  /**
   * Most elements that require a quantitative value will also have a field called amount type. Amount type should always be specified because the actual value of the amount is often dependent on it. EXAMPLE: In capturing the actual relative amounts of substances or molecular fragments it is essential to indicate whether the amount refers to a mole ratio or weight ratio. For any given element an effort should be made to use same the amount type for all related definitional elements.
   */
  amountType?: fhirModels.CodeableConcept;
  /**
   * Reference range of possible or expected values.
   */
  referenceRange?: fhirModels.SubstanceAmountReferenceRange;
  /**
   * Default constructor
   */
  constructor(source: SubstanceAmount) {
    super(source);
    if (source["amountQuantity"] !== undefined) { this.amountQuantity = source.amountQuantity; }
    if (source["amountRange"] !== undefined) { this.amountRange = source.amountRange; }
    if (source["amountString"] !== undefined) { this.amountString = source.amountString; }
    if (source["_amountString"] !== undefined) { this._amountString = source._amountString; }
    if (source["amountText"] !== undefined) { this.amountText = source.amountText; }
    if (source["_amountText"] !== undefined) { this._amountText = source._amountText; }
    if (source["amountType"] !== undefined) { this.amountType = source.amountType; }
    if (source["referenceRange"] !== undefined) { this.referenceRange = source.referenceRange; }
  }
}
