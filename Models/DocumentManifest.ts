// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * May be identifiers or resources that caused the DocumentManifest to be created.
 */
export class DocumentManifestRelated extends fhirModels.BackboneElement {
  /**
   * If both identifier and ref elements are present they shall refer to the same thing.
   */
  identifier?: fhirModels.Identifier;
  /**
   * If both identifier and ref elements are present they shall refer to the same thing.
   */
  ref?: fhirModels.Reference;
  /**
   * Default constructor
   */
  constructor(source: DocumentManifestRelated) {
    super(source);
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["ref"] !== undefined) { this.ref = source.ref; }
  }
}
/**
 * A collection of documents compiled for a purpose together with metadata that applies to the collection.
 */
export class DocumentManifest extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "DocumentManifest";
  /**
   * Not necessarily who did the actual data entry (i.e. typist) or who was the source (informant).
   */
  author?: fhirModels.Reference[];
  /**
   * When used for XDS the intended focus of the DocumentManifest is for the reference to target to be a set of DocumentReference Resources. The reference is to "Any" to support EN 13606 usage, where an extract is DocumentManifest that references  List and Composition resources.
   */
  content: fhirModels.Reference[];
  /**
   * Creation time is used for tracking, organizing versions and searching. This is the creation time of the document set, not the documents on which it is based.
   */
  created?: string;
  _created?: fhirModels.Element;
  /**
   * What the document is about, rather than a terse summary of the document. It is commonly the case that records do not have a title and are collectively referred to by the display name of Record code (e.g. a "consultation" or "progress note").
   */
  description?: string;
  _description?: fhirModels.Element;
  /**
   * Other identifiers associated with the document manifest, including version independent  identifiers.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * A single identifier that uniquely identifies this manifest. Principally used to refer to the manifest in non-FHIR contexts.
   */
  masterIdentifier?: fhirModels.Identifier;
  /**
   * How the recipient receives the document set or is notified of it is up to the implementation. This element is just a statement of intent. If the recipient is a person, and it is not known whether the person is a patient or a practitioner, RelatedPerson would be the default choice.
   */
  recipient?: fhirModels.Reference[];
  /**
   * May be identifiers or resources that caused the DocumentManifest to be created.
   */
  related?: fhirModels.DocumentManifestRelated[];
  /**
   * Identifies the source system, application, or software that produced the document manifest.
   */
  source?: string;
  _source?: fhirModels.Element;
  /**
   * This element is labeled as a modifier because the status contains the codes that mark the manifest as not currently valid.
   */
  status: DocumentManifestStatusEnum;
  _status?: fhirModels.Element;
  /**
   * Who or what the set of documents is about. The documents can be about a person, (patient or healthcare practitioner), a device (i.e. machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure). If the documents cross more than one subject, then more than one subject is allowed here (unusual use case).
   */
  subject?: fhirModels.Reference;
  /**
   * Specifies the kind of this set of documents (e.g. Patient Summary, Discharge Summary, Prescription, etc.). The type of a set of documents may be the same as one of the documents in it - especially if there is only one - but it may be wider.
   */
  type?: fhirModels.CodeableConcept;
  /**
   * Default constructor
   */
  constructor(source: DocumentManifest) {
    super(source);
    if ((source['resourceType'] !== "DocumentManifest") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a DocumentManifest'; }
    if (source["author"] !== undefined) { this.author = source.author; }
    if (source["content"] === undefined) { throw 'Missing required element content';}
    this.content = source.content;
    if (source["created"] !== undefined) { this.created = source.created; }
    if (source["_created"] !== undefined) { this._created = source._created; }
    if (source["description"] !== undefined) { this.description = source.description; }
    if (source["_description"] !== undefined) { this._description = source._description; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["masterIdentifier"] !== undefined) { this.masterIdentifier = source.masterIdentifier; }
    if (source["recipient"] !== undefined) { this.recipient = source.recipient; }
    if (source["related"] !== undefined) { this.related = source.related; }
    if (source["source"] !== undefined) { this.source = source.source; }
    if (source["_source"] !== undefined) { this._source = source._source; }
    if (source["status"] === undefined) { throw 'Missing required element status';}
    this.status = source.status;
    if (source["_status"] !== undefined) { this._status = source._status; }
    if (source["subject"] !== undefined) { this.subject = source.subject; }
    if (source["type"] !== undefined) { this.type = source.type; }
  }
}
/**
 * Code Values for the DocumentManifest.status field
 */
export enum DocumentManifestStatusEnum {
  CURRENT = "current",
  SUPERSEDED = "superseded",
  ENTERED_IN_ERROR = "entered-in-error",
}
