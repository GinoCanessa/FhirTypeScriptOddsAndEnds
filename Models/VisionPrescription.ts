// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../models'
/**
 * Allows for adjustment on two axis.
 */
export class VisionPrescriptionLensSpecificationPrism extends fhirModels.BackboneElement {
  /**
   * Amount of prism to compensate for eye alignment in fractional units.
   */
  amount: number;
  _amount?: fhirModels.Element;
  /**
   * The relative base, or reference lens edge, for the prism.
   */
  base: VisionPrescriptionLensSpecificationPrismBaseEnum;
  _base?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: VisionPrescriptionLensSpecificationPrism) {
    super(source);
    if (source["amount"] === undefined) { throw 'Missing required element amount';}
    this.amount = source.amount;
    if (source["_amount"] !== undefined) { this._amount = source._amount; }
    if (source["base"] === undefined) { throw 'Missing required element base';}
    this.base = source.base;
    if (source["_base"] !== undefined) { this._base = source._base; }
  }
}
/**
 * Code Values for the VisionPrescription.lensSpecification.prism.base field
 */
export enum VisionPrescriptionLensSpecificationPrismBaseEnum {
  UP = "up",
  DOWN = "down",
  IN = "in",
  OUT = "out",
}
/**
 * Contain the details of  the individual lens specifications and serves as the authorization for the fullfillment by certified professionals.
 */
export class VisionPrescriptionLensSpecification extends fhirModels.BackboneElement {
  /**
   * Power adjustment for multifocal lenses measured in dioptres (0.25 units).
   */
  add?: number;
  _add?: fhirModels.Element;
  /**
   * The limits are +180 and -180 degrees.
   */
  axis?: number;
  _axis?: fhirModels.Element;
  /**
   * Back curvature measured in millimetres.
   */
  backCurve?: number;
  _backCurve?: fhirModels.Element;
  /**
   * Brand recommendations or restrictions.
   */
  brand?: string;
  _brand?: fhirModels.Element;
  /**
   * Special color or pattern.
   */
  color?: string;
  _color?: fhirModels.Element;
  /**
   * Power adjustment for astigmatism measured in dioptres (0.25 units).
   */
  cylinder?: number;
  _cylinder?: fhirModels.Element;
  /**
   * Contact lens diameter measured in millimetres.
   */
  diameter?: number;
  _diameter?: fhirModels.Element;
  /**
   * The recommended maximum wear period for the lens.
   */
  duration?: fhirModels.Quantity;
  /**
   * May also appear as OD (oculus dexter) for the right eye and OS (oculus siniter) for the left eye.
   */
  eye: VisionPrescriptionLensSpecificationEyeEnum;
  _eye?: fhirModels.Element;
  /**
   * Notes for special requirements such as coatings and lens materials.
   */
  note?: fhirModels.Annotation[];
  /**
   * Contact lens power measured in dioptres (0.25 units).
   */
  power?: number;
  _power?: fhirModels.Element;
  /**
   * Allows for adjustment on two axis.
   */
  prism?: fhirModels.VisionPrescriptionLensSpecificationPrism[];
  /**
   * Identifies the type of vision correction product which is required for the patient.
   */
  product: fhirModels.CodeableConcept;
  /**
   * The value is negative for near-sighted and positive for far sighted.
   * Often insurance will not cover a lens with power between +75 and -75.
   */
  sphere?: number;
  _sphere?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: VisionPrescriptionLensSpecification) {
    super(source);
    if (source["add"] !== undefined) { this.add = source.add; }
    if (source["_add"] !== undefined) { this._add = source._add; }
    if (source["axis"] !== undefined) { this.axis = source.axis; }
    if (source["_axis"] !== undefined) { this._axis = source._axis; }
    if (source["backCurve"] !== undefined) { this.backCurve = source.backCurve; }
    if (source["_backCurve"] !== undefined) { this._backCurve = source._backCurve; }
    if (source["brand"] !== undefined) { this.brand = source.brand; }
    if (source["_brand"] !== undefined) { this._brand = source._brand; }
    if (source["color"] !== undefined) { this.color = source.color; }
    if (source["_color"] !== undefined) { this._color = source._color; }
    if (source["cylinder"] !== undefined) { this.cylinder = source.cylinder; }
    if (source["_cylinder"] !== undefined) { this._cylinder = source._cylinder; }
    if (source["diameter"] !== undefined) { this.diameter = source.diameter; }
    if (source["_diameter"] !== undefined) { this._diameter = source._diameter; }
    if (source["duration"] !== undefined) { this.duration = source.duration; }
    if (source["eye"] === undefined) { throw 'Missing required element eye';}
    this.eye = source.eye;
    if (source["_eye"] !== undefined) { this._eye = source._eye; }
    if (source["note"] !== undefined) { this.note = source.note; }
    if (source["power"] !== undefined) { this.power = source.power; }
    if (source["_power"] !== undefined) { this._power = source._power; }
    if (source["prism"] !== undefined) { this.prism = source.prism; }
    if (source["product"] === undefined) { throw 'Missing required element product';}
    this.product = source.product;
    if (source["sphere"] !== undefined) { this.sphere = source.sphere; }
    if (source["_sphere"] !== undefined) { this._sphere = source._sphere; }
  }
}
/**
 * Code Values for the VisionPrescription.lensSpecification.eye field
 */
export enum VisionPrescriptionLensSpecificationEyeEnum {
  RIGHT = "right",
  LEFT = "left",
}
/**
 * An authorization for the provision of glasses and/or contact lenses to a patient.
 */
export class VisionPrescription extends fhirModels.DomainResource {
  /**
   * Resource Type Name
   */
  readonly resourceType: string = "VisionPrescription";
  /**
   * The date this resource was created.
   */
  created: string;
  _created?: fhirModels.Element;
  /**
   * Jurisdictions determine the valid lifetime of a prescription. Typically vision prescriptions are valid for two years from the date written.
   */
  dateWritten: string;
  _dateWritten?: fhirModels.Element;
  /**
   * A reference to a resource that identifies the particular occurrence of contact between patient and health care provider during which the prescription was issued.
   */
  encounter?: fhirModels.Reference;
  /**
   * A unique identifier assigned to this vision prescription.
   */
  identifier?: fhirModels.Identifier[];
  /**
   * Contain the details of  the individual lens specifications and serves as the authorization for the fullfillment by certified professionals.
   */
  lensSpecification: fhirModels.VisionPrescriptionLensSpecification[];
  /**
   * A resource reference to the person to whom the vision prescription applies.
   */
  patient: fhirModels.Reference;
  /**
   * The healthcare professional responsible for authorizing the prescription.
   */
  prescriber: fhirModels.Reference;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: VisionPrescriptionStatusEnum;
  _status?: fhirModels.Element;
  /**
   * Default constructor
   */
  constructor(source: VisionPrescription) {
    super(source);
    if ((source['resourceType'] !== "VisionPrescription") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a VisionPrescription'; }
    if (source["created"] === undefined) { throw 'Missing required element created';}
    this.created = source.created;
    if (source["_created"] !== undefined) { this._created = source._created; }
    if (source["dateWritten"] === undefined) { throw 'Missing required element dateWritten';}
    this.dateWritten = source.dateWritten;
    if (source["_dateWritten"] !== undefined) { this._dateWritten = source._dateWritten; }
    if (source["encounter"] !== undefined) { this.encounter = source.encounter; }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier; }
    if (source["lensSpecification"] === undefined) { throw 'Missing required element lensSpecification';}
    this.lensSpecification = source.lensSpecification;
    if (source["patient"] === undefined) { throw 'Missing required element patient';}
    this.patient = source.patient;
    if (source["prescriber"] === undefined) { throw 'Missing required element prescriber';}
    this.prescriber = source.prescriber;
    if (source["status"] === undefined) { throw 'Missing required element status';}
    this.status = source.status;
    if (source["_status"] !== undefined) { this._status = source._status; }
  }
}
/**
 * Code Values for the VisionPrescription.status field
 */
export enum VisionPrescriptionStatusEnum {
  ACTIVE = "active",
  CANCELLED = "cancelled",
  DRAFT = "draft",
  ENTERED_IN_ERROR = "entered-in-error",
}
