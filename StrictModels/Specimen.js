"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpecimenStatusEnum = exports.Specimen = exports.SpecimenContainer = exports.SpecimenProcessing = exports.SpecimenCollection = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Details concerning the specimen collection.
 */
class SpecimenCollection extends fhirModels.BackboneElement {
    /**
     * Default constructor for SpecimenCollection from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["bodySite"] !== undefined) {
            this.bodySite = new fhirModels.CodeableConcept(source.bodySite);
        }
        if (source["collectedDateTime"] !== undefined) {
            this.collectedDateTime = source.collectedDateTime;
        }
        if (source["_collectedDateTime"] !== undefined) {
            this._collectedDateTime = new fhirModels.Element(source._collectedDateTime);
        }
        if (source["collectedPeriod"] !== undefined) {
            this.collectedPeriod = new fhirModels.Period(source.collectedPeriod);
        }
        if (source["collector"] !== undefined) {
            this.collector = new fhirModels.Reference(source.collector);
        }
        if (source["duration"] !== undefined) {
            this.duration = new fhirModels.Duration(source.duration);
        }
        if (source["fastingStatusCodeableConcept"] !== undefined) {
            this.fastingStatusCodeableConcept = new fhirModels.CodeableConcept(source.fastingStatusCodeableConcept);
        }
        if (source["fastingStatusDuration"] !== undefined) {
            this.fastingStatusDuration = new fhirModels.Duration(source.fastingStatusDuration);
        }
        if (source["method"] !== undefined) {
            this.method = new fhirModels.CodeableConcept(source.method);
        }
        if (source["quantity"] !== undefined) {
            this.quantity = new fhirModels.Quantity(source.quantity);
        }
    }
}
exports.SpecimenCollection = SpecimenCollection;
/**
 * Details concerning processing and processing steps for the specimen.
 */
class SpecimenProcessing extends fhirModels.BackboneElement {
    /**
     * Default constructor for SpecimenProcessing from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["additive"] !== undefined) {
            this.additive = source.additive.map((x) => new fhirModels.Reference(x));
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["procedure"] !== undefined) {
            this.procedure = new fhirModels.CodeableConcept(source.procedure);
        }
        if (source["timeDateTime"] !== undefined) {
            this.timeDateTime = source.timeDateTime;
        }
        if (source["_timeDateTime"] !== undefined) {
            this._timeDateTime = new fhirModels.Element(source._timeDateTime);
        }
        if (source["timePeriod"] !== undefined) {
            this.timePeriod = new fhirModels.Period(source.timePeriod);
        }
    }
}
exports.SpecimenProcessing = SpecimenProcessing;
/**
 * The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.
 */
class SpecimenContainer extends fhirModels.BackboneElement {
    /**
     * Default constructor for SpecimenContainer from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["additiveCodeableConcept"] !== undefined) {
            this.additiveCodeableConcept = new fhirModels.CodeableConcept(source.additiveCodeableConcept);
        }
        if (source["additiveReference"] !== undefined) {
            this.additiveReference = new fhirModels.Reference(source.additiveReference);
        }
        if (source["capacity"] !== undefined) {
            this.capacity = new fhirModels.Quantity(source.capacity);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["specimenQuantity"] !== undefined) {
            this.specimenQuantity = new fhirModels.Quantity(source.specimenQuantity);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.SpecimenContainer = SpecimenContainer;
/**
 * A sample to be used for analysis.
 */
class Specimen extends fhirModels.DomainResource {
    /**
     * Default constructor for Specimen from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "Specimen";
        if ((source['resourceType'] !== "Specimen") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Specimen';
        }
        if (source["accessionIdentifier"] !== undefined) {
            this.accessionIdentifier = new fhirModels.Identifier(source.accessionIdentifier);
        }
        if (source["collection"] !== undefined) {
            this.collection = new fhirModels.SpecimenCollection(source.collection);
        }
        if (source["condition"] !== undefined) {
            this.condition = source.condition.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["container"] !== undefined) {
            this.container = source.container.map((x) => new fhirModels.SpecimenContainer(x));
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["parent"] !== undefined) {
            this.parent = source.parent.map((x) => new fhirModels.Reference(x));
        }
        if (source["processing"] !== undefined) {
            this.processing = source.processing.map((x) => new fhirModels.SpecimenProcessing(x));
        }
        if (source["receivedTime"] !== undefined) {
            this.receivedTime = source.receivedTime;
        }
        if (source["_receivedTime"] !== undefined) {
            this._receivedTime = new fhirModels.Element(source._receivedTime);
        }
        if (source["request"] !== undefined) {
            this.request = source.request.map((x) => new fhirModels.Reference(x));
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["subject"] !== undefined) {
            this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.Specimen = Specimen;
/**
 * Code Values for the Specimen.status field
 */
var SpecimenStatusEnum;
(function (SpecimenStatusEnum) {
    SpecimenStatusEnum["AVAILABLE"] = "available";
    SpecimenStatusEnum["UNAVAILABLE"] = "unavailable";
    SpecimenStatusEnum["UNSATISFACTORY"] = "unsatisfactory";
    SpecimenStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(SpecimenStatusEnum = exports.SpecimenStatusEnum || (exports.SpecimenStatusEnum = {}));
//# sourceMappingURL=Specimen.js.map