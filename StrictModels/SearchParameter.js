var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * Used to define the parts of a composite search parameter.
 */
var SearchParameterComponent = /** @class */ (function (_super) {
    __extends(SearchParameterComponent, _super);
    /**
     * Default constructor for SearchParameterComponent from an object that MAY NOT contain all required elements.
     */
    function SearchParameterComponent(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.definition = source.definition;
        }
        if (source["_definition"] !== undefined) {
            _this._definition = new fhirModels.Element(source._definition);
        }
        {
            _this.expression = source.expression;
        }
        if (source["_expression"] !== undefined) {
            _this._expression = new fhirModels.Element(source._expression);
        }
        return _this;
    }
    return SearchParameterComponent;
}(fhirModels.BackboneElement));
export { SearchParameterComponent };
/**
 * A search parameter that defines a named search item that can be used to search/filter on a resource.
 */
var SearchParameter = /** @class */ (function (_super) {
    __extends(SearchParameter, _super);
    /**
     * Default constructor for SearchParameter from an object that MAY NOT contain all required elements.
     */
    function SearchParameter(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "SearchParameter";
        if ((source['resourceType'] !== "SearchParameter") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a SearchParameter';
        }
        {
            _this.base = source.base.map(function (x) { return (x); });
        }
        if (source["_base"] !== undefined) {
            _this._base = source._base.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["chain"] !== undefined) {
            _this.chain = source.chain.map(function (x) { return (x); });
        }
        if (source["_chain"] !== undefined) {
            _this._chain = source._chain.map(function (x) { return new fhirModels.Element(x); });
        }
        {
            _this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            _this._code = new fhirModels.Element(source._code);
        }
        if (source["comparator"] !== undefined) {
            _this.comparator = source.comparator.map(function (x) { return (x); });
        }
        if (source["_comparator"] !== undefined) {
            _this._comparator = source._comparator.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["component"] !== undefined) {
            _this.component = source.component.map(function (x) { return new fhirModels.SearchParameterComponent(x); });
        }
        if (source["contact"] !== undefined) {
            _this.contact = source.contact.map(function (x) { return new fhirModels.ContactDetail(x); });
        }
        if (source["date"] !== undefined) {
            _this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            _this._date = new fhirModels.Element(source._date);
        }
        if (source["derivedFrom"] !== undefined) {
            _this.derivedFrom = source.derivedFrom;
        }
        if (source["_derivedFrom"] !== undefined) {
            _this._derivedFrom = new fhirModels.Element(source._derivedFrom);
        }
        {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["experimental"] !== undefined) {
            _this.experimental = source.experimental;
        }
        if (source["_experimental"] !== undefined) {
            _this._experimental = new fhirModels.Element(source._experimental);
        }
        if (source["expression"] !== undefined) {
            _this.expression = source.expression;
        }
        if (source["_expression"] !== undefined) {
            _this._expression = new fhirModels.Element(source._expression);
        }
        if (source["jurisdiction"] !== undefined) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["modifier"] !== undefined) {
            _this.modifier = source.modifier.map(function (x) { return (x); });
        }
        if (source["_modifier"] !== undefined) {
            _this._modifier = source._modifier.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["multipleAnd"] !== undefined) {
            _this.multipleAnd = source.multipleAnd;
        }
        if (source["_multipleAnd"] !== undefined) {
            _this._multipleAnd = new fhirModels.Element(source._multipleAnd);
        }
        if (source["multipleOr"] !== undefined) {
            _this.multipleOr = source.multipleOr;
        }
        if (source["_multipleOr"] !== undefined) {
            _this._multipleOr = new fhirModels.Element(source._multipleOr);
        }
        {
            _this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            _this._name = new fhirModels.Element(source._name);
        }
        if (source["publisher"] !== undefined) {
            _this.publisher = source.publisher;
        }
        if (source["_publisher"] !== undefined) {
            _this._publisher = new fhirModels.Element(source._publisher);
        }
        if (source["purpose"] !== undefined) {
            _this.purpose = source.purpose;
        }
        if (source["_purpose"] !== undefined) {
            _this._purpose = new fhirModels.Element(source._purpose);
        }
        {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["target"] !== undefined) {
            _this.target = source.target.map(function (x) { return (x); });
        }
        if (source["_target"] !== undefined) {
            _this._target = source._target.map(function (x) { return new fhirModels.Element(x); });
        }
        {
            _this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            _this._type = new fhirModels.Element(source._type);
        }
        {
            _this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            _this._url = new fhirModels.Element(source._url);
        }
        if (source["useContext"] !== undefined) {
            _this.useContext = source.useContext.map(function (x) { return new fhirModels.UsageContext(x); });
        }
        if (source["version"] !== undefined) {
            _this.version = source.version;
        }
        if (source["_version"] !== undefined) {
            _this._version = new fhirModels.Element(source._version);
        }
        if (source["xpath"] !== undefined) {
            _this.xpath = source.xpath;
        }
        if (source["_xpath"] !== undefined) {
            _this._xpath = new fhirModels.Element(source._xpath);
        }
        if (source["xpathUsage"] !== undefined) {
            _this.xpathUsage = source.xpathUsage;
        }
        if (source["_xpathUsage"] !== undefined) {
            _this._xpathUsage = new fhirModels.Element(source._xpathUsage);
        }
        return _this;
    }
    return SearchParameter;
}(fhirModels.DomainResource));
export { SearchParameter };
/**
 * Code Values for the SearchParameter.comparator field
 */
export var SearchParameterComparatorEnum;
(function (SearchParameterComparatorEnum) {
    SearchParameterComparatorEnum["EQ"] = "eq";
    SearchParameterComparatorEnum["NE"] = "ne";
    SearchParameterComparatorEnum["GT"] = "gt";
    SearchParameterComparatorEnum["LT"] = "lt";
    SearchParameterComparatorEnum["GE"] = "ge";
    SearchParameterComparatorEnum["LE"] = "le";
    SearchParameterComparatorEnum["SA"] = "sa";
    SearchParameterComparatorEnum["EB"] = "eb";
    SearchParameterComparatorEnum["AP"] = "ap";
})(SearchParameterComparatorEnum || (SearchParameterComparatorEnum = {}));
/**
 * Code Values for the SearchParameter.modifier field
 */
export var SearchParameterModifierEnum;
(function (SearchParameterModifierEnum) {
    SearchParameterModifierEnum["MISSING"] = "missing";
    SearchParameterModifierEnum["EXACT"] = "exact";
    SearchParameterModifierEnum["CONTAINS"] = "contains";
    SearchParameterModifierEnum["NOT"] = "not";
    SearchParameterModifierEnum["TEXT"] = "text";
    SearchParameterModifierEnum["IN"] = "in";
    SearchParameterModifierEnum["NOT_IN"] = "not-in";
    SearchParameterModifierEnum["BELOW"] = "below";
    SearchParameterModifierEnum["ABOVE"] = "above";
    SearchParameterModifierEnum["TYPE"] = "type";
    SearchParameterModifierEnum["IDENTIFIER"] = "identifier";
    SearchParameterModifierEnum["OFTYPE"] = "ofType";
})(SearchParameterModifierEnum || (SearchParameterModifierEnum = {}));
/**
 * Code Values for the SearchParameter.status field
 */
export var SearchParameterStatusEnum;
(function (SearchParameterStatusEnum) {
    SearchParameterStatusEnum["DRAFT"] = "draft";
    SearchParameterStatusEnum["ACTIVE"] = "active";
    SearchParameterStatusEnum["RETIRED"] = "retired";
    SearchParameterStatusEnum["UNKNOWN"] = "unknown";
})(SearchParameterStatusEnum || (SearchParameterStatusEnum = {}));
/**
 * Code Values for the SearchParameter.type field
 */
export var SearchParameterTypeEnum;
(function (SearchParameterTypeEnum) {
    SearchParameterTypeEnum["NUMBER"] = "number";
    SearchParameterTypeEnum["DATE"] = "date";
    SearchParameterTypeEnum["STRING"] = "string";
    SearchParameterTypeEnum["TOKEN"] = "token";
    SearchParameterTypeEnum["REFERENCE"] = "reference";
    SearchParameterTypeEnum["COMPOSITE"] = "composite";
    SearchParameterTypeEnum["QUANTITY"] = "quantity";
    SearchParameterTypeEnum["URI"] = "uri";
    SearchParameterTypeEnum["SPECIAL"] = "special";
})(SearchParameterTypeEnum || (SearchParameterTypeEnum = {}));
/**
 * Code Values for the SearchParameter.xpathUsage field
 */
export var SearchParameterXpathUsageEnum;
(function (SearchParameterXpathUsageEnum) {
    SearchParameterXpathUsageEnum["NORMAL"] = "normal";
    SearchParameterXpathUsageEnum["PHONETIC"] = "phonetic";
    SearchParameterXpathUsageEnum["NEARBY"] = "nearby";
    SearchParameterXpathUsageEnum["DISTANCE"] = "distance";
    SearchParameterXpathUsageEnum["OTHER"] = "other";
})(SearchParameterXpathUsageEnum || (SearchParameterXpathUsageEnum = {}));
