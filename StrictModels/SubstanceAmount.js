var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * Reference range of possible or expected values.
 */
var SubstanceAmountReferenceRange = /** @class */ (function (_super) {
    __extends(SubstanceAmountReferenceRange, _super);
    /**
     * Default constructor for SubstanceAmountReferenceRange from an object that MAY NOT contain all required elements.
     */
    function SubstanceAmountReferenceRange(source) {
        var _this = _super.call(this, source) || this;
        if (source["highLimit"] !== undefined) {
            _this.highLimit = new fhirModels.Quantity(source.highLimit);
        }
        if (source["lowLimit"] !== undefined) {
            _this.lowLimit = new fhirModels.Quantity(source.lowLimit);
        }
        return _this;
    }
    return SubstanceAmountReferenceRange;
}(fhirModels.Element));
export { SubstanceAmountReferenceRange };
/**
 * Chemical substances are a single substance type whose primary defining element is the molecular structure. Chemical substances shall be defined on the basis of their complete covalent molecular structure; the presence of a salt (counter-ion) and/or solvates (water, alcohols) is also captured. Purity, grade, physical form or particle size are not taken into account in the definition of a chemical substance or in the assignment of a Substance ID.
 */
var SubstanceAmount = /** @class */ (function (_super) {
    __extends(SubstanceAmount, _super);
    /**
     * Default constructor for SubstanceAmount from an object that MAY NOT contain all required elements.
     */
    function SubstanceAmount(source) {
        var _this = _super.call(this, source) || this;
        if (source["amountQuantity"] !== undefined) {
            _this.amountQuantity = new fhirModels.Quantity(source.amountQuantity);
        }
        if (source["amountRange"] !== undefined) {
            _this.amountRange = new fhirModels.Range(source.amountRange);
        }
        if (source["amountString"] !== undefined) {
            _this.amountString = source.amountString;
        }
        if (source["_amountString"] !== undefined) {
            _this._amountString = new fhirModels.Element(source._amountString);
        }
        if (source["amountText"] !== undefined) {
            _this.amountText = source.amountText;
        }
        if (source["_amountText"] !== undefined) {
            _this._amountText = new fhirModels.Element(source._amountText);
        }
        if (source["amountType"] !== undefined) {
            _this.amountType = new fhirModels.CodeableConcept(source.amountType);
        }
        if (source["referenceRange"] !== undefined) {
            _this.referenceRange = new fhirModels.SubstanceAmountReferenceRange(source.referenceRange);
        }
        return _this;
    }
    return SubstanceAmount;
}(fhirModels.BackboneElement));
export { SubstanceAmount };
