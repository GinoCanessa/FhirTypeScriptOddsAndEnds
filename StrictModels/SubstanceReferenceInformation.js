var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * Todo.
 */
var SubstanceReferenceInformationGene = /** @class */ (function (_super) {
    __extends(SubstanceReferenceInformationGene, _super);
    /**
     * Default constructor for SubstanceReferenceInformationGene from an object that MAY NOT contain all required elements.
     */
    function SubstanceReferenceInformationGene(source) {
        var _this = _super.call(this, source) || this;
        if (source["gene"] !== undefined) {
            _this.gene = new fhirModels.CodeableConcept(source.gene);
        }
        if (source["geneSequenceOrigin"] !== undefined) {
            _this.geneSequenceOrigin = new fhirModels.CodeableConcept(source.geneSequenceOrigin);
        }
        if (source["source"] !== undefined) {
            _this.source = source.source.map(function (x) { return new fhirModels.Reference(x); });
        }
        return _this;
    }
    return SubstanceReferenceInformationGene;
}(fhirModels.BackboneElement));
export { SubstanceReferenceInformationGene };
/**
 * Todo.
 */
var SubstanceReferenceInformationGeneElement = /** @class */ (function (_super) {
    __extends(SubstanceReferenceInformationGeneElement, _super);
    /**
     * Default constructor for SubstanceReferenceInformationGeneElement from an object that MAY NOT contain all required elements.
     */
    function SubstanceReferenceInformationGeneElement(source) {
        var _this = _super.call(this, source) || this;
        if (source["element"] !== undefined) {
            _this.element = new fhirModels.Identifier(source.element);
        }
        if (source["source"] !== undefined) {
            _this.source = source.source.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    return SubstanceReferenceInformationGeneElement;
}(fhirModels.BackboneElement));
export { SubstanceReferenceInformationGeneElement };
/**
 * Todo.
 */
var SubstanceReferenceInformationClassification = /** @class */ (function (_super) {
    __extends(SubstanceReferenceInformationClassification, _super);
    /**
     * Default constructor for SubstanceReferenceInformationClassification from an object that MAY NOT contain all required elements.
     */
    function SubstanceReferenceInformationClassification(source) {
        var _this = _super.call(this, source) || this;
        if (source["classification"] !== undefined) {
            _this.classification = new fhirModels.CodeableConcept(source.classification);
        }
        if (source["domain"] !== undefined) {
            _this.domain = new fhirModels.CodeableConcept(source.domain);
        }
        if (source["source"] !== undefined) {
            _this.source = source.source.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["subtype"] !== undefined) {
            _this.subtype = source.subtype.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        return _this;
    }
    return SubstanceReferenceInformationClassification;
}(fhirModels.BackboneElement));
export { SubstanceReferenceInformationClassification };
/**
 * Todo.
 */
var SubstanceReferenceInformationTarget = /** @class */ (function (_super) {
    __extends(SubstanceReferenceInformationTarget, _super);
    /**
     * Default constructor for SubstanceReferenceInformationTarget from an object that MAY NOT contain all required elements.
     */
    function SubstanceReferenceInformationTarget(source) {
        var _this = _super.call(this, source) || this;
        if (source["amountQuantity"] !== undefined) {
            _this.amountQuantity = new fhirModels.Quantity(source.amountQuantity);
        }
        if (source["amountRange"] !== undefined) {
            _this.amountRange = new fhirModels.Range(source.amountRange);
        }
        if (source["amountString"] !== undefined) {
            _this.amountString = source.amountString;
        }
        if (source["_amountString"] !== undefined) {
            _this._amountString = new fhirModels.Element(source._amountString);
        }
        if (source["amountType"] !== undefined) {
            _this.amountType = new fhirModels.CodeableConcept(source.amountType);
        }
        if (source["interaction"] !== undefined) {
            _this.interaction = new fhirModels.CodeableConcept(source.interaction);
        }
        if (source["organism"] !== undefined) {
            _this.organism = new fhirModels.CodeableConcept(source.organism);
        }
        if (source["organismType"] !== undefined) {
            _this.organismType = new fhirModels.CodeableConcept(source.organismType);
        }
        if (source["source"] !== undefined) {
            _this.source = source.source.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["target"] !== undefined) {
            _this.target = new fhirModels.Identifier(source.target);
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    return SubstanceReferenceInformationTarget;
}(fhirModels.BackboneElement));
export { SubstanceReferenceInformationTarget };
/**
 * Todo.
 */
var SubstanceReferenceInformation = /** @class */ (function (_super) {
    __extends(SubstanceReferenceInformation, _super);
    /**
     * Default constructor for SubstanceReferenceInformation from an object that MAY NOT contain all required elements.
     */
    function SubstanceReferenceInformation(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "SubstanceReferenceInformation";
        if ((source['resourceType'] !== "SubstanceReferenceInformation") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a SubstanceReferenceInformation';
        }
        if (source["classification"] !== undefined) {
            _this.classification = source.classification.map(function (x) { return new fhirModels.SubstanceReferenceInformationClassification(x); });
        }
        if (source["comment"] !== undefined) {
            _this.comment = source.comment;
        }
        if (source["_comment"] !== undefined) {
            _this._comment = new fhirModels.Element(source._comment);
        }
        if (source["gene"] !== undefined) {
            _this.gene = source.gene.map(function (x) { return new fhirModels.SubstanceReferenceInformationGene(x); });
        }
        if (source["geneElement"] !== undefined) {
            _this.geneElement = source.geneElement.map(function (x) { return new fhirModels.SubstanceReferenceInformationGeneElement(x); });
        }
        if (source["target"] !== undefined) {
            _this.target = source.target.map(function (x) { return new fhirModels.SubstanceReferenceInformationTarget(x); });
        }
        return _this;
    }
    return SubstanceReferenceInformation;
}(fhirModels.DomainResource));
export { SubstanceReferenceInformation };
