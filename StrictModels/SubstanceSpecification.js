"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubstanceSpecification = exports.SubstanceSpecificationRelationship = exports.SubstanceSpecificationName = exports.SubstanceSpecificationNameOfficial = exports.SubstanceSpecificationCode = exports.SubstanceSpecificationStructure = exports.SubstanceSpecificationStructureRepresentation = exports.SubstanceSpecificationStructureIsotope = exports.SubstanceSpecificationStructureIsotopeMolecularWeight = exports.SubstanceSpecificationProperty = exports.SubstanceSpecificationMoiety = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Moiety, for structural modifications.
 */
class SubstanceSpecificationMoiety extends fhirModels.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationMoiety from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["amountQuantity"] !== undefined) {
            this.amountQuantity = new fhirModels.Quantity(source.amountQuantity);
        }
        if (source["amountString"] !== undefined) {
            this.amountString = source.amountString;
        }
        if (source["_amountString"] !== undefined) {
            this._amountString = new fhirModels.Element(source._amountString);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = new fhirModels.Identifier(source.identifier);
        }
        if (source["molecularFormula"] !== undefined) {
            this.molecularFormula = source.molecularFormula;
        }
        if (source["_molecularFormula"] !== undefined) {
            this._molecularFormula = new fhirModels.Element(source._molecularFormula);
        }
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["opticalActivity"] !== undefined) {
            this.opticalActivity = new fhirModels.CodeableConcept(source.opticalActivity);
        }
        if (source["role"] !== undefined) {
            this.role = new fhirModels.CodeableConcept(source.role);
        }
        if (source["stereochemistry"] !== undefined) {
            this.stereochemistry = new fhirModels.CodeableConcept(source.stereochemistry);
        }
    }
}
exports.SubstanceSpecificationMoiety = SubstanceSpecificationMoiety;
/**
 * General specifications for this substance, including how it is related to other substances.
 */
class SubstanceSpecificationProperty extends fhirModels.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationProperty from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["amountQuantity"] !== undefined) {
            this.amountQuantity = new fhirModels.Quantity(source.amountQuantity);
        }
        if (source["amountString"] !== undefined) {
            this.amountString = source.amountString;
        }
        if (source["_amountString"] !== undefined) {
            this._amountString = new fhirModels.Element(source._amountString);
        }
        if (source["category"] !== undefined) {
            this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["definingSubstanceReference"] !== undefined) {
            this.definingSubstanceReference = new fhirModels.Reference(source.definingSubstanceReference);
        }
        if (source["definingSubstanceCodeableConcept"] !== undefined) {
            this.definingSubstanceCodeableConcept = new fhirModels.CodeableConcept(source.definingSubstanceCodeableConcept);
        }
        if (source["parameters"] !== undefined) {
            this.parameters = source.parameters;
        }
        if (source["_parameters"] !== undefined) {
            this._parameters = new fhirModels.Element(source._parameters);
        }
    }
}
exports.SubstanceSpecificationProperty = SubstanceSpecificationProperty;
/**
 * The molecular weight or weight range (for proteins, polymers or nucleic acids).
 */
class SubstanceSpecificationStructureIsotopeMolecularWeight extends fhirModels.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationStructureIsotopeMolecularWeight from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["amount"] !== undefined) {
            this.amount = new fhirModels.Quantity(source.amount);
        }
        if (source["method"] !== undefined) {
            this.method = new fhirModels.CodeableConcept(source.method);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.SubstanceSpecificationStructureIsotopeMolecularWeight = SubstanceSpecificationStructureIsotopeMolecularWeight;
/**
 * Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.
 */
class SubstanceSpecificationStructureIsotope extends fhirModels.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationStructureIsotope from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["halfLife"] !== undefined) {
            this.halfLife = new fhirModels.Quantity(source.halfLife);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = new fhirModels.Identifier(source.identifier);
        }
        if (source["molecularWeight"] !== undefined) {
            this.molecularWeight = new fhirModels.SubstanceSpecificationStructureIsotopeMolecularWeight(source.molecularWeight);
        }
        if (source["name"] !== undefined) {
            this.name = new fhirModels.CodeableConcept(source.name);
        }
        if (source["substitution"] !== undefined) {
            this.substitution = new fhirModels.CodeableConcept(source.substitution);
        }
    }
}
exports.SubstanceSpecificationStructureIsotope = SubstanceSpecificationStructureIsotope;
/**
 * Molecular structural representation.
 */
class SubstanceSpecificationStructureRepresentation extends fhirModels.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationStructureRepresentation from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["attachment"] !== undefined) {
            this.attachment = new fhirModels.Attachment(source.attachment);
        }
        if (source["representation"] !== undefined) {
            this.representation = source.representation;
        }
        if (source["_representation"] !== undefined) {
            this._representation = new fhirModels.Element(source._representation);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.SubstanceSpecificationStructureRepresentation = SubstanceSpecificationStructureRepresentation;
/**
 * Structural information.
 */
class SubstanceSpecificationStructure extends fhirModels.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationStructure from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["isotope"] !== undefined) {
            this.isotope = source.isotope.map((x) => new fhirModels.SubstanceSpecificationStructureIsotope(x));
        }
        if (source["molecularFormula"] !== undefined) {
            this.molecularFormula = source.molecularFormula;
        }
        if (source["_molecularFormula"] !== undefined) {
            this._molecularFormula = new fhirModels.Element(source._molecularFormula);
        }
        if (source["molecularFormulaByMoiety"] !== undefined) {
            this.molecularFormulaByMoiety = source.molecularFormulaByMoiety;
        }
        if (source["_molecularFormulaByMoiety"] !== undefined) {
            this._molecularFormulaByMoiety = new fhirModels.Element(source._molecularFormulaByMoiety);
        }
        if (source["molecularWeight"] !== undefined) {
            this.molecularWeight = new fhirModels.SubstanceSpecificationStructureIsotopeMolecularWeight(source.molecularWeight);
        }
        if (source["opticalActivity"] !== undefined) {
            this.opticalActivity = new fhirModels.CodeableConcept(source.opticalActivity);
        }
        if (source["representation"] !== undefined) {
            this.representation = source.representation.map((x) => new fhirModels.SubstanceSpecificationStructureRepresentation(x));
        }
        if (source["source"] !== undefined) {
            this.source = source.source.map((x) => new fhirModels.Reference(x));
        }
        if (source["stereochemistry"] !== undefined) {
            this.stereochemistry = new fhirModels.CodeableConcept(source.stereochemistry);
        }
    }
}
exports.SubstanceSpecificationStructure = SubstanceSpecificationStructure;
/**
 * Codes associated with the substance.
 */
class SubstanceSpecificationCode extends fhirModels.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationCode from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["comment"] !== undefined) {
            this.comment = source.comment;
        }
        if (source["_comment"] !== undefined) {
            this._comment = new fhirModels.Element(source._comment);
        }
        if (source["source"] !== undefined) {
            this.source = source.source.map((x) => new fhirModels.Reference(x));
        }
        if (source["status"] !== undefined) {
            this.status = new fhirModels.CodeableConcept(source.status);
        }
        if (source["statusDate"] !== undefined) {
            this.statusDate = source.statusDate;
        }
        if (source["_statusDate"] !== undefined) {
            this._statusDate = new fhirModels.Element(source._statusDate);
        }
    }
}
exports.SubstanceSpecificationCode = SubstanceSpecificationCode;
/**
 * Details of the official nature of this name.
 */
class SubstanceSpecificationNameOfficial extends fhirModels.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationNameOfficial from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["authority"] !== undefined) {
            this.authority = new fhirModels.CodeableConcept(source.authority);
        }
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["status"] !== undefined) {
            this.status = new fhirModels.CodeableConcept(source.status);
        }
    }
}
exports.SubstanceSpecificationNameOfficial = SubstanceSpecificationNameOfficial;
/**
 * Names applicable to this substance.
 */
class SubstanceSpecificationName extends fhirModels.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationName from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["domain"] !== undefined) {
            this.domain = source.domain.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["jurisdiction"] !== undefined) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["language"] !== undefined) {
            this.language = source.language.map((x) => new fhirModels.CodeableConcept(x));
        }
        {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["official"] !== undefined) {
            this.official = source.official.map((x) => new fhirModels.SubstanceSpecificationNameOfficial(x));
        }
        if (source["preferred"] !== undefined) {
            this.preferred = source.preferred;
        }
        if (source["_preferred"] !== undefined) {
            this._preferred = new fhirModels.Element(source._preferred);
        }
        if (source["source"] !== undefined) {
            this.source = source.source.map((x) => new fhirModels.Reference(x));
        }
        if (source["status"] !== undefined) {
            this.status = new fhirModels.CodeableConcept(source.status);
        }
        if (source["synonym"] !== undefined) {
            this.synonym = source.synonym.map((x) => new fhirModels.SubstanceSpecificationName(x));
        }
        if (source["translation"] !== undefined) {
            this.translation = source.translation.map((x) => new fhirModels.SubstanceSpecificationName(x));
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.SubstanceSpecificationName = SubstanceSpecificationName;
/**
 * A link between this substance and another, with details of the relationship.
 */
class SubstanceSpecificationRelationship extends fhirModels.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationRelationship from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["amountQuantity"] !== undefined) {
            this.amountQuantity = new fhirModels.Quantity(source.amountQuantity);
        }
        if (source["amountRange"] !== undefined) {
            this.amountRange = new fhirModels.Range(source.amountRange);
        }
        if (source["amountRatio"] !== undefined) {
            this.amountRatio = new fhirModels.Ratio(source.amountRatio);
        }
        if (source["amountString"] !== undefined) {
            this.amountString = source.amountString;
        }
        if (source["_amountString"] !== undefined) {
            this._amountString = new fhirModels.Element(source._amountString);
        }
        if (source["amountRatioLowLimit"] !== undefined) {
            this.amountRatioLowLimit = new fhirModels.Ratio(source.amountRatioLowLimit);
        }
        if (source["amountType"] !== undefined) {
            this.amountType = new fhirModels.CodeableConcept(source.amountType);
        }
        if (source["isDefining"] !== undefined) {
            this.isDefining = source.isDefining;
        }
        if (source["_isDefining"] !== undefined) {
            this._isDefining = new fhirModels.Element(source._isDefining);
        }
        if (source["relationship"] !== undefined) {
            this.relationship = new fhirModels.CodeableConcept(source.relationship);
        }
        if (source["source"] !== undefined) {
            this.source = source.source.map((x) => new fhirModels.Reference(x));
        }
        if (source["substanceReference"] !== undefined) {
            this.substanceReference = new fhirModels.Reference(source.substanceReference);
        }
        if (source["substanceCodeableConcept"] !== undefined) {
            this.substanceCodeableConcept = new fhirModels.CodeableConcept(source.substanceCodeableConcept);
        }
    }
}
exports.SubstanceSpecificationRelationship = SubstanceSpecificationRelationship;
/**
 * The detailed description of a substance, typically at a level beyond what is used for prescribing.
 */
class SubstanceSpecification extends fhirModels.DomainResource {
    /**
     * Default constructor for SubstanceSpecification from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "SubstanceSpecification";
        if ((source['resourceType'] !== "SubstanceSpecification") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a SubstanceSpecification';
        }
        if (source["code"] !== undefined) {
            this.code = source.code.map((x) => new fhirModels.SubstanceSpecificationCode(x));
        }
        if (source["comment"] !== undefined) {
            this.comment = source.comment;
        }
        if (source["_comment"] !== undefined) {
            this._comment = new fhirModels.Element(source._comment);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["domain"] !== undefined) {
            this.domain = new fhirModels.CodeableConcept(source.domain);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = new fhirModels.Identifier(source.identifier);
        }
        if (source["moiety"] !== undefined) {
            this.moiety = source.moiety.map((x) => new fhirModels.SubstanceSpecificationMoiety(x));
        }
        if (source["molecularWeight"] !== undefined) {
            this.molecularWeight = source.molecularWeight.map((x) => new fhirModels.SubstanceSpecificationStructureIsotopeMolecularWeight(x));
        }
        if (source["name"] !== undefined) {
            this.name = source.name.map((x) => new fhirModels.SubstanceSpecificationName(x));
        }
        if (source["nucleicAcid"] !== undefined) {
            this.nucleicAcid = new fhirModels.Reference(source.nucleicAcid);
        }
        if (source["polymer"] !== undefined) {
            this.polymer = new fhirModels.Reference(source.polymer);
        }
        if (source["property"] !== undefined) {
            this.property = source.property.map((x) => new fhirModels.SubstanceSpecificationProperty(x));
        }
        if (source["protein"] !== undefined) {
            this.protein = new fhirModels.Reference(source.protein);
        }
        if (source["referenceInformation"] !== undefined) {
            this.referenceInformation = new fhirModels.Reference(source.referenceInformation);
        }
        if (source["relationship"] !== undefined) {
            this.relationship = source.relationship.map((x) => new fhirModels.SubstanceSpecificationRelationship(x));
        }
        if (source["source"] !== undefined) {
            this.source = source.source.map((x) => new fhirModels.Reference(x));
        }
        if (source["sourceMaterial"] !== undefined) {
            this.sourceMaterial = new fhirModels.Reference(source.sourceMaterial);
        }
        if (source["status"] !== undefined) {
            this.status = new fhirModels.CodeableConcept(source.status);
        }
        if (source["structure"] !== undefined) {
            this.structure = new fhirModels.SubstanceSpecificationStructure(source.structure);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.SubstanceSpecification = SubstanceSpecification;
//# sourceMappingURL=SubstanceSpecification.js.map