var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * A relationship of two Quantity values - expressed as a numerator and a denominator.
 */
var Ratio = /** @class */ (function (_super) {
    __extends(Ratio, _super);
    /**
     * Default constructor for Ratio from an object that MAY NOT contain all required elements.
     */
    function Ratio(source) {
        var _this = _super.call(this, source) || this;
        if (source["denominator"] !== undefined) {
            _this.denominator = new fhirModels.Quantity(source.denominator);
        }
        if (source["numerator"] !== undefined) {
            _this.numerator = new fhirModels.Quantity(source.numerator);
        }
        return _this;
    }
    return Ratio;
}(fhirModels.Element));
export { Ratio };
