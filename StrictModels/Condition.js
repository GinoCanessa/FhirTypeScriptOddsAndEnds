var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * Clinical stage or grade of a condition. May include formal severity assessments.
 */
var ConditionStage = /** @class */ (function (_super) {
    __extends(ConditionStage, _super);
    /**
     * Default constructor for ConditionStage from an object that MAY NOT contain all required elements.
     */
    function ConditionStage(source) {
        var _this = _super.call(this, source) || this;
        if (source["assessment"] !== undefined) {
            _this.assessment = source.assessment.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["summary"] !== undefined) {
            _this.summary = new fhirModels.CodeableConcept(source.summary);
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    return ConditionStage;
}(fhirModels.BackboneElement));
export { ConditionStage };
/**
 * The evidence may be a simple list of coded symptoms/manifestations, or references to observations or formal assessments, or both.
 */
var ConditionEvidence = /** @class */ (function (_super) {
    __extends(ConditionEvidence, _super);
    /**
     * Default constructor for ConditionEvidence from an object that MAY NOT contain all required elements.
     */
    function ConditionEvidence(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = source.code.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["detail"] !== undefined) {
            _this.detail = source.detail.map(function (x) { return new fhirModels.Reference(x); });
        }
        return _this;
    }
    return ConditionEvidence;
}(fhirModels.BackboneElement));
export { ConditionEvidence };
/**
 * A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.
 */
var Condition = /** @class */ (function (_super) {
    __extends(Condition, _super);
    /**
     * Default constructor for Condition from an object that MAY NOT contain all required elements.
     */
    function Condition(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "Condition";
        if ((source['resourceType'] !== "Condition") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Condition';
        }
        if (source["abatementDateTime"] !== undefined) {
            _this.abatementDateTime = source.abatementDateTime;
        }
        if (source["_abatementDateTime"] !== undefined) {
            _this._abatementDateTime = new fhirModels.Element(source._abatementDateTime);
        }
        if (source["abatementAge"] !== undefined) {
            _this.abatementAge = new fhirModels.Age(source.abatementAge);
        }
        if (source["abatementPeriod"] !== undefined) {
            _this.abatementPeriod = new fhirModels.Period(source.abatementPeriod);
        }
        if (source["abatementRange"] !== undefined) {
            _this.abatementRange = new fhirModels.Range(source.abatementRange);
        }
        if (source["abatementString"] !== undefined) {
            _this.abatementString = source.abatementString;
        }
        if (source["_abatementString"] !== undefined) {
            _this._abatementString = new fhirModels.Element(source._abatementString);
        }
        if (source["asserter"] !== undefined) {
            _this.asserter = new fhirModels.Reference(source.asserter);
        }
        if (source["bodySite"] !== undefined) {
            _this.bodySite = source.bodySite.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["category"] !== undefined) {
            _this.category = source.category.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["clinicalStatus"] !== undefined) {
            _this.clinicalStatus = new fhirModels.CodeableConcept(source.clinicalStatus);
        }
        if (source["code"] !== undefined) {
            _this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["encounter"] !== undefined) {
            _this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["evidence"] !== undefined) {
            _this.evidence = source.evidence.map(function (x) { return new fhirModels.ConditionEvidence(x); });
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["note"] !== undefined) {
            _this.note = source.note.map(function (x) { return new fhirModels.Annotation(x); });
        }
        if (source["onsetDateTime"] !== undefined) {
            _this.onsetDateTime = source.onsetDateTime;
        }
        if (source["_onsetDateTime"] !== undefined) {
            _this._onsetDateTime = new fhirModels.Element(source._onsetDateTime);
        }
        if (source["onsetAge"] !== undefined) {
            _this.onsetAge = new fhirModels.Age(source.onsetAge);
        }
        if (source["onsetPeriod"] !== undefined) {
            _this.onsetPeriod = new fhirModels.Period(source.onsetPeriod);
        }
        if (source["onsetRange"] !== undefined) {
            _this.onsetRange = new fhirModels.Range(source.onsetRange);
        }
        if (source["onsetString"] !== undefined) {
            _this.onsetString = source.onsetString;
        }
        if (source["_onsetString"] !== undefined) {
            _this._onsetString = new fhirModels.Element(source._onsetString);
        }
        if (source["recordedDate"] !== undefined) {
            _this.recordedDate = source.recordedDate;
        }
        if (source["_recordedDate"] !== undefined) {
            _this._recordedDate = new fhirModels.Element(source._recordedDate);
        }
        if (source["recorder"] !== undefined) {
            _this.recorder = new fhirModels.Reference(source.recorder);
        }
        if (source["severity"] !== undefined) {
            _this.severity = new fhirModels.CodeableConcept(source.severity);
        }
        if (source["stage"] !== undefined) {
            _this.stage = source.stage.map(function (x) { return new fhirModels.ConditionStage(x); });
        }
        {
            _this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["verificationStatus"] !== undefined) {
            _this.verificationStatus = new fhirModels.CodeableConcept(source.verificationStatus);
        }
        return _this;
    }
    return Condition;
}(fhirModels.DomainResource));
export { Condition };
