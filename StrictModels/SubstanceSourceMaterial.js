var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * Many complex materials are fractions of parts of plants, animals, or minerals. Fraction elements are often necessary to define both Substances and Specified Group 1 Substances. For substances derived from Plants, fraction information will be captured at the Substance information level ( . Oils, Juices and Exudates). Additional information for Extracts, such as extraction solvent composition, will be captured at the Specified Substance Group 1 information level. For plasma-derived products fraction information will be captured at the Substance and the Specified Substance Group 1 levels.
 */
var SubstanceSourceMaterialFractionDescription = /** @class */ (function (_super) {
    __extends(SubstanceSourceMaterialFractionDescription, _super);
    /**
     * Default constructor for SubstanceSourceMaterialFractionDescription from an object that MAY NOT contain all required elements.
     */
    function SubstanceSourceMaterialFractionDescription(source) {
        var _this = _super.call(this, source) || this;
        if (source["fraction"] !== undefined) {
            _this.fraction = source.fraction;
        }
        if (source["_fraction"] !== undefined) {
            _this._fraction = new fhirModels.Element(source._fraction);
        }
        if (source["materialType"] !== undefined) {
            _this.materialType = new fhirModels.CodeableConcept(source.materialType);
        }
        return _this;
    }
    return SubstanceSourceMaterialFractionDescription;
}(fhirModels.BackboneElement));
export { SubstanceSourceMaterialFractionDescription };
/**
 * 4.9.13.6.1 Author type (Conditional).
 */
var SubstanceSourceMaterialOrganismAuthor = /** @class */ (function (_super) {
    __extends(SubstanceSourceMaterialOrganismAuthor, _super);
    /**
     * Default constructor for SubstanceSourceMaterialOrganismAuthor from an object that MAY NOT contain all required elements.
     */
    function SubstanceSourceMaterialOrganismAuthor(source) {
        var _this = _super.call(this, source) || this;
        if (source["authorDescription"] !== undefined) {
            _this.authorDescription = source.authorDescription;
        }
        if (source["_authorDescription"] !== undefined) {
            _this._authorDescription = new fhirModels.Element(source._authorDescription);
        }
        if (source["authorType"] !== undefined) {
            _this.authorType = new fhirModels.CodeableConcept(source.authorType);
        }
        return _this;
    }
    return SubstanceSourceMaterialOrganismAuthor;
}(fhirModels.BackboneElement));
export { SubstanceSourceMaterialOrganismAuthor };
/**
 * 4.9.13.8.1 Hybrid species maternal organism ID (Optional).
 */
var SubstanceSourceMaterialOrganismHybrid = /** @class */ (function (_super) {
    __extends(SubstanceSourceMaterialOrganismHybrid, _super);
    /**
     * Default constructor for SubstanceSourceMaterialOrganismHybrid from an object that MAY NOT contain all required elements.
     */
    function SubstanceSourceMaterialOrganismHybrid(source) {
        var _this = _super.call(this, source) || this;
        if (source["hybridType"] !== undefined) {
            _this.hybridType = new fhirModels.CodeableConcept(source.hybridType);
        }
        if (source["maternalOrganismId"] !== undefined) {
            _this.maternalOrganismId = source.maternalOrganismId;
        }
        if (source["_maternalOrganismId"] !== undefined) {
            _this._maternalOrganismId = new fhirModels.Element(source._maternalOrganismId);
        }
        if (source["maternalOrganismName"] !== undefined) {
            _this.maternalOrganismName = source.maternalOrganismName;
        }
        if (source["_maternalOrganismName"] !== undefined) {
            _this._maternalOrganismName = new fhirModels.Element(source._maternalOrganismName);
        }
        if (source["paternalOrganismId"] !== undefined) {
            _this.paternalOrganismId = source.paternalOrganismId;
        }
        if (source["_paternalOrganismId"] !== undefined) {
            _this._paternalOrganismId = new fhirModels.Element(source._paternalOrganismId);
        }
        if (source["paternalOrganismName"] !== undefined) {
            _this.paternalOrganismName = source.paternalOrganismName;
        }
        if (source["_paternalOrganismName"] !== undefined) {
            _this._paternalOrganismName = new fhirModels.Element(source._paternalOrganismName);
        }
        return _this;
    }
    return SubstanceSourceMaterialOrganismHybrid;
}(fhirModels.BackboneElement));
export { SubstanceSourceMaterialOrganismHybrid };
/**
 * 4.9.13.7.1 Kingdom (Conditional).
 */
var SubstanceSourceMaterialOrganismOrganismGeneral = /** @class */ (function (_super) {
    __extends(SubstanceSourceMaterialOrganismOrganismGeneral, _super);
    /**
     * Default constructor for SubstanceSourceMaterialOrganismOrganismGeneral from an object that MAY NOT contain all required elements.
     */
    function SubstanceSourceMaterialOrganismOrganismGeneral(source) {
        var _this = _super.call(this, source) || this;
        if (source["class"] !== undefined) {
            _this["class"] = new fhirModels.CodeableConcept(source["class"]);
        }
        if (source["kingdom"] !== undefined) {
            _this.kingdom = new fhirModels.CodeableConcept(source.kingdom);
        }
        if (source["order"] !== undefined) {
            _this.order = new fhirModels.CodeableConcept(source.order);
        }
        if (source["phylum"] !== undefined) {
            _this.phylum = new fhirModels.CodeableConcept(source.phylum);
        }
        return _this;
    }
    return SubstanceSourceMaterialOrganismOrganismGeneral;
}(fhirModels.BackboneElement));
export { SubstanceSourceMaterialOrganismOrganismGeneral };
/**
 * This subclause describes the organism which the substance is derived from. For vaccines, the parent organism shall be specified based on these subclause elements. As an example, full taxonomy will be described for the Substance Name: ., Leaf.
 */
var SubstanceSourceMaterialOrganism = /** @class */ (function (_super) {
    __extends(SubstanceSourceMaterialOrganism, _super);
    /**
     * Default constructor for SubstanceSourceMaterialOrganism from an object that MAY NOT contain all required elements.
     */
    function SubstanceSourceMaterialOrganism(source) {
        var _this = _super.call(this, source) || this;
        if (source["author"] !== undefined) {
            _this.author = source.author.map(function (x) { return new fhirModels.SubstanceSourceMaterialOrganismAuthor(x); });
        }
        if (source["family"] !== undefined) {
            _this.family = new fhirModels.CodeableConcept(source.family);
        }
        if (source["genus"] !== undefined) {
            _this.genus = new fhirModels.CodeableConcept(source.genus);
        }
        if (source["hybrid"] !== undefined) {
            _this.hybrid = new fhirModels.SubstanceSourceMaterialOrganismHybrid(source.hybrid);
        }
        if (source["intraspecificDescription"] !== undefined) {
            _this.intraspecificDescription = source.intraspecificDescription;
        }
        if (source["_intraspecificDescription"] !== undefined) {
            _this._intraspecificDescription = new fhirModels.Element(source._intraspecificDescription);
        }
        if (source["intraspecificType"] !== undefined) {
            _this.intraspecificType = new fhirModels.CodeableConcept(source.intraspecificType);
        }
        if (source["organismGeneral"] !== undefined) {
            _this.organismGeneral = new fhirModels.SubstanceSourceMaterialOrganismOrganismGeneral(source.organismGeneral);
        }
        if (source["species"] !== undefined) {
            _this.species = new fhirModels.CodeableConcept(source.species);
        }
        return _this;
    }
    return SubstanceSourceMaterialOrganism;
}(fhirModels.BackboneElement));
export { SubstanceSourceMaterialOrganism };
/**
 * To do.
 */
var SubstanceSourceMaterialPartDescription = /** @class */ (function (_super) {
    __extends(SubstanceSourceMaterialPartDescription, _super);
    /**
     * Default constructor for SubstanceSourceMaterialPartDescription from an object that MAY NOT contain all required elements.
     */
    function SubstanceSourceMaterialPartDescription(source) {
        var _this = _super.call(this, source) || this;
        if (source["part"] !== undefined) {
            _this.part = new fhirModels.CodeableConcept(source.part);
        }
        if (source["partLocation"] !== undefined) {
            _this.partLocation = new fhirModels.CodeableConcept(source.partLocation);
        }
        return _this;
    }
    return SubstanceSourceMaterialPartDescription;
}(fhirModels.BackboneElement));
export { SubstanceSourceMaterialPartDescription };
/**
 * Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.
 */
var SubstanceSourceMaterial = /** @class */ (function (_super) {
    __extends(SubstanceSourceMaterial, _super);
    /**
     * Default constructor for SubstanceSourceMaterial from an object that MAY NOT contain all required elements.
     */
    function SubstanceSourceMaterial(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "SubstanceSourceMaterial";
        if ((source['resourceType'] !== "SubstanceSourceMaterial") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a SubstanceSourceMaterial';
        }
        if (source["countryOfOrigin"] !== undefined) {
            _this.countryOfOrigin = source.countryOfOrigin.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["developmentStage"] !== undefined) {
            _this.developmentStage = new fhirModels.CodeableConcept(source.developmentStage);
        }
        if (source["fractionDescription"] !== undefined) {
            _this.fractionDescription = source.fractionDescription.map(function (x) { return new fhirModels.SubstanceSourceMaterialFractionDescription(x); });
        }
        if (source["geographicalLocation"] !== undefined) {
            _this.geographicalLocation = source.geographicalLocation.map(function (x) { return (x); });
        }
        if (source["_geographicalLocation"] !== undefined) {
            _this._geographicalLocation = source._geographicalLocation.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["organism"] !== undefined) {
            _this.organism = new fhirModels.SubstanceSourceMaterialOrganism(source.organism);
        }
        if (source["organismId"] !== undefined) {
            _this.organismId = new fhirModels.Identifier(source.organismId);
        }
        if (source["organismName"] !== undefined) {
            _this.organismName = source.organismName;
        }
        if (source["_organismName"] !== undefined) {
            _this._organismName = new fhirModels.Element(source._organismName);
        }
        if (source["parentSubstanceId"] !== undefined) {
            _this.parentSubstanceId = source.parentSubstanceId.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["parentSubstanceName"] !== undefined) {
            _this.parentSubstanceName = source.parentSubstanceName.map(function (x) { return (x); });
        }
        if (source["_parentSubstanceName"] !== undefined) {
            _this._parentSubstanceName = source._parentSubstanceName.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["partDescription"] !== undefined) {
            _this.partDescription = source.partDescription.map(function (x) { return new fhirModels.SubstanceSourceMaterialPartDescription(x); });
        }
        if (source["sourceMaterialClass"] !== undefined) {
            _this.sourceMaterialClass = new fhirModels.CodeableConcept(source.sourceMaterialClass);
        }
        if (source["sourceMaterialState"] !== undefined) {
            _this.sourceMaterialState = new fhirModels.CodeableConcept(source.sourceMaterialState);
        }
        if (source["sourceMaterialType"] !== undefined) {
            _this.sourceMaterialType = new fhirModels.CodeableConcept(source.sourceMaterialType);
        }
        return _this;
    }
    return SubstanceSourceMaterial;
}(fhirModels.DomainResource));
export { SubstanceSourceMaterial };
