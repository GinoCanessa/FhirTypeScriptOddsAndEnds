"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeSystemStatusEnum = exports.CodeSystemHierarchyMeaningEnum = exports.CodeSystemContentEnum = exports.CodeSystem = exports.CodeSystemConcept = exports.CodeSystemConceptProperty = exports.CodeSystemConceptDesignation = exports.CodeSystemPropertyTypeEnum = exports.CodeSystemProperty = exports.CodeSystemFilterOperatorEnum = exports.CodeSystemFilter = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Note that filters defined in code systems usually require custom code on the part of any terminology engine that will make them available for use in value set filters. For this reason, they are generally only seen in high value published terminologies.
 */
class CodeSystemFilter extends fhirModels.BackboneElement {
    /**
     * Default constructor for CodeSystemFilter from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            this._code = new fhirModels.Element(source._code);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        {
            this.operator = source.operator.map((x) => (x));
        }
        if (source["_operator"] !== undefined) {
            this._operator = source._operator.map((x) => new fhirModels.Element(x));
        }
        {
            this.value = source.value;
        }
        if (source["_value"] !== undefined) {
            this._value = new fhirModels.Element(source._value);
        }
    }
}
exports.CodeSystemFilter = CodeSystemFilter;
/**
 * Code Values for the CodeSystem.filter.operator field
 */
var CodeSystemFilterOperatorEnum;
(function (CodeSystemFilterOperatorEnum) {
    CodeSystemFilterOperatorEnum["EQUALS"] = "=";
    CodeSystemFilterOperatorEnum["IS_A"] = "is-a";
    CodeSystemFilterOperatorEnum["DESCENDENT_OF"] = "descendent-of";
    CodeSystemFilterOperatorEnum["IS_NOT_A"] = "is-not-a";
    CodeSystemFilterOperatorEnum["REGEX"] = "regex";
    CodeSystemFilterOperatorEnum["IN"] = "in";
    CodeSystemFilterOperatorEnum["NOT_IN"] = "not-in";
    CodeSystemFilterOperatorEnum["GENERALIZES"] = "generalizes";
    CodeSystemFilterOperatorEnum["EXISTS"] = "exists";
})(CodeSystemFilterOperatorEnum = exports.CodeSystemFilterOperatorEnum || (exports.CodeSystemFilterOperatorEnum = {}));
/**
 * A property defines an additional slot through which additional information can be provided about a concept.
 */
class CodeSystemProperty extends fhirModels.BackboneElement {
    /**
     * Default constructor for CodeSystemProperty from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            this._code = new fhirModels.Element(source._code);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
        if (source["uri"] !== undefined) {
            this.uri = source.uri;
        }
        if (source["_uri"] !== undefined) {
            this._uri = new fhirModels.Element(source._uri);
        }
    }
}
exports.CodeSystemProperty = CodeSystemProperty;
/**
 * Code Values for the CodeSystem.property.type field
 */
var CodeSystemPropertyTypeEnum;
(function (CodeSystemPropertyTypeEnum) {
    CodeSystemPropertyTypeEnum["CODE"] = "code";
    CodeSystemPropertyTypeEnum["CODING"] = "Coding";
    CodeSystemPropertyTypeEnum["STRING"] = "string";
    CodeSystemPropertyTypeEnum["INTEGER"] = "integer";
    CodeSystemPropertyTypeEnum["BOOLEAN"] = "boolean";
    CodeSystemPropertyTypeEnum["DATETIME"] = "dateTime";
    CodeSystemPropertyTypeEnum["DECIMAL"] = "decimal";
})(CodeSystemPropertyTypeEnum = exports.CodeSystemPropertyTypeEnum || (exports.CodeSystemPropertyTypeEnum = {}));
/**
 * Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
 */
class CodeSystemConceptDesignation extends fhirModels.BackboneElement {
    /**
     * Default constructor for CodeSystemConceptDesignation from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["language"] !== undefined) {
            this.language = source.language;
        }
        if (source["_language"] !== undefined) {
            this._language = new fhirModels.Element(source._language);
        }
        if (source["use"] !== undefined) {
            this.use = new fhirModels.Coding(source.use);
        }
        {
            this.value = source.value;
        }
        if (source["_value"] !== undefined) {
            this._value = new fhirModels.Element(source._value);
        }
    }
}
exports.CodeSystemConceptDesignation = CodeSystemConceptDesignation;
/**
 * A property value for this concept.
 */
class CodeSystemConceptProperty extends fhirModels.BackboneElement {
    /**
     * Default constructor for CodeSystemConceptProperty from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            this._code = new fhirModels.Element(source._code);
        }
        if (source["valueCode"] !== undefined) {
            this.valueCode = source.valueCode;
        }
        if (source["_valueCode"] !== undefined) {
            this._valueCode = new fhirModels.Element(source._valueCode);
        }
        if (source["valueCoding"] !== undefined) {
            this.valueCoding = new fhirModels.Coding(source.valueCoding);
        }
        if (source["valueString"] !== undefined) {
            this.valueString = source.valueString;
        }
        if (source["_valueString"] !== undefined) {
            this._valueString = new fhirModels.Element(source._valueString);
        }
        if (source["valueInteger"] !== undefined) {
            this.valueInteger = source.valueInteger;
        }
        if (source["_valueInteger"] !== undefined) {
            this._valueInteger = new fhirModels.Element(source._valueInteger);
        }
        if (source["valueBoolean"] !== undefined) {
            this.valueBoolean = source.valueBoolean;
        }
        if (source["_valueBoolean"] !== undefined) {
            this._valueBoolean = new fhirModels.Element(source._valueBoolean);
        }
        if (source["valueDateTime"] !== undefined) {
            this.valueDateTime = source.valueDateTime;
        }
        if (source["_valueDateTime"] !== undefined) {
            this._valueDateTime = new fhirModels.Element(source._valueDateTime);
        }
        if (source["valueDecimal"] !== undefined) {
            this.valueDecimal = source.valueDecimal;
        }
        if (source["_valueDecimal"] !== undefined) {
            this._valueDecimal = new fhirModels.Element(source._valueDecimal);
        }
    }
}
exports.CodeSystemConceptProperty = CodeSystemConceptProperty;
/**
 * If this is empty, it means that the code system resource does not represent the content of the code system.
 */
class CodeSystemConcept extends fhirModels.BackboneElement {
    /**
     * Default constructor for CodeSystemConcept from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            this._code = new fhirModels.Element(source._code);
        }
        if (source["concept"] !== undefined) {
            this.concept = source.concept.map((x) => new fhirModels.CodeSystemConcept(x));
        }
        if (source["definition"] !== undefined) {
            this.definition = source.definition;
        }
        if (source["_definition"] !== undefined) {
            this._definition = new fhirModels.Element(source._definition);
        }
        if (source["designation"] !== undefined) {
            this.designation = source.designation.map((x) => new fhirModels.CodeSystemConceptDesignation(x));
        }
        if (source["display"] !== undefined) {
            this.display = source.display;
        }
        if (source["_display"] !== undefined) {
            this._display = new fhirModels.Element(source._display);
        }
        if (source["property"] !== undefined) {
            this.property = source.property.map((x) => new fhirModels.CodeSystemConceptProperty(x));
        }
    }
}
exports.CodeSystemConcept = CodeSystemConcept;
/**
 * The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.
 */
class CodeSystem extends fhirModels.DomainResource {
    /**
     * Default constructor for CodeSystem from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "CodeSystem";
        if ((source['resourceType'] !== "CodeSystem") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a CodeSystem';
        }
        if (source["caseSensitive"] !== undefined) {
            this.caseSensitive = source.caseSensitive;
        }
        if (source["_caseSensitive"] !== undefined) {
            this._caseSensitive = new fhirModels.Element(source._caseSensitive);
        }
        if (source["compositional"] !== undefined) {
            this.compositional = source.compositional;
        }
        if (source["_compositional"] !== undefined) {
            this._compositional = new fhirModels.Element(source._compositional);
        }
        if (source["concept"] !== undefined) {
            this.concept = source.concept.map((x) => new fhirModels.CodeSystemConcept(x));
        }
        if (source["contact"] !== undefined) {
            this.contact = source.contact.map((x) => new fhirModels.ContactDetail(x));
        }
        {
            this.content = source.content;
        }
        if (source["_content"] !== undefined) {
            this._content = new fhirModels.Element(source._content);
        }
        if (source["copyright"] !== undefined) {
            this.copyright = source.copyright;
        }
        if (source["_copyright"] !== undefined) {
            this._copyright = new fhirModels.Element(source._copyright);
        }
        if (source["count"] !== undefined) {
            this.count = source.count;
        }
        if (source["_count"] !== undefined) {
            this._count = new fhirModels.Element(source._count);
        }
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["experimental"] !== undefined) {
            this.experimental = source.experimental;
        }
        if (source["_experimental"] !== undefined) {
            this._experimental = new fhirModels.Element(source._experimental);
        }
        if (source["filter"] !== undefined) {
            this.filter = source.filter.map((x) => new fhirModels.CodeSystemFilter(x));
        }
        if (source["hierarchyMeaning"] !== undefined) {
            this.hierarchyMeaning = source.hierarchyMeaning;
        }
        if (source["_hierarchyMeaning"] !== undefined) {
            this._hierarchyMeaning = new fhirModels.Element(source._hierarchyMeaning);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["jurisdiction"] !== undefined) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["property"] !== undefined) {
            this.property = source.property.map((x) => new fhirModels.CodeSystemProperty(x));
        }
        if (source["publisher"] !== undefined) {
            this.publisher = source.publisher;
        }
        if (source["_publisher"] !== undefined) {
            this._publisher = new fhirModels.Element(source._publisher);
        }
        if (source["purpose"] !== undefined) {
            this.purpose = source.purpose;
        }
        if (source["_purpose"] !== undefined) {
            this._purpose = new fhirModels.Element(source._purpose);
        }
        {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["supplements"] !== undefined) {
            this.supplements = source.supplements;
        }
        if (source["_supplements"] !== undefined) {
            this._supplements = new fhirModels.Element(source._supplements);
        }
        if (source["title"] !== undefined) {
            this.title = source.title;
        }
        if (source["_title"] !== undefined) {
            this._title = new fhirModels.Element(source._title);
        }
        if (source["url"] !== undefined) {
            this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            this._url = new fhirModels.Element(source._url);
        }
        if (source["useContext"] !== undefined) {
            this.useContext = source.useContext.map((x) => new fhirModels.UsageContext(x));
        }
        if (source["valueSet"] !== undefined) {
            this.valueSet = source.valueSet;
        }
        if (source["_valueSet"] !== undefined) {
            this._valueSet = new fhirModels.Element(source._valueSet);
        }
        if (source["version"] !== undefined) {
            this.version = source.version;
        }
        if (source["_version"] !== undefined) {
            this._version = new fhirModels.Element(source._version);
        }
        if (source["versionNeeded"] !== undefined) {
            this.versionNeeded = source.versionNeeded;
        }
        if (source["_versionNeeded"] !== undefined) {
            this._versionNeeded = new fhirModels.Element(source._versionNeeded);
        }
    }
}
exports.CodeSystem = CodeSystem;
/**
 * Code Values for the CodeSystem.content field
 */
var CodeSystemContentEnum;
(function (CodeSystemContentEnum) {
    CodeSystemContentEnum["NOT_PRESENT"] = "not-present";
    CodeSystemContentEnum["EXAMPLE"] = "example";
    CodeSystemContentEnum["FRAGMENT"] = "fragment";
    CodeSystemContentEnum["COMPLETE"] = "complete";
    CodeSystemContentEnum["SUPPLEMENT"] = "supplement";
})(CodeSystemContentEnum = exports.CodeSystemContentEnum || (exports.CodeSystemContentEnum = {}));
/**
 * Code Values for the CodeSystem.hierarchyMeaning field
 */
var CodeSystemHierarchyMeaningEnum;
(function (CodeSystemHierarchyMeaningEnum) {
    CodeSystemHierarchyMeaningEnum["GROUPED_BY"] = "grouped-by";
    CodeSystemHierarchyMeaningEnum["IS_A"] = "is-a";
    CodeSystemHierarchyMeaningEnum["PART_OF"] = "part-of";
    CodeSystemHierarchyMeaningEnum["CLASSIFIED_WITH"] = "classified-with";
})(CodeSystemHierarchyMeaningEnum = exports.CodeSystemHierarchyMeaningEnum || (exports.CodeSystemHierarchyMeaningEnum = {}));
/**
 * Code Values for the CodeSystem.status field
 */
var CodeSystemStatusEnum;
(function (CodeSystemStatusEnum) {
    CodeSystemStatusEnum["DRAFT"] = "draft";
    CodeSystemStatusEnum["ACTIVE"] = "active";
    CodeSystemStatusEnum["RETIRED"] = "retired";
    CodeSystemStatusEnum["UNKNOWN"] = "unknown";
})(CodeSystemStatusEnum = exports.CodeSystemStatusEnum || (exports.CodeSystemStatusEnum = {}));
//# sourceMappingURL=CodeSystem.js.map