var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * Characteristics can be defined flexibly to accommodate different use cases for membership criteria, ranging from simple codes, all the way to using an expression language to express the criteria.
 */
var EvidenceVariableCharacteristic = /** @class */ (function (_super) {
    __extends(EvidenceVariableCharacteristic, _super);
    /**
     * Default constructor for EvidenceVariableCharacteristic from an object that MAY NOT contain all required elements.
     */
    function EvidenceVariableCharacteristic(source) {
        var _this = _super.call(this, source) || this;
        if (source["definitionReference"] !== undefined) {
            _this.definitionReference = new fhirModels.Reference(source.definitionReference);
        }
        if (source["definitionCanonical"] !== undefined) {
            _this.definitionCanonical = source.definitionCanonical;
        }
        if (source["_definitionCanonical"] !== undefined) {
            _this._definitionCanonical = new fhirModels.Element(source._definitionCanonical);
        }
        if (source["definitionCodeableConcept"] !== undefined) {
            _this.definitionCodeableConcept = new fhirModels.CodeableConcept(source.definitionCodeableConcept);
        }
        if (source["definitionExpression"] !== undefined) {
            _this.definitionExpression = new fhirModels.Expression(source.definitionExpression);
        }
        if (source["definitionDataRequirement"] !== undefined) {
            _this.definitionDataRequirement = new fhirModels.DataRequirement(source.definitionDataRequirement);
        }
        if (source["definitionTriggerDefinition"] !== undefined) {
            _this.definitionTriggerDefinition = new fhirModels.TriggerDefinition(source.definitionTriggerDefinition);
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["exclude"] !== undefined) {
            _this.exclude = source.exclude;
        }
        if (source["_exclude"] !== undefined) {
            _this._exclude = new fhirModels.Element(source._exclude);
        }
        if (source["groupMeasure"] !== undefined) {
            _this.groupMeasure = source.groupMeasure;
        }
        if (source["_groupMeasure"] !== undefined) {
            _this._groupMeasure = new fhirModels.Element(source._groupMeasure);
        }
        if (source["participantEffectiveDateTime"] !== undefined) {
            _this.participantEffectiveDateTime = source.participantEffectiveDateTime;
        }
        if (source["_participantEffectiveDateTime"] !== undefined) {
            _this._participantEffectiveDateTime = new fhirModels.Element(source._participantEffectiveDateTime);
        }
        if (source["participantEffectivePeriod"] !== undefined) {
            _this.participantEffectivePeriod = new fhirModels.Period(source.participantEffectivePeriod);
        }
        if (source["participantEffectiveDuration"] !== undefined) {
            _this.participantEffectiveDuration = new fhirModels.Duration(source.participantEffectiveDuration);
        }
        if (source["participantEffectiveTiming"] !== undefined) {
            _this.participantEffectiveTiming = new fhirModels.Timing(source.participantEffectiveTiming);
        }
        if (source["timeFromStart"] !== undefined) {
            _this.timeFromStart = new fhirModels.Duration(source.timeFromStart);
        }
        if (source["usageContext"] !== undefined) {
            _this.usageContext = source.usageContext.map(function (x) { return new fhirModels.UsageContext(x); });
        }
        return _this;
    }
    return EvidenceVariableCharacteristic;
}(fhirModels.BackboneElement));
export { EvidenceVariableCharacteristic };
/**
 * Code Values for the EvidenceVariable.characteristic.groupMeasure field
 */
export var EvidenceVariableCharacteristicGroupMeasureEnum;
(function (EvidenceVariableCharacteristicGroupMeasureEnum) {
    EvidenceVariableCharacteristicGroupMeasureEnum["MEAN"] = "mean";
    EvidenceVariableCharacteristicGroupMeasureEnum["MEDIAN"] = "median";
    EvidenceVariableCharacteristicGroupMeasureEnum["MEAN_OF_MEAN"] = "mean-of-mean";
    EvidenceVariableCharacteristicGroupMeasureEnum["MEAN_OF_MEDIAN"] = "mean-of-median";
    EvidenceVariableCharacteristicGroupMeasureEnum["MEDIAN_OF_MEAN"] = "median-of-mean";
    EvidenceVariableCharacteristicGroupMeasureEnum["MEDIAN_OF_MEDIAN"] = "median-of-median";
})(EvidenceVariableCharacteristicGroupMeasureEnum || (EvidenceVariableCharacteristicGroupMeasureEnum = {}));
/**
 * The EvidenceVariable resource describes a "PICO" element that knowledge (evidence, assertion, recommendation) is about.
 */
var EvidenceVariable = /** @class */ (function (_super) {
    __extends(EvidenceVariable, _super);
    /**
     * Default constructor for EvidenceVariable from an object that MAY NOT contain all required elements.
     */
    function EvidenceVariable(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "EvidenceVariable";
        if ((source['resourceType'] !== "EvidenceVariable") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a EvidenceVariable';
        }
        if (source["approvalDate"] !== undefined) {
            _this.approvalDate = source.approvalDate;
        }
        if (source["_approvalDate"] !== undefined) {
            _this._approvalDate = new fhirModels.Element(source._approvalDate);
        }
        if (source["author"] !== undefined) {
            _this.author = source.author.map(function (x) { return new fhirModels.ContactDetail(x); });
        }
        {
            _this.characteristic = source.characteristic.map(function (x) { return new fhirModels.EvidenceVariableCharacteristic(x); });
        }
        if (source["contact"] !== undefined) {
            _this.contact = source.contact.map(function (x) { return new fhirModels.ContactDetail(x); });
        }
        if (source["copyright"] !== undefined) {
            _this.copyright = source.copyright;
        }
        if (source["_copyright"] !== undefined) {
            _this._copyright = new fhirModels.Element(source._copyright);
        }
        if (source["date"] !== undefined) {
            _this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            _this._date = new fhirModels.Element(source._date);
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["editor"] !== undefined) {
            _this.editor = source.editor.map(function (x) { return new fhirModels.ContactDetail(x); });
        }
        if (source["effectivePeriod"] !== undefined) {
            _this.effectivePeriod = new fhirModels.Period(source.effectivePeriod);
        }
        if (source["endorser"] !== undefined) {
            _this.endorser = source.endorser.map(function (x) { return new fhirModels.ContactDetail(x); });
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["jurisdiction"] !== undefined) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["lastReviewDate"] !== undefined) {
            _this.lastReviewDate = source.lastReviewDate;
        }
        if (source["_lastReviewDate"] !== undefined) {
            _this._lastReviewDate = new fhirModels.Element(source._lastReviewDate);
        }
        if (source["name"] !== undefined) {
            _this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            _this._name = new fhirModels.Element(source._name);
        }
        if (source["note"] !== undefined) {
            _this.note = source.note.map(function (x) { return new fhirModels.Annotation(x); });
        }
        if (source["publisher"] !== undefined) {
            _this.publisher = source.publisher;
        }
        if (source["_publisher"] !== undefined) {
            _this._publisher = new fhirModels.Element(source._publisher);
        }
        if (source["relatedArtifact"] !== undefined) {
            _this.relatedArtifact = source.relatedArtifact.map(function (x) { return new fhirModels.RelatedArtifact(x); });
        }
        if (source["reviewer"] !== undefined) {
            _this.reviewer = source.reviewer.map(function (x) { return new fhirModels.ContactDetail(x); });
        }
        if (source["shortTitle"] !== undefined) {
            _this.shortTitle = source.shortTitle;
        }
        if (source["_shortTitle"] !== undefined) {
            _this._shortTitle = new fhirModels.Element(source._shortTitle);
        }
        {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["subtitle"] !== undefined) {
            _this.subtitle = source.subtitle;
        }
        if (source["_subtitle"] !== undefined) {
            _this._subtitle = new fhirModels.Element(source._subtitle);
        }
        if (source["title"] !== undefined) {
            _this.title = source.title;
        }
        if (source["_title"] !== undefined) {
            _this._title = new fhirModels.Element(source._title);
        }
        if (source["topic"] !== undefined) {
            _this.topic = source.topic.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["type"] !== undefined) {
            _this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            _this._type = new fhirModels.Element(source._type);
        }
        if (source["url"] !== undefined) {
            _this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            _this._url = new fhirModels.Element(source._url);
        }
        if (source["useContext"] !== undefined) {
            _this.useContext = source.useContext.map(function (x) { return new fhirModels.UsageContext(x); });
        }
        if (source["version"] !== undefined) {
            _this.version = source.version;
        }
        if (source["_version"] !== undefined) {
            _this._version = new fhirModels.Element(source._version);
        }
        return _this;
    }
    return EvidenceVariable;
}(fhirModels.DomainResource));
export { EvidenceVariable };
/**
 * Code Values for the EvidenceVariable.status field
 */
export var EvidenceVariableStatusEnum;
(function (EvidenceVariableStatusEnum) {
    EvidenceVariableStatusEnum["DRAFT"] = "draft";
    EvidenceVariableStatusEnum["ACTIVE"] = "active";
    EvidenceVariableStatusEnum["RETIRED"] = "retired";
    EvidenceVariableStatusEnum["UNKNOWN"] = "unknown";
})(EvidenceVariableStatusEnum || (EvidenceVariableStatusEnum = {}));
/**
 * Code Values for the EvidenceVariable.type field
 */
export var EvidenceVariableTypeEnum;
(function (EvidenceVariableTypeEnum) {
    EvidenceVariableTypeEnum["DICHOTOMOUS"] = "dichotomous";
    EvidenceVariableTypeEnum["CONTINUOUS"] = "continuous";
    EvidenceVariableTypeEnum["DESCRIPTIVE"] = "descriptive";
})(EvidenceVariableTypeEnum || (EvidenceVariableTypeEnum = {}));
