var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * The purpose of this element is to define the profile of an origin element used elsewhere in the script.  Test engines could then use the origin-profile mapping to offer a filtered list of test systems that can serve as the sender for the interaction.
 */
var TestScriptOrigin = /** @class */ (function (_super) {
    __extends(TestScriptOrigin, _super);
    /**
     * Default constructor for TestScriptOrigin from an object that MAY NOT contain all required elements.
     */
    function TestScriptOrigin(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.index = source.index;
        }
        if (source["_index"] !== undefined) {
            _this._index = new fhirModels.Element(source._index);
        }
        {
            _this.profile = new fhirModels.Coding(source.profile);
        }
        return _this;
    }
    return TestScriptOrigin;
}(fhirModels.BackboneElement));
export { TestScriptOrigin };
/**
 * The purpose of this element is to define the profile of a destination element used elsewhere in the script.  Test engines could then use the destination-profile mapping to offer a filtered list of test systems that can serve as the receiver for the interaction.
 */
var TestScriptDestination = /** @class */ (function (_super) {
    __extends(TestScriptDestination, _super);
    /**
     * Default constructor for TestScriptDestination from an object that MAY NOT contain all required elements.
     */
    function TestScriptDestination(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.index = source.index;
        }
        if (source["_index"] !== undefined) {
            _this._index = new fhirModels.Element(source._index);
        }
        {
            _this.profile = new fhirModels.Coding(source.profile);
        }
        return _this;
    }
    return TestScriptDestination;
}(fhirModels.BackboneElement));
export { TestScriptDestination };
/**
 * A link to the FHIR specification that this test is covering.
 */
var TestScriptMetadataLink = /** @class */ (function (_super) {
    __extends(TestScriptMetadataLink, _super);
    /**
     * Default constructor for TestScriptMetadataLink from an object that MAY NOT contain all required elements.
     */
    function TestScriptMetadataLink(source) {
        var _this = _super.call(this, source) || this;
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        {
            _this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            _this._url = new fhirModels.Element(source._url);
        }
        return _this;
    }
    return TestScriptMetadataLink;
}(fhirModels.BackboneElement));
export { TestScriptMetadataLink };
/**
 * When the metadata capabilities section is defined at TestScript.metadata or at TestScript.setup.metadata, and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then all the tests in the TestScript are skipped.  When the metadata capabilities section is defined at TestScript.test.metadata and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then only that test is skipped.  The "metadata.capabilities.required" and "metadata.capabilities.validated" elements only indicate whether the capabilities are the primary focus of the test script or not.  They do not impact the skipping logic.  Capabilities whose "metadata.capabilities.validated" flag is true are the primary focus of the test script.
 */
var TestScriptMetadataCapability = /** @class */ (function (_super) {
    __extends(TestScriptMetadataCapability, _super);
    /**
     * Default constructor for TestScriptMetadataCapability from an object that MAY NOT contain all required elements.
     */
    function TestScriptMetadataCapability(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.capabilities = source.capabilities;
        }
        if (source["_capabilities"] !== undefined) {
            _this._capabilities = new fhirModels.Element(source._capabilities);
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["destination"] !== undefined) {
            _this.destination = source.destination;
        }
        if (source["_destination"] !== undefined) {
            _this._destination = new fhirModels.Element(source._destination);
        }
        if (source["link"] !== undefined) {
            _this.link = source.link.map(function (x) { return (x); });
        }
        if (source["_link"] !== undefined) {
            _this._link = source._link.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["origin"] !== undefined) {
            _this.origin = source.origin.map(function (x) { return (x); });
        }
        if (source["_origin"] !== undefined) {
            _this._origin = source._origin.map(function (x) { return new fhirModels.Element(x); });
        }
        {
            _this.required = source.required;
        }
        if (source["_required"] !== undefined) {
            _this._required = new fhirModels.Element(source._required);
        }
        {
            _this.validated = source.validated;
        }
        if (source["_validated"] !== undefined) {
            _this._validated = new fhirModels.Element(source._validated);
        }
        return _this;
    }
    return TestScriptMetadataCapability;
}(fhirModels.BackboneElement));
export { TestScriptMetadataCapability };
/**
 * The required capability must exist and are assumed to function correctly on the FHIR server being tested.
 */
var TestScriptMetadata = /** @class */ (function (_super) {
    __extends(TestScriptMetadata, _super);
    /**
     * Default constructor for TestScriptMetadata from an object that MAY NOT contain all required elements.
     */
    function TestScriptMetadata(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.capability = source.capability.map(function (x) { return new fhirModels.TestScriptMetadataCapability(x); });
        }
        if (source["link"] !== undefined) {
            _this.link = source.link.map(function (x) { return new fhirModels.TestScriptMetadataLink(x); });
        }
        return _this;
    }
    return TestScriptMetadata;
}(fhirModels.BackboneElement));
export { TestScriptMetadata };
/**
 * Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
 */
var TestScriptFixture = /** @class */ (function (_super) {
    __extends(TestScriptFixture, _super);
    /**
     * Default constructor for TestScriptFixture from an object that MAY NOT contain all required elements.
     */
    function TestScriptFixture(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.autocreate = source.autocreate;
        }
        if (source["_autocreate"] !== undefined) {
            _this._autocreate = new fhirModels.Element(source._autocreate);
        }
        {
            _this.autodelete = source.autodelete;
        }
        if (source["_autodelete"] !== undefined) {
            _this._autodelete = new fhirModels.Element(source._autodelete);
        }
        if (source["resource"] !== undefined) {
            _this.resource = new fhirModels.Reference(source.resource);
        }
        return _this;
    }
    return TestScriptFixture;
}(fhirModels.BackboneElement));
export { TestScriptFixture };
/**
 * Variables would be set based either on XPath/JSONPath expressions against fixtures (static and response), or headerField evaluations against response headers. If variable evaluates to nodelist or anything other than a primitive value, then test engine would report an error.  Variables would be used to perform clean replacements in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations. This limits the places that test engines would need to look for placeholders "${}".  Variables are scoped to the whole script. They are NOT evaluated at declaration. They are evaluated by test engine when used for substitutions in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations.  See example testscript-search.xml.
 */
var TestScriptVariable = /** @class */ (function (_super) {
    __extends(TestScriptVariable, _super);
    /**
     * Default constructor for TestScriptVariable from an object that MAY NOT contain all required elements.
     */
    function TestScriptVariable(source) {
        var _this = _super.call(this, source) || this;
        if (source["defaultValue"] !== undefined) {
            _this.defaultValue = source.defaultValue;
        }
        if (source["_defaultValue"] !== undefined) {
            _this._defaultValue = new fhirModels.Element(source._defaultValue);
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["expression"] !== undefined) {
            _this.expression = source.expression;
        }
        if (source["_expression"] !== undefined) {
            _this._expression = new fhirModels.Element(source._expression);
        }
        if (source["headerField"] !== undefined) {
            _this.headerField = source.headerField;
        }
        if (source["_headerField"] !== undefined) {
            _this._headerField = new fhirModels.Element(source._headerField);
        }
        if (source["hint"] !== undefined) {
            _this.hint = source.hint;
        }
        if (source["_hint"] !== undefined) {
            _this._hint = new fhirModels.Element(source._hint);
        }
        {
            _this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            _this._name = new fhirModels.Element(source._name);
        }
        if (source["path"] !== undefined) {
            _this.path = source.path;
        }
        if (source["_path"] !== undefined) {
            _this._path = new fhirModels.Element(source._path);
        }
        if (source["sourceId"] !== undefined) {
            _this.sourceId = source.sourceId;
        }
        if (source["_sourceId"] !== undefined) {
            _this._sourceId = new fhirModels.Element(source._sourceId);
        }
        return _this;
    }
    return TestScriptVariable;
}(fhirModels.BackboneElement));
export { TestScriptVariable };
/**
 * This gives control to test-script writers to set headers explicitly based on test requirements.  It will allow for testing using:  - "If-Modified-Since" and "If-None-Match" headers.  See http://build.fhir.org/http.html#2.1.0.5.1 - "If-Match" header.  See http://build.fhir.org/http.html#2.1.0.11 - Conditional Create using "If-None-Exist".  See http://build.fhir.org/http.html#2.1.0.13.1 - Invalid "Content-Type" header for negative testing. - etc.
 */
var TestScriptSetupActionOperationRequestHeader = /** @class */ (function (_super) {
    __extends(TestScriptSetupActionOperationRequestHeader, _super);
    /**
     * Default constructor for TestScriptSetupActionOperationRequestHeader from an object that MAY NOT contain all required elements.
     */
    function TestScriptSetupActionOperationRequestHeader(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.field = source.field;
        }
        if (source["_field"] !== undefined) {
            _this._field = new fhirModels.Element(source._field);
        }
        {
            _this.value = source.value;
        }
        if (source["_value"] !== undefined) {
            _this._value = new fhirModels.Element(source._value);
        }
        return _this;
    }
    return TestScriptSetupActionOperationRequestHeader;
}(fhirModels.BackboneElement));
export { TestScriptSetupActionOperationRequestHeader };
/**
 * The operation to perform.
 */
var TestScriptSetupActionOperation = /** @class */ (function (_super) {
    __extends(TestScriptSetupActionOperation, _super);
    /**
     * Default constructor for TestScriptSetupActionOperation from an object that MAY NOT contain all required elements.
     */
    function TestScriptSetupActionOperation(source) {
        var _this = _super.call(this, source) || this;
        if (source["accept"] !== undefined) {
            _this.accept = source.accept;
        }
        if (source["_accept"] !== undefined) {
            _this._accept = new fhirModels.Element(source._accept);
        }
        if (source["contentType"] !== undefined) {
            _this.contentType = source.contentType;
        }
        if (source["_contentType"] !== undefined) {
            _this._contentType = new fhirModels.Element(source._contentType);
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["destination"] !== undefined) {
            _this.destination = source.destination;
        }
        if (source["_destination"] !== undefined) {
            _this._destination = new fhirModels.Element(source._destination);
        }
        {
            _this.encodeRequestUrl = source.encodeRequestUrl;
        }
        if (source["_encodeRequestUrl"] !== undefined) {
            _this._encodeRequestUrl = new fhirModels.Element(source._encodeRequestUrl);
        }
        if (source["label"] !== undefined) {
            _this.label = source.label;
        }
        if (source["_label"] !== undefined) {
            _this._label = new fhirModels.Element(source._label);
        }
        if (source["method"] !== undefined) {
            _this.method = source.method;
        }
        if (source["_method"] !== undefined) {
            _this._method = new fhirModels.Element(source._method);
        }
        if (source["origin"] !== undefined) {
            _this.origin = source.origin;
        }
        if (source["_origin"] !== undefined) {
            _this._origin = new fhirModels.Element(source._origin);
        }
        if (source["params"] !== undefined) {
            _this.params = source.params;
        }
        if (source["_params"] !== undefined) {
            _this._params = new fhirModels.Element(source._params);
        }
        if (source["requestHeader"] !== undefined) {
            _this.requestHeader = source.requestHeader.map(function (x) { return new fhirModels.TestScriptSetupActionOperationRequestHeader(x); });
        }
        if (source["requestId"] !== undefined) {
            _this.requestId = source.requestId;
        }
        if (source["_requestId"] !== undefined) {
            _this._requestId = new fhirModels.Element(source._requestId);
        }
        if (source["resource"] !== undefined) {
            _this.resource = source.resource;
        }
        if (source["_resource"] !== undefined) {
            _this._resource = new fhirModels.Element(source._resource);
        }
        if (source["responseId"] !== undefined) {
            _this.responseId = source.responseId;
        }
        if (source["_responseId"] !== undefined) {
            _this._responseId = new fhirModels.Element(source._responseId);
        }
        if (source["sourceId"] !== undefined) {
            _this.sourceId = source.sourceId;
        }
        if (source["_sourceId"] !== undefined) {
            _this._sourceId = new fhirModels.Element(source._sourceId);
        }
        if (source["targetId"] !== undefined) {
            _this.targetId = source.targetId;
        }
        if (source["_targetId"] !== undefined) {
            _this._targetId = new fhirModels.Element(source._targetId);
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.Coding(source.type);
        }
        if (source["url"] !== undefined) {
            _this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            _this._url = new fhirModels.Element(source._url);
        }
        return _this;
    }
    return TestScriptSetupActionOperation;
}(fhirModels.BackboneElement));
export { TestScriptSetupActionOperation };
/**
 * Code Values for the TestScript.setup.action.operation.method field
 */
export var TestScriptSetupActionOperationMethodEnum;
(function (TestScriptSetupActionOperationMethodEnum) {
    TestScriptSetupActionOperationMethodEnum["DELETE"] = "delete";
    TestScriptSetupActionOperationMethodEnum["GET"] = "get";
    TestScriptSetupActionOperationMethodEnum["OPTIONS"] = "options";
    TestScriptSetupActionOperationMethodEnum["PATCH"] = "patch";
    TestScriptSetupActionOperationMethodEnum["POST"] = "post";
    TestScriptSetupActionOperationMethodEnum["PUT"] = "put";
    TestScriptSetupActionOperationMethodEnum["HEAD"] = "head";
})(TestScriptSetupActionOperationMethodEnum || (TestScriptSetupActionOperationMethodEnum = {}));
/**
 * In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.
 */
var TestScriptSetupActionAssert = /** @class */ (function (_super) {
    __extends(TestScriptSetupActionAssert, _super);
    /**
     * Default constructor for TestScriptSetupActionAssert from an object that MAY NOT contain all required elements.
     */
    function TestScriptSetupActionAssert(source) {
        var _this = _super.call(this, source) || this;
        if (source["compareToSourceExpression"] !== undefined) {
            _this.compareToSourceExpression = source.compareToSourceExpression;
        }
        if (source["_compareToSourceExpression"] !== undefined) {
            _this._compareToSourceExpression = new fhirModels.Element(source._compareToSourceExpression);
        }
        if (source["compareToSourceId"] !== undefined) {
            _this.compareToSourceId = source.compareToSourceId;
        }
        if (source["_compareToSourceId"] !== undefined) {
            _this._compareToSourceId = new fhirModels.Element(source._compareToSourceId);
        }
        if (source["compareToSourcePath"] !== undefined) {
            _this.compareToSourcePath = source.compareToSourcePath;
        }
        if (source["_compareToSourcePath"] !== undefined) {
            _this._compareToSourcePath = new fhirModels.Element(source._compareToSourcePath);
        }
        if (source["contentType"] !== undefined) {
            _this.contentType = source.contentType;
        }
        if (source["_contentType"] !== undefined) {
            _this._contentType = new fhirModels.Element(source._contentType);
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["direction"] !== undefined) {
            _this.direction = source.direction;
        }
        if (source["_direction"] !== undefined) {
            _this._direction = new fhirModels.Element(source._direction);
        }
        if (source["expression"] !== undefined) {
            _this.expression = source.expression;
        }
        if (source["_expression"] !== undefined) {
            _this._expression = new fhirModels.Element(source._expression);
        }
        if (source["headerField"] !== undefined) {
            _this.headerField = source.headerField;
        }
        if (source["_headerField"] !== undefined) {
            _this._headerField = new fhirModels.Element(source._headerField);
        }
        if (source["label"] !== undefined) {
            _this.label = source.label;
        }
        if (source["_label"] !== undefined) {
            _this._label = new fhirModels.Element(source._label);
        }
        if (source["minimumId"] !== undefined) {
            _this.minimumId = source.minimumId;
        }
        if (source["_minimumId"] !== undefined) {
            _this._minimumId = new fhirModels.Element(source._minimumId);
        }
        if (source["navigationLinks"] !== undefined) {
            _this.navigationLinks = source.navigationLinks;
        }
        if (source["_navigationLinks"] !== undefined) {
            _this._navigationLinks = new fhirModels.Element(source._navigationLinks);
        }
        if (source["operator"] !== undefined) {
            _this.operator = source.operator;
        }
        if (source["_operator"] !== undefined) {
            _this._operator = new fhirModels.Element(source._operator);
        }
        if (source["path"] !== undefined) {
            _this.path = source.path;
        }
        if (source["_path"] !== undefined) {
            _this._path = new fhirModels.Element(source._path);
        }
        if (source["requestMethod"] !== undefined) {
            _this.requestMethod = source.requestMethod;
        }
        if (source["_requestMethod"] !== undefined) {
            _this._requestMethod = new fhirModels.Element(source._requestMethod);
        }
        if (source["requestURL"] !== undefined) {
            _this.requestURL = source.requestURL;
        }
        if (source["_requestURL"] !== undefined) {
            _this._requestURL = new fhirModels.Element(source._requestURL);
        }
        if (source["resource"] !== undefined) {
            _this.resource = source.resource;
        }
        if (source["_resource"] !== undefined) {
            _this._resource = new fhirModels.Element(source._resource);
        }
        if (source["response"] !== undefined) {
            _this.response = source.response;
        }
        if (source["_response"] !== undefined) {
            _this._response = new fhirModels.Element(source._response);
        }
        if (source["responseCode"] !== undefined) {
            _this.responseCode = source.responseCode;
        }
        if (source["_responseCode"] !== undefined) {
            _this._responseCode = new fhirModels.Element(source._responseCode);
        }
        if (source["sourceId"] !== undefined) {
            _this.sourceId = source.sourceId;
        }
        if (source["_sourceId"] !== undefined) {
            _this._sourceId = new fhirModels.Element(source._sourceId);
        }
        if (source["validateProfileId"] !== undefined) {
            _this.validateProfileId = source.validateProfileId;
        }
        if (source["_validateProfileId"] !== undefined) {
            _this._validateProfileId = new fhirModels.Element(source._validateProfileId);
        }
        if (source["value"] !== undefined) {
            _this.value = source.value;
        }
        if (source["_value"] !== undefined) {
            _this._value = new fhirModels.Element(source._value);
        }
        {
            _this.warningOnly = source.warningOnly;
        }
        if (source["_warningOnly"] !== undefined) {
            _this._warningOnly = new fhirModels.Element(source._warningOnly);
        }
        return _this;
    }
    return TestScriptSetupActionAssert;
}(fhirModels.BackboneElement));
export { TestScriptSetupActionAssert };
/**
 * Code Values for the TestScript.setup.action.assert.direction field
 */
export var TestScriptSetupActionAssertDirectionEnum;
(function (TestScriptSetupActionAssertDirectionEnum) {
    TestScriptSetupActionAssertDirectionEnum["RESPONSE"] = "response";
    TestScriptSetupActionAssertDirectionEnum["REQUEST"] = "request";
})(TestScriptSetupActionAssertDirectionEnum || (TestScriptSetupActionAssertDirectionEnum = {}));
/**
 * Code Values for the TestScript.setup.action.assert.operator field
 */
export var TestScriptSetupActionAssertOperatorEnum;
(function (TestScriptSetupActionAssertOperatorEnum) {
    TestScriptSetupActionAssertOperatorEnum["EQUALS"] = "equals";
    TestScriptSetupActionAssertOperatorEnum["NOTEQUALS"] = "notEquals";
    TestScriptSetupActionAssertOperatorEnum["IN"] = "in";
    TestScriptSetupActionAssertOperatorEnum["NOTIN"] = "notIn";
    TestScriptSetupActionAssertOperatorEnum["GREATERTHAN"] = "greaterThan";
    TestScriptSetupActionAssertOperatorEnum["LESSTHAN"] = "lessThan";
    TestScriptSetupActionAssertOperatorEnum["EMPTY"] = "empty";
    TestScriptSetupActionAssertOperatorEnum["NOTEMPTY"] = "notEmpty";
    TestScriptSetupActionAssertOperatorEnum["CONTAINS"] = "contains";
    TestScriptSetupActionAssertOperatorEnum["NOTCONTAINS"] = "notContains";
    TestScriptSetupActionAssertOperatorEnum["EVAL"] = "eval";
})(TestScriptSetupActionAssertOperatorEnum || (TestScriptSetupActionAssertOperatorEnum = {}));
/**
 * Code Values for the TestScript.setup.action.assert.requestMethod field
 */
export var TestScriptSetupActionAssertRequestMethodEnum;
(function (TestScriptSetupActionAssertRequestMethodEnum) {
    TestScriptSetupActionAssertRequestMethodEnum["DELETE"] = "delete";
    TestScriptSetupActionAssertRequestMethodEnum["GET"] = "get";
    TestScriptSetupActionAssertRequestMethodEnum["OPTIONS"] = "options";
    TestScriptSetupActionAssertRequestMethodEnum["PATCH"] = "patch";
    TestScriptSetupActionAssertRequestMethodEnum["POST"] = "post";
    TestScriptSetupActionAssertRequestMethodEnum["PUT"] = "put";
    TestScriptSetupActionAssertRequestMethodEnum["HEAD"] = "head";
})(TestScriptSetupActionAssertRequestMethodEnum || (TestScriptSetupActionAssertRequestMethodEnum = {}));
/**
 * Code Values for the TestScript.setup.action.assert.response field
 */
export var TestScriptSetupActionAssertResponseEnum;
(function (TestScriptSetupActionAssertResponseEnum) {
    TestScriptSetupActionAssertResponseEnum["OKAY"] = "okay";
    TestScriptSetupActionAssertResponseEnum["CREATED"] = "created";
    TestScriptSetupActionAssertResponseEnum["NOCONTENT"] = "noContent";
    TestScriptSetupActionAssertResponseEnum["NOTMODIFIED"] = "notModified";
    TestScriptSetupActionAssertResponseEnum["BAD"] = "bad";
    TestScriptSetupActionAssertResponseEnum["FORBIDDEN"] = "forbidden";
    TestScriptSetupActionAssertResponseEnum["NOTFOUND"] = "notFound";
    TestScriptSetupActionAssertResponseEnum["METHODNOTALLOWED"] = "methodNotAllowed";
    TestScriptSetupActionAssertResponseEnum["CONFLICT"] = "conflict";
    TestScriptSetupActionAssertResponseEnum["GONE"] = "gone";
    TestScriptSetupActionAssertResponseEnum["PRECONDITIONFAILED"] = "preconditionFailed";
    TestScriptSetupActionAssertResponseEnum["UNPROCESSABLE"] = "unprocessable";
})(TestScriptSetupActionAssertResponseEnum || (TestScriptSetupActionAssertResponseEnum = {}));
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
var TestScriptSetupAction = /** @class */ (function (_super) {
    __extends(TestScriptSetupAction, _super);
    /**
     * Default constructor for TestScriptSetupAction from an object that MAY NOT contain all required elements.
     */
    function TestScriptSetupAction(source) {
        var _this = _super.call(this, source) || this;
        if (source["assert"] !== undefined) {
            _this.assert = new fhirModels.TestScriptSetupActionAssert(source.assert);
        }
        if (source["operation"] !== undefined) {
            _this.operation = new fhirModels.TestScriptSetupActionOperation(source.operation);
        }
        return _this;
    }
    return TestScriptSetupAction;
}(fhirModels.BackboneElement));
export { TestScriptSetupAction };
/**
 * A series of required setup operations before tests are executed.
 */
var TestScriptSetup = /** @class */ (function (_super) {
    __extends(TestScriptSetup, _super);
    /**
     * Default constructor for TestScriptSetup from an object that MAY NOT contain all required elements.
     */
    function TestScriptSetup(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.action = source.action.map(function (x) { return new fhirModels.TestScriptSetupAction(x); });
        }
        return _this;
    }
    return TestScriptSetup;
}(fhirModels.BackboneElement));
export { TestScriptSetup };
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
var TestScriptTestAction = /** @class */ (function (_super) {
    __extends(TestScriptTestAction, _super);
    /**
     * Default constructor for TestScriptTestAction from an object that MAY NOT contain all required elements.
     */
    function TestScriptTestAction(source) {
        var _this = _super.call(this, source) || this;
        if (source["assert"] !== undefined) {
            _this.assert = new fhirModels.TestScriptSetupActionAssert(source.assert);
        }
        if (source["operation"] !== undefined) {
            _this.operation = new fhirModels.TestScriptSetupActionOperation(source.operation);
        }
        return _this;
    }
    return TestScriptTestAction;
}(fhirModels.BackboneElement));
export { TestScriptTestAction };
/**
 * A test in this script.
 */
var TestScriptTest = /** @class */ (function (_super) {
    __extends(TestScriptTest, _super);
    /**
     * Default constructor for TestScriptTest from an object that MAY NOT contain all required elements.
     */
    function TestScriptTest(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.action = source.action.map(function (x) { return new fhirModels.TestScriptTestAction(x); });
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["name"] !== undefined) {
            _this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            _this._name = new fhirModels.Element(source._name);
        }
        return _this;
    }
    return TestScriptTest;
}(fhirModels.BackboneElement));
export { TestScriptTest };
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
var TestScriptTeardownAction = /** @class */ (function (_super) {
    __extends(TestScriptTeardownAction, _super);
    /**
     * Default constructor for TestScriptTeardownAction from an object that MAY NOT contain all required elements.
     */
    function TestScriptTeardownAction(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.operation = new fhirModels.TestScriptSetupActionOperation(source.operation);
        }
        return _this;
    }
    return TestScriptTeardownAction;
}(fhirModels.BackboneElement));
export { TestScriptTeardownAction };
/**
 * A series of operations required to clean up after all the tests are executed (successfully or otherwise).
 */
var TestScriptTeardown = /** @class */ (function (_super) {
    __extends(TestScriptTeardown, _super);
    /**
     * Default constructor for TestScriptTeardown from an object that MAY NOT contain all required elements.
     */
    function TestScriptTeardown(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.action = source.action.map(function (x) { return new fhirModels.TestScriptTeardownAction(x); });
        }
        return _this;
    }
    return TestScriptTeardown;
}(fhirModels.BackboneElement));
export { TestScriptTeardown };
/**
 * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
 */
var TestScript = /** @class */ (function (_super) {
    __extends(TestScript, _super);
    /**
     * Default constructor for TestScript from an object that MAY NOT contain all required elements.
     */
    function TestScript(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "TestScript";
        if ((source['resourceType'] !== "TestScript") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a TestScript';
        }
        if (source["contact"] !== undefined) {
            _this.contact = source.contact.map(function (x) { return new fhirModels.ContactDetail(x); });
        }
        if (source["copyright"] !== undefined) {
            _this.copyright = source.copyright;
        }
        if (source["_copyright"] !== undefined) {
            _this._copyright = new fhirModels.Element(source._copyright);
        }
        if (source["date"] !== undefined) {
            _this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            _this._date = new fhirModels.Element(source._date);
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["destination"] !== undefined) {
            _this.destination = source.destination.map(function (x) { return new fhirModels.TestScriptDestination(x); });
        }
        if (source["experimental"] !== undefined) {
            _this.experimental = source.experimental;
        }
        if (source["_experimental"] !== undefined) {
            _this._experimental = new fhirModels.Element(source._experimental);
        }
        if (source["fixture"] !== undefined) {
            _this.fixture = source.fixture.map(function (x) { return new fhirModels.TestScriptFixture(x); });
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = new fhirModels.Identifier(source.identifier);
        }
        if (source["jurisdiction"] !== undefined) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["metadata"] !== undefined) {
            _this.metadata = new fhirModels.TestScriptMetadata(source.metadata);
        }
        {
            _this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            _this._name = new fhirModels.Element(source._name);
        }
        if (source["origin"] !== undefined) {
            _this.origin = source.origin.map(function (x) { return new fhirModels.TestScriptOrigin(x); });
        }
        if (source["profile"] !== undefined) {
            _this.profile = source.profile.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["publisher"] !== undefined) {
            _this.publisher = source.publisher;
        }
        if (source["_publisher"] !== undefined) {
            _this._publisher = new fhirModels.Element(source._publisher);
        }
        if (source["purpose"] !== undefined) {
            _this.purpose = source.purpose;
        }
        if (source["_purpose"] !== undefined) {
            _this._purpose = new fhirModels.Element(source._purpose);
        }
        if (source["setup"] !== undefined) {
            _this.setup = new fhirModels.TestScriptSetup(source.setup);
        }
        {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["teardown"] !== undefined) {
            _this.teardown = new fhirModels.TestScriptTeardown(source.teardown);
        }
        if (source["test"] !== undefined) {
            _this.test = source.test.map(function (x) { return new fhirModels.TestScriptTest(x); });
        }
        if (source["title"] !== undefined) {
            _this.title = source.title;
        }
        if (source["_title"] !== undefined) {
            _this._title = new fhirModels.Element(source._title);
        }
        {
            _this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            _this._url = new fhirModels.Element(source._url);
        }
        if (source["useContext"] !== undefined) {
            _this.useContext = source.useContext.map(function (x) { return new fhirModels.UsageContext(x); });
        }
        if (source["variable"] !== undefined) {
            _this.variable = source.variable.map(function (x) { return new fhirModels.TestScriptVariable(x); });
        }
        if (source["version"] !== undefined) {
            _this.version = source.version;
        }
        if (source["_version"] !== undefined) {
            _this._version = new fhirModels.Element(source._version);
        }
        return _this;
    }
    return TestScript;
}(fhirModels.DomainResource));
export { TestScript };
/**
 * Code Values for the TestScript.status field
 */
export var TestScriptStatusEnum;
(function (TestScriptStatusEnum) {
    TestScriptStatusEnum["DRAFT"] = "draft";
    TestScriptStatusEnum["ACTIVE"] = "active";
    TestScriptStatusEnum["RETIRED"] = "retired";
    TestScriptStatusEnum["UNKNOWN"] = "unknown";
})(TestScriptStatusEnum || (TestScriptStatusEnum = {}));
