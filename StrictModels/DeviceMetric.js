"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeviceMetricOperationalStatusEnum = exports.DeviceMetricColorEnum = exports.DeviceMetricCategoryEnum = exports.DeviceMetric = exports.DeviceMetricCalibrationTypeEnum = exports.DeviceMetricCalibrationStateEnum = exports.DeviceMetricCalibration = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Describes the calibrations that have been performed or that are required to be performed.
 */
class DeviceMetricCalibration extends fhirModels.BackboneElement {
    /**
     * Default constructor for DeviceMetricCalibration from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["state"] !== undefined) {
            this.state = source.state;
        }
        if (source["_state"] !== undefined) {
            this._state = new fhirModels.Element(source._state);
        }
        if (source["time"] !== undefined) {
            this.time = source.time;
        }
        if (source["_time"] !== undefined) {
            this._time = new fhirModels.Element(source._time);
        }
        if (source["type"] !== undefined) {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
    }
}
exports.DeviceMetricCalibration = DeviceMetricCalibration;
/**
 * Code Values for the DeviceMetric.calibration.state field
 */
var DeviceMetricCalibrationStateEnum;
(function (DeviceMetricCalibrationStateEnum) {
    DeviceMetricCalibrationStateEnum["NOT_CALIBRATED"] = "not-calibrated";
    DeviceMetricCalibrationStateEnum["CALIBRATION_REQUIRED"] = "calibration-required";
    DeviceMetricCalibrationStateEnum["CALIBRATED"] = "calibrated";
    DeviceMetricCalibrationStateEnum["UNSPECIFIED"] = "unspecified";
})(DeviceMetricCalibrationStateEnum = exports.DeviceMetricCalibrationStateEnum || (exports.DeviceMetricCalibrationStateEnum = {}));
/**
 * Code Values for the DeviceMetric.calibration.type field
 */
var DeviceMetricCalibrationTypeEnum;
(function (DeviceMetricCalibrationTypeEnum) {
    DeviceMetricCalibrationTypeEnum["UNSPECIFIED"] = "unspecified";
    DeviceMetricCalibrationTypeEnum["OFFSET"] = "offset";
    DeviceMetricCalibrationTypeEnum["GAIN"] = "gain";
    DeviceMetricCalibrationTypeEnum["TWO_POINT"] = "two-point";
})(DeviceMetricCalibrationTypeEnum = exports.DeviceMetricCalibrationTypeEnum || (exports.DeviceMetricCalibrationTypeEnum = {}));
/**
 * Describes a measurement, calculation or setting capability of a medical device.
 */
class DeviceMetric extends fhirModels.DomainResource {
    /**
     * Default constructor for DeviceMetric from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "DeviceMetric";
        if ((source['resourceType'] !== "DeviceMetric") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a DeviceMetric';
        }
        if (source["calibration"] !== undefined) {
            this.calibration = source.calibration.map((x) => new fhirModels.DeviceMetricCalibration(x));
        }
        {
            this.category = source.category;
        }
        if (source["_category"] !== undefined) {
            this._category = new fhirModels.Element(source._category);
        }
        if (source["color"] !== undefined) {
            this.color = source.color;
        }
        if (source["_color"] !== undefined) {
            this._color = new fhirModels.Element(source._color);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["measurementPeriod"] !== undefined) {
            this.measurementPeriod = new fhirModels.Timing(source.measurementPeriod);
        }
        if (source["operationalStatus"] !== undefined) {
            this.operationalStatus = source.operationalStatus;
        }
        if (source["_operationalStatus"] !== undefined) {
            this._operationalStatus = new fhirModels.Element(source._operationalStatus);
        }
        if (source["parent"] !== undefined) {
            this.parent = new fhirModels.Reference(source.parent);
        }
        if (source["source"] !== undefined) {
            this.source = new fhirModels.Reference(source.source);
        }
        {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["unit"] !== undefined) {
            this.unit = new fhirModels.CodeableConcept(source.unit);
        }
    }
}
exports.DeviceMetric = DeviceMetric;
/**
 * Code Values for the DeviceMetric.category field
 */
var DeviceMetricCategoryEnum;
(function (DeviceMetricCategoryEnum) {
    DeviceMetricCategoryEnum["MEASUREMENT"] = "measurement";
    DeviceMetricCategoryEnum["SETTING"] = "setting";
    DeviceMetricCategoryEnum["CALCULATION"] = "calculation";
    DeviceMetricCategoryEnum["UNSPECIFIED"] = "unspecified";
})(DeviceMetricCategoryEnum = exports.DeviceMetricCategoryEnum || (exports.DeviceMetricCategoryEnum = {}));
/**
 * Code Values for the DeviceMetric.color field
 */
var DeviceMetricColorEnum;
(function (DeviceMetricColorEnum) {
    DeviceMetricColorEnum["BLACK"] = "black";
    DeviceMetricColorEnum["RED"] = "red";
    DeviceMetricColorEnum["GREEN"] = "green";
    DeviceMetricColorEnum["YELLOW"] = "yellow";
    DeviceMetricColorEnum["BLUE"] = "blue";
    DeviceMetricColorEnum["MAGENTA"] = "magenta";
    DeviceMetricColorEnum["CYAN"] = "cyan";
    DeviceMetricColorEnum["WHITE"] = "white";
})(DeviceMetricColorEnum = exports.DeviceMetricColorEnum || (exports.DeviceMetricColorEnum = {}));
/**
 * Code Values for the DeviceMetric.operationalStatus field
 */
var DeviceMetricOperationalStatusEnum;
(function (DeviceMetricOperationalStatusEnum) {
    DeviceMetricOperationalStatusEnum["ON"] = "on";
    DeviceMetricOperationalStatusEnum["OFF"] = "off";
    DeviceMetricOperationalStatusEnum["STANDBY"] = "standby";
    DeviceMetricOperationalStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(DeviceMetricOperationalStatusEnum = exports.DeviceMetricOperationalStatusEnum || (exports.DeviceMetricOperationalStatusEnum = {}));
//# sourceMappingURL=DeviceMetric.js.map