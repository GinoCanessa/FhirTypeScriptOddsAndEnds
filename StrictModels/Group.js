"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupTypeEnum = exports.Group = exports.GroupMember = exports.GroupCharacteristic = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * All the identified characteristics must be true for an entity to a member of the group.
 */
class GroupCharacteristic extends fhirModels.BackboneElement {
    /**
     * Default constructor for GroupCharacteristic from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        {
            this.exclude = source.exclude;
        }
        if (source["_exclude"] !== undefined) {
            this._exclude = new fhirModels.Element(source._exclude);
        }
        if (source["period"] !== undefined) {
            this.period = new fhirModels.Period(source.period);
        }
        if (source["valueCodeableConcept"] !== undefined) {
            this.valueCodeableConcept = new fhirModels.CodeableConcept(source.valueCodeableConcept);
        }
        if (source["valueBoolean"] !== undefined) {
            this.valueBoolean = source.valueBoolean;
        }
        if (source["_valueBoolean"] !== undefined) {
            this._valueBoolean = new fhirModels.Element(source._valueBoolean);
        }
        if (source["valueQuantity"] !== undefined) {
            this.valueQuantity = new fhirModels.Quantity(source.valueQuantity);
        }
        if (source["valueRange"] !== undefined) {
            this.valueRange = new fhirModels.Range(source.valueRange);
        }
        if (source["valueReference"] !== undefined) {
            this.valueReference = new fhirModels.Reference(source.valueReference);
        }
    }
}
exports.GroupCharacteristic = GroupCharacteristic;
/**
 * Identifies the resource instances that are members of the group.
 */
class GroupMember extends fhirModels.BackboneElement {
    /**
     * Default constructor for GroupMember from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.entity = new fhirModels.Reference(source.entity);
        }
        if (source["inactive"] !== undefined) {
            this.inactive = source.inactive;
        }
        if (source["_inactive"] !== undefined) {
            this._inactive = new fhirModels.Element(source._inactive);
        }
        if (source["period"] !== undefined) {
            this.period = new fhirModels.Period(source.period);
        }
    }
}
exports.GroupMember = GroupMember;
/**
 * Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
 */
class Group extends fhirModels.DomainResource {
    /**
     * Default constructor for Group from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "Group";
        if ((source['resourceType'] !== "Group") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Group';
        }
        if (source["active"] !== undefined) {
            this.active = source.active;
        }
        if (source["_active"] !== undefined) {
            this._active = new fhirModels.Element(source._active);
        }
        {
            this.actual = source.actual;
        }
        if (source["_actual"] !== undefined) {
            this._actual = new fhirModels.Element(source._actual);
        }
        if (source["characteristic"] !== undefined) {
            this.characteristic = source.characteristic.map((x) => new fhirModels.GroupCharacteristic(x));
        }
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["managingEntity"] !== undefined) {
            this.managingEntity = new fhirModels.Reference(source.managingEntity);
        }
        if (source["member"] !== undefined) {
            this.member = source.member.map((x) => new fhirModels.GroupMember(x));
        }
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["quantity"] !== undefined) {
            this.quantity = source.quantity;
        }
        if (source["_quantity"] !== undefined) {
            this._quantity = new fhirModels.Element(source._quantity);
        }
        {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
    }
}
exports.Group = Group;
/**
 * Code Values for the Group.type field
 */
var GroupTypeEnum;
(function (GroupTypeEnum) {
    GroupTypeEnum["PERSON"] = "person";
    GroupTypeEnum["ANIMAL"] = "animal";
    GroupTypeEnum["PRACTITIONER"] = "practitioner";
    GroupTypeEnum["DEVICE"] = "device";
    GroupTypeEnum["MEDICATION"] = "medication";
    GroupTypeEnum["SUBSTANCE"] = "substance";
})(GroupTypeEnum = exports.GroupTypeEnum || (exports.GroupTypeEnum = {}));
//# sourceMappingURL=Group.js.map