var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * Supporting evidence or manifestations that provide the basis for identifying the detected issue such as a GuidanceResponse or MeasureReport.
 */
var DetectedIssueEvidence = /** @class */ (function (_super) {
    __extends(DetectedIssueEvidence, _super);
    /**
     * Default constructor for DetectedIssueEvidence from an object that MAY NOT contain all required elements.
     */
    function DetectedIssueEvidence(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = source.code.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["detail"] !== undefined) {
            _this.detail = source.detail.map(function (x) { return new fhirModels.Reference(x); });
        }
        return _this;
    }
    return DetectedIssueEvidence;
}(fhirModels.BackboneElement));
export { DetectedIssueEvidence };
/**
 * Indicates an action that has been taken or is committed to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
 */
var DetectedIssueMitigation = /** @class */ (function (_super) {
    __extends(DetectedIssueMitigation, _super);
    /**
     * Default constructor for DetectedIssueMitigation from an object that MAY NOT contain all required elements.
     */
    function DetectedIssueMitigation(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.action = new fhirModels.CodeableConcept(source.action);
        }
        if (source["author"] !== undefined) {
            _this.author = new fhirModels.Reference(source.author);
        }
        if (source["date"] !== undefined) {
            _this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            _this._date = new fhirModels.Element(source._date);
        }
        return _this;
    }
    return DetectedIssueMitigation;
}(fhirModels.BackboneElement));
export { DetectedIssueMitigation };
/**
 * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.
 */
var DetectedIssue = /** @class */ (function (_super) {
    __extends(DetectedIssue, _super);
    /**
     * Default constructor for DetectedIssue from an object that MAY NOT contain all required elements.
     */
    function DetectedIssue(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "DetectedIssue";
        if ((source['resourceType'] !== "DetectedIssue") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a DetectedIssue';
        }
        if (source["author"] !== undefined) {
            _this.author = new fhirModels.Reference(source.author);
        }
        if (source["code"] !== undefined) {
            _this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["detail"] !== undefined) {
            _this.detail = source.detail;
        }
        if (source["_detail"] !== undefined) {
            _this._detail = new fhirModels.Element(source._detail);
        }
        if (source["evidence"] !== undefined) {
            _this.evidence = source.evidence.map(function (x) { return new fhirModels.DetectedIssueEvidence(x); });
        }
        if (source["identifiedDateTime"] !== undefined) {
            _this.identifiedDateTime = source.identifiedDateTime;
        }
        if (source["_identifiedDateTime"] !== undefined) {
            _this._identifiedDateTime = new fhirModels.Element(source._identifiedDateTime);
        }
        if (source["identifiedPeriod"] !== undefined) {
            _this.identifiedPeriod = new fhirModels.Period(source.identifiedPeriod);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["implicated"] !== undefined) {
            _this.implicated = source.implicated.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["mitigation"] !== undefined) {
            _this.mitigation = source.mitigation.map(function (x) { return new fhirModels.DetectedIssueMitigation(x); });
        }
        if (source["patient"] !== undefined) {
            _this.patient = new fhirModels.Reference(source.patient);
        }
        if (source["reference"] !== undefined) {
            _this.reference = source.reference;
        }
        if (source["_reference"] !== undefined) {
            _this._reference = new fhirModels.Element(source._reference);
        }
        if (source["severity"] !== undefined) {
            _this.severity = source.severity;
        }
        if (source["_severity"] !== undefined) {
            _this._severity = new fhirModels.Element(source._severity);
        }
        {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        return _this;
    }
    return DetectedIssue;
}(fhirModels.DomainResource));
export { DetectedIssue };
/**
 * Code Values for the DetectedIssue.severity field
 */
export var DetectedIssueSeverityEnum;
(function (DetectedIssueSeverityEnum) {
    DetectedIssueSeverityEnum["HIGH"] = "high";
    DetectedIssueSeverityEnum["MODERATE"] = "moderate";
    DetectedIssueSeverityEnum["LOW"] = "low";
})(DetectedIssueSeverityEnum || (DetectedIssueSeverityEnum = {}));
/**
 * Code Values for the DetectedIssue.status field
 */
export var DetectedIssueStatusEnum;
(function (DetectedIssueStatusEnum) {
    DetectedIssueStatusEnum["REGISTERED"] = "registered";
    DetectedIssueStatusEnum["PRELIMINARY"] = "preliminary";
    DetectedIssueStatusEnum["FINAL"] = "final";
    DetectedIssueStatusEnum["AMENDED"] = "amended";
    DetectedIssueStatusEnum["CORRECTED"] = "corrected";
    DetectedIssueStatusEnum["CANCELLED"] = "cancelled";
    DetectedIssueStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    DetectedIssueStatusEnum["UNKNOWN"] = "unknown";
})(DetectedIssueStatusEnum || (DetectedIssueStatusEnum = {}));
