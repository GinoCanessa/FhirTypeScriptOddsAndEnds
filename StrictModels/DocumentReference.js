var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * This element is labeled as a modifier because documents that append to other documents are incomplete on their own.
 */
var DocumentReferenceRelatesTo = /** @class */ (function (_super) {
    __extends(DocumentReferenceRelatesTo, _super);
    /**
     * Default constructor for DocumentReferenceRelatesTo from an object that MAY NOT contain all required elements.
     */
    function DocumentReferenceRelatesTo(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            _this._code = new fhirModels.Element(source._code);
        }
        {
            _this.target = new fhirModels.Reference(source.target);
        }
        return _this;
    }
    return DocumentReferenceRelatesTo;
}(fhirModels.BackboneElement));
export { DocumentReferenceRelatesTo };
/**
 * Code Values for the DocumentReference.relatesTo.code field
 */
export var DocumentReferenceRelatesToCodeEnum;
(function (DocumentReferenceRelatesToCodeEnum) {
    DocumentReferenceRelatesToCodeEnum["REPLACES"] = "replaces";
    DocumentReferenceRelatesToCodeEnum["TRANSFORMS"] = "transforms";
    DocumentReferenceRelatesToCodeEnum["SIGNS"] = "signs";
    DocumentReferenceRelatesToCodeEnum["APPENDS"] = "appends";
})(DocumentReferenceRelatesToCodeEnum || (DocumentReferenceRelatesToCodeEnum = {}));
/**
 * The document and format referenced. There may be multiple content element repetitions, each with a different format.
 */
var DocumentReferenceContent = /** @class */ (function (_super) {
    __extends(DocumentReferenceContent, _super);
    /**
     * Default constructor for DocumentReferenceContent from an object that MAY NOT contain all required elements.
     */
    function DocumentReferenceContent(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.attachment = new fhirModels.Attachment(source.attachment);
        }
        if (source["format"] !== undefined) {
            _this.format = new fhirModels.Coding(source.format);
        }
        return _this;
    }
    return DocumentReferenceContent;
}(fhirModels.BackboneElement));
export { DocumentReferenceContent };
/**
 * These values are primarily added to help with searching for interesting/relevant documents.
 */
var DocumentReferenceContext = /** @class */ (function (_super) {
    __extends(DocumentReferenceContext, _super);
    /**
     * Default constructor for DocumentReferenceContext from an object that MAY NOT contain all required elements.
     */
    function DocumentReferenceContext(source) {
        var _this = _super.call(this, source) || this;
        if (source["encounter"] !== undefined) {
            _this.encounter = source.encounter.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["event"] !== undefined) {
            _this.event = source.event.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["facilityType"] !== undefined) {
            _this.facilityType = new fhirModels.CodeableConcept(source.facilityType);
        }
        if (source["period"] !== undefined) {
            _this.period = new fhirModels.Period(source.period);
        }
        if (source["practiceSetting"] !== undefined) {
            _this.practiceSetting = new fhirModels.CodeableConcept(source.practiceSetting);
        }
        if (source["related"] !== undefined) {
            _this.related = source.related.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["sourcePatientInfo"] !== undefined) {
            _this.sourcePatientInfo = new fhirModels.Reference(source.sourcePatientInfo);
        }
        return _this;
    }
    return DocumentReferenceContext;
}(fhirModels.BackboneElement));
export { DocumentReferenceContext };
/**
 * A reference to a document of any kind for any purpose. Provides metadata about the document so that the document can be discovered and managed. The scope of a document is any seralized object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, scanned paper, and non-patient specific documents like policy text.
 */
var DocumentReference = /** @class */ (function (_super) {
    __extends(DocumentReference, _super);
    /**
     * Default constructor for DocumentReference from an object that MAY NOT contain all required elements.
     */
    function DocumentReference(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "DocumentReference";
        if ((source['resourceType'] !== "DocumentReference") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a DocumentReference';
        }
        if (source["authenticator"] !== undefined) {
            _this.authenticator = new fhirModels.Reference(source.authenticator);
        }
        if (source["author"] !== undefined) {
            _this.author = source.author.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["category"] !== undefined) {
            _this.category = source.category.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        {
            _this.content = source.content.map(function (x) { return new fhirModels.DocumentReferenceContent(x); });
        }
        if (source["context"] !== undefined) {
            _this.context = new fhirModels.DocumentReferenceContext(source.context);
        }
        if (source["custodian"] !== undefined) {
            _this.custodian = new fhirModels.Reference(source.custodian);
        }
        if (source["date"] !== undefined) {
            _this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            _this._date = new fhirModels.Element(source._date);
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["docStatus"] !== undefined) {
            _this.docStatus = source.docStatus;
        }
        if (source["_docStatus"] !== undefined) {
            _this._docStatus = new fhirModels.Element(source._docStatus);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["masterIdentifier"] !== undefined) {
            _this.masterIdentifier = new fhirModels.Identifier(source.masterIdentifier);
        }
        if (source["relatesTo"] !== undefined) {
            _this.relatesTo = source.relatesTo.map(function (x) { return new fhirModels.DocumentReferenceRelatesTo(x); });
        }
        if (source["securityLabel"] !== undefined) {
            _this.securityLabel = source.securityLabel.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["subject"] !== undefined) {
            _this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    return DocumentReference;
}(fhirModels.DomainResource));
export { DocumentReference };
/**
 * Code Values for the DocumentReference.docStatus field
 */
export var DocumentReferenceDocStatusEnum;
(function (DocumentReferenceDocStatusEnum) {
    DocumentReferenceDocStatusEnum["PRELIMINARY"] = "preliminary";
    DocumentReferenceDocStatusEnum["FINAL"] = "final";
    DocumentReferenceDocStatusEnum["AMENDED"] = "amended";
    DocumentReferenceDocStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(DocumentReferenceDocStatusEnum || (DocumentReferenceDocStatusEnum = {}));
/**
 * Code Values for the DocumentReference.status field
 */
export var DocumentReferenceStatusEnum;
(function (DocumentReferenceStatusEnum) {
    DocumentReferenceStatusEnum["CURRENT"] = "current";
    DocumentReferenceStatusEnum["SUPERSEDED"] = "superseded";
    DocumentReferenceStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(DocumentReferenceStatusEnum || (DocumentReferenceStatusEnum = {}));
