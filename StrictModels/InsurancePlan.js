"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InsurancePlanStatusEnum = exports.InsurancePlan = exports.InsurancePlanPlan = exports.InsurancePlanPlanSpecificCost = exports.InsurancePlanPlanSpecificCostBenefit = exports.InsurancePlanPlanSpecificCostBenefitCost = exports.InsurancePlanPlanGeneralCost = exports.InsurancePlanCoverage = exports.InsurancePlanCoverageBenefit = exports.InsurancePlanCoverageBenefitLimit = exports.InsurancePlanContact = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
 */
class InsurancePlanContact extends fhirModels.BackboneElement {
    /**
     * Default constructor for InsurancePlanContact from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["address"] !== undefined) {
            this.address = new fhirModels.Address(source.address);
        }
        if (source["name"] !== undefined) {
            this.name = new fhirModels.HumanName(source.name);
        }
        if (source["purpose"] !== undefined) {
            this.purpose = new fhirModels.CodeableConcept(source.purpose);
        }
        if (source["telecom"] !== undefined) {
            this.telecom = source.telecom.map((x) => new fhirModels.ContactPoint(x));
        }
    }
}
exports.InsurancePlanContact = InsurancePlanContact;
/**
 * The specific limits on the benefit.
 */
class InsurancePlanCoverageBenefitLimit extends fhirModels.BackboneElement {
    /**
     * Default constructor for InsurancePlanCoverageBenefitLimit from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["value"] !== undefined) {
            this.value = new fhirModels.Quantity(source.value);
        }
    }
}
exports.InsurancePlanCoverageBenefitLimit = InsurancePlanCoverageBenefitLimit;
/**
 * Specific benefits under this type of coverage.
 */
class InsurancePlanCoverageBenefit extends fhirModels.BackboneElement {
    /**
     * Default constructor for InsurancePlanCoverageBenefit from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["limit"] !== undefined) {
            this.limit = source.limit.map((x) => new fhirModels.InsurancePlanCoverageBenefitLimit(x));
        }
        if (source["requirement"] !== undefined) {
            this.requirement = source.requirement;
        }
        if (source["_requirement"] !== undefined) {
            this._requirement = new fhirModels.Element(source._requirement);
        }
        {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.InsurancePlanCoverageBenefit = InsurancePlanCoverageBenefit;
/**
 * Details about the coverage offered by the insurance product.
 */
class InsurancePlanCoverage extends fhirModels.BackboneElement {
    /**
     * Default constructor for InsurancePlanCoverage from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.benefit = source.benefit.map((x) => new fhirModels.InsurancePlanCoverageBenefit(x));
        }
        if (source["network"] !== undefined) {
            this.network = source.network.map((x) => new fhirModels.Reference(x));
        }
        {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.InsurancePlanCoverage = InsurancePlanCoverage;
/**
 * Overall costs associated with the plan.
 */
class InsurancePlanPlanGeneralCost extends fhirModels.BackboneElement {
    /**
     * Default constructor for InsurancePlanPlanGeneralCost from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["comment"] !== undefined) {
            this.comment = source.comment;
        }
        if (source["_comment"] !== undefined) {
            this._comment = new fhirModels.Element(source._comment);
        }
        if (source["cost"] !== undefined) {
            this.cost = new fhirModels.Money(source.cost);
        }
        if (source["groupSize"] !== undefined) {
            this.groupSize = source.groupSize;
        }
        if (source["_groupSize"] !== undefined) {
            this._groupSize = new fhirModels.Element(source._groupSize);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.InsurancePlanPlanGeneralCost = InsurancePlanPlanGeneralCost;
/**
 * List of the costs associated with a specific benefit.
 */
class InsurancePlanPlanSpecificCostBenefitCost extends fhirModels.BackboneElement {
    /**
     * Default constructor for InsurancePlanPlanSpecificCostBenefitCost from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["applicability"] !== undefined) {
            this.applicability = new fhirModels.CodeableConcept(source.applicability);
        }
        if (source["qualifiers"] !== undefined) {
            this.qualifiers = source.qualifiers.map((x) => new fhirModels.CodeableConcept(x));
        }
        {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["value"] !== undefined) {
            this.value = new fhirModels.Quantity(source.value);
        }
    }
}
exports.InsurancePlanPlanSpecificCostBenefitCost = InsurancePlanPlanSpecificCostBenefitCost;
/**
 * List of the specific benefits under this category of benefit.
 */
class InsurancePlanPlanSpecificCostBenefit extends fhirModels.BackboneElement {
    /**
     * Default constructor for InsurancePlanPlanSpecificCostBenefit from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["cost"] !== undefined) {
            this.cost = source.cost.map((x) => new fhirModels.InsurancePlanPlanSpecificCostBenefitCost(x));
        }
        {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.InsurancePlanPlanSpecificCostBenefit = InsurancePlanPlanSpecificCostBenefit;
/**
 * Costs associated with the coverage provided by the product.
 */
class InsurancePlanPlanSpecificCost extends fhirModels.BackboneElement {
    /**
     * Default constructor for InsurancePlanPlanSpecificCost from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["benefit"] !== undefined) {
            this.benefit = source.benefit.map((x) => new fhirModels.InsurancePlanPlanSpecificCostBenefit(x));
        }
        {
            this.category = new fhirModels.CodeableConcept(source.category);
        }
    }
}
exports.InsurancePlanPlanSpecificCost = InsurancePlanPlanSpecificCost;
/**
 * Details about an insurance plan.
 */
class InsurancePlanPlan extends fhirModels.BackboneElement {
    /**
     * Default constructor for InsurancePlanPlan from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["coverageArea"] !== undefined) {
            this.coverageArea = source.coverageArea.map((x) => new fhirModels.Reference(x));
        }
        if (source["generalCost"] !== undefined) {
            this.generalCost = source.generalCost.map((x) => new fhirModels.InsurancePlanPlanGeneralCost(x));
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["network"] !== undefined) {
            this.network = source.network.map((x) => new fhirModels.Reference(x));
        }
        if (source["specificCost"] !== undefined) {
            this.specificCost = source.specificCost.map((x) => new fhirModels.InsurancePlanPlanSpecificCost(x));
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.InsurancePlanPlan = InsurancePlanPlan;
/**
 * Details of a Health Insurance product/plan provided by an organization.
 */
class InsurancePlan extends fhirModels.DomainResource {
    /**
     * Default constructor for InsurancePlan from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "InsurancePlan";
        if ((source['resourceType'] !== "InsurancePlan") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a InsurancePlan';
        }
        if (source["administeredBy"] !== undefined) {
            this.administeredBy = new fhirModels.Reference(source.administeredBy);
        }
        if (source["alias"] !== undefined) {
            this.alias = source.alias.map((x) => (x));
        }
        if (source["_alias"] !== undefined) {
            this._alias = source._alias.map((x) => new fhirModels.Element(x));
        }
        if (source["contact"] !== undefined) {
            this.contact = source.contact.map((x) => new fhirModels.InsurancePlanContact(x));
        }
        if (source["coverage"] !== undefined) {
            this.coverage = source.coverage.map((x) => new fhirModels.InsurancePlanCoverage(x));
        }
        if (source["coverageArea"] !== undefined) {
            this.coverageArea = source.coverageArea.map((x) => new fhirModels.Reference(x));
        }
        if (source["endpoint"] !== undefined) {
            this.endpoint = source.endpoint.map((x) => new fhirModels.Reference(x));
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["network"] !== undefined) {
            this.network = source.network.map((x) => new fhirModels.Reference(x));
        }
        if (source["ownedBy"] !== undefined) {
            this.ownedBy = new fhirModels.Reference(source.ownedBy);
        }
        if (source["period"] !== undefined) {
            this.period = new fhirModels.Period(source.period);
        }
        if (source["plan"] !== undefined) {
            this.plan = source.plan.map((x) => new fhirModels.InsurancePlanPlan(x));
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["type"] !== undefined) {
            this.type = source.type.map((x) => new fhirModels.CodeableConcept(x));
        }
    }
}
exports.InsurancePlan = InsurancePlan;
/**
 * Code Values for the InsurancePlan.status field
 */
var InsurancePlanStatusEnum;
(function (InsurancePlanStatusEnum) {
    InsurancePlanStatusEnum["DRAFT"] = "draft";
    InsurancePlanStatusEnum["ACTIVE"] = "active";
    InsurancePlanStatusEnum["RETIRED"] = "retired";
    InsurancePlanStatusEnum["UNKNOWN"] = "unknown";
})(InsurancePlanStatusEnum = exports.InsurancePlanStatusEnum || (exports.InsurancePlanStatusEnum = {}));
//# sourceMappingURL=InsurancePlan.js.map