"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HealthcareService = exports.HealthcareServiceNotAvailable = exports.HealthcareServiceAvailableTimeDaysOfWeekEnum = exports.HealthcareServiceAvailableTime = exports.HealthcareServiceEligibility = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Does this service have specific eligibility requirements that need to be met in order to use the service?
 */
class HealthcareServiceEligibility extends fhirModels.BackboneElement {
    /**
     * Default constructor for HealthcareServiceEligibility from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["comment"] !== undefined) {
            this.comment = source.comment;
        }
        if (source["_comment"] !== undefined) {
            this._comment = new fhirModels.Element(source._comment);
        }
    }
}
exports.HealthcareServiceEligibility = HealthcareServiceEligibility;
/**
 * More detailed availability information may be provided in associated Schedule/Slot resources.
 */
class HealthcareServiceAvailableTime extends fhirModels.BackboneElement {
    /**
     * Default constructor for HealthcareServiceAvailableTime from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["allDay"] !== undefined) {
            this.allDay = source.allDay;
        }
        if (source["_allDay"] !== undefined) {
            this._allDay = new fhirModels.Element(source._allDay);
        }
        if (source["availableEndTime"] !== undefined) {
            this.availableEndTime = source.availableEndTime;
        }
        if (source["_availableEndTime"] !== undefined) {
            this._availableEndTime = new fhirModels.Element(source._availableEndTime);
        }
        if (source["availableStartTime"] !== undefined) {
            this.availableStartTime = source.availableStartTime;
        }
        if (source["_availableStartTime"] !== undefined) {
            this._availableStartTime = new fhirModels.Element(source._availableStartTime);
        }
        if (source["daysOfWeek"] !== undefined) {
            this.daysOfWeek = source.daysOfWeek.map((x) => (x));
        }
        if (source["_daysOfWeek"] !== undefined) {
            this._daysOfWeek = source._daysOfWeek.map((x) => new fhirModels.Element(x));
        }
    }
}
exports.HealthcareServiceAvailableTime = HealthcareServiceAvailableTime;
/**
 * Code Values for the HealthcareService.availableTime.daysOfWeek field
 */
var HealthcareServiceAvailableTimeDaysOfWeekEnum;
(function (HealthcareServiceAvailableTimeDaysOfWeekEnum) {
    HealthcareServiceAvailableTimeDaysOfWeekEnum["MON"] = "mon";
    HealthcareServiceAvailableTimeDaysOfWeekEnum["TUE"] = "tue";
    HealthcareServiceAvailableTimeDaysOfWeekEnum["WED"] = "wed";
    HealthcareServiceAvailableTimeDaysOfWeekEnum["THU"] = "thu";
    HealthcareServiceAvailableTimeDaysOfWeekEnum["FRI"] = "fri";
    HealthcareServiceAvailableTimeDaysOfWeekEnum["SAT"] = "sat";
    HealthcareServiceAvailableTimeDaysOfWeekEnum["SUN"] = "sun";
})(HealthcareServiceAvailableTimeDaysOfWeekEnum = exports.HealthcareServiceAvailableTimeDaysOfWeekEnum || (exports.HealthcareServiceAvailableTimeDaysOfWeekEnum = {}));
/**
 * The HealthcareService is not available during this period of time due to the provided reason.
 */
class HealthcareServiceNotAvailable extends fhirModels.BackboneElement {
    /**
     * Default constructor for HealthcareServiceNotAvailable from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["during"] !== undefined) {
            this.during = new fhirModels.Period(source.during);
        }
    }
}
exports.HealthcareServiceNotAvailable = HealthcareServiceNotAvailable;
/**
 * The details of a healthcare service available at a location.
 */
class HealthcareService extends fhirModels.DomainResource {
    /**
     * Default constructor for HealthcareService from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "HealthcareService";
        if ((source['resourceType'] !== "HealthcareService") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a HealthcareService';
        }
        if (source["active"] !== undefined) {
            this.active = source.active;
        }
        if (source["_active"] !== undefined) {
            this._active = new fhirModels.Element(source._active);
        }
        if (source["appointmentRequired"] !== undefined) {
            this.appointmentRequired = source.appointmentRequired;
        }
        if (source["_appointmentRequired"] !== undefined) {
            this._appointmentRequired = new fhirModels.Element(source._appointmentRequired);
        }
        if (source["availabilityExceptions"] !== undefined) {
            this.availabilityExceptions = source.availabilityExceptions;
        }
        if (source["_availabilityExceptions"] !== undefined) {
            this._availabilityExceptions = new fhirModels.Element(source._availabilityExceptions);
        }
        if (source["availableTime"] !== undefined) {
            this.availableTime = source.availableTime.map((x) => new fhirModels.HealthcareServiceAvailableTime(x));
        }
        if (source["category"] !== undefined) {
            this.category = source.category.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["characteristic"] !== undefined) {
            this.characteristic = source.characteristic.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["comment"] !== undefined) {
            this.comment = source.comment;
        }
        if (source["_comment"] !== undefined) {
            this._comment = new fhirModels.Element(source._comment);
        }
        if (source["communication"] !== undefined) {
            this.communication = source.communication.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["coverageArea"] !== undefined) {
            this.coverageArea = source.coverageArea.map((x) => new fhirModels.Reference(x));
        }
        if (source["eligibility"] !== undefined) {
            this.eligibility = source.eligibility.map((x) => new fhirModels.HealthcareServiceEligibility(x));
        }
        if (source["endpoint"] !== undefined) {
            this.endpoint = source.endpoint.map((x) => new fhirModels.Reference(x));
        }
        if (source["extraDetails"] !== undefined) {
            this.extraDetails = source.extraDetails;
        }
        if (source["_extraDetails"] !== undefined) {
            this._extraDetails = new fhirModels.Element(source._extraDetails);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["location"] !== undefined) {
            this.location = source.location.map((x) => new fhirModels.Reference(x));
        }
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["notAvailable"] !== undefined) {
            this.notAvailable = source.notAvailable.map((x) => new fhirModels.HealthcareServiceNotAvailable(x));
        }
        if (source["photo"] !== undefined) {
            this.photo = new fhirModels.Attachment(source.photo);
        }
        if (source["program"] !== undefined) {
            this.program = source.program.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["providedBy"] !== undefined) {
            this.providedBy = new fhirModels.Reference(source.providedBy);
        }
        if (source["referralMethod"] !== undefined) {
            this.referralMethod = source.referralMethod.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["serviceProvisionCode"] !== undefined) {
            this.serviceProvisionCode = source.serviceProvisionCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["specialty"] !== undefined) {
            this.specialty = source.specialty.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["telecom"] !== undefined) {
            this.telecom = source.telecom.map((x) => new fhirModels.ContactPoint(x));
        }
        if (source["type"] !== undefined) {
            this.type = source.type.map((x) => new fhirModels.CodeableConcept(x));
        }
    }
}
exports.HealthcareService = HealthcareService;
//# sourceMappingURL=HealthcareService.js.map