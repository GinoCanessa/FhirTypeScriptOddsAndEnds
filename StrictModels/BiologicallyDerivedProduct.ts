// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels'
import * as fhirInterfaces from '../strictinterfaces'
/**
 * How this product was collected.
 */
export class BiologicallyDerivedProductCollection extends fhirModels.BackboneElement implements fhirInterfaces.IBiologicallyDerivedProductCollection {
  /**
   * Time of product collection.
   */
  collectedDateTime?: string|undefined;
  _collectedDateTime?: fhirModels.Element|undefined;
  /**
   * Time of product collection.
   */
  collectedPeriod?: fhirModels.Period|undefined;
  /**
   * Healthcare professional who is performing the collection.
   */
  collector?: fhirModels.Reference|undefined;
  /**
   * The patient or entity, such as a hospital or vendor in the case of a processed/manipulated/manufactured product, providing the product.
   */
  source?: fhirModels.Reference|undefined;
  /**
   * Default constructor for BiologicallyDerivedProductCollection from an object that MAY NOT contain all required elements.
   */
  constructor(source:fhirInterfaces.IBiologicallyDerivedProductCollection) {
    super(source);
    if (source["collectedDateTime"] !== undefined) {
      this.collectedDateTime = source.collectedDateTime;
    }
    if (source["_collectedDateTime"] !== undefined) {
      this._collectedDateTime = new fhirModels.Element(source._collectedDateTime);
    }
    if (source["collectedPeriod"] !== undefined) {
      this.collectedPeriod = new fhirModels.Period(source.collectedPeriod);
    }
    if (source["collector"] !== undefined) {
      this.collector = new fhirModels.Reference(source.collector);
    }
    if (source["source"] !== undefined) {
      this.source = new fhirModels.Reference(source.source);
    }
  }
}
/**
 * Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
 */
export class BiologicallyDerivedProductProcessing extends fhirModels.BackboneElement implements fhirInterfaces.IBiologicallyDerivedProductProcessing {
  /**
   * Substance added during processing.
   */
  additive?: fhirModels.Reference|undefined;
  /**
   * Description of of processing.
   */
  description?: string|undefined;
  _description?: fhirModels.Element|undefined;
  /**
   * Procesing code.
   */
  procedure?: fhirModels.CodeableConcept|undefined;
  /**
   * Time of processing.
   */
  timeDateTime?: string|undefined;
  _timeDateTime?: fhirModels.Element|undefined;
  /**
   * Time of processing.
   */
  timePeriod?: fhirModels.Period|undefined;
  /**
   * Default constructor for BiologicallyDerivedProductProcessing from an object that MAY NOT contain all required elements.
   */
  constructor(source:fhirInterfaces.IBiologicallyDerivedProductProcessing) {
    super(source);
    if (source["additive"] !== undefined) {
      this.additive = new fhirModels.Reference(source.additive);
    }
    if (source["description"] !== undefined) {
      this.description = source.description;
    }
    if (source["_description"] !== undefined) {
      this._description = new fhirModels.Element(source._description);
    }
    if (source["procedure"] !== undefined) {
      this.procedure = new fhirModels.CodeableConcept(source.procedure);
    }
    if (source["timeDateTime"] !== undefined) {
      this.timeDateTime = source.timeDateTime;
    }
    if (source["_timeDateTime"] !== undefined) {
      this._timeDateTime = new fhirModels.Element(source._timeDateTime);
    }
    if (source["timePeriod"] !== undefined) {
      this.timePeriod = new fhirModels.Period(source.timePeriod);
    }
  }
}
/**
 * Any manipulation of product post-collection that is intended to alter the product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
 */
export class BiologicallyDerivedProductManipulation extends fhirModels.BackboneElement implements fhirInterfaces.IBiologicallyDerivedProductManipulation {
  /**
   * Description of manipulation.
   */
  description?: string|undefined;
  _description?: fhirModels.Element|undefined;
  /**
   * Time of manipulation.
   */
  timeDateTime?: string|undefined;
  _timeDateTime?: fhirModels.Element|undefined;
  /**
   * Time of manipulation.
   */
  timePeriod?: fhirModels.Period|undefined;
  /**
   * Default constructor for BiologicallyDerivedProductManipulation from an object that MAY NOT contain all required elements.
   */
  constructor(source:fhirInterfaces.IBiologicallyDerivedProductManipulation) {
    super(source);
    if (source["description"] !== undefined) {
      this.description = source.description;
    }
    if (source["_description"] !== undefined) {
      this._description = new fhirModels.Element(source._description);
    }
    if (source["timeDateTime"] !== undefined) {
      this.timeDateTime = source.timeDateTime;
    }
    if (source["_timeDateTime"] !== undefined) {
      this._timeDateTime = new fhirModels.Element(source._timeDateTime);
    }
    if (source["timePeriod"] !== undefined) {
      this.timePeriod = new fhirModels.Period(source.timePeriod);
    }
  }
}
/**
 * Product storage.
 */
export class BiologicallyDerivedProductStorage extends fhirModels.BackboneElement implements fhirInterfaces.IBiologicallyDerivedProductStorage {
  /**
   * Description of storage.
   */
  description?: string|undefined;
  _description?: fhirModels.Element|undefined;
  /**
   * Storage timeperiod.
   */
  duration?: fhirModels.Period|undefined;
  /**
   * Temperature scale used.
   */
  scale?: BiologicallyDerivedProductStorageScaleEnum|undefined;
  _scale?: fhirModels.Element|undefined;
  /**
   * Storage temperature.
   */
  temperature?: number|undefined;
  _temperature?: fhirModels.Element|undefined;
  /**
   * Default constructor for BiologicallyDerivedProductStorage from an object that MAY NOT contain all required elements.
   */
  constructor(source:fhirInterfaces.IBiologicallyDerivedProductStorage) {
    super(source);
    if (source["description"] !== undefined) {
      this.description = source.description;
    }
    if (source["_description"] !== undefined) {
      this._description = new fhirModels.Element(source._description);
    }
    if (source["duration"] !== undefined) {
      this.duration = new fhirModels.Period(source.duration);
    }
    if (source["scale"] !== undefined) {
      this.scale = source.scale;
    }
    if (source["_scale"] !== undefined) {
      this._scale = new fhirModels.Element(source._scale);
    }
    if (source["temperature"] !== undefined) {
      this.temperature = source.temperature;
    }
    if (source["_temperature"] !== undefined) {
      this._temperature = new fhirModels.Element(source._temperature);
    }
  }
}
/**
 * Code Values for the BiologicallyDerivedProduct.storage.scale field
 */
export enum BiologicallyDerivedProductStorageScaleEnum {
  FARENHEIT = "farenheit",
  CELSIUS = "celsius",
  KELVIN = "kelvin",
}
/**
 * A material substance originating from a biological entity intended to be transplanted or infused
 * into another (possibly the same) biological entity.
 */
export class BiologicallyDerivedProduct extends fhirModels.DomainResource implements fhirInterfaces.IBiologicallyDerivedProduct {
  /**
   * Resource Type Name
   */
  readonly resourceType = "BiologicallyDerivedProduct";
  /**
   * How this product was collected.
   */
  collection?: fhirModels.BiologicallyDerivedProductCollection|undefined;
  /**
   * This records identifiers associated with this biologically derived product instance that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  identifier?: fhirModels.Identifier[]|undefined;
  /**
   * Any manipulation of product post-collection that is intended to alter the product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
   */
  manipulation?: fhirModels.BiologicallyDerivedProductManipulation|undefined;
  /**
   * For products that have multiple collections. For example Peripheral Blood Stem Cells may be collected over several days from a single donor and the donation split into in multiple containers which must be linked to the parent donation.
   */
  parent?: fhirModels.Reference[]|undefined;
  /**
   * Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
   */
  processing?: fhirModels.BiologicallyDerivedProductProcessing[]|undefined;
  /**
   * Broad category of this product.
   */
  productCategory?: BiologicallyDerivedProductProductCategoryEnum|undefined;
  _productCategory?: fhirModels.Element|undefined;
  /**
   * A code that identifies the kind of this biologically derived product (SNOMED Ctcode).
   */
  productCode?: fhirModels.CodeableConcept|undefined;
  /**
   * Number of discrete units within this product.
   */
  quantity?: number|undefined;
  _quantity?: fhirModels.Element|undefined;
  /**
   * Procedure request to obtain this biologically derived product.
   */
  request?: fhirModels.Reference[]|undefined;
  /**
   * Whether the product is currently available.
   */
  status?: BiologicallyDerivedProductStatusEnum|undefined;
  _status?: fhirModels.Element|undefined;
  /**
   * Product storage.
   */
  storage?: fhirModels.BiologicallyDerivedProductStorage[]|undefined;
  /**
   * Default constructor for BiologicallyDerivedProduct from an object that MAY NOT contain all required elements.
   */
  constructor(source:fhirInterfaces.IBiologicallyDerivedProduct) {
    super(source);
    if ((source['resourceType'] !== "BiologicallyDerivedProduct") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a BiologicallyDerivedProduct'; }
    if (source["collection"] !== undefined) {
      this.collection = new fhirModels.BiologicallyDerivedProductCollection(source.collection);
    }
    if (source["identifier"] !== undefined) {
      this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
    }
    if (source["manipulation"] !== undefined) {
      this.manipulation = new fhirModels.BiologicallyDerivedProductManipulation(source.manipulation);
    }
    if (source["parent"] !== undefined) {
      this.parent = source.parent.map((x) => new fhirModels.Reference(x));
    }
    if (source["processing"] !== undefined) {
      this.processing = source.processing.map((x) => new fhirModels.BiologicallyDerivedProductProcessing(x));
    }
    if (source["productCategory"] !== undefined) {
      this.productCategory = source.productCategory;
    }
    if (source["_productCategory"] !== undefined) {
      this._productCategory = new fhirModels.Element(source._productCategory);
    }
    if (source["productCode"] !== undefined) {
      this.productCode = new fhirModels.CodeableConcept(source.productCode);
    }
    if (source["quantity"] !== undefined) {
      this.quantity = source.quantity;
    }
    if (source["_quantity"] !== undefined) {
      this._quantity = new fhirModels.Element(source._quantity);
    }
    if (source["request"] !== undefined) {
      this.request = source.request.map((x) => new fhirModels.Reference(x));
    }
    if (source["status"] !== undefined) {
      this.status = source.status;
    }
    if (source["_status"] !== undefined) {
      this._status = new fhirModels.Element(source._status);
    }
    if (source["storage"] !== undefined) {
      this.storage = source.storage.map((x) => new fhirModels.BiologicallyDerivedProductStorage(x));
    }
  }
}
/**
 * Code Values for the BiologicallyDerivedProduct.productCategory field
 */
export enum BiologicallyDerivedProductProductCategoryEnum {
  ORGAN = "organ",
  TISSUE = "tissue",
  FLUID = "fluid",
  CELLS = "cells",
  BIOLOGICALAGENT = "biologicalAgent",
}
/**
 * Code Values for the BiologicallyDerivedProduct.status field
 */
export enum BiologicallyDerivedProductStatusEnum {
  AVAILABLE = "available",
  UNAVAILABLE = "unavailable",
}
