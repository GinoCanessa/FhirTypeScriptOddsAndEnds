var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * A participant in the test execution, either the execution engine, a client, or a server.
 */
var TestReportParticipant = /** @class */ (function (_super) {
    __extends(TestReportParticipant, _super);
    /**
     * Default constructor for TestReportParticipant from an object that MAY NOT contain all required elements.
     */
    function TestReportParticipant(source) {
        var _this = _super.call(this, source) || this;
        if (source["display"] !== undefined) {
            _this.display = source.display;
        }
        if (source["_display"] !== undefined) {
            _this._display = new fhirModels.Element(source._display);
        }
        {
            _this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            _this._type = new fhirModels.Element(source._type);
        }
        {
            _this.uri = source.uri;
        }
        if (source["_uri"] !== undefined) {
            _this._uri = new fhirModels.Element(source._uri);
        }
        return _this;
    }
    return TestReportParticipant;
}(fhirModels.BackboneElement));
export { TestReportParticipant };
/**
 * Code Values for the TestReport.participant.type field
 */
export var TestReportParticipantTypeEnum;
(function (TestReportParticipantTypeEnum) {
    TestReportParticipantTypeEnum["TEST_ENGINE"] = "test-engine";
    TestReportParticipantTypeEnum["CLIENT"] = "client";
    TestReportParticipantTypeEnum["SERVER"] = "server";
})(TestReportParticipantTypeEnum || (TestReportParticipantTypeEnum = {}));
/**
 * The operation performed.
 */
var TestReportSetupActionOperation = /** @class */ (function (_super) {
    __extends(TestReportSetupActionOperation, _super);
    /**
     * Default constructor for TestReportSetupActionOperation from an object that MAY NOT contain all required elements.
     */
    function TestReportSetupActionOperation(source) {
        var _this = _super.call(this, source) || this;
        if (source["detail"] !== undefined) {
            _this.detail = source.detail;
        }
        if (source["_detail"] !== undefined) {
            _this._detail = new fhirModels.Element(source._detail);
        }
        if (source["message"] !== undefined) {
            _this.message = source.message;
        }
        if (source["_message"] !== undefined) {
            _this._message = new fhirModels.Element(source._message);
        }
        {
            _this.result = source.result;
        }
        if (source["_result"] !== undefined) {
            _this._result = new fhirModels.Element(source._result);
        }
        return _this;
    }
    return TestReportSetupActionOperation;
}(fhirModels.BackboneElement));
export { TestReportSetupActionOperation };
/**
 * Code Values for the TestReport.setup.action.operation.result field
 */
export var TestReportSetupActionOperationResultEnum;
(function (TestReportSetupActionOperationResultEnum) {
    TestReportSetupActionOperationResultEnum["PASS"] = "pass";
    TestReportSetupActionOperationResultEnum["SKIP"] = "skip";
    TestReportSetupActionOperationResultEnum["FAIL"] = "fail";
    TestReportSetupActionOperationResultEnum["WARNING"] = "warning";
    TestReportSetupActionOperationResultEnum["ERROR"] = "error";
})(TestReportSetupActionOperationResultEnum || (TestReportSetupActionOperationResultEnum = {}));
/**
 * The results of the assertion performed on the previous operations.
 */
var TestReportSetupActionAssert = /** @class */ (function (_super) {
    __extends(TestReportSetupActionAssert, _super);
    /**
     * Default constructor for TestReportSetupActionAssert from an object that MAY NOT contain all required elements.
     */
    function TestReportSetupActionAssert(source) {
        var _this = _super.call(this, source) || this;
        if (source["detail"] !== undefined) {
            _this.detail = source.detail;
        }
        if (source["_detail"] !== undefined) {
            _this._detail = new fhirModels.Element(source._detail);
        }
        if (source["message"] !== undefined) {
            _this.message = source.message;
        }
        if (source["_message"] !== undefined) {
            _this._message = new fhirModels.Element(source._message);
        }
        {
            _this.result = source.result;
        }
        if (source["_result"] !== undefined) {
            _this._result = new fhirModels.Element(source._result);
        }
        return _this;
    }
    return TestReportSetupActionAssert;
}(fhirModels.BackboneElement));
export { TestReportSetupActionAssert };
/**
 * Code Values for the TestReport.setup.action.assert.result field
 */
export var TestReportSetupActionAssertResultEnum;
(function (TestReportSetupActionAssertResultEnum) {
    TestReportSetupActionAssertResultEnum["PASS"] = "pass";
    TestReportSetupActionAssertResultEnum["SKIP"] = "skip";
    TestReportSetupActionAssertResultEnum["FAIL"] = "fail";
    TestReportSetupActionAssertResultEnum["WARNING"] = "warning";
    TestReportSetupActionAssertResultEnum["ERROR"] = "error";
})(TestReportSetupActionAssertResultEnum || (TestReportSetupActionAssertResultEnum = {}));
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
var TestReportSetupAction = /** @class */ (function (_super) {
    __extends(TestReportSetupAction, _super);
    /**
     * Default constructor for TestReportSetupAction from an object that MAY NOT contain all required elements.
     */
    function TestReportSetupAction(source) {
        var _this = _super.call(this, source) || this;
        if (source["assert"] !== undefined) {
            _this.assert = new fhirModels.TestReportSetupActionAssert(source.assert);
        }
        if (source["operation"] !== undefined) {
            _this.operation = new fhirModels.TestReportSetupActionOperation(source.operation);
        }
        return _this;
    }
    return TestReportSetupAction;
}(fhirModels.BackboneElement));
export { TestReportSetupAction };
/**
 * The results of the series of required setup operations before the tests were executed.
 */
var TestReportSetup = /** @class */ (function (_super) {
    __extends(TestReportSetup, _super);
    /**
     * Default constructor for TestReportSetup from an object that MAY NOT contain all required elements.
     */
    function TestReportSetup(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.action = source.action.map(function (x) { return new fhirModels.TestReportSetupAction(x); });
        }
        return _this;
    }
    return TestReportSetup;
}(fhirModels.BackboneElement));
export { TestReportSetup };
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
var TestReportTestAction = /** @class */ (function (_super) {
    __extends(TestReportTestAction, _super);
    /**
     * Default constructor for TestReportTestAction from an object that MAY NOT contain all required elements.
     */
    function TestReportTestAction(source) {
        var _this = _super.call(this, source) || this;
        if (source["assert"] !== undefined) {
            _this.assert = new fhirModels.TestReportSetupActionAssert(source.assert);
        }
        if (source["operation"] !== undefined) {
            _this.operation = new fhirModels.TestReportSetupActionOperation(source.operation);
        }
        return _this;
    }
    return TestReportTestAction;
}(fhirModels.BackboneElement));
export { TestReportTestAction };
/**
 * A test executed from the test script.
 */
var TestReportTest = /** @class */ (function (_super) {
    __extends(TestReportTest, _super);
    /**
     * Default constructor for TestReportTest from an object that MAY NOT contain all required elements.
     */
    function TestReportTest(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.action = source.action.map(function (x) { return new fhirModels.TestReportTestAction(x); });
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["name"] !== undefined) {
            _this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            _this._name = new fhirModels.Element(source._name);
        }
        return _this;
    }
    return TestReportTest;
}(fhirModels.BackboneElement));
export { TestReportTest };
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
var TestReportTeardownAction = /** @class */ (function (_super) {
    __extends(TestReportTeardownAction, _super);
    /**
     * Default constructor for TestReportTeardownAction from an object that MAY NOT contain all required elements.
     */
    function TestReportTeardownAction(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.operation = new fhirModels.TestReportSetupActionOperation(source.operation);
        }
        return _this;
    }
    return TestReportTeardownAction;
}(fhirModels.BackboneElement));
export { TestReportTeardownAction };
/**
 * The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
 */
var TestReportTeardown = /** @class */ (function (_super) {
    __extends(TestReportTeardown, _super);
    /**
     * Default constructor for TestReportTeardown from an object that MAY NOT contain all required elements.
     */
    function TestReportTeardown(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.action = source.action.map(function (x) { return new fhirModels.TestReportTeardownAction(x); });
        }
        return _this;
    }
    return TestReportTeardown;
}(fhirModels.BackboneElement));
export { TestReportTeardown };
/**
 * A summary of information based on the results of executing a TestScript.
 */
var TestReport = /** @class */ (function (_super) {
    __extends(TestReport, _super);
    /**
     * Default constructor for TestReport from an object that MAY NOT contain all required elements.
     */
    function TestReport(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "TestReport";
        if ((source['resourceType'] !== "TestReport") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a TestReport';
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = new fhirModels.Identifier(source.identifier);
        }
        if (source["issued"] !== undefined) {
            _this.issued = source.issued;
        }
        if (source["_issued"] !== undefined) {
            _this._issued = new fhirModels.Element(source._issued);
        }
        if (source["name"] !== undefined) {
            _this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            _this._name = new fhirModels.Element(source._name);
        }
        if (source["participant"] !== undefined) {
            _this.participant = source.participant.map(function (x) { return new fhirModels.TestReportParticipant(x); });
        }
        {
            _this.result = source.result;
        }
        if (source["_result"] !== undefined) {
            _this._result = new fhirModels.Element(source._result);
        }
        if (source["score"] !== undefined) {
            _this.score = source.score;
        }
        if (source["_score"] !== undefined) {
            _this._score = new fhirModels.Element(source._score);
        }
        if (source["setup"] !== undefined) {
            _this.setup = new fhirModels.TestReportSetup(source.setup);
        }
        {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["teardown"] !== undefined) {
            _this.teardown = new fhirModels.TestReportTeardown(source.teardown);
        }
        if (source["test"] !== undefined) {
            _this.test = source.test.map(function (x) { return new fhirModels.TestReportTest(x); });
        }
        if (source["tester"] !== undefined) {
            _this.tester = source.tester;
        }
        if (source["_tester"] !== undefined) {
            _this._tester = new fhirModels.Element(source._tester);
        }
        {
            _this.testScript = new fhirModels.Reference(source.testScript);
        }
        return _this;
    }
    return TestReport;
}(fhirModels.DomainResource));
export { TestReport };
/**
 * Code Values for the TestReport.result field
 */
export var TestReportResultEnum;
(function (TestReportResultEnum) {
    TestReportResultEnum["PASS"] = "pass";
    TestReportResultEnum["FAIL"] = "fail";
    TestReportResultEnum["PENDING"] = "pending";
})(TestReportResultEnum || (TestReportResultEnum = {}));
/**
 * Code Values for the TestReport.status field
 */
export var TestReportStatusEnum;
(function (TestReportStatusEnum) {
    TestReportStatusEnum["COMPLETED"] = "completed";
    TestReportStatusEnum["IN_PROGRESS"] = "in-progress";
    TestReportStatusEnum["WAITING"] = "waiting";
    TestReportStatusEnum["STOPPED"] = "stopped";
    TestReportStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(TestReportStatusEnum || (TestReportStatusEnum = {}));
