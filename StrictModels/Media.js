var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
 */
var Media = /** @class */ (function (_super) {
    __extends(Media, _super);
    /**
     * Default constructor for Media from an object that MAY NOT contain all required elements.
     */
    function Media(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "Media";
        if ((source['resourceType'] !== "Media") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Media';
        }
        if (source["basedOn"] !== undefined) {
            _this.basedOn = source.basedOn.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["bodySite"] !== undefined) {
            _this.bodySite = new fhirModels.CodeableConcept(source.bodySite);
        }
        {
            _this.content = new fhirModels.Attachment(source.content);
        }
        if (source["createdDateTime"] !== undefined) {
            _this.createdDateTime = source.createdDateTime;
        }
        if (source["_createdDateTime"] !== undefined) {
            _this._createdDateTime = new fhirModels.Element(source._createdDateTime);
        }
        if (source["createdPeriod"] !== undefined) {
            _this.createdPeriod = new fhirModels.Period(source.createdPeriod);
        }
        if (source["device"] !== undefined) {
            _this.device = new fhirModels.Reference(source.device);
        }
        if (source["deviceName"] !== undefined) {
            _this.deviceName = source.deviceName;
        }
        if (source["_deviceName"] !== undefined) {
            _this._deviceName = new fhirModels.Element(source._deviceName);
        }
        if (source["duration"] !== undefined) {
            _this.duration = source.duration;
        }
        if (source["_duration"] !== undefined) {
            _this._duration = new fhirModels.Element(source._duration);
        }
        if (source["encounter"] !== undefined) {
            _this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["frames"] !== undefined) {
            _this.frames = source.frames;
        }
        if (source["_frames"] !== undefined) {
            _this._frames = new fhirModels.Element(source._frames);
        }
        if (source["height"] !== undefined) {
            _this.height = source.height;
        }
        if (source["_height"] !== undefined) {
            _this._height = new fhirModels.Element(source._height);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["issued"] !== undefined) {
            _this.issued = source.issued;
        }
        if (source["_issued"] !== undefined) {
            _this._issued = new fhirModels.Element(source._issued);
        }
        if (source["modality"] !== undefined) {
            _this.modality = new fhirModels.CodeableConcept(source.modality);
        }
        if (source["note"] !== undefined) {
            _this.note = source.note.map(function (x) { return new fhirModels.Annotation(x); });
        }
        if (source["operator"] !== undefined) {
            _this.operator = new fhirModels.Reference(source.operator);
        }
        if (source["partOf"] !== undefined) {
            _this.partOf = source.partOf.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["reasonCode"] !== undefined) {
            _this.reasonCode = source.reasonCode.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["subject"] !== undefined) {
            _this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["view"] !== undefined) {
            _this.view = new fhirModels.CodeableConcept(source.view);
        }
        if (source["width"] !== undefined) {
            _this.width = source.width;
        }
        if (source["_width"] !== undefined) {
            _this._width = new fhirModels.Element(source._width);
        }
        return _this;
    }
    return Media;
}(fhirModels.DomainResource));
export { Media };
/**
 * Code Values for the Media.status field
 */
export var MediaStatusEnum;
(function (MediaStatusEnum) {
    MediaStatusEnum["PREPARATION"] = "preparation";
    MediaStatusEnum["IN_PROGRESS"] = "in-progress";
    MediaStatusEnum["NOT_DONE"] = "not-done";
    MediaStatusEnum["ON_HOLD"] = "on-hold";
    MediaStatusEnum["STOPPED"] = "stopped";
    MediaStatusEnum["COMPLETED"] = "completed";
    MediaStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    MediaStatusEnum["UNKNOWN"] = "unknown";
})(MediaStatusEnum || (MediaStatusEnum = {}));
