var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
 */
var ClaimResponseItemAdjudication = /** @class */ (function (_super) {
    __extends(ClaimResponseItemAdjudication, _super);
    /**
     * Default constructor for ClaimResponseItemAdjudication from an object that MAY NOT contain all required elements.
     */
    function ClaimResponseItemAdjudication(source) {
        var _this = _super.call(this, source) || this;
        if (source["amount"] !== undefined) {
            _this.amount = new fhirModels.Money(source.amount);
        }
        {
            _this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["reason"] !== undefined) {
            _this.reason = new fhirModels.CodeableConcept(source.reason);
        }
        if (source["value"] !== undefined) {
            _this.value = source.value;
        }
        if (source["_value"] !== undefined) {
            _this._value = new fhirModels.Element(source._value);
        }
        return _this;
    }
    return ClaimResponseItemAdjudication;
}(fhirModels.BackboneElement));
export { ClaimResponseItemAdjudication };
/**
 * A sub-detail adjudication of a simple product or service.
 */
var ClaimResponseItemDetailSubDetail = /** @class */ (function (_super) {
    __extends(ClaimResponseItemDetailSubDetail, _super);
    /**
     * Default constructor for ClaimResponseItemDetailSubDetail from an object that MAY NOT contain all required elements.
     */
    function ClaimResponseItemDetailSubDetail(source) {
        var _this = _super.call(this, source) || this;
        if (source["adjudication"] !== undefined) {
            _this.adjudication = source.adjudication.map(function (x) { return new fhirModels.ClaimResponseItemAdjudication(x); });
        }
        if (source["noteNumber"] !== undefined) {
            _this.noteNumber = source.noteNumber.map(function (x) { return (x); });
        }
        if (source["_noteNumber"] !== undefined) {
            _this._noteNumber = source._noteNumber.map(function (x) { return new fhirModels.Element(x); });
        }
        {
            _this.subDetailSequence = source.subDetailSequence;
        }
        if (source["_subDetailSequence"] !== undefined) {
            _this._subDetailSequence = new fhirModels.Element(source._subDetailSequence);
        }
        return _this;
    }
    return ClaimResponseItemDetailSubDetail;
}(fhirModels.BackboneElement));
export { ClaimResponseItemDetailSubDetail };
/**
 * A claim detail. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
var ClaimResponseItemDetail = /** @class */ (function (_super) {
    __extends(ClaimResponseItemDetail, _super);
    /**
     * Default constructor for ClaimResponseItemDetail from an object that MAY NOT contain all required elements.
     */
    function ClaimResponseItemDetail(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.adjudication = source.adjudication.map(function (x) { return new fhirModels.ClaimResponseItemAdjudication(x); });
        }
        {
            _this.detailSequence = source.detailSequence;
        }
        if (source["_detailSequence"] !== undefined) {
            _this._detailSequence = new fhirModels.Element(source._detailSequence);
        }
        if (source["noteNumber"] !== undefined) {
            _this.noteNumber = source.noteNumber.map(function (x) { return (x); });
        }
        if (source["_noteNumber"] !== undefined) {
            _this._noteNumber = source._noteNumber.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["subDetail"] !== undefined) {
            _this.subDetail = source.subDetail.map(function (x) { return new fhirModels.ClaimResponseItemDetailSubDetail(x); });
        }
        return _this;
    }
    return ClaimResponseItemDetail;
}(fhirModels.BackboneElement));
export { ClaimResponseItemDetail };
/**
 * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
 */
var ClaimResponseItem = /** @class */ (function (_super) {
    __extends(ClaimResponseItem, _super);
    /**
     * Default constructor for ClaimResponseItem from an object that MAY NOT contain all required elements.
     */
    function ClaimResponseItem(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.adjudication = source.adjudication.map(function (x) { return new fhirModels.ClaimResponseItemAdjudication(x); });
        }
        if (source["detail"] !== undefined) {
            _this.detail = source.detail.map(function (x) { return new fhirModels.ClaimResponseItemDetail(x); });
        }
        {
            _this.itemSequence = source.itemSequence;
        }
        if (source["_itemSequence"] !== undefined) {
            _this._itemSequence = new fhirModels.Element(source._itemSequence);
        }
        if (source["noteNumber"] !== undefined) {
            _this.noteNumber = source.noteNumber.map(function (x) { return (x); });
        }
        if (source["_noteNumber"] !== undefined) {
            _this._noteNumber = source._noteNumber.map(function (x) { return new fhirModels.Element(x); });
        }
        return _this;
    }
    return ClaimResponseItem;
}(fhirModels.BackboneElement));
export { ClaimResponseItem };
/**
 * The third-tier service adjudications for payor added services.
 */
var ClaimResponseAddItemDetailSubDetail = /** @class */ (function (_super) {
    __extends(ClaimResponseAddItemDetailSubDetail, _super);
    /**
     * Default constructor for ClaimResponseAddItemDetailSubDetail from an object that MAY NOT contain all required elements.
     */
    function ClaimResponseAddItemDetailSubDetail(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.adjudication = source.adjudication.map(function (x) { return new fhirModels.ClaimResponseItemAdjudication(x); });
        }
        if (source["factor"] !== undefined) {
            _this.factor = source.factor;
        }
        if (source["_factor"] !== undefined) {
            _this._factor = new fhirModels.Element(source._factor);
        }
        if (source["modifier"] !== undefined) {
            _this.modifier = source.modifier.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["net"] !== undefined) {
            _this.net = new fhirModels.Money(source.net);
        }
        if (source["noteNumber"] !== undefined) {
            _this.noteNumber = source.noteNumber.map(function (x) { return (x); });
        }
        if (source["_noteNumber"] !== undefined) {
            _this._noteNumber = source._noteNumber.map(function (x) { return new fhirModels.Element(x); });
        }
        {
            _this.productOrService = new fhirModels.CodeableConcept(source.productOrService);
        }
        if (source["quantity"] !== undefined) {
            _this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["unitPrice"] !== undefined) {
            _this.unitPrice = new fhirModels.Money(source.unitPrice);
        }
        return _this;
    }
    return ClaimResponseAddItemDetailSubDetail;
}(fhirModels.BackboneElement));
export { ClaimResponseAddItemDetailSubDetail };
/**
 * The second-tier service adjudications for payor added services.
 */
var ClaimResponseAddItemDetail = /** @class */ (function (_super) {
    __extends(ClaimResponseAddItemDetail, _super);
    /**
     * Default constructor for ClaimResponseAddItemDetail from an object that MAY NOT contain all required elements.
     */
    function ClaimResponseAddItemDetail(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.adjudication = source.adjudication.map(function (x) { return new fhirModels.ClaimResponseItemAdjudication(x); });
        }
        if (source["factor"] !== undefined) {
            _this.factor = source.factor;
        }
        if (source["_factor"] !== undefined) {
            _this._factor = new fhirModels.Element(source._factor);
        }
        if (source["modifier"] !== undefined) {
            _this.modifier = source.modifier.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["net"] !== undefined) {
            _this.net = new fhirModels.Money(source.net);
        }
        if (source["noteNumber"] !== undefined) {
            _this.noteNumber = source.noteNumber.map(function (x) { return (x); });
        }
        if (source["_noteNumber"] !== undefined) {
            _this._noteNumber = source._noteNumber.map(function (x) { return new fhirModels.Element(x); });
        }
        {
            _this.productOrService = new fhirModels.CodeableConcept(source.productOrService);
        }
        if (source["quantity"] !== undefined) {
            _this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["subDetail"] !== undefined) {
            _this.subDetail = source.subDetail.map(function (x) { return new fhirModels.ClaimResponseAddItemDetailSubDetail(x); });
        }
        if (source["unitPrice"] !== undefined) {
            _this.unitPrice = new fhirModels.Money(source.unitPrice);
        }
        return _this;
    }
    return ClaimResponseAddItemDetail;
}(fhirModels.BackboneElement));
export { ClaimResponseAddItemDetail };
/**
 * The first-tier service adjudications for payor added product or service lines.
 */
var ClaimResponseAddItem = /** @class */ (function (_super) {
    __extends(ClaimResponseAddItem, _super);
    /**
     * Default constructor for ClaimResponseAddItem from an object that MAY NOT contain all required elements.
     */
    function ClaimResponseAddItem(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.adjudication = source.adjudication.map(function (x) { return new fhirModels.ClaimResponseItemAdjudication(x); });
        }
        if (source["bodySite"] !== undefined) {
            _this.bodySite = new fhirModels.CodeableConcept(source.bodySite);
        }
        if (source["detail"] !== undefined) {
            _this.detail = source.detail.map(function (x) { return new fhirModels.ClaimResponseAddItemDetail(x); });
        }
        if (source["detailSequence"] !== undefined) {
            _this.detailSequence = source.detailSequence.map(function (x) { return (x); });
        }
        if (source["_detailSequence"] !== undefined) {
            _this._detailSequence = source._detailSequence.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["factor"] !== undefined) {
            _this.factor = source.factor;
        }
        if (source["_factor"] !== undefined) {
            _this._factor = new fhirModels.Element(source._factor);
        }
        if (source["itemSequence"] !== undefined) {
            _this.itemSequence = source.itemSequence.map(function (x) { return (x); });
        }
        if (source["_itemSequence"] !== undefined) {
            _this._itemSequence = source._itemSequence.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["locationCodeableConcept"] !== undefined) {
            _this.locationCodeableConcept = new fhirModels.CodeableConcept(source.locationCodeableConcept);
        }
        if (source["locationAddress"] !== undefined) {
            _this.locationAddress = new fhirModels.Address(source.locationAddress);
        }
        if (source["locationReference"] !== undefined) {
            _this.locationReference = new fhirModels.Reference(source.locationReference);
        }
        if (source["modifier"] !== undefined) {
            _this.modifier = source.modifier.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["net"] !== undefined) {
            _this.net = new fhirModels.Money(source.net);
        }
        if (source["noteNumber"] !== undefined) {
            _this.noteNumber = source.noteNumber.map(function (x) { return (x); });
        }
        if (source["_noteNumber"] !== undefined) {
            _this._noteNumber = source._noteNumber.map(function (x) { return new fhirModels.Element(x); });
        }
        {
            _this.productOrService = new fhirModels.CodeableConcept(source.productOrService);
        }
        if (source["programCode"] !== undefined) {
            _this.programCode = source.programCode.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["provider"] !== undefined) {
            _this.provider = source.provider.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["quantity"] !== undefined) {
            _this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["servicedDate"] !== undefined) {
            _this.servicedDate = source.servicedDate;
        }
        if (source["_servicedDate"] !== undefined) {
            _this._servicedDate = new fhirModels.Element(source._servicedDate);
        }
        if (source["servicedPeriod"] !== undefined) {
            _this.servicedPeriod = new fhirModels.Period(source.servicedPeriod);
        }
        if (source["subdetailSequence"] !== undefined) {
            _this.subdetailSequence = source.subdetailSequence.map(function (x) { return (x); });
        }
        if (source["_subdetailSequence"] !== undefined) {
            _this._subdetailSequence = source._subdetailSequence.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["subSite"] !== undefined) {
            _this.subSite = source.subSite.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["unitPrice"] !== undefined) {
            _this.unitPrice = new fhirModels.Money(source.unitPrice);
        }
        return _this;
    }
    return ClaimResponseAddItem;
}(fhirModels.BackboneElement));
export { ClaimResponseAddItem };
/**
 * Totals for amounts submitted, co-pays, benefits payable etc.
 */
var ClaimResponseTotal = /** @class */ (function (_super) {
    __extends(ClaimResponseTotal, _super);
    /**
     * Default constructor for ClaimResponseTotal from an object that MAY NOT contain all required elements.
     */
    function ClaimResponseTotal(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.amount = new fhirModels.Money(source.amount);
        }
        {
            _this.category = new fhirModels.CodeableConcept(source.category);
        }
        return _this;
    }
    return ClaimResponseTotal;
}(fhirModels.BackboneElement));
export { ClaimResponseTotal };
/**
 * Payment details for the adjudication of the claim.
 */
var ClaimResponsePayment = /** @class */ (function (_super) {
    __extends(ClaimResponsePayment, _super);
    /**
     * Default constructor for ClaimResponsePayment from an object that MAY NOT contain all required elements.
     */
    function ClaimResponsePayment(source) {
        var _this = _super.call(this, source) || this;
        if (source["adjustment"] !== undefined) {
            _this.adjustment = new fhirModels.Money(source.adjustment);
        }
        if (source["adjustmentReason"] !== undefined) {
            _this.adjustmentReason = new fhirModels.CodeableConcept(source.adjustmentReason);
        }
        {
            _this.amount = new fhirModels.Money(source.amount);
        }
        if (source["date"] !== undefined) {
            _this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            _this._date = new fhirModels.Element(source._date);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = new fhirModels.Identifier(source.identifier);
        }
        {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    return ClaimResponsePayment;
}(fhirModels.BackboneElement));
export { ClaimResponsePayment };
/**
 * A note that describes or explains adjudication results in a human readable form.
 */
var ClaimResponseProcessNote = /** @class */ (function (_super) {
    __extends(ClaimResponseProcessNote, _super);
    /**
     * Default constructor for ClaimResponseProcessNote from an object that MAY NOT contain all required elements.
     */
    function ClaimResponseProcessNote(source) {
        var _this = _super.call(this, source) || this;
        if (source["language"] !== undefined) {
            _this.language = new fhirModels.CodeableConcept(source.language);
        }
        if (source["number"] !== undefined) {
            _this.number = source.number;
        }
        if (source["_number"] !== undefined) {
            _this._number = new fhirModels.Element(source._number);
        }
        {
            _this.text = source.text;
        }
        if (source["_text"] !== undefined) {
            _this._text = new fhirModels.Element(source._text);
        }
        if (source["type"] !== undefined) {
            _this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            _this._type = new fhirModels.Element(source._type);
        }
        return _this;
    }
    return ClaimResponseProcessNote;
}(fhirModels.BackboneElement));
export { ClaimResponseProcessNote };
/**
 * Code Values for the ClaimResponse.processNote.type field
 */
export var ClaimResponseProcessNoteTypeEnum;
(function (ClaimResponseProcessNoteTypeEnum) {
    ClaimResponseProcessNoteTypeEnum["DISPLAY"] = "display";
    ClaimResponseProcessNoteTypeEnum["PRINT"] = "print";
    ClaimResponseProcessNoteTypeEnum["PRINTOPER"] = "printoper";
})(ClaimResponseProcessNoteTypeEnum || (ClaimResponseProcessNoteTypeEnum = {}));
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
var ClaimResponseInsurance = /** @class */ (function (_super) {
    __extends(ClaimResponseInsurance, _super);
    /**
     * Default constructor for ClaimResponseInsurance from an object that MAY NOT contain all required elements.
     */
    function ClaimResponseInsurance(source) {
        var _this = _super.call(this, source) || this;
        if (source["businessArrangement"] !== undefined) {
            _this.businessArrangement = source.businessArrangement;
        }
        if (source["_businessArrangement"] !== undefined) {
            _this._businessArrangement = new fhirModels.Element(source._businessArrangement);
        }
        if (source["claimResponse"] !== undefined) {
            _this.claimResponse = new fhirModels.Reference(source.claimResponse);
        }
        {
            _this.coverage = new fhirModels.Reference(source.coverage);
        }
        {
            _this.focal = source.focal;
        }
        if (source["_focal"] !== undefined) {
            _this._focal = new fhirModels.Element(source._focal);
        }
        {
            _this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            _this._sequence = new fhirModels.Element(source._sequence);
        }
        return _this;
    }
    return ClaimResponseInsurance;
}(fhirModels.BackboneElement));
export { ClaimResponseInsurance };
/**
 * If the request contains errors then an error element should be provided and no adjudication related sections (item, addItem, or payment) should be present.
 */
var ClaimResponseError = /** @class */ (function (_super) {
    __extends(ClaimResponseError, _super);
    /**
     * Default constructor for ClaimResponseError from an object that MAY NOT contain all required elements.
     */
    function ClaimResponseError(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["detailSequence"] !== undefined) {
            _this.detailSequence = source.detailSequence;
        }
        if (source["_detailSequence"] !== undefined) {
            _this._detailSequence = new fhirModels.Element(source._detailSequence);
        }
        if (source["itemSequence"] !== undefined) {
            _this.itemSequence = source.itemSequence;
        }
        if (source["_itemSequence"] !== undefined) {
            _this._itemSequence = new fhirModels.Element(source._itemSequence);
        }
        if (source["subDetailSequence"] !== undefined) {
            _this.subDetailSequence = source.subDetailSequence;
        }
        if (source["_subDetailSequence"] !== undefined) {
            _this._subDetailSequence = new fhirModels.Element(source._subDetailSequence);
        }
        return _this;
    }
    return ClaimResponseError;
}(fhirModels.BackboneElement));
export { ClaimResponseError };
/**
 * This resource provides the adjudication details from the processing of a Claim resource.
 */
var ClaimResponse = /** @class */ (function (_super) {
    __extends(ClaimResponse, _super);
    /**
     * Default constructor for ClaimResponse from an object that MAY NOT contain all required elements.
     */
    function ClaimResponse(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "ClaimResponse";
        if ((source['resourceType'] !== "ClaimResponse") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a ClaimResponse';
        }
        if (source["addItem"] !== undefined) {
            _this.addItem = source.addItem.map(function (x) { return new fhirModels.ClaimResponseAddItem(x); });
        }
        if (source["adjudication"] !== undefined) {
            _this.adjudication = source.adjudication.map(function (x) { return new fhirModels.ClaimResponseItemAdjudication(x); });
        }
        if (source["communicationRequest"] !== undefined) {
            _this.communicationRequest = source.communicationRequest.map(function (x) { return new fhirModels.Reference(x); });
        }
        {
            _this.created = source.created;
        }
        if (source["_created"] !== undefined) {
            _this._created = new fhirModels.Element(source._created);
        }
        if (source["disposition"] !== undefined) {
            _this.disposition = source.disposition;
        }
        if (source["_disposition"] !== undefined) {
            _this._disposition = new fhirModels.Element(source._disposition);
        }
        if (source["error"] !== undefined) {
            _this.error = source.error.map(function (x) { return new fhirModels.ClaimResponseError(x); });
        }
        if (source["form"] !== undefined) {
            _this.form = new fhirModels.Attachment(source.form);
        }
        if (source["formCode"] !== undefined) {
            _this.formCode = new fhirModels.CodeableConcept(source.formCode);
        }
        if (source["fundsReserve"] !== undefined) {
            _this.fundsReserve = new fhirModels.CodeableConcept(source.fundsReserve);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["insurance"] !== undefined) {
            _this.insurance = source.insurance.map(function (x) { return new fhirModels.ClaimResponseInsurance(x); });
        }
        {
            _this.insurer = new fhirModels.Reference(source.insurer);
        }
        if (source["item"] !== undefined) {
            _this.item = source.item.map(function (x) { return new fhirModels.ClaimResponseItem(x); });
        }
        {
            _this.outcome = source.outcome;
        }
        if (source["_outcome"] !== undefined) {
            _this._outcome = new fhirModels.Element(source._outcome);
        }
        {
            _this.patient = new fhirModels.Reference(source.patient);
        }
        if (source["payeeType"] !== undefined) {
            _this.payeeType = new fhirModels.CodeableConcept(source.payeeType);
        }
        if (source["payment"] !== undefined) {
            _this.payment = new fhirModels.ClaimResponsePayment(source.payment);
        }
        if (source["preAuthPeriod"] !== undefined) {
            _this.preAuthPeriod = new fhirModels.Period(source.preAuthPeriod);
        }
        if (source["preAuthRef"] !== undefined) {
            _this.preAuthRef = source.preAuthRef;
        }
        if (source["_preAuthRef"] !== undefined) {
            _this._preAuthRef = new fhirModels.Element(source._preAuthRef);
        }
        if (source["processNote"] !== undefined) {
            _this.processNote = source.processNote.map(function (x) { return new fhirModels.ClaimResponseProcessNote(x); });
        }
        if (source["request"] !== undefined) {
            _this.request = new fhirModels.Reference(source.request);
        }
        if (source["requestor"] !== undefined) {
            _this.requestor = new fhirModels.Reference(source.requestor);
        }
        {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["subType"] !== undefined) {
            _this.subType = new fhirModels.CodeableConcept(source.subType);
        }
        if (source["total"] !== undefined) {
            _this.total = source.total.map(function (x) { return new fhirModels.ClaimResponseTotal(x); });
        }
        {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        {
            _this.use = source.use;
        }
        if (source["_use"] !== undefined) {
            _this._use = new fhirModels.Element(source._use);
        }
        return _this;
    }
    return ClaimResponse;
}(fhirModels.DomainResource));
export { ClaimResponse };
/**
 * Code Values for the ClaimResponse.outcome field
 */
export var ClaimResponseOutcomeEnum;
(function (ClaimResponseOutcomeEnum) {
    ClaimResponseOutcomeEnum["QUEUED"] = "queued";
    ClaimResponseOutcomeEnum["COMPLETE"] = "complete";
    ClaimResponseOutcomeEnum["ERROR"] = "error";
    ClaimResponseOutcomeEnum["PARTIAL"] = "partial";
})(ClaimResponseOutcomeEnum || (ClaimResponseOutcomeEnum = {}));
/**
 * Code Values for the ClaimResponse.status field
 */
export var ClaimResponseStatusEnum;
(function (ClaimResponseStatusEnum) {
    ClaimResponseStatusEnum["ACTIVE"] = "active";
    ClaimResponseStatusEnum["CANCELLED"] = "cancelled";
    ClaimResponseStatusEnum["DRAFT"] = "draft";
    ClaimResponseStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(ClaimResponseStatusEnum || (ClaimResponseStatusEnum = {}));
/**
 * Code Values for the ClaimResponse.use field
 */
export var ClaimResponseUseEnum;
(function (ClaimResponseUseEnum) {
    ClaimResponseUseEnum["CLAIM"] = "claim";
    ClaimResponseUseEnum["PREAUTHORIZATION"] = "preauthorization";
    ClaimResponseUseEnum["PREDETERMINATION"] = "predetermination";
})(ClaimResponseUseEnum || (ClaimResponseUseEnum = {}));
