"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MedicationDispenseStatusEnum = exports.MedicationDispense = exports.MedicationDispenseSubstitution = exports.MedicationDispensePerformer = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Indicates who or what performed the event.
 */
class MedicationDispensePerformer extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicationDispensePerformer from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.actor = new fhirModels.Reference(source.actor);
        }
        if (source["function"] !== undefined) {
            this.function = new fhirModels.CodeableConcept(source.function);
        }
    }
}
exports.MedicationDispensePerformer = MedicationDispensePerformer;
/**
 * Indicates whether or not substitution was made as part of the dispense.  In some cases, substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.
 */
class MedicationDispenseSubstitution extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicationDispenseSubstitution from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["reason"] !== undefined) {
            this.reason = source.reason.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["responsibleParty"] !== undefined) {
            this.responsibleParty = source.responsibleParty.map((x) => new fhirModels.Reference(x));
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
        {
            this.wasSubstituted = source.wasSubstituted;
        }
        if (source["_wasSubstituted"] !== undefined) {
            this._wasSubstituted = new fhirModels.Element(source._wasSubstituted);
        }
    }
}
exports.MedicationDispenseSubstitution = MedicationDispenseSubstitution;
/**
 * Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
 */
class MedicationDispense extends fhirModels.DomainResource {
    /**
     * Default constructor for MedicationDispense from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "MedicationDispense";
        if ((source['resourceType'] !== "MedicationDispense") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a MedicationDispense';
        }
        if (source["authorizingPrescription"] !== undefined) {
            this.authorizingPrescription = source.authorizingPrescription.map((x) => new fhirModels.Reference(x));
        }
        if (source["category"] !== undefined) {
            this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["context"] !== undefined) {
            this.context = new fhirModels.Reference(source.context);
        }
        if (source["daysSupply"] !== undefined) {
            this.daysSupply = new fhirModels.Quantity(source.daysSupply);
        }
        if (source["destination"] !== undefined) {
            this.destination = new fhirModels.Reference(source.destination);
        }
        if (source["detectedIssue"] !== undefined) {
            this.detectedIssue = source.detectedIssue.map((x) => new fhirModels.Reference(x));
        }
        if (source["dosageInstruction"] !== undefined) {
            this.dosageInstruction = source.dosageInstruction.map((x) => new fhirModels.Dosage(x));
        }
        if (source["eventHistory"] !== undefined) {
            this.eventHistory = source.eventHistory.map((x) => new fhirModels.Reference(x));
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["location"] !== undefined) {
            this.location = new fhirModels.Reference(source.location);
        }
        if (source["medicationCodeableConcept"] !== undefined) {
            this.medicationCodeableConcept = new fhirModels.CodeableConcept(source.medicationCodeableConcept);
        }
        if (source["medicationReference"] !== undefined) {
            this.medicationReference = new fhirModels.Reference(source.medicationReference);
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["partOf"] !== undefined) {
            this.partOf = source.partOf.map((x) => new fhirModels.Reference(x));
        }
        if (source["performer"] !== undefined) {
            this.performer = source.performer.map((x) => new fhirModels.MedicationDispensePerformer(x));
        }
        if (source["quantity"] !== undefined) {
            this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["receiver"] !== undefined) {
            this.receiver = source.receiver.map((x) => new fhirModels.Reference(x));
        }
        {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["statusReasonCodeableConcept"] !== undefined) {
            this.statusReasonCodeableConcept = new fhirModels.CodeableConcept(source.statusReasonCodeableConcept);
        }
        if (source["statusReasonReference"] !== undefined) {
            this.statusReasonReference = new fhirModels.Reference(source.statusReasonReference);
        }
        if (source["subject"] !== undefined) {
            this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["substitution"] !== undefined) {
            this.substitution = new fhirModels.MedicationDispenseSubstitution(source.substitution);
        }
        if (source["supportingInformation"] !== undefined) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhirModels.Reference(x));
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["whenHandedOver"] !== undefined) {
            this.whenHandedOver = source.whenHandedOver;
        }
        if (source["_whenHandedOver"] !== undefined) {
            this._whenHandedOver = new fhirModels.Element(source._whenHandedOver);
        }
        if (source["whenPrepared"] !== undefined) {
            this.whenPrepared = source.whenPrepared;
        }
        if (source["_whenPrepared"] !== undefined) {
            this._whenPrepared = new fhirModels.Element(source._whenPrepared);
        }
    }
}
exports.MedicationDispense = MedicationDispense;
/**
 * Code Values for the MedicationDispense.status field
 */
var MedicationDispenseStatusEnum;
(function (MedicationDispenseStatusEnum) {
    MedicationDispenseStatusEnum["PREPARATION"] = "preparation";
    MedicationDispenseStatusEnum["IN_PROGRESS"] = "in-progress";
    MedicationDispenseStatusEnum["CANCELLED"] = "cancelled";
    MedicationDispenseStatusEnum["ON_HOLD"] = "on-hold";
    MedicationDispenseStatusEnum["COMPLETED"] = "completed";
    MedicationDispenseStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    MedicationDispenseStatusEnum["STOPPED"] = "stopped";
    MedicationDispenseStatusEnum["DECLINED"] = "declined";
    MedicationDispenseStatusEnum["UNKNOWN"] = "unknown";
})(MedicationDispenseStatusEnum = exports.MedicationDispenseStatusEnum || (exports.MedicationDispenseStatusEnum = {}));
//# sourceMappingURL=MedicationDispense.js.map