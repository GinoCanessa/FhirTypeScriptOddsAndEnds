var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * Indicates who or what performed the event.
 */
var MedicationDispensePerformer = /** @class */ (function (_super) {
    __extends(MedicationDispensePerformer, _super);
    /**
     * Default constructor for MedicationDispensePerformer from an object that MAY NOT contain all required elements.
     */
    function MedicationDispensePerformer(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.actor = new fhirModels.Reference(source.actor);
        }
        if (source["function"] !== undefined) {
            _this["function"] = new fhirModels.CodeableConcept(source["function"]);
        }
        return _this;
    }
    return MedicationDispensePerformer;
}(fhirModels.BackboneElement));
export { MedicationDispensePerformer };
/**
 * Indicates whether or not substitution was made as part of the dispense.  In some cases, substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.
 */
var MedicationDispenseSubstitution = /** @class */ (function (_super) {
    __extends(MedicationDispenseSubstitution, _super);
    /**
     * Default constructor for MedicationDispenseSubstitution from an object that MAY NOT contain all required elements.
     */
    function MedicationDispenseSubstitution(source) {
        var _this = _super.call(this, source) || this;
        if (source["reason"] !== undefined) {
            _this.reason = source.reason.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["responsibleParty"] !== undefined) {
            _this.responsibleParty = source.responsibleParty.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        {
            _this.wasSubstituted = source.wasSubstituted;
        }
        if (source["_wasSubstituted"] !== undefined) {
            _this._wasSubstituted = new fhirModels.Element(source._wasSubstituted);
        }
        return _this;
    }
    return MedicationDispenseSubstitution;
}(fhirModels.BackboneElement));
export { MedicationDispenseSubstitution };
/**
 * Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
 */
var MedicationDispense = /** @class */ (function (_super) {
    __extends(MedicationDispense, _super);
    /**
     * Default constructor for MedicationDispense from an object that MAY NOT contain all required elements.
     */
    function MedicationDispense(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "MedicationDispense";
        if ((source['resourceType'] !== "MedicationDispense") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a MedicationDispense';
        }
        if (source["authorizingPrescription"] !== undefined) {
            _this.authorizingPrescription = source.authorizingPrescription.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["category"] !== undefined) {
            _this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["context"] !== undefined) {
            _this.context = new fhirModels.Reference(source.context);
        }
        if (source["daysSupply"] !== undefined) {
            _this.daysSupply = new fhirModels.Quantity(source.daysSupply);
        }
        if (source["destination"] !== undefined) {
            _this.destination = new fhirModels.Reference(source.destination);
        }
        if (source["detectedIssue"] !== undefined) {
            _this.detectedIssue = source.detectedIssue.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["dosageInstruction"] !== undefined) {
            _this.dosageInstruction = source.dosageInstruction.map(function (x) { return new fhirModels.Dosage(x); });
        }
        if (source["eventHistory"] !== undefined) {
            _this.eventHistory = source.eventHistory.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["location"] !== undefined) {
            _this.location = new fhirModels.Reference(source.location);
        }
        if (source["medicationCodeableConcept"] !== undefined) {
            _this.medicationCodeableConcept = new fhirModels.CodeableConcept(source.medicationCodeableConcept);
        }
        if (source["medicationReference"] !== undefined) {
            _this.medicationReference = new fhirModels.Reference(source.medicationReference);
        }
        if (source["note"] !== undefined) {
            _this.note = source.note.map(function (x) { return new fhirModels.Annotation(x); });
        }
        if (source["partOf"] !== undefined) {
            _this.partOf = source.partOf.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["performer"] !== undefined) {
            _this.performer = source.performer.map(function (x) { return new fhirModels.MedicationDispensePerformer(x); });
        }
        if (source["quantity"] !== undefined) {
            _this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["receiver"] !== undefined) {
            _this.receiver = source.receiver.map(function (x) { return new fhirModels.Reference(x); });
        }
        {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["statusReasonCodeableConcept"] !== undefined) {
            _this.statusReasonCodeableConcept = new fhirModels.CodeableConcept(source.statusReasonCodeableConcept);
        }
        if (source["statusReasonReference"] !== undefined) {
            _this.statusReasonReference = new fhirModels.Reference(source.statusReasonReference);
        }
        if (source["subject"] !== undefined) {
            _this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["substitution"] !== undefined) {
            _this.substitution = new fhirModels.MedicationDispenseSubstitution(source.substitution);
        }
        if (source["supportingInformation"] !== undefined) {
            _this.supportingInformation = source.supportingInformation.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["whenHandedOver"] !== undefined) {
            _this.whenHandedOver = source.whenHandedOver;
        }
        if (source["_whenHandedOver"] !== undefined) {
            _this._whenHandedOver = new fhirModels.Element(source._whenHandedOver);
        }
        if (source["whenPrepared"] !== undefined) {
            _this.whenPrepared = source.whenPrepared;
        }
        if (source["_whenPrepared"] !== undefined) {
            _this._whenPrepared = new fhirModels.Element(source._whenPrepared);
        }
        return _this;
    }
    return MedicationDispense;
}(fhirModels.DomainResource));
export { MedicationDispense };
/**
 * Code Values for the MedicationDispense.status field
 */
export var MedicationDispenseStatusEnum;
(function (MedicationDispenseStatusEnum) {
    MedicationDispenseStatusEnum["PREPARATION"] = "preparation";
    MedicationDispenseStatusEnum["IN_PROGRESS"] = "in-progress";
    MedicationDispenseStatusEnum["CANCELLED"] = "cancelled";
    MedicationDispenseStatusEnum["ON_HOLD"] = "on-hold";
    MedicationDispenseStatusEnum["COMPLETED"] = "completed";
    MedicationDispenseStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    MedicationDispenseStatusEnum["STOPPED"] = "stopped";
    MedicationDispenseStatusEnum["DECLINED"] = "declined";
    MedicationDispenseStatusEnum["UNKNOWN"] = "unknown";
})(MedicationDispenseStatusEnum || (MedicationDispenseStatusEnum = {}));
