var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * A resource that represents the data of a single raw artifact as digital content accessible in its native format.  A Binary resource can contain any content, whether text, image, pdf, zip archive, etc.
 */
var Binary = /** @class */ (function (_super) {
    __extends(Binary, _super);
    /**
     * Default constructor for Binary from an object that MAY NOT contain all required elements.
     */
    function Binary(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "Binary";
        if ((source['resourceType'] !== "Binary") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Binary';
        }
        {
            _this.contentType = source.contentType;
        }
        if (source["_contentType"] !== undefined) {
            _this._contentType = new fhirModels.Element(source._contentType);
        }
        if (source["data"] !== undefined) {
            _this.data = source.data;
        }
        if (source["_data"] !== undefined) {
            _this._data = new fhirModels.Element(source._data);
        }
        if (source["securityContext"] !== undefined) {
            _this.securityContext = new fhirModels.Reference(source.securityContext);
        }
        return _this;
    }
    return Binary;
}(fhirModels.Resource));
export { Binary };
