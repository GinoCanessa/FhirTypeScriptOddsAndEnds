var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * The applicability conditions can be used to ascertain whether a billing item is allowed in a specific context. E.g. some billing codes may only be applicable in out-patient settings, only to male/female patients or only to children.
 */
var ChargeItemDefinitionApplicability = /** @class */ (function (_super) {
    __extends(ChargeItemDefinitionApplicability, _super);
    /**
     * Default constructor for ChargeItemDefinitionApplicability from an object that MAY NOT contain all required elements.
     */
    function ChargeItemDefinitionApplicability(source) {
        var _this = _super.call(this, source) || this;
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["expression"] !== undefined) {
            _this.expression = source.expression;
        }
        if (source["_expression"] !== undefined) {
            _this._expression = new fhirModels.Element(source._expression);
        }
        if (source["language"] !== undefined) {
            _this.language = source.language;
        }
        if (source["_language"] !== undefined) {
            _this._language = new fhirModels.Element(source._language);
        }
        return _this;
    }
    return ChargeItemDefinitionApplicability;
}(fhirModels.BackboneElement));
export { ChargeItemDefinitionApplicability };
/**
 * The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the prices have been calculated.
 */
var ChargeItemDefinitionPropertyGroupPriceComponent = /** @class */ (function (_super) {
    __extends(ChargeItemDefinitionPropertyGroupPriceComponent, _super);
    /**
     * Default constructor for ChargeItemDefinitionPropertyGroupPriceComponent from an object that MAY NOT contain all required elements.
     */
    function ChargeItemDefinitionPropertyGroupPriceComponent(source) {
        var _this = _super.call(this, source) || this;
        if (source["amount"] !== undefined) {
            _this.amount = new fhirModels.Money(source.amount);
        }
        if (source["code"] !== undefined) {
            _this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["factor"] !== undefined) {
            _this.factor = source.factor;
        }
        if (source["_factor"] !== undefined) {
            _this._factor = new fhirModels.Element(source._factor);
        }
        {
            _this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            _this._type = new fhirModels.Element(source._type);
        }
        return _this;
    }
    return ChargeItemDefinitionPropertyGroupPriceComponent;
}(fhirModels.BackboneElement));
export { ChargeItemDefinitionPropertyGroupPriceComponent };
/**
 * Code Values for the ChargeItemDefinition.propertyGroup.priceComponent.type field
 */
export var ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum;
(function (ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum) {
    ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum["BASE"] = "base";
    ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum["SURCHARGE"] = "surcharge";
    ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum["DEDUCTION"] = "deduction";
    ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum["DISCOUNT"] = "discount";
    ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum["TAX"] = "tax";
    ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum["INFORMATIONAL"] = "informational";
})(ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum || (ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum = {}));
/**
 * Group of properties which are applicable under the same conditions. If no applicability rules are established for the group, then all properties always apply.
 */
var ChargeItemDefinitionPropertyGroup = /** @class */ (function (_super) {
    __extends(ChargeItemDefinitionPropertyGroup, _super);
    /**
     * Default constructor for ChargeItemDefinitionPropertyGroup from an object that MAY NOT contain all required elements.
     */
    function ChargeItemDefinitionPropertyGroup(source) {
        var _this = _super.call(this, source) || this;
        if (source["applicability"] !== undefined) {
            _this.applicability = source.applicability.map(function (x) { return new fhirModels.ChargeItemDefinitionApplicability(x); });
        }
        if (source["priceComponent"] !== undefined) {
            _this.priceComponent = source.priceComponent.map(function (x) { return new fhirModels.ChargeItemDefinitionPropertyGroupPriceComponent(x); });
        }
        return _this;
    }
    return ChargeItemDefinitionPropertyGroup;
}(fhirModels.BackboneElement));
export { ChargeItemDefinitionPropertyGroup };
/**
 * The ChargeItemDefinition resource provides the properties that apply to the (billing) codes necessary to calculate costs and prices. The properties may differ largely depending on type and realm, therefore this resource gives only a rough structure and requires profiling for each type of billing code system.
 */
var ChargeItemDefinition = /** @class */ (function (_super) {
    __extends(ChargeItemDefinition, _super);
    /**
     * Default constructor for ChargeItemDefinition from an object that MAY NOT contain all required elements.
     */
    function ChargeItemDefinition(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "ChargeItemDefinition";
        if ((source['resourceType'] !== "ChargeItemDefinition") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a ChargeItemDefinition';
        }
        if (source["applicability"] !== undefined) {
            _this.applicability = source.applicability.map(function (x) { return new fhirModels.ChargeItemDefinitionApplicability(x); });
        }
        if (source["approvalDate"] !== undefined) {
            _this.approvalDate = source.approvalDate;
        }
        if (source["_approvalDate"] !== undefined) {
            _this._approvalDate = new fhirModels.Element(source._approvalDate);
        }
        if (source["code"] !== undefined) {
            _this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["contact"] !== undefined) {
            _this.contact = source.contact.map(function (x) { return new fhirModels.ContactDetail(x); });
        }
        if (source["copyright"] !== undefined) {
            _this.copyright = source.copyright;
        }
        if (source["_copyright"] !== undefined) {
            _this._copyright = new fhirModels.Element(source._copyright);
        }
        if (source["date"] !== undefined) {
            _this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            _this._date = new fhirModels.Element(source._date);
        }
        if (source["derivedFromUri"] !== undefined) {
            _this.derivedFromUri = source.derivedFromUri.map(function (x) { return (x); });
        }
        if (source["_derivedFromUri"] !== undefined) {
            _this._derivedFromUri = source._derivedFromUri.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["effectivePeriod"] !== undefined) {
            _this.effectivePeriod = new fhirModels.Period(source.effectivePeriod);
        }
        if (source["experimental"] !== undefined) {
            _this.experimental = source.experimental;
        }
        if (source["_experimental"] !== undefined) {
            _this._experimental = new fhirModels.Element(source._experimental);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["instance"] !== undefined) {
            _this.instance = source.instance.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["jurisdiction"] !== undefined) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["lastReviewDate"] !== undefined) {
            _this.lastReviewDate = source.lastReviewDate;
        }
        if (source["_lastReviewDate"] !== undefined) {
            _this._lastReviewDate = new fhirModels.Element(source._lastReviewDate);
        }
        if (source["partOf"] !== undefined) {
            _this.partOf = source.partOf.map(function (x) { return (x); });
        }
        if (source["_partOf"] !== undefined) {
            _this._partOf = source._partOf.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["propertyGroup"] !== undefined) {
            _this.propertyGroup = source.propertyGroup.map(function (x) { return new fhirModels.ChargeItemDefinitionPropertyGroup(x); });
        }
        if (source["publisher"] !== undefined) {
            _this.publisher = source.publisher;
        }
        if (source["_publisher"] !== undefined) {
            _this._publisher = new fhirModels.Element(source._publisher);
        }
        if (source["replaces"] !== undefined) {
            _this.replaces = source.replaces.map(function (x) { return (x); });
        }
        if (source["_replaces"] !== undefined) {
            _this._replaces = source._replaces.map(function (x) { return new fhirModels.Element(x); });
        }
        {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["title"] !== undefined) {
            _this.title = source.title;
        }
        if (source["_title"] !== undefined) {
            _this._title = new fhirModels.Element(source._title);
        }
        {
            _this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            _this._url = new fhirModels.Element(source._url);
        }
        if (source["useContext"] !== undefined) {
            _this.useContext = source.useContext.map(function (x) { return new fhirModels.UsageContext(x); });
        }
        if (source["version"] !== undefined) {
            _this.version = source.version;
        }
        if (source["_version"] !== undefined) {
            _this._version = new fhirModels.Element(source._version);
        }
        return _this;
    }
    return ChargeItemDefinition;
}(fhirModels.DomainResource));
export { ChargeItemDefinition };
/**
 * Code Values for the ChargeItemDefinition.status field
 */
export var ChargeItemDefinitionStatusEnum;
(function (ChargeItemDefinitionStatusEnum) {
    ChargeItemDefinitionStatusEnum["DRAFT"] = "draft";
    ChargeItemDefinitionStatusEnum["ACTIVE"] = "active";
    ChargeItemDefinitionStatusEnum["RETIRED"] = "retired";
    ChargeItemDefinitionStatusEnum["UNKNOWN"] = "unknown";
})(ChargeItemDefinitionStatusEnum || (ChargeItemDefinitionStatusEnum = {}));
