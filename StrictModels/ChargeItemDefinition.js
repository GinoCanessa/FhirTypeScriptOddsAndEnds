"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChargeItemDefinitionStatusEnum = exports.ChargeItemDefinition = exports.ChargeItemDefinitionPropertyGroup = exports.ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum = exports.ChargeItemDefinitionPropertyGroupPriceComponent = exports.ChargeItemDefinitionApplicability = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * The applicability conditions can be used to ascertain whether a billing item is allowed in a specific context. E.g. some billing codes may only be applicable in out-patient settings, only to male/female patients or only to children.
 */
class ChargeItemDefinitionApplicability extends fhirModels.BackboneElement {
    /**
     * Default constructor for ChargeItemDefinitionApplicability from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["expression"] !== undefined) {
            this.expression = source.expression;
        }
        if (source["_expression"] !== undefined) {
            this._expression = new fhirModels.Element(source._expression);
        }
        if (source["language"] !== undefined) {
            this.language = source.language;
        }
        if (source["_language"] !== undefined) {
            this._language = new fhirModels.Element(source._language);
        }
    }
}
exports.ChargeItemDefinitionApplicability = ChargeItemDefinitionApplicability;
/**
 * The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the prices have been calculated.
 */
class ChargeItemDefinitionPropertyGroupPriceComponent extends fhirModels.BackboneElement {
    /**
     * Default constructor for ChargeItemDefinitionPropertyGroupPriceComponent from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["amount"] !== undefined) {
            this.amount = new fhirModels.Money(source.amount);
        }
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["factor"] !== undefined) {
            this.factor = source.factor;
        }
        if (source["_factor"] !== undefined) {
            this._factor = new fhirModels.Element(source._factor);
        }
        {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
    }
}
exports.ChargeItemDefinitionPropertyGroupPriceComponent = ChargeItemDefinitionPropertyGroupPriceComponent;
/**
 * Code Values for the ChargeItemDefinition.propertyGroup.priceComponent.type field
 */
var ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum;
(function (ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum) {
    ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum["BASE"] = "base";
    ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum["SURCHARGE"] = "surcharge";
    ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum["DEDUCTION"] = "deduction";
    ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum["DISCOUNT"] = "discount";
    ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum["TAX"] = "tax";
    ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum["INFORMATIONAL"] = "informational";
})(ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum = exports.ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum || (exports.ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum = {}));
/**
 * Group of properties which are applicable under the same conditions. If no applicability rules are established for the group, then all properties always apply.
 */
class ChargeItemDefinitionPropertyGroup extends fhirModels.BackboneElement {
    /**
     * Default constructor for ChargeItemDefinitionPropertyGroup from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["applicability"] !== undefined) {
            this.applicability = source.applicability.map((x) => new fhirModels.ChargeItemDefinitionApplicability(x));
        }
        if (source["priceComponent"] !== undefined) {
            this.priceComponent = source.priceComponent.map((x) => new fhirModels.ChargeItemDefinitionPropertyGroupPriceComponent(x));
        }
    }
}
exports.ChargeItemDefinitionPropertyGroup = ChargeItemDefinitionPropertyGroup;
/**
 * The ChargeItemDefinition resource provides the properties that apply to the (billing) codes necessary to calculate costs and prices. The properties may differ largely depending on type and realm, therefore this resource gives only a rough structure and requires profiling for each type of billing code system.
 */
class ChargeItemDefinition extends fhirModels.DomainResource {
    /**
     * Default constructor for ChargeItemDefinition from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "ChargeItemDefinition";
        if ((source['resourceType'] !== "ChargeItemDefinition") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a ChargeItemDefinition';
        }
        if (source["applicability"] !== undefined) {
            this.applicability = source.applicability.map((x) => new fhirModels.ChargeItemDefinitionApplicability(x));
        }
        if (source["approvalDate"] !== undefined) {
            this.approvalDate = source.approvalDate;
        }
        if (source["_approvalDate"] !== undefined) {
            this._approvalDate = new fhirModels.Element(source._approvalDate);
        }
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["contact"] !== undefined) {
            this.contact = source.contact.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["copyright"] !== undefined) {
            this.copyright = source.copyright;
        }
        if (source["_copyright"] !== undefined) {
            this._copyright = new fhirModels.Element(source._copyright);
        }
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["derivedFromUri"] !== undefined) {
            this.derivedFromUri = source.derivedFromUri.map((x) => (x));
        }
        if (source["_derivedFromUri"] !== undefined) {
            this._derivedFromUri = source._derivedFromUri.map((x) => new fhirModels.Element(x));
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["effectivePeriod"] !== undefined) {
            this.effectivePeriod = new fhirModels.Period(source.effectivePeriod);
        }
        if (source["experimental"] !== undefined) {
            this.experimental = source.experimental;
        }
        if (source["_experimental"] !== undefined) {
            this._experimental = new fhirModels.Element(source._experimental);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["instance"] !== undefined) {
            this.instance = source.instance.map((x) => new fhirModels.Reference(x));
        }
        if (source["jurisdiction"] !== undefined) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["lastReviewDate"] !== undefined) {
            this.lastReviewDate = source.lastReviewDate;
        }
        if (source["_lastReviewDate"] !== undefined) {
            this._lastReviewDate = new fhirModels.Element(source._lastReviewDate);
        }
        if (source["partOf"] !== undefined) {
            this.partOf = source.partOf.map((x) => (x));
        }
        if (source["_partOf"] !== undefined) {
            this._partOf = source._partOf.map((x) => new fhirModels.Element(x));
        }
        if (source["propertyGroup"] !== undefined) {
            this.propertyGroup = source.propertyGroup.map((x) => new fhirModels.ChargeItemDefinitionPropertyGroup(x));
        }
        if (source["publisher"] !== undefined) {
            this.publisher = source.publisher;
        }
        if (source["_publisher"] !== undefined) {
            this._publisher = new fhirModels.Element(source._publisher);
        }
        if (source["replaces"] !== undefined) {
            this.replaces = source.replaces.map((x) => (x));
        }
        if (source["_replaces"] !== undefined) {
            this._replaces = source._replaces.map((x) => new fhirModels.Element(x));
        }
        {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["title"] !== undefined) {
            this.title = source.title;
        }
        if (source["_title"] !== undefined) {
            this._title = new fhirModels.Element(source._title);
        }
        {
            this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            this._url = new fhirModels.Element(source._url);
        }
        if (source["useContext"] !== undefined) {
            this.useContext = source.useContext.map((x) => new fhirModels.UsageContext(x));
        }
        if (source["version"] !== undefined) {
            this.version = source.version;
        }
        if (source["_version"] !== undefined) {
            this._version = new fhirModels.Element(source._version);
        }
    }
}
exports.ChargeItemDefinition = ChargeItemDefinition;
/**
 * Code Values for the ChargeItemDefinition.status field
 */
var ChargeItemDefinitionStatusEnum;
(function (ChargeItemDefinitionStatusEnum) {
    ChargeItemDefinitionStatusEnum["DRAFT"] = "draft";
    ChargeItemDefinitionStatusEnum["ACTIVE"] = "active";
    ChargeItemDefinitionStatusEnum["RETIRED"] = "retired";
    ChargeItemDefinitionStatusEnum["UNKNOWN"] = "unknown";
})(ChargeItemDefinitionStatusEnum = exports.ChargeItemDefinitionStatusEnum || (exports.ChargeItemDefinitionStatusEnum = {}));
//# sourceMappingURL=ChargeItemDefinition.js.map