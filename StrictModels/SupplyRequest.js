"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SupplyRequestStatusEnum = exports.SupplyRequestPriorityEnum = exports.SupplyRequest = exports.SupplyRequestParameter = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Specific parameters for the ordered item.  For example, the size of the indicated item.
 */
class SupplyRequestParameter extends fhirModels.BackboneElement {
    /**
     * Default constructor for SupplyRequestParameter from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["valueCodeableConcept"] !== undefined) {
            this.valueCodeableConcept = new fhirModels.CodeableConcept(source.valueCodeableConcept);
        }
        if (source["valueQuantity"] !== undefined) {
            this.valueQuantity = new fhirModels.Quantity(source.valueQuantity);
        }
        if (source["valueRange"] !== undefined) {
            this.valueRange = new fhirModels.Range(source.valueRange);
        }
        if (source["valueBoolean"] !== undefined) {
            this.valueBoolean = source.valueBoolean;
        }
        if (source["_valueBoolean"] !== undefined) {
            this._valueBoolean = new fhirModels.Element(source._valueBoolean);
        }
    }
}
exports.SupplyRequestParameter = SupplyRequestParameter;
/**
 * A record of a request for a medication, substance or device used in the healthcare setting.
 */
class SupplyRequest extends fhirModels.DomainResource {
    /**
     * Default constructor for SupplyRequest from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "SupplyRequest";
        if ((source['resourceType'] !== "SupplyRequest") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a SupplyRequest';
        }
        if (source["authoredOn"] !== undefined) {
            this.authoredOn = source.authoredOn;
        }
        if (source["_authoredOn"] !== undefined) {
            this._authoredOn = new fhirModels.Element(source._authoredOn);
        }
        if (source["category"] !== undefined) {
            this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["deliverFrom"] !== undefined) {
            this.deliverFrom = new fhirModels.Reference(source.deliverFrom);
        }
        if (source["deliverTo"] !== undefined) {
            this.deliverTo = new fhirModels.Reference(source.deliverTo);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["itemCodeableConcept"] !== undefined) {
            this.itemCodeableConcept = new fhirModels.CodeableConcept(source.itemCodeableConcept);
        }
        if (source["itemReference"] !== undefined) {
            this.itemReference = new fhirModels.Reference(source.itemReference);
        }
        if (source["occurrenceDateTime"] !== undefined) {
            this.occurrenceDateTime = source.occurrenceDateTime;
        }
        if (source["_occurrenceDateTime"] !== undefined) {
            this._occurrenceDateTime = new fhirModels.Element(source._occurrenceDateTime);
        }
        if (source["occurrencePeriod"] !== undefined) {
            this.occurrencePeriod = new fhirModels.Period(source.occurrencePeriod);
        }
        if (source["occurrenceTiming"] !== undefined) {
            this.occurrenceTiming = new fhirModels.Timing(source.occurrenceTiming);
        }
        if (source["parameter"] !== undefined) {
            this.parameter = source.parameter.map((x) => new fhirModels.SupplyRequestParameter(x));
        }
        if (source["priority"] !== undefined) {
            this.priority = source.priority;
        }
        if (source["_priority"] !== undefined) {
            this._priority = new fhirModels.Element(source._priority);
        }
        {
            this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["reasonCode"] !== undefined) {
            this.reasonCode = source.reasonCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["reasonReference"] !== undefined) {
            this.reasonReference = source.reasonReference.map((x) => new fhirModels.Reference(x));
        }
        if (source["requester"] !== undefined) {
            this.requester = new fhirModels.Reference(source.requester);
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["supplier"] !== undefined) {
            this.supplier = source.supplier.map((x) => new fhirModels.Reference(x));
        }
    }
}
exports.SupplyRequest = SupplyRequest;
/**
 * Code Values for the SupplyRequest.priority field
 */
var SupplyRequestPriorityEnum;
(function (SupplyRequestPriorityEnum) {
    SupplyRequestPriorityEnum["ROUTINE"] = "routine";
    SupplyRequestPriorityEnum["URGENT"] = "urgent";
    SupplyRequestPriorityEnum["ASAP"] = "asap";
    SupplyRequestPriorityEnum["STAT"] = "stat";
})(SupplyRequestPriorityEnum = exports.SupplyRequestPriorityEnum || (exports.SupplyRequestPriorityEnum = {}));
/**
 * Code Values for the SupplyRequest.status field
 */
var SupplyRequestStatusEnum;
(function (SupplyRequestStatusEnum) {
    SupplyRequestStatusEnum["DRAFT"] = "draft";
    SupplyRequestStatusEnum["ACTIVE"] = "active";
    SupplyRequestStatusEnum["SUSPENDED"] = "suspended";
    SupplyRequestStatusEnum["CANCELLED"] = "cancelled";
    SupplyRequestStatusEnum["COMPLETED"] = "completed";
    SupplyRequestStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    SupplyRequestStatusEnum["UNKNOWN"] = "unknown";
})(SupplyRequestStatusEnum = exports.SupplyRequestStatusEnum || (exports.SupplyRequestStatusEnum = {}));
//# sourceMappingURL=SupplyRequest.js.map