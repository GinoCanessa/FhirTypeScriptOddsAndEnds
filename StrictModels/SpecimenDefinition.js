"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpecimenDefinition = exports.SpecimenDefinitionTypeTestedPreferenceEnum = exports.SpecimenDefinitionTypeTested = exports.SpecimenDefinitionTypeTestedHandling = exports.SpecimenDefinitionTypeTestedContainer = exports.SpecimenDefinitionTypeTestedContainerAdditive = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
 */
class SpecimenDefinitionTypeTestedContainerAdditive extends fhirModels.BackboneElement {
    /**
     * Default constructor for SpecimenDefinitionTypeTestedContainerAdditive from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["additiveCodeableConcept"] !== undefined) {
            this.additiveCodeableConcept = new fhirModels.CodeableConcept(source.additiveCodeableConcept);
        }
        if (source["additiveReference"] !== undefined) {
            this.additiveReference = new fhirModels.Reference(source.additiveReference);
        }
    }
}
exports.SpecimenDefinitionTypeTestedContainerAdditive = SpecimenDefinitionTypeTestedContainerAdditive;
/**
 * The specimen's container.
 */
class SpecimenDefinitionTypeTestedContainer extends fhirModels.BackboneElement {
    /**
     * Default constructor for SpecimenDefinitionTypeTestedContainer from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["additive"] !== undefined) {
            this.additive = source.additive.map((x) => new fhirModels.SpecimenDefinitionTypeTestedContainerAdditive(x));
        }
        if (source["cap"] !== undefined) {
            this.cap = new fhirModels.CodeableConcept(source.cap);
        }
        if (source["capacity"] !== undefined) {
            this.capacity = new fhirModels.Quantity(source.capacity);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["material"] !== undefined) {
            this.material = new fhirModels.CodeableConcept(source.material);
        }
        if (source["minimumVolumeQuantity"] !== undefined) {
            this.minimumVolumeQuantity = new fhirModels.Quantity(source.minimumVolumeQuantity);
        }
        if (source["minimumVolumeString"] !== undefined) {
            this.minimumVolumeString = source.minimumVolumeString;
        }
        if (source["_minimumVolumeString"] !== undefined) {
            this._minimumVolumeString = new fhirModels.Element(source._minimumVolumeString);
        }
        if (source["preparation"] !== undefined) {
            this.preparation = source.preparation;
        }
        if (source["_preparation"] !== undefined) {
            this._preparation = new fhirModels.Element(source._preparation);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.SpecimenDefinitionTypeTestedContainer = SpecimenDefinitionTypeTestedContainer;
/**
 * Set of instructions for preservation/transport of the specimen at a defined temperature interval, prior the testing process.
 */
class SpecimenDefinitionTypeTestedHandling extends fhirModels.BackboneElement {
    /**
     * Default constructor for SpecimenDefinitionTypeTestedHandling from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["instruction"] !== undefined) {
            this.instruction = source.instruction;
        }
        if (source["_instruction"] !== undefined) {
            this._instruction = new fhirModels.Element(source._instruction);
        }
        if (source["maxDuration"] !== undefined) {
            this.maxDuration = new fhirModels.Duration(source.maxDuration);
        }
        if (source["temperatureQualifier"] !== undefined) {
            this.temperatureQualifier = new fhirModels.CodeableConcept(source.temperatureQualifier);
        }
        if (source["temperatureRange"] !== undefined) {
            this.temperatureRange = new fhirModels.Range(source.temperatureRange);
        }
    }
}
exports.SpecimenDefinitionTypeTestedHandling = SpecimenDefinitionTypeTestedHandling;
/**
 * Specimen conditioned in a container as expected by the testing laboratory.
 */
class SpecimenDefinitionTypeTested extends fhirModels.BackboneElement {
    /**
     * Default constructor for SpecimenDefinitionTypeTested from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["container"] !== undefined) {
            this.container = new fhirModels.SpecimenDefinitionTypeTestedContainer(source.container);
        }
        if (source["handling"] !== undefined) {
            this.handling = source.handling.map((x) => new fhirModels.SpecimenDefinitionTypeTestedHandling(x));
        }
        if (source["isDerived"] !== undefined) {
            this.isDerived = source.isDerived;
        }
        if (source["_isDerived"] !== undefined) {
            this._isDerived = new fhirModels.Element(source._isDerived);
        }
        {
            this.preference = source.preference;
        }
        if (source["_preference"] !== undefined) {
            this._preference = new fhirModels.Element(source._preference);
        }
        if (source["rejectionCriterion"] !== undefined) {
            this.rejectionCriterion = source.rejectionCriterion.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["requirement"] !== undefined) {
            this.requirement = source.requirement;
        }
        if (source["_requirement"] !== undefined) {
            this._requirement = new fhirModels.Element(source._requirement);
        }
        if (source["retentionTime"] !== undefined) {
            this.retentionTime = new fhirModels.Duration(source.retentionTime);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.SpecimenDefinitionTypeTested = SpecimenDefinitionTypeTested;
/**
 * Code Values for the SpecimenDefinition.typeTested.preference field
 */
var SpecimenDefinitionTypeTestedPreferenceEnum;
(function (SpecimenDefinitionTypeTestedPreferenceEnum) {
    SpecimenDefinitionTypeTestedPreferenceEnum["PREFERRED"] = "preferred";
    SpecimenDefinitionTypeTestedPreferenceEnum["ALTERNATE"] = "alternate";
})(SpecimenDefinitionTypeTestedPreferenceEnum = exports.SpecimenDefinitionTypeTestedPreferenceEnum || (exports.SpecimenDefinitionTypeTestedPreferenceEnum = {}));
/**
 * A kind of specimen with associated set of requirements.
 */
class SpecimenDefinition extends fhirModels.DomainResource {
    /**
     * Default constructor for SpecimenDefinition from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "SpecimenDefinition";
        if ((source['resourceType'] !== "SpecimenDefinition") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a SpecimenDefinition';
        }
        if (source["collection"] !== undefined) {
            this.collection = source.collection.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["identifier"] !== undefined) {
            this.identifier = new fhirModels.Identifier(source.identifier);
        }
        if (source["patientPreparation"] !== undefined) {
            this.patientPreparation = source.patientPreparation.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["timeAspect"] !== undefined) {
            this.timeAspect = source.timeAspect;
        }
        if (source["_timeAspect"] !== undefined) {
            this._timeAspect = new fhirModels.Element(source._timeAspect);
        }
        if (source["typeCollected"] !== undefined) {
            this.typeCollected = new fhirModels.CodeableConcept(source.typeCollected);
        }
        if (source["typeTested"] !== undefined) {
            this.typeTested = source.typeTested.map((x) => new fhirModels.SpecimenDefinitionTypeTested(x));
        }
    }
}
exports.SpecimenDefinition = SpecimenDefinition;
//# sourceMappingURL=SpecimenDefinition.js.map