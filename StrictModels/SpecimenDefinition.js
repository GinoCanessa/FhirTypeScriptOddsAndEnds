var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
 */
var SpecimenDefinitionTypeTestedContainerAdditive = /** @class */ (function (_super) {
    __extends(SpecimenDefinitionTypeTestedContainerAdditive, _super);
    /**
     * Default constructor for SpecimenDefinitionTypeTestedContainerAdditive from an object that MAY NOT contain all required elements.
     */
    function SpecimenDefinitionTypeTestedContainerAdditive(source) {
        var _this = _super.call(this, source) || this;
        if (source["additiveCodeableConcept"] !== undefined) {
            _this.additiveCodeableConcept = new fhirModels.CodeableConcept(source.additiveCodeableConcept);
        }
        if (source["additiveReference"] !== undefined) {
            _this.additiveReference = new fhirModels.Reference(source.additiveReference);
        }
        return _this;
    }
    return SpecimenDefinitionTypeTestedContainerAdditive;
}(fhirModels.BackboneElement));
export { SpecimenDefinitionTypeTestedContainerAdditive };
/**
 * The specimen's container.
 */
var SpecimenDefinitionTypeTestedContainer = /** @class */ (function (_super) {
    __extends(SpecimenDefinitionTypeTestedContainer, _super);
    /**
     * Default constructor for SpecimenDefinitionTypeTestedContainer from an object that MAY NOT contain all required elements.
     */
    function SpecimenDefinitionTypeTestedContainer(source) {
        var _this = _super.call(this, source) || this;
        if (source["additive"] !== undefined) {
            _this.additive = source.additive.map(function (x) { return new fhirModels.SpecimenDefinitionTypeTestedContainerAdditive(x); });
        }
        if (source["cap"] !== undefined) {
            _this.cap = new fhirModels.CodeableConcept(source.cap);
        }
        if (source["capacity"] !== undefined) {
            _this.capacity = new fhirModels.Quantity(source.capacity);
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["material"] !== undefined) {
            _this.material = new fhirModels.CodeableConcept(source.material);
        }
        if (source["minimumVolumeQuantity"] !== undefined) {
            _this.minimumVolumeQuantity = new fhirModels.Quantity(source.minimumVolumeQuantity);
        }
        if (source["minimumVolumeString"] !== undefined) {
            _this.minimumVolumeString = source.minimumVolumeString;
        }
        if (source["_minimumVolumeString"] !== undefined) {
            _this._minimumVolumeString = new fhirModels.Element(source._minimumVolumeString);
        }
        if (source["preparation"] !== undefined) {
            _this.preparation = source.preparation;
        }
        if (source["_preparation"] !== undefined) {
            _this._preparation = new fhirModels.Element(source._preparation);
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    return SpecimenDefinitionTypeTestedContainer;
}(fhirModels.BackboneElement));
export { SpecimenDefinitionTypeTestedContainer };
/**
 * Set of instructions for preservation/transport of the specimen at a defined temperature interval, prior the testing process.
 */
var SpecimenDefinitionTypeTestedHandling = /** @class */ (function (_super) {
    __extends(SpecimenDefinitionTypeTestedHandling, _super);
    /**
     * Default constructor for SpecimenDefinitionTypeTestedHandling from an object that MAY NOT contain all required elements.
     */
    function SpecimenDefinitionTypeTestedHandling(source) {
        var _this = _super.call(this, source) || this;
        if (source["instruction"] !== undefined) {
            _this.instruction = source.instruction;
        }
        if (source["_instruction"] !== undefined) {
            _this._instruction = new fhirModels.Element(source._instruction);
        }
        if (source["maxDuration"] !== undefined) {
            _this.maxDuration = new fhirModels.Duration(source.maxDuration);
        }
        if (source["temperatureQualifier"] !== undefined) {
            _this.temperatureQualifier = new fhirModels.CodeableConcept(source.temperatureQualifier);
        }
        if (source["temperatureRange"] !== undefined) {
            _this.temperatureRange = new fhirModels.Range(source.temperatureRange);
        }
        return _this;
    }
    return SpecimenDefinitionTypeTestedHandling;
}(fhirModels.BackboneElement));
export { SpecimenDefinitionTypeTestedHandling };
/**
 * Specimen conditioned in a container as expected by the testing laboratory.
 */
var SpecimenDefinitionTypeTested = /** @class */ (function (_super) {
    __extends(SpecimenDefinitionTypeTested, _super);
    /**
     * Default constructor for SpecimenDefinitionTypeTested from an object that MAY NOT contain all required elements.
     */
    function SpecimenDefinitionTypeTested(source) {
        var _this = _super.call(this, source) || this;
        if (source["container"] !== undefined) {
            _this.container = new fhirModels.SpecimenDefinitionTypeTestedContainer(source.container);
        }
        if (source["handling"] !== undefined) {
            _this.handling = source.handling.map(function (x) { return new fhirModels.SpecimenDefinitionTypeTestedHandling(x); });
        }
        if (source["isDerived"] !== undefined) {
            _this.isDerived = source.isDerived;
        }
        if (source["_isDerived"] !== undefined) {
            _this._isDerived = new fhirModels.Element(source._isDerived);
        }
        {
            _this.preference = source.preference;
        }
        if (source["_preference"] !== undefined) {
            _this._preference = new fhirModels.Element(source._preference);
        }
        if (source["rejectionCriterion"] !== undefined) {
            _this.rejectionCriterion = source.rejectionCriterion.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["requirement"] !== undefined) {
            _this.requirement = source.requirement;
        }
        if (source["_requirement"] !== undefined) {
            _this._requirement = new fhirModels.Element(source._requirement);
        }
        if (source["retentionTime"] !== undefined) {
            _this.retentionTime = new fhirModels.Duration(source.retentionTime);
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    return SpecimenDefinitionTypeTested;
}(fhirModels.BackboneElement));
export { SpecimenDefinitionTypeTested };
/**
 * Code Values for the SpecimenDefinition.typeTested.preference field
 */
export var SpecimenDefinitionTypeTestedPreferenceEnum;
(function (SpecimenDefinitionTypeTestedPreferenceEnum) {
    SpecimenDefinitionTypeTestedPreferenceEnum["PREFERRED"] = "preferred";
    SpecimenDefinitionTypeTestedPreferenceEnum["ALTERNATE"] = "alternate";
})(SpecimenDefinitionTypeTestedPreferenceEnum || (SpecimenDefinitionTypeTestedPreferenceEnum = {}));
/**
 * A kind of specimen with associated set of requirements.
 */
var SpecimenDefinition = /** @class */ (function (_super) {
    __extends(SpecimenDefinition, _super);
    /**
     * Default constructor for SpecimenDefinition from an object that MAY NOT contain all required elements.
     */
    function SpecimenDefinition(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "SpecimenDefinition";
        if ((source['resourceType'] !== "SpecimenDefinition") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a SpecimenDefinition';
        }
        if (source["collection"] !== undefined) {
            _this.collection = source.collection.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = new fhirModels.Identifier(source.identifier);
        }
        if (source["patientPreparation"] !== undefined) {
            _this.patientPreparation = source.patientPreparation.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["timeAspect"] !== undefined) {
            _this.timeAspect = source.timeAspect;
        }
        if (source["_timeAspect"] !== undefined) {
            _this._timeAspect = new fhirModels.Element(source._timeAspect);
        }
        if (source["typeCollected"] !== undefined) {
            _this.typeCollected = new fhirModels.CodeableConcept(source.typeCollected);
        }
        if (source["typeTested"] !== undefined) {
            _this.typeTested = source.typeTested.map(function (x) { return new fhirModels.SpecimenDefinitionTypeTested(x); });
        }
        return _this;
    }
    return SpecimenDefinition;
}(fhirModels.DomainResource));
export { SpecimenDefinition };
