"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriptionStatusEnum = exports.Subscription = exports.SubscriptionChannelTypeEnum = exports.SubscriptionChannel = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Details where to send notifications when resources are received that meet the criteria.
 */
class SubscriptionChannel extends fhirModels.BackboneElement {
    /**
     * Default constructor for SubscriptionChannel from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["endpoint"] !== undefined) {
            this.endpoint = source.endpoint;
        }
        if (source["_endpoint"] !== undefined) {
            this._endpoint = new fhirModels.Element(source._endpoint);
        }
        if (source["header"] !== undefined) {
            this.header = source.header.map((x) => (x));
        }
        if (source["_header"] !== undefined) {
            this._header = source._header.map((x) => new fhirModels.Element(x));
        }
        if (source["payload"] !== undefined) {
            this.payload = source.payload;
        }
        if (source["_payload"] !== undefined) {
            this._payload = new fhirModels.Element(source._payload);
        }
        {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
    }
}
exports.SubscriptionChannel = SubscriptionChannel;
/**
 * Code Values for the Subscription.channel.type field
 */
var SubscriptionChannelTypeEnum;
(function (SubscriptionChannelTypeEnum) {
    SubscriptionChannelTypeEnum["REST_HOOK"] = "rest-hook";
    SubscriptionChannelTypeEnum["WEBSOCKET"] = "websocket";
    SubscriptionChannelTypeEnum["EMAIL"] = "email";
    SubscriptionChannelTypeEnum["SMS"] = "sms";
    SubscriptionChannelTypeEnum["MESSAGE"] = "message";
})(SubscriptionChannelTypeEnum = exports.SubscriptionChannelTypeEnum || (exports.SubscriptionChannelTypeEnum = {}));
/**
 * The subscription resource is used to define a push-based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system can take an appropriate action.
 */
class Subscription extends fhirModels.DomainResource {
    /**
     * Default constructor for Subscription from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "Subscription";
        if ((source['resourceType'] !== "Subscription") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Subscription';
        }
        {
            this.channel = new fhirModels.SubscriptionChannel(source.channel);
        }
        if (source["contact"] !== undefined) {
            this.contact = source.contact.map((x) => new fhirModels.ContactPoint(x));
        }
        {
            this.criteria = source.criteria;
        }
        if (source["_criteria"] !== undefined) {
            this._criteria = new fhirModels.Element(source._criteria);
        }
        if (source["end"] !== undefined) {
            this.end = source.end;
        }
        if (source["_end"] !== undefined) {
            this._end = new fhirModels.Element(source._end);
        }
        if (source["error"] !== undefined) {
            this.error = source.error;
        }
        if (source["_error"] !== undefined) {
            this._error = new fhirModels.Element(source._error);
        }
        {
            this.reason = source.reason;
        }
        if (source["_reason"] !== undefined) {
            this._reason = new fhirModels.Element(source._reason);
        }
        {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
    }
}
exports.Subscription = Subscription;
/**
 * Code Values for the Subscription.status field
 */
var SubscriptionStatusEnum;
(function (SubscriptionStatusEnum) {
    SubscriptionStatusEnum["REQUESTED"] = "requested";
    SubscriptionStatusEnum["ACTIVE"] = "active";
    SubscriptionStatusEnum["ERROR"] = "error";
    SubscriptionStatusEnum["OFF"] = "off";
})(SubscriptionStatusEnum = exports.SubscriptionStatusEnum || (exports.SubscriptionStatusEnum = {}));
//# sourceMappingURL=Subscription.js.map