var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
 */
var DeviceUdiCarrier = /** @class */ (function (_super) {
    __extends(DeviceUdiCarrier, _super);
    /**
     * Default constructor for DeviceUdiCarrier from an object that MAY NOT contain all required elements.
     */
    function DeviceUdiCarrier(source) {
        var _this = _super.call(this, source) || this;
        if (source["carrierAIDC"] !== undefined) {
            _this.carrierAIDC = source.carrierAIDC;
        }
        if (source["_carrierAIDC"] !== undefined) {
            _this._carrierAIDC = new fhirModels.Element(source._carrierAIDC);
        }
        if (source["carrierHRF"] !== undefined) {
            _this.carrierHRF = source.carrierHRF;
        }
        if (source["_carrierHRF"] !== undefined) {
            _this._carrierHRF = new fhirModels.Element(source._carrierHRF);
        }
        if (source["deviceIdentifier"] !== undefined) {
            _this.deviceIdentifier = source.deviceIdentifier;
        }
        if (source["_deviceIdentifier"] !== undefined) {
            _this._deviceIdentifier = new fhirModels.Element(source._deviceIdentifier);
        }
        if (source["entryType"] !== undefined) {
            _this.entryType = source.entryType;
        }
        if (source["_entryType"] !== undefined) {
            _this._entryType = new fhirModels.Element(source._entryType);
        }
        if (source["issuer"] !== undefined) {
            _this.issuer = source.issuer;
        }
        if (source["_issuer"] !== undefined) {
            _this._issuer = new fhirModels.Element(source._issuer);
        }
        if (source["jurisdiction"] !== undefined) {
            _this.jurisdiction = source.jurisdiction;
        }
        if (source["_jurisdiction"] !== undefined) {
            _this._jurisdiction = new fhirModels.Element(source._jurisdiction);
        }
        return _this;
    }
    return DeviceUdiCarrier;
}(fhirModels.BackboneElement));
export { DeviceUdiCarrier };
/**
 * Code Values for the Device.udiCarrier.entryType field
 */
export var DeviceUdiCarrierEntryTypeEnum;
(function (DeviceUdiCarrierEntryTypeEnum) {
    DeviceUdiCarrierEntryTypeEnum["BARCODE"] = "barcode";
    DeviceUdiCarrierEntryTypeEnum["RFID"] = "rfid";
    DeviceUdiCarrierEntryTypeEnum["MANUAL"] = "manual";
    DeviceUdiCarrierEntryTypeEnum["CARD"] = "card";
    DeviceUdiCarrierEntryTypeEnum["SELF_REPORTED"] = "self-reported";
    DeviceUdiCarrierEntryTypeEnum["UNKNOWN"] = "unknown";
})(DeviceUdiCarrierEntryTypeEnum || (DeviceUdiCarrierEntryTypeEnum = {}));
/**
 * This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
 */
var DeviceDeviceName = /** @class */ (function (_super) {
    __extends(DeviceDeviceName, _super);
    /**
     * Default constructor for DeviceDeviceName from an object that MAY NOT contain all required elements.
     */
    function DeviceDeviceName(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            _this._name = new fhirModels.Element(source._name);
        }
        {
            _this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            _this._type = new fhirModels.Element(source._type);
        }
        return _this;
    }
    return DeviceDeviceName;
}(fhirModels.BackboneElement));
export { DeviceDeviceName };
/**
 * Code Values for the Device.deviceName.type field
 */
export var DeviceDeviceNameTypeEnum;
(function (DeviceDeviceNameTypeEnum) {
    DeviceDeviceNameTypeEnum["UDI_LABEL_NAME"] = "udi-label-name";
    DeviceDeviceNameTypeEnum["USER_FRIENDLY_NAME"] = "user-friendly-name";
    DeviceDeviceNameTypeEnum["PATIENT_REPORTED_NAME"] = "patient-reported-name";
    DeviceDeviceNameTypeEnum["MANUFACTURER_NAME"] = "manufacturer-name";
    DeviceDeviceNameTypeEnum["MODEL_NAME"] = "model-name";
    DeviceDeviceNameTypeEnum["OTHER"] = "other";
})(DeviceDeviceNameTypeEnum || (DeviceDeviceNameTypeEnum = {}));
/**
 * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
 */
var DeviceSpecialization = /** @class */ (function (_super) {
    __extends(DeviceSpecialization, _super);
    /**
     * Default constructor for DeviceSpecialization from an object that MAY NOT contain all required elements.
     */
    function DeviceSpecialization(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.systemType = new fhirModels.CodeableConcept(source.systemType);
        }
        if (source["version"] !== undefined) {
            _this.version = source.version;
        }
        if (source["_version"] !== undefined) {
            _this._version = new fhirModels.Element(source._version);
        }
        return _this;
    }
    return DeviceSpecialization;
}(fhirModels.BackboneElement));
export { DeviceSpecialization };
/**
 * The actual design of the device or software version running on the device.
 */
var DeviceVersion = /** @class */ (function (_super) {
    __extends(DeviceVersion, _super);
    /**
     * Default constructor for DeviceVersion from an object that MAY NOT contain all required elements.
     */
    function DeviceVersion(source) {
        var _this = _super.call(this, source) || this;
        if (source["component"] !== undefined) {
            _this.component = new fhirModels.Identifier(source.component);
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        {
            _this.value = source.value;
        }
        if (source["_value"] !== undefined) {
            _this._value = new fhirModels.Element(source._value);
        }
        return _this;
    }
    return DeviceVersion;
}(fhirModels.BackboneElement));
export { DeviceVersion };
/**
 * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
 */
var DeviceProperty = /** @class */ (function (_super) {
    __extends(DeviceProperty, _super);
    /**
     * Default constructor for DeviceProperty from an object that MAY NOT contain all required elements.
     */
    function DeviceProperty(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["valueCode"] !== undefined) {
            _this.valueCode = source.valueCode.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["valueQuantity"] !== undefined) {
            _this.valueQuantity = source.valueQuantity.map(function (x) { return new fhirModels.Quantity(x); });
        }
        return _this;
    }
    return DeviceProperty;
}(fhirModels.BackboneElement));
export { DeviceProperty };
/**
 * A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.
 */
var Device = /** @class */ (function (_super) {
    __extends(Device, _super);
    /**
     * Default constructor for Device from an object that MAY NOT contain all required elements.
     */
    function Device(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "Device";
        if ((source['resourceType'] !== "Device") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Device';
        }
        if (source["contact"] !== undefined) {
            _this.contact = source.contact.map(function (x) { return new fhirModels.ContactPoint(x); });
        }
        if (source["definition"] !== undefined) {
            _this.definition = new fhirModels.Reference(source.definition);
        }
        if (source["deviceName"] !== undefined) {
            _this.deviceName = source.deviceName.map(function (x) { return new fhirModels.DeviceDeviceName(x); });
        }
        if (source["distinctIdentifier"] !== undefined) {
            _this.distinctIdentifier = source.distinctIdentifier;
        }
        if (source["_distinctIdentifier"] !== undefined) {
            _this._distinctIdentifier = new fhirModels.Element(source._distinctIdentifier);
        }
        if (source["expirationDate"] !== undefined) {
            _this.expirationDate = source.expirationDate;
        }
        if (source["_expirationDate"] !== undefined) {
            _this._expirationDate = new fhirModels.Element(source._expirationDate);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["location"] !== undefined) {
            _this.location = new fhirModels.Reference(source.location);
        }
        if (source["lotNumber"] !== undefined) {
            _this.lotNumber = source.lotNumber;
        }
        if (source["_lotNumber"] !== undefined) {
            _this._lotNumber = new fhirModels.Element(source._lotNumber);
        }
        if (source["manufactureDate"] !== undefined) {
            _this.manufactureDate = source.manufactureDate;
        }
        if (source["_manufactureDate"] !== undefined) {
            _this._manufactureDate = new fhirModels.Element(source._manufactureDate);
        }
        if (source["manufacturer"] !== undefined) {
            _this.manufacturer = source.manufacturer;
        }
        if (source["_manufacturer"] !== undefined) {
            _this._manufacturer = new fhirModels.Element(source._manufacturer);
        }
        if (source["modelNumber"] !== undefined) {
            _this.modelNumber = source.modelNumber;
        }
        if (source["_modelNumber"] !== undefined) {
            _this._modelNumber = new fhirModels.Element(source._modelNumber);
        }
        if (source["note"] !== undefined) {
            _this.note = source.note.map(function (x) { return new fhirModels.Annotation(x); });
        }
        if (source["owner"] !== undefined) {
            _this.owner = new fhirModels.Reference(source.owner);
        }
        if (source["parent"] !== undefined) {
            _this.parent = new fhirModels.Reference(source.parent);
        }
        if (source["partNumber"] !== undefined) {
            _this.partNumber = source.partNumber;
        }
        if (source["_partNumber"] !== undefined) {
            _this._partNumber = new fhirModels.Element(source._partNumber);
        }
        if (source["patient"] !== undefined) {
            _this.patient = new fhirModels.Reference(source.patient);
        }
        if (source["property"] !== undefined) {
            _this.property = source.property.map(function (x) { return new fhirModels.DeviceProperty(x); });
        }
        if (source["safety"] !== undefined) {
            _this.safety = source.safety.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["serialNumber"] !== undefined) {
            _this.serialNumber = source.serialNumber;
        }
        if (source["_serialNumber"] !== undefined) {
            _this._serialNumber = new fhirModels.Element(source._serialNumber);
        }
        if (source["specialization"] !== undefined) {
            _this.specialization = source.specialization.map(function (x) { return new fhirModels.DeviceSpecialization(x); });
        }
        if (source["status"] !== undefined) {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["statusReason"] !== undefined) {
            _this.statusReason = source.statusReason.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["udiCarrier"] !== undefined) {
            _this.udiCarrier = source.udiCarrier.map(function (x) { return new fhirModels.DeviceUdiCarrier(x); });
        }
        if (source["url"] !== undefined) {
            _this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            _this._url = new fhirModels.Element(source._url);
        }
        if (source["version"] !== undefined) {
            _this.version = source.version.map(function (x) { return new fhirModels.DeviceVersion(x); });
        }
        return _this;
    }
    return Device;
}(fhirModels.DomainResource));
export { Device };
/**
 * Code Values for the Device.status field
 */
export var DeviceStatusEnum;
(function (DeviceStatusEnum) {
    DeviceStatusEnum["ACTIVE"] = "active";
    DeviceStatusEnum["INACTIVE"] = "inactive";
    DeviceStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    DeviceStatusEnum["UNKNOWN"] = "unknown";
})(DeviceStatusEnum || (DeviceStatusEnum = {}));
