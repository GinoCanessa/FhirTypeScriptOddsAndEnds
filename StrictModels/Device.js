"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeviceStatusEnum = exports.Device = exports.DeviceProperty = exports.DeviceVersion = exports.DeviceSpecialization = exports.DeviceDeviceNameTypeEnum = exports.DeviceDeviceName = exports.DeviceUdiCarrierEntryTypeEnum = exports.DeviceUdiCarrier = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
 */
class DeviceUdiCarrier extends fhirModels.BackboneElement {
    /**
     * Default constructor for DeviceUdiCarrier from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["carrierAIDC"] !== undefined) {
            this.carrierAIDC = source.carrierAIDC;
        }
        if (source["_carrierAIDC"] !== undefined) {
            this._carrierAIDC = new fhirModels.Element(source._carrierAIDC);
        }
        if (source["carrierHRF"] !== undefined) {
            this.carrierHRF = source.carrierHRF;
        }
        if (source["_carrierHRF"] !== undefined) {
            this._carrierHRF = new fhirModels.Element(source._carrierHRF);
        }
        if (source["deviceIdentifier"] !== undefined) {
            this.deviceIdentifier = source.deviceIdentifier;
        }
        if (source["_deviceIdentifier"] !== undefined) {
            this._deviceIdentifier = new fhirModels.Element(source._deviceIdentifier);
        }
        if (source["entryType"] !== undefined) {
            this.entryType = source.entryType;
        }
        if (source["_entryType"] !== undefined) {
            this._entryType = new fhirModels.Element(source._entryType);
        }
        if (source["issuer"] !== undefined) {
            this.issuer = source.issuer;
        }
        if (source["_issuer"] !== undefined) {
            this._issuer = new fhirModels.Element(source._issuer);
        }
        if (source["jurisdiction"] !== undefined) {
            this.jurisdiction = source.jurisdiction;
        }
        if (source["_jurisdiction"] !== undefined) {
            this._jurisdiction = new fhirModels.Element(source._jurisdiction);
        }
    }
}
exports.DeviceUdiCarrier = DeviceUdiCarrier;
/**
 * Code Values for the Device.udiCarrier.entryType field
 */
var DeviceUdiCarrierEntryTypeEnum;
(function (DeviceUdiCarrierEntryTypeEnum) {
    DeviceUdiCarrierEntryTypeEnum["BARCODE"] = "barcode";
    DeviceUdiCarrierEntryTypeEnum["RFID"] = "rfid";
    DeviceUdiCarrierEntryTypeEnum["MANUAL"] = "manual";
    DeviceUdiCarrierEntryTypeEnum["CARD"] = "card";
    DeviceUdiCarrierEntryTypeEnum["SELF_REPORTED"] = "self-reported";
    DeviceUdiCarrierEntryTypeEnum["UNKNOWN"] = "unknown";
})(DeviceUdiCarrierEntryTypeEnum = exports.DeviceUdiCarrierEntryTypeEnum || (exports.DeviceUdiCarrierEntryTypeEnum = {}));
/**
 * This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
 */
class DeviceDeviceName extends fhirModels.BackboneElement {
    /**
     * Default constructor for DeviceDeviceName from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
    }
}
exports.DeviceDeviceName = DeviceDeviceName;
/**
 * Code Values for the Device.deviceName.type field
 */
var DeviceDeviceNameTypeEnum;
(function (DeviceDeviceNameTypeEnum) {
    DeviceDeviceNameTypeEnum["UDI_LABEL_NAME"] = "udi-label-name";
    DeviceDeviceNameTypeEnum["USER_FRIENDLY_NAME"] = "user-friendly-name";
    DeviceDeviceNameTypeEnum["PATIENT_REPORTED_NAME"] = "patient-reported-name";
    DeviceDeviceNameTypeEnum["MANUFACTURER_NAME"] = "manufacturer-name";
    DeviceDeviceNameTypeEnum["MODEL_NAME"] = "model-name";
    DeviceDeviceNameTypeEnum["OTHER"] = "other";
})(DeviceDeviceNameTypeEnum = exports.DeviceDeviceNameTypeEnum || (exports.DeviceDeviceNameTypeEnum = {}));
/**
 * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
 */
class DeviceSpecialization extends fhirModels.BackboneElement {
    /**
     * Default constructor for DeviceSpecialization from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.systemType = new fhirModels.CodeableConcept(source.systemType);
        }
        if (source["version"] !== undefined) {
            this.version = source.version;
        }
        if (source["_version"] !== undefined) {
            this._version = new fhirModels.Element(source._version);
        }
    }
}
exports.DeviceSpecialization = DeviceSpecialization;
/**
 * The actual design of the device or software version running on the device.
 */
class DeviceVersion extends fhirModels.BackboneElement {
    /**
     * Default constructor for DeviceVersion from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["component"] !== undefined) {
            this.component = new fhirModels.Identifier(source.component);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
        {
            this.value = source.value;
        }
        if (source["_value"] !== undefined) {
            this._value = new fhirModels.Element(source._value);
        }
    }
}
exports.DeviceVersion = DeviceVersion;
/**
 * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
 */
class DeviceProperty extends fhirModels.BackboneElement {
    /**
     * Default constructor for DeviceProperty from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["valueCode"] !== undefined) {
            this.valueCode = source.valueCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["valueQuantity"] !== undefined) {
            this.valueQuantity = source.valueQuantity.map((x) => new fhirModels.Quantity(x));
        }
    }
}
exports.DeviceProperty = DeviceProperty;
/**
 * A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.
 */
class Device extends fhirModels.DomainResource {
    /**
     * Default constructor for Device from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "Device";
        if ((source['resourceType'] !== "Device") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Device';
        }
        if (source["contact"] !== undefined) {
            this.contact = source.contact.map((x) => new fhirModels.ContactPoint(x));
        }
        if (source["definition"] !== undefined) {
            this.definition = new fhirModels.Reference(source.definition);
        }
        if (source["deviceName"] !== undefined) {
            this.deviceName = source.deviceName.map((x) => new fhirModels.DeviceDeviceName(x));
        }
        if (source["distinctIdentifier"] !== undefined) {
            this.distinctIdentifier = source.distinctIdentifier;
        }
        if (source["_distinctIdentifier"] !== undefined) {
            this._distinctIdentifier = new fhirModels.Element(source._distinctIdentifier);
        }
        if (source["expirationDate"] !== undefined) {
            this.expirationDate = source.expirationDate;
        }
        if (source["_expirationDate"] !== undefined) {
            this._expirationDate = new fhirModels.Element(source._expirationDate);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["location"] !== undefined) {
            this.location = new fhirModels.Reference(source.location);
        }
        if (source["lotNumber"] !== undefined) {
            this.lotNumber = source.lotNumber;
        }
        if (source["_lotNumber"] !== undefined) {
            this._lotNumber = new fhirModels.Element(source._lotNumber);
        }
        if (source["manufactureDate"] !== undefined) {
            this.manufactureDate = source.manufactureDate;
        }
        if (source["_manufactureDate"] !== undefined) {
            this._manufactureDate = new fhirModels.Element(source._manufactureDate);
        }
        if (source["manufacturer"] !== undefined) {
            this.manufacturer = source.manufacturer;
        }
        if (source["_manufacturer"] !== undefined) {
            this._manufacturer = new fhirModels.Element(source._manufacturer);
        }
        if (source["modelNumber"] !== undefined) {
            this.modelNumber = source.modelNumber;
        }
        if (source["_modelNumber"] !== undefined) {
            this._modelNumber = new fhirModels.Element(source._modelNumber);
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["owner"] !== undefined) {
            this.owner = new fhirModels.Reference(source.owner);
        }
        if (source["parent"] !== undefined) {
            this.parent = new fhirModels.Reference(source.parent);
        }
        if (source["partNumber"] !== undefined) {
            this.partNumber = source.partNumber;
        }
        if (source["_partNumber"] !== undefined) {
            this._partNumber = new fhirModels.Element(source._partNumber);
        }
        if (source["patient"] !== undefined) {
            this.patient = new fhirModels.Reference(source.patient);
        }
        if (source["property"] !== undefined) {
            this.property = source.property.map((x) => new fhirModels.DeviceProperty(x));
        }
        if (source["safety"] !== undefined) {
            this.safety = source.safety.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["serialNumber"] !== undefined) {
            this.serialNumber = source.serialNumber;
        }
        if (source["_serialNumber"] !== undefined) {
            this._serialNumber = new fhirModels.Element(source._serialNumber);
        }
        if (source["specialization"] !== undefined) {
            this.specialization = source.specialization.map((x) => new fhirModels.DeviceSpecialization(x));
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["statusReason"] !== undefined) {
            this.statusReason = source.statusReason.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["udiCarrier"] !== undefined) {
            this.udiCarrier = source.udiCarrier.map((x) => new fhirModels.DeviceUdiCarrier(x));
        }
        if (source["url"] !== undefined) {
            this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            this._url = new fhirModels.Element(source._url);
        }
        if (source["version"] !== undefined) {
            this.version = source.version.map((x) => new fhirModels.DeviceVersion(x));
        }
    }
}
exports.Device = Device;
/**
 * Code Values for the Device.status field
 */
var DeviceStatusEnum;
(function (DeviceStatusEnum) {
    DeviceStatusEnum["ACTIVE"] = "active";
    DeviceStatusEnum["INACTIVE"] = "inactive";
    DeviceStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    DeviceStatusEnum["UNKNOWN"] = "unknown";
})(DeviceStatusEnum = exports.DeviceStatusEnum || (exports.DeviceStatusEnum = {}));
//# sourceMappingURL=Device.js.map