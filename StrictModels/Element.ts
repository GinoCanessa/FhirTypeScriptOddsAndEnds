// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels'
import * as fhirInterfaces from '../strictinterfaces'
/**
 * Base definition for all elements in a resource.
 */
export class Element implements fhirInterfaces.IElement {
  /**
   * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
   */
  extension?: fhirModels.Extension[]|undefined;
  /**
   * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
   */
  id?: string|undefined;
  _id?: fhirModels.Element|undefined;
  /**
   * Default constructor for Element from an object that MAY NOT contain all required elements.
   */
  constructor(source:fhirInterfaces.IElement) {
    if (source["extension"] !== undefined) {
      this.extension = source.extension.map((x) => new fhirModels.Extension(x));
    }
    if (source["id"] !== undefined) {
      this.id = source.id;
    }
    if (source["_id"] !== undefined) {
      this._id = new fhirModels.Element(source._id);
    }
  }
}
