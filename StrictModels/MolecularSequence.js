"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MolecularSequenceTypeEnum = exports.MolecularSequence = exports.MolecularSequenceStructureVariant = exports.MolecularSequenceStructureVariantInner = exports.MolecularSequenceStructureVariantOuter = exports.MolecularSequenceRepositoryTypeEnum = exports.MolecularSequenceRepository = exports.MolecularSequenceQualityTypeEnum = exports.MolecularSequenceQuality = exports.MolecularSequenceQualityRoc = exports.MolecularSequenceVariant = exports.MolecularSequenceReferenceSeqStrandEnum = exports.MolecularSequenceReferenceSeqOrientationEnum = exports.MolecularSequenceReferenceSeq = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * A sequence that is used as a reference to describe variants that are present in a sequence analyzed.
 */
class MolecularSequenceReferenceSeq extends fhirModels.BackboneElement {
    /**
     * Default constructor for MolecularSequenceReferenceSeq from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["chromosome"] !== undefined) {
            this.chromosome = new fhirModels.CodeableConcept(source.chromosome);
        }
        if (source["genomeBuild"] !== undefined) {
            this.genomeBuild = source.genomeBuild;
        }
        if (source["_genomeBuild"] !== undefined) {
            this._genomeBuild = new fhirModels.Element(source._genomeBuild);
        }
        if (source["orientation"] !== undefined) {
            this.orientation = source.orientation;
        }
        if (source["_orientation"] !== undefined) {
            this._orientation = new fhirModels.Element(source._orientation);
        }
        if (source["referenceSeqId"] !== undefined) {
            this.referenceSeqId = new fhirModels.CodeableConcept(source.referenceSeqId);
        }
        if (source["referenceSeqPointer"] !== undefined) {
            this.referenceSeqPointer = new fhirModels.Reference(source.referenceSeqPointer);
        }
        if (source["referenceSeqString"] !== undefined) {
            this.referenceSeqString = source.referenceSeqString;
        }
        if (source["_referenceSeqString"] !== undefined) {
            this._referenceSeqString = new fhirModels.Element(source._referenceSeqString);
        }
        if (source["strand"] !== undefined) {
            this.strand = source.strand;
        }
        if (source["_strand"] !== undefined) {
            this._strand = new fhirModels.Element(source._strand);
        }
        if (source["windowEnd"] !== undefined) {
            this.windowEnd = source.windowEnd;
        }
        if (source["_windowEnd"] !== undefined) {
            this._windowEnd = new fhirModels.Element(source._windowEnd);
        }
        if (source["windowStart"] !== undefined) {
            this.windowStart = source.windowStart;
        }
        if (source["_windowStart"] !== undefined) {
            this._windowStart = new fhirModels.Element(source._windowStart);
        }
    }
}
exports.MolecularSequenceReferenceSeq = MolecularSequenceReferenceSeq;
/**
 * Code Values for the MolecularSequence.referenceSeq.orientation field
 */
var MolecularSequenceReferenceSeqOrientationEnum;
(function (MolecularSequenceReferenceSeqOrientationEnum) {
    MolecularSequenceReferenceSeqOrientationEnum["SENSE"] = "sense";
    MolecularSequenceReferenceSeqOrientationEnum["ANTISENSE"] = "antisense";
})(MolecularSequenceReferenceSeqOrientationEnum = exports.MolecularSequenceReferenceSeqOrientationEnum || (exports.MolecularSequenceReferenceSeqOrientationEnum = {}));
/**
 * Code Values for the MolecularSequence.referenceSeq.strand field
 */
var MolecularSequenceReferenceSeqStrandEnum;
(function (MolecularSequenceReferenceSeqStrandEnum) {
    MolecularSequenceReferenceSeqStrandEnum["WATSON"] = "watson";
    MolecularSequenceReferenceSeqStrandEnum["CRICK"] = "crick";
})(MolecularSequenceReferenceSeqStrandEnum = exports.MolecularSequenceReferenceSeqStrandEnum || (exports.MolecularSequenceReferenceSeqStrandEnum = {}));
/**
 * The definition of variant here originates from Sequence ontology ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)). This element can represent amino acid or nucleic sequence change(including insertion,deletion,SNP,etc.)  It can represent some complex mutation or segment variation with the assist of CIGAR string.
 */
class MolecularSequenceVariant extends fhirModels.BackboneElement {
    /**
     * Default constructor for MolecularSequenceVariant from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["cigar"] !== undefined) {
            this.cigar = source.cigar;
        }
        if (source["_cigar"] !== undefined) {
            this._cigar = new fhirModels.Element(source._cigar);
        }
        if (source["end"] !== undefined) {
            this.end = source.end;
        }
        if (source["_end"] !== undefined) {
            this._end = new fhirModels.Element(source._end);
        }
        if (source["observedAllele"] !== undefined) {
            this.observedAllele = source.observedAllele;
        }
        if (source["_observedAllele"] !== undefined) {
            this._observedAllele = new fhirModels.Element(source._observedAllele);
        }
        if (source["referenceAllele"] !== undefined) {
            this.referenceAllele = source.referenceAllele;
        }
        if (source["_referenceAllele"] !== undefined) {
            this._referenceAllele = new fhirModels.Element(source._referenceAllele);
        }
        if (source["start"] !== undefined) {
            this.start = source.start;
        }
        if (source["_start"] !== undefined) {
            this._start = new fhirModels.Element(source._start);
        }
        if (source["variantPointer"] !== undefined) {
            this.variantPointer = new fhirModels.Reference(source.variantPointer);
        }
    }
}
exports.MolecularSequenceVariant = MolecularSequenceVariant;
/**
 * Receiver Operator Characteristic (ROC) Curve  to give sensitivity/specificity tradeoff.
 */
class MolecularSequenceQualityRoc extends fhirModels.BackboneElement {
    /**
     * Default constructor for MolecularSequenceQualityRoc from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["fMeasure"] !== undefined) {
            this.fMeasure = source.fMeasure.map((x) => (x));
        }
        if (source["_fMeasure"] !== undefined) {
            this._fMeasure = source._fMeasure.map((x) => new fhirModels.Element(x));
        }
        if (source["numFN"] !== undefined) {
            this.numFN = source.numFN.map((x) => (x));
        }
        if (source["_numFN"] !== undefined) {
            this._numFN = source._numFN.map((x) => new fhirModels.Element(x));
        }
        if (source["numFP"] !== undefined) {
            this.numFP = source.numFP.map((x) => (x));
        }
        if (source["_numFP"] !== undefined) {
            this._numFP = source._numFP.map((x) => new fhirModels.Element(x));
        }
        if (source["numTP"] !== undefined) {
            this.numTP = source.numTP.map((x) => (x));
        }
        if (source["_numTP"] !== undefined) {
            this._numTP = source._numTP.map((x) => new fhirModels.Element(x));
        }
        if (source["precision"] !== undefined) {
            this.precision = source.precision.map((x) => (x));
        }
        if (source["_precision"] !== undefined) {
            this._precision = source._precision.map((x) => new fhirModels.Element(x));
        }
        if (source["score"] !== undefined) {
            this.score = source.score.map((x) => (x));
        }
        if (source["_score"] !== undefined) {
            this._score = source._score.map((x) => new fhirModels.Element(x));
        }
        if (source["sensitivity"] !== undefined) {
            this.sensitivity = source.sensitivity.map((x) => (x));
        }
        if (source["_sensitivity"] !== undefined) {
            this._sensitivity = source._sensitivity.map((x) => new fhirModels.Element(x));
        }
    }
}
exports.MolecularSequenceQualityRoc = MolecularSequenceQualityRoc;
/**
 * An experimental feature attribute that defines the quality of the feature in a quantitative way, such as a phred quality score ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686)).
 */
class MolecularSequenceQuality extends fhirModels.BackboneElement {
    /**
     * Default constructor for MolecularSequenceQuality from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["end"] !== undefined) {
            this.end = source.end;
        }
        if (source["_end"] !== undefined) {
            this._end = new fhirModels.Element(source._end);
        }
        if (source["fScore"] !== undefined) {
            this.fScore = source.fScore;
        }
        if (source["_fScore"] !== undefined) {
            this._fScore = new fhirModels.Element(source._fScore);
        }
        if (source["gtFP"] !== undefined) {
            this.gtFP = source.gtFP;
        }
        if (source["_gtFP"] !== undefined) {
            this._gtFP = new fhirModels.Element(source._gtFP);
        }
        if (source["method"] !== undefined) {
            this.method = new fhirModels.CodeableConcept(source.method);
        }
        if (source["precision"] !== undefined) {
            this.precision = source.precision;
        }
        if (source["_precision"] !== undefined) {
            this._precision = new fhirModels.Element(source._precision);
        }
        if (source["queryFP"] !== undefined) {
            this.queryFP = source.queryFP;
        }
        if (source["_queryFP"] !== undefined) {
            this._queryFP = new fhirModels.Element(source._queryFP);
        }
        if (source["queryTP"] !== undefined) {
            this.queryTP = source.queryTP;
        }
        if (source["_queryTP"] !== undefined) {
            this._queryTP = new fhirModels.Element(source._queryTP);
        }
        if (source["recall"] !== undefined) {
            this.recall = source.recall;
        }
        if (source["_recall"] !== undefined) {
            this._recall = new fhirModels.Element(source._recall);
        }
        if (source["roc"] !== undefined) {
            this.roc = new fhirModels.MolecularSequenceQualityRoc(source.roc);
        }
        if (source["score"] !== undefined) {
            this.score = new fhirModels.Quantity(source.score);
        }
        if (source["standardSequence"] !== undefined) {
            this.standardSequence = new fhirModels.CodeableConcept(source.standardSequence);
        }
        if (source["start"] !== undefined) {
            this.start = source.start;
        }
        if (source["_start"] !== undefined) {
            this._start = new fhirModels.Element(source._start);
        }
        if (source["truthFN"] !== undefined) {
            this.truthFN = source.truthFN;
        }
        if (source["_truthFN"] !== undefined) {
            this._truthFN = new fhirModels.Element(source._truthFN);
        }
        if (source["truthTP"] !== undefined) {
            this.truthTP = source.truthTP;
        }
        if (source["_truthTP"] !== undefined) {
            this._truthTP = new fhirModels.Element(source._truthTP);
        }
        {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
    }
}
exports.MolecularSequenceQuality = MolecularSequenceQuality;
/**
 * Code Values for the MolecularSequence.quality.type field
 */
var MolecularSequenceQualityTypeEnum;
(function (MolecularSequenceQualityTypeEnum) {
    MolecularSequenceQualityTypeEnum["INDEL"] = "indel";
    MolecularSequenceQualityTypeEnum["SNP"] = "snp";
    MolecularSequenceQualityTypeEnum["UNKNOWN"] = "unknown";
})(MolecularSequenceQualityTypeEnum = exports.MolecularSequenceQualityTypeEnum || (exports.MolecularSequenceQualityTypeEnum = {}));
/**
 * Configurations of the external repository. The repository shall store target's observedSeq or records related with target's observedSeq.
 */
class MolecularSequenceRepository extends fhirModels.BackboneElement {
    /**
     * Default constructor for MolecularSequenceRepository from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["datasetId"] !== undefined) {
            this.datasetId = source.datasetId;
        }
        if (source["_datasetId"] !== undefined) {
            this._datasetId = new fhirModels.Element(source._datasetId);
        }
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["readsetId"] !== undefined) {
            this.readsetId = source.readsetId;
        }
        if (source["_readsetId"] !== undefined) {
            this._readsetId = new fhirModels.Element(source._readsetId);
        }
        {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
        if (source["url"] !== undefined) {
            this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            this._url = new fhirModels.Element(source._url);
        }
        if (source["variantsetId"] !== undefined) {
            this.variantsetId = source.variantsetId;
        }
        if (source["_variantsetId"] !== undefined) {
            this._variantsetId = new fhirModels.Element(source._variantsetId);
        }
    }
}
exports.MolecularSequenceRepository = MolecularSequenceRepository;
/**
 * Code Values for the MolecularSequence.repository.type field
 */
var MolecularSequenceRepositoryTypeEnum;
(function (MolecularSequenceRepositoryTypeEnum) {
    MolecularSequenceRepositoryTypeEnum["DIRECTLINK"] = "directlink";
    MolecularSequenceRepositoryTypeEnum["OPENAPI"] = "openapi";
    MolecularSequenceRepositoryTypeEnum["LOGIN"] = "login";
    MolecularSequenceRepositoryTypeEnum["OAUTH"] = "oauth";
    MolecularSequenceRepositoryTypeEnum["OTHER"] = "other";
})(MolecularSequenceRepositoryTypeEnum = exports.MolecularSequenceRepositoryTypeEnum || (exports.MolecularSequenceRepositoryTypeEnum = {}));
/**
 * Structural variant outer.
 */
class MolecularSequenceStructureVariantOuter extends fhirModels.BackboneElement {
    /**
     * Default constructor for MolecularSequenceStructureVariantOuter from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["end"] !== undefined) {
            this.end = source.end;
        }
        if (source["_end"] !== undefined) {
            this._end = new fhirModels.Element(source._end);
        }
        if (source["start"] !== undefined) {
            this.start = source.start;
        }
        if (source["_start"] !== undefined) {
            this._start = new fhirModels.Element(source._start);
        }
    }
}
exports.MolecularSequenceStructureVariantOuter = MolecularSequenceStructureVariantOuter;
/**
 * Structural variant inner.
 */
class MolecularSequenceStructureVariantInner extends fhirModels.BackboneElement {
    /**
     * Default constructor for MolecularSequenceStructureVariantInner from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["end"] !== undefined) {
            this.end = source.end;
        }
        if (source["_end"] !== undefined) {
            this._end = new fhirModels.Element(source._end);
        }
        if (source["start"] !== undefined) {
            this.start = source.start;
        }
        if (source["_start"] !== undefined) {
            this._start = new fhirModels.Element(source._start);
        }
    }
}
exports.MolecularSequenceStructureVariantInner = MolecularSequenceStructureVariantInner;
/**
 * Information about chromosome structure variation.
 */
class MolecularSequenceStructureVariant extends fhirModels.BackboneElement {
    /**
     * Default constructor for MolecularSequenceStructureVariant from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["exact"] !== undefined) {
            this.exact = source.exact;
        }
        if (source["_exact"] !== undefined) {
            this._exact = new fhirModels.Element(source._exact);
        }
        if (source["inner"] !== undefined) {
            this.inner = new fhirModels.MolecularSequenceStructureVariantInner(source.inner);
        }
        if (source["length"] !== undefined) {
            this.length = source.length;
        }
        if (source["_length"] !== undefined) {
            this._length = new fhirModels.Element(source._length);
        }
        if (source["outer"] !== undefined) {
            this.outer = new fhirModels.MolecularSequenceStructureVariantOuter(source.outer);
        }
        if (source["variantType"] !== undefined) {
            this.variantType = new fhirModels.CodeableConcept(source.variantType);
        }
    }
}
exports.MolecularSequenceStructureVariant = MolecularSequenceStructureVariant;
/**
 * Raw data describing a biological sequence.
 */
class MolecularSequence extends fhirModels.DomainResource {
    /**
     * Default constructor for MolecularSequence from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "MolecularSequence";
        if ((source['resourceType'] !== "MolecularSequence") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a MolecularSequence';
        }
        {
            this.coordinateSystem = source.coordinateSystem;
        }
        if (source["_coordinateSystem"] !== undefined) {
            this._coordinateSystem = new fhirModels.Element(source._coordinateSystem);
        }
        if (source["device"] !== undefined) {
            this.device = new fhirModels.Reference(source.device);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["observedSeq"] !== undefined) {
            this.observedSeq = source.observedSeq;
        }
        if (source["_observedSeq"] !== undefined) {
            this._observedSeq = new fhirModels.Element(source._observedSeq);
        }
        if (source["patient"] !== undefined) {
            this.patient = new fhirModels.Reference(source.patient);
        }
        if (source["performer"] !== undefined) {
            this.performer = new fhirModels.Reference(source.performer);
        }
        if (source["pointer"] !== undefined) {
            this.pointer = source.pointer.map((x) => new fhirModels.Reference(x));
        }
        if (source["quality"] !== undefined) {
            this.quality = source.quality.map((x) => new fhirModels.MolecularSequenceQuality(x));
        }
        if (source["quantity"] !== undefined) {
            this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["readCoverage"] !== undefined) {
            this.readCoverage = source.readCoverage;
        }
        if (source["_readCoverage"] !== undefined) {
            this._readCoverage = new fhirModels.Element(source._readCoverage);
        }
        if (source["referenceSeq"] !== undefined) {
            this.referenceSeq = new fhirModels.MolecularSequenceReferenceSeq(source.referenceSeq);
        }
        if (source["repository"] !== undefined) {
            this.repository = source.repository.map((x) => new fhirModels.MolecularSequenceRepository(x));
        }
        if (source["specimen"] !== undefined) {
            this.specimen = new fhirModels.Reference(source.specimen);
        }
        if (source["structureVariant"] !== undefined) {
            this.structureVariant = source.structureVariant.map((x) => new fhirModels.MolecularSequenceStructureVariant(x));
        }
        if (source["type"] !== undefined) {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
        if (source["variant"] !== undefined) {
            this.variant = source.variant.map((x) => new fhirModels.MolecularSequenceVariant(x));
        }
    }
}
exports.MolecularSequence = MolecularSequence;
/**
 * Code Values for the MolecularSequence.type field
 */
var MolecularSequenceTypeEnum;
(function (MolecularSequenceTypeEnum) {
    MolecularSequenceTypeEnum["AA"] = "aa";
    MolecularSequenceTypeEnum["DNA"] = "dna";
    MolecularSequenceTypeEnum["RNA"] = "rna";
})(MolecularSequenceTypeEnum = exports.MolecularSequenceTypeEnum || (exports.MolecularSequenceTypeEnum = {}));
//# sourceMappingURL=MolecularSequence.js.map