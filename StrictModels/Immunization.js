var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * Indicates who performed the immunization event.
 */
var ImmunizationPerformer = /** @class */ (function (_super) {
    __extends(ImmunizationPerformer, _super);
    /**
     * Default constructor for ImmunizationPerformer from an object that MAY NOT contain all required elements.
     */
    function ImmunizationPerformer(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.actor = new fhirModels.Reference(source.actor);
        }
        if (source["function"] !== undefined) {
            _this["function"] = new fhirModels.CodeableConcept(source["function"]);
        }
        return _this;
    }
    return ImmunizationPerformer;
}(fhirModels.BackboneElement));
export { ImmunizationPerformer };
/**
 * Educational material presented to the patient (or guardian) at the time of vaccine administration.
 */
var ImmunizationEducation = /** @class */ (function (_super) {
    __extends(ImmunizationEducation, _super);
    /**
     * Default constructor for ImmunizationEducation from an object that MAY NOT contain all required elements.
     */
    function ImmunizationEducation(source) {
        var _this = _super.call(this, source) || this;
        if (source["documentType"] !== undefined) {
            _this.documentType = source.documentType;
        }
        if (source["_documentType"] !== undefined) {
            _this._documentType = new fhirModels.Element(source._documentType);
        }
        if (source["presentationDate"] !== undefined) {
            _this.presentationDate = source.presentationDate;
        }
        if (source["_presentationDate"] !== undefined) {
            _this._presentationDate = new fhirModels.Element(source._presentationDate);
        }
        if (source["publicationDate"] !== undefined) {
            _this.publicationDate = source.publicationDate;
        }
        if (source["_publicationDate"] !== undefined) {
            _this._publicationDate = new fhirModels.Element(source._publicationDate);
        }
        if (source["reference"] !== undefined) {
            _this.reference = source.reference;
        }
        if (source["_reference"] !== undefined) {
            _this._reference = new fhirModels.Element(source._reference);
        }
        return _this;
    }
    return ImmunizationEducation;
}(fhirModels.BackboneElement));
export { ImmunizationEducation };
/**
 * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
 */
var ImmunizationReaction = /** @class */ (function (_super) {
    __extends(ImmunizationReaction, _super);
    /**
     * Default constructor for ImmunizationReaction from an object that MAY NOT contain all required elements.
     */
    function ImmunizationReaction(source) {
        var _this = _super.call(this, source) || this;
        if (source["date"] !== undefined) {
            _this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            _this._date = new fhirModels.Element(source._date);
        }
        if (source["detail"] !== undefined) {
            _this.detail = new fhirModels.Reference(source.detail);
        }
        if (source["reported"] !== undefined) {
            _this.reported = source.reported;
        }
        if (source["_reported"] !== undefined) {
            _this._reported = new fhirModels.Element(source._reported);
        }
        return _this;
    }
    return ImmunizationReaction;
}(fhirModels.BackboneElement));
export { ImmunizationReaction };
/**
 * The protocol (set of recommendations) being followed by the provider who administered the dose.
 */
var ImmunizationProtocolApplied = /** @class */ (function (_super) {
    __extends(ImmunizationProtocolApplied, _super);
    /**
     * Default constructor for ImmunizationProtocolApplied from an object that MAY NOT contain all required elements.
     */
    function ImmunizationProtocolApplied(source) {
        var _this = _super.call(this, source) || this;
        if (source["authority"] !== undefined) {
            _this.authority = new fhirModels.Reference(source.authority);
        }
        if (source["doseNumberPositiveInt"] !== undefined) {
            _this.doseNumberPositiveInt = source.doseNumberPositiveInt;
        }
        if (source["_doseNumberPositiveInt"] !== undefined) {
            _this._doseNumberPositiveInt = new fhirModels.Element(source._doseNumberPositiveInt);
        }
        if (source["doseNumberString"] !== undefined) {
            _this.doseNumberString = source.doseNumberString;
        }
        if (source["_doseNumberString"] !== undefined) {
            _this._doseNumberString = new fhirModels.Element(source._doseNumberString);
        }
        if (source["series"] !== undefined) {
            _this.series = source.series;
        }
        if (source["_series"] !== undefined) {
            _this._series = new fhirModels.Element(source._series);
        }
        if (source["seriesDosesPositiveInt"] !== undefined) {
            _this.seriesDosesPositiveInt = source.seriesDosesPositiveInt;
        }
        if (source["_seriesDosesPositiveInt"] !== undefined) {
            _this._seriesDosesPositiveInt = new fhirModels.Element(source._seriesDosesPositiveInt);
        }
        if (source["seriesDosesString"] !== undefined) {
            _this.seriesDosesString = source.seriesDosesString;
        }
        if (source["_seriesDosesString"] !== undefined) {
            _this._seriesDosesString = new fhirModels.Element(source._seriesDosesString);
        }
        if (source["targetDisease"] !== undefined) {
            _this.targetDisease = source.targetDisease.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        return _this;
    }
    return ImmunizationProtocolApplied;
}(fhirModels.BackboneElement));
export { ImmunizationProtocolApplied };
/**
 * Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
 */
var Immunization = /** @class */ (function (_super) {
    __extends(Immunization, _super);
    /**
     * Default constructor for Immunization from an object that MAY NOT contain all required elements.
     */
    function Immunization(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "Immunization";
        if ((source['resourceType'] !== "Immunization") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Immunization';
        }
        if (source["doseQuantity"] !== undefined) {
            _this.doseQuantity = new fhirModels.Quantity(source.doseQuantity);
        }
        if (source["education"] !== undefined) {
            _this.education = source.education.map(function (x) { return new fhirModels.ImmunizationEducation(x); });
        }
        if (source["encounter"] !== undefined) {
            _this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["expirationDate"] !== undefined) {
            _this.expirationDate = source.expirationDate;
        }
        if (source["_expirationDate"] !== undefined) {
            _this._expirationDate = new fhirModels.Element(source._expirationDate);
        }
        if (source["fundingSource"] !== undefined) {
            _this.fundingSource = new fhirModels.CodeableConcept(source.fundingSource);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["isSubpotent"] !== undefined) {
            _this.isSubpotent = source.isSubpotent;
        }
        if (source["_isSubpotent"] !== undefined) {
            _this._isSubpotent = new fhirModels.Element(source._isSubpotent);
        }
        if (source["location"] !== undefined) {
            _this.location = new fhirModels.Reference(source.location);
        }
        if (source["lotNumber"] !== undefined) {
            _this.lotNumber = source.lotNumber;
        }
        if (source["_lotNumber"] !== undefined) {
            _this._lotNumber = new fhirModels.Element(source._lotNumber);
        }
        if (source["manufacturer"] !== undefined) {
            _this.manufacturer = new fhirModels.Reference(source.manufacturer);
        }
        if (source["note"] !== undefined) {
            _this.note = source.note.map(function (x) { return new fhirModels.Annotation(x); });
        }
        if (source["occurrenceDateTime"] !== undefined) {
            _this.occurrenceDateTime = source.occurrenceDateTime;
        }
        if (source["_occurrenceDateTime"] !== undefined) {
            _this._occurrenceDateTime = new fhirModels.Element(source._occurrenceDateTime);
        }
        if (source["occurrenceString"] !== undefined) {
            _this.occurrenceString = source.occurrenceString;
        }
        if (source["_occurrenceString"] !== undefined) {
            _this._occurrenceString = new fhirModels.Element(source._occurrenceString);
        }
        {
            _this.patient = new fhirModels.Reference(source.patient);
        }
        if (source["performer"] !== undefined) {
            _this.performer = source.performer.map(function (x) { return new fhirModels.ImmunizationPerformer(x); });
        }
        if (source["primarySource"] !== undefined) {
            _this.primarySource = source.primarySource;
        }
        if (source["_primarySource"] !== undefined) {
            _this._primarySource = new fhirModels.Element(source._primarySource);
        }
        if (source["programEligibility"] !== undefined) {
            _this.programEligibility = source.programEligibility.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["protocolApplied"] !== undefined) {
            _this.protocolApplied = source.protocolApplied.map(function (x) { return new fhirModels.ImmunizationProtocolApplied(x); });
        }
        if (source["reaction"] !== undefined) {
            _this.reaction = source.reaction.map(function (x) { return new fhirModels.ImmunizationReaction(x); });
        }
        if (source["reasonCode"] !== undefined) {
            _this.reasonCode = source.reasonCode.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["reasonReference"] !== undefined) {
            _this.reasonReference = source.reasonReference.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["recorded"] !== undefined) {
            _this.recorded = source.recorded;
        }
        if (source["_recorded"] !== undefined) {
            _this._recorded = new fhirModels.Element(source._recorded);
        }
        if (source["reportOrigin"] !== undefined) {
            _this.reportOrigin = new fhirModels.CodeableConcept(source.reportOrigin);
        }
        if (source["route"] !== undefined) {
            _this.route = new fhirModels.CodeableConcept(source.route);
        }
        if (source["site"] !== undefined) {
            _this.site = new fhirModels.CodeableConcept(source.site);
        }
        {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["statusReason"] !== undefined) {
            _this.statusReason = new fhirModels.CodeableConcept(source.statusReason);
        }
        if (source["subpotentReason"] !== undefined) {
            _this.subpotentReason = source.subpotentReason.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        {
            _this.vaccineCode = new fhirModels.CodeableConcept(source.vaccineCode);
        }
        return _this;
    }
    return Immunization;
}(fhirModels.DomainResource));
export { Immunization };
/**
 * Code Values for the Immunization.status field
 */
export var ImmunizationStatusEnum;
(function (ImmunizationStatusEnum) {
    ImmunizationStatusEnum["COMPLETED"] = "completed";
    ImmunizationStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    ImmunizationStatusEnum["NOT_DONE"] = "not-done";
})(ImmunizationStatusEnum || (ImmunizationStatusEnum = {}));
