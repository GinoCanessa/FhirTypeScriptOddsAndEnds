"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RiskEvidenceSynthesisStatusEnum = exports.RiskEvidenceSynthesis = exports.RiskEvidenceSynthesisCertainty = exports.RiskEvidenceSynthesisCertaintyCertaintySubcomponent = exports.RiskEvidenceSynthesisRiskEstimate = exports.RiskEvidenceSynthesisRiskEstimatePrecisionEstimate = exports.RiskEvidenceSynthesisSampleSize = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * A description of the size of the sample involved in the synthesis.
 */
class RiskEvidenceSynthesisSampleSize extends fhirModels.BackboneElement {
    /**
     * Default constructor for RiskEvidenceSynthesisSampleSize from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["numberOfParticipants"] !== undefined) {
            this.numberOfParticipants = source.numberOfParticipants;
        }
        if (source["_numberOfParticipants"] !== undefined) {
            this._numberOfParticipants = new fhirModels.Element(source._numberOfParticipants);
        }
        if (source["numberOfStudies"] !== undefined) {
            this.numberOfStudies = source.numberOfStudies;
        }
        if (source["_numberOfStudies"] !== undefined) {
            this._numberOfStudies = new fhirModels.Element(source._numberOfStudies);
        }
    }
}
exports.RiskEvidenceSynthesisSampleSize = RiskEvidenceSynthesisSampleSize;
/**
 * A description of the precision of the estimate for the effect.
 */
class RiskEvidenceSynthesisRiskEstimatePrecisionEstimate extends fhirModels.BackboneElement {
    /**
     * Default constructor for RiskEvidenceSynthesisRiskEstimatePrecisionEstimate from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["from"] !== undefined) {
            this.from = source.from;
        }
        if (source["_from"] !== undefined) {
            this._from = new fhirModels.Element(source._from);
        }
        if (source["level"] !== undefined) {
            this.level = source.level;
        }
        if (source["_level"] !== undefined) {
            this._level = new fhirModels.Element(source._level);
        }
        if (source["to"] !== undefined) {
            this.to = source.to;
        }
        if (source["_to"] !== undefined) {
            this._to = new fhirModels.Element(source._to);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.RiskEvidenceSynthesisRiskEstimatePrecisionEstimate = RiskEvidenceSynthesisRiskEstimatePrecisionEstimate;
/**
 * The estimated risk of the outcome.
 */
class RiskEvidenceSynthesisRiskEstimate extends fhirModels.BackboneElement {
    /**
     * Default constructor for RiskEvidenceSynthesisRiskEstimate from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["denominatorCount"] !== undefined) {
            this.denominatorCount = source.denominatorCount;
        }
        if (source["_denominatorCount"] !== undefined) {
            this._denominatorCount = new fhirModels.Element(source._denominatorCount);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["numeratorCount"] !== undefined) {
            this.numeratorCount = source.numeratorCount;
        }
        if (source["_numeratorCount"] !== undefined) {
            this._numeratorCount = new fhirModels.Element(source._numeratorCount);
        }
        if (source["precisionEstimate"] !== undefined) {
            this.precisionEstimate = source.precisionEstimate.map((x) => new fhirModels.RiskEvidenceSynthesisRiskEstimatePrecisionEstimate(x));
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["unitOfMeasure"] !== undefined) {
            this.unitOfMeasure = new fhirModels.CodeableConcept(source.unitOfMeasure);
        }
        if (source["value"] !== undefined) {
            this.value = source.value;
        }
        if (source["_value"] !== undefined) {
            this._value = new fhirModels.Element(source._value);
        }
    }
}
exports.RiskEvidenceSynthesisRiskEstimate = RiskEvidenceSynthesisRiskEstimate;
/**
 * A description of a component of the overall certainty.
 */
class RiskEvidenceSynthesisCertaintyCertaintySubcomponent extends fhirModels.BackboneElement {
    /**
     * Default constructor for RiskEvidenceSynthesisCertaintyCertaintySubcomponent from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["rating"] !== undefined) {
            this.rating = source.rating.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.RiskEvidenceSynthesisCertaintyCertaintySubcomponent = RiskEvidenceSynthesisCertaintyCertaintySubcomponent;
/**
 * A description of the certainty of the risk estimate.
 */
class RiskEvidenceSynthesisCertainty extends fhirModels.BackboneElement {
    /**
     * Default constructor for RiskEvidenceSynthesisCertainty from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["certaintySubcomponent"] !== undefined) {
            this.certaintySubcomponent = source.certaintySubcomponent.map((x) => new fhirModels.RiskEvidenceSynthesisCertaintyCertaintySubcomponent(x));
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["rating"] !== undefined) {
            this.rating = source.rating.map((x) => new fhirModels.CodeableConcept(x));
        }
    }
}
exports.RiskEvidenceSynthesisCertainty = RiskEvidenceSynthesisCertainty;
/**
 * The RiskEvidenceSynthesis resource describes the likelihood of an outcome in a population plus exposure state where the risk estimate is derived from a combination of research studies.
 */
class RiskEvidenceSynthesis extends fhirModels.DomainResource {
    /**
     * Default constructor for RiskEvidenceSynthesis from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "RiskEvidenceSynthesis";
        if ((source['resourceType'] !== "RiskEvidenceSynthesis") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a RiskEvidenceSynthesis';
        }
        if (source["approvalDate"] !== undefined) {
            this.approvalDate = source.approvalDate;
        }
        if (source["_approvalDate"] !== undefined) {
            this._approvalDate = new fhirModels.Element(source._approvalDate);
        }
        if (source["author"] !== undefined) {
            this.author = source.author.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["certainty"] !== undefined) {
            this.certainty = source.certainty.map((x) => new fhirModels.RiskEvidenceSynthesisCertainty(x));
        }
        if (source["contact"] !== undefined) {
            this.contact = source.contact.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["copyright"] !== undefined) {
            this.copyright = source.copyright;
        }
        if (source["_copyright"] !== undefined) {
            this._copyright = new fhirModels.Element(source._copyright);
        }
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["editor"] !== undefined) {
            this.editor = source.editor.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["effectivePeriod"] !== undefined) {
            this.effectivePeriod = new fhirModels.Period(source.effectivePeriod);
        }
        if (source["endorser"] !== undefined) {
            this.endorser = source.endorser.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["exposure"] !== undefined) {
            this.exposure = new fhirModels.Reference(source.exposure);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["jurisdiction"] !== undefined) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["lastReviewDate"] !== undefined) {
            this.lastReviewDate = source.lastReviewDate;
        }
        if (source["_lastReviewDate"] !== undefined) {
            this._lastReviewDate = new fhirModels.Element(source._lastReviewDate);
        }
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        {
            this.outcome = new fhirModels.Reference(source.outcome);
        }
        {
            this.population = new fhirModels.Reference(source.population);
        }
        if (source["publisher"] !== undefined) {
            this.publisher = source.publisher;
        }
        if (source["_publisher"] !== undefined) {
            this._publisher = new fhirModels.Element(source._publisher);
        }
        if (source["relatedArtifact"] !== undefined) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhirModels.RelatedArtifact(x));
        }
        if (source["reviewer"] !== undefined) {
            this.reviewer = source.reviewer.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["riskEstimate"] !== undefined) {
            this.riskEstimate = new fhirModels.RiskEvidenceSynthesisRiskEstimate(source.riskEstimate);
        }
        if (source["sampleSize"] !== undefined) {
            this.sampleSize = new fhirModels.RiskEvidenceSynthesisSampleSize(source.sampleSize);
        }
        {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["studyType"] !== undefined) {
            this.studyType = new fhirModels.CodeableConcept(source.studyType);
        }
        if (source["synthesisType"] !== undefined) {
            this.synthesisType = new fhirModels.CodeableConcept(source.synthesisType);
        }
        if (source["title"] !== undefined) {
            this.title = source.title;
        }
        if (source["_title"] !== undefined) {
            this._title = new fhirModels.Element(source._title);
        }
        if (source["topic"] !== undefined) {
            this.topic = source.topic.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["url"] !== undefined) {
            this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            this._url = new fhirModels.Element(source._url);
        }
        if (source["useContext"] !== undefined) {
            this.useContext = source.useContext.map((x) => new fhirModels.UsageContext(x));
        }
        if (source["version"] !== undefined) {
            this.version = source.version;
        }
        if (source["_version"] !== undefined) {
            this._version = new fhirModels.Element(source._version);
        }
    }
}
exports.RiskEvidenceSynthesis = RiskEvidenceSynthesis;
/**
 * Code Values for the RiskEvidenceSynthesis.status field
 */
var RiskEvidenceSynthesisStatusEnum;
(function (RiskEvidenceSynthesisStatusEnum) {
    RiskEvidenceSynthesisStatusEnum["DRAFT"] = "draft";
    RiskEvidenceSynthesisStatusEnum["ACTIVE"] = "active";
    RiskEvidenceSynthesisStatusEnum["RETIRED"] = "retired";
    RiskEvidenceSynthesisStatusEnum["UNKNOWN"] = "unknown";
})(RiskEvidenceSynthesisStatusEnum = exports.RiskEvidenceSynthesisStatusEnum || (exports.RiskEvidenceSynthesisStatusEnum = {}));
//# sourceMappingURL=RiskEvidenceSynthesis.js.map