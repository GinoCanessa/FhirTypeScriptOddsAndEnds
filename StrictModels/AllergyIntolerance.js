var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * Details about each adverse reaction event linked to exposure to the identified substance.
 */
var AllergyIntoleranceReaction = /** @class */ (function (_super) {
    __extends(AllergyIntoleranceReaction, _super);
    /**
     * Default constructor for AllergyIntoleranceReaction from an object that MAY NOT contain all required elements.
     */
    function AllergyIntoleranceReaction(source) {
        var _this = _super.call(this, source) || this;
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["exposureRoute"] !== undefined) {
            _this.exposureRoute = new fhirModels.CodeableConcept(source.exposureRoute);
        }
        {
            _this.manifestation = source.manifestation.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["note"] !== undefined) {
            _this.note = source.note.map(function (x) { return new fhirModels.Annotation(x); });
        }
        if (source["onset"] !== undefined) {
            _this.onset = source.onset;
        }
        if (source["_onset"] !== undefined) {
            _this._onset = new fhirModels.Element(source._onset);
        }
        if (source["severity"] !== undefined) {
            _this.severity = source.severity;
        }
        if (source["_severity"] !== undefined) {
            _this._severity = new fhirModels.Element(source._severity);
        }
        if (source["substance"] !== undefined) {
            _this.substance = new fhirModels.CodeableConcept(source.substance);
        }
        return _this;
    }
    return AllergyIntoleranceReaction;
}(fhirModels.BackboneElement));
export { AllergyIntoleranceReaction };
/**
 * Code Values for the AllergyIntolerance.reaction.severity field
 */
export var AllergyIntoleranceReactionSeverityEnum;
(function (AllergyIntoleranceReactionSeverityEnum) {
    AllergyIntoleranceReactionSeverityEnum["MILD"] = "mild";
    AllergyIntoleranceReactionSeverityEnum["MODERATE"] = "moderate";
    AllergyIntoleranceReactionSeverityEnum["SEVERE"] = "severe";
})(AllergyIntoleranceReactionSeverityEnum || (AllergyIntoleranceReactionSeverityEnum = {}));
/**
 * Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
 */
var AllergyIntolerance = /** @class */ (function (_super) {
    __extends(AllergyIntolerance, _super);
    /**
     * Default constructor for AllergyIntolerance from an object that MAY NOT contain all required elements.
     */
    function AllergyIntolerance(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "AllergyIntolerance";
        if ((source['resourceType'] !== "AllergyIntolerance") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a AllergyIntolerance';
        }
        if (source["asserter"] !== undefined) {
            _this.asserter = new fhirModels.Reference(source.asserter);
        }
        if (source["category"] !== undefined) {
            _this.category = source.category.map(function (x) { return (x); });
        }
        if (source["_category"] !== undefined) {
            _this._category = source._category.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["clinicalStatus"] !== undefined) {
            _this.clinicalStatus = new fhirModels.CodeableConcept(source.clinicalStatus);
        }
        if (source["code"] !== undefined) {
            _this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["criticality"] !== undefined) {
            _this.criticality = source.criticality;
        }
        if (source["_criticality"] !== undefined) {
            _this._criticality = new fhirModels.Element(source._criticality);
        }
        if (source["encounter"] !== undefined) {
            _this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["lastOccurrence"] !== undefined) {
            _this.lastOccurrence = source.lastOccurrence;
        }
        if (source["_lastOccurrence"] !== undefined) {
            _this._lastOccurrence = new fhirModels.Element(source._lastOccurrence);
        }
        if (source["note"] !== undefined) {
            _this.note = source.note.map(function (x) { return new fhirModels.Annotation(x); });
        }
        if (source["onsetDateTime"] !== undefined) {
            _this.onsetDateTime = source.onsetDateTime;
        }
        if (source["_onsetDateTime"] !== undefined) {
            _this._onsetDateTime = new fhirModels.Element(source._onsetDateTime);
        }
        if (source["onsetAge"] !== undefined) {
            _this.onsetAge = new fhirModels.Age(source.onsetAge);
        }
        if (source["onsetPeriod"] !== undefined) {
            _this.onsetPeriod = new fhirModels.Period(source.onsetPeriod);
        }
        if (source["onsetRange"] !== undefined) {
            _this.onsetRange = new fhirModels.Range(source.onsetRange);
        }
        if (source["onsetString"] !== undefined) {
            _this.onsetString = source.onsetString;
        }
        if (source["_onsetString"] !== undefined) {
            _this._onsetString = new fhirModels.Element(source._onsetString);
        }
        {
            _this.patient = new fhirModels.Reference(source.patient);
        }
        if (source["reaction"] !== undefined) {
            _this.reaction = source.reaction.map(function (x) { return new fhirModels.AllergyIntoleranceReaction(x); });
        }
        if (source["recordedDate"] !== undefined) {
            _this.recordedDate = source.recordedDate;
        }
        if (source["_recordedDate"] !== undefined) {
            _this._recordedDate = new fhirModels.Element(source._recordedDate);
        }
        if (source["recorder"] !== undefined) {
            _this.recorder = new fhirModels.Reference(source.recorder);
        }
        if (source["type"] !== undefined) {
            _this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            _this._type = new fhirModels.Element(source._type);
        }
        if (source["verificationStatus"] !== undefined) {
            _this.verificationStatus = new fhirModels.CodeableConcept(source.verificationStatus);
        }
        return _this;
    }
    return AllergyIntolerance;
}(fhirModels.DomainResource));
export { AllergyIntolerance };
/**
 * Code Values for the AllergyIntolerance.category field
 */
export var AllergyIntoleranceCategoryEnum;
(function (AllergyIntoleranceCategoryEnum) {
    AllergyIntoleranceCategoryEnum["FOOD"] = "food";
    AllergyIntoleranceCategoryEnum["MEDICATION"] = "medication";
    AllergyIntoleranceCategoryEnum["ENVIRONMENT"] = "environment";
    AllergyIntoleranceCategoryEnum["BIOLOGIC"] = "biologic";
})(AllergyIntoleranceCategoryEnum || (AllergyIntoleranceCategoryEnum = {}));
/**
 * Code Values for the AllergyIntolerance.criticality field
 */
export var AllergyIntoleranceCriticalityEnum;
(function (AllergyIntoleranceCriticalityEnum) {
    AllergyIntoleranceCriticalityEnum["LOW"] = "low";
    AllergyIntoleranceCriticalityEnum["HIGH"] = "high";
    AllergyIntoleranceCriticalityEnum["UNABLE_TO_ASSESS"] = "unable-to-assess";
})(AllergyIntoleranceCriticalityEnum || (AllergyIntoleranceCriticalityEnum = {}));
/**
 * Code Values for the AllergyIntolerance.type field
 */
export var AllergyIntoleranceTypeEnum;
(function (AllergyIntoleranceTypeEnum) {
    AllergyIntoleranceTypeEnum["ALLERGY"] = "allergy";
    AllergyIntoleranceTypeEnum["INTOLERANCE"] = "intolerance";
})(AllergyIntoleranceTypeEnum || (AllergyIntoleranceTypeEnum = {}));
