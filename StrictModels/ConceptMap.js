"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConceptMapStatusEnum = exports.ConceptMap = exports.ConceptMapGroup = exports.ConceptMapGroupUnmappedModeEnum = exports.ConceptMapGroupUnmapped = exports.ConceptMapGroupElement = exports.ConceptMapGroupElementTargetEquivalenceEnum = exports.ConceptMapGroupElementTarget = exports.ConceptMapGroupElementTargetDependsOn = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.
 */
class ConceptMapGroupElementTargetDependsOn extends fhirModels.BackboneElement {
    /**
     * Default constructor for ConceptMapGroupElementTargetDependsOn from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["display"] !== undefined) {
            this.display = source.display;
        }
        if (source["_display"] !== undefined) {
            this._display = new fhirModels.Element(source._display);
        }
        {
            this.property = source.property;
        }
        if (source["_property"] !== undefined) {
            this._property = new fhirModels.Element(source._property);
        }
        if (source["system"] !== undefined) {
            this.system = source.system;
        }
        if (source["_system"] !== undefined) {
            this._system = new fhirModels.Element(source._system);
        }
        {
            this.value = source.value;
        }
        if (source["_value"] !== undefined) {
            this._value = new fhirModels.Element(source._value);
        }
    }
}
exports.ConceptMapGroupElementTargetDependsOn = ConceptMapGroupElementTargetDependsOn;
/**
 * Ideally there would only be one map, with equal or equivalent mapping. But multiple maps are allowed for several narrower options, or to assert that other concepts are unmatched.
 */
class ConceptMapGroupElementTarget extends fhirModels.BackboneElement {
    /**
     * Default constructor for ConceptMapGroupElementTarget from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            this._code = new fhirModels.Element(source._code);
        }
        if (source["comment"] !== undefined) {
            this.comment = source.comment;
        }
        if (source["_comment"] !== undefined) {
            this._comment = new fhirModels.Element(source._comment);
        }
        if (source["dependsOn"] !== undefined) {
            this.dependsOn = source.dependsOn.map((x) => new fhirModels.ConceptMapGroupElementTargetDependsOn(x));
        }
        if (source["display"] !== undefined) {
            this.display = source.display;
        }
        if (source["_display"] !== undefined) {
            this._display = new fhirModels.Element(source._display);
        }
        {
            this.equivalence = source.equivalence;
        }
        if (source["_equivalence"] !== undefined) {
            this._equivalence = new fhirModels.Element(source._equivalence);
        }
        if (source["product"] !== undefined) {
            this.product = source.product.map((x) => new fhirModels.ConceptMapGroupElementTargetDependsOn(x));
        }
    }
}
exports.ConceptMapGroupElementTarget = ConceptMapGroupElementTarget;
/**
 * Code Values for the ConceptMap.group.element.target.equivalence field
 */
var ConceptMapGroupElementTargetEquivalenceEnum;
(function (ConceptMapGroupElementTargetEquivalenceEnum) {
    ConceptMapGroupElementTargetEquivalenceEnum["RELATEDTO"] = "relatedto";
    ConceptMapGroupElementTargetEquivalenceEnum["EQUIVALENT"] = "equivalent";
    ConceptMapGroupElementTargetEquivalenceEnum["EQUAL"] = "equal";
    ConceptMapGroupElementTargetEquivalenceEnum["WIDER"] = "wider";
    ConceptMapGroupElementTargetEquivalenceEnum["SUBSUMES"] = "subsumes";
    ConceptMapGroupElementTargetEquivalenceEnum["NARROWER"] = "narrower";
    ConceptMapGroupElementTargetEquivalenceEnum["SPECIALIZES"] = "specializes";
    ConceptMapGroupElementTargetEquivalenceEnum["INEXACT"] = "inexact";
    ConceptMapGroupElementTargetEquivalenceEnum["UNMATCHED"] = "unmatched";
    ConceptMapGroupElementTargetEquivalenceEnum["DISJOINT"] = "disjoint";
})(ConceptMapGroupElementTargetEquivalenceEnum = exports.ConceptMapGroupElementTargetEquivalenceEnum || (exports.ConceptMapGroupElementTargetEquivalenceEnum = {}));
/**
 * Generally, the ideal is that there would only be one mapping for each concept in the source value set, but a given concept may be mapped multiple times with different comments or dependencies.
 */
class ConceptMapGroupElement extends fhirModels.BackboneElement {
    /**
     * Default constructor for ConceptMapGroupElement from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            this._code = new fhirModels.Element(source._code);
        }
        if (source["display"] !== undefined) {
            this.display = source.display;
        }
        if (source["_display"] !== undefined) {
            this._display = new fhirModels.Element(source._display);
        }
        if (source["target"] !== undefined) {
            this.target = source.target.map((x) => new fhirModels.ConceptMapGroupElementTarget(x));
        }
    }
}
exports.ConceptMapGroupElement = ConceptMapGroupElement;
/**
 * This only applies if the source code has a system value that matches the system defined for the group.
 */
class ConceptMapGroupUnmapped extends fhirModels.BackboneElement {
    /**
     * Default constructor for ConceptMapGroupUnmapped from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            this._code = new fhirModels.Element(source._code);
        }
        if (source["display"] !== undefined) {
            this.display = source.display;
        }
        if (source["_display"] !== undefined) {
            this._display = new fhirModels.Element(source._display);
        }
        {
            this.mode = source.mode;
        }
        if (source["_mode"] !== undefined) {
            this._mode = new fhirModels.Element(source._mode);
        }
        if (source["url"] !== undefined) {
            this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            this._url = new fhirModels.Element(source._url);
        }
    }
}
exports.ConceptMapGroupUnmapped = ConceptMapGroupUnmapped;
/**
 * Code Values for the ConceptMap.group.unmapped.mode field
 */
var ConceptMapGroupUnmappedModeEnum;
(function (ConceptMapGroupUnmappedModeEnum) {
    ConceptMapGroupUnmappedModeEnum["PROVIDED"] = "provided";
    ConceptMapGroupUnmappedModeEnum["FIXED"] = "fixed";
    ConceptMapGroupUnmappedModeEnum["OTHER_MAP"] = "other-map";
})(ConceptMapGroupUnmappedModeEnum = exports.ConceptMapGroupUnmappedModeEnum || (exports.ConceptMapGroupUnmappedModeEnum = {}));
/**
 * A group of mappings that all have the same source and target system.
 */
class ConceptMapGroup extends fhirModels.BackboneElement {
    /**
     * Default constructor for ConceptMapGroup from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.element = source.element.map((x) => new fhirModels.ConceptMapGroupElement(x));
        }
        if (source["source"] !== undefined) {
            this.source = source.source;
        }
        if (source["_source"] !== undefined) {
            this._source = new fhirModels.Element(source._source);
        }
        if (source["sourceVersion"] !== undefined) {
            this.sourceVersion = source.sourceVersion;
        }
        if (source["_sourceVersion"] !== undefined) {
            this._sourceVersion = new fhirModels.Element(source._sourceVersion);
        }
        if (source["target"] !== undefined) {
            this.target = source.target;
        }
        if (source["_target"] !== undefined) {
            this._target = new fhirModels.Element(source._target);
        }
        if (source["targetVersion"] !== undefined) {
            this.targetVersion = source.targetVersion;
        }
        if (source["_targetVersion"] !== undefined) {
            this._targetVersion = new fhirModels.Element(source._targetVersion);
        }
        if (source["unmapped"] !== undefined) {
            this.unmapped = new fhirModels.ConceptMapGroupUnmapped(source.unmapped);
        }
    }
}
exports.ConceptMapGroup = ConceptMapGroup;
/**
 * A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.
 */
class ConceptMap extends fhirModels.DomainResource {
    /**
     * Default constructor for ConceptMap from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "ConceptMap";
        if ((source['resourceType'] !== "ConceptMap") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a ConceptMap';
        }
        if (source["contact"] !== undefined) {
            this.contact = source.contact.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["copyright"] !== undefined) {
            this.copyright = source.copyright;
        }
        if (source["_copyright"] !== undefined) {
            this._copyright = new fhirModels.Element(source._copyright);
        }
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["experimental"] !== undefined) {
            this.experimental = source.experimental;
        }
        if (source["_experimental"] !== undefined) {
            this._experimental = new fhirModels.Element(source._experimental);
        }
        if (source["group"] !== undefined) {
            this.group = source.group.map((x) => new fhirModels.ConceptMapGroup(x));
        }
        if (source["identifier"] !== undefined) {
            this.identifier = new fhirModels.Identifier(source.identifier);
        }
        if (source["jurisdiction"] !== undefined) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["publisher"] !== undefined) {
            this.publisher = source.publisher;
        }
        if (source["_publisher"] !== undefined) {
            this._publisher = new fhirModels.Element(source._publisher);
        }
        if (source["purpose"] !== undefined) {
            this.purpose = source.purpose;
        }
        if (source["_purpose"] !== undefined) {
            this._purpose = new fhirModels.Element(source._purpose);
        }
        if (source["sourceUri"] !== undefined) {
            this.sourceUri = source.sourceUri;
        }
        if (source["_sourceUri"] !== undefined) {
            this._sourceUri = new fhirModels.Element(source._sourceUri);
        }
        if (source["sourceCanonical"] !== undefined) {
            this.sourceCanonical = source.sourceCanonical;
        }
        if (source["_sourceCanonical"] !== undefined) {
            this._sourceCanonical = new fhirModels.Element(source._sourceCanonical);
        }
        {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["targetUri"] !== undefined) {
            this.targetUri = source.targetUri;
        }
        if (source["_targetUri"] !== undefined) {
            this._targetUri = new fhirModels.Element(source._targetUri);
        }
        if (source["targetCanonical"] !== undefined) {
            this.targetCanonical = source.targetCanonical;
        }
        if (source["_targetCanonical"] !== undefined) {
            this._targetCanonical = new fhirModels.Element(source._targetCanonical);
        }
        if (source["title"] !== undefined) {
            this.title = source.title;
        }
        if (source["_title"] !== undefined) {
            this._title = new fhirModels.Element(source._title);
        }
        if (source["url"] !== undefined) {
            this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            this._url = new fhirModels.Element(source._url);
        }
        if (source["useContext"] !== undefined) {
            this.useContext = source.useContext.map((x) => new fhirModels.UsageContext(x));
        }
        if (source["version"] !== undefined) {
            this.version = source.version;
        }
        if (source["_version"] !== undefined) {
            this._version = new fhirModels.Element(source._version);
        }
    }
}
exports.ConceptMap = ConceptMap;
/**
 * Code Values for the ConceptMap.status field
 */
var ConceptMapStatusEnum;
(function (ConceptMapStatusEnum) {
    ConceptMapStatusEnum["DRAFT"] = "draft";
    ConceptMapStatusEnum["ACTIVE"] = "active";
    ConceptMapStatusEnum["RETIRED"] = "retired";
    ConceptMapStatusEnum["UNKNOWN"] = "unknown";
})(ConceptMapStatusEnum = exports.ConceptMapStatusEnum || (exports.ConceptMapStatusEnum = {}));
//# sourceMappingURL=ConceptMap.js.map