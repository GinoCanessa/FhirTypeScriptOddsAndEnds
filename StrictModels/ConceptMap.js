var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.
 */
var ConceptMapGroupElementTargetDependsOn = /** @class */ (function (_super) {
    __extends(ConceptMapGroupElementTargetDependsOn, _super);
    /**
     * Default constructor for ConceptMapGroupElementTargetDependsOn from an object that MAY NOT contain all required elements.
     */
    function ConceptMapGroupElementTargetDependsOn(source) {
        var _this = _super.call(this, source) || this;
        if (source["display"] !== undefined) {
            _this.display = source.display;
        }
        if (source["_display"] !== undefined) {
            _this._display = new fhirModels.Element(source._display);
        }
        {
            _this.property = source.property;
        }
        if (source["_property"] !== undefined) {
            _this._property = new fhirModels.Element(source._property);
        }
        if (source["system"] !== undefined) {
            _this.system = source.system;
        }
        if (source["_system"] !== undefined) {
            _this._system = new fhirModels.Element(source._system);
        }
        {
            _this.value = source.value;
        }
        if (source["_value"] !== undefined) {
            _this._value = new fhirModels.Element(source._value);
        }
        return _this;
    }
    return ConceptMapGroupElementTargetDependsOn;
}(fhirModels.BackboneElement));
export { ConceptMapGroupElementTargetDependsOn };
/**
 * Ideally there would only be one map, with equal or equivalent mapping. But multiple maps are allowed for several narrower options, or to assert that other concepts are unmatched.
 */
var ConceptMapGroupElementTarget = /** @class */ (function (_super) {
    __extends(ConceptMapGroupElementTarget, _super);
    /**
     * Default constructor for ConceptMapGroupElementTarget from an object that MAY NOT contain all required elements.
     */
    function ConceptMapGroupElementTarget(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            _this._code = new fhirModels.Element(source._code);
        }
        if (source["comment"] !== undefined) {
            _this.comment = source.comment;
        }
        if (source["_comment"] !== undefined) {
            _this._comment = new fhirModels.Element(source._comment);
        }
        if (source["dependsOn"] !== undefined) {
            _this.dependsOn = source.dependsOn.map(function (x) { return new fhirModels.ConceptMapGroupElementTargetDependsOn(x); });
        }
        if (source["display"] !== undefined) {
            _this.display = source.display;
        }
        if (source["_display"] !== undefined) {
            _this._display = new fhirModels.Element(source._display);
        }
        {
            _this.equivalence = source.equivalence;
        }
        if (source["_equivalence"] !== undefined) {
            _this._equivalence = new fhirModels.Element(source._equivalence);
        }
        if (source["product"] !== undefined) {
            _this.product = source.product.map(function (x) { return new fhirModels.ConceptMapGroupElementTargetDependsOn(x); });
        }
        return _this;
    }
    return ConceptMapGroupElementTarget;
}(fhirModels.BackboneElement));
export { ConceptMapGroupElementTarget };
/**
 * Code Values for the ConceptMap.group.element.target.equivalence field
 */
export var ConceptMapGroupElementTargetEquivalenceEnum;
(function (ConceptMapGroupElementTargetEquivalenceEnum) {
    ConceptMapGroupElementTargetEquivalenceEnum["RELATEDTO"] = "relatedto";
    ConceptMapGroupElementTargetEquivalenceEnum["EQUIVALENT"] = "equivalent";
    ConceptMapGroupElementTargetEquivalenceEnum["EQUAL"] = "equal";
    ConceptMapGroupElementTargetEquivalenceEnum["WIDER"] = "wider";
    ConceptMapGroupElementTargetEquivalenceEnum["SUBSUMES"] = "subsumes";
    ConceptMapGroupElementTargetEquivalenceEnum["NARROWER"] = "narrower";
    ConceptMapGroupElementTargetEquivalenceEnum["SPECIALIZES"] = "specializes";
    ConceptMapGroupElementTargetEquivalenceEnum["INEXACT"] = "inexact";
    ConceptMapGroupElementTargetEquivalenceEnum["UNMATCHED"] = "unmatched";
    ConceptMapGroupElementTargetEquivalenceEnum["DISJOINT"] = "disjoint";
})(ConceptMapGroupElementTargetEquivalenceEnum || (ConceptMapGroupElementTargetEquivalenceEnum = {}));
/**
 * Generally, the ideal is that there would only be one mapping for each concept in the source value set, but a given concept may be mapped multiple times with different comments or dependencies.
 */
var ConceptMapGroupElement = /** @class */ (function (_super) {
    __extends(ConceptMapGroupElement, _super);
    /**
     * Default constructor for ConceptMapGroupElement from an object that MAY NOT contain all required elements.
     */
    function ConceptMapGroupElement(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            _this._code = new fhirModels.Element(source._code);
        }
        if (source["display"] !== undefined) {
            _this.display = source.display;
        }
        if (source["_display"] !== undefined) {
            _this._display = new fhirModels.Element(source._display);
        }
        if (source["target"] !== undefined) {
            _this.target = source.target.map(function (x) { return new fhirModels.ConceptMapGroupElementTarget(x); });
        }
        return _this;
    }
    return ConceptMapGroupElement;
}(fhirModels.BackboneElement));
export { ConceptMapGroupElement };
/**
 * This only applies if the source code has a system value that matches the system defined for the group.
 */
var ConceptMapGroupUnmapped = /** @class */ (function (_super) {
    __extends(ConceptMapGroupUnmapped, _super);
    /**
     * Default constructor for ConceptMapGroupUnmapped from an object that MAY NOT contain all required elements.
     */
    function ConceptMapGroupUnmapped(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            _this._code = new fhirModels.Element(source._code);
        }
        if (source["display"] !== undefined) {
            _this.display = source.display;
        }
        if (source["_display"] !== undefined) {
            _this._display = new fhirModels.Element(source._display);
        }
        {
            _this.mode = source.mode;
        }
        if (source["_mode"] !== undefined) {
            _this._mode = new fhirModels.Element(source._mode);
        }
        if (source["url"] !== undefined) {
            _this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            _this._url = new fhirModels.Element(source._url);
        }
        return _this;
    }
    return ConceptMapGroupUnmapped;
}(fhirModels.BackboneElement));
export { ConceptMapGroupUnmapped };
/**
 * Code Values for the ConceptMap.group.unmapped.mode field
 */
export var ConceptMapGroupUnmappedModeEnum;
(function (ConceptMapGroupUnmappedModeEnum) {
    ConceptMapGroupUnmappedModeEnum["PROVIDED"] = "provided";
    ConceptMapGroupUnmappedModeEnum["FIXED"] = "fixed";
    ConceptMapGroupUnmappedModeEnum["OTHER_MAP"] = "other-map";
})(ConceptMapGroupUnmappedModeEnum || (ConceptMapGroupUnmappedModeEnum = {}));
/**
 * A group of mappings that all have the same source and target system.
 */
var ConceptMapGroup = /** @class */ (function (_super) {
    __extends(ConceptMapGroup, _super);
    /**
     * Default constructor for ConceptMapGroup from an object that MAY NOT contain all required elements.
     */
    function ConceptMapGroup(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.element = source.element.map(function (x) { return new fhirModels.ConceptMapGroupElement(x); });
        }
        if (source["source"] !== undefined) {
            _this.source = source.source;
        }
        if (source["_source"] !== undefined) {
            _this._source = new fhirModels.Element(source._source);
        }
        if (source["sourceVersion"] !== undefined) {
            _this.sourceVersion = source.sourceVersion;
        }
        if (source["_sourceVersion"] !== undefined) {
            _this._sourceVersion = new fhirModels.Element(source._sourceVersion);
        }
        if (source["target"] !== undefined) {
            _this.target = source.target;
        }
        if (source["_target"] !== undefined) {
            _this._target = new fhirModels.Element(source._target);
        }
        if (source["targetVersion"] !== undefined) {
            _this.targetVersion = source.targetVersion;
        }
        if (source["_targetVersion"] !== undefined) {
            _this._targetVersion = new fhirModels.Element(source._targetVersion);
        }
        if (source["unmapped"] !== undefined) {
            _this.unmapped = new fhirModels.ConceptMapGroupUnmapped(source.unmapped);
        }
        return _this;
    }
    return ConceptMapGroup;
}(fhirModels.BackboneElement));
export { ConceptMapGroup };
/**
 * A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.
 */
var ConceptMap = /** @class */ (function (_super) {
    __extends(ConceptMap, _super);
    /**
     * Default constructor for ConceptMap from an object that MAY NOT contain all required elements.
     */
    function ConceptMap(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "ConceptMap";
        if ((source['resourceType'] !== "ConceptMap") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a ConceptMap';
        }
        if (source["contact"] !== undefined) {
            _this.contact = source.contact.map(function (x) { return new fhirModels.ContactDetail(x); });
        }
        if (source["copyright"] !== undefined) {
            _this.copyright = source.copyright;
        }
        if (source["_copyright"] !== undefined) {
            _this._copyright = new fhirModels.Element(source._copyright);
        }
        if (source["date"] !== undefined) {
            _this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            _this._date = new fhirModels.Element(source._date);
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["experimental"] !== undefined) {
            _this.experimental = source.experimental;
        }
        if (source["_experimental"] !== undefined) {
            _this._experimental = new fhirModels.Element(source._experimental);
        }
        if (source["group"] !== undefined) {
            _this.group = source.group.map(function (x) { return new fhirModels.ConceptMapGroup(x); });
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = new fhirModels.Identifier(source.identifier);
        }
        if (source["jurisdiction"] !== undefined) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["name"] !== undefined) {
            _this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            _this._name = new fhirModels.Element(source._name);
        }
        if (source["publisher"] !== undefined) {
            _this.publisher = source.publisher;
        }
        if (source["_publisher"] !== undefined) {
            _this._publisher = new fhirModels.Element(source._publisher);
        }
        if (source["purpose"] !== undefined) {
            _this.purpose = source.purpose;
        }
        if (source["_purpose"] !== undefined) {
            _this._purpose = new fhirModels.Element(source._purpose);
        }
        if (source["sourceUri"] !== undefined) {
            _this.sourceUri = source.sourceUri;
        }
        if (source["_sourceUri"] !== undefined) {
            _this._sourceUri = new fhirModels.Element(source._sourceUri);
        }
        if (source["sourceCanonical"] !== undefined) {
            _this.sourceCanonical = source.sourceCanonical;
        }
        if (source["_sourceCanonical"] !== undefined) {
            _this._sourceCanonical = new fhirModels.Element(source._sourceCanonical);
        }
        {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["targetUri"] !== undefined) {
            _this.targetUri = source.targetUri;
        }
        if (source["_targetUri"] !== undefined) {
            _this._targetUri = new fhirModels.Element(source._targetUri);
        }
        if (source["targetCanonical"] !== undefined) {
            _this.targetCanonical = source.targetCanonical;
        }
        if (source["_targetCanonical"] !== undefined) {
            _this._targetCanonical = new fhirModels.Element(source._targetCanonical);
        }
        if (source["title"] !== undefined) {
            _this.title = source.title;
        }
        if (source["_title"] !== undefined) {
            _this._title = new fhirModels.Element(source._title);
        }
        if (source["url"] !== undefined) {
            _this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            _this._url = new fhirModels.Element(source._url);
        }
        if (source["useContext"] !== undefined) {
            _this.useContext = source.useContext.map(function (x) { return new fhirModels.UsageContext(x); });
        }
        if (source["version"] !== undefined) {
            _this.version = source.version;
        }
        if (source["_version"] !== undefined) {
            _this._version = new fhirModels.Element(source._version);
        }
        return _this;
    }
    return ConceptMap;
}(fhirModels.DomainResource));
export { ConceptMap };
/**
 * Code Values for the ConceptMap.status field
 */
export var ConceptMapStatusEnum;
(function (ConceptMapStatusEnum) {
    ConceptMapStatusEnum["DRAFT"] = "draft";
    ConceptMapStatusEnum["ACTIVE"] = "active";
    ConceptMapStatusEnum["RETIRED"] = "retired";
    ConceptMapStatusEnum["UNKNOWN"] = "unknown";
})(ConceptMapStatusEnum || (ConceptMapStatusEnum = {}));
