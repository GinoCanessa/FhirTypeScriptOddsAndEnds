var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
 */
var OrganizationContact = /** @class */ (function (_super) {
    __extends(OrganizationContact, _super);
    /**
     * Default constructor for OrganizationContact from an object that MAY NOT contain all required elements.
     */
    function OrganizationContact(source) {
        var _this = _super.call(this, source) || this;
        if (source["address"] !== undefined) {
            _this.address = new fhirModels.Address(source.address);
        }
        if (source["name"] !== undefined) {
            _this.name = new fhirModels.HumanName(source.name);
        }
        if (source["purpose"] !== undefined) {
            _this.purpose = new fhirModels.CodeableConcept(source.purpose);
        }
        if (source["telecom"] !== undefined) {
            _this.telecom = source.telecom.map(function (x) { return new fhirModels.ContactPoint(x); });
        }
        return _this;
    }
    return OrganizationContact;
}(fhirModels.BackboneElement));
export { OrganizationContact };
/**
 * A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, payer/insurer, etc.
 */
var Organization = /** @class */ (function (_super) {
    __extends(Organization, _super);
    /**
     * Default constructor for Organization from an object that MAY NOT contain all required elements.
     */
    function Organization(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "Organization";
        if ((source['resourceType'] !== "Organization") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Organization';
        }
        if (source["active"] !== undefined) {
            _this.active = source.active;
        }
        if (source["_active"] !== undefined) {
            _this._active = new fhirModels.Element(source._active);
        }
        if (source["address"] !== undefined) {
            _this.address = source.address.map(function (x) { return new fhirModels.Address(x); });
        }
        if (source["alias"] !== undefined) {
            _this.alias = source.alias.map(function (x) { return (x); });
        }
        if (source["_alias"] !== undefined) {
            _this._alias = source._alias.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["contact"] !== undefined) {
            _this.contact = source.contact.map(function (x) { return new fhirModels.OrganizationContact(x); });
        }
        if (source["endpoint"] !== undefined) {
            _this.endpoint = source.endpoint.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["name"] !== undefined) {
            _this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            _this._name = new fhirModels.Element(source._name);
        }
        if (source["partOf"] !== undefined) {
            _this.partOf = new fhirModels.Reference(source.partOf);
        }
        if (source["telecom"] !== undefined) {
            _this.telecom = source.telecom.map(function (x) { return new fhirModels.ContactPoint(x); });
        }
        if (source["type"] !== undefined) {
            _this.type = source.type.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        return _this;
    }
    return Organization;
}(fhirModels.DomainResource));
export { Organization };
