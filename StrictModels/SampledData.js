var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
 */
var SampledData = /** @class */ (function (_super) {
    __extends(SampledData, _super);
    /**
     * Default constructor for SampledData from an object that MAY NOT contain all required elements.
     */
    function SampledData(source) {
        var _this = _super.call(this, source) || this;
        if (source["data"] !== undefined) {
            _this.data = source.data;
        }
        if (source["_data"] !== undefined) {
            _this._data = new fhirModels.Element(source._data);
        }
        {
            _this.dimensions = source.dimensions;
        }
        if (source["_dimensions"] !== undefined) {
            _this._dimensions = new fhirModels.Element(source._dimensions);
        }
        if (source["factor"] !== undefined) {
            _this.factor = source.factor;
        }
        if (source["_factor"] !== undefined) {
            _this._factor = new fhirModels.Element(source._factor);
        }
        if (source["lowerLimit"] !== undefined) {
            _this.lowerLimit = source.lowerLimit;
        }
        if (source["_lowerLimit"] !== undefined) {
            _this._lowerLimit = new fhirModels.Element(source._lowerLimit);
        }
        {
            _this.origin = new fhirModels.Quantity(source.origin);
        }
        {
            _this.period = source.period;
        }
        if (source["_period"] !== undefined) {
            _this._period = new fhirModels.Element(source._period);
        }
        if (source["upperLimit"] !== undefined) {
            _this.upperLimit = source.upperLimit;
        }
        if (source["_upperLimit"] !== undefined) {
            _this._upperLimit = new fhirModels.Element(source._upperLimit);
        }
        return _this;
    }
    return SampledData;
}(fhirModels.Element));
export { SampledData };
