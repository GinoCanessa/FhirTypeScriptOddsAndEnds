var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * If multiple repetitions of this extension are present, the item should be enabled when the condition for *any* of the repetitions is true.  I.e. treat "enableWhen"s as being joined by an "or" clause.  This element is a modifier because if enableWhen is present for an item, "required" is ignored unless one of the enableWhen conditions is met. When an item is disabled, all of its descendants are disabled, regardless of what their own enableWhen logic might evaluate to.
 */
var QuestionnaireItemEnableWhen = /** @class */ (function (_super) {
    __extends(QuestionnaireItemEnableWhen, _super);
    /**
     * Default constructor for QuestionnaireItemEnableWhen from an object that MAY NOT contain all required elements.
     */
    function QuestionnaireItemEnableWhen(source) {
        var _this = _super.call(this, source) || this;
        if (source["answerBoolean"] !== undefined) {
            _this.answerBoolean = source.answerBoolean;
        }
        if (source["_answerBoolean"] !== undefined) {
            _this._answerBoolean = new fhirModels.Element(source._answerBoolean);
        }
        if (source["answerDecimal"] !== undefined) {
            _this.answerDecimal = source.answerDecimal;
        }
        if (source["_answerDecimal"] !== undefined) {
            _this._answerDecimal = new fhirModels.Element(source._answerDecimal);
        }
        if (source["answerInteger"] !== undefined) {
            _this.answerInteger = source.answerInteger;
        }
        if (source["_answerInteger"] !== undefined) {
            _this._answerInteger = new fhirModels.Element(source._answerInteger);
        }
        if (source["answerDate"] !== undefined) {
            _this.answerDate = source.answerDate;
        }
        if (source["_answerDate"] !== undefined) {
            _this._answerDate = new fhirModels.Element(source._answerDate);
        }
        if (source["answerDateTime"] !== undefined) {
            _this.answerDateTime = source.answerDateTime;
        }
        if (source["_answerDateTime"] !== undefined) {
            _this._answerDateTime = new fhirModels.Element(source._answerDateTime);
        }
        if (source["answerTime"] !== undefined) {
            _this.answerTime = source.answerTime;
        }
        if (source["_answerTime"] !== undefined) {
            _this._answerTime = new fhirModels.Element(source._answerTime);
        }
        if (source["answerString"] !== undefined) {
            _this.answerString = source.answerString;
        }
        if (source["_answerString"] !== undefined) {
            _this._answerString = new fhirModels.Element(source._answerString);
        }
        if (source["answerCoding"] !== undefined) {
            _this.answerCoding = new fhirModels.Coding(source.answerCoding);
        }
        if (source["answerQuantity"] !== undefined) {
            _this.answerQuantity = new fhirModels.Quantity(source.answerQuantity);
        }
        if (source["answerReference"] !== undefined) {
            _this.answerReference = new fhirModels.Reference(source.answerReference);
        }
        {
            _this.operator = source.operator;
        }
        if (source["_operator"] !== undefined) {
            _this._operator = new fhirModels.Element(source._operator);
        }
        {
            _this.question = source.question;
        }
        if (source["_question"] !== undefined) {
            _this._question = new fhirModels.Element(source._question);
        }
        return _this;
    }
    return QuestionnaireItemEnableWhen;
}(fhirModels.BackboneElement));
export { QuestionnaireItemEnableWhen };
/**
 * Code Values for the Questionnaire.item.enableWhen.operator field
 */
export var QuestionnaireItemEnableWhenOperatorEnum;
(function (QuestionnaireItemEnableWhenOperatorEnum) {
    QuestionnaireItemEnableWhenOperatorEnum["EXISTS"] = "exists";
    QuestionnaireItemEnableWhenOperatorEnum["EQUALS"] = "=";
    QuestionnaireItemEnableWhenOperatorEnum["NOT_EQUALS"] = "!=";
    QuestionnaireItemEnableWhenOperatorEnum["GREATER_THAN"] = ">";
    QuestionnaireItemEnableWhenOperatorEnum["LESS_THAN"] = "<";
    QuestionnaireItemEnableWhenOperatorEnum["GREATER_THAN_OR_EQUALS"] = ">=";
    QuestionnaireItemEnableWhenOperatorEnum["LESS_THAN_OR_EQUALS"] = "<=";
})(QuestionnaireItemEnableWhenOperatorEnum || (QuestionnaireItemEnableWhenOperatorEnum = {}));
/**
 * This element can be used when the value set machinery of answerValueSet is deemed too cumbersome or when there's a need to capture possible answers that are not codes.
 */
var QuestionnaireItemAnswerOption = /** @class */ (function (_super) {
    __extends(QuestionnaireItemAnswerOption, _super);
    /**
     * Default constructor for QuestionnaireItemAnswerOption from an object that MAY NOT contain all required elements.
     */
    function QuestionnaireItemAnswerOption(source) {
        var _this = _super.call(this, source) || this;
        if (source["initialSelected"] !== undefined) {
            _this.initialSelected = source.initialSelected;
        }
        if (source["_initialSelected"] !== undefined) {
            _this._initialSelected = new fhirModels.Element(source._initialSelected);
        }
        if (source["valueInteger"] !== undefined) {
            _this.valueInteger = source.valueInteger;
        }
        if (source["_valueInteger"] !== undefined) {
            _this._valueInteger = new fhirModels.Element(source._valueInteger);
        }
        if (source["valueDate"] !== undefined) {
            _this.valueDate = source.valueDate;
        }
        if (source["_valueDate"] !== undefined) {
            _this._valueDate = new fhirModels.Element(source._valueDate);
        }
        if (source["valueTime"] !== undefined) {
            _this.valueTime = source.valueTime;
        }
        if (source["_valueTime"] !== undefined) {
            _this._valueTime = new fhirModels.Element(source._valueTime);
        }
        if (source["valueString"] !== undefined) {
            _this.valueString = source.valueString;
        }
        if (source["_valueString"] !== undefined) {
            _this._valueString = new fhirModels.Element(source._valueString);
        }
        if (source["valueCoding"] !== undefined) {
            _this.valueCoding = new fhirModels.Coding(source.valueCoding);
        }
        if (source["valueReference"] !== undefined) {
            _this.valueReference = new fhirModels.Reference(source.valueReference);
        }
        return _this;
    }
    return QuestionnaireItemAnswerOption;
}(fhirModels.BackboneElement));
export { QuestionnaireItemAnswerOption };
/**
 * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that initial values can influence results.  The data type of initial[x] must agree with the item.type, and only repeating items can have more then one initial value.
 */
var QuestionnaireItemInitial = /** @class */ (function (_super) {
    __extends(QuestionnaireItemInitial, _super);
    /**
     * Default constructor for QuestionnaireItemInitial from an object that MAY NOT contain all required elements.
     */
    function QuestionnaireItemInitial(source) {
        var _this = _super.call(this, source) || this;
        if (source["valueBoolean"] !== undefined) {
            _this.valueBoolean = source.valueBoolean;
        }
        if (source["_valueBoolean"] !== undefined) {
            _this._valueBoolean = new fhirModels.Element(source._valueBoolean);
        }
        if (source["valueDecimal"] !== undefined) {
            _this.valueDecimal = source.valueDecimal;
        }
        if (source["_valueDecimal"] !== undefined) {
            _this._valueDecimal = new fhirModels.Element(source._valueDecimal);
        }
        if (source["valueInteger"] !== undefined) {
            _this.valueInteger = source.valueInteger;
        }
        if (source["_valueInteger"] !== undefined) {
            _this._valueInteger = new fhirModels.Element(source._valueInteger);
        }
        if (source["valueDate"] !== undefined) {
            _this.valueDate = source.valueDate;
        }
        if (source["_valueDate"] !== undefined) {
            _this._valueDate = new fhirModels.Element(source._valueDate);
        }
        if (source["valueDateTime"] !== undefined) {
            _this.valueDateTime = source.valueDateTime;
        }
        if (source["_valueDateTime"] !== undefined) {
            _this._valueDateTime = new fhirModels.Element(source._valueDateTime);
        }
        if (source["valueTime"] !== undefined) {
            _this.valueTime = source.valueTime;
        }
        if (source["_valueTime"] !== undefined) {
            _this._valueTime = new fhirModels.Element(source._valueTime);
        }
        if (source["valueString"] !== undefined) {
            _this.valueString = source.valueString;
        }
        if (source["_valueString"] !== undefined) {
            _this._valueString = new fhirModels.Element(source._valueString);
        }
        if (source["valueUri"] !== undefined) {
            _this.valueUri = source.valueUri;
        }
        if (source["_valueUri"] !== undefined) {
            _this._valueUri = new fhirModels.Element(source._valueUri);
        }
        if (source["valueAttachment"] !== undefined) {
            _this.valueAttachment = new fhirModels.Attachment(source.valueAttachment);
        }
        if (source["valueCoding"] !== undefined) {
            _this.valueCoding = new fhirModels.Coding(source.valueCoding);
        }
        if (source["valueQuantity"] !== undefined) {
            _this.valueQuantity = new fhirModels.Quantity(source.valueQuantity);
        }
        if (source["valueReference"] !== undefined) {
            _this.valueReference = new fhirModels.Reference(source.valueReference);
        }
        return _this;
    }
    return QuestionnaireItemInitial;
}(fhirModels.BackboneElement));
export { QuestionnaireItemInitial };
/**
 * The content of the questionnaire is constructed from an ordered, hierarchical collection of items.
 */
var QuestionnaireItem = /** @class */ (function (_super) {
    __extends(QuestionnaireItem, _super);
    /**
     * Default constructor for QuestionnaireItem from an object that MAY NOT contain all required elements.
     */
    function QuestionnaireItem(source) {
        var _this = _super.call(this, source) || this;
        if (source["answerOption"] !== undefined) {
            _this.answerOption = source.answerOption.map(function (x) { return new fhirModels.QuestionnaireItemAnswerOption(x); });
        }
        if (source["answerValueSet"] !== undefined) {
            _this.answerValueSet = source.answerValueSet;
        }
        if (source["_answerValueSet"] !== undefined) {
            _this._answerValueSet = new fhirModels.Element(source._answerValueSet);
        }
        if (source["code"] !== undefined) {
            _this.code = source.code.map(function (x) { return new fhirModels.Coding(x); });
        }
        if (source["definition"] !== undefined) {
            _this.definition = source.definition;
        }
        if (source["_definition"] !== undefined) {
            _this._definition = new fhirModels.Element(source._definition);
        }
        if (source["enableBehavior"] !== undefined) {
            _this.enableBehavior = source.enableBehavior;
        }
        if (source["_enableBehavior"] !== undefined) {
            _this._enableBehavior = new fhirModels.Element(source._enableBehavior);
        }
        if (source["enableWhen"] !== undefined) {
            _this.enableWhen = source.enableWhen.map(function (x) { return new fhirModels.QuestionnaireItemEnableWhen(x); });
        }
        if (source["initial"] !== undefined) {
            _this.initial = source.initial.map(function (x) { return new fhirModels.QuestionnaireItemInitial(x); });
        }
        if (source["item"] !== undefined) {
            _this.item = source.item.map(function (x) { return new fhirModels.QuestionnaireItem(x); });
        }
        {
            _this.linkId = source.linkId;
        }
        if (source["_linkId"] !== undefined) {
            _this._linkId = new fhirModels.Element(source._linkId);
        }
        if (source["maxLength"] !== undefined) {
            _this.maxLength = source.maxLength;
        }
        if (source["_maxLength"] !== undefined) {
            _this._maxLength = new fhirModels.Element(source._maxLength);
        }
        if (source["prefix"] !== undefined) {
            _this.prefix = source.prefix;
        }
        if (source["_prefix"] !== undefined) {
            _this._prefix = new fhirModels.Element(source._prefix);
        }
        if (source["readOnly"] !== undefined) {
            _this.readOnly = source.readOnly;
        }
        if (source["_readOnly"] !== undefined) {
            _this._readOnly = new fhirModels.Element(source._readOnly);
        }
        if (source["repeats"] !== undefined) {
            _this.repeats = source.repeats;
        }
        if (source["_repeats"] !== undefined) {
            _this._repeats = new fhirModels.Element(source._repeats);
        }
        if (source["required"] !== undefined) {
            _this.required = source.required;
        }
        if (source["_required"] !== undefined) {
            _this._required = new fhirModels.Element(source._required);
        }
        if (source["text"] !== undefined) {
            _this.text = source.text;
        }
        if (source["_text"] !== undefined) {
            _this._text = new fhirModels.Element(source._text);
        }
        {
            _this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            _this._type = new fhirModels.Element(source._type);
        }
        return _this;
    }
    return QuestionnaireItem;
}(fhirModels.BackboneElement));
export { QuestionnaireItem };
/**
 * Code Values for the Questionnaire.item.enableBehavior field
 */
export var QuestionnaireItemEnableBehaviorEnum;
(function (QuestionnaireItemEnableBehaviorEnum) {
    QuestionnaireItemEnableBehaviorEnum["ALL"] = "all";
    QuestionnaireItemEnableBehaviorEnum["ANY"] = "any";
})(QuestionnaireItemEnableBehaviorEnum || (QuestionnaireItemEnableBehaviorEnum = {}));
/**
 * Code Values for the Questionnaire.item.type field
 */
export var QuestionnaireItemTypeEnum;
(function (QuestionnaireItemTypeEnum) {
    QuestionnaireItemTypeEnum["GROUP"] = "group";
    QuestionnaireItemTypeEnum["DISPLAY"] = "display";
    QuestionnaireItemTypeEnum["QUESTION"] = "question";
    QuestionnaireItemTypeEnum["BOOLEAN"] = "boolean";
    QuestionnaireItemTypeEnum["DECIMAL"] = "decimal";
    QuestionnaireItemTypeEnum["INTEGER"] = "integer";
    QuestionnaireItemTypeEnum["DATE"] = "date";
    QuestionnaireItemTypeEnum["DATETIME"] = "dateTime";
    QuestionnaireItemTypeEnum["TIME"] = "time";
    QuestionnaireItemTypeEnum["STRING"] = "string";
    QuestionnaireItemTypeEnum["TEXT"] = "text";
    QuestionnaireItemTypeEnum["URL"] = "url";
    QuestionnaireItemTypeEnum["CHOICE"] = "choice";
    QuestionnaireItemTypeEnum["OPEN_CHOICE"] = "open-choice";
    QuestionnaireItemTypeEnum["ATTACHMENT"] = "attachment";
    QuestionnaireItemTypeEnum["REFERENCE"] = "reference";
    QuestionnaireItemTypeEnum["QUANTITY"] = "quantity";
})(QuestionnaireItemTypeEnum || (QuestionnaireItemTypeEnum = {}));
/**
 * A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.
 */
var Questionnaire = /** @class */ (function (_super) {
    __extends(Questionnaire, _super);
    /**
     * Default constructor for Questionnaire from an object that MAY NOT contain all required elements.
     */
    function Questionnaire(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "Questionnaire";
        if ((source['resourceType'] !== "Questionnaire") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Questionnaire';
        }
        if (source["approvalDate"] !== undefined) {
            _this.approvalDate = source.approvalDate;
        }
        if (source["_approvalDate"] !== undefined) {
            _this._approvalDate = new fhirModels.Element(source._approvalDate);
        }
        if (source["code"] !== undefined) {
            _this.code = source.code.map(function (x) { return new fhirModels.Coding(x); });
        }
        if (source["contact"] !== undefined) {
            _this.contact = source.contact.map(function (x) { return new fhirModels.ContactDetail(x); });
        }
        if (source["copyright"] !== undefined) {
            _this.copyright = source.copyright;
        }
        if (source["_copyright"] !== undefined) {
            _this._copyright = new fhirModels.Element(source._copyright);
        }
        if (source["date"] !== undefined) {
            _this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            _this._date = new fhirModels.Element(source._date);
        }
        if (source["derivedFrom"] !== undefined) {
            _this.derivedFrom = source.derivedFrom.map(function (x) { return (x); });
        }
        if (source["_derivedFrom"] !== undefined) {
            _this._derivedFrom = source._derivedFrom.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["effectivePeriod"] !== undefined) {
            _this.effectivePeriod = new fhirModels.Period(source.effectivePeriod);
        }
        if (source["experimental"] !== undefined) {
            _this.experimental = source.experimental;
        }
        if (source["_experimental"] !== undefined) {
            _this._experimental = new fhirModels.Element(source._experimental);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["item"] !== undefined) {
            _this.item = source.item.map(function (x) { return new fhirModels.QuestionnaireItem(x); });
        }
        if (source["jurisdiction"] !== undefined) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["lastReviewDate"] !== undefined) {
            _this.lastReviewDate = source.lastReviewDate;
        }
        if (source["_lastReviewDate"] !== undefined) {
            _this._lastReviewDate = new fhirModels.Element(source._lastReviewDate);
        }
        if (source["name"] !== undefined) {
            _this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            _this._name = new fhirModels.Element(source._name);
        }
        if (source["publisher"] !== undefined) {
            _this.publisher = source.publisher;
        }
        if (source["_publisher"] !== undefined) {
            _this._publisher = new fhirModels.Element(source._publisher);
        }
        if (source["purpose"] !== undefined) {
            _this.purpose = source.purpose;
        }
        if (source["_purpose"] !== undefined) {
            _this._purpose = new fhirModels.Element(source._purpose);
        }
        {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["subjectType"] !== undefined) {
            _this.subjectType = source.subjectType.map(function (x) { return (x); });
        }
        if (source["_subjectType"] !== undefined) {
            _this._subjectType = source._subjectType.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["title"] !== undefined) {
            _this.title = source.title;
        }
        if (source["_title"] !== undefined) {
            _this._title = new fhirModels.Element(source._title);
        }
        if (source["url"] !== undefined) {
            _this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            _this._url = new fhirModels.Element(source._url);
        }
        if (source["useContext"] !== undefined) {
            _this.useContext = source.useContext.map(function (x) { return new fhirModels.UsageContext(x); });
        }
        if (source["version"] !== undefined) {
            _this.version = source.version;
        }
        if (source["_version"] !== undefined) {
            _this._version = new fhirModels.Element(source._version);
        }
        return _this;
    }
    return Questionnaire;
}(fhirModels.DomainResource));
export { Questionnaire };
/**
 * Code Values for the Questionnaire.status field
 */
export var QuestionnaireStatusEnum;
(function (QuestionnaireStatusEnum) {
    QuestionnaireStatusEnum["DRAFT"] = "draft";
    QuestionnaireStatusEnum["ACTIVE"] = "active";
    QuestionnaireStatusEnum["RETIRED"] = "retired";
    QuestionnaireStatusEnum["UNKNOWN"] = "unknown";
})(QuestionnaireStatusEnum || (QuestionnaireStatusEnum = {}));
