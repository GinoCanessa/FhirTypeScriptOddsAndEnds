"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentReconciliationStatusEnum = exports.PaymentReconciliationOutcomeEnum = exports.PaymentReconciliation = exports.PaymentReconciliationProcessNoteTypeEnum = exports.PaymentReconciliationProcessNote = exports.PaymentReconciliationDetail = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Distribution of the payment amount for a previously acknowledged payable.
 */
class PaymentReconciliationDetail extends fhirModels.BackboneElement {
    /**
     * Default constructor for PaymentReconciliationDetail from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["amount"] !== undefined) {
            this.amount = new fhirModels.Money(source.amount);
        }
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = new fhirModels.Identifier(source.identifier);
        }
        if (source["payee"] !== undefined) {
            this.payee = new fhirModels.Reference(source.payee);
        }
        if (source["predecessor"] !== undefined) {
            this.predecessor = new fhirModels.Identifier(source.predecessor);
        }
        if (source["request"] !== undefined) {
            this.request = new fhirModels.Reference(source.request);
        }
        if (source["response"] !== undefined) {
            this.response = new fhirModels.Reference(source.response);
        }
        if (source["responsible"] !== undefined) {
            this.responsible = new fhirModels.Reference(source.responsible);
        }
        if (source["submitter"] !== undefined) {
            this.submitter = new fhirModels.Reference(source.submitter);
        }
        {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.PaymentReconciliationDetail = PaymentReconciliationDetail;
/**
 * A note that describes or explains the processing in a human readable form.
 */
class PaymentReconciliationProcessNote extends fhirModels.BackboneElement {
    /**
     * Default constructor for PaymentReconciliationProcessNote from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["text"] !== undefined) {
            this.text = source.text;
        }
        if (source["_text"] !== undefined) {
            this._text = new fhirModels.Element(source._text);
        }
        if (source["type"] !== undefined) {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
    }
}
exports.PaymentReconciliationProcessNote = PaymentReconciliationProcessNote;
/**
 * Code Values for the PaymentReconciliation.processNote.type field
 */
var PaymentReconciliationProcessNoteTypeEnum;
(function (PaymentReconciliationProcessNoteTypeEnum) {
    PaymentReconciliationProcessNoteTypeEnum["DISPLAY"] = "display";
    PaymentReconciliationProcessNoteTypeEnum["PRINT"] = "print";
    PaymentReconciliationProcessNoteTypeEnum["PRINTOPER"] = "printoper";
})(PaymentReconciliationProcessNoteTypeEnum = exports.PaymentReconciliationProcessNoteTypeEnum || (exports.PaymentReconciliationProcessNoteTypeEnum = {}));
/**
 * This resource provides the details including amount of a payment and allocates the payment items being paid.
 */
class PaymentReconciliation extends fhirModels.DomainResource {
    /**
     * Default constructor for PaymentReconciliation from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "PaymentReconciliation";
        if ((source['resourceType'] !== "PaymentReconciliation") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a PaymentReconciliation';
        }
        {
            this.created = source.created;
        }
        if (source["_created"] !== undefined) {
            this._created = new fhirModels.Element(source._created);
        }
        if (source["detail"] !== undefined) {
            this.detail = source.detail.map((x) => new fhirModels.PaymentReconciliationDetail(x));
        }
        if (source["disposition"] !== undefined) {
            this.disposition = source.disposition;
        }
        if (source["_disposition"] !== undefined) {
            this._disposition = new fhirModels.Element(source._disposition);
        }
        if (source["formCode"] !== undefined) {
            this.formCode = new fhirModels.CodeableConcept(source.formCode);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["outcome"] !== undefined) {
            this.outcome = source.outcome;
        }
        if (source["_outcome"] !== undefined) {
            this._outcome = new fhirModels.Element(source._outcome);
        }
        {
            this.paymentAmount = new fhirModels.Money(source.paymentAmount);
        }
        {
            this.paymentDate = source.paymentDate;
        }
        if (source["_paymentDate"] !== undefined) {
            this._paymentDate = new fhirModels.Element(source._paymentDate);
        }
        if (source["paymentIdentifier"] !== undefined) {
            this.paymentIdentifier = new fhirModels.Identifier(source.paymentIdentifier);
        }
        if (source["paymentIssuer"] !== undefined) {
            this.paymentIssuer = new fhirModels.Reference(source.paymentIssuer);
        }
        if (source["period"] !== undefined) {
            this.period = new fhirModels.Period(source.period);
        }
        if (source["processNote"] !== undefined) {
            this.processNote = source.processNote.map((x) => new fhirModels.PaymentReconciliationProcessNote(x));
        }
        if (source["request"] !== undefined) {
            this.request = new fhirModels.Reference(source.request);
        }
        if (source["requestor"] !== undefined) {
            this.requestor = new fhirModels.Reference(source.requestor);
        }
        {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
    }
}
exports.PaymentReconciliation = PaymentReconciliation;
/**
 * Code Values for the PaymentReconciliation.outcome field
 */
var PaymentReconciliationOutcomeEnum;
(function (PaymentReconciliationOutcomeEnum) {
    PaymentReconciliationOutcomeEnum["QUEUED"] = "queued";
    PaymentReconciliationOutcomeEnum["COMPLETE"] = "complete";
    PaymentReconciliationOutcomeEnum["ERROR"] = "error";
    PaymentReconciliationOutcomeEnum["PARTIAL"] = "partial";
})(PaymentReconciliationOutcomeEnum = exports.PaymentReconciliationOutcomeEnum || (exports.PaymentReconciliationOutcomeEnum = {}));
/**
 * Code Values for the PaymentReconciliation.status field
 */
var PaymentReconciliationStatusEnum;
(function (PaymentReconciliationStatusEnum) {
    PaymentReconciliationStatusEnum["ACTIVE"] = "active";
    PaymentReconciliationStatusEnum["CANCELLED"] = "cancelled";
    PaymentReconciliationStatusEnum["DRAFT"] = "draft";
    PaymentReconciliationStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(PaymentReconciliationStatusEnum = exports.PaymentReconciliationStatusEnum || (exports.PaymentReconciliationStatusEnum = {}));
//# sourceMappingURL=PaymentReconciliation.js.map