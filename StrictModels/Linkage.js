var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
 */
var LinkageItem = /** @class */ (function (_super) {
    __extends(LinkageItem, _super);
    /**
     * Default constructor for LinkageItem from an object that MAY NOT contain all required elements.
     */
    function LinkageItem(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.resource = new fhirModels.Reference(source.resource);
        }
        {
            _this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            _this._type = new fhirModels.Element(source._type);
        }
        return _this;
    }
    return LinkageItem;
}(fhirModels.BackboneElement));
export { LinkageItem };
/**
 * Code Values for the Linkage.item.type field
 */
export var LinkageItemTypeEnum;
(function (LinkageItemTypeEnum) {
    LinkageItemTypeEnum["SOURCE"] = "source";
    LinkageItemTypeEnum["ALTERNATE"] = "alternate";
    LinkageItemTypeEnum["HISTORICAL"] = "historical";
})(LinkageItemTypeEnum || (LinkageItemTypeEnum = {}));
/**
 * Identifies two or more records (resource instances) that refer to the same real-world "occurrence".
 */
var Linkage = /** @class */ (function (_super) {
    __extends(Linkage, _super);
    /**
     * Default constructor for Linkage from an object that MAY NOT contain all required elements.
     */
    function Linkage(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "Linkage";
        if ((source['resourceType'] !== "Linkage") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Linkage';
        }
        if (source["active"] !== undefined) {
            _this.active = source.active;
        }
        if (source["_active"] !== undefined) {
            _this._active = new fhirModels.Element(source._active);
        }
        if (source["author"] !== undefined) {
            _this.author = new fhirModels.Reference(source.author);
        }
        {
            _this.item = source.item.map(function (x) { return new fhirModels.LinkageItem(x); });
        }
        return _this;
    }
    return Linkage;
}(fhirModels.DomainResource));
export { Linkage };
