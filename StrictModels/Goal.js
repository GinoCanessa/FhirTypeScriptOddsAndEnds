var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * When multiple targets are present for a single goal instance, all targets must be met for the overall goal to be met.
 */
var GoalTarget = /** @class */ (function (_super) {
    __extends(GoalTarget, _super);
    /**
     * Default constructor for GoalTarget from an object that MAY NOT contain all required elements.
     */
    function GoalTarget(source) {
        var _this = _super.call(this, source) || this;
        if (source["detailQuantity"] !== undefined) {
            _this.detailQuantity = new fhirModels.Quantity(source.detailQuantity);
        }
        if (source["detailRange"] !== undefined) {
            _this.detailRange = new fhirModels.Range(source.detailRange);
        }
        if (source["detailCodeableConcept"] !== undefined) {
            _this.detailCodeableConcept = new fhirModels.CodeableConcept(source.detailCodeableConcept);
        }
        if (source["detailString"] !== undefined) {
            _this.detailString = source.detailString;
        }
        if (source["_detailString"] !== undefined) {
            _this._detailString = new fhirModels.Element(source._detailString);
        }
        if (source["detailBoolean"] !== undefined) {
            _this.detailBoolean = source.detailBoolean;
        }
        if (source["_detailBoolean"] !== undefined) {
            _this._detailBoolean = new fhirModels.Element(source._detailBoolean);
        }
        if (source["detailInteger"] !== undefined) {
            _this.detailInteger = source.detailInteger;
        }
        if (source["_detailInteger"] !== undefined) {
            _this._detailInteger = new fhirModels.Element(source._detailInteger);
        }
        if (source["detailRatio"] !== undefined) {
            _this.detailRatio = new fhirModels.Ratio(source.detailRatio);
        }
        if (source["dueDate"] !== undefined) {
            _this.dueDate = source.dueDate;
        }
        if (source["_dueDate"] !== undefined) {
            _this._dueDate = new fhirModels.Element(source._dueDate);
        }
        if (source["dueDuration"] !== undefined) {
            _this.dueDuration = new fhirModels.Duration(source.dueDuration);
        }
        if (source["measure"] !== undefined) {
            _this.measure = new fhirModels.CodeableConcept(source.measure);
        }
        return _this;
    }
    return GoalTarget;
}(fhirModels.BackboneElement));
export { GoalTarget };
/**
 * Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
 */
var Goal = /** @class */ (function (_super) {
    __extends(Goal, _super);
    /**
     * Default constructor for Goal from an object that MAY NOT contain all required elements.
     */
    function Goal(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "Goal";
        if ((source['resourceType'] !== "Goal") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Goal';
        }
        if (source["achievementStatus"] !== undefined) {
            _this.achievementStatus = new fhirModels.CodeableConcept(source.achievementStatus);
        }
        if (source["addresses"] !== undefined) {
            _this.addresses = source.addresses.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["category"] !== undefined) {
            _this.category = source.category.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        {
            _this.description = new fhirModels.CodeableConcept(source.description);
        }
        if (source["expressedBy"] !== undefined) {
            _this.expressedBy = new fhirModels.Reference(source.expressedBy);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        {
            _this.lifecycleStatus = source.lifecycleStatus;
        }
        if (source["_lifecycleStatus"] !== undefined) {
            _this._lifecycleStatus = new fhirModels.Element(source._lifecycleStatus);
        }
        if (source["note"] !== undefined) {
            _this.note = source.note.map(function (x) { return new fhirModels.Annotation(x); });
        }
        if (source["outcomeCode"] !== undefined) {
            _this.outcomeCode = source.outcomeCode.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["outcomeReference"] !== undefined) {
            _this.outcomeReference = source.outcomeReference.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["priority"] !== undefined) {
            _this.priority = new fhirModels.CodeableConcept(source.priority);
        }
        if (source["startDate"] !== undefined) {
            _this.startDate = source.startDate;
        }
        if (source["_startDate"] !== undefined) {
            _this._startDate = new fhirModels.Element(source._startDate);
        }
        if (source["startCodeableConcept"] !== undefined) {
            _this.startCodeableConcept = new fhirModels.CodeableConcept(source.startCodeableConcept);
        }
        if (source["statusDate"] !== undefined) {
            _this.statusDate = source.statusDate;
        }
        if (source["_statusDate"] !== undefined) {
            _this._statusDate = new fhirModels.Element(source._statusDate);
        }
        if (source["statusReason"] !== undefined) {
            _this.statusReason = source.statusReason;
        }
        if (source["_statusReason"] !== undefined) {
            _this._statusReason = new fhirModels.Element(source._statusReason);
        }
        {
            _this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["target"] !== undefined) {
            _this.target = source.target.map(function (x) { return new fhirModels.GoalTarget(x); });
        }
        return _this;
    }
    return Goal;
}(fhirModels.DomainResource));
export { Goal };
/**
 * Code Values for the Goal.lifecycleStatus field
 */
export var GoalLifecycleStatusEnum;
(function (GoalLifecycleStatusEnum) {
    GoalLifecycleStatusEnum["PROPOSED"] = "proposed";
    GoalLifecycleStatusEnum["PLANNED"] = "planned";
    GoalLifecycleStatusEnum["ACCEPTED"] = "accepted";
    GoalLifecycleStatusEnum["ACTIVE"] = "active";
    GoalLifecycleStatusEnum["ON_HOLD"] = "on-hold";
    GoalLifecycleStatusEnum["COMPLETED"] = "completed";
    GoalLifecycleStatusEnum["CANCELLED"] = "cancelled";
    GoalLifecycleStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    GoalLifecycleStatusEnum["REJECTED"] = "rejected";
})(GoalLifecycleStatusEnum || (GoalLifecycleStatusEnum = {}));
