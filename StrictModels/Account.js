var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * Typically. this may be some form of insurance, internal charges, or self-pay.
 * Local or jurisdictional business rules may determine which coverage covers which types of billable items charged to the account, and in which order.
 * Where the order is important, a local/jurisdictional extension may be defined to specify the order for the type of charge.
 */
var AccountCoverage = /** @class */ (function (_super) {
    __extends(AccountCoverage, _super);
    /**
     * Default constructor for AccountCoverage from an object that MAY NOT contain all required elements.
     */
    function AccountCoverage(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.coverage = new fhirModels.Reference(source.coverage);
        }
        if (source["priority"] !== undefined) {
            _this.priority = source.priority;
        }
        if (source["_priority"] !== undefined) {
            _this._priority = new fhirModels.Element(source._priority);
        }
        return _this;
    }
    return AccountCoverage;
}(fhirModels.BackboneElement));
export { AccountCoverage };
/**
 * The parties responsible for balancing the account if other payment options fall short.
 */
var AccountGuarantor = /** @class */ (function (_super) {
    __extends(AccountGuarantor, _super);
    /**
     * Default constructor for AccountGuarantor from an object that MAY NOT contain all required elements.
     */
    function AccountGuarantor(source) {
        var _this = _super.call(this, source) || this;
        if (source["onHold"] !== undefined) {
            _this.onHold = source.onHold;
        }
        if (source["_onHold"] !== undefined) {
            _this._onHold = new fhirModels.Element(source._onHold);
        }
        {
            _this.party = new fhirModels.Reference(source.party);
        }
        if (source["period"] !== undefined) {
            _this.period = new fhirModels.Period(source.period);
        }
        return _this;
    }
    return AccountGuarantor;
}(fhirModels.BackboneElement));
export { AccountGuarantor };
/**
 * A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.
 */
var Account = /** @class */ (function (_super) {
    __extends(Account, _super);
    /**
     * Default constructor for Account from an object that MAY NOT contain all required elements.
     */
    function Account(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "Account";
        if ((source['resourceType'] !== "Account") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Account';
        }
        if (source["coverage"] !== undefined) {
            _this.coverage = source.coverage.map(function (x) { return new fhirModels.AccountCoverage(x); });
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["guarantor"] !== undefined) {
            _this.guarantor = source.guarantor.map(function (x) { return new fhirModels.AccountGuarantor(x); });
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["name"] !== undefined) {
            _this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            _this._name = new fhirModels.Element(source._name);
        }
        if (source["owner"] !== undefined) {
            _this.owner = new fhirModels.Reference(source.owner);
        }
        if (source["partOf"] !== undefined) {
            _this.partOf = new fhirModels.Reference(source.partOf);
        }
        if (source["servicePeriod"] !== undefined) {
            _this.servicePeriod = new fhirModels.Period(source.servicePeriod);
        }
        {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["subject"] !== undefined) {
            _this.subject = source.subject.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    return Account;
}(fhirModels.DomainResource));
export { Account };
/**
 * Code Values for the Account.status field
 */
export var AccountStatusEnum;
(function (AccountStatusEnum) {
    AccountStatusEnum["ACTIVE"] = "active";
    AccountStatusEnum["INACTIVE"] = "inactive";
    AccountStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    AccountStatusEnum["ON_HOLD"] = "on-hold";
    AccountStatusEnum["UNKNOWN"] = "unknown";
})(AccountStatusEnum || (AccountStatusEnum = {}));
