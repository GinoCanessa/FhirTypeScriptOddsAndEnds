"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MedicinalProduct = exports.MedicinalProductSpecialDesignation = exports.MedicinalProductManufacturingBusinessOperation = exports.MedicinalProductName = exports.MedicinalProductNameCountryLanguage = exports.MedicinalProductNameNamePart = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Coding words or phrases of the name.
 */
class MedicinalProductNameNamePart extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicinalProductNameNamePart from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.part = source.part;
        }
        if (source["_part"] !== undefined) {
            this._part = new fhirModels.Element(source._part);
        }
        {
            this.type = new fhirModels.Coding(source.type);
        }
    }
}
exports.MedicinalProductNameNamePart = MedicinalProductNameNamePart;
/**
 * Country where the name applies.
 */
class MedicinalProductNameCountryLanguage extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicinalProductNameCountryLanguage from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.country = new fhirModels.CodeableConcept(source.country);
        }
        if (source["jurisdiction"] !== undefined) {
            this.jurisdiction = new fhirModels.CodeableConcept(source.jurisdiction);
        }
        {
            this.language = new fhirModels.CodeableConcept(source.language);
        }
    }
}
exports.MedicinalProductNameCountryLanguage = MedicinalProductNameCountryLanguage;
/**
 * The product's name, including full name and possibly coded parts.
 */
class MedicinalProductName extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicinalProductName from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["countryLanguage"] !== undefined) {
            this.countryLanguage = source.countryLanguage.map((x) => new fhirModels.MedicinalProductNameCountryLanguage(x));
        }
        if (source["namePart"] !== undefined) {
            this.namePart = source.namePart.map((x) => new fhirModels.MedicinalProductNameNamePart(x));
        }
        {
            this.productName = source.productName;
        }
        if (source["_productName"] !== undefined) {
            this._productName = new fhirModels.Element(source._productName);
        }
    }
}
exports.MedicinalProductName = MedicinalProductName;
/**
 * An operation applied to the product, for manufacturing or adminsitrative purpose.
 */
class MedicinalProductManufacturingBusinessOperation extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicinalProductManufacturingBusinessOperation from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["authorisationReferenceNumber"] !== undefined) {
            this.authorisationReferenceNumber = new fhirModels.Identifier(source.authorisationReferenceNumber);
        }
        if (source["confidentialityIndicator"] !== undefined) {
            this.confidentialityIndicator = new fhirModels.CodeableConcept(source.confidentialityIndicator);
        }
        if (source["effectiveDate"] !== undefined) {
            this.effectiveDate = source.effectiveDate;
        }
        if (source["_effectiveDate"] !== undefined) {
            this._effectiveDate = new fhirModels.Element(source._effectiveDate);
        }
        if (source["manufacturer"] !== undefined) {
            this.manufacturer = source.manufacturer.map((x) => new fhirModels.Reference(x));
        }
        if (source["operationType"] !== undefined) {
            this.operationType = new fhirModels.CodeableConcept(source.operationType);
        }
        if (source["regulator"] !== undefined) {
            this.regulator = new fhirModels.Reference(source.regulator);
        }
    }
}
exports.MedicinalProductManufacturingBusinessOperation = MedicinalProductManufacturingBusinessOperation;
/**
 * Indicates if the medicinal product has an orphan designation for the treatment of a rare disease.
 */
class MedicinalProductSpecialDesignation extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicinalProductSpecialDesignation from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["indicationCodeableConcept"] !== undefined) {
            this.indicationCodeableConcept = new fhirModels.CodeableConcept(source.indicationCodeableConcept);
        }
        if (source["indicationReference"] !== undefined) {
            this.indicationReference = new fhirModels.Reference(source.indicationReference);
        }
        if (source["intendedUse"] !== undefined) {
            this.intendedUse = new fhirModels.CodeableConcept(source.intendedUse);
        }
        if (source["species"] !== undefined) {
            this.species = new fhirModels.CodeableConcept(source.species);
        }
        if (source["status"] !== undefined) {
            this.status = new fhirModels.CodeableConcept(source.status);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.MedicinalProductSpecialDesignation = MedicinalProductSpecialDesignation;
/**
 * Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).
 */
class MedicinalProduct extends fhirModels.DomainResource {
    /**
     * Default constructor for MedicinalProduct from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "MedicinalProduct";
        if ((source['resourceType'] !== "MedicinalProduct") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a MedicinalProduct';
        }
        if (source["additionalMonitoringIndicator"] !== undefined) {
            this.additionalMonitoringIndicator = new fhirModels.CodeableConcept(source.additionalMonitoringIndicator);
        }
        if (source["attachedDocument"] !== undefined) {
            this.attachedDocument = source.attachedDocument.map((x) => new fhirModels.Reference(x));
        }
        if (source["clinicalTrial"] !== undefined) {
            this.clinicalTrial = source.clinicalTrial.map((x) => new fhirModels.Reference(x));
        }
        if (source["combinedPharmaceuticalDoseForm"] !== undefined) {
            this.combinedPharmaceuticalDoseForm = new fhirModels.CodeableConcept(source.combinedPharmaceuticalDoseForm);
        }
        if (source["contact"] !== undefined) {
            this.contact = source.contact.map((x) => new fhirModels.Reference(x));
        }
        if (source["crossReference"] !== undefined) {
            this.crossReference = source.crossReference.map((x) => new fhirModels.Identifier(x));
        }
        if (source["domain"] !== undefined) {
            this.domain = new fhirModels.Coding(source.domain);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["legalStatusOfSupply"] !== undefined) {
            this.legalStatusOfSupply = new fhirModels.CodeableConcept(source.legalStatusOfSupply);
        }
        if (source["manufacturingBusinessOperation"] !== undefined) {
            this.manufacturingBusinessOperation = source.manufacturingBusinessOperation.map((x) => new fhirModels.MedicinalProductManufacturingBusinessOperation(x));
        }
        if (source["marketingStatus"] !== undefined) {
            this.marketingStatus = source.marketingStatus.map((x) => new fhirModels.MarketingStatus(x));
        }
        if (source["masterFile"] !== undefined) {
            this.masterFile = source.masterFile.map((x) => new fhirModels.Reference(x));
        }
        {
            this.name = source.name.map((x) => new fhirModels.MedicinalProductName(x));
        }
        if (source["packagedMedicinalProduct"] !== undefined) {
            this.packagedMedicinalProduct = source.packagedMedicinalProduct.map((x) => new fhirModels.Reference(x));
        }
        if (source["paediatricUseIndicator"] !== undefined) {
            this.paediatricUseIndicator = new fhirModels.CodeableConcept(source.paediatricUseIndicator);
        }
        if (source["pharmaceuticalProduct"] !== undefined) {
            this.pharmaceuticalProduct = source.pharmaceuticalProduct.map((x) => new fhirModels.Reference(x));
        }
        if (source["productClassification"] !== undefined) {
            this.productClassification = source.productClassification.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["specialDesignation"] !== undefined) {
            this.specialDesignation = source.specialDesignation.map((x) => new fhirModels.MedicinalProductSpecialDesignation(x));
        }
        if (source["specialMeasures"] !== undefined) {
            this.specialMeasures = source.specialMeasures.map((x) => (x));
        }
        if (source["_specialMeasures"] !== undefined) {
            this._specialMeasures = source._specialMeasures.map((x) => new fhirModels.Element(x));
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.MedicinalProduct = MedicinalProduct;
//# sourceMappingURL=MedicinalProduct.js.map