var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * Coding words or phrases of the name.
 */
var MedicinalProductNameNamePart = /** @class */ (function (_super) {
    __extends(MedicinalProductNameNamePart, _super);
    /**
     * Default constructor for MedicinalProductNameNamePart from an object that MAY NOT contain all required elements.
     */
    function MedicinalProductNameNamePart(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.part = source.part;
        }
        if (source["_part"] !== undefined) {
            _this._part = new fhirModels.Element(source._part);
        }
        {
            _this.type = new fhirModels.Coding(source.type);
        }
        return _this;
    }
    return MedicinalProductNameNamePart;
}(fhirModels.BackboneElement));
export { MedicinalProductNameNamePart };
/**
 * Country where the name applies.
 */
var MedicinalProductNameCountryLanguage = /** @class */ (function (_super) {
    __extends(MedicinalProductNameCountryLanguage, _super);
    /**
     * Default constructor for MedicinalProductNameCountryLanguage from an object that MAY NOT contain all required elements.
     */
    function MedicinalProductNameCountryLanguage(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.country = new fhirModels.CodeableConcept(source.country);
        }
        if (source["jurisdiction"] !== undefined) {
            _this.jurisdiction = new fhirModels.CodeableConcept(source.jurisdiction);
        }
        {
            _this.language = new fhirModels.CodeableConcept(source.language);
        }
        return _this;
    }
    return MedicinalProductNameCountryLanguage;
}(fhirModels.BackboneElement));
export { MedicinalProductNameCountryLanguage };
/**
 * The product's name, including full name and possibly coded parts.
 */
var MedicinalProductName = /** @class */ (function (_super) {
    __extends(MedicinalProductName, _super);
    /**
     * Default constructor for MedicinalProductName from an object that MAY NOT contain all required elements.
     */
    function MedicinalProductName(source) {
        var _this = _super.call(this, source) || this;
        if (source["countryLanguage"] !== undefined) {
            _this.countryLanguage = source.countryLanguage.map(function (x) { return new fhirModels.MedicinalProductNameCountryLanguage(x); });
        }
        if (source["namePart"] !== undefined) {
            _this.namePart = source.namePart.map(function (x) { return new fhirModels.MedicinalProductNameNamePart(x); });
        }
        {
            _this.productName = source.productName;
        }
        if (source["_productName"] !== undefined) {
            _this._productName = new fhirModels.Element(source._productName);
        }
        return _this;
    }
    return MedicinalProductName;
}(fhirModels.BackboneElement));
export { MedicinalProductName };
/**
 * An operation applied to the product, for manufacturing or adminsitrative purpose.
 */
var MedicinalProductManufacturingBusinessOperation = /** @class */ (function (_super) {
    __extends(MedicinalProductManufacturingBusinessOperation, _super);
    /**
     * Default constructor for MedicinalProductManufacturingBusinessOperation from an object that MAY NOT contain all required elements.
     */
    function MedicinalProductManufacturingBusinessOperation(source) {
        var _this = _super.call(this, source) || this;
        if (source["authorisationReferenceNumber"] !== undefined) {
            _this.authorisationReferenceNumber = new fhirModels.Identifier(source.authorisationReferenceNumber);
        }
        if (source["confidentialityIndicator"] !== undefined) {
            _this.confidentialityIndicator = new fhirModels.CodeableConcept(source.confidentialityIndicator);
        }
        if (source["effectiveDate"] !== undefined) {
            _this.effectiveDate = source.effectiveDate;
        }
        if (source["_effectiveDate"] !== undefined) {
            _this._effectiveDate = new fhirModels.Element(source._effectiveDate);
        }
        if (source["manufacturer"] !== undefined) {
            _this.manufacturer = source.manufacturer.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["operationType"] !== undefined) {
            _this.operationType = new fhirModels.CodeableConcept(source.operationType);
        }
        if (source["regulator"] !== undefined) {
            _this.regulator = new fhirModels.Reference(source.regulator);
        }
        return _this;
    }
    return MedicinalProductManufacturingBusinessOperation;
}(fhirModels.BackboneElement));
export { MedicinalProductManufacturingBusinessOperation };
/**
 * Indicates if the medicinal product has an orphan designation for the treatment of a rare disease.
 */
var MedicinalProductSpecialDesignation = /** @class */ (function (_super) {
    __extends(MedicinalProductSpecialDesignation, _super);
    /**
     * Default constructor for MedicinalProductSpecialDesignation from an object that MAY NOT contain all required elements.
     */
    function MedicinalProductSpecialDesignation(source) {
        var _this = _super.call(this, source) || this;
        if (source["date"] !== undefined) {
            _this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            _this._date = new fhirModels.Element(source._date);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["indicationCodeableConcept"] !== undefined) {
            _this.indicationCodeableConcept = new fhirModels.CodeableConcept(source.indicationCodeableConcept);
        }
        if (source["indicationReference"] !== undefined) {
            _this.indicationReference = new fhirModels.Reference(source.indicationReference);
        }
        if (source["intendedUse"] !== undefined) {
            _this.intendedUse = new fhirModels.CodeableConcept(source.intendedUse);
        }
        if (source["species"] !== undefined) {
            _this.species = new fhirModels.CodeableConcept(source.species);
        }
        if (source["status"] !== undefined) {
            _this.status = new fhirModels.CodeableConcept(source.status);
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    return MedicinalProductSpecialDesignation;
}(fhirModels.BackboneElement));
export { MedicinalProductSpecialDesignation };
/**
 * Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).
 */
var MedicinalProduct = /** @class */ (function (_super) {
    __extends(MedicinalProduct, _super);
    /**
     * Default constructor for MedicinalProduct from an object that MAY NOT contain all required elements.
     */
    function MedicinalProduct(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "MedicinalProduct";
        if ((source['resourceType'] !== "MedicinalProduct") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a MedicinalProduct';
        }
        if (source["additionalMonitoringIndicator"] !== undefined) {
            _this.additionalMonitoringIndicator = new fhirModels.CodeableConcept(source.additionalMonitoringIndicator);
        }
        if (source["attachedDocument"] !== undefined) {
            _this.attachedDocument = source.attachedDocument.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["clinicalTrial"] !== undefined) {
            _this.clinicalTrial = source.clinicalTrial.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["combinedPharmaceuticalDoseForm"] !== undefined) {
            _this.combinedPharmaceuticalDoseForm = new fhirModels.CodeableConcept(source.combinedPharmaceuticalDoseForm);
        }
        if (source["contact"] !== undefined) {
            _this.contact = source.contact.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["crossReference"] !== undefined) {
            _this.crossReference = source.crossReference.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["domain"] !== undefined) {
            _this.domain = new fhirModels.Coding(source.domain);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["legalStatusOfSupply"] !== undefined) {
            _this.legalStatusOfSupply = new fhirModels.CodeableConcept(source.legalStatusOfSupply);
        }
        if (source["manufacturingBusinessOperation"] !== undefined) {
            _this.manufacturingBusinessOperation = source.manufacturingBusinessOperation.map(function (x) { return new fhirModels.MedicinalProductManufacturingBusinessOperation(x); });
        }
        if (source["marketingStatus"] !== undefined) {
            _this.marketingStatus = source.marketingStatus.map(function (x) { return new fhirModels.MarketingStatus(x); });
        }
        if (source["masterFile"] !== undefined) {
            _this.masterFile = source.masterFile.map(function (x) { return new fhirModels.Reference(x); });
        }
        {
            _this.name = source.name.map(function (x) { return new fhirModels.MedicinalProductName(x); });
        }
        if (source["packagedMedicinalProduct"] !== undefined) {
            _this.packagedMedicinalProduct = source.packagedMedicinalProduct.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["paediatricUseIndicator"] !== undefined) {
            _this.paediatricUseIndicator = new fhirModels.CodeableConcept(source.paediatricUseIndicator);
        }
        if (source["pharmaceuticalProduct"] !== undefined) {
            _this.pharmaceuticalProduct = source.pharmaceuticalProduct.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["productClassification"] !== undefined) {
            _this.productClassification = source.productClassification.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["specialDesignation"] !== undefined) {
            _this.specialDesignation = source.specialDesignation.map(function (x) { return new fhirModels.MedicinalProductSpecialDesignation(x); });
        }
        if (source["specialMeasures"] !== undefined) {
            _this.specialMeasures = source.specialMeasures.map(function (x) { return (x); });
        }
        if (source["_specialMeasures"] !== undefined) {
            _this._specialMeasures = source._specialMeasures.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    return MedicinalProduct;
}(fhirModels.DomainResource));
export { MedicinalProduct };
