var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * A simple summary of a planned activity suitable for a general care plan system (e.g. form driven) that doesn't know about specific resources such as procedure etc.
 */
var CarePlanActivityDetail = /** @class */ (function (_super) {
    __extends(CarePlanActivityDetail, _super);
    /**
     * Default constructor for CarePlanActivityDetail from an object that MAY NOT contain all required elements.
     */
    function CarePlanActivityDetail(source) {
        var _this = _super.call(this, source) || this;
        if (source["code"] !== undefined) {
            _this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["dailyAmount"] !== undefined) {
            _this.dailyAmount = new fhirModels.Quantity(source.dailyAmount);
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["doNotPerform"] !== undefined) {
            _this.doNotPerform = source.doNotPerform;
        }
        if (source["_doNotPerform"] !== undefined) {
            _this._doNotPerform = new fhirModels.Element(source._doNotPerform);
        }
        if (source["goal"] !== undefined) {
            _this.goal = source.goal.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["instantiatesCanonical"] !== undefined) {
            _this.instantiatesCanonical = source.instantiatesCanonical.map(function (x) { return (x); });
        }
        if (source["_instantiatesCanonical"] !== undefined) {
            _this._instantiatesCanonical = source._instantiatesCanonical.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["instantiatesUri"] !== undefined) {
            _this.instantiatesUri = source.instantiatesUri.map(function (x) { return (x); });
        }
        if (source["_instantiatesUri"] !== undefined) {
            _this._instantiatesUri = source._instantiatesUri.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["kind"] !== undefined) {
            _this.kind = source.kind;
        }
        if (source["_kind"] !== undefined) {
            _this._kind = new fhirModels.Element(source._kind);
        }
        if (source["location"] !== undefined) {
            _this.location = new fhirModels.Reference(source.location);
        }
        if (source["performer"] !== undefined) {
            _this.performer = source.performer.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["productCodeableConcept"] !== undefined) {
            _this.productCodeableConcept = new fhirModels.CodeableConcept(source.productCodeableConcept);
        }
        if (source["productReference"] !== undefined) {
            _this.productReference = new fhirModels.Reference(source.productReference);
        }
        if (source["quantity"] !== undefined) {
            _this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["reasonCode"] !== undefined) {
            _this.reasonCode = source.reasonCode.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["reasonReference"] !== undefined) {
            _this.reasonReference = source.reasonReference.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["scheduledTiming"] !== undefined) {
            _this.scheduledTiming = new fhirModels.Timing(source.scheduledTiming);
        }
        if (source["scheduledPeriod"] !== undefined) {
            _this.scheduledPeriod = new fhirModels.Period(source.scheduledPeriod);
        }
        if (source["scheduledString"] !== undefined) {
            _this.scheduledString = source.scheduledString;
        }
        if (source["_scheduledString"] !== undefined) {
            _this._scheduledString = new fhirModels.Element(source._scheduledString);
        }
        {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["statusReason"] !== undefined) {
            _this.statusReason = new fhirModels.CodeableConcept(source.statusReason);
        }
        return _this;
    }
    return CarePlanActivityDetail;
}(fhirModels.BackboneElement));
export { CarePlanActivityDetail };
/**
 * Code Values for the CarePlan.activity.detail.kind field
 */
export var CarePlanActivityDetailKindEnum;
(function (CarePlanActivityDetailKindEnum) {
    CarePlanActivityDetailKindEnum["APPOINTMENT"] = "Appointment";
    CarePlanActivityDetailKindEnum["COMMUNICATIONREQUEST"] = "CommunicationRequest";
    CarePlanActivityDetailKindEnum["DEVICEREQUEST"] = "DeviceRequest";
    CarePlanActivityDetailKindEnum["MEDICATIONREQUEST"] = "MedicationRequest";
    CarePlanActivityDetailKindEnum["NUTRITIONORDER"] = "NutritionOrder";
    CarePlanActivityDetailKindEnum["TASK"] = "Task";
    CarePlanActivityDetailKindEnum["SERVICEREQUEST"] = "ServiceRequest";
    CarePlanActivityDetailKindEnum["VISIONPRESCRIPTION"] = "VisionPrescription";
})(CarePlanActivityDetailKindEnum || (CarePlanActivityDetailKindEnum = {}));
/**
 * Code Values for the CarePlan.activity.detail.status field
 */
export var CarePlanActivityDetailStatusEnum;
(function (CarePlanActivityDetailStatusEnum) {
    CarePlanActivityDetailStatusEnum["NOT_STARTED"] = "not-started";
    CarePlanActivityDetailStatusEnum["SCHEDULED"] = "scheduled";
    CarePlanActivityDetailStatusEnum["IN_PROGRESS"] = "in-progress";
    CarePlanActivityDetailStatusEnum["ON_HOLD"] = "on-hold";
    CarePlanActivityDetailStatusEnum["COMPLETED"] = "completed";
    CarePlanActivityDetailStatusEnum["CANCELLED"] = "cancelled";
    CarePlanActivityDetailStatusEnum["STOPPED"] = "stopped";
    CarePlanActivityDetailStatusEnum["UNKNOWN"] = "unknown";
    CarePlanActivityDetailStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(CarePlanActivityDetailStatusEnum || (CarePlanActivityDetailStatusEnum = {}));
/**
 * Identifies a planned action to occur as part of the plan.  For example, a medication to be used, lab tests to perform, self-monitoring, education, etc.
 */
var CarePlanActivity = /** @class */ (function (_super) {
    __extends(CarePlanActivity, _super);
    /**
     * Default constructor for CarePlanActivity from an object that MAY NOT contain all required elements.
     */
    function CarePlanActivity(source) {
        var _this = _super.call(this, source) || this;
        if (source["detail"] !== undefined) {
            _this.detail = new fhirModels.CarePlanActivityDetail(source.detail);
        }
        if (source["outcomeCodeableConcept"] !== undefined) {
            _this.outcomeCodeableConcept = source.outcomeCodeableConcept.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["outcomeReference"] !== undefined) {
            _this.outcomeReference = source.outcomeReference.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["progress"] !== undefined) {
            _this.progress = source.progress.map(function (x) { return new fhirModels.Annotation(x); });
        }
        if (source["reference"] !== undefined) {
            _this.reference = new fhirModels.Reference(source.reference);
        }
        return _this;
    }
    return CarePlanActivity;
}(fhirModels.BackboneElement));
export { CarePlanActivity };
/**
 * Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
 */
var CarePlan = /** @class */ (function (_super) {
    __extends(CarePlan, _super);
    /**
     * Default constructor for CarePlan from an object that MAY NOT contain all required elements.
     */
    function CarePlan(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "CarePlan";
        if ((source['resourceType'] !== "CarePlan") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a CarePlan';
        }
        if (source["activity"] !== undefined) {
            _this.activity = source.activity.map(function (x) { return new fhirModels.CarePlanActivity(x); });
        }
        if (source["addresses"] !== undefined) {
            _this.addresses = source.addresses.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["author"] !== undefined) {
            _this.author = new fhirModels.Reference(source.author);
        }
        if (source["basedOn"] !== undefined) {
            _this.basedOn = source.basedOn.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["careTeam"] !== undefined) {
            _this.careTeam = source.careTeam.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["category"] !== undefined) {
            _this.category = source.category.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["contributor"] !== undefined) {
            _this.contributor = source.contributor.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["created"] !== undefined) {
            _this.created = source.created;
        }
        if (source["_created"] !== undefined) {
            _this._created = new fhirModels.Element(source._created);
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["encounter"] !== undefined) {
            _this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["goal"] !== undefined) {
            _this.goal = source.goal.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["instantiatesCanonical"] !== undefined) {
            _this.instantiatesCanonical = source.instantiatesCanonical.map(function (x) { return (x); });
        }
        if (source["_instantiatesCanonical"] !== undefined) {
            _this._instantiatesCanonical = source._instantiatesCanonical.map(function (x) { return new fhirModels.Element(x); });
        }
        if (source["instantiatesUri"] !== undefined) {
            _this.instantiatesUri = source.instantiatesUri.map(function (x) { return (x); });
        }
        if (source["_instantiatesUri"] !== undefined) {
            _this._instantiatesUri = source._instantiatesUri.map(function (x) { return new fhirModels.Element(x); });
        }
        {
            _this.intent = source.intent;
        }
        if (source["_intent"] !== undefined) {
            _this._intent = new fhirModels.Element(source._intent);
        }
        if (source["note"] !== undefined) {
            _this.note = source.note.map(function (x) { return new fhirModels.Annotation(x); });
        }
        if (source["partOf"] !== undefined) {
            _this.partOf = source.partOf.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["period"] !== undefined) {
            _this.period = new fhirModels.Period(source.period);
        }
        if (source["replaces"] !== undefined) {
            _this.replaces = source.replaces.map(function (x) { return new fhirModels.Reference(x); });
        }
        {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        {
            _this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["supportingInfo"] !== undefined) {
            _this.supportingInfo = source.supportingInfo.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["title"] !== undefined) {
            _this.title = source.title;
        }
        if (source["_title"] !== undefined) {
            _this._title = new fhirModels.Element(source._title);
        }
        return _this;
    }
    return CarePlan;
}(fhirModels.DomainResource));
export { CarePlan };
/**
 * Code Values for the CarePlan.intent field
 */
export var CarePlanIntentEnum;
(function (CarePlanIntentEnum) {
    CarePlanIntentEnum["PROPOSAL"] = "proposal";
    CarePlanIntentEnum["PLAN"] = "plan";
    CarePlanIntentEnum["ORDER"] = "order";
    CarePlanIntentEnum["OPTION"] = "option";
})(CarePlanIntentEnum || (CarePlanIntentEnum = {}));
/**
 * Code Values for the CarePlan.status field
 */
export var CarePlanStatusEnum;
(function (CarePlanStatusEnum) {
    CarePlanStatusEnum["DRAFT"] = "draft";
    CarePlanStatusEnum["ACTIVE"] = "active";
    CarePlanStatusEnum["ON_HOLD"] = "on-hold";
    CarePlanStatusEnum["REVOKED"] = "revoked";
    CarePlanStatusEnum["COMPLETED"] = "completed";
    CarePlanStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    CarePlanStatusEnum["UNKNOWN"] = "unknown";
})(CarePlanStatusEnum || (CarePlanStatusEnum = {}));
