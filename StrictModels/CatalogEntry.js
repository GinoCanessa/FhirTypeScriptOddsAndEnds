var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * Used for example, to point to a substance, or to a device used to administer a medication.
 */
var CatalogEntryRelatedEntry = /** @class */ (function (_super) {
    __extends(CatalogEntryRelatedEntry, _super);
    /**
     * Default constructor for CatalogEntryRelatedEntry from an object that MAY NOT contain all required elements.
     */
    function CatalogEntryRelatedEntry(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.item = new fhirModels.Reference(source.item);
        }
        {
            _this.relationtype = source.relationtype;
        }
        if (source["_relationtype"] !== undefined) {
            _this._relationtype = new fhirModels.Element(source._relationtype);
        }
        return _this;
    }
    return CatalogEntryRelatedEntry;
}(fhirModels.BackboneElement));
export { CatalogEntryRelatedEntry };
/**
 * Code Values for the CatalogEntry.relatedEntry.relationtype field
 */
export var CatalogEntryRelatedEntryRelationtypeEnum;
(function (CatalogEntryRelatedEntryRelationtypeEnum) {
    CatalogEntryRelatedEntryRelationtypeEnum["TRIGGERS"] = "triggers";
    CatalogEntryRelatedEntryRelationtypeEnum["IS_REPLACED_BY"] = "is-replaced-by";
})(CatalogEntryRelatedEntryRelationtypeEnum || (CatalogEntryRelatedEntryRelationtypeEnum = {}));
/**
 * Catalog entries are wrappers that contextualize items included in a catalog.
 */
var CatalogEntry = /** @class */ (function (_super) {
    __extends(CatalogEntry, _super);
    /**
     * Default constructor for CatalogEntry from an object that MAY NOT contain all required elements.
     */
    function CatalogEntry(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "CatalogEntry";
        if ((source['resourceType'] !== "CatalogEntry") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a CatalogEntry';
        }
        if (source["additionalCharacteristic"] !== undefined) {
            _this.additionalCharacteristic = source.additionalCharacteristic.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["additionalClassification"] !== undefined) {
            _this.additionalClassification = source.additionalClassification.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["additionalIdentifier"] !== undefined) {
            _this.additionalIdentifier = source.additionalIdentifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["classification"] !== undefined) {
            _this.classification = source.classification.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["lastUpdated"] !== undefined) {
            _this.lastUpdated = source.lastUpdated;
        }
        if (source["_lastUpdated"] !== undefined) {
            _this._lastUpdated = new fhirModels.Element(source._lastUpdated);
        }
        {
            _this.orderable = source.orderable;
        }
        if (source["_orderable"] !== undefined) {
            _this._orderable = new fhirModels.Element(source._orderable);
        }
        {
            _this.referencedItem = new fhirModels.Reference(source.referencedItem);
        }
        if (source["relatedEntry"] !== undefined) {
            _this.relatedEntry = source.relatedEntry.map(function (x) { return new fhirModels.CatalogEntryRelatedEntry(x); });
        }
        if (source["status"] !== undefined) {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["validityPeriod"] !== undefined) {
            _this.validityPeriod = new fhirModels.Period(source.validityPeriod);
        }
        if (source["validTo"] !== undefined) {
            _this.validTo = source.validTo;
        }
        if (source["_validTo"] !== undefined) {
            _this._validTo = new fhirModels.Element(source._validTo);
        }
        return _this;
    }
    return CatalogEntry;
}(fhirModels.DomainResource));
export { CatalogEntry };
/**
 * Code Values for the CatalogEntry.status field
 */
export var CatalogEntryStatusEnum;
(function (CatalogEntryStatusEnum) {
    CatalogEntryStatusEnum["DRAFT"] = "draft";
    CatalogEntryStatusEnum["ACTIVE"] = "active";
    CatalogEntryStatusEnum["RETIRED"] = "retired";
    CatalogEntryStatusEnum["UNKNOWN"] = "unknown";
})(CatalogEntryStatusEnum || (CatalogEntryStatusEnum = {}));
