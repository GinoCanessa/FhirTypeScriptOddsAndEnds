"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CatalogEntryStatusEnum = exports.CatalogEntry = exports.CatalogEntryRelatedEntryRelationtypeEnum = exports.CatalogEntryRelatedEntry = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Used for example, to point to a substance, or to a device used to administer a medication.
 */
class CatalogEntryRelatedEntry extends fhirModels.BackboneElement {
    /**
     * Default constructor for CatalogEntryRelatedEntry from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.item = new fhirModels.Reference(source.item);
        }
        {
            this.relationtype = source.relationtype;
        }
        if (source["_relationtype"] !== undefined) {
            this._relationtype = new fhirModels.Element(source._relationtype);
        }
    }
}
exports.CatalogEntryRelatedEntry = CatalogEntryRelatedEntry;
/**
 * Code Values for the CatalogEntry.relatedEntry.relationtype field
 */
var CatalogEntryRelatedEntryRelationtypeEnum;
(function (CatalogEntryRelatedEntryRelationtypeEnum) {
    CatalogEntryRelatedEntryRelationtypeEnum["TRIGGERS"] = "triggers";
    CatalogEntryRelatedEntryRelationtypeEnum["IS_REPLACED_BY"] = "is-replaced-by";
})(CatalogEntryRelatedEntryRelationtypeEnum = exports.CatalogEntryRelatedEntryRelationtypeEnum || (exports.CatalogEntryRelatedEntryRelationtypeEnum = {}));
/**
 * Catalog entries are wrappers that contextualize items included in a catalog.
 */
class CatalogEntry extends fhirModels.DomainResource {
    /**
     * Default constructor for CatalogEntry from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "CatalogEntry";
        if ((source['resourceType'] !== "CatalogEntry") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a CatalogEntry';
        }
        if (source["additionalCharacteristic"] !== undefined) {
            this.additionalCharacteristic = source.additionalCharacteristic.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["additionalClassification"] !== undefined) {
            this.additionalClassification = source.additionalClassification.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["additionalIdentifier"] !== undefined) {
            this.additionalIdentifier = source.additionalIdentifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["classification"] !== undefined) {
            this.classification = source.classification.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["lastUpdated"] !== undefined) {
            this.lastUpdated = source.lastUpdated;
        }
        if (source["_lastUpdated"] !== undefined) {
            this._lastUpdated = new fhirModels.Element(source._lastUpdated);
        }
        {
            this.orderable = source.orderable;
        }
        if (source["_orderable"] !== undefined) {
            this._orderable = new fhirModels.Element(source._orderable);
        }
        {
            this.referencedItem = new fhirModels.Reference(source.referencedItem);
        }
        if (source["relatedEntry"] !== undefined) {
            this.relatedEntry = source.relatedEntry.map((x) => new fhirModels.CatalogEntryRelatedEntry(x));
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["validityPeriod"] !== undefined) {
            this.validityPeriod = new fhirModels.Period(source.validityPeriod);
        }
        if (source["validTo"] !== undefined) {
            this.validTo = source.validTo;
        }
        if (source["_validTo"] !== undefined) {
            this._validTo = new fhirModels.Element(source._validTo);
        }
    }
}
exports.CatalogEntry = CatalogEntry;
/**
 * Code Values for the CatalogEntry.status field
 */
var CatalogEntryStatusEnum;
(function (CatalogEntryStatusEnum) {
    CatalogEntryStatusEnum["DRAFT"] = "draft";
    CatalogEntryStatusEnum["ACTIVE"] = "active";
    CatalogEntryStatusEnum["RETIRED"] = "retired";
    CatalogEntryStatusEnum["UNKNOWN"] = "unknown";
})(CatalogEntryStatusEnum = exports.CatalogEntryStatusEnum || (exports.CatalogEntryStatusEnum = {}));
//# sourceMappingURL=CatalogEntry.js.map