"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExplanationOfBenefitUseEnum = exports.ExplanationOfBenefitStatusEnum = exports.ExplanationOfBenefitOutcomeEnum = exports.ExplanationOfBenefit = exports.ExplanationOfBenefitBenefitBalance = exports.ExplanationOfBenefitBenefitBalanceFinancial = exports.ExplanationOfBenefitProcessNoteTypeEnum = exports.ExplanationOfBenefitProcessNote = exports.ExplanationOfBenefitPayment = exports.ExplanationOfBenefitTotal = exports.ExplanationOfBenefitAddItem = exports.ExplanationOfBenefitAddItemDetail = exports.ExplanationOfBenefitAddItemDetailSubDetail = exports.ExplanationOfBenefitItem = exports.ExplanationOfBenefitItemDetail = exports.ExplanationOfBenefitItemDetailSubDetail = exports.ExplanationOfBenefitItemAdjudication = exports.ExplanationOfBenefitAccident = exports.ExplanationOfBenefitInsurance = exports.ExplanationOfBenefitProcedure = exports.ExplanationOfBenefitDiagnosis = exports.ExplanationOfBenefitSupportingInfo = exports.ExplanationOfBenefitCareTeam = exports.ExplanationOfBenefitPayee = exports.ExplanationOfBenefitRelated = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * For example,  for the original treatment and follow-up exams.
 */
class ExplanationOfBenefitRelated extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitRelated from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["claim"] !== undefined) {
            this.claim = new fhirModels.Reference(source.claim);
        }
        if (source["reference"] !== undefined) {
            this.reference = new fhirModels.Identifier(source.reference);
        }
        if (source["relationship"] !== undefined) {
            this.relationship = new fhirModels.CodeableConcept(source.relationship);
        }
    }
}
exports.ExplanationOfBenefitRelated = ExplanationOfBenefitRelated;
/**
 * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and may choose to pay the subscriber instead.
 */
class ExplanationOfBenefitPayee extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitPayee from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["party"] !== undefined) {
            this.party = new fhirModels.Reference(source.party);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.ExplanationOfBenefitPayee = ExplanationOfBenefitPayee;
/**
 * The members of the team who provided the products and services.
 */
class ExplanationOfBenefitCareTeam extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitCareTeam from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.provider = new fhirModels.Reference(source.provider);
        }
        if (source["qualification"] !== undefined) {
            this.qualification = new fhirModels.CodeableConcept(source.qualification);
        }
        if (source["responsible"] !== undefined) {
            this.responsible = source.responsible;
        }
        if (source["_responsible"] !== undefined) {
            this._responsible = new fhirModels.Element(source._responsible);
        }
        if (source["role"] !== undefined) {
            this.role = new fhirModels.CodeableConcept(source.role);
        }
        {
            this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            this._sequence = new fhirModels.Element(source._sequence);
        }
    }
}
exports.ExplanationOfBenefitCareTeam = ExplanationOfBenefitCareTeam;
/**
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
class ExplanationOfBenefitSupportingInfo extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitSupportingInfo from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["reason"] !== undefined) {
            this.reason = new fhirModels.Coding(source.reason);
        }
        {
            this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            this._sequence = new fhirModels.Element(source._sequence);
        }
        if (source["timingDate"] !== undefined) {
            this.timingDate = source.timingDate;
        }
        if (source["_timingDate"] !== undefined) {
            this._timingDate = new fhirModels.Element(source._timingDate);
        }
        if (source["timingPeriod"] !== undefined) {
            this.timingPeriod = new fhirModels.Period(source.timingPeriod);
        }
        if (source["valueBoolean"] !== undefined) {
            this.valueBoolean = source.valueBoolean;
        }
        if (source["_valueBoolean"] !== undefined) {
            this._valueBoolean = new fhirModels.Element(source._valueBoolean);
        }
        if (source["valueString"] !== undefined) {
            this.valueString = source.valueString;
        }
        if (source["_valueString"] !== undefined) {
            this._valueString = new fhirModels.Element(source._valueString);
        }
        if (source["valueQuantity"] !== undefined) {
            this.valueQuantity = new fhirModels.Quantity(source.valueQuantity);
        }
        if (source["valueAttachment"] !== undefined) {
            this.valueAttachment = new fhirModels.Attachment(source.valueAttachment);
        }
        if (source["valueReference"] !== undefined) {
            this.valueReference = new fhirModels.Reference(source.valueReference);
        }
    }
}
exports.ExplanationOfBenefitSupportingInfo = ExplanationOfBenefitSupportingInfo;
/**
 * Information about diagnoses relevant to the claim items.
 */
class ExplanationOfBenefitDiagnosis extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitDiagnosis from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["diagnosisCodeableConcept"] !== undefined) {
            this.diagnosisCodeableConcept = new fhirModels.CodeableConcept(source.diagnosisCodeableConcept);
        }
        if (source["diagnosisReference"] !== undefined) {
            this.diagnosisReference = new fhirModels.Reference(source.diagnosisReference);
        }
        if (source["onAdmission"] !== undefined) {
            this.onAdmission = new fhirModels.CodeableConcept(source.onAdmission);
        }
        if (source["packageCode"] !== undefined) {
            this.packageCode = new fhirModels.CodeableConcept(source.packageCode);
        }
        {
            this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            this._sequence = new fhirModels.Element(source._sequence);
        }
        if (source["type"] !== undefined) {
            this.type = source.type.map((x) => new fhirModels.CodeableConcept(x));
        }
    }
}
exports.ExplanationOfBenefitDiagnosis = ExplanationOfBenefitDiagnosis;
/**
 * Procedures performed on the patient relevant to the billing items with the claim.
 */
class ExplanationOfBenefitProcedure extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitProcedure from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["procedureCodeableConcept"] !== undefined) {
            this.procedureCodeableConcept = new fhirModels.CodeableConcept(source.procedureCodeableConcept);
        }
        if (source["procedureReference"] !== undefined) {
            this.procedureReference = new fhirModels.Reference(source.procedureReference);
        }
        {
            this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            this._sequence = new fhirModels.Element(source._sequence);
        }
        if (source["type"] !== undefined) {
            this.type = source.type.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["udi"] !== undefined) {
            this.udi = source.udi.map((x) => new fhirModels.Reference(x));
        }
    }
}
exports.ExplanationOfBenefitProcedure = ExplanationOfBenefitProcedure;
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
class ExplanationOfBenefitInsurance extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitInsurance from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.coverage = new fhirModels.Reference(source.coverage);
        }
        {
            this.focal = source.focal;
        }
        if (source["_focal"] !== undefined) {
            this._focal = new fhirModels.Element(source._focal);
        }
        if (source["preAuthRef"] !== undefined) {
            this.preAuthRef = source.preAuthRef.map((x) => (x));
        }
        if (source["_preAuthRef"] !== undefined) {
            this._preAuthRef = source._preAuthRef.map((x) => new fhirModels.Element(x));
        }
    }
}
exports.ExplanationOfBenefitInsurance = ExplanationOfBenefitInsurance;
/**
 * Details of a accident which resulted in injuries which required the products and services listed in the claim.
 */
class ExplanationOfBenefitAccident extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitAccident from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["locationAddress"] !== undefined) {
            this.locationAddress = new fhirModels.Address(source.locationAddress);
        }
        if (source["locationReference"] !== undefined) {
            this.locationReference = new fhirModels.Reference(source.locationReference);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.ExplanationOfBenefitAccident = ExplanationOfBenefitAccident;
/**
 * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
 */
class ExplanationOfBenefitItemAdjudication extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitItemAdjudication from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["amount"] !== undefined) {
            this.amount = new fhirModels.Money(source.amount);
        }
        {
            this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["reason"] !== undefined) {
            this.reason = new fhirModels.CodeableConcept(source.reason);
        }
        if (source["value"] !== undefined) {
            this.value = source.value;
        }
        if (source["_value"] !== undefined) {
            this._value = new fhirModels.Element(source._value);
        }
    }
}
exports.ExplanationOfBenefitItemAdjudication = ExplanationOfBenefitItemAdjudication;
/**
 * Third-tier of goods and services.
 */
class ExplanationOfBenefitItemDetailSubDetail extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitItemDetailSubDetail from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["adjudication"] !== undefined) {
            this.adjudication = source.adjudication.map((x) => new fhirModels.ExplanationOfBenefitItemAdjudication(x));
        }
        if (source["category"] !== undefined) {
            this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["factor"] !== undefined) {
            this.factor = source.factor;
        }
        if (source["_factor"] !== undefined) {
            this._factor = new fhirModels.Element(source._factor);
        }
        if (source["modifier"] !== undefined) {
            this.modifier = source.modifier.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["net"] !== undefined) {
            this.net = new fhirModels.Money(source.net);
        }
        if (source["noteNumber"] !== undefined) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source["_noteNumber"] !== undefined) {
            this._noteNumber = source._noteNumber.map((x) => new fhirModels.Element(x));
        }
        {
            this.productOrService = new fhirModels.CodeableConcept(source.productOrService);
        }
        if (source["programCode"] !== undefined) {
            this.programCode = source.programCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["quantity"] !== undefined) {
            this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["revenue"] !== undefined) {
            this.revenue = new fhirModels.CodeableConcept(source.revenue);
        }
        {
            this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            this._sequence = new fhirModels.Element(source._sequence);
        }
        if (source["udi"] !== undefined) {
            this.udi = source.udi.map((x) => new fhirModels.Reference(x));
        }
        if (source["unitPrice"] !== undefined) {
            this.unitPrice = new fhirModels.Money(source.unitPrice);
        }
    }
}
exports.ExplanationOfBenefitItemDetailSubDetail = ExplanationOfBenefitItemDetailSubDetail;
/**
 * Second-tier of goods and services.
 */
class ExplanationOfBenefitItemDetail extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitItemDetail from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["adjudication"] !== undefined) {
            this.adjudication = source.adjudication.map((x) => new fhirModels.ExplanationOfBenefitItemAdjudication(x));
        }
        if (source["category"] !== undefined) {
            this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["factor"] !== undefined) {
            this.factor = source.factor;
        }
        if (source["_factor"] !== undefined) {
            this._factor = new fhirModels.Element(source._factor);
        }
        if (source["modifier"] !== undefined) {
            this.modifier = source.modifier.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["net"] !== undefined) {
            this.net = new fhirModels.Money(source.net);
        }
        if (source["noteNumber"] !== undefined) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source["_noteNumber"] !== undefined) {
            this._noteNumber = source._noteNumber.map((x) => new fhirModels.Element(x));
        }
        {
            this.productOrService = new fhirModels.CodeableConcept(source.productOrService);
        }
        if (source["programCode"] !== undefined) {
            this.programCode = source.programCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["quantity"] !== undefined) {
            this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["revenue"] !== undefined) {
            this.revenue = new fhirModels.CodeableConcept(source.revenue);
        }
        {
            this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            this._sequence = new fhirModels.Element(source._sequence);
        }
        if (source["subDetail"] !== undefined) {
            this.subDetail = source.subDetail.map((x) => new fhirModels.ExplanationOfBenefitItemDetailSubDetail(x));
        }
        if (source["udi"] !== undefined) {
            this.udi = source.udi.map((x) => new fhirModels.Reference(x));
        }
        if (source["unitPrice"] !== undefined) {
            this.unitPrice = new fhirModels.Money(source.unitPrice);
        }
    }
}
exports.ExplanationOfBenefitItemDetail = ExplanationOfBenefitItemDetail;
/**
 * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
 */
class ExplanationOfBenefitItem extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitItem from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["adjudication"] !== undefined) {
            this.adjudication = source.adjudication.map((x) => new fhirModels.ExplanationOfBenefitItemAdjudication(x));
        }
        if (source["bodySite"] !== undefined) {
            this.bodySite = new fhirModels.CodeableConcept(source.bodySite);
        }
        if (source["careTeamSequence"] !== undefined) {
            this.careTeamSequence = source.careTeamSequence.map((x) => (x));
        }
        if (source["_careTeamSequence"] !== undefined) {
            this._careTeamSequence = source._careTeamSequence.map((x) => new fhirModels.Element(x));
        }
        if (source["category"] !== undefined) {
            this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["detail"] !== undefined) {
            this.detail = source.detail.map((x) => new fhirModels.ExplanationOfBenefitItemDetail(x));
        }
        if (source["diagnosisSequence"] !== undefined) {
            this.diagnosisSequence = source.diagnosisSequence.map((x) => (x));
        }
        if (source["_diagnosisSequence"] !== undefined) {
            this._diagnosisSequence = source._diagnosisSequence.map((x) => new fhirModels.Element(x));
        }
        if (source["encounter"] !== undefined) {
            this.encounter = source.encounter.map((x) => new fhirModels.Reference(x));
        }
        if (source["factor"] !== undefined) {
            this.factor = source.factor;
        }
        if (source["_factor"] !== undefined) {
            this._factor = new fhirModels.Element(source._factor);
        }
        if (source["informationSequence"] !== undefined) {
            this.informationSequence = source.informationSequence.map((x) => (x));
        }
        if (source["_informationSequence"] !== undefined) {
            this._informationSequence = source._informationSequence.map((x) => new fhirModels.Element(x));
        }
        if (source["locationCodeableConcept"] !== undefined) {
            this.locationCodeableConcept = new fhirModels.CodeableConcept(source.locationCodeableConcept);
        }
        if (source["locationAddress"] !== undefined) {
            this.locationAddress = new fhirModels.Address(source.locationAddress);
        }
        if (source["locationReference"] !== undefined) {
            this.locationReference = new fhirModels.Reference(source.locationReference);
        }
        if (source["modifier"] !== undefined) {
            this.modifier = source.modifier.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["net"] !== undefined) {
            this.net = new fhirModels.Money(source.net);
        }
        if (source["noteNumber"] !== undefined) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source["_noteNumber"] !== undefined) {
            this._noteNumber = source._noteNumber.map((x) => new fhirModels.Element(x));
        }
        if (source["procedureSequence"] !== undefined) {
            this.procedureSequence = source.procedureSequence.map((x) => (x));
        }
        if (source["_procedureSequence"] !== undefined) {
            this._procedureSequence = source._procedureSequence.map((x) => new fhirModels.Element(x));
        }
        {
            this.productOrService = new fhirModels.CodeableConcept(source.productOrService);
        }
        if (source["programCode"] !== undefined) {
            this.programCode = source.programCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["quantity"] !== undefined) {
            this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["revenue"] !== undefined) {
            this.revenue = new fhirModels.CodeableConcept(source.revenue);
        }
        {
            this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            this._sequence = new fhirModels.Element(source._sequence);
        }
        if (source["servicedDate"] !== undefined) {
            this.servicedDate = source.servicedDate;
        }
        if (source["_servicedDate"] !== undefined) {
            this._servicedDate = new fhirModels.Element(source._servicedDate);
        }
        if (source["servicedPeriod"] !== undefined) {
            this.servicedPeriod = new fhirModels.Period(source.servicedPeriod);
        }
        if (source["subSite"] !== undefined) {
            this.subSite = source.subSite.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["udi"] !== undefined) {
            this.udi = source.udi.map((x) => new fhirModels.Reference(x));
        }
        if (source["unitPrice"] !== undefined) {
            this.unitPrice = new fhirModels.Money(source.unitPrice);
        }
    }
}
exports.ExplanationOfBenefitItem = ExplanationOfBenefitItem;
/**
 * The third-tier service adjudications for payor added services.
 */
class ExplanationOfBenefitAddItemDetailSubDetail extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitAddItemDetailSubDetail from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["adjudication"] !== undefined) {
            this.adjudication = source.adjudication.map((x) => new fhirModels.ExplanationOfBenefitItemAdjudication(x));
        }
        if (source["factor"] !== undefined) {
            this.factor = source.factor;
        }
        if (source["_factor"] !== undefined) {
            this._factor = new fhirModels.Element(source._factor);
        }
        if (source["modifier"] !== undefined) {
            this.modifier = source.modifier.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["net"] !== undefined) {
            this.net = new fhirModels.Money(source.net);
        }
        if (source["noteNumber"] !== undefined) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source["_noteNumber"] !== undefined) {
            this._noteNumber = source._noteNumber.map((x) => new fhirModels.Element(x));
        }
        {
            this.productOrService = new fhirModels.CodeableConcept(source.productOrService);
        }
        if (source["quantity"] !== undefined) {
            this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["unitPrice"] !== undefined) {
            this.unitPrice = new fhirModels.Money(source.unitPrice);
        }
    }
}
exports.ExplanationOfBenefitAddItemDetailSubDetail = ExplanationOfBenefitAddItemDetailSubDetail;
/**
 * The second-tier service adjudications for payor added services.
 */
class ExplanationOfBenefitAddItemDetail extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitAddItemDetail from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["adjudication"] !== undefined) {
            this.adjudication = source.adjudication.map((x) => new fhirModels.ExplanationOfBenefitItemAdjudication(x));
        }
        if (source["factor"] !== undefined) {
            this.factor = source.factor;
        }
        if (source["_factor"] !== undefined) {
            this._factor = new fhirModels.Element(source._factor);
        }
        if (source["modifier"] !== undefined) {
            this.modifier = source.modifier.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["net"] !== undefined) {
            this.net = new fhirModels.Money(source.net);
        }
        if (source["noteNumber"] !== undefined) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source["_noteNumber"] !== undefined) {
            this._noteNumber = source._noteNumber.map((x) => new fhirModels.Element(x));
        }
        {
            this.productOrService = new fhirModels.CodeableConcept(source.productOrService);
        }
        if (source["quantity"] !== undefined) {
            this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["subDetail"] !== undefined) {
            this.subDetail = source.subDetail.map((x) => new fhirModels.ExplanationOfBenefitAddItemDetailSubDetail(x));
        }
        if (source["unitPrice"] !== undefined) {
            this.unitPrice = new fhirModels.Money(source.unitPrice);
        }
    }
}
exports.ExplanationOfBenefitAddItemDetail = ExplanationOfBenefitAddItemDetail;
/**
 * The first-tier service adjudications for payor added product or service lines.
 */
class ExplanationOfBenefitAddItem extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitAddItem from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["adjudication"] !== undefined) {
            this.adjudication = source.adjudication.map((x) => new fhirModels.ExplanationOfBenefitItemAdjudication(x));
        }
        if (source["bodySite"] !== undefined) {
            this.bodySite = new fhirModels.CodeableConcept(source.bodySite);
        }
        if (source["detail"] !== undefined) {
            this.detail = source.detail.map((x) => new fhirModels.ExplanationOfBenefitAddItemDetail(x));
        }
        if (source["detailSequence"] !== undefined) {
            this.detailSequence = source.detailSequence.map((x) => (x));
        }
        if (source["_detailSequence"] !== undefined) {
            this._detailSequence = source._detailSequence.map((x) => new fhirModels.Element(x));
        }
        if (source["factor"] !== undefined) {
            this.factor = source.factor;
        }
        if (source["_factor"] !== undefined) {
            this._factor = new fhirModels.Element(source._factor);
        }
        if (source["itemSequence"] !== undefined) {
            this.itemSequence = source.itemSequence.map((x) => (x));
        }
        if (source["_itemSequence"] !== undefined) {
            this._itemSequence = source._itemSequence.map((x) => new fhirModels.Element(x));
        }
        if (source["locationCodeableConcept"] !== undefined) {
            this.locationCodeableConcept = new fhirModels.CodeableConcept(source.locationCodeableConcept);
        }
        if (source["locationAddress"] !== undefined) {
            this.locationAddress = new fhirModels.Address(source.locationAddress);
        }
        if (source["locationReference"] !== undefined) {
            this.locationReference = new fhirModels.Reference(source.locationReference);
        }
        if (source["modifier"] !== undefined) {
            this.modifier = source.modifier.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["net"] !== undefined) {
            this.net = new fhirModels.Money(source.net);
        }
        if (source["noteNumber"] !== undefined) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source["_noteNumber"] !== undefined) {
            this._noteNumber = source._noteNumber.map((x) => new fhirModels.Element(x));
        }
        {
            this.productOrService = new fhirModels.CodeableConcept(source.productOrService);
        }
        if (source["programCode"] !== undefined) {
            this.programCode = source.programCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["provider"] !== undefined) {
            this.provider = source.provider.map((x) => new fhirModels.Reference(x));
        }
        if (source["quantity"] !== undefined) {
            this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["servicedDate"] !== undefined) {
            this.servicedDate = source.servicedDate;
        }
        if (source["_servicedDate"] !== undefined) {
            this._servicedDate = new fhirModels.Element(source._servicedDate);
        }
        if (source["servicedPeriod"] !== undefined) {
            this.servicedPeriod = new fhirModels.Period(source.servicedPeriod);
        }
        if (source["subDetailSequence"] !== undefined) {
            this.subDetailSequence = source.subDetailSequence.map((x) => (x));
        }
        if (source["_subDetailSequence"] !== undefined) {
            this._subDetailSequence = source._subDetailSequence.map((x) => new fhirModels.Element(x));
        }
        if (source["subSite"] !== undefined) {
            this.subSite = source.subSite.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["unitPrice"] !== undefined) {
            this.unitPrice = new fhirModels.Money(source.unitPrice);
        }
    }
}
exports.ExplanationOfBenefitAddItem = ExplanationOfBenefitAddItem;
/**
 * Totals for amounts submitted, co-pays, benefits payable etc.
 */
class ExplanationOfBenefitTotal extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitTotal from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.amount = new fhirModels.Money(source.amount);
        }
        {
            this.category = new fhirModels.CodeableConcept(source.category);
        }
    }
}
exports.ExplanationOfBenefitTotal = ExplanationOfBenefitTotal;
/**
 * Payment details for the adjudication of the claim.
 */
class ExplanationOfBenefitPayment extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitPayment from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["adjustment"] !== undefined) {
            this.adjustment = new fhirModels.Money(source.adjustment);
        }
        if (source["adjustmentReason"] !== undefined) {
            this.adjustmentReason = new fhirModels.CodeableConcept(source.adjustmentReason);
        }
        if (source["amount"] !== undefined) {
            this.amount = new fhirModels.Money(source.amount);
        }
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = new fhirModels.Identifier(source.identifier);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.ExplanationOfBenefitPayment = ExplanationOfBenefitPayment;
/**
 * A note that describes or explains adjudication results in a human readable form.
 */
class ExplanationOfBenefitProcessNote extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitProcessNote from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["language"] !== undefined) {
            this.language = new fhirModels.CodeableConcept(source.language);
        }
        if (source["number"] !== undefined) {
            this.number = source.number;
        }
        if (source["_number"] !== undefined) {
            this._number = new fhirModels.Element(source._number);
        }
        if (source["text"] !== undefined) {
            this.text = source.text;
        }
        if (source["_text"] !== undefined) {
            this._text = new fhirModels.Element(source._text);
        }
        if (source["type"] !== undefined) {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
    }
}
exports.ExplanationOfBenefitProcessNote = ExplanationOfBenefitProcessNote;
/**
 * Code Values for the ExplanationOfBenefit.processNote.type field
 */
var ExplanationOfBenefitProcessNoteTypeEnum;
(function (ExplanationOfBenefitProcessNoteTypeEnum) {
    ExplanationOfBenefitProcessNoteTypeEnum["DISPLAY"] = "display";
    ExplanationOfBenefitProcessNoteTypeEnum["PRINT"] = "print";
    ExplanationOfBenefitProcessNoteTypeEnum["PRINTOPER"] = "printoper";
})(ExplanationOfBenefitProcessNoteTypeEnum = exports.ExplanationOfBenefitProcessNoteTypeEnum || (exports.ExplanationOfBenefitProcessNoteTypeEnum = {}));
/**
 * Benefits Used to date.
 */
class ExplanationOfBenefitBenefitBalanceFinancial extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitBenefitBalanceFinancial from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["allowedUnsignedInt"] !== undefined) {
            this.allowedUnsignedInt = source.allowedUnsignedInt;
        }
        if (source["_allowedUnsignedInt"] !== undefined) {
            this._allowedUnsignedInt = new fhirModels.Element(source._allowedUnsignedInt);
        }
        if (source["allowedString"] !== undefined) {
            this.allowedString = source.allowedString;
        }
        if (source["_allowedString"] !== undefined) {
            this._allowedString = new fhirModels.Element(source._allowedString);
        }
        if (source["allowedMoney"] !== undefined) {
            this.allowedMoney = new fhirModels.Money(source.allowedMoney);
        }
        {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["usedUnsignedInt"] !== undefined) {
            this.usedUnsignedInt = source.usedUnsignedInt;
        }
        if (source["_usedUnsignedInt"] !== undefined) {
            this._usedUnsignedInt = new fhirModels.Element(source._usedUnsignedInt);
        }
        if (source["usedMoney"] !== undefined) {
            this.usedMoney = new fhirModels.Money(source.usedMoney);
        }
    }
}
exports.ExplanationOfBenefitBenefitBalanceFinancial = ExplanationOfBenefitBenefitBalanceFinancial;
/**
 * Balance by Benefit Category.
 */
class ExplanationOfBenefitBenefitBalance extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitBenefitBalance from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["excluded"] !== undefined) {
            this.excluded = source.excluded;
        }
        if (source["_excluded"] !== undefined) {
            this._excluded = new fhirModels.Element(source._excluded);
        }
        if (source["financial"] !== undefined) {
            this.financial = source.financial.map((x) => new fhirModels.ExplanationOfBenefitBenefitBalanceFinancial(x));
        }
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["network"] !== undefined) {
            this.network = new fhirModels.CodeableConcept(source.network);
        }
        if (source["term"] !== undefined) {
            this.term = new fhirModels.CodeableConcept(source.term);
        }
        if (source["unit"] !== undefined) {
            this.unit = new fhirModels.CodeableConcept(source.unit);
        }
    }
}
exports.ExplanationOfBenefitBenefitBalance = ExplanationOfBenefitBenefitBalance;
/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
class ExplanationOfBenefit extends fhirModels.DomainResource {
    /**
     * Default constructor for ExplanationOfBenefit from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "ExplanationOfBenefit";
        if ((source['resourceType'] !== "ExplanationOfBenefit") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a ExplanationOfBenefit';
        }
        if (source["accident"] !== undefined) {
            this.accident = new fhirModels.ExplanationOfBenefitAccident(source.accident);
        }
        if (source["addItem"] !== undefined) {
            this.addItem = source.addItem.map((x) => new fhirModels.ExplanationOfBenefitAddItem(x));
        }
        if (source["adjudication"] !== undefined) {
            this.adjudication = source.adjudication.map((x) => new fhirModels.ExplanationOfBenefitItemAdjudication(x));
        }
        if (source["benefitBalance"] !== undefined) {
            this.benefitBalance = source.benefitBalance.map((x) => new fhirModels.ExplanationOfBenefitBenefitBalance(x));
        }
        if (source["benefitPeriod"] !== undefined) {
            this.benefitPeriod = new fhirModels.Period(source.benefitPeriod);
        }
        if (source["billablePeriod"] !== undefined) {
            this.billablePeriod = new fhirModels.Period(source.billablePeriod);
        }
        if (source["careTeam"] !== undefined) {
            this.careTeam = source.careTeam.map((x) => new fhirModels.ExplanationOfBenefitCareTeam(x));
        }
        if (source["claim"] !== undefined) {
            this.claim = new fhirModels.Reference(source.claim);
        }
        if (source["claimResponse"] !== undefined) {
            this.claimResponse = new fhirModels.Reference(source.claimResponse);
        }
        {
            this.created = source.created;
        }
        if (source["_created"] !== undefined) {
            this._created = new fhirModels.Element(source._created);
        }
        if (source["diagnosis"] !== undefined) {
            this.diagnosis = source.diagnosis.map((x) => new fhirModels.ExplanationOfBenefitDiagnosis(x));
        }
        if (source["disposition"] !== undefined) {
            this.disposition = source.disposition;
        }
        if (source["_disposition"] !== undefined) {
            this._disposition = new fhirModels.Element(source._disposition);
        }
        if (source["enterer"] !== undefined) {
            this.enterer = new fhirModels.Reference(source.enterer);
        }
        if (source["facility"] !== undefined) {
            this.facility = new fhirModels.Reference(source.facility);
        }
        if (source["form"] !== undefined) {
            this.form = new fhirModels.Attachment(source.form);
        }
        if (source["formCode"] !== undefined) {
            this.formCode = new fhirModels.CodeableConcept(source.formCode);
        }
        if (source["fundsReserve"] !== undefined) {
            this.fundsReserve = new fhirModels.CodeableConcept(source.fundsReserve);
        }
        if (source["fundsReserveRequested"] !== undefined) {
            this.fundsReserveRequested = new fhirModels.CodeableConcept(source.fundsReserveRequested);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        {
            this.insurance = source.insurance.map((x) => new fhirModels.ExplanationOfBenefitInsurance(x));
        }
        {
            this.insurer = new fhirModels.Reference(source.insurer);
        }
        if (source["item"] !== undefined) {
            this.item = source.item.map((x) => new fhirModels.ExplanationOfBenefitItem(x));
        }
        if (source["originalPrescription"] !== undefined) {
            this.originalPrescription = new fhirModels.Reference(source.originalPrescription);
        }
        {
            this.outcome = source.outcome;
        }
        if (source["_outcome"] !== undefined) {
            this._outcome = new fhirModels.Element(source._outcome);
        }
        {
            this.patient = new fhirModels.Reference(source.patient);
        }
        if (source["payee"] !== undefined) {
            this.payee = new fhirModels.ExplanationOfBenefitPayee(source.payee);
        }
        if (source["payment"] !== undefined) {
            this.payment = new fhirModels.ExplanationOfBenefitPayment(source.payment);
        }
        if (source["preAuthRef"] !== undefined) {
            this.preAuthRef = source.preAuthRef.map((x) => (x));
        }
        if (source["_preAuthRef"] !== undefined) {
            this._preAuthRef = source._preAuthRef.map((x) => new fhirModels.Element(x));
        }
        if (source["preAuthRefPeriod"] !== undefined) {
            this.preAuthRefPeriod = source.preAuthRefPeriod.map((x) => new fhirModels.Period(x));
        }
        if (source["precedence"] !== undefined) {
            this.precedence = source.precedence;
        }
        if (source["_precedence"] !== undefined) {
            this._precedence = new fhirModels.Element(source._precedence);
        }
        if (source["prescription"] !== undefined) {
            this.prescription = new fhirModels.Reference(source.prescription);
        }
        if (source["priority"] !== undefined) {
            this.priority = new fhirModels.CodeableConcept(source.priority);
        }
        if (source["procedure"] !== undefined) {
            this.procedure = source.procedure.map((x) => new fhirModels.ExplanationOfBenefitProcedure(x));
        }
        if (source["processNote"] !== undefined) {
            this.processNote = source.processNote.map((x) => new fhirModels.ExplanationOfBenefitProcessNote(x));
        }
        {
            this.provider = new fhirModels.Reference(source.provider);
        }
        if (source["referral"] !== undefined) {
            this.referral = new fhirModels.Reference(source.referral);
        }
        if (source["related"] !== undefined) {
            this.related = source.related.map((x) => new fhirModels.ExplanationOfBenefitRelated(x));
        }
        {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["subType"] !== undefined) {
            this.subType = new fhirModels.CodeableConcept(source.subType);
        }
        if (source["supportingInfo"] !== undefined) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhirModels.ExplanationOfBenefitSupportingInfo(x));
        }
        if (source["total"] !== undefined) {
            this.total = source.total.map((x) => new fhirModels.ExplanationOfBenefitTotal(x));
        }
        {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
        {
            this.use = source.use;
        }
        if (source["_use"] !== undefined) {
            this._use = new fhirModels.Element(source._use);
        }
    }
}
exports.ExplanationOfBenefit = ExplanationOfBenefit;
/**
 * Code Values for the ExplanationOfBenefit.outcome field
 */
var ExplanationOfBenefitOutcomeEnum;
(function (ExplanationOfBenefitOutcomeEnum) {
    ExplanationOfBenefitOutcomeEnum["QUEUED"] = "queued";
    ExplanationOfBenefitOutcomeEnum["COMPLETE"] = "complete";
    ExplanationOfBenefitOutcomeEnum["ERROR"] = "error";
    ExplanationOfBenefitOutcomeEnum["PARTIAL"] = "partial";
})(ExplanationOfBenefitOutcomeEnum = exports.ExplanationOfBenefitOutcomeEnum || (exports.ExplanationOfBenefitOutcomeEnum = {}));
/**
 * Code Values for the ExplanationOfBenefit.status field
 */
var ExplanationOfBenefitStatusEnum;
(function (ExplanationOfBenefitStatusEnum) {
    ExplanationOfBenefitStatusEnum["ACTIVE"] = "active";
    ExplanationOfBenefitStatusEnum["CANCELLED"] = "cancelled";
    ExplanationOfBenefitStatusEnum["DRAFT"] = "draft";
    ExplanationOfBenefitStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(ExplanationOfBenefitStatusEnum = exports.ExplanationOfBenefitStatusEnum || (exports.ExplanationOfBenefitStatusEnum = {}));
/**
 * Code Values for the ExplanationOfBenefit.use field
 */
var ExplanationOfBenefitUseEnum;
(function (ExplanationOfBenefitUseEnum) {
    ExplanationOfBenefitUseEnum["CLAIM"] = "claim";
    ExplanationOfBenefitUseEnum["PREAUTHORIZATION"] = "preauthorization";
    ExplanationOfBenefitUseEnum["PREDETERMINATION"] = "predetermination";
})(ExplanationOfBenefitUseEnum = exports.ExplanationOfBenefitUseEnum || (exports.ExplanationOfBenefitUseEnum = {}));
//# sourceMappingURL=ExplanationOfBenefit.js.map