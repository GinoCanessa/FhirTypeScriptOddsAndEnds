var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
 */
var MedicinalProductContraindicationOtherTherapy = /** @class */ (function (_super) {
    __extends(MedicinalProductContraindicationOtherTherapy, _super);
    /**
     * Default constructor for MedicinalProductContraindicationOtherTherapy from an object that MAY NOT contain all required elements.
     */
    function MedicinalProductContraindicationOtherTherapy(source) {
        var _this = _super.call(this, source) || this;
        if (source["medicationCodeableConcept"] !== undefined) {
            _this.medicationCodeableConcept = new fhirModels.CodeableConcept(source.medicationCodeableConcept);
        }
        if (source["medicationReference"] !== undefined) {
            _this.medicationReference = new fhirModels.Reference(source.medicationReference);
        }
        {
            _this.therapyRelationshipType = new fhirModels.CodeableConcept(source.therapyRelationshipType);
        }
        return _this;
    }
    return MedicinalProductContraindicationOtherTherapy;
}(fhirModels.BackboneElement));
export { MedicinalProductContraindicationOtherTherapy };
/**
 * The clinical particulars - indications, contraindications etc. of a medicinal product, including for regulatory purposes.
 */
var MedicinalProductContraindication = /** @class */ (function (_super) {
    __extends(MedicinalProductContraindication, _super);
    /**
     * Default constructor for MedicinalProductContraindication from an object that MAY NOT contain all required elements.
     */
    function MedicinalProductContraindication(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "MedicinalProductContraindication";
        if ((source['resourceType'] !== "MedicinalProductContraindication") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a MedicinalProductContraindication';
        }
        if (source["comorbidity"] !== undefined) {
            _this.comorbidity = source.comorbidity.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["disease"] !== undefined) {
            _this.disease = new fhirModels.CodeableConcept(source.disease);
        }
        if (source["diseaseStatus"] !== undefined) {
            _this.diseaseStatus = new fhirModels.CodeableConcept(source.diseaseStatus);
        }
        if (source["otherTherapy"] !== undefined) {
            _this.otherTherapy = source.otherTherapy.map(function (x) { return new fhirModels.MedicinalProductContraindicationOtherTherapy(x); });
        }
        if (source["population"] !== undefined) {
            _this.population = source.population.map(function (x) { return new fhirModels.Population(x); });
        }
        if (source["subject"] !== undefined) {
            _this.subject = source.subject.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["therapeuticIndication"] !== undefined) {
            _this.therapeuticIndication = source.therapeuticIndication.map(function (x) { return new fhirModels.Reference(x); });
        }
        return _this;
    }
    return MedicinalProductContraindication;
}(fhirModels.DomainResource));
export { MedicinalProductContraindication };
