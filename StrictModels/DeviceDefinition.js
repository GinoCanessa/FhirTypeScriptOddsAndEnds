var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
 */
var DeviceDefinitionUdiDeviceIdentifier = /** @class */ (function (_super) {
    __extends(DeviceDefinitionUdiDeviceIdentifier, _super);
    /**
     * Default constructor for DeviceDefinitionUdiDeviceIdentifier from an object that MAY NOT contain all required elements.
     */
    function DeviceDefinitionUdiDeviceIdentifier(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.deviceIdentifier = source.deviceIdentifier;
        }
        if (source["_deviceIdentifier"] !== undefined) {
            _this._deviceIdentifier = new fhirModels.Element(source._deviceIdentifier);
        }
        {
            _this.issuer = source.issuer;
        }
        if (source["_issuer"] !== undefined) {
            _this._issuer = new fhirModels.Element(source._issuer);
        }
        {
            _this.jurisdiction = source.jurisdiction;
        }
        if (source["_jurisdiction"] !== undefined) {
            _this._jurisdiction = new fhirModels.Element(source._jurisdiction);
        }
        return _this;
    }
    return DeviceDefinitionUdiDeviceIdentifier;
}(fhirModels.BackboneElement));
export { DeviceDefinitionUdiDeviceIdentifier };
/**
 * A name given to the device to identify it.
 */
var DeviceDefinitionDeviceName = /** @class */ (function (_super) {
    __extends(DeviceDefinitionDeviceName, _super);
    /**
     * Default constructor for DeviceDefinitionDeviceName from an object that MAY NOT contain all required elements.
     */
    function DeviceDefinitionDeviceName(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            _this._name = new fhirModels.Element(source._name);
        }
        {
            _this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            _this._type = new fhirModels.Element(source._type);
        }
        return _this;
    }
    return DeviceDefinitionDeviceName;
}(fhirModels.BackboneElement));
export { DeviceDefinitionDeviceName };
/**
 * Code Values for the DeviceDefinition.deviceName.type field
 */
export var DeviceDefinitionDeviceNameTypeEnum;
(function (DeviceDefinitionDeviceNameTypeEnum) {
    DeviceDefinitionDeviceNameTypeEnum["UDI_LABEL_NAME"] = "udi-label-name";
    DeviceDefinitionDeviceNameTypeEnum["USER_FRIENDLY_NAME"] = "user-friendly-name";
    DeviceDefinitionDeviceNameTypeEnum["PATIENT_REPORTED_NAME"] = "patient-reported-name";
    DeviceDefinitionDeviceNameTypeEnum["MANUFACTURER_NAME"] = "manufacturer-name";
    DeviceDefinitionDeviceNameTypeEnum["MODEL_NAME"] = "model-name";
    DeviceDefinitionDeviceNameTypeEnum["OTHER"] = "other";
})(DeviceDefinitionDeviceNameTypeEnum || (DeviceDefinitionDeviceNameTypeEnum = {}));
/**
 * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
 */
var DeviceDefinitionSpecialization = /** @class */ (function (_super) {
    __extends(DeviceDefinitionSpecialization, _super);
    /**
     * Default constructor for DeviceDefinitionSpecialization from an object that MAY NOT contain all required elements.
     */
    function DeviceDefinitionSpecialization(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.systemType = source.systemType;
        }
        if (source["_systemType"] !== undefined) {
            _this._systemType = new fhirModels.Element(source._systemType);
        }
        if (source["version"] !== undefined) {
            _this.version = source.version;
        }
        if (source["_version"] !== undefined) {
            _this._version = new fhirModels.Element(source._version);
        }
        return _this;
    }
    return DeviceDefinitionSpecialization;
}(fhirModels.BackboneElement));
export { DeviceDefinitionSpecialization };
/**
 * Device capabilities.
 */
var DeviceDefinitionCapability = /** @class */ (function (_super) {
    __extends(DeviceDefinitionCapability, _super);
    /**
     * Default constructor for DeviceDefinitionCapability from an object that MAY NOT contain all required elements.
     */
    function DeviceDefinitionCapability(source) {
        var _this = _super.call(this, source) || this;
        if (source["description"] !== undefined) {
            _this.description = source.description.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        return _this;
    }
    return DeviceDefinitionCapability;
}(fhirModels.BackboneElement));
export { DeviceDefinitionCapability };
/**
 * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
 */
var DeviceDefinitionProperty = /** @class */ (function (_super) {
    __extends(DeviceDefinitionProperty, _super);
    /**
     * Default constructor for DeviceDefinitionProperty from an object that MAY NOT contain all required elements.
     */
    function DeviceDefinitionProperty(source) {
        var _this = _super.call(this, source) || this;
        {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["valueCode"] !== undefined) {
            _this.valueCode = source.valueCode.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["valueQuantity"] !== undefined) {
            _this.valueQuantity = source.valueQuantity.map(function (x) { return new fhirModels.Quantity(x); });
        }
        return _this;
    }
    return DeviceDefinitionProperty;
}(fhirModels.BackboneElement));
export { DeviceDefinitionProperty };
/**
 * A substance used to create the material(s) of which the device is made.
 */
var DeviceDefinitionMaterial = /** @class */ (function (_super) {
    __extends(DeviceDefinitionMaterial, _super);
    /**
     * Default constructor for DeviceDefinitionMaterial from an object that MAY NOT contain all required elements.
     */
    function DeviceDefinitionMaterial(source) {
        var _this = _super.call(this, source) || this;
        if (source["allergenicIndicator"] !== undefined) {
            _this.allergenicIndicator = source.allergenicIndicator;
        }
        if (source["_allergenicIndicator"] !== undefined) {
            _this._allergenicIndicator = new fhirModels.Element(source._allergenicIndicator);
        }
        if (source["alternate"] !== undefined) {
            _this.alternate = source.alternate;
        }
        if (source["_alternate"] !== undefined) {
            _this._alternate = new fhirModels.Element(source._alternate);
        }
        {
            _this.substance = new fhirModels.CodeableConcept(source.substance);
        }
        return _this;
    }
    return DeviceDefinitionMaterial;
}(fhirModels.BackboneElement));
export { DeviceDefinitionMaterial };
/**
 * The characteristics, operational status and capabilities of a medical-related component of a medical device.
 */
var DeviceDefinition = /** @class */ (function (_super) {
    __extends(DeviceDefinition, _super);
    /**
     * Default constructor for DeviceDefinition from an object that MAY NOT contain all required elements.
     */
    function DeviceDefinition(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "DeviceDefinition";
        if ((source['resourceType'] !== "DeviceDefinition") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a DeviceDefinition';
        }
        if (source["capability"] !== undefined) {
            _this.capability = source.capability.map(function (x) { return new fhirModels.DeviceDefinitionCapability(x); });
        }
        if (source["contact"] !== undefined) {
            _this.contact = source.contact.map(function (x) { return new fhirModels.ContactPoint(x); });
        }
        if (source["deviceName"] !== undefined) {
            _this.deviceName = source.deviceName.map(function (x) { return new fhirModels.DeviceDefinitionDeviceName(x); });
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["languageCode"] !== undefined) {
            _this.languageCode = source.languageCode.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["manufacturerString"] !== undefined) {
            _this.manufacturerString = source.manufacturerString;
        }
        if (source["_manufacturerString"] !== undefined) {
            _this._manufacturerString = new fhirModels.Element(source._manufacturerString);
        }
        if (source["manufacturerReference"] !== undefined) {
            _this.manufacturerReference = new fhirModels.Reference(source.manufacturerReference);
        }
        if (source["material"] !== undefined) {
            _this.material = source.material.map(function (x) { return new fhirModels.DeviceDefinitionMaterial(x); });
        }
        if (source["modelNumber"] !== undefined) {
            _this.modelNumber = source.modelNumber;
        }
        if (source["_modelNumber"] !== undefined) {
            _this._modelNumber = new fhirModels.Element(source._modelNumber);
        }
        if (source["note"] !== undefined) {
            _this.note = source.note.map(function (x) { return new fhirModels.Annotation(x); });
        }
        if (source["onlineInformation"] !== undefined) {
            _this.onlineInformation = source.onlineInformation;
        }
        if (source["_onlineInformation"] !== undefined) {
            _this._onlineInformation = new fhirModels.Element(source._onlineInformation);
        }
        if (source["owner"] !== undefined) {
            _this.owner = new fhirModels.Reference(source.owner);
        }
        if (source["parentDevice"] !== undefined) {
            _this.parentDevice = new fhirModels.Reference(source.parentDevice);
        }
        if (source["physicalCharacteristics"] !== undefined) {
            _this.physicalCharacteristics = new fhirModels.ProdCharacteristic(source.physicalCharacteristics);
        }
        if (source["property"] !== undefined) {
            _this.property = source.property.map(function (x) { return new fhirModels.DeviceDefinitionProperty(x); });
        }
        if (source["quantity"] !== undefined) {
            _this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["safety"] !== undefined) {
            _this.safety = source.safety.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["shelfLifeStorage"] !== undefined) {
            _this.shelfLifeStorage = source.shelfLifeStorage.map(function (x) { return new fhirModels.ProductShelfLife(x); });
        }
        if (source["specialization"] !== undefined) {
            _this.specialization = source.specialization.map(function (x) { return new fhirModels.DeviceDefinitionSpecialization(x); });
        }
        if (source["type"] !== undefined) {
            _this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["udiDeviceIdentifier"] !== undefined) {
            _this.udiDeviceIdentifier = source.udiDeviceIdentifier.map(function (x) { return new fhirModels.DeviceDefinitionUdiDeviceIdentifier(x); });
        }
        if (source["url"] !== undefined) {
            _this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            _this._url = new fhirModels.Element(source._url);
        }
        if (source["version"] !== undefined) {
            _this.version = source.version.map(function (x) { return (x); });
        }
        if (source["_version"] !== undefined) {
            _this._version = source._version.map(function (x) { return new fhirModels.Element(x); });
        }
        return _this;
    }
    return DeviceDefinition;
}(fhirModels.DomainResource));
export { DeviceDefinition };
