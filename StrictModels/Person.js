"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PersonGenderEnum = exports.Person = exports.PersonLinkAssuranceEnum = exports.PersonLink = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Link to a resource that concerns the same actual person.
 */
class PersonLink extends fhirModels.BackboneElement {
    /**
     * Default constructor for PersonLink from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["assurance"] !== undefined) {
            this.assurance = source.assurance;
        }
        if (source["_assurance"] !== undefined) {
            this._assurance = new fhirModels.Element(source._assurance);
        }
        {
            this.target = new fhirModels.Reference(source.target);
        }
    }
}
exports.PersonLink = PersonLink;
/**
 * Code Values for the Person.link.assurance field
 */
var PersonLinkAssuranceEnum;
(function (PersonLinkAssuranceEnum) {
    PersonLinkAssuranceEnum["LEVEL1"] = "level1";
    PersonLinkAssuranceEnum["LEVEL2"] = "level2";
    PersonLinkAssuranceEnum["LEVEL3"] = "level3";
    PersonLinkAssuranceEnum["LEVEL4"] = "level4";
})(PersonLinkAssuranceEnum = exports.PersonLinkAssuranceEnum || (exports.PersonLinkAssuranceEnum = {}));
/**
 * Demographics and administrative information about a person independent of a specific health-related context.
 */
class Person extends fhirModels.DomainResource {
    /**
     * Default constructor for Person from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "Person";
        if ((source['resourceType'] !== "Person") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Person';
        }
        if (source["active"] !== undefined) {
            this.active = source.active;
        }
        if (source["_active"] !== undefined) {
            this._active = new fhirModels.Element(source._active);
        }
        if (source["address"] !== undefined) {
            this.address = source.address.map((x) => new fhirModels.Address(x));
        }
        if (source["birthDate"] !== undefined) {
            this.birthDate = source.birthDate;
        }
        if (source["_birthDate"] !== undefined) {
            this._birthDate = new fhirModels.Element(source._birthDate);
        }
        if (source["gender"] !== undefined) {
            this.gender = source.gender;
        }
        if (source["_gender"] !== undefined) {
            this._gender = new fhirModels.Element(source._gender);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["link"] !== undefined) {
            this.link = source.link.map((x) => new fhirModels.PersonLink(x));
        }
        if (source["managingOrganization"] !== undefined) {
            this.managingOrganization = new fhirModels.Reference(source.managingOrganization);
        }
        if (source["name"] !== undefined) {
            this.name = source.name.map((x) => new fhirModels.HumanName(x));
        }
        if (source["photo"] !== undefined) {
            this.photo = new fhirModels.Attachment(source.photo);
        }
        if (source["telecom"] !== undefined) {
            this.telecom = source.telecom.map((x) => new fhirModels.ContactPoint(x));
        }
    }
}
exports.Person = Person;
/**
 * Code Values for the Person.gender field
 */
var PersonGenderEnum;
(function (PersonGenderEnum) {
    PersonGenderEnum["MALE"] = "male";
    PersonGenderEnum["FEMALE"] = "female";
    PersonGenderEnum["OTHER"] = "other";
    PersonGenderEnum["UNKNOWN"] = "unknown";
})(PersonGenderEnum = exports.PersonGenderEnum || (exports.PersonGenderEnum = {}));
//# sourceMappingURL=Person.js.map