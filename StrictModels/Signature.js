var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
 */
var Signature = /** @class */ (function (_super) {
    __extends(Signature, _super);
    /**
     * Default constructor for Signature from an object that MAY NOT contain all required elements.
     */
    function Signature(source) {
        var _this = _super.call(this, source) || this;
        if (source["data"] !== undefined) {
            _this.data = source.data;
        }
        if (source["_data"] !== undefined) {
            _this._data = new fhirModels.Element(source._data);
        }
        if (source["onBehalfOf"] !== undefined) {
            _this.onBehalfOf = new fhirModels.Reference(source.onBehalfOf);
        }
        if (source["sigFormat"] !== undefined) {
            _this.sigFormat = source.sigFormat;
        }
        if (source["_sigFormat"] !== undefined) {
            _this._sigFormat = new fhirModels.Element(source._sigFormat);
        }
        if (source["targetFormat"] !== undefined) {
            _this.targetFormat = source.targetFormat;
        }
        if (source["_targetFormat"] !== undefined) {
            _this._targetFormat = new fhirModels.Element(source._targetFormat);
        }
        {
            _this.type = source.type.map(function (x) { return new fhirModels.Coding(x); });
        }
        {
            _this.when = source.when;
        }
        if (source["_when"] !== undefined) {
            _this._when = new fhirModels.Element(source._when);
        }
        {
            _this.who = new fhirModels.Reference(source.who);
        }
        return _this;
    }
    return Signature;
}(fhirModels.Element));
export { Signature };
