"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompositionStatusEnum = exports.Composition = exports.CompositionSectionModeEnum = exports.CompositionSection = exports.CompositionEvent = exports.CompositionRelatesToCodeEnum = exports.CompositionRelatesTo = exports.CompositionAttesterModeEnum = exports.CompositionAttester = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Only list each attester once.
 */
class CompositionAttester extends fhirModels.BackboneElement {
    /**
     * Default constructor for CompositionAttester from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.mode = source.mode;
        }
        if (source["_mode"] !== undefined) {
            this._mode = new fhirModels.Element(source._mode);
        }
        if (source["party"] !== undefined) {
            this.party = new fhirModels.Reference(source.party);
        }
        if (source["time"] !== undefined) {
            this.time = source.time;
        }
        if (source["_time"] !== undefined) {
            this._time = new fhirModels.Element(source._time);
        }
    }
}
exports.CompositionAttester = CompositionAttester;
/**
 * Code Values for the Composition.attester.mode field
 */
var CompositionAttesterModeEnum;
(function (CompositionAttesterModeEnum) {
    CompositionAttesterModeEnum["PERSONAL"] = "personal";
    CompositionAttesterModeEnum["PROFESSIONAL"] = "professional";
    CompositionAttesterModeEnum["LEGAL"] = "legal";
    CompositionAttesterModeEnum["OFFICIAL"] = "official";
})(CompositionAttesterModeEnum = exports.CompositionAttesterModeEnum || (exports.CompositionAttesterModeEnum = {}));
/**
 * A document is a version specific composition.
 */
class CompositionRelatesTo extends fhirModels.BackboneElement {
    /**
     * Default constructor for CompositionRelatesTo from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            this._code = new fhirModels.Element(source._code);
        }
        if (source["targetIdentifier"] !== undefined) {
            this.targetIdentifier = new fhirModels.Identifier(source.targetIdentifier);
        }
        if (source["targetReference"] !== undefined) {
            this.targetReference = new fhirModels.Reference(source.targetReference);
        }
    }
}
exports.CompositionRelatesTo = CompositionRelatesTo;
/**
 * Code Values for the Composition.relatesTo.code field
 */
var CompositionRelatesToCodeEnum;
(function (CompositionRelatesToCodeEnum) {
    CompositionRelatesToCodeEnum["REPLACES"] = "replaces";
    CompositionRelatesToCodeEnum["TRANSFORMS"] = "transforms";
    CompositionRelatesToCodeEnum["SIGNS"] = "signs";
    CompositionRelatesToCodeEnum["APPENDS"] = "appends";
})(CompositionRelatesToCodeEnum = exports.CompositionRelatesToCodeEnum || (exports.CompositionRelatesToCodeEnum = {}));
/**
 * The event needs to be consistent with the type element, though can provide further information if desired.
 */
class CompositionEvent extends fhirModels.BackboneElement {
    /**
     * Default constructor for CompositionEvent from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = source.code.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["detail"] !== undefined) {
            this.detail = source.detail.map((x) => new fhirModels.Reference(x));
        }
        if (source["period"] !== undefined) {
            this.period = new fhirModels.Period(source.period);
        }
    }
}
exports.CompositionEvent = CompositionEvent;
/**
 * The root of the sections that make up the composition.
 */
class CompositionSection extends fhirModels.BackboneElement {
    /**
     * Default constructor for CompositionSection from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["author"] !== undefined) {
            this.author = source.author.map((x) => new fhirModels.Reference(x));
        }
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["emptyReason"] !== undefined) {
            this.emptyReason = new fhirModels.CodeableConcept(source.emptyReason);
        }
        if (source["entry"] !== undefined) {
            this.entry = source.entry.map((x) => new fhirModels.Reference(x));
        }
        if (source["focus"] !== undefined) {
            this.focus = new fhirModels.Reference(source.focus);
        }
        if (source["mode"] !== undefined) {
            this.mode = source.mode;
        }
        if (source["_mode"] !== undefined) {
            this._mode = new fhirModels.Element(source._mode);
        }
        if (source["orderedBy"] !== undefined) {
            this.orderedBy = new fhirModels.CodeableConcept(source.orderedBy);
        }
        if (source["section"] !== undefined) {
            this.section = source.section.map((x) => new fhirModels.CompositionSection(x));
        }
        if (source["text"] !== undefined) {
            this.text = new fhirModels.Narrative(source.text);
        }
        if (source["title"] !== undefined) {
            this.title = source.title;
        }
        if (source["_title"] !== undefined) {
            this._title = new fhirModels.Element(source._title);
        }
    }
}
exports.CompositionSection = CompositionSection;
/**
 * Code Values for the Composition.section.mode field
 */
var CompositionSectionModeEnum;
(function (CompositionSectionModeEnum) {
    CompositionSectionModeEnum["WORKING"] = "working";
    CompositionSectionModeEnum["SNAPSHOT"] = "snapshot";
    CompositionSectionModeEnum["CHANGES"] = "changes";
})(CompositionSectionModeEnum = exports.CompositionSectionModeEnum || (exports.CompositionSectionModeEnum = {}));
/**
 * A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.).
 */
class Composition extends fhirModels.DomainResource {
    /**
     * Default constructor for Composition from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "Composition";
        if ((source['resourceType'] !== "Composition") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Composition';
        }
        if (source["attester"] !== undefined) {
            this.attester = source.attester.map((x) => new fhirModels.CompositionAttester(x));
        }
        {
            this.author = source.author.map((x) => new fhirModels.Reference(x));
        }
        if (source["category"] !== undefined) {
            this.category = source.category.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["confidentiality"] !== undefined) {
            this.confidentiality = source.confidentiality;
        }
        if (source["_confidentiality"] !== undefined) {
            this._confidentiality = new fhirModels.Element(source._confidentiality);
        }
        if (source["custodian"] !== undefined) {
            this.custodian = new fhirModels.Reference(source.custodian);
        }
        {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["encounter"] !== undefined) {
            this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["event"] !== undefined) {
            this.event = source.event.map((x) => new fhirModels.CompositionEvent(x));
        }
        if (source["identifier"] !== undefined) {
            this.identifier = new fhirModels.Identifier(source.identifier);
        }
        if (source["relatesTo"] !== undefined) {
            this.relatesTo = source.relatesTo.map((x) => new fhirModels.CompositionRelatesTo(x));
        }
        if (source["section"] !== undefined) {
            this.section = source.section.map((x) => new fhirModels.CompositionSection(x));
        }
        {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["subject"] !== undefined) {
            this.subject = new fhirModels.Reference(source.subject);
        }
        {
            this.title = source.title;
        }
        if (source["_title"] !== undefined) {
            this._title = new fhirModels.Element(source._title);
        }
        {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.Composition = Composition;
/**
 * Code Values for the Composition.status field
 */
var CompositionStatusEnum;
(function (CompositionStatusEnum) {
    CompositionStatusEnum["PRELIMINARY"] = "preliminary";
    CompositionStatusEnum["FINAL"] = "final";
    CompositionStatusEnum["AMENDED"] = "amended";
    CompositionStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(CompositionStatusEnum = exports.CompositionStatusEnum || (exports.CompositionStatusEnum = {}));
//# sourceMappingURL=Composition.js.map