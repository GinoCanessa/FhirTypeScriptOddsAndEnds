var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels';
/**
 * List of participants involved in the appointment.
 */
var AppointmentParticipant = /** @class */ (function (_super) {
    __extends(AppointmentParticipant, _super);
    /**
     * Default constructor for AppointmentParticipant from an object that MAY NOT contain all required elements.
     */
    function AppointmentParticipant(source) {
        var _this = _super.call(this, source) || this;
        if (source["actor"] !== undefined) {
            _this.actor = new fhirModels.Reference(source.actor);
        }
        if (source["period"] !== undefined) {
            _this.period = new fhirModels.Period(source.period);
        }
        if (source["required"] !== undefined) {
            _this.required = source.required;
        }
        if (source["_required"] !== undefined) {
            _this._required = new fhirModels.Element(source._required);
        }
        {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["type"] !== undefined) {
            _this.type = source.type.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        return _this;
    }
    return AppointmentParticipant;
}(fhirModels.BackboneElement));
export { AppointmentParticipant };
/**
 * Code Values for the Appointment.participant.required field
 */
export var AppointmentParticipantRequiredEnum;
(function (AppointmentParticipantRequiredEnum) {
    AppointmentParticipantRequiredEnum["REQUIRED"] = "required";
    AppointmentParticipantRequiredEnum["OPTIONAL"] = "optional";
    AppointmentParticipantRequiredEnum["INFORMATION_ONLY"] = "information-only";
})(AppointmentParticipantRequiredEnum || (AppointmentParticipantRequiredEnum = {}));
/**
 * Code Values for the Appointment.participant.status field
 */
export var AppointmentParticipantStatusEnum;
(function (AppointmentParticipantStatusEnum) {
    AppointmentParticipantStatusEnum["ACCEPTED"] = "accepted";
    AppointmentParticipantStatusEnum["DECLINED"] = "declined";
    AppointmentParticipantStatusEnum["TENTATIVE"] = "tentative";
    AppointmentParticipantStatusEnum["NEEDS_ACTION"] = "needs-action";
})(AppointmentParticipantStatusEnum || (AppointmentParticipantStatusEnum = {}));
/**
 * A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).
 */
var Appointment = /** @class */ (function (_super) {
    __extends(Appointment, _super);
    /**
     * Default constructor for Appointment from an object that MAY NOT contain all required elements.
     */
    function Appointment(source) {
        var _this = _super.call(this, source) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "Appointment";
        if ((source['resourceType'] !== "Appointment") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Appointment';
        }
        if (source["appointmentType"] !== undefined) {
            _this.appointmentType = new fhirModels.CodeableConcept(source.appointmentType);
        }
        if (source["basedOn"] !== undefined) {
            _this.basedOn = source.basedOn.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["cancelationReason"] !== undefined) {
            _this.cancelationReason = new fhirModels.CodeableConcept(source.cancelationReason);
        }
        if (source["comment"] !== undefined) {
            _this.comment = source.comment;
        }
        if (source["_comment"] !== undefined) {
            _this._comment = new fhirModels.Element(source._comment);
        }
        if (source["created"] !== undefined) {
            _this.created = source.created;
        }
        if (source["_created"] !== undefined) {
            _this._created = new fhirModels.Element(source._created);
        }
        if (source["description"] !== undefined) {
            _this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            _this._description = new fhirModels.Element(source._description);
        }
        if (source["end"] !== undefined) {
            _this.end = source.end;
        }
        if (source["_end"] !== undefined) {
            _this._end = new fhirModels.Element(source._end);
        }
        if (source["identifier"] !== undefined) {
            _this.identifier = source.identifier.map(function (x) { return new fhirModels.Identifier(x); });
        }
        if (source["minutesDuration"] !== undefined) {
            _this.minutesDuration = source.minutesDuration;
        }
        if (source["_minutesDuration"] !== undefined) {
            _this._minutesDuration = new fhirModels.Element(source._minutesDuration);
        }
        {
            _this.participant = source.participant.map(function (x) { return new fhirModels.AppointmentParticipant(x); });
        }
        if (source["patientInstruction"] !== undefined) {
            _this.patientInstruction = source.patientInstruction;
        }
        if (source["_patientInstruction"] !== undefined) {
            _this._patientInstruction = new fhirModels.Element(source._patientInstruction);
        }
        if (source["priority"] !== undefined) {
            _this.priority = source.priority;
        }
        if (source["_priority"] !== undefined) {
            _this._priority = new fhirModels.Element(source._priority);
        }
        if (source["reasonCode"] !== undefined) {
            _this.reasonCode = source.reasonCode.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["reasonReference"] !== undefined) {
            _this.reasonReference = source.reasonReference.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["requestedPeriod"] !== undefined) {
            _this.requestedPeriod = source.requestedPeriod.map(function (x) { return new fhirModels.Period(x); });
        }
        if (source["serviceCategory"] !== undefined) {
            _this.serviceCategory = source.serviceCategory.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["serviceType"] !== undefined) {
            _this.serviceType = source.serviceType.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["slot"] !== undefined) {
            _this.slot = source.slot.map(function (x) { return new fhirModels.Reference(x); });
        }
        if (source["specialty"] !== undefined) {
            _this.specialty = source.specialty.map(function (x) { return new fhirModels.CodeableConcept(x); });
        }
        if (source["start"] !== undefined) {
            _this.start = source.start;
        }
        if (source["_start"] !== undefined) {
            _this._start = new fhirModels.Element(source._start);
        }
        {
            _this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            _this._status = new fhirModels.Element(source._status);
        }
        if (source["supportingInformation"] !== undefined) {
            _this.supportingInformation = source.supportingInformation.map(function (x) { return new fhirModels.Reference(x); });
        }
        return _this;
    }
    return Appointment;
}(fhirModels.DomainResource));
export { Appointment };
/**
 * Code Values for the Appointment.status field
 */
export var AppointmentStatusEnum;
(function (AppointmentStatusEnum) {
    AppointmentStatusEnum["PROPOSED"] = "proposed";
    AppointmentStatusEnum["PENDING"] = "pending";
    AppointmentStatusEnum["BOOKED"] = "booked";
    AppointmentStatusEnum["ARRIVED"] = "arrived";
    AppointmentStatusEnum["FULFILLED"] = "fulfilled";
    AppointmentStatusEnum["CANCELLED"] = "cancelled";
    AppointmentStatusEnum["NOSHOW"] = "noshow";
    AppointmentStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    AppointmentStatusEnum["CHECKED_IN"] = "checked-in";
    AppointmentStatusEnum["WAITLIST"] = "waitlist";
})(AppointmentStatusEnum || (AppointmentStatusEnum = {}));
