// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels'
import * as fhirInterfaces from '../optionalinterfaces'
/**
 * This resource provides the insurance enrollment details to the insurer regarding a specified coverage.
 */
export class EnrollmentRequest extends fhirModels.DomainResource implements fhirInterfaces.IEnrollmentRequest {
  /**
   * Resource Type Name
   */
  readonly resourceType = "EnrollmentRequest";
  /**
   * Patient Resource.
   */
  candidate?: fhirModels.Reference|undefined;
  /**
   * Reference to the program or plan identification, underwriter or payor.
   */
  coverage?: fhirModels.Reference|undefined;
  /**
   * The date when this resource was created.
   */
  created?: string|undefined;
  _created?: fhirModels.Element|undefined;
  /**
   * The Response business identifier.
   */
  identifier?: fhirModels.Identifier[]|undefined;
  /**
   * The Insurer who is target  of the request.
   */
  insurer?: fhirModels.Reference|undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  provider?: fhirModels.Reference|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the request as not currently valid.
   */
  status?: EnrollmentRequestStatusEnum|undefined;
  _status?: fhirModels.Element|undefined;
  /**
   * Default constructor for EnrollmentRequest from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.IEnrollmentRequest>) {
    super(source);
    if ((source['resourceType'] !== "EnrollmentRequest") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a EnrollmentRequest'; }
    if (source["candidate"] !== undefined) { this.candidate = new fhirModels.Reference(source.candidate); }
    if (source["coverage"] !== undefined) { this.coverage = new fhirModels.Reference(source.coverage); }
    if (source["created"] !== undefined) { this.created = source.created; }
    if (source["_created"] !== undefined) { this._created = new fhirModels.Element(source._created); }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x)); }
    if (source["insurer"] !== undefined) { this.insurer = new fhirModels.Reference(source.insurer); }
    if (source["provider"] !== undefined) { this.provider = new fhirModels.Reference(source.provider); }
    if (source["status"] !== undefined) { this.status = source.status; }
    if (source["_status"] !== undefined) { this._status = new fhirModels.Element(source._status); }
  }
  /**
   * Factory function to create a EnrollmentRequest from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.IEnrollmentRequest):EnrollmentRequest {
    var dest:EnrollmentRequest = new EnrollmentRequest(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `EnrollmentRequest is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current EnrollmentRequest contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
/**
 * Code Values for the EnrollmentRequest.status field
 */
export enum EnrollmentRequestStatusEnum {
  ACTIVE = "active",
  CANCELLED = "cancelled",
  DRAFT = "draft",
  ENTERED_IN_ERROR = "entered-in-error",
}
