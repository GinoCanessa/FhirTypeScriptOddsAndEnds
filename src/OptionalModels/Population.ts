// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels'
import * as fhirInterfaces from '../optionalinterfaces'
/**
 * A populatioof people with some set of grouping criteria.
 */
export class Population extends fhirModels.BackboneElement implements fhirInterfaces.IPopulation {
  /**
   * The age of the specific population.
   */
  ageRange?: fhirModels.Range|undefined;
  /**
   * The age of the specific population.
   */
  ageCodeableConcept?: fhirModels.CodeableConcept|undefined;
  /**
   * The gender of the specific population.
   */
  gender?: fhirModels.CodeableConcept|undefined;
  /**
   * The existing physiological conditions of the specific population to which this applies.
   */
  physiologicalCondition?: fhirModels.CodeableConcept|undefined;
  /**
   * Race of the specific population.
   */
  race?: fhirModels.CodeableConcept|undefined;
  /**
   * Default constructor for Population from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.IPopulation>) {
    super(source);
    if (source["ageRange"] !== undefined) { this.ageRange = new fhirModels.Range(source.ageRange); }
    if (source["ageCodeableConcept"] !== undefined) { this.ageCodeableConcept = new fhirModels.CodeableConcept(source.ageCodeableConcept); }
    if (source["gender"] !== undefined) { this.gender = new fhirModels.CodeableConcept(source.gender); }
    if (source["physiologicalCondition"] !== undefined) { this.physiologicalCondition = new fhirModels.CodeableConcept(source.physiologicalCondition); }
    if (source["race"] !== undefined) { this.race = new fhirModels.CodeableConcept(source.race); }
  }
  /**
   * Factory function to create a Population from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.IPopulation):Population {
    var dest:Population = new Population(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `Population is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current Population contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
