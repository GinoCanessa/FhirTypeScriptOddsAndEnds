// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels'
import * as fhirInterfaces from '../optionalinterfaces'
/**
 * A parameter passed to or received from the operation.
 */
export class ParametersParameter extends fhirModels.BackboneElement implements fhirInterfaces.IParametersParameter {
  /**
   * The name of the parameter (reference to the operation definition).
   */
  name?: string|undefined;
  _name?: fhirModels.Element|undefined;
  /**
   * Only one level of nested parameters is allowed.
   */
  part?: fhirModels.ParametersParameter[]|undefined;
  /**
   * When resolving references in resources, the operation definition may specify how references may be resolved between parameters. If a reference cannot be resolved between the parameters, the application should fall back to it's general resource resolution methods.
   */
  resource?: fhirModels.FhirResource|undefined;
  /**
   * If the parameter is a data type.
   */
  valueBase64Binary?: string|undefined;
  _valueBase64Binary?: fhirModels.Element|undefined;
  /**
   * If the parameter is a data type.
   */
  valueBoolean?: boolean|undefined;
  _valueBoolean?: fhirModels.Element|undefined;
  /**
   * If the parameter is a data type.
   */
  valueCanonical?: string|undefined;
  _valueCanonical?: fhirModels.Element|undefined;
  /**
   * If the parameter is a data type.
   */
  valueCode?: string|undefined;
  _valueCode?: fhirModels.Element|undefined;
  /**
   * If the parameter is a data type.
   */
  valueDate?: string|undefined;
  _valueDate?: fhirModels.Element|undefined;
  /**
   * If the parameter is a data type.
   */
  valueDateTime?: string|undefined;
  _valueDateTime?: fhirModels.Element|undefined;
  /**
   * If the parameter is a data type.
   */
  valueDecimal?: number|undefined;
  _valueDecimal?: fhirModels.Element|undefined;
  /**
   * If the parameter is a data type.
   */
  valueId?: string|undefined;
  _valueId?: fhirModels.Element|undefined;
  /**
   * If the parameter is a data type.
   */
  valueInstant?: string|undefined;
  _valueInstant?: fhirModels.Element|undefined;
  /**
   * If the parameter is a data type.
   */
  valueInteger?: number|undefined;
  _valueInteger?: fhirModels.Element|undefined;
  /**
   * If the parameter is a data type.
   */
  valueMarkdown?: string|undefined;
  _valueMarkdown?: fhirModels.Element|undefined;
  /**
   * If the parameter is a data type.
   */
  valueOid?: string|undefined;
  _valueOid?: fhirModels.Element|undefined;
  /**
   * If the parameter is a data type.
   */
  valuePositiveInt?: number|undefined;
  _valuePositiveInt?: fhirModels.Element|undefined;
  /**
   * If the parameter is a data type.
   */
  valueString?: string|undefined;
  _valueString?: fhirModels.Element|undefined;
  /**
   * If the parameter is a data type.
   */
  valueTime?: string|undefined;
  _valueTime?: fhirModels.Element|undefined;
  /**
   * If the parameter is a data type.
   */
  valueUnsignedInt?: number|undefined;
  _valueUnsignedInt?: fhirModels.Element|undefined;
  /**
   * If the parameter is a data type.
   */
  valueUri?: string|undefined;
  _valueUri?: fhirModels.Element|undefined;
  /**
   * If the parameter is a data type.
   */
  valueUrl?: string|undefined;
  _valueUrl?: fhirModels.Element|undefined;
  /**
   * If the parameter is a data type.
   */
  valueUuid?: string|undefined;
  _valueUuid?: fhirModels.Element|undefined;
  /**
   * If the parameter is a data type.
   */
  valueAddress?: fhirModels.Address|undefined;
  /**
   * If the parameter is a data type.
   */
  valueAge?: fhirModels.Age|undefined;
  /**
   * If the parameter is a data type.
   */
  valueAnnotation?: fhirModels.Annotation|undefined;
  /**
   * If the parameter is a data type.
   */
  valueAttachment?: fhirModels.Attachment|undefined;
  /**
   * If the parameter is a data type.
   */
  valueCodeableConcept?: fhirModels.CodeableConcept|undefined;
  /**
   * If the parameter is a data type.
   */
  valueCoding?: fhirModels.Coding|undefined;
  /**
   * If the parameter is a data type.
   */
  valueContactPoint?: fhirModels.ContactPoint|undefined;
  /**
   * If the parameter is a data type.
   */
  valueCount?: fhirModels.Count|undefined;
  /**
   * If the parameter is a data type.
   */
  valueDistance?: fhirModels.Distance|undefined;
  /**
   * If the parameter is a data type.
   */
  valueDuration?: fhirModels.Duration|undefined;
  /**
   * If the parameter is a data type.
   */
  valueHumanName?: fhirModels.HumanName|undefined;
  /**
   * If the parameter is a data type.
   */
  valueIdentifier?: fhirModels.Identifier|undefined;
  /**
   * If the parameter is a data type.
   */
  valueMoney?: fhirModels.Money|undefined;
  /**
   * If the parameter is a data type.
   */
  valuePeriod?: fhirModels.Period|undefined;
  /**
   * If the parameter is a data type.
   */
  valueQuantity?: fhirModels.Quantity|undefined;
  /**
   * If the parameter is a data type.
   */
  valueRange?: fhirModels.Range|undefined;
  /**
   * If the parameter is a data type.
   */
  valueRatio?: fhirModels.Ratio|undefined;
  /**
   * If the parameter is a data type.
   */
  valueReference?: fhirModels.Reference|undefined;
  /**
   * If the parameter is a data type.
   */
  valueSampledData?: fhirModels.SampledData|undefined;
  /**
   * If the parameter is a data type.
   */
  valueSignature?: fhirModels.Signature|undefined;
  /**
   * If the parameter is a data type.
   */
  valueTiming?: fhirModels.Timing|undefined;
  /**
   * If the parameter is a data type.
   */
  valueContactDetail?: fhirModels.ContactDetail|undefined;
  /**
   * If the parameter is a data type.
   */
  valueContributor?: fhirModels.Contributor|undefined;
  /**
   * If the parameter is a data type.
   */
  valueDataRequirement?: fhirModels.DataRequirement|undefined;
  /**
   * If the parameter is a data type.
   */
  valueExpression?: fhirModels.Expression|undefined;
  /**
   * If the parameter is a data type.
   */
  valueParameterDefinition?: fhirModels.ParameterDefinition|undefined;
  /**
   * If the parameter is a data type.
   */
  valueRelatedArtifact?: fhirModels.RelatedArtifact|undefined;
  /**
   * If the parameter is a data type.
   */
  valueTriggerDefinition?: fhirModels.TriggerDefinition|undefined;
  /**
   * If the parameter is a data type.
   */
  valueUsageContext?: fhirModels.UsageContext|undefined;
  /**
   * If the parameter is a data type.
   */
  valueDosage?: fhirModels.Dosage|undefined;
  /**
   * If the parameter is a data type.
   */
  valueMeta?: fhirModels.Meta|undefined;
  /**
   * Default constructor for ParametersParameter from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.IParametersParameter>) {
    super(source);
    if (source["name"] !== undefined) { this.name = source.name; }
    if (source["_name"] !== undefined) { this._name = new fhirModels.Element(source._name); }
    if (source["part"] !== undefined) { this.part = source.part.map((x) => new fhirModels.ParametersParameter(x)); }
    if (source["resource"] !== undefined) { this.resource = (fhirModels.FhirResourceFactory(source.resource) ?? undefined); }
    if (source["valueBase64Binary"] !== undefined) { this.valueBase64Binary = source.valueBase64Binary; }
    if (source["_valueBase64Binary"] !== undefined) { this._valueBase64Binary = new fhirModels.Element(source._valueBase64Binary); }
    if (source["valueBoolean"] !== undefined) { this.valueBoolean = source.valueBoolean; }
    if (source["_valueBoolean"] !== undefined) { this._valueBoolean = new fhirModels.Element(source._valueBoolean); }
    if (source["valueCanonical"] !== undefined) { this.valueCanonical = source.valueCanonical; }
    if (source["_valueCanonical"] !== undefined) { this._valueCanonical = new fhirModels.Element(source._valueCanonical); }
    if (source["valueCode"] !== undefined) { this.valueCode = source.valueCode; }
    if (source["_valueCode"] !== undefined) { this._valueCode = new fhirModels.Element(source._valueCode); }
    if (source["valueDate"] !== undefined) { this.valueDate = source.valueDate; }
    if (source["_valueDate"] !== undefined) { this._valueDate = new fhirModels.Element(source._valueDate); }
    if (source["valueDateTime"] !== undefined) { this.valueDateTime = source.valueDateTime; }
    if (source["_valueDateTime"] !== undefined) { this._valueDateTime = new fhirModels.Element(source._valueDateTime); }
    if (source["valueDecimal"] !== undefined) { this.valueDecimal = source.valueDecimal; }
    if (source["_valueDecimal"] !== undefined) { this._valueDecimal = new fhirModels.Element(source._valueDecimal); }
    if (source["valueId"] !== undefined) { this.valueId = source.valueId; }
    if (source["_valueId"] !== undefined) { this._valueId = new fhirModels.Element(source._valueId); }
    if (source["valueInstant"] !== undefined) { this.valueInstant = source.valueInstant; }
    if (source["_valueInstant"] !== undefined) { this._valueInstant = new fhirModels.Element(source._valueInstant); }
    if (source["valueInteger"] !== undefined) { this.valueInteger = source.valueInteger; }
    if (source["_valueInteger"] !== undefined) { this._valueInteger = new fhirModels.Element(source._valueInteger); }
    if (source["valueMarkdown"] !== undefined) { this.valueMarkdown = source.valueMarkdown; }
    if (source["_valueMarkdown"] !== undefined) { this._valueMarkdown = new fhirModels.Element(source._valueMarkdown); }
    if (source["valueOid"] !== undefined) { this.valueOid = source.valueOid; }
    if (source["_valueOid"] !== undefined) { this._valueOid = new fhirModels.Element(source._valueOid); }
    if (source["valuePositiveInt"] !== undefined) { this.valuePositiveInt = source.valuePositiveInt; }
    if (source["_valuePositiveInt"] !== undefined) { this._valuePositiveInt = new fhirModels.Element(source._valuePositiveInt); }
    if (source["valueString"] !== undefined) { this.valueString = source.valueString; }
    if (source["_valueString"] !== undefined) { this._valueString = new fhirModels.Element(source._valueString); }
    if (source["valueTime"] !== undefined) { this.valueTime = source.valueTime; }
    if (source["_valueTime"] !== undefined) { this._valueTime = new fhirModels.Element(source._valueTime); }
    if (source["valueUnsignedInt"] !== undefined) { this.valueUnsignedInt = source.valueUnsignedInt; }
    if (source["_valueUnsignedInt"] !== undefined) { this._valueUnsignedInt = new fhirModels.Element(source._valueUnsignedInt); }
    if (source["valueUri"] !== undefined) { this.valueUri = source.valueUri; }
    if (source["_valueUri"] !== undefined) { this._valueUri = new fhirModels.Element(source._valueUri); }
    if (source["valueUrl"] !== undefined) { this.valueUrl = source.valueUrl; }
    if (source["_valueUrl"] !== undefined) { this._valueUrl = new fhirModels.Element(source._valueUrl); }
    if (source["valueUuid"] !== undefined) { this.valueUuid = source.valueUuid; }
    if (source["_valueUuid"] !== undefined) { this._valueUuid = new fhirModels.Element(source._valueUuid); }
    if (source["valueAddress"] !== undefined) { this.valueAddress = new fhirModels.Address(source.valueAddress); }
    if (source["valueAge"] !== undefined) { this.valueAge = new fhirModels.Age(source.valueAge); }
    if (source["valueAnnotation"] !== undefined) { this.valueAnnotation = new fhirModels.Annotation(source.valueAnnotation); }
    if (source["valueAttachment"] !== undefined) { this.valueAttachment = new fhirModels.Attachment(source.valueAttachment); }
    if (source["valueCodeableConcept"] !== undefined) { this.valueCodeableConcept = new fhirModels.CodeableConcept(source.valueCodeableConcept); }
    if (source["valueCoding"] !== undefined) { this.valueCoding = new fhirModels.Coding(source.valueCoding); }
    if (source["valueContactPoint"] !== undefined) { this.valueContactPoint = new fhirModels.ContactPoint(source.valueContactPoint); }
    if (source["valueCount"] !== undefined) { this.valueCount = new fhirModels.Count(source.valueCount); }
    if (source["valueDistance"] !== undefined) { this.valueDistance = new fhirModels.Distance(source.valueDistance); }
    if (source["valueDuration"] !== undefined) { this.valueDuration = new fhirModels.Duration(source.valueDuration); }
    if (source["valueHumanName"] !== undefined) { this.valueHumanName = new fhirModels.HumanName(source.valueHumanName); }
    if (source["valueIdentifier"] !== undefined) { this.valueIdentifier = new fhirModels.Identifier(source.valueIdentifier); }
    if (source["valueMoney"] !== undefined) { this.valueMoney = new fhirModels.Money(source.valueMoney); }
    if (source["valuePeriod"] !== undefined) { this.valuePeriod = new fhirModels.Period(source.valuePeriod); }
    if (source["valueQuantity"] !== undefined) { this.valueQuantity = new fhirModels.Quantity(source.valueQuantity); }
    if (source["valueRange"] !== undefined) { this.valueRange = new fhirModels.Range(source.valueRange); }
    if (source["valueRatio"] !== undefined) { this.valueRatio = new fhirModels.Ratio(source.valueRatio); }
    if (source["valueReference"] !== undefined) { this.valueReference = new fhirModels.Reference(source.valueReference); }
    if (source["valueSampledData"] !== undefined) { this.valueSampledData = new fhirModels.SampledData(source.valueSampledData); }
    if (source["valueSignature"] !== undefined) { this.valueSignature = new fhirModels.Signature(source.valueSignature); }
    if (source["valueTiming"] !== undefined) { this.valueTiming = new fhirModels.Timing(source.valueTiming); }
    if (source["valueContactDetail"] !== undefined) { this.valueContactDetail = new fhirModels.ContactDetail(source.valueContactDetail); }
    if (source["valueContributor"] !== undefined) { this.valueContributor = new fhirModels.Contributor(source.valueContributor); }
    if (source["valueDataRequirement"] !== undefined) { this.valueDataRequirement = new fhirModels.DataRequirement(source.valueDataRequirement); }
    if (source["valueExpression"] !== undefined) { this.valueExpression = new fhirModels.Expression(source.valueExpression); }
    if (source["valueParameterDefinition"] !== undefined) { this.valueParameterDefinition = new fhirModels.ParameterDefinition(source.valueParameterDefinition); }
    if (source["valueRelatedArtifact"] !== undefined) { this.valueRelatedArtifact = new fhirModels.RelatedArtifact(source.valueRelatedArtifact); }
    if (source["valueTriggerDefinition"] !== undefined) { this.valueTriggerDefinition = new fhirModels.TriggerDefinition(source.valueTriggerDefinition); }
    if (source["valueUsageContext"] !== undefined) { this.valueUsageContext = new fhirModels.UsageContext(source.valueUsageContext); }
    if (source["valueDosage"] !== undefined) { this.valueDosage = new fhirModels.Dosage(source.valueDosage); }
    if (source["valueMeta"] !== undefined) { this.valueMeta = new fhirModels.Meta(source.valueMeta); }
  }
  /**
   * Factory function to create a ParametersParameter from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.IParametersParameter):ParametersParameter {
    var dest:ParametersParameter = new ParametersParameter(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `ParametersParameter is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current ParametersParameter contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["name"] === undefined) { missingElements.push("name"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
/**
 * This resource is a non-persisted resource used to pass information into and back from an [operation](operations.html). It has no other use, and there is no RESTful endpoint associated with it.
 */
export class Parameters extends fhirModels.Resource implements fhirInterfaces.IParameters {
  /**
   * Resource Type Name
   */
  readonly resourceType = "Parameters";
  /**
   * A parameter passed to or received from the operation.
   */
  parameter?: fhirModels.ParametersParameter[]|undefined;
  /**
   * Default constructor for Parameters from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.IParameters>) {
    super(source);
    if ((source['resourceType'] !== "Parameters") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a Parameters'; }
    if (source["parameter"] !== undefined) { this.parameter = source.parameter.map((x) => new fhirModels.ParametersParameter(x)); }
  }
  /**
   * Factory function to create a Parameters from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.IParameters):Parameters {
    var dest:Parameters = new Parameters(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `Parameters is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current Parameters contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
