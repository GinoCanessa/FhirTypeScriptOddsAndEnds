// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels'
import * as fhirInterfaces from '../optionalinterfaces'
/**
 * All the identified characteristics must be true for an entity to a member of the group.
 */
export class GroupCharacteristic extends fhirModels.BackboneElement implements fhirInterfaces.IGroupCharacteristic {
  /**
   * A code that identifies the kind of trait being asserted.
   */
  code?: fhirModels.CodeableConcept|undefined;
  /**
   * This is labeled as "Is Modifier" because applications cannot wrongly include excluded members as included or vice versa.
   */
  exclude?: boolean|undefined;
  _exclude?: fhirModels.Element|undefined;
  /**
   * The period over which the characteristic is tested; e.g. the patient had an operation during the month of June.
   */
  period?: fhirModels.Period|undefined;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueCodeableConcept?: fhirModels.CodeableConcept|undefined;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueBoolean?: boolean|undefined;
  _valueBoolean?: fhirModels.Element|undefined;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueQuantity?: fhirModels.Quantity|undefined;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueRange?: fhirModels.Range|undefined;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueReference?: fhirModels.Reference|undefined;
  /**
   * Default constructor for GroupCharacteristic from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.IGroupCharacteristic>) {
    super(source);
    if (source["code"] !== undefined) { this.code = new fhirModels.CodeableConcept(source.code); }
    if (source["exclude"] !== undefined) { this.exclude = source.exclude; }
    if (source["_exclude"] !== undefined) { this._exclude = new fhirModels.Element(source._exclude); }
    if (source["period"] !== undefined) { this.period = new fhirModels.Period(source.period); }
    if (source["valueCodeableConcept"] !== undefined) { this.valueCodeableConcept = new fhirModels.CodeableConcept(source.valueCodeableConcept); }
    if (source["valueBoolean"] !== undefined) { this.valueBoolean = source.valueBoolean; }
    if (source["_valueBoolean"] !== undefined) { this._valueBoolean = new fhirModels.Element(source._valueBoolean); }
    if (source["valueQuantity"] !== undefined) { this.valueQuantity = new fhirModels.Quantity(source.valueQuantity); }
    if (source["valueRange"] !== undefined) { this.valueRange = new fhirModels.Range(source.valueRange); }
    if (source["valueReference"] !== undefined) { this.valueReference = new fhirModels.Reference(source.valueReference); }
  }
  /**
   * Factory function to create a GroupCharacteristic from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.IGroupCharacteristic):GroupCharacteristic {
    var dest:GroupCharacteristic = new GroupCharacteristic(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `GroupCharacteristic is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current GroupCharacteristic contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["code"] === undefined) { missingElements.push("code"); }
    if (this["exclude"] === undefined) { missingElements.push("exclude"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
/**
 * Identifies the resource instances that are members of the group.
 */
export class GroupMember extends fhirModels.BackboneElement implements fhirInterfaces.IGroupMember {
  /**
   * A reference to the entity that is a member of the group. Must be consistent with Group.type. If the entity is another group, then the type must be the same.
   */
  entity?: fhirModels.Reference|undefined;
  /**
   * A flag to indicate that the member is no longer in the group, but previously may have been a member.
   */
  inactive?: boolean|undefined;
  _inactive?: fhirModels.Element|undefined;
  /**
   * The period that the member was in the group, if known.
   */
  period?: fhirModels.Period|undefined;
  /**
   * Default constructor for GroupMember from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.IGroupMember>) {
    super(source);
    if (source["entity"] !== undefined) { this.entity = new fhirModels.Reference(source.entity); }
    if (source["inactive"] !== undefined) { this.inactive = source.inactive; }
    if (source["_inactive"] !== undefined) { this._inactive = new fhirModels.Element(source._inactive); }
    if (source["period"] !== undefined) { this.period = new fhirModels.Period(source.period); }
  }
  /**
   * Factory function to create a GroupMember from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.IGroupMember):GroupMember {
    var dest:GroupMember = new GroupMember(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `GroupMember is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current GroupMember contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["entity"] === undefined) { missingElements.push("entity"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
/**
 * Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
 */
export class Group extends fhirModels.DomainResource implements fhirInterfaces.IGroup {
  /**
   * Resource Type Name
   */
  readonly resourceType = "Group";
  /**
   * Indicates whether the record for the group is available for use or is merely being retained for historical purposes.
   */
  active?: boolean|undefined;
  _active?: fhirModels.Element|undefined;
  /**
   * If true, indicates that the resource refers to a specific group of real individuals.  If false, the group defines a set of intended individuals.
   */
  actual?: boolean|undefined;
  _actual?: fhirModels.Element|undefined;
  /**
   * All the identified characteristics must be true for an entity to a member of the group.
   */
  characteristic?: fhirModels.GroupCharacteristic[]|undefined;
  /**
   * This would generally be omitted for Person resources.
   */
  code?: fhirModels.CodeableConcept|undefined;
  /**
   * A unique business identifier for this group.
   */
  identifier?: fhirModels.Identifier[]|undefined;
  /**
   * This does not strictly align with ownership of a herd or flock, but may suffice to represent that relationship in simple cases. More complex cases will require an extension.
   */
  managingEntity?: fhirModels.Reference|undefined;
  /**
   * Identifies the resource instances that are members of the group.
   */
  member?: fhirModels.GroupMember[]|undefined;
  /**
   * A label assigned to the group for human identification and communication.
   */
  name?: string|undefined;
  _name?: fhirModels.Element|undefined;
  /**
   * Note that the quantity may be less than the number of members if some of the members are not active.
   */
  quantity?: number|undefined;
  _quantity?: fhirModels.Element|undefined;
  /**
   * Group members SHALL be of the appropriate resource type (Patient for person or animal; or Practitioner, Device, Medication or Substance for the other types.).
   */
  type?: GroupTypeEnum|undefined;
  _type?: fhirModels.Element|undefined;
  /**
   * Default constructor for Group from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.IGroup>) {
    super(source);
    if ((source['resourceType'] !== "Group") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a Group'; }
    if (source["active"] !== undefined) { this.active = source.active; }
    if (source["_active"] !== undefined) { this._active = new fhirModels.Element(source._active); }
    if (source["actual"] !== undefined) { this.actual = source.actual; }
    if (source["_actual"] !== undefined) { this._actual = new fhirModels.Element(source._actual); }
    if (source["characteristic"] !== undefined) { this.characteristic = source.characteristic.map((x) => new fhirModels.GroupCharacteristic(x)); }
    if (source["code"] !== undefined) { this.code = new fhirModels.CodeableConcept(source.code); }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x)); }
    if (source["managingEntity"] !== undefined) { this.managingEntity = new fhirModels.Reference(source.managingEntity); }
    if (source["member"] !== undefined) { this.member = source.member.map((x) => new fhirModels.GroupMember(x)); }
    if (source["name"] !== undefined) { this.name = source.name; }
    if (source["_name"] !== undefined) { this._name = new fhirModels.Element(source._name); }
    if (source["quantity"] !== undefined) { this.quantity = source.quantity; }
    if (source["_quantity"] !== undefined) { this._quantity = new fhirModels.Element(source._quantity); }
    if (source["type"] !== undefined) { this.type = source.type; }
    if (source["_type"] !== undefined) { this._type = new fhirModels.Element(source._type); }
  }
  /**
   * Factory function to create a Group from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.IGroup):Group {
    var dest:Group = new Group(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `Group is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current Group contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["actual"] === undefined) { missingElements.push("actual"); }
    if (this["type"] === undefined) { missingElements.push("type"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
/**
 * Code Values for the Group.type field
 */
export enum GroupTypeEnum {
  PERSON = "person",
  ANIMAL = "animal",
  PRACTITIONER = "practitioner",
  DEVICE = "device",
  MEDICATION = "medication",
  SUBSTANCE = "substance",
}
