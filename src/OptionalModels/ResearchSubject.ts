// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels'
import * as fhirInterfaces from '../optionalinterfaces'
/**
 * A physical entity which is the primary unit of operational and/or administrative interest in a study.
 */
export class ResearchSubject extends fhirModels.DomainResource implements fhirInterfaces.IResearchSubject {
  /**
   * Resource Type Name
   */
  readonly resourceType = "ResearchSubject";
  /**
   * The name of the arm in the study the subject actually followed as part of this study.
   */
  actualArm?: string|undefined;
  _actualArm?: fhirModels.Element|undefined;
  /**
   * The name of the arm in the study the subject is expected to follow as part of this study.
   */
  assignedArm?: string|undefined;
  _assignedArm?: fhirModels.Element|undefined;
  /**
   * A record of the patient's informed agreement to participate in the study.
   */
  consent?: fhirModels.Reference|undefined;
  /**
   * Identifiers assigned to this research subject for a study.
   */
  identifier?: fhirModels.Identifier[]|undefined;
  /**
   * The record of the person or animal who is involved in the study.
   */
  individual?: fhirModels.Reference|undefined;
  /**
   * The dates the subject began and ended their participation in the study.
   */
  period?: fhirModels.Period|undefined;
  /**
   * The current state of the subject.
   */
  status?: ResearchSubjectStatusEnum|undefined;
  _status?: fhirModels.Element|undefined;
  /**
   * Reference to the study the subject is participating in.
   */
  study?: fhirModels.Reference|undefined;
  /**
   * Default constructor for ResearchSubject from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.IResearchSubject>) {
    super(source);
    if ((source['resourceType'] !== "ResearchSubject") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a ResearchSubject'; }
    if (source["actualArm"] !== undefined) { this.actualArm = source.actualArm; }
    if (source["_actualArm"] !== undefined) { this._actualArm = new fhirModels.Element(source._actualArm); }
    if (source["assignedArm"] !== undefined) { this.assignedArm = source.assignedArm; }
    if (source["_assignedArm"] !== undefined) { this._assignedArm = new fhirModels.Element(source._assignedArm); }
    if (source["consent"] !== undefined) { this.consent = new fhirModels.Reference(source.consent); }
    if (source["identifier"] !== undefined) { this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x)); }
    if (source["individual"] !== undefined) { this.individual = new fhirModels.Reference(source.individual); }
    if (source["period"] !== undefined) { this.period = new fhirModels.Period(source.period); }
    if (source["status"] !== undefined) { this.status = source.status; }
    if (source["_status"] !== undefined) { this._status = new fhirModels.Element(source._status); }
    if (source["study"] !== undefined) { this.study = new fhirModels.Reference(source.study); }
  }
  /**
   * Factory function to create a ResearchSubject from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.IResearchSubject):ResearchSubject {
    var dest:ResearchSubject = new ResearchSubject(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `ResearchSubject is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current ResearchSubject contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["individual"] === undefined) { missingElements.push("individual"); }
    if (this["status"] === undefined) { missingElements.push("status"); }
    if (this["study"] === undefined) { missingElements.push("study"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
/**
 * Code Values for the ResearchSubject.status field
 */
export enum ResearchSubjectStatusEnum {
  CANDIDATE = "candidate",
  ELIGIBLE = "eligible",
  FOLLOW_UP = "follow-up",
  INELIGIBLE = "ineligible",
  NOT_REGISTERED = "not-registered",
  OFF_STUDY = "off-study",
  ON_STUDY = "on-study",
  ON_STUDY_INTERVENTION = "on-study-intervention",
  ON_STUDY_OBSERVATION = "on-study-observation",
  PENDING_ON_STUDY = "pending-on-study",
  POTENTIAL_CANDIDATE = "potential-candidate",
  SCREENING = "screening",
  WITHDRAWN = "withdrawn",
}
