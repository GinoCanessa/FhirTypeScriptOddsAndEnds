// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../optionalmodels'
import * as fhirInterfaces from '../optionalinterfaces'
/**
 * A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
 */
export class Signature extends fhirModels.Element implements fhirInterfaces.ISignature {
  /**
   * Where the signature type is an XML DigSig, the signed content is a FHIR Resource(s), the signature is of the XML form of the Resource(s) using  XML-Signature (XMLDIG) "Detached Signature" form.
   */
  data?: string|undefined;
  _data?: fhirModels.Element|undefined;
  /**
   * The party that can't sign. For example a child.
   */
  onBehalfOf?: fhirModels.Reference|undefined;
  /**
   * A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jose for JWS, and image/* for a graphical image of a signature, etc.
   */
  sigFormat?: string|undefined;
  _sigFormat?: fhirModels.Element|undefined;
  /**
   * "xml", "json" and "ttl" are allowed, which describe the simple encodings described in the specification (and imply appropriate bundle support). Otherwise, mime types are legal here.
   */
  targetFormat?: string|undefined;
  _targetFormat?: fhirModels.Element|undefined;
  /**
   * Examples include attesting to: authorship, correct transcription, and witness of specific event. Also known as a &amp;quot;Commitment Type Indication&amp;quot;.
   */
  type?: fhirModels.Coding[]|undefined;
  /**
   * This should agree with the information in the signature.
   */
  when?: string|undefined;
  _when?: fhirModels.Element|undefined;
  /**
   * This should agree with the information in the signature.
   */
  who?: fhirModels.Reference|undefined;
  /**
   * Default constructor for Signature from an object that MAY NOT contain all required elements.
   */
  constructor(source:Partial<fhirInterfaces.ISignature>) {
    super(source);
    if (source["data"] !== undefined) { this.data = source.data; }
    if (source["_data"] !== undefined) { this._data = new fhirModels.Element(source._data); }
    if (source["onBehalfOf"] !== undefined) { this.onBehalfOf = new fhirModels.Reference(source.onBehalfOf); }
    if (source["sigFormat"] !== undefined) { this.sigFormat = source.sigFormat; }
    if (source["_sigFormat"] !== undefined) { this._sigFormat = new fhirModels.Element(source._sigFormat); }
    if (source["targetFormat"] !== undefined) { this.targetFormat = source.targetFormat; }
    if (source["_targetFormat"] !== undefined) { this._targetFormat = new fhirModels.Element(source._targetFormat); }
    if (source["type"] !== undefined) { this.type = source.type.map((x) => new fhirModels.Coding(x)); }
    if (source["when"] !== undefined) { this.when = source.when; }
    if (source["_when"] !== undefined) { this._when = new fhirModels.Element(source._when); }
    if (source["who"] !== undefined) { this.who = new fhirModels.Reference(source.who); }
  }
  /**
   * Factory function to create a Signature from an object that MUST contain all required elements.
   */
  static CreateStrict(source:fhirInterfaces.ISignature):Signature {
    var dest:Signature = new Signature(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `Signature is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
  /**
   * Check if the current Signature contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if ((this["type"] === undefined) || (this["type"].length === 0)) { missingElements.push("type"); }
    if (this["when"] === undefined) { missingElements.push("when"); }
    if (this["who"] === undefined) { missingElements.push("who"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
}
