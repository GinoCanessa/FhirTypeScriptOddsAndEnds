// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/reference-handling-policy|4.0.1

import { Coding } from '../fhir.js'

/**
 * A set of flags that defines how references are supported.
 */
export const ReferenceHandlingPolicyValueSet = {
  /**
   * enforced: The server enforces that references have integrity - e.g. it ensures that references can always be resolved. This is typically the case for clinical record systems, but often not the case for middleware/proxy systems.
   */
  ReferenceIntegrityEnforced: new Coding({
    display: "Reference Integrity Enforced",
    code: "enforced",
    system: "http://hl7.org/fhir/reference-handling-policy",
  }),
  /**
   * literal: The server supports and populates Literal references (i.e. using Reference.reference) where they are known (this code does not guarantee that all references are literal; see 'enforced').
   */
  LiteralReferences: new Coding({
    display: "Literal References",
    code: "literal",
    system: "http://hl7.org/fhir/reference-handling-policy",
  }),
  /**
   * local: The server does not support references that point to other servers.
   */
  LocalReferencesOnly: new Coding({
    display: "Local References Only",
    code: "local",
    system: "http://hl7.org/fhir/reference-handling-policy",
  }),
  /**
   * logical: The server allows logical references (i.e. using Reference.identifier).
   */
  LogicalReferences: new Coding({
    display: "Logical References",
    code: "logical",
    system: "http://hl7.org/fhir/reference-handling-policy",
  }),
  /**
   * resolves: The server will attempt to resolve logical references to literal references - i.e. converting Reference.identifier to Reference.reference (if resolution fails, the server may still accept resources; see logical).
   */
  ResolvesReferences: new Coding({
    display: "Resolves References",
    code: "resolves",
    system: "http://hl7.org/fhir/reference-handling-policy",
  }),
} as const;

/**
 * A set of flags that defines how references are supported.
 */
export type ReferenceHandlingPolicyValueSetType = typeof ReferenceHandlingPolicyValueSet;

/**
 * A set of flags that defines how references are supported.
 */
export enum ReferenceHandlingPolicyValueSetEnum {
  /**
   * enforced: The server enforces that references have integrity - e.g. it ensures that references can always be resolved. This is typically the case for clinical record systems, but often not the case for middleware/proxy systems.
   */
  ReferenceIntegrityEnforced = "enforced",
  /**
   * literal: The server supports and populates Literal references (i.e. using Reference.reference) where they are known (this code does not guarantee that all references are literal; see 'enforced').
   */
  LiteralReferences = "literal",
  /**
   * local: The server does not support references that point to other servers.
   */
  LocalReferencesOnly = "local",
  /**
   * logical: The server allows logical references (i.e. using Reference.identifier).
   */
  LogicalReferences = "logical",
  /**
   * resolves: The server will attempt to resolve logical references to literal references - i.e. converting Reference.identifier to Reference.reference (if resolution fails, the server may still accept resources; see logical).
   */
  ResolvesReferences = "resolves",
}
