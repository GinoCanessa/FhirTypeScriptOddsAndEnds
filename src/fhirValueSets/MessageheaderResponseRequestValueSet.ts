// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/messageheader-response-request|4.0.1

import { Coding } from '../fhir.js'

/**
 * HL7-defined table of codes which identify conditions under which acknowledgments are required to be returned in response to a message.
 */
export const MessageheaderResponseRequestValueSet = {
  /**
   * always: initiator expects a response for this message.
   */
  Always: new Coding({
    display: "Always",
    code: "always",
    system: "http://hl7.org/fhir/messageheader-response-request",
  }),
  /**
   * never: initiator does not expect a response.
   */
  Never: new Coding({
    display: "Never",
    code: "never",
    system: "http://hl7.org/fhir/messageheader-response-request",
  }),
  /**
   * on-error: initiator expects a response only if in error.
   */
  ErrorRejectConditionsOnly: new Coding({
    display: "Error/reject conditions only",
    code: "on-error",
    system: "http://hl7.org/fhir/messageheader-response-request",
  }),
  /**
   * on-success: initiator expects a response only if successful.
   */
  SuccessfulCompletionOnly: new Coding({
    display: "Successful completion only",
    code: "on-success",
    system: "http://hl7.org/fhir/messageheader-response-request",
  }),
} as const;

/**
 * HL7-defined table of codes which identify conditions under which acknowledgments are required to be returned in response to a message.
 */
export type MessageheaderResponseRequestValueSetType = typeof MessageheaderResponseRequestValueSet;

/**
 * HL7-defined table of codes which identify conditions under which acknowledgments are required to be returned in response to a message.
 */
export enum MessageheaderResponseRequestValueSetEnum {
  /**
   * always: initiator expects a response for this message.
   */
  Always = "always",
  /**
   * never: initiator does not expect a response.
   */
  Never = "never",
  /**
   * on-error: initiator expects a response only if in error.
   */
  ErrorRejectConditionsOnly = "on-error",
  /**
   * on-success: initiator expects a response only if successful.
   */
  SuccessfulCompletionOnly = "on-success",
}
