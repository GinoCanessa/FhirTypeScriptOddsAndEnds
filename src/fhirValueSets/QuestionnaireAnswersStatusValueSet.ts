// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/questionnaire-answers-status|4.0.1

import { Coding } from '../fhir.js'

/**
 * Lifecycle status of the questionnaire response.
 */
export const QuestionnaireAnswersStatusValueSet = {
  /**
   * amended: This QuestionnaireResponse has been filled out with answers, then marked as complete, yet changes or additions have been made to it afterwards.
   */
  Amended: new Coding({
    display: "Amended",
    code: "amended",
    system: "http://hl7.org/fhir/questionnaire-answers-status",
  }),
  /**
   * completed: This QuestionnaireResponse has been filled out with answers and the current content is regarded as definitive.
   */
  Completed: new Coding({
    display: "Completed",
    code: "completed",
    system: "http://hl7.org/fhir/questionnaire-answers-status",
  }),
  /**
   * entered-in-error: This QuestionnaireResponse was entered in error and voided.
   */
  EnteredInError: new Coding({
    display: "Entered in Error",
    code: "entered-in-error",
    system: "http://hl7.org/fhir/questionnaire-answers-status",
  }),
  /**
   * in-progress: This QuestionnaireResponse has been partially filled out with answers but changes or additions are still expected to be made to it.
   */
  InProgress: new Coding({
    display: "In Progress",
    code: "in-progress",
    system: "http://hl7.org/fhir/questionnaire-answers-status",
  }),
  /**
   * stopped: This QuestionnaireResponse has been partially filled out with answers but has been abandoned. It is unknown whether changes or additions are expected to be made to it.
   */
  Stopped: new Coding({
    display: "Stopped",
    code: "stopped",
    system: "http://hl7.org/fhir/questionnaire-answers-status",
  }),
} as const;

/**
 * Lifecycle status of the questionnaire response.
 */
export type QuestionnaireAnswersStatusValueSetType = typeof QuestionnaireAnswersStatusValueSet;

/**
 * Lifecycle status of the questionnaire response.
 */
export enum QuestionnaireAnswersStatusValueSetEnum {
  /**
   * amended: This QuestionnaireResponse has been filled out with answers, then marked as complete, yet changes or additions have been made to it afterwards.
   */
  Amended = "amended",
  /**
   * completed: This QuestionnaireResponse has been filled out with answers and the current content is regarded as definitive.
   */
  Completed = "completed",
  /**
   * entered-in-error: This QuestionnaireResponse was entered in error and voided.
   */
  EnteredInError = "entered-in-error",
  /**
   * in-progress: This QuestionnaireResponse has been partially filled out with answers but changes or additions are still expected to be made to it.
   */
  InProgress = "in-progress",
  /**
   * stopped: This QuestionnaireResponse has been partially filled out with answers but has been abandoned. It is unknown whether changes or additions are expected to be made to it.
   */
  Stopped = "stopped",
}
