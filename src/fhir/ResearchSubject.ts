// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * A physical entity which is the primary unit of operational and/or administrative interest in a study.
 */
export type IResearchSubject = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "ResearchSubject";
  /**
   * The name of the arm in the study the subject actually followed as part of this study.
   */
  actualArm?: string|undefined;
  _actualArm?: fhir.IFhirElement|undefined;
  /**
   * The name of the arm in the study the subject is expected to follow as part of this study.
   */
  assignedArm?: string|undefined;
  _assignedArm?: fhir.IFhirElement|undefined;
  /**
   * A record of the patient's informed agreement to participate in the study.
   */
  consent?: fhir.IReference|undefined;
  /**
   * Identifiers assigned to this research subject for a study.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * The record of the person or animal who is involved in the study.
   */
  individual: fhir.IReference|null;
  /**
   * The dates the subject began and ended their participation in the study.
   */
  period?: fhir.IPeriod|undefined;
  /**
   * The current state of the subject.
   */
  status: ResearchSubjectStatusEnum|null;
  _status?: fhir.IFhirElement|undefined;
  /**
   * Reference to the study the subject is participating in.
   */
  study: fhir.IReference|null;
}
/**
 * A physical entity which is the primary unit of operational and/or administrative interest in a study.
 */
export class ResearchSubject extends fhir.DomainResource implements fhir.IResearchSubject {
  /**
   * Resource Type Name
   */
  public override resourceType: "ResearchSubject";
  /**
   * The name of the arm in the study the subject actually followed as part of this study.
   */
  public actualArm?: string|undefined;
  public _actualArm?: fhir.FhirElement|undefined;
  /**
   * The name of the arm in the study the subject is expected to follow as part of this study.
   */
  public assignedArm?: string|undefined;
  public _assignedArm?: fhir.FhirElement|undefined;
  /**
   * A record of the patient's informed agreement to participate in the study.
   */
  public consent?: fhir.Reference|undefined;
  /**
   * Identifiers assigned to this research subject for a study.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * The record of the person or animal who is involved in the study.
   */
  public individual: fhir.Reference|null;
  /**
   * The dates the subject began and ended their participation in the study.
   */
  public period?: fhir.Period|undefined;
  /**
   * The current state of the subject.
   */
  public status: ResearchSubjectStatusEnum|null;
  public _status?: fhir.FhirElement|undefined;
  /**
   * Reference to the study the subject is participating in.
   */
  public study: fhir.Reference|null;
  /**
   * Default constructor for ResearchSubject - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IResearchSubject> = {}) {
    super(source);
    this.resourceType = 'ResearchSubject';
    if (source["actualArm"]) { this.actualArm = source.actualArm; }
    if (source["_actualArm"]) { this._actualArm = new fhir.FhirElement(source._actualArm!); }
    if (source["assignedArm"]) { this.assignedArm = source.assignedArm; }
    if (source["_assignedArm"]) { this._assignedArm = new fhir.FhirElement(source._assignedArm!); }
    if (source["consent"]) { this.consent = new fhir.Reference(source.consent!); }
    if (source["identifier"]) { this.identifier = source.identifier.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    this.individual = null;
    if (source["individual"]) { this.individual = new fhir.Reference(source.individual!); }
    if (this.individual === undefined) { this.individual = null }
    if (source["period"]) { this.period = new fhir.Period(source.period!); }
    this.status = null;
    if (source["status"]) { this.status = source.status; }
    if (this.status === undefined) { this.status = null }
    if (source["_status"]) { this._status = new fhir.FhirElement(source._status!); }
    this.study = null;
    if (source["study"]) { this.study = new fhir.Reference(source.study!); }
    if (this.study === undefined) { this.study = null }
  }
  /**
   * Check if the current ResearchSubject contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["individual"] === undefined) { missingElements.push("individual"); }
    if (this["status"] === undefined) { missingElements.push("status"); }
    if (this["study"] === undefined) { missingElements.push("study"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ResearchSubject from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IResearchSubject):ResearchSubject {
    var dest:ResearchSubject = new ResearchSubject(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `ResearchSubject is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the ResearchSubject.status field
 */
export enum ResearchSubjectStatusEnum {
  CANDIDATE = "candidate",
  ELIGIBLE = "eligible",
  FOLLOW_UP = "follow-up",
  INELIGIBLE = "ineligible",
  NOT_REGISTERED = "not-registered",
  OFF_STUDY = "off-study",
  ON_STUDY = "on-study",
  ON_STUDY_INTERVENTION = "on-study-intervention",
  ON_STUDY_OBSERVATION = "on-study-observation",
  PENDING_ON_STUDY = "pending-on-study",
  POTENTIAL_CANDIDATE = "potential-candidate",
  SCREENING = "screening",
  WITHDRAWN = "withdrawn",
}
