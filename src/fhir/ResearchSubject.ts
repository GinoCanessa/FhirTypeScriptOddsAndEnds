// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ResearchSubject

import * as fhir from '../fhir.js'

import { ResearchSubjectStatusValueSet, ResearchSubjectStatusValueSetType, ResearchSubjectStatusValueSetEnum } from '../fhirValueSets/ResearchSubjectStatusValueSet.js'

/**
 * A physical entity which is the primary unit of operational and/or administrative interest in a study.
 */
export type IResearchSubject = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "ResearchSubject";
  /**
   * Identifiers assigned to this research subject for a study.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * The current state of the subject.
   */
  status: ResearchSubjectStatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: ResearchSubject.status
   */
  _status?: fhir.IFhirElement|undefined;
  /**
   * The dates the subject began and ended their participation in the study.
   */
  period?: fhir.IPeriod|undefined;
  /**
   * Reference to the study the subject is participating in.
   */
  study: fhir.IReference|null;
  /**
   * The record of the person or animal who is involved in the study.
   */
  individual: fhir.IReference|null;
  /**
   * The name of the arm in the study the subject is expected to follow as part of this study.
   */
  assignedArm?: string|undefined;
  /**
   * Extended properties for primitive element: ResearchSubject.assignedArm
   */
  _assignedArm?: fhir.IFhirElement|undefined;
  /**
   * The name of the arm in the study the subject actually followed as part of this study.
   */
  actualArm?: string|undefined;
  /**
   * Extended properties for primitive element: ResearchSubject.actualArm
   */
  _actualArm?: fhir.IFhirElement|undefined;
  /**
   * A record of the patient's informed agreement to participate in the study.
   */
  consent?: fhir.IReference|undefined;
}

/**
 * A physical entity which is the primary unit of operational and/or administrative interest in a study.
 */
export class ResearchSubject extends fhir.DomainResource implements IResearchSubject {
  /**
   * Resource Type Name
   */
  public resourceType: "ResearchSubject";
  /**
   * Identifiers assigned to this research subject for a study.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * The current state of the subject.
   */
  public status: ResearchSubjectStatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: ResearchSubject.status
   */
  public _status?: fhir.FhirElement|undefined;
  /**
   * The dates the subject began and ended their participation in the study.
   */
  public period?: fhir.Period|undefined;
  /**
   * Reference to the study the subject is participating in.
   */
  public study: fhir.Reference|null;
  /**
   * The record of the person or animal who is involved in the study.
   */
  public individual: fhir.Reference|null;
  /**
   * The name of the arm in the study the subject is expected to follow as part of this study.
   */
  public assignedArm?: string|undefined;
  /**
   * Extended properties for primitive element: ResearchSubject.assignedArm
   */
  public _assignedArm?: fhir.FhirElement|undefined;
  /**
   * The name of the arm in the study the subject actually followed as part of this study.
   */
  public actualArm?: string|undefined;
  /**
   * Extended properties for primitive element: ResearchSubject.actualArm
   */
  public _actualArm?: fhir.FhirElement|undefined;
  /**
   * A record of the patient's informed agreement to participate in the study.
   */
  public consent?: fhir.Reference|undefined;
  /**
   * Default constructor for ResearchSubject - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IResearchSubject> = { }) {
    super(source);
    this.resourceType = 'ResearchSubject';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['status']) { this.status = source.status; }
    else { this.status = null; }
    if (source['_status']) { this._status = new fhir.FhirElement(source._status!); }
    if (source['period']) { this.period = new fhir.Period(source.period!); }
    if (source['study']) { this.study = new fhir.Reference(source.study!); }
    else { this.study = null; }
    if (source['individual']) { this.individual = new fhir.Reference(source.individual!); }
    else { this.individual = null; }
    if (source['assignedArm']) { this.assignedArm = source.assignedArm; }
    if (source['_assignedArm']) { this._assignedArm = new fhir.FhirElement(source._assignedArm!); }
    if (source['actualArm']) { this.actualArm = source.actualArm; }
    if (source['_actualArm']) { this._actualArm = new fhir.FhirElement(source._actualArm!); }
    if (source['consent']) { this.consent = new fhir.Reference(source.consent!); }
  }
  /**
   * Required-bound Value Set for status
   */
  public static statusRequiredValueSet():ResearchSubjectStatusValueSetType {
    return ResearchSubjectStatusValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: ResearchSubject.resourceType']); }
    if (this["identifier"]) { this.identifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (!this["status"]) { results.push(["status",'Missing required element: ResearchSubject.status']); }
    if (this["_status"]) { results.push(...this._status.doModelValidation()); }
    if (this["period"]) { results.push(...this.period.doModelValidation()); }
    if (!this["study"]) { results.push(["study",'Missing required element: ResearchSubject.study']); }
    if (this["study"]) { results.push(...this.study.doModelValidation()); }
    if (!this["individual"]) { results.push(["individual",'Missing required element: ResearchSubject.individual']); }
    if (this["individual"]) { results.push(...this.individual.doModelValidation()); }
    if (this["_assignedArm"]) { results.push(...this._assignedArm.doModelValidation()); }
    if (this["_actualArm"]) { results.push(...this._actualArm.doModelValidation()); }
    if (this["consent"]) { results.push(...this.consent.doModelValidation()); }
    return results;
  }
}
