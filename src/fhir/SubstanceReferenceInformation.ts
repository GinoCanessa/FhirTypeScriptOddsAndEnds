// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SubstanceReferenceInformation

import * as fhir from '../fhir.js'


/**
 * Todo.
 */
export type ISubstanceReferenceInformationGene = fhir.IBackboneElement & { 
  /**
   * Todo.
   */
  geneSequenceOrigin?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  gene?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  source?: fhir.IReference[]|undefined;
}

/**
 * Todo.
 */
export type ISubstanceReferenceInformationGeneElement = fhir.IBackboneElement & { 
  /**
   * Todo.
   */
  type?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  element?: fhir.IIdentifier|undefined;
  /**
   * Todo.
   */
  source?: fhir.IReference[]|undefined;
}

/**
 * Todo.
 */
export type ISubstanceReferenceInformationClassification = fhir.IBackboneElement & { 
  /**
   * Todo.
   */
  domain?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  classification?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  subtype?: fhir.ICodeableConcept[]|undefined;
  /**
   * Todo.
   */
  source?: fhir.IReference[]|undefined;
}

/**
 * Todo.
 */
export type ISubstanceReferenceInformationTarget = fhir.IBackboneElement & { 
  /**
   * Todo.
   */
  target?: fhir.IIdentifier|undefined;
  /**
   * Todo.
   */
  type?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  interaction?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  organism?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  organismType?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  amountQuantity?: fhir.IQuantity|undefined;
  /**
   * Todo.
   */
  amountRange?: fhir.IRange|undefined;
  /**
   * Todo.
   */
  amountString?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceReferenceInformation.target.amount[x]
   */
  _amountString?: fhir.IFhirElement|undefined;
  /**
   * Todo.
   */
  amountType?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  source?: fhir.IReference[]|undefined;
}

/**
 * Todo.
 */
export type ISubstanceReferenceInformation = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "SubstanceReferenceInformation";
  /**
   * Todo.
   */
  comment?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceReferenceInformation.comment
   */
  _comment?: fhir.IFhirElement|undefined;
  /**
   * Todo.
   */
  gene?: fhir.ISubstanceReferenceInformationGene[]|undefined;
  /**
   * Todo.
   */
  geneElement?: fhir.ISubstanceReferenceInformationGeneElement[]|undefined;
  /**
   * Todo.
   */
  classification?: fhir.ISubstanceReferenceInformationClassification[]|undefined;
  /**
   * Todo.
   */
  target?: fhir.ISubstanceReferenceInformationTarget[]|undefined;
}

/**
 * Todo.
 */
export class SubstanceReferenceInformationGene extends fhir.BackboneElement implements ISubstanceReferenceInformationGene {
  /**
   * Todo.
   */
  public geneSequenceOrigin?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public gene?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public source?: fhir.Reference[]|undefined;
  /**
   * Default constructor for SubstanceReferenceInformationGene - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISubstanceReferenceInformationGene> = { }) {
    super(source);
    if (source['geneSequenceOrigin']) { this.geneSequenceOrigin = new fhir.CodeableConcept(source.geneSequenceOrigin!); }
    if (source['gene']) { this.gene = new fhir.CodeableConcept(source.gene!); }
    if (source['source']) { this.source = source.source.map((x) => new fhir.Reference(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["geneSequenceOrigin"]) { results.push(...this.geneSequenceOrigin.doModelValidation()); }
    if (this["gene"]) { results.push(...this.gene.doModelValidation()); }
    if (this["source"]) { this.source.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * Todo.
 */
export class SubstanceReferenceInformationGeneElement extends fhir.BackboneElement implements ISubstanceReferenceInformationGeneElement {
  /**
   * Todo.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public element?: fhir.Identifier|undefined;
  /**
   * Todo.
   */
  public source?: fhir.Reference[]|undefined;
  /**
   * Default constructor for SubstanceReferenceInformationGeneElement - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISubstanceReferenceInformationGeneElement> = { }) {
    super(source);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    if (source['element']) { this.element = new fhir.Identifier(source.element!); }
    if (source['source']) { this.source = source.source.map((x) => new fhir.Reference(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (this["element"]) { results.push(...this.element.doModelValidation()); }
    if (this["source"]) { this.source.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * Todo.
 */
export class SubstanceReferenceInformationClassification extends fhir.BackboneElement implements ISubstanceReferenceInformationClassification {
  /**
   * Todo.
   */
  public domain?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public classification?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public subtype?: fhir.CodeableConcept[]|undefined;
  /**
   * Todo.
   */
  public source?: fhir.Reference[]|undefined;
  /**
   * Default constructor for SubstanceReferenceInformationClassification - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISubstanceReferenceInformationClassification> = { }) {
    super(source);
    if (source['domain']) { this.domain = new fhir.CodeableConcept(source.domain!); }
    if (source['classification']) { this.classification = new fhir.CodeableConcept(source.classification!); }
    if (source['subtype']) { this.subtype = source.subtype.map((x) => new fhir.CodeableConcept(x)); }
    if (source['source']) { this.source = source.source.map((x) => new fhir.Reference(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["domain"]) { results.push(...this.domain.doModelValidation()); }
    if (this["classification"]) { results.push(...this.classification.doModelValidation()); }
    if (this["subtype"]) { this.subtype.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["source"]) { this.source.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * Todo.
 */
export class SubstanceReferenceInformationTarget extends fhir.BackboneElement implements ISubstanceReferenceInformationTarget {
  /**
   * Todo.
   */
  public target?: fhir.Identifier|undefined;
  /**
   * Todo.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public interaction?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public organism?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public organismType?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public amountQuantity?: fhir.Quantity|undefined;
  /**
   * Todo.
   */
  public amountRange?: fhir.Range|undefined;
  /**
   * Todo.
   */
  public amountString?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceReferenceInformation.target.amount[x]
   */
  public _amountString?: fhir.FhirElement|undefined;
  /**
   * Todo.
   */
  public amountType?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public source?: fhir.Reference[]|undefined;
  /**
   * Default constructor for SubstanceReferenceInformationTarget - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISubstanceReferenceInformationTarget> = { }) {
    super(source);
    if (source['target']) { this.target = new fhir.Identifier(source.target!); }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    if (source['interaction']) { this.interaction = new fhir.CodeableConcept(source.interaction!); }
    if (source['organism']) { this.organism = new fhir.CodeableConcept(source.organism!); }
    if (source['organismType']) { this.organismType = new fhir.CodeableConcept(source.organismType!); }
    if (source['amountQuantity']) { this.amountQuantity = new fhir.Quantity(source.amountQuantity!); }
    if (source['amountRange']) { this.amountRange = new fhir.Range(source.amountRange!); }
    if (source['amountString']) { this.amountString = source.amountString; }
    if (source['_amountString']) { this._amountString = new fhir.FhirElement(source._amountString!); }
    if (source['amountType']) { this.amountType = new fhir.CodeableConcept(source.amountType!); }
    if (source['source']) { this.source = source.source.map((x) => new fhir.Reference(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["target"]) { results.push(...this.target.doModelValidation()); }
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (this["interaction"]) { results.push(...this.interaction.doModelValidation()); }
    if (this["organism"]) { results.push(...this.organism.doModelValidation()); }
    if (this["organismType"]) { results.push(...this.organismType.doModelValidation()); }
    if (this["amountQuantity"]) { results.push(...this.amountQuantity.doModelValidation()); }
    if (this["amountRange"]) { results.push(...this.amountRange.doModelValidation()); }
    if (this["_amountString"]) { results.push(...this._amountString.doModelValidation()); }
    if (this["amountType"]) { results.push(...this.amountType.doModelValidation()); }
    if (this["source"]) { this.source.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * Todo.
 */
export class SubstanceReferenceInformation extends fhir.DomainResource implements ISubstanceReferenceInformation {
  /**
   * Resource Type Name
   */
  public resourceType: "SubstanceReferenceInformation";
  /**
   * Todo.
   */
  public comment?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceReferenceInformation.comment
   */
  public _comment?: fhir.FhirElement|undefined;
  /**
   * Todo.
   */
  public gene?: fhir.SubstanceReferenceInformationGene[]|undefined;
  /**
   * Todo.
   */
  public geneElement?: fhir.SubstanceReferenceInformationGeneElement[]|undefined;
  /**
   * Todo.
   */
  public classification?: fhir.SubstanceReferenceInformationClassification[]|undefined;
  /**
   * Todo.
   */
  public target?: fhir.SubstanceReferenceInformationTarget[]|undefined;
  /**
   * Default constructor for SubstanceReferenceInformation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISubstanceReferenceInformation> = { }) {
    super(source);
    this.resourceType = 'SubstanceReferenceInformation';
    if (source['comment']) { this.comment = source.comment; }
    if (source['_comment']) { this._comment = new fhir.FhirElement(source._comment!); }
    if (source['gene']) { this.gene = source.gene.map((x) => new fhir.SubstanceReferenceInformationGene(x)); }
    if (source['geneElement']) { this.geneElement = source.geneElement.map((x) => new fhir.SubstanceReferenceInformationGeneElement(x)); }
    if (source['classification']) { this.classification = source.classification.map((x) => new fhir.SubstanceReferenceInformationClassification(x)); }
    if (source['target']) { this.target = source.target.map((x) => new fhir.SubstanceReferenceInformationTarget(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: SubstanceReferenceInformation.resourceType']); }
    if (this["_comment"]) { results.push(...this._comment.doModelValidation()); }
    if (this["gene"]) { this.gene.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["geneElement"]) { this.geneElement.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["classification"]) { this.classification.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["target"]) { this.target.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}
