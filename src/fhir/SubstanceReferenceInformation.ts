// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Todo.
 */
export type ISubstanceReferenceInformationGene = fhir.IBackboneElement & {
  /**
   * Todo.
   */
  gene?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  geneSequenceOrigin?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  source?: fhir.IReference[]|undefined;
}
/**
 * Todo.
 */
export type ISubstanceReferenceInformationGeneElement = fhir.IBackboneElement & {
  /**
   * Todo.
   */
  element?: fhir.IIdentifier|undefined;
  /**
   * Todo.
   */
  source?: fhir.IReference[]|undefined;
  /**
   * Todo.
   */
  type?: fhir.ICodeableConcept|undefined;
}
/**
 * Todo.
 */
export type ISubstanceReferenceInformationClassification = fhir.IBackboneElement & {
  /**
   * Todo.
   */
  classification?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  domain?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  source?: fhir.IReference[]|undefined;
  /**
   * Todo.
   */
  subtype?: fhir.ICodeableConcept[]|undefined;
}
/**
 * Todo.
 */
export type ISubstanceReferenceInformationTarget = fhir.IBackboneElement & {
  /**
   * Todo.
   */
  amountQuantity?: fhir.IQuantity|undefined;
  /**
   * Todo.
   */
  amountRange?: fhir.IRange|undefined;
  /**
   * Todo.
   */
  amountString?: string|undefined;
  _amountString?: fhir.IFhirElement|undefined;
  /**
   * Todo.
   */
  amountType?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  interaction?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  organism?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  organismType?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  source?: fhir.IReference[]|undefined;
  /**
   * Todo.
   */
  target?: fhir.IIdentifier|undefined;
  /**
   * Todo.
   */
  type?: fhir.ICodeableConcept|undefined;
}
/**
 * Todo.
 */
export type ISubstanceReferenceInformation = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "SubstanceReferenceInformation";
  /**
   * Todo.
   */
  classification?: fhir.ISubstanceReferenceInformationClassification[]|undefined;
  /**
   * Todo.
   */
  comment?: string|undefined;
  _comment?: fhir.IFhirElement|undefined;
  /**
   * Todo.
   */
  gene?: fhir.ISubstanceReferenceInformationGene[]|undefined;
  /**
   * Todo.
   */
  geneElement?: fhir.ISubstanceReferenceInformationGeneElement[]|undefined;
  /**
   * Todo.
   */
  target?: fhir.ISubstanceReferenceInformationTarget[]|undefined;
}
/**
 * Todo.
 */
export class SubstanceReferenceInformationGene extends fhir.BackboneElement implements fhir.ISubstanceReferenceInformationGene {
  /**
   * Todo.
   */
  public gene?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public geneSequenceOrigin?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public source?: fhir.Reference[]|undefined;
  /**
   * Default constructor for SubstanceReferenceInformationGene - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.ISubstanceReferenceInformationGene> = {}) {
    super(source);
    if (source["gene"]) { this.gene = new fhir.CodeableConcept(source.gene!); }
    if (source["geneSequenceOrigin"]) { this.geneSequenceOrigin = new fhir.CodeableConcept(source.geneSequenceOrigin!); }
    if (source["source"]) { this.source = source.source.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
  }
  /**
   * Check if the current SubstanceReferenceInformationGene contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a SubstanceReferenceInformationGene from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.ISubstanceReferenceInformationGene):SubstanceReferenceInformationGene {
    var dest:SubstanceReferenceInformationGene = new SubstanceReferenceInformationGene(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `SubstanceReferenceInformationGene is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Todo.
 */
export class SubstanceReferenceInformationGeneElement extends fhir.BackboneElement implements fhir.ISubstanceReferenceInformationGeneElement {
  /**
   * Todo.
   */
  public element?: fhir.Identifier|undefined;
  /**
   * Todo.
   */
  public source?: fhir.Reference[]|undefined;
  /**
   * Todo.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for SubstanceReferenceInformationGeneElement - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.ISubstanceReferenceInformationGeneElement> = {}) {
    super(source);
    if (source["element"]) { this.element = new fhir.Identifier(source.element!); }
    if (source["source"]) { this.source = source.source.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["type"]) { this.type = new fhir.CodeableConcept(source.type!); }
  }
  /**
   * Check if the current SubstanceReferenceInformationGeneElement contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a SubstanceReferenceInformationGeneElement from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.ISubstanceReferenceInformationGeneElement):SubstanceReferenceInformationGeneElement {
    var dest:SubstanceReferenceInformationGeneElement = new SubstanceReferenceInformationGeneElement(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `SubstanceReferenceInformationGeneElement is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Todo.
 */
export class SubstanceReferenceInformationClassification extends fhir.BackboneElement implements fhir.ISubstanceReferenceInformationClassification {
  /**
   * Todo.
   */
  public classification?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public domain?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public source?: fhir.Reference[]|undefined;
  /**
   * Todo.
   */
  public subtype?: fhir.CodeableConcept[]|undefined;
  /**
   * Default constructor for SubstanceReferenceInformationClassification - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.ISubstanceReferenceInformationClassification> = {}) {
    super(source);
    if (source["classification"]) { this.classification = new fhir.CodeableConcept(source.classification!); }
    if (source["domain"]) { this.domain = new fhir.CodeableConcept(source.domain!); }
    if (source["source"]) { this.source = source.source.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["subtype"]) { this.subtype = source.subtype.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
  }
  /**
   * Check if the current SubstanceReferenceInformationClassification contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a SubstanceReferenceInformationClassification from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.ISubstanceReferenceInformationClassification):SubstanceReferenceInformationClassification {
    var dest:SubstanceReferenceInformationClassification = new SubstanceReferenceInformationClassification(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `SubstanceReferenceInformationClassification is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Todo.
 */
export class SubstanceReferenceInformationTarget extends fhir.BackboneElement implements fhir.ISubstanceReferenceInformationTarget {
  /**
   * Todo.
   */
  public amountQuantity?: fhir.Quantity|undefined;
  /**
   * Todo.
   */
  public amountRange?: fhir.Range|undefined;
  /**
   * Todo.
   */
  public amountString?: string|undefined;
  public _amountString?: fhir.FhirElement|undefined;
  /**
   * Todo.
   */
  public amountType?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public interaction?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public organism?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public organismType?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public source?: fhir.Reference[]|undefined;
  /**
   * Todo.
   */
  public target?: fhir.Identifier|undefined;
  /**
   * Todo.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for SubstanceReferenceInformationTarget - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.ISubstanceReferenceInformationTarget> = {}) {
    super(source);
    if (source["amountQuantity"]) { this.amountQuantity = new fhir.Quantity(source.amountQuantity!); }
    if (source["amountRange"]) { this.amountRange = new fhir.Range(source.amountRange!); }
    if (source["amountString"]) { this.amountString = source.amountString; }
    if (source["_amountString"]) { this._amountString = new fhir.FhirElement(source._amountString!); }
    if (source["amountType"]) { this.amountType = new fhir.CodeableConcept(source.amountType!); }
    if (source["interaction"]) { this.interaction = new fhir.CodeableConcept(source.interaction!); }
    if (source["organism"]) { this.organism = new fhir.CodeableConcept(source.organism!); }
    if (source["organismType"]) { this.organismType = new fhir.CodeableConcept(source.organismType!); }
    if (source["source"]) { this.source = source.source.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["target"]) { this.target = new fhir.Identifier(source.target!); }
    if (source["type"]) { this.type = new fhir.CodeableConcept(source.type!); }
  }
  /**
   * Check if the current SubstanceReferenceInformationTarget contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a SubstanceReferenceInformationTarget from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.ISubstanceReferenceInformationTarget):SubstanceReferenceInformationTarget {
    var dest:SubstanceReferenceInformationTarget = new SubstanceReferenceInformationTarget(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `SubstanceReferenceInformationTarget is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Todo.
 */
export class SubstanceReferenceInformation extends fhir.DomainResource implements fhir.ISubstanceReferenceInformation {
  /**
   * Resource Type Name
   */
  public override resourceType: "SubstanceReferenceInformation";
  /**
   * Todo.
   */
  public classification?: fhir.SubstanceReferenceInformationClassification[]|undefined;
  /**
   * Todo.
   */
  public comment?: string|undefined;
  public _comment?: fhir.FhirElement|undefined;
  /**
   * Todo.
   */
  public gene?: fhir.SubstanceReferenceInformationGene[]|undefined;
  /**
   * Todo.
   */
  public geneElement?: fhir.SubstanceReferenceInformationGeneElement[]|undefined;
  /**
   * Todo.
   */
  public target?: fhir.SubstanceReferenceInformationTarget[]|undefined;
  /**
   * Default constructor for SubstanceReferenceInformation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.ISubstanceReferenceInformation> = {}) {
    super(source);
    this.resourceType = 'SubstanceReferenceInformation';
    if (source["classification"]) { this.classification = source.classification.map((x:Partial<fhir.ISubstanceReferenceInformationClassification>) => new fhir.SubstanceReferenceInformationClassification(x)); }
    if (source["comment"]) { this.comment = source.comment; }
    if (source["_comment"]) { this._comment = new fhir.FhirElement(source._comment!); }
    if (source["gene"]) { this.gene = source.gene.map((x:Partial<fhir.ISubstanceReferenceInformationGene>) => new fhir.SubstanceReferenceInformationGene(x)); }
    if (source["geneElement"]) { this.geneElement = source.geneElement.map((x:Partial<fhir.ISubstanceReferenceInformationGeneElement>) => new fhir.SubstanceReferenceInformationGeneElement(x)); }
    if (source["target"]) { this.target = source.target.map((x:Partial<fhir.ISubstanceReferenceInformationTarget>) => new fhir.SubstanceReferenceInformationTarget(x)); }
  }
  /**
   * Check if the current SubstanceReferenceInformation contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a SubstanceReferenceInformation from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.ISubstanceReferenceInformation):SubstanceReferenceInformation {
    var dest:SubstanceReferenceInformation = new SubstanceReferenceInformation(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `SubstanceReferenceInformation is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
