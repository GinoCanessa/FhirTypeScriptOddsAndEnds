// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: VisionPrescription

import * as fhir from '../fhir.js'

import { VisionBaseCodesValueSet, VisionBaseCodesValueSetType, VisionBaseCodesValueSetEnum } from '../fhirValueSets/VisionBaseCodesValueSet.js'
import { VisionProductValueSet, VisionProductValueSetType, VisionProductValueSetEnum } from '../fhirValueSets/VisionProductValueSet.js'
import { VisionEyeCodesValueSet, VisionEyeCodesValueSetType, VisionEyeCodesValueSetEnum } from '../fhirValueSets/VisionEyeCodesValueSet.js'
import { FmStatusValueSet, FmStatusValueSetType, FmStatusValueSetEnum } from '../fhirValueSets/FmStatusValueSet.js'

/**
 * Allows for adjustment on two axis.
 */
export type IVisionPrescriptionLensSpecificationPrism = fhir.IBackboneElement & { 
  /**
   * Amount of prism to compensate for eye alignment in fractional units.
   */
  amount: number|null;
  /**
   * Extended properties for primitive element: VisionPrescription.lensSpecification.prism.amount
   */
  _amount?: fhir.IFhirElement|undefined;
  /**
   * The relative base, or reference lens edge, for the prism.
   */
  base: VisionBaseCodesValueSetEnum|null;
  /**
   * Extended properties for primitive element: VisionPrescription.lensSpecification.prism.base
   */
  _base?: fhir.IFhirElement|undefined;
}

/**
 * Contain the details of  the individual lens specifications and serves as the authorization for the fullfillment by certified professionals.
 */
export type IVisionPrescriptionLensSpecification = fhir.IBackboneElement & { 
  /**
   * Identifies the type of vision correction product which is required for the patient.
   */
  product: fhir.ICodeableConcept|null;
  /**
   * May also appear as OD (oculus dexter) for the right eye and OS (oculus siniter) for the left eye.
   */
  eye: VisionEyeCodesValueSetEnum|null;
  /**
   * Extended properties for primitive element: VisionPrescription.lensSpecification.eye
   */
  _eye?: fhir.IFhirElement|undefined;
  /**
   * The value is negative for near-sighted and positive for far sighted.
   * Often insurance will not cover a lens with power between +75 and -75.
   */
  sphere?: number|undefined;
  /**
   * Extended properties for primitive element: VisionPrescription.lensSpecification.sphere
   */
  _sphere?: fhir.IFhirElement|undefined;
  /**
   * Power adjustment for astigmatism measured in dioptres (0.25 units).
   */
  cylinder?: number|undefined;
  /**
   * Extended properties for primitive element: VisionPrescription.lensSpecification.cylinder
   */
  _cylinder?: fhir.IFhirElement|undefined;
  /**
   * The limits are +180 and -180 degrees.
   */
  axis?: number|undefined;
  /**
   * Extended properties for primitive element: VisionPrescription.lensSpecification.axis
   */
  _axis?: fhir.IFhirElement|undefined;
  /**
   * Allows for adjustment on two axis.
   */
  prism?: fhir.IVisionPrescriptionLensSpecificationPrism[]|undefined;
  /**
   * Power adjustment for multifocal lenses measured in dioptres (0.25 units).
   */
  add?: number|undefined;
  /**
   * Extended properties for primitive element: VisionPrescription.lensSpecification.add
   */
  _add?: fhir.IFhirElement|undefined;
  /**
   * Contact lens power measured in dioptres (0.25 units).
   */
  power?: number|undefined;
  /**
   * Extended properties for primitive element: VisionPrescription.lensSpecification.power
   */
  _power?: fhir.IFhirElement|undefined;
  /**
   * Back curvature measured in millimetres.
   */
  backCurve?: number|undefined;
  /**
   * Extended properties for primitive element: VisionPrescription.lensSpecification.backCurve
   */
  _backCurve?: fhir.IFhirElement|undefined;
  /**
   * Contact lens diameter measured in millimetres.
   */
  diameter?: number|undefined;
  /**
   * Extended properties for primitive element: VisionPrescription.lensSpecification.diameter
   */
  _diameter?: fhir.IFhirElement|undefined;
  /**
   * The recommended maximum wear period for the lens.
   */
  duration?: fhir.IQuantity|undefined;
  /**
   * Special color or pattern.
   */
  color?: string|undefined;
  /**
   * Extended properties for primitive element: VisionPrescription.lensSpecification.color
   */
  _color?: fhir.IFhirElement|undefined;
  /**
   * Brand recommendations or restrictions.
   */
  brand?: string|undefined;
  /**
   * Extended properties for primitive element: VisionPrescription.lensSpecification.brand
   */
  _brand?: fhir.IFhirElement|undefined;
  /**
   * Notes for special requirements such as coatings and lens materials.
   */
  note?: fhir.IAnnotation[]|undefined;
}

/**
 * An authorization for the provision of glasses and/or contact lenses to a patient.
 */
export type IVisionPrescription = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "VisionPrescription";
  /**
   * A unique identifier assigned to this vision prescription.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: FmStatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: VisionPrescription.status
   */
  _status?: fhir.IFhirElement|undefined;
  /**
   * The date this resource was created.
   */
  created: string|null;
  /**
   * Extended properties for primitive element: VisionPrescription.created
   */
  _created?: fhir.IFhirElement|undefined;
  /**
   * A resource reference to the person to whom the vision prescription applies.
   */
  patient: fhir.IReference|null;
  /**
   * A reference to a resource that identifies the particular occurrence of contact between patient and health care provider during which the prescription was issued.
   */
  encounter?: fhir.IReference|undefined;
  /**
   * Jurisdictions determine the valid lifetime of a prescription. Typically vision prescriptions are valid for two years from the date written.
   */
  dateWritten: string|null;
  /**
   * Extended properties for primitive element: VisionPrescription.dateWritten
   */
  _dateWritten?: fhir.IFhirElement|undefined;
  /**
   * The healthcare professional responsible for authorizing the prescription.
   */
  prescriber: fhir.IReference|null;
  /**
   * Contain the details of  the individual lens specifications and serves as the authorization for the fullfillment by certified professionals.
   */
  lensSpecification: fhir.IVisionPrescriptionLensSpecification[]|null;
}

/**
 * Allows for adjustment on two axis.
 */
export class VisionPrescriptionLensSpecificationPrism extends fhir.BackboneElement implements IVisionPrescriptionLensSpecificationPrism {
  /**
   * Amount of prism to compensate for eye alignment in fractional units.
   */
  public amount: number|null;
  /**
   * Extended properties for primitive element: VisionPrescription.lensSpecification.prism.amount
   */
  public _amount?: fhir.FhirElement|undefined;
  /**
   * The relative base, or reference lens edge, for the prism.
   */
  public base: VisionBaseCodesValueSetEnum|null;
  /**
   * Extended properties for primitive element: VisionPrescription.lensSpecification.prism.base
   */
  public _base?: fhir.FhirElement|undefined;
  /**
   * Default constructor for VisionPrescriptionLensSpecificationPrism - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IVisionPrescriptionLensSpecificationPrism> = { }) {
    super(source);
    if (source['amount']) { this.amount = source.amount; }
    else { this.amount = null; }
    if (source['_amount']) { this._amount = new fhir.FhirElement(source._amount!); }
    if (source['base']) { this.base = source.base; }
    else { this.base = null; }
    if (source['_base']) { this._base = new fhir.FhirElement(source._base!); }
  }
  /**
   * Required-bound Value Set for base
   */
  public baseRequiredValueSet():VisionBaseCodesValueSetType {
    return VisionBaseCodesValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["amount"]) { results.push(["amount",'Missing required element: VisionPrescription.lensSpecification.prism.amount']); }
    if (this["_amount"]) { results.push(...this._amount.doModelValidation()); }
    if (!this["base"]) { results.push(["base",'Missing required element: VisionPrescription.lensSpecification.prism.base']); }
    if (this["_base"]) { results.push(...this._base.doModelValidation()); }
    return results;
  }
}

/**
 * Contain the details of  the individual lens specifications and serves as the authorization for the fullfillment by certified professionals.
 */
export class VisionPrescriptionLensSpecification extends fhir.BackboneElement implements IVisionPrescriptionLensSpecification {
  /**
   * Identifies the type of vision correction product which is required for the patient.
   */
  public product: fhir.CodeableConcept|null;
  /**
   * May also appear as OD (oculus dexter) for the right eye and OS (oculus siniter) for the left eye.
   */
  public eye: VisionEyeCodesValueSetEnum|null;
  /**
   * Extended properties for primitive element: VisionPrescription.lensSpecification.eye
   */
  public _eye?: fhir.FhirElement|undefined;
  /**
   * The value is negative for near-sighted and positive for far sighted.
   * Often insurance will not cover a lens with power between +75 and -75.
   */
  public sphere?: number|undefined;
  /**
   * Extended properties for primitive element: VisionPrescription.lensSpecification.sphere
   */
  public _sphere?: fhir.FhirElement|undefined;
  /**
   * Power adjustment for astigmatism measured in dioptres (0.25 units).
   */
  public cylinder?: number|undefined;
  /**
   * Extended properties for primitive element: VisionPrescription.lensSpecification.cylinder
   */
  public _cylinder?: fhir.FhirElement|undefined;
  /**
   * The limits are +180 and -180 degrees.
   */
  public axis?: number|undefined;
  /**
   * Extended properties for primitive element: VisionPrescription.lensSpecification.axis
   */
  public _axis?: fhir.FhirElement|undefined;
  /**
   * Allows for adjustment on two axis.
   */
  public prism?: fhir.VisionPrescriptionLensSpecificationPrism[]|undefined;
  /**
   * Power adjustment for multifocal lenses measured in dioptres (0.25 units).
   */
  public add?: number|undefined;
  /**
   * Extended properties for primitive element: VisionPrescription.lensSpecification.add
   */
  public _add?: fhir.FhirElement|undefined;
  /**
   * Contact lens power measured in dioptres (0.25 units).
   */
  public power?: number|undefined;
  /**
   * Extended properties for primitive element: VisionPrescription.lensSpecification.power
   */
  public _power?: fhir.FhirElement|undefined;
  /**
   * Back curvature measured in millimetres.
   */
  public backCurve?: number|undefined;
  /**
   * Extended properties for primitive element: VisionPrescription.lensSpecification.backCurve
   */
  public _backCurve?: fhir.FhirElement|undefined;
  /**
   * Contact lens diameter measured in millimetres.
   */
  public diameter?: number|undefined;
  /**
   * Extended properties for primitive element: VisionPrescription.lensSpecification.diameter
   */
  public _diameter?: fhir.FhirElement|undefined;
  /**
   * The recommended maximum wear period for the lens.
   */
  public duration?: fhir.Quantity|undefined;
  /**
   * Special color or pattern.
   */
  public color?: string|undefined;
  /**
   * Extended properties for primitive element: VisionPrescription.lensSpecification.color
   */
  public _color?: fhir.FhirElement|undefined;
  /**
   * Brand recommendations or restrictions.
   */
  public brand?: string|undefined;
  /**
   * Extended properties for primitive element: VisionPrescription.lensSpecification.brand
   */
  public _brand?: fhir.FhirElement|undefined;
  /**
   * Notes for special requirements such as coatings and lens materials.
   */
  public note?: fhir.Annotation[]|undefined;
  /**
   * Default constructor for VisionPrescriptionLensSpecification - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IVisionPrescriptionLensSpecification> = { }) {
    super(source);
    if (source['product']) { this.product = new fhir.CodeableConcept(source.product!); }
    else { this.product = null; }
    if (source['eye']) { this.eye = source.eye; }
    else { this.eye = null; }
    if (source['_eye']) { this._eye = new fhir.FhirElement(source._eye!); }
    if (source['sphere']) { this.sphere = source.sphere; }
    if (source['_sphere']) { this._sphere = new fhir.FhirElement(source._sphere!); }
    if (source['cylinder']) { this.cylinder = source.cylinder; }
    if (source['_cylinder']) { this._cylinder = new fhir.FhirElement(source._cylinder!); }
    if (source['axis']) { this.axis = source.axis; }
    if (source['_axis']) { this._axis = new fhir.FhirElement(source._axis!); }
    if (source['prism']) { this.prism = source.prism.map((x) => new fhir.VisionPrescriptionLensSpecificationPrism(x)); }
    if (source['add']) { this.add = source.add; }
    if (source['_add']) { this._add = new fhir.FhirElement(source._add!); }
    if (source['power']) { this.power = source.power; }
    if (source['_power']) { this._power = new fhir.FhirElement(source._power!); }
    if (source['backCurve']) { this.backCurve = source.backCurve; }
    if (source['_backCurve']) { this._backCurve = new fhir.FhirElement(source._backCurve!); }
    if (source['diameter']) { this.diameter = source.diameter; }
    if (source['_diameter']) { this._diameter = new fhir.FhirElement(source._diameter!); }
    if (source['duration']) { this.duration = new fhir.Quantity(source.duration!); }
    if (source['color']) { this.color = source.color; }
    if (source['_color']) { this._color = new fhir.FhirElement(source._color!); }
    if (source['brand']) { this.brand = source.brand; }
    if (source['_brand']) { this._brand = new fhir.FhirElement(source._brand!); }
    if (source['note']) { this.note = source.note.map((x) => new fhir.Annotation(x)); }
  }
  /**
   * Example-bound Value Set for product
   */
  public productExampleValueSet():VisionProductValueSetType {
    return VisionProductValueSet;
  }
  /**
   * Required-bound Value Set for eye
   */
  public eyeRequiredValueSet():VisionEyeCodesValueSetType {
    return VisionEyeCodesValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["product"]) { results.push(["product",'Missing required element: VisionPrescription.lensSpecification.product']); }
    if (this["product"]) { results.push(...this.product.doModelValidation()); }
    if (!this["eye"]) { results.push(["eye",'Missing required element: VisionPrescription.lensSpecification.eye']); }
    if (this["_eye"]) { results.push(...this._eye.doModelValidation()); }
    if (this["_sphere"]) { results.push(...this._sphere.doModelValidation()); }
    if (this["_cylinder"]) { results.push(...this._cylinder.doModelValidation()); }
    if (this["_axis"]) { results.push(...this._axis.doModelValidation()); }
    if (this["prism"]) { this.prism.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_add"]) { results.push(...this._add.doModelValidation()); }
    if (this["_power"]) { results.push(...this._power.doModelValidation()); }
    if (this["_backCurve"]) { results.push(...this._backCurve.doModelValidation()); }
    if (this["_diameter"]) { results.push(...this._diameter.doModelValidation()); }
    if (this["duration"]) { results.push(...this.duration.doModelValidation()); }
    if (this["_color"]) { results.push(...this._color.doModelValidation()); }
    if (this["_brand"]) { results.push(...this._brand.doModelValidation()); }
    if (this["note"]) { this.note.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * An authorization for the provision of glasses and/or contact lenses to a patient.
 */
export class VisionPrescription extends fhir.DomainResource implements IVisionPrescription {
  /**
   * Resource Type Name
   */
  public resourceType: "VisionPrescription";
  /**
   * A unique identifier assigned to this vision prescription.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  public status: FmStatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: VisionPrescription.status
   */
  public _status?: fhir.FhirElement|undefined;
  /**
   * The date this resource was created.
   */
  public created: string|null;
  /**
   * Extended properties for primitive element: VisionPrescription.created
   */
  public _created?: fhir.FhirElement|undefined;
  /**
   * A resource reference to the person to whom the vision prescription applies.
   */
  public patient: fhir.Reference|null;
  /**
   * A reference to a resource that identifies the particular occurrence of contact between patient and health care provider during which the prescription was issued.
   */
  public encounter?: fhir.Reference|undefined;
  /**
   * Jurisdictions determine the valid lifetime of a prescription. Typically vision prescriptions are valid for two years from the date written.
   */
  public dateWritten: string|null;
  /**
   * Extended properties for primitive element: VisionPrescription.dateWritten
   */
  public _dateWritten?: fhir.FhirElement|undefined;
  /**
   * The healthcare professional responsible for authorizing the prescription.
   */
  public prescriber: fhir.Reference|null;
  /**
   * Contain the details of  the individual lens specifications and serves as the authorization for the fullfillment by certified professionals.
   */
  public lensSpecification: fhir.VisionPrescriptionLensSpecification[]|null;
  /**
   * Default constructor for VisionPrescription - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IVisionPrescription> = { }) {
    super(source);
    this.resourceType = 'VisionPrescription';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['status']) { this.status = source.status; }
    else { this.status = null; }
    if (source['_status']) { this._status = new fhir.FhirElement(source._status!); }
    if (source['created']) { this.created = source.created; }
    else { this.created = null; }
    if (source['_created']) { this._created = new fhir.FhirElement(source._created!); }
    if (source['patient']) { this.patient = new fhir.Reference(source.patient!); }
    else { this.patient = null; }
    if (source['encounter']) { this.encounter = new fhir.Reference(source.encounter!); }
    if (source['dateWritten']) { this.dateWritten = source.dateWritten; }
    else { this.dateWritten = null; }
    if (source['_dateWritten']) { this._dateWritten = new fhir.FhirElement(source._dateWritten!); }
    if (source['prescriber']) { this.prescriber = new fhir.Reference(source.prescriber!); }
    else { this.prescriber = null; }
    if (source['lensSpecification']) { this.lensSpecification = source.lensSpecification.map((x) => new fhir.VisionPrescriptionLensSpecification(x)); }
    else { this.lensSpecification = null; }
  }
  /**
   * Required-bound Value Set for status
   */
  public statusRequiredValueSet():FmStatusValueSetType {
    return FmStatusValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: VisionPrescription.resourceType']); }
    if (this["identifier"]) { this.identifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (!this["status"]) { results.push(["status",'Missing required element: VisionPrescription.status']); }
    if (this["_status"]) { results.push(...this._status.doModelValidation()); }
    if (!this["created"]) { results.push(["created",'Missing required element: VisionPrescription.created']); }
    if (this["_created"]) { results.push(...this._created.doModelValidation()); }
    if (!this["patient"]) { results.push(["patient",'Missing required element: VisionPrescription.patient']); }
    if (this["patient"]) { results.push(...this.patient.doModelValidation()); }
    if (this["encounter"]) { results.push(...this.encounter.doModelValidation()); }
    if (!this["dateWritten"]) { results.push(["dateWritten",'Missing required element: VisionPrescription.dateWritten']); }
    if (this["_dateWritten"]) { results.push(...this._dateWritten.doModelValidation()); }
    if (!this["prescriber"]) { results.push(["prescriber",'Missing required element: VisionPrescription.prescriber']); }
    if (this["prescriber"]) { results.push(...this.prescriber.doModelValidation()); }
    if ((!this["lensSpecification"]) || (this["lensSpecification"].length === 0)) { results.push(["lensSpecification",'Missing required element: VisionPrescription.lensSpecification']); }
    if (this["lensSpecification"]) { this.lensSpecification.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}
