// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Goal

import * as fhir from '../fhir.js';

import { ObservationCodesValueSet, ObservationCodesValueSetType,} from '../fhirValueSets/ObservationCodesValueSet.js';
import { ObservationCodesValueSetEnum } from '../valueSetEnums.js';
import { GoalStatusValueSet, GoalStatusValueSetType,} from '../fhirValueSets/GoalStatusValueSet.js';
import { GoalStatusValueSetEnum } from '../valueSetEnums.js';
import { GoalAchievementValueSet, GoalAchievementValueSetType,} from '../fhirValueSets/GoalAchievementValueSet.js';
import { GoalAchievementValueSetEnum } from '../valueSetEnums.js';
import { GoalCategoryValueSet, GoalCategoryValueSetType,} from '../fhirValueSets/GoalCategoryValueSet.js';
import { GoalCategoryValueSetEnum } from '../valueSetEnums.js';
import { GoalPriorityValueSet, GoalPriorityValueSetType,} from '../fhirValueSets/GoalPriorityValueSet.js';
import { GoalPriorityValueSetEnum } from '../valueSetEnums.js';
import { ClinicalFindingsValueSet, ClinicalFindingsValueSetType,} from '../fhirValueSets/ClinicalFindingsValueSet.js';
import { ClinicalFindingsValueSetEnum } from '../valueSetEnums.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Valid arguments for the GoalTarget type.
 */
export interface GoalTargetArgs extends fhir.BackboneElementArgs {
  /**
   * The parameter whose value is being tracked, e.g. body weight, blood pressure, or hemoglobin A1c level.
   */
  measure?: fhir.CodeableConceptArgs|undefined;
  /**
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  detail?: fhir.Quantity|fhir.Range|fhir.CodeableConcept|fhir.FhirString|fhir.FhirBoolean|fhir.FhirInteger|fhir.Ratio|undefined;
  /**
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  detailQuantity?: fhir.QuantityArgs|undefined;
  /**
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  detailRange?: fhir.RangeArgs|undefined;
  /**
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  detailCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  detailString?: fhir.FhirString|string|undefined;
  /**
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  detailBoolean?: fhir.FhirBoolean|boolean|undefined;
  /**
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  detailInteger?: fhir.FhirInteger|number|undefined;
  /**
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  detailRatio?: fhir.RatioArgs|undefined;
  /**
   * Indicates either the date or the duration after start by which the goal should be met.
   */
  due?: fhir.FhirDate|fhir.Duration|undefined;
  /**
   * Indicates either the date or the duration after start by which the goal should be met.
   */
  dueDate?: fhir.FhirDate|string|undefined;
  /**
   * Indicates either the date or the duration after start by which the goal should be met.
   */
  dueDuration?: fhir.DurationArgs|undefined;
}

/**
 * When multiple targets are present for a single goal instance, all targets must be met for the overall goal to be met.
 */
export class GoalTarget extends fhir.BackboneElement {
  readonly __dataType:string = 'GoalTarget';
  /**
   * The parameter whose value is being tracked, e.g. body weight, blood pressure, or hemoglobin A1c level.
   */
  public measure?: fhir.CodeableConcept|undefined;
  /**
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  public detail?: (fhir.Quantity|fhir.Range|fhir.CodeableConcept|fhir.FhirString|fhir.FhirBoolean|fhir.FhirInteger|fhir.Ratio)|undefined;
  readonly __detailIsChoice:true = true;
  /**
   * Indicates either the date or the duration after start by which the goal should be met.
   */
  public due?: (fhir.FhirDate|fhir.Duration)|undefined;
  readonly __dueIsChoice:true = true;
  /**
   * Default constructor for GoalTarget - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<GoalTargetArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['measure']) { this.measure = new fhir.CodeableConcept(source.measure); }
    if (source['detail']) { this.detail = source.detail; }
    else if (source['detailQuantity']) { this.detail = new fhir.Quantity(source.detailQuantity); }
    else if (source['detailRange']) { this.detail = new fhir.Range(source.detailRange); }
    else if (source['detailCodeableConcept']) { this.detail = new fhir.CodeableConcept(source.detailCodeableConcept); }
    else if (source['detailString']) { this.detail = new fhir.FhirString({value: source.detailString}); }
    else if (source['detailBoolean']) { this.detail = new fhir.FhirBoolean({value: source.detailBoolean}); }
    else if (source['detailInteger']) { this.detail = new fhir.FhirInteger({value: source.detailInteger}); }
    else if (source['detailRatio']) { this.detail = new fhir.Ratio(source.detailRatio); }
    if (source['due']) { this.due = source.due; }
    else if (source['dueDate']) { this.due = new fhir.FhirDate({value: source.dueDate}); }
    else if (source['dueDuration']) { this.due = new fhir.Duration(source.dueDuration); }
  }
  /**
   * Example-bound Value Set for measure
   */
  public static measureExampleValueSet():ObservationCodesValueSetType {
    return ObservationCodesValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["measure"]) { outcome.issue!.push(...this.measure.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the Goal type.
 */
export interface GoalArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "Goal"|undefined;
  /**
   * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * This element is labeled as a modifier because the lifecycleStatus contains codes that mark the resource as not currently valid.
   */
  lifecycleStatus: GoalStatusValueSetEnum|null;
  /**
   * Describes the progression, or lack thereof, towards the goal against the target.
   */
  achievementStatus?: fhir.CodeableConceptArgs|undefined;
  /**
   * Indicates a category the goal falls within.
   */
  category?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * Extensions are available to track priorities as established by each participant (i.e. Priority from the patient's perspective, different practitioners' perspectives, family member's perspectives)
   * The ordinal extension on Coding can be used to convey a numerically comparable ranking to priority.  (Keep in mind that different coding systems may use a "low value=important".
   */
  priority?: fhir.CodeableConceptArgs|undefined;
  /**
   * If no code is available, use CodeableConcept.text.
   */
  description: fhir.CodeableConceptArgs|null;
  /**
   * Identifies the patient, group or organization for whom the goal is being established.
   */
  subject: fhir.ReferenceArgs|null;
  /**
   * The date or event after which the goal should begin being pursued.
   */
  start?: fhir.FhirDate|fhir.CodeableConcept|undefined;
  /**
   * The date or event after which the goal should begin being pursued.
   */
  startDate?: fhir.FhirDate|string|undefined;
  /**
   * The date or event after which the goal should begin being pursued.
   */
  startCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * When multiple targets are present for a single goal instance, all targets must be met for the overall goal to be met.
   */
  target?: fhir.GoalTargetArgs[]|undefined;
  /**
   * To see the date for past statuses, query history.
   */
  statusDate?: fhir.FhirDate|string|undefined;
  /**
   * This will typically be captured for statuses such as rejected, on-hold or cancelled, but could be present for others.
   */
  statusReason?: fhir.FhirString|string|undefined;
  /**
   * This is the individual responsible for establishing the goal, not necessarily who recorded it.  (For that, use the Provenance resource.).
   */
  expressedBy?: fhir.ReferenceArgs|undefined;
  /**
   * The identified conditions and other health record elements that are intended to be addressed by the goal.
   */
  addresses?: fhir.ReferenceArgs[]|undefined;
  /**
   * May be used for progress notes, concerns or other related information that doesn't actually describe the goal itself.
   */
  note?: fhir.AnnotationArgs[]|undefined;
  /**
   * Note that this should not duplicate the goal status.
   */
  outcomeCode?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * The goal outcome is independent of the outcome of the related activities.  For example, if the Goal is to achieve a target body weight of 150 lb and a care plan activity is defined to diet, then the care plan’s activity outcome could be calories consumed whereas goal outcome is an observation for the actual body weight measured.
   */
  outcomeReference?: fhir.ReferenceArgs[]|undefined;
}

/**
 * Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
 */
export class Goal extends fhir.DomainResource {
  readonly __dataType:string = 'Goal';
  /**
   * Resource Type Name
   */
  public resourceType: "Goal";
  /**
   * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
   */
  public identifier?: fhir.Identifier[]|undefined = [];
  /**
   * This element is labeled as a modifier because the lifecycleStatus contains codes that mark the resource as not currently valid.
   */
  public lifecycleStatus: GoalStatusValueSetEnum|null;
  /**
   * Describes the progression, or lack thereof, towards the goal against the target.
   */
  public achievementStatus?: fhir.CodeableConcept|undefined;
  /**
   * Indicates a category the goal falls within.
   */
  public category?: fhir.CodeableConcept[]|undefined = [];
  /**
   * Extensions are available to track priorities as established by each participant (i.e. Priority from the patient's perspective, different practitioners' perspectives, family member's perspectives)
   * The ordinal extension on Coding can be used to convey a numerically comparable ranking to priority.  (Keep in mind that different coding systems may use a "low value=important".
   */
  public priority?: fhir.CodeableConcept|undefined;
  /**
   * If no code is available, use CodeableConcept.text.
   */
  public description: fhir.CodeableConcept|null;
  /**
   * Identifies the patient, group or organization for whom the goal is being established.
   */
  public subject: fhir.Reference|null;
  /**
   * The date or event after which the goal should begin being pursued.
   */
  public start?: (fhir.FhirDate|fhir.CodeableConcept)|undefined;
  readonly __startIsChoice:true = true;
  /**
   * When multiple targets are present for a single goal instance, all targets must be met for the overall goal to be met.
   */
  public target?: fhir.GoalTarget[]|undefined = [];
  /**
   * To see the date for past statuses, query history.
   */
  public statusDate?: fhir.FhirDate|undefined;
  /**
   * This will typically be captured for statuses such as rejected, on-hold or cancelled, but could be present for others.
   */
  public statusReason?: fhir.FhirString|undefined;
  /**
   * This is the individual responsible for establishing the goal, not necessarily who recorded it.  (For that, use the Provenance resource.).
   */
  public expressedBy?: fhir.Reference|undefined;
  /**
   * The identified conditions and other health record elements that are intended to be addressed by the goal.
   */
  public addresses?: fhir.Reference[]|undefined = [];
  /**
   * May be used for progress notes, concerns or other related information that doesn't actually describe the goal itself.
   */
  public note?: fhir.Annotation[]|undefined = [];
  /**
   * Note that this should not duplicate the goal status.
   */
  public outcomeCode?: fhir.CodeableConcept[]|undefined = [];
  /**
   * The goal outcome is independent of the outcome of the related activities.  For example, if the Goal is to achieve a target body weight of 150 lb and a care plan activity is defined to diet, then the care plan’s activity outcome could be calories consumed whereas goal outcome is an observation for the actual body weight measured.
   */
  public outcomeReference?: fhir.Reference[]|undefined = [];
  /**
   * Default constructor for Goal - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<GoalArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'Goal';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['lifecycleStatus']) { this.lifecycleStatus = source.lifecycleStatus; }
    else { this.lifecycleStatus = null; }
    if (source['achievementStatus']) { this.achievementStatus = new fhir.CodeableConcept(source.achievementStatus); }
    if (source['category']) { this.category = source.category.map((x) => new fhir.CodeableConcept(x)); }
    if (source['priority']) { this.priority = new fhir.CodeableConcept(source.priority); }
    if (source['description']) { this.description = new fhir.CodeableConcept(source.description); }
    else { this.description = null; }
    if (source['subject']) { this.subject = new fhir.Reference(source.subject); }
    else { this.subject = null; }
    if (source['start']) { this.start = source.start; }
    else if (source['startDate']) { this.start = new fhir.FhirDate({value: source.startDate}); }
    else if (source['startCodeableConcept']) { this.start = new fhir.CodeableConcept(source.startCodeableConcept); }
    if (source['target']) { this.target = source.target.map((x) => new fhir.GoalTarget(x)); }
    if (source['statusDate']) { this.statusDate = new fhir.FhirDate({value: source.statusDate}); }
    if (source['statusReason']) { this.statusReason = new fhir.FhirString({value: source.statusReason}); }
    if (source['expressedBy']) { this.expressedBy = new fhir.Reference(source.expressedBy); }
    if (source['addresses']) { this.addresses = source.addresses.map((x) => new fhir.Reference(x)); }
    if (source['note']) { this.note = source.note.map((x) => new fhir.Annotation(x)); }
    if (source['outcomeCode']) { this.outcomeCode = source.outcomeCode.map((x) => new fhir.CodeableConcept(x)); }
    if (source['outcomeReference']) { this.outcomeReference = source.outcomeReference.map((x) => new fhir.Reference(x)); }
  }
  /**
   * Required-bound Value Set for lifecycleStatus
   */
  public static lifecycleStatusRequiredValueSet():GoalStatusValueSetType {
    return GoalStatusValueSet;
  }
  /**
   * Preferred-bound Value Set for achievementStatus
   */
  public static achievementStatusPreferredValueSet():GoalAchievementValueSetType {
    return GoalAchievementValueSet;
  }
  /**
   * Example-bound Value Set for category
   */
  public static categoryExampleValueSet():GoalCategoryValueSetType {
    return GoalCategoryValueSet;
  }
  /**
   * Preferred-bound Value Set for priority
   */
  public static priorityPreferredValueSet():GoalPriorityValueSetType {
    return GoalPriorityValueSet;
  }
  /**
   * Example-bound Value Set for description
   */
  public static descriptionExampleValueSet():ClinicalFindingsValueSetType {
    return ClinicalFindingsValueSet;
  }
  /**
   * Example-bound Value Set for outcomeCode
   */
  public static outcomeCodeExampleValueSet():ClinicalFindingsValueSetType {
    return ClinicalFindingsValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['resourceType']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property resourceType:'Goal' fhir: Goal.resourceType:'Goal'", }));
    }
    if (this["identifier"]) { this.identifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (!this['lifecycleStatus']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property lifecycleStatus:GoalStatusValueSetEnum fhir: Goal.lifecycleStatus:code", }));
    }
    if (this["achievementStatus"]) { outcome.issue!.push(...this.achievementStatus.doModelValidation().issue!); }
    if (this["category"]) { this.category.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["priority"]) { outcome.issue!.push(...this.priority.doModelValidation().issue!); }
    if (!this['description']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property description:fhir.CodeableConcept fhir: Goal.description:CodeableConcept", }));
    }
    if (this["description"]) { outcome.issue!.push(...this.description.doModelValidation().issue!); }
    if (!this['subject']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property subject:fhir.Reference fhir: Goal.subject:Reference", }));
    }
    if (this["subject"]) { outcome.issue!.push(...this.subject.doModelValidation().issue!); }
    if (this["target"]) { this.target.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["statusDate"]) { outcome.issue!.push(...this.statusDate.doModelValidation().issue!); }
    if (this["statusReason"]) { outcome.issue!.push(...this.statusReason.doModelValidation().issue!); }
    if (this["expressedBy"]) { outcome.issue!.push(...this.expressedBy.doModelValidation().issue!); }
    if (this["addresses"]) { this.addresses.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["note"]) { this.note.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["outcomeCode"]) { this.outcomeCode.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["outcomeReference"]) { this.outcomeReference.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
