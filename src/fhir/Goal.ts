// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * When multiple targets are present for a single goal instance, all targets must be met for the overall goal to be met.
 */
export type IGoalTarget = fhir.IBackboneElement & {
  /**
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  detailQuantity?: fhir.IQuantity|undefined;
  /**
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  detailRange?: fhir.IRange|undefined;
  /**
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  detailCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  detailString?: string|undefined;
  _detailString?: fhir.IFhirElement|undefined;
  /**
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  detailBoolean?: boolean|undefined;
  _detailBoolean?: fhir.IFhirElement|undefined;
  /**
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  detailInteger?: number|undefined;
  _detailInteger?: fhir.IFhirElement|undefined;
  /**
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  detailRatio?: fhir.IRatio|undefined;
  /**
   * Indicates either the date or the duration after start by which the goal should be met.
   */
  dueDate?: string|undefined;
  _dueDate?: fhir.IFhirElement|undefined;
  /**
   * Indicates either the date or the duration after start by which the goal should be met.
   */
  dueDuration?: fhir.IDuration|undefined;
  /**
   * The parameter whose value is being tracked, e.g. body weight, blood pressure, or hemoglobin A1c level.
   */
  measure?: fhir.ICodeableConcept|undefined;
}
/**
 * Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
 */
export type IGoal = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "Goal";
  /**
   * Describes the progression, or lack thereof, towards the goal against the target.
   */
  achievementStatus?: fhir.ICodeableConcept|undefined;
  /**
   * The identified conditions and other health record elements that are intended to be addressed by the goal.
   */
  addresses?: fhir.IReference[]|undefined;
  /**
   * Indicates a category the goal falls within.
   */
  category?: fhir.ICodeableConcept[]|undefined;
  /**
   * If no code is available, use CodeableConcept.text.
   */
  description: fhir.ICodeableConcept|null;
  /**
   * This is the individual responsible for establishing the goal, not necessarily who recorded it.  (For that, use the Provenance resource.).
   */
  expressedBy?: fhir.IReference|undefined;
  /**
   * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * This element is labeled as a modifier because the lifecycleStatus contains codes that mark the resource as not currently valid.
   */
  lifecycleStatus: GoalLifecycleStatusEnum|null;
  _lifecycleStatus?: fhir.IFhirElement|undefined;
  /**
   * May be used for progress notes, concerns or other related information that doesn't actually describe the goal itself.
   */
  note?: fhir.IAnnotation[]|undefined;
  /**
   * Note that this should not duplicate the goal status.
   */
  outcomeCode?: fhir.ICodeableConcept[]|undefined;
  /**
   * The goal outcome is independent of the outcome of the related activities.  For example, if the Goal is to achieve a target body weight of 150 lb and a care plan activity is defined to diet, then the care planâ€™s activity outcome could be calories consumed whereas goal outcome is an observation for the actual body weight measured.
   */
  outcomeReference?: fhir.IReference[]|undefined;
  /**
   * Extensions are available to track priorities as established by each participant (i.e. Priority from the patient's perspective, different practitioners' perspectives, family member's perspectives)
   * The ordinal extension on Coding can be used to convey a numerically comparable ranking to priority.  (Keep in mind that different coding systems may use a "low value=important".
   */
  priority?: fhir.ICodeableConcept|undefined;
  /**
   * The date or event after which the goal should begin being pursued.
   */
  startDate?: string|undefined;
  _startDate?: fhir.IFhirElement|undefined;
  /**
   * The date or event after which the goal should begin being pursued.
   */
  startCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * To see the date for past statuses, query history.
   */
  statusDate?: string|undefined;
  _statusDate?: fhir.IFhirElement|undefined;
  /**
   * This will typically be captured for statuses such as rejected, on-hold or cancelled, but could be present for others.
   */
  statusReason?: string|undefined;
  _statusReason?: fhir.IFhirElement|undefined;
  /**
   * Identifies the patient, group or organization for whom the goal is being established.
   */
  subject: fhir.IReference|null;
  /**
   * When multiple targets are present for a single goal instance, all targets must be met for the overall goal to be met.
   */
  target?: fhir.IGoalTarget[]|undefined;
}
/**
 * When multiple targets are present for a single goal instance, all targets must be met for the overall goal to be met.
 */
export class GoalTarget extends fhir.BackboneElement implements fhir.IGoalTarget {
  /**
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  public detailQuantity?: fhir.Quantity|undefined;
  /**
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  public detailRange?: fhir.Range|undefined;
  /**
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  public detailCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  public detailString?: string|undefined;
  public _detailString?: fhir.FhirElement|undefined;
  /**
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  public detailBoolean?: boolean|undefined;
  public _detailBoolean?: fhir.FhirElement|undefined;
  /**
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  public detailInteger?: number|undefined;
  public _detailInteger?: fhir.FhirElement|undefined;
  /**
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  public detailRatio?: fhir.Ratio|undefined;
  /**
   * Indicates either the date or the duration after start by which the goal should be met.
   */
  public dueDate?: string|undefined;
  public _dueDate?: fhir.FhirElement|undefined;
  /**
   * Indicates either the date or the duration after start by which the goal should be met.
   */
  public dueDuration?: fhir.Duration|undefined;
  /**
   * The parameter whose value is being tracked, e.g. body weight, blood pressure, or hemoglobin A1c level.
   */
  public measure?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for GoalTarget - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IGoalTarget> = {}) {
    super(source);
    if (source["detailQuantity"]) { this.detailQuantity = new fhir.Quantity(source.detailQuantity!); }
    if (source["detailRange"]) { this.detailRange = new fhir.Range(source.detailRange!); }
    if (source["detailCodeableConcept"]) { this.detailCodeableConcept = new fhir.CodeableConcept(source.detailCodeableConcept!); }
    if (source["detailString"]) { this.detailString = source.detailString; }
    if (source["_detailString"]) { this._detailString = new fhir.FhirElement(source._detailString!); }
    if (source["detailBoolean"]) { this.detailBoolean = source.detailBoolean; }
    if (source["_detailBoolean"]) { this._detailBoolean = new fhir.FhirElement(source._detailBoolean!); }
    if (source["detailInteger"]) { this.detailInteger = source.detailInteger; }
    if (source["_detailInteger"]) { this._detailInteger = new fhir.FhirElement(source._detailInteger!); }
    if (source["detailRatio"]) { this.detailRatio = new fhir.Ratio(source.detailRatio!); }
    if (source["dueDate"]) { this.dueDate = source.dueDate; }
    if (source["_dueDate"]) { this._dueDate = new fhir.FhirElement(source._dueDate!); }
    if (source["dueDuration"]) { this.dueDuration = new fhir.Duration(source.dueDuration!); }
    if (source["measure"]) { this.measure = new fhir.CodeableConcept(source.measure!); }
  }
  /**
   * Check if the current GoalTarget contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a GoalTarget from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IGoalTarget):GoalTarget {
    var dest:GoalTarget = new GoalTarget(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `GoalTarget is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
 */
export class Goal extends fhir.DomainResource implements fhir.IGoal {
  /**
   * Resource Type Name
   */
  public override resourceType: "Goal";
  /**
   * Describes the progression, or lack thereof, towards the goal against the target.
   */
  public achievementStatus?: fhir.CodeableConcept|undefined;
  /**
   * The identified conditions and other health record elements that are intended to be addressed by the goal.
   */
  public addresses?: fhir.Reference[]|undefined;
  /**
   * Indicates a category the goal falls within.
   */
  public category?: fhir.CodeableConcept[]|undefined;
  /**
   * If no code is available, use CodeableConcept.text.
   */
  public description: fhir.CodeableConcept|null;
  /**
   * This is the individual responsible for establishing the goal, not necessarily who recorded it.  (For that, use the Provenance resource.).
   */
  public expressedBy?: fhir.Reference|undefined;
  /**
   * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * This element is labeled as a modifier because the lifecycleStatus contains codes that mark the resource as not currently valid.
   */
  public lifecycleStatus: GoalLifecycleStatusEnum|null;
  public _lifecycleStatus?: fhir.FhirElement|undefined;
  /**
   * May be used for progress notes, concerns or other related information that doesn't actually describe the goal itself.
   */
  public note?: fhir.Annotation[]|undefined;
  /**
   * Note that this should not duplicate the goal status.
   */
  public outcomeCode?: fhir.CodeableConcept[]|undefined;
  /**
   * The goal outcome is independent of the outcome of the related activities.  For example, if the Goal is to achieve a target body weight of 150 lb and a care plan activity is defined to diet, then the care planâ€™s activity outcome could be calories consumed whereas goal outcome is an observation for the actual body weight measured.
   */
  public outcomeReference?: fhir.Reference[]|undefined;
  /**
   * Extensions are available to track priorities as established by each participant (i.e. Priority from the patient's perspective, different practitioners' perspectives, family member's perspectives)
   * The ordinal extension on Coding can be used to convey a numerically comparable ranking to priority.  (Keep in mind that different coding systems may use a "low value=important".
   */
  public priority?: fhir.CodeableConcept|undefined;
  /**
   * The date or event after which the goal should begin being pursued.
   */
  public startDate?: string|undefined;
  public _startDate?: fhir.FhirElement|undefined;
  /**
   * The date or event after which the goal should begin being pursued.
   */
  public startCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * To see the date for past statuses, query history.
   */
  public statusDate?: string|undefined;
  public _statusDate?: fhir.FhirElement|undefined;
  /**
   * This will typically be captured for statuses such as rejected, on-hold or cancelled, but could be present for others.
   */
  public statusReason?: string|undefined;
  public _statusReason?: fhir.FhirElement|undefined;
  /**
   * Identifies the patient, group or organization for whom the goal is being established.
   */
  public subject: fhir.Reference|null;
  /**
   * When multiple targets are present for a single goal instance, all targets must be met for the overall goal to be met.
   */
  public target?: fhir.GoalTarget[]|undefined;
  /**
   * Default constructor for Goal - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IGoal> = {}) {
    super(source);
    this.resourceType = 'Goal';
    if (source["achievementStatus"]) { this.achievementStatus = new fhir.CodeableConcept(source.achievementStatus!); }
    if (source["addresses"]) { this.addresses = source.addresses.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["category"]) { this.category = source.category.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    this.description = null;
    if (source["description"]) { this.description = new fhir.CodeableConcept(source.description!); }
    if (this.description === undefined) { this.description = null }
    if (source["expressedBy"]) { this.expressedBy = new fhir.Reference(source.expressedBy!); }
    if (source["identifier"]) { this.identifier = source.identifier.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    this.lifecycleStatus = null;
    if (source["lifecycleStatus"]) { this.lifecycleStatus = source.lifecycleStatus; }
    if (this.lifecycleStatus === undefined) { this.lifecycleStatus = null }
    if (source["_lifecycleStatus"]) { this._lifecycleStatus = new fhir.FhirElement(source._lifecycleStatus!); }
    if (source["note"]) { this.note = source.note.map((x:Partial<fhir.IAnnotation>) => new fhir.Annotation(x)); }
    if (source["outcomeCode"]) { this.outcomeCode = source.outcomeCode.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["outcomeReference"]) { this.outcomeReference = source.outcomeReference.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["priority"]) { this.priority = new fhir.CodeableConcept(source.priority!); }
    if (source["startDate"]) { this.startDate = source.startDate; }
    if (source["_startDate"]) { this._startDate = new fhir.FhirElement(source._startDate!); }
    if (source["startCodeableConcept"]) { this.startCodeableConcept = new fhir.CodeableConcept(source.startCodeableConcept!); }
    if (source["statusDate"]) { this.statusDate = source.statusDate; }
    if (source["_statusDate"]) { this._statusDate = new fhir.FhirElement(source._statusDate!); }
    if (source["statusReason"]) { this.statusReason = source.statusReason; }
    if (source["_statusReason"]) { this._statusReason = new fhir.FhirElement(source._statusReason!); }
    this.subject = null;
    if (source["subject"]) { this.subject = new fhir.Reference(source.subject!); }
    if (this.subject === undefined) { this.subject = null }
    if (source["target"]) { this.target = source.target.map((x:Partial<fhir.IGoalTarget>) => new fhir.GoalTarget(x)); }
  }
  /**
   * Check if the current Goal contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["description"] === undefined) { missingElements.push("description"); }
    if (this["lifecycleStatus"] === undefined) { missingElements.push("lifecycleStatus"); }
    if (this["subject"] === undefined) { missingElements.push("subject"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a Goal from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IGoal):Goal {
    var dest:Goal = new Goal(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `Goal is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the Goal.lifecycleStatus field
 */
export enum GoalLifecycleStatusEnum {
  PROPOSED = "proposed",
  PLANNED = "planned",
  ACCEPTED = "accepted",
  ACTIVE = "active",
  ON_HOLD = "on-hold",
  COMPLETED = "completed",
  CANCELLED = "cancelled",
  ENTERED_IN_ERROR = "entered-in-error",
  REJECTED = "rejected",
}
