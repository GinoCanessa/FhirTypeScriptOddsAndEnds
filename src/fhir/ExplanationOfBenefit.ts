// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ExplanationOfBenefit

import * as fhir from '../fhir.js'

import { RelatedClaimRelationshipValueSet, RelatedClaimRelationshipValueSetType, RelatedClaimRelationshipValueSetEnum } from '../fhirValueSets/RelatedClaimRelationshipValueSet.js'
import { PayeetypeValueSet, PayeetypeValueSetType, PayeetypeValueSetEnum } from '../fhirValueSets/PayeetypeValueSet.js'
import { ClaimCareteamroleValueSet, ClaimCareteamroleValueSetType, ClaimCareteamroleValueSetEnum } from '../fhirValueSets/ClaimCareteamroleValueSet.js'
import { ProviderQualificationValueSet, ProviderQualificationValueSetType, ProviderQualificationValueSetEnum } from '../fhirValueSets/ProviderQualificationValueSet.js'
import { ClaimInformationcategoryValueSet, ClaimInformationcategoryValueSetType, ClaimInformationcategoryValueSetEnum } from '../fhirValueSets/ClaimInformationcategoryValueSet.js'
import { ClaimExceptionValueSet, ClaimExceptionValueSetType, ClaimExceptionValueSetEnum } from '../fhirValueSets/ClaimExceptionValueSet.js'
import { MissingToothReasonValueSet, MissingToothReasonValueSetType, MissingToothReasonValueSetEnum } from '../fhirValueSets/MissingToothReasonValueSet.js'
import { ExDiagnosistypeValueSet, ExDiagnosistypeValueSetType, ExDiagnosistypeValueSetEnum } from '../fhirValueSets/ExDiagnosistypeValueSet.js'
import { ExDiagnosisOnAdmissionValueSet, ExDiagnosisOnAdmissionValueSetType, ExDiagnosisOnAdmissionValueSetEnum } from '../fhirValueSets/ExDiagnosisOnAdmissionValueSet.js'
import { ExDiagnosisrelatedgroupValueSet, ExDiagnosisrelatedgroupValueSetType, ExDiagnosisrelatedgroupValueSetEnum } from '../fhirValueSets/ExDiagnosisrelatedgroupValueSet.js'
import { ExProcedureTypeValueSet, ExProcedureTypeValueSetType, ExProcedureTypeValueSetEnum } from '../fhirValueSets/ExProcedureTypeValueSet.js'
import { Icd10ProceduresValueSet, Icd10ProceduresValueSetType, Icd10ProceduresValueSetEnum } from '../fhirValueSets/Icd10ProceduresValueSet.js'
import { V3ActIncidentCodeValueSet, V3ActIncidentCodeValueSetType, V3ActIncidentCodeValueSetEnum } from '../fhirValueSets/V3ActIncidentCodeValueSet.js'
import { AdjudicationValueSet, AdjudicationValueSetType, AdjudicationValueSetEnum } from '../fhirValueSets/AdjudicationValueSet.js'
import { AdjudicationReasonValueSet, AdjudicationReasonValueSetType, AdjudicationReasonValueSetEnum } from '../fhirValueSets/AdjudicationReasonValueSet.js'
import { ExRevenueCenterValueSet, ExRevenueCenterValueSetType, ExRevenueCenterValueSetEnum } from '../fhirValueSets/ExRevenueCenterValueSet.js'
import { ExBenefitcategoryValueSet, ExBenefitcategoryValueSetType, ExBenefitcategoryValueSetEnum } from '../fhirValueSets/ExBenefitcategoryValueSet.js'
import { ServiceUsclsValueSet, ServiceUsclsValueSetType, ServiceUsclsValueSetEnum } from '../fhirValueSets/ServiceUsclsValueSet.js'
import { ClaimModifiersValueSet, ClaimModifiersValueSetType, ClaimModifiersValueSetEnum } from '../fhirValueSets/ClaimModifiersValueSet.js'
import { ExProgramCodeValueSet, ExProgramCodeValueSetType, ExProgramCodeValueSetEnum } from '../fhirValueSets/ExProgramCodeValueSet.js'
import { ServicePlaceValueSet, ServicePlaceValueSetType, ServicePlaceValueSetEnum } from '../fhirValueSets/ServicePlaceValueSet.js'
import { ToothValueSet, ToothValueSetType, ToothValueSetEnum } from '../fhirValueSets/ToothValueSet.js'
import { SurfaceValueSet, SurfaceValueSetType, SurfaceValueSetEnum } from '../fhirValueSets/SurfaceValueSet.js'
import { ExPaymenttypeValueSet, ExPaymenttypeValueSetType, ExPaymenttypeValueSetEnum } from '../fhirValueSets/ExPaymenttypeValueSet.js'
import { PaymentAdjustmentReasonValueSet, PaymentAdjustmentReasonValueSetType, PaymentAdjustmentReasonValueSetEnum } from '../fhirValueSets/PaymentAdjustmentReasonValueSet.js'
import { NoteTypeValueSet, NoteTypeValueSetType, NoteTypeValueSetEnum } from '../fhirValueSets/NoteTypeValueSet.js'
import { LanguagesValueSet, LanguagesValueSetType, LanguagesValueSetEnum } from '../fhirValueSets/LanguagesValueSet.js'
import { BenefitTypeValueSet, BenefitTypeValueSetType, BenefitTypeValueSetEnum } from '../fhirValueSets/BenefitTypeValueSet.js'
import { BenefitNetworkValueSet, BenefitNetworkValueSetType, BenefitNetworkValueSetEnum } from '../fhirValueSets/BenefitNetworkValueSet.js'
import { BenefitUnitValueSet, BenefitUnitValueSetType, BenefitUnitValueSetEnum } from '../fhirValueSets/BenefitUnitValueSet.js'
import { BenefitTermValueSet, BenefitTermValueSetType, BenefitTermValueSetEnum } from '../fhirValueSets/BenefitTermValueSet.js'
import { ExplanationofbenefitStatusValueSet, ExplanationofbenefitStatusValueSetType, ExplanationofbenefitStatusValueSetEnum } from '../fhirValueSets/ExplanationofbenefitStatusValueSet.js'
import { ClaimTypeValueSet, ClaimTypeValueSetType, ClaimTypeValueSetEnum } from '../fhirValueSets/ClaimTypeValueSet.js'
import { ClaimSubtypeValueSet, ClaimSubtypeValueSetType, ClaimSubtypeValueSetEnum } from '../fhirValueSets/ClaimSubtypeValueSet.js'
import { ClaimUseValueSet, ClaimUseValueSetType, ClaimUseValueSetEnum } from '../fhirValueSets/ClaimUseValueSet.js'
import { FundsreserveValueSet, FundsreserveValueSetType, FundsreserveValueSetEnum } from '../fhirValueSets/FundsreserveValueSet.js'
import { RemittanceOutcomeValueSet, RemittanceOutcomeValueSetType, RemittanceOutcomeValueSetEnum } from '../fhirValueSets/RemittanceOutcomeValueSet.js'
import { FormsValueSet, FormsValueSetType, FormsValueSetEnum } from '../fhirValueSets/FormsValueSet.js'

/**
 * For example,  for the original treatment and follow-up exams.
 */
export type IExplanationOfBenefitRelated = fhir.IBackboneElement & { 
  /**
   * Reference to a related claim.
   */
  claim?: fhir.IReference|undefined;
  /**
   * For example, prior claim or umbrella.
   */
  relationship?: fhir.ICodeableConcept|undefined;
  /**
   * For example, Property/Casualty insurer claim number or Workers Compensation case number.
   */
  reference?: fhir.IIdentifier|undefined;
}

/**
 * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and may choose to pay the subscriber instead.
 */
export type IExplanationOfBenefitPayee = fhir.IBackboneElement & { 
  /**
   * Type of Party to be reimbursed: Subscriber, provider, other.
   */
  type?: fhir.ICodeableConcept|undefined;
  /**
   * Not required if the payee is 'subscriber' or 'provider'.
   */
  party?: fhir.IReference|undefined;
}

/**
 * The members of the team who provided the products and services.
 */
export type IExplanationOfBenefitCareTeam = fhir.IBackboneElement & { 
  /**
   * A number to uniquely identify care team entries.
   */
  sequence: number|null;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.careTeam.sequence
   */
  _sequence?: fhir.IFhirElement|undefined;
  /**
   * Member of the team who provided the product or service.
   */
  provider: fhir.IReference|null;
  /**
   * Responsible might not be required when there is only a single provider listed.
   */
  responsible?: boolean|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.careTeam.responsible
   */
  _responsible?: fhir.IFhirElement|undefined;
  /**
   * Role might not be required when there is only a single provider listed.
   */
  role?: fhir.ICodeableConcept|undefined;
  /**
   * The qualification of the practitioner which is applicable for this service.
   */
  qualification?: fhir.ICodeableConcept|undefined;
}

/**
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
export type IExplanationOfBenefitSupportingInfo = fhir.IBackboneElement & { 
  /**
   * A number to uniquely identify supporting information entries.
   */
  sequence: number|null;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.supportingInfo.sequence
   */
  _sequence?: fhir.IFhirElement|undefined;
  /**
   * This may contain a category for the local bill type codes.
   */
  category: fhir.ICodeableConcept|null;
  /**
   * This may contain the local bill type codes such as the US UB-04 bill type code.
   */
  code?: fhir.ICodeableConcept|undefined;
  /**
   * The date when or period to which this information refers.
   */
  timingDate?: string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.supportingInfo.timing[x]
   */
  _timingDate?: fhir.IFhirElement|undefined;
  /**
   * The date when or period to which this information refers.
   */
  timingPeriod?: fhir.IPeriod|undefined;
  /**
   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueBoolean?: boolean|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.supportingInfo.value[x]
   */
  _valueBoolean?: fhir.IFhirElement|undefined;
  /**
   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueString?: string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.supportingInfo.value[x]
   */
  _valueString?: fhir.IFhirElement|undefined;
  /**
   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueQuantity?: fhir.IQuantity|undefined;
  /**
   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueAttachment?: fhir.IAttachment|undefined;
  /**
   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueReference?: fhir.IReference|undefined;
  /**
   * For example: the reason for the additional stay, or why a tooth is  missing.
   */
  reason?: fhir.ICoding|undefined;
}

/**
 * Information about diagnoses relevant to the claim items.
 */
export type IExplanationOfBenefitDiagnosis = fhir.IBackboneElement & { 
  /**
   * Diagnosis are presented in list order to their expected importance: primary, secondary, etc.
   */
  sequence: number|null;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.diagnosis.sequence
   */
  _sequence?: fhir.IFhirElement|undefined;
  /**
   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
   */
  diagnosisCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
   */
  diagnosisReference?: fhir.IReference|undefined;
  /**
   * For example: admitting, primary, secondary, discharge.
   */
  type?: fhir.ICodeableConcept[]|undefined;
  /**
   * Indication of whether the diagnosis was present on admission to a facility.
   */
  onAdmission?: fhir.ICodeableConcept|undefined;
  /**
   * For example, DRG (Diagnosis Related Group) or a bundled billing code. A patient may have a diagnosis of a Myocardio-infarction and a DRG for HeartAttack would assigned. The Claim item (and possible subsequent claims) would refer to the DRG for those line items that were for services related to the heart attack event.
   */
  packageCode?: fhir.ICodeableConcept|undefined;
}

/**
 * Procedures performed on the patient relevant to the billing items with the claim.
 */
export type IExplanationOfBenefitProcedure = fhir.IBackboneElement & { 
  /**
   * A number to uniquely identify procedure entries.
   */
  sequence: number|null;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.procedure.sequence
   */
  _sequence?: fhir.IFhirElement|undefined;
  /**
   * When the condition was observed or the relative ranking.
   */
  type?: fhir.ICodeableConcept[]|undefined;
  /**
   * Date and optionally time the procedure was performed.
   */
  date?: string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.procedure.date
   */
  _date?: fhir.IFhirElement|undefined;
  /**
   * The code or reference to a Procedure resource which identifies the clinical intervention performed.
   */
  procedureCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * The code or reference to a Procedure resource which identifies the clinical intervention performed.
   */
  procedureReference?: fhir.IReference|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: fhir.IReference[]|undefined;
}

/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export type IExplanationOfBenefitInsurance = fhir.IBackboneElement & { 
  /**
   * A patient may (will) have multiple insurance policies which provide reimbursement for healthcare services and products. For example, a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for adjudicating this claim. Other claims would be created to request adjudication against the other listed policies.
   */
  focal: boolean|null;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.insurance.focal
   */
  _focal?: fhir.IFhirElement|undefined;
  /**
   * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
   */
  coverage: fhir.IReference|null;
  /**
   * This value is an alphanumeric string that may be provided over the phone, via text, via paper, or within a ClaimResponse resource and is not a FHIR Identifier.
   */
  preAuthRef?: string[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.insurance.preAuthRef
   */
  _preAuthRef?: fhir.IFhirElement[]|undefined;
}

/**
 * Details of a accident which resulted in injuries which required the products and services listed in the claim.
 */
export type IExplanationOfBenefitAccident = fhir.IBackboneElement & { 
  /**
   * The date of the accident has to precede the dates of the products and services but within a reasonable timeframe.
   */
  date?: string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.accident.date
   */
  _date?: fhir.IFhirElement|undefined;
  /**
   * The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.
   */
  type?: fhir.ICodeableConcept|undefined;
  /**
   * The physical location of the accident event.
   */
  locationAddress?: fhir.IAddress|undefined;
  /**
   * The physical location of the accident event.
   */
  locationReference?: fhir.IReference|undefined;
}

/**
 * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
 */
export type IExplanationOfBenefitItemAdjudication = fhir.IBackboneElement & { 
  /**
   * For example, codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  category: fhir.ICodeableConcept|null;
  /**
   * For example, may indicate that the funds for this benefit type have been exhausted.
   */
  reason?: fhir.ICodeableConcept|undefined;
  /**
   * For example, amount submitted, eligible amount, co-payment, and benefit payable.
   */
  amount?: fhir.IMoney|undefined;
  /**
   * For example: eligible percentage or co-payment percentage.
   */
  value?: number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.adjudication.value
   */
  _value?: fhir.IFhirElement|undefined;
}

/**
 * Third-tier of goods and services.
 */
export type IExplanationOfBenefitItemDetailSubDetail = fhir.IBackboneElement & { 
  /**
   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  sequence: number|null;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.detail.subDetail.sequence
   */
  _sequence?: fhir.IFhirElement|undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: fhir.ICodeableConcept|undefined;
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category?: fhir.ICodeableConcept|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService: fhir.ICodeableConcept|null;
  /**
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
   */
  modifier?: fhir.ICodeableConcept[]|undefined;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  programCode?: fhir.ICodeableConcept[]|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: fhir.IQuantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: fhir.IMoney|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.detail.subDetail.factor
   */
  _factor?: fhir.IFhirElement|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: fhir.IMoney|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: fhir.IReference[]|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: number[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.detail.subDetail.noteNumber
   */
  _noteNumber?: fhir.IFhirElement[]|undefined;
  /**
   * The adjudication results.
   */
  adjudication?: fhir.IExplanationOfBenefitItemAdjudication[]|undefined;
}

/**
 * Second-tier of goods and services.
 */
export type IExplanationOfBenefitItemDetail = fhir.IBackboneElement & { 
  /**
   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  sequence: number|null;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.detail.sequence
   */
  _sequence?: fhir.IFhirElement|undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: fhir.ICodeableConcept|undefined;
  /**
   * Examples include: Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category?: fhir.ICodeableConcept|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService: fhir.ICodeableConcept|null;
  /**
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: fhir.ICodeableConcept[]|undefined;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  programCode?: fhir.ICodeableConcept[]|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: fhir.IQuantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: fhir.IMoney|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.detail.factor
   */
  _factor?: fhir.IFhirElement|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: fhir.IMoney|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: fhir.IReference[]|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: number[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.detail.noteNumber
   */
  _noteNumber?: fhir.IFhirElement[]|undefined;
  /**
   * The adjudication results.
   */
  adjudication?: fhir.IExplanationOfBenefitItemAdjudication[]|undefined;
  /**
   * Third-tier of goods and services.
   */
  subDetail?: fhir.IExplanationOfBenefitItemDetailSubDetail[]|undefined;
}

/**
 * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
 */
export type IExplanationOfBenefitItem = fhir.IBackboneElement & { 
  /**
   * A number to uniquely identify item entries.
   */
  sequence: number|null;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.sequence
   */
  _sequence?: fhir.IFhirElement|undefined;
  /**
   * Care team members related to this service or product.
   */
  careTeamSequence?: number[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.careTeamSequence
   */
  _careTeamSequence?: fhir.IFhirElement[]|undefined;
  /**
   * Diagnoses applicable for this service or product.
   */
  diagnosisSequence?: number[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.diagnosisSequence
   */
  _diagnosisSequence?: fhir.IFhirElement[]|undefined;
  /**
   * Procedures applicable for this service or product.
   */
  procedureSequence?: number[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.procedureSequence
   */
  _procedureSequence?: fhir.IFhirElement[]|undefined;
  /**
   * Exceptions, special conditions and supporting information applicable for this service or product.
   */
  informationSequence?: number[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.informationSequence
   */
  _informationSequence?: fhir.IFhirElement[]|undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: fhir.ICodeableConcept|undefined;
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category?: fhir.ICodeableConcept|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService: fhir.ICodeableConcept|null;
  /**
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: fhir.ICodeableConcept[]|undefined;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  programCode?: fhir.ICodeableConcept[]|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  servicedDate?: string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.serviced[x]
   */
  _servicedDate?: fhir.IFhirElement|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  servicedPeriod?: fhir.IPeriod|undefined;
  /**
   * Where the product or service was provided.
   */
  locationCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * Where the product or service was provided.
   */
  locationAddress?: fhir.IAddress|undefined;
  /**
   * Where the product or service was provided.
   */
  locationReference?: fhir.IReference|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: fhir.IQuantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: fhir.IMoney|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.factor
   */
  _factor?: fhir.IFhirElement|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: fhir.IMoney|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: fhir.IReference[]|undefined;
  /**
   * For example: Providing a tooth code, allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
   */
  bodySite?: fhir.ICodeableConcept|undefined;
  /**
   * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
   */
  subSite?: fhir.ICodeableConcept[]|undefined;
  /**
   * A billed item may include goods or services provided in multiple encounters.
   */
  encounter?: fhir.IReference[]|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: number[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.noteNumber
   */
  _noteNumber?: fhir.IFhirElement[]|undefined;
  /**
   * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
   */
  adjudication?: fhir.IExplanationOfBenefitItemAdjudication[]|undefined;
  /**
   * Second-tier of goods and services.
   */
  detail?: fhir.IExplanationOfBenefitItemDetail[]|undefined;
}

/**
 * The third-tier service adjudications for payor added services.
 */
export type IExplanationOfBenefitAddItemDetailSubDetail = fhir.IBackboneElement & { 
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService: fhir.ICodeableConcept|null;
  /**
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: fhir.ICodeableConcept[]|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: fhir.IQuantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: fhir.IMoney|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.detail.subDetail.factor
   */
  _factor?: fhir.IFhirElement|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: fhir.IMoney|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: number[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.detail.subDetail.noteNumber
   */
  _noteNumber?: fhir.IFhirElement[]|undefined;
  /**
   * The adjudication results.
   */
  adjudication?: fhir.IExplanationOfBenefitItemAdjudication[]|undefined;
}

/**
 * The second-tier service adjudications for payor added services.
 */
export type IExplanationOfBenefitAddItemDetail = fhir.IBackboneElement & { 
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService: fhir.ICodeableConcept|null;
  /**
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: fhir.ICodeableConcept[]|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: fhir.IQuantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: fhir.IMoney|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.detail.factor
   */
  _factor?: fhir.IFhirElement|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: fhir.IMoney|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: number[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.detail.noteNumber
   */
  _noteNumber?: fhir.IFhirElement[]|undefined;
  /**
   * The adjudication results.
   */
  adjudication?: fhir.IExplanationOfBenefitItemAdjudication[]|undefined;
  /**
   * The third-tier service adjudications for payor added services.
   */
  subDetail?: fhir.IExplanationOfBenefitAddItemDetailSubDetail[]|undefined;
}

/**
 * The first-tier service adjudications for payor added product or service lines.
 */
export type IExplanationOfBenefitAddItem = fhir.IBackboneElement & { 
  /**
   * Claim items which this service line is intended to replace.
   */
  itemSequence?: number[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.itemSequence
   */
  _itemSequence?: fhir.IFhirElement[]|undefined;
  /**
   * The sequence number of the details within the claim item which this line is intended to replace.
   */
  detailSequence?: number[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.detailSequence
   */
  _detailSequence?: fhir.IFhirElement[]|undefined;
  /**
   * The sequence number of the sub-details woithin the details within the claim item which this line is intended to replace.
   */
  subDetailSequence?: number[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.subDetailSequence
   */
  _subDetailSequence?: fhir.IFhirElement[]|undefined;
  /**
   * The providers who are authorized for the services rendered to the patient.
   */
  provider?: fhir.IReference[]|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService: fhir.ICodeableConcept|null;
  /**
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: fhir.ICodeableConcept[]|undefined;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  programCode?: fhir.ICodeableConcept[]|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  servicedDate?: string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.serviced[x]
   */
  _servicedDate?: fhir.IFhirElement|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  servicedPeriod?: fhir.IPeriod|undefined;
  /**
   * Where the product or service was provided.
   */
  locationCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * Where the product or service was provided.
   */
  locationAddress?: fhir.IAddress|undefined;
  /**
   * Where the product or service was provided.
   */
  locationReference?: fhir.IReference|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: fhir.IQuantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: fhir.IMoney|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.factor
   */
  _factor?: fhir.IFhirElement|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: fhir.IMoney|undefined;
  /**
   * For example, providing a tooth code allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
   */
  bodySite?: fhir.ICodeableConcept|undefined;
  /**
   * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
   */
  subSite?: fhir.ICodeableConcept[]|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: number[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.noteNumber
   */
  _noteNumber?: fhir.IFhirElement[]|undefined;
  /**
   * The adjudication results.
   */
  adjudication?: fhir.IExplanationOfBenefitItemAdjudication[]|undefined;
  /**
   * The second-tier service adjudications for payor added services.
   */
  detail?: fhir.IExplanationOfBenefitAddItemDetail[]|undefined;
}

/**
 * Totals for amounts submitted, co-pays, benefits payable etc.
 */
export type IExplanationOfBenefitTotal = fhir.IBackboneElement & { 
  /**
   * For example, codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  category: fhir.ICodeableConcept|null;
  /**
   * Monetary total amount associated with the category.
   */
  amount: fhir.IMoney|null;
}

/**
 * Payment details for the adjudication of the claim.
 */
export type IExplanationOfBenefitPayment = fhir.IBackboneElement & { 
  /**
   * Whether this represents partial or complete payment of the benefits payable.
   */
  type?: fhir.ICodeableConcept|undefined;
  /**
   * Insurers will deduct amounts owing from the provider (adjustment), such as a prior overpayment, from the amount owing to the provider (benefits payable) when payment is made to the provider.
   */
  adjustment?: fhir.IMoney|undefined;
  /**
   * Reason for the payment adjustment.
   */
  adjustmentReason?: fhir.ICodeableConcept|undefined;
  /**
   * Estimated date the payment will be issued or the actual issue date of payment.
   */
  date?: string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.payment.date
   */
  _date?: fhir.IFhirElement|undefined;
  /**
   * Benefits payable less any payment adjustment.
   */
  amount?: fhir.IMoney|undefined;
  /**
   * For example: EFT number or check number.
   */
  identifier?: fhir.IIdentifier|undefined;
}

/**
 * A note that describes or explains adjudication results in a human readable form.
 */
export type IExplanationOfBenefitProcessNote = fhir.IBackboneElement & { 
  /**
   * A number to uniquely identify a note entry.
   */
  number?: number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.processNote.number
   */
  _number?: fhir.IFhirElement|undefined;
  /**
   * The business purpose of the note text.
   */
  type?: NoteTypeValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.processNote.type
   */
  _type?: fhir.IFhirElement|undefined;
  /**
   * The explanation or description associated with the processing.
   */
  text?: string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.processNote.text
   */
  _text?: fhir.IFhirElement|undefined;
  /**
   * Only required if the language is different from the resource language.
   */
  language?: fhir.ICodeableConcept|undefined;
}

/**
 * Benefits Used to date.
 */
export type IExplanationOfBenefitBenefitBalanceFinancial = fhir.IBackboneElement & { 
  /**
   * For example: deductible, visits, benefit amount.
   */
  type: fhir.ICodeableConcept|null;
  /**
   * The quantity of the benefit which is permitted under the coverage.
   */
  allowedUnsignedInt?: number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.benefitBalance.financial.allowed[x]
   */
  _allowedUnsignedInt?: fhir.IFhirElement|undefined;
  /**
   * The quantity of the benefit which is permitted under the coverage.
   */
  allowedString?: string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.benefitBalance.financial.allowed[x]
   */
  _allowedString?: fhir.IFhirElement|undefined;
  /**
   * The quantity of the benefit which is permitted under the coverage.
   */
  allowedMoney?: fhir.IMoney|undefined;
  /**
   * The quantity of the benefit which have been consumed to date.
   */
  usedUnsignedInt?: number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.benefitBalance.financial.used[x]
   */
  _usedUnsignedInt?: fhir.IFhirElement|undefined;
  /**
   * The quantity of the benefit which have been consumed to date.
   */
  usedMoney?: fhir.IMoney|undefined;
}

/**
 * Balance by Benefit Category.
 */
export type IExplanationOfBenefitBenefitBalance = fhir.IBackboneElement & { 
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category: fhir.ICodeableConcept|null;
  /**
   * True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage.
   */
  excluded?: boolean|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.benefitBalance.excluded
   */
  _excluded?: fhir.IFhirElement|undefined;
  /**
   * For example: MED01, or DENT2.
   */
  name?: string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.benefitBalance.name
   */
  _name?: fhir.IFhirElement|undefined;
  /**
   * For example, 'DENT2 covers 100% of basic, 50% of major but excludes Ortho, Implants and Cosmetic services'.
   */
  description?: string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.benefitBalance.description
   */
  _description?: fhir.IFhirElement|undefined;
  /**
   * Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.
   */
  network?: fhir.ICodeableConcept|undefined;
  /**
   * Indicates if the benefits apply to an individual or to the family.
   */
  unit?: fhir.ICodeableConcept|undefined;
  /**
   * The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
   */
  term?: fhir.ICodeableConcept|undefined;
  /**
   * Benefits Used to date.
   */
  financial?: fhir.IExplanationOfBenefitBenefitBalanceFinancial[]|undefined;
}

/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
export type IExplanationOfBenefit = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "ExplanationOfBenefit";
  /**
   * A unique identifier assigned to this explanation of benefit.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ExplanationofbenefitStatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.status
   */
  _status?: fhir.IFhirElement|undefined;
  /**
   * The majority of jurisdictions use: oral, pharmacy, vision, professional and institutional, or variants on those terms, as the general styles of claims. The valueset is extensible to accommodate other jurisdictional requirements.
   */
  type: fhir.ICodeableConcept|null;
  /**
   * This may contain the local bill type codes such as the US UB-04 bill type code.
   */
  subType?: fhir.ICodeableConcept|undefined;
  /**
   * A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.
   */
  use: ClaimUseValueSetEnum|null;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.use
   */
  _use?: fhir.IFhirElement|undefined;
  /**
   * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for forecast reimbursement is sought.
   */
  patient: fhir.IReference|null;
  /**
   * Typically this would be today or in the past for a claim, and today or in the future for preauthorizations and prodeterminations. Typically line item dates of service should fall within the billing period if one is specified.
   */
  billablePeriod?: fhir.IPeriod|undefined;
  /**
   * This field is independent of the date of creation of the resource as it may reflect the creation date of a source document prior to digitization. Typically for claims all services must be completed as of this date.
   */
  created: string|null;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.created
   */
  _created?: fhir.IFhirElement|undefined;
  /**
   * Individual who created the claim, predetermination or preauthorization.
   */
  enterer?: fhir.IReference|undefined;
  /**
   * The party responsible for authorization, adjudication and reimbursement.
   */
  insurer: fhir.IReference|null;
  /**
   * Typically this field would be 1..1 where this party is responsible for the claim but not necessarily professionally responsible for the provision of the individual products and services listed below.
   */
  provider: fhir.IReference|null;
  /**
   * If a claim processor is unable to complete the processing as per the priority then they should generate and error and not process the request.
   */
  priority?: fhir.ICodeableConcept|undefined;
  /**
   * This field is only used for preauthorizations.
   */
  fundsReserveRequested?: fhir.ICodeableConcept|undefined;
  /**
   * Fund would be release by a future claim quoting the preAuthRef of this response. Examples of values include: provider, patient, none.
   */
  fundsReserve?: fhir.ICodeableConcept|undefined;
  /**
   * For example,  for the original treatment and follow-up exams.
   */
  related?: fhir.IExplanationOfBenefitRelated[]|undefined;
  /**
   * Prescription to support the dispensing of pharmacy, device or vision products.
   */
  prescription?: fhir.IReference|undefined;
  /**
   * For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefor issues a new prescription for an alternate medication which has the same therapeutic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'.
   */
  originalPrescription?: fhir.IReference|undefined;
  /**
   * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and may choose to pay the subscriber instead.
   */
  payee?: fhir.IExplanationOfBenefitPayee|undefined;
  /**
   * The referral resource which lists the date, practitioner, reason and other supporting information.
   */
  referral?: fhir.IReference|undefined;
  /**
   * Facility where the services were provided.
   */
  facility?: fhir.IReference|undefined;
  /**
   * The business identifier for the instance of the adjudication request: claim predetermination or preauthorization.
   */
  claim?: fhir.IReference|undefined;
  /**
   * The business identifier for the instance of the adjudication response: claim, predetermination or preauthorization response.
   */
  claimResponse?: fhir.IReference|undefined;
  /**
   * The resource may be used to indicate that: the request has been held (queued) for processing; that it has been processed and errors found (error); that no errors were found and that some of the adjudication has been undertaken (partial) or that all of the adjudication has been undertaken (complete).
   */
  outcome: RemittanceOutcomeValueSetEnum|null;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.outcome
   */
  _outcome?: fhir.IFhirElement|undefined;
  /**
   * A human readable description of the status of the adjudication.
   */
  disposition?: string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.disposition
   */
  _disposition?: fhir.IFhirElement|undefined;
  /**
   * This value is only present on preauthorization adjudications.
   */
  preAuthRef?: string[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.preAuthRef
   */
  _preAuthRef?: fhir.IFhirElement[]|undefined;
  /**
   * This value is only present on preauthorization adjudications.
   */
  preAuthRefPeriod?: fhir.IPeriod[]|undefined;
  /**
   * The members of the team who provided the products and services.
   */
  careTeam?: fhir.IExplanationOfBenefitCareTeam[]|undefined;
  /**
   * Often there are multiple jurisdiction specific valuesets which are required.
   */
  supportingInfo?: fhir.IExplanationOfBenefitSupportingInfo[]|undefined;
  /**
   * Information about diagnoses relevant to the claim items.
   */
  diagnosis?: fhir.IExplanationOfBenefitDiagnosis[]|undefined;
  /**
   * Procedures performed on the patient relevant to the billing items with the claim.
   */
  procedure?: fhir.IExplanationOfBenefitProcedure[]|undefined;
  /**
   * This indicates the relative order of a series of EOBs related to different coverages for the same suite of services.
   */
  precedence?: number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.precedence
   */
  _precedence?: fhir.IFhirElement|undefined;
  /**
   * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
   */
  insurance: fhir.IExplanationOfBenefitInsurance[]|null;
  /**
   * Details of a accident which resulted in injuries which required the products and services listed in the claim.
   */
  accident?: fhir.IExplanationOfBenefitAccident|undefined;
  /**
   * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
   */
  item?: fhir.IExplanationOfBenefitItem[]|undefined;
  /**
   * The first-tier service adjudications for payor added product or service lines.
   */
  addItem?: fhir.IExplanationOfBenefitAddItem[]|undefined;
  /**
   * The adjudication results which are presented at the header level rather than at the line-item or add-item levels.
   */
  adjudication?: fhir.IExplanationOfBenefitItemAdjudication[]|undefined;
  /**
   * Totals for amounts submitted, co-pays, benefits payable etc.
   */
  total?: fhir.IExplanationOfBenefitTotal[]|undefined;
  /**
   * Payment details for the adjudication of the claim.
   */
  payment?: fhir.IExplanationOfBenefitPayment|undefined;
  /**
   * May be needed to identify specific jurisdictional forms.
   */
  formCode?: fhir.ICodeableConcept|undefined;
  /**
   * Needed to permit insurers to include the actual form.
   */
  form?: fhir.IAttachment|undefined;
  /**
   * A note that describes or explains adjudication results in a human readable form.
   */
  processNote?: fhir.IExplanationOfBenefitProcessNote[]|undefined;
  /**
   * Not applicable when use=claim.
   */
  benefitPeriod?: fhir.IPeriod|undefined;
  /**
   * Balance by Benefit Category.
   */
  benefitBalance?: fhir.IExplanationOfBenefitBenefitBalance[]|undefined;
}

/**
 * For example,  for the original treatment and follow-up exams.
 */
export class ExplanationOfBenefitRelated extends fhir.BackboneElement implements IExplanationOfBenefitRelated {
  /**
   * Reference to a related claim.
   */
  public claim?: fhir.Reference|undefined;
  /**
   * For example, prior claim or umbrella.
   */
  public relationship?: fhir.CodeableConcept|undefined;
  /**
   * For example, Property/Casualty insurer claim number or Workers Compensation case number.
   */
  public reference?: fhir.Identifier|undefined;
  /**
   * Default constructor for ExplanationOfBenefitRelated - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IExplanationOfBenefitRelated> = { }) {
    super(source);
    if (source['claim']) { this.claim = new fhir.Reference(source.claim!); }
    if (source['relationship']) { this.relationship = new fhir.CodeableConcept(source.relationship!); }
    if (source['reference']) { this.reference = new fhir.Identifier(source.reference!); }
  }
  /**
   * Example-bound Value Set for relationship
   */
  public relationshipExampleValueSet():RelatedClaimRelationshipValueSetType {
    return RelatedClaimRelationshipValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["claim"]) { results.push(...this.claim.doModelValidation()); }
    if (this["relationship"]) { results.push(...this.relationship.doModelValidation()); }
    if (this["reference"]) { results.push(...this.reference.doModelValidation()); }
    return results;
  }
}

/**
 * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and may choose to pay the subscriber instead.
 */
export class ExplanationOfBenefitPayee extends fhir.BackboneElement implements IExplanationOfBenefitPayee {
  /**
   * Type of Party to be reimbursed: Subscriber, provider, other.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Not required if the payee is 'subscriber' or 'provider'.
   */
  public party?: fhir.Reference|undefined;
  /**
   * Default constructor for ExplanationOfBenefitPayee - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IExplanationOfBenefitPayee> = { }) {
    super(source);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    if (source['party']) { this.party = new fhir.Reference(source.party!); }
  }
  /**
   * Example-bound Value Set for type
   */
  public typeExampleValueSet():PayeetypeValueSetType {
    return PayeetypeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (this["party"]) { results.push(...this.party.doModelValidation()); }
    return results;
  }
}

/**
 * The members of the team who provided the products and services.
 */
export class ExplanationOfBenefitCareTeam extends fhir.BackboneElement implements IExplanationOfBenefitCareTeam {
  /**
   * A number to uniquely identify care team entries.
   */
  public sequence: number|null;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.careTeam.sequence
   */
  public _sequence?: fhir.FhirElement|undefined;
  /**
   * Member of the team who provided the product or service.
   */
  public provider: fhir.Reference|null;
  /**
   * Responsible might not be required when there is only a single provider listed.
   */
  public responsible?: boolean|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.careTeam.responsible
   */
  public _responsible?: fhir.FhirElement|undefined;
  /**
   * Role might not be required when there is only a single provider listed.
   */
  public role?: fhir.CodeableConcept|undefined;
  /**
   * The qualification of the practitioner which is applicable for this service.
   */
  public qualification?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for ExplanationOfBenefitCareTeam - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IExplanationOfBenefitCareTeam> = { }) {
    super(source);
    if (source['sequence']) { this.sequence = source.sequence; }
    else { this.sequence = null; }
    if (source['_sequence']) { this._sequence = new fhir.FhirElement(source._sequence!); }
    if (source['provider']) { this.provider = new fhir.Reference(source.provider!); }
    else { this.provider = null; }
    if (source['responsible']) { this.responsible = source.responsible; }
    if (source['_responsible']) { this._responsible = new fhir.FhirElement(source._responsible!); }
    if (source['role']) { this.role = new fhir.CodeableConcept(source.role!); }
    if (source['qualification']) { this.qualification = new fhir.CodeableConcept(source.qualification!); }
  }
  /**
   * Example-bound Value Set for role
   */
  public roleExampleValueSet():ClaimCareteamroleValueSetType {
    return ClaimCareteamroleValueSet;
  }
  /**
   * Example-bound Value Set for qualification
   */
  public qualificationExampleValueSet():ProviderQualificationValueSetType {
    return ProviderQualificationValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["sequence"]) { results.push(["sequence",'Missing required element: ExplanationOfBenefit.careTeam.sequence']); }
    if (this["_sequence"]) { results.push(...this._sequence.doModelValidation()); }
    if (!this["provider"]) { results.push(["provider",'Missing required element: ExplanationOfBenefit.careTeam.provider']); }
    if (this["provider"]) { results.push(...this.provider.doModelValidation()); }
    if (this["_responsible"]) { results.push(...this._responsible.doModelValidation()); }
    if (this["role"]) { results.push(...this.role.doModelValidation()); }
    if (this["qualification"]) { results.push(...this.qualification.doModelValidation()); }
    return results;
  }
}

/**
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
export class ExplanationOfBenefitSupportingInfo extends fhir.BackboneElement implements IExplanationOfBenefitSupportingInfo {
  /**
   * A number to uniquely identify supporting information entries.
   */
  public sequence: number|null;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.supportingInfo.sequence
   */
  public _sequence?: fhir.FhirElement|undefined;
  /**
   * This may contain a category for the local bill type codes.
   */
  public category: fhir.CodeableConcept|null;
  /**
   * This may contain the local bill type codes such as the US UB-04 bill type code.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * The date when or period to which this information refers.
   */
  public timingDate?: string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.supportingInfo.timing[x]
   */
  public _timingDate?: fhir.FhirElement|undefined;
  /**
   * The date when or period to which this information refers.
   */
  public timingPeriod?: fhir.Period|undefined;
  /**
   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  public valueBoolean?: boolean|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.supportingInfo.value[x]
   */
  public _valueBoolean?: fhir.FhirElement|undefined;
  /**
   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  public valueString?: string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.supportingInfo.value[x]
   */
  public _valueString?: fhir.FhirElement|undefined;
  /**
   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  public valueQuantity?: fhir.Quantity|undefined;
  /**
   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  public valueAttachment?: fhir.Attachment|undefined;
  /**
   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  public valueReference?: fhir.Reference|undefined;
  /**
   * For example: the reason for the additional stay, or why a tooth is  missing.
   */
  public reason?: fhir.Coding|undefined;
  /**
   * Default constructor for ExplanationOfBenefitSupportingInfo - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IExplanationOfBenefitSupportingInfo> = { }) {
    super(source);
    if (source['sequence']) { this.sequence = source.sequence; }
    else { this.sequence = null; }
    if (source['_sequence']) { this._sequence = new fhir.FhirElement(source._sequence!); }
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category!); }
    else { this.category = null; }
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code!); }
    if (source['timingDate']) { this.timingDate = source.timingDate; }
    if (source['_timingDate']) { this._timingDate = new fhir.FhirElement(source._timingDate!); }
    if (source['timingPeriod']) { this.timingPeriod = new fhir.Period(source.timingPeriod!); }
    if (source['valueBoolean']) { this.valueBoolean = source.valueBoolean; }
    if (source['_valueBoolean']) { this._valueBoolean = new fhir.FhirElement(source._valueBoolean!); }
    if (source['valueString']) { this.valueString = source.valueString; }
    if (source['_valueString']) { this._valueString = new fhir.FhirElement(source._valueString!); }
    if (source['valueQuantity']) { this.valueQuantity = new fhir.Quantity(source.valueQuantity!); }
    if (source['valueAttachment']) { this.valueAttachment = new fhir.Attachment(source.valueAttachment!); }
    if (source['valueReference']) { this.valueReference = new fhir.Reference(source.valueReference!); }
    if (source['reason']) { this.reason = new fhir.Coding(source.reason!); }
  }
  /**
   * Example-bound Value Set for category
   */
  public categoryExampleValueSet():ClaimInformationcategoryValueSetType {
    return ClaimInformationcategoryValueSet;
  }
  /**
   * Example-bound Value Set for code
   */
  public codeExampleValueSet():ClaimExceptionValueSetType {
    return ClaimExceptionValueSet;
  }
  /**
   * Example-bound Value Set for reason
   */
  public reasonExampleValueSet():MissingToothReasonValueSetType {
    return MissingToothReasonValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["sequence"]) { results.push(["sequence",'Missing required element: ExplanationOfBenefit.supportingInfo.sequence']); }
    if (this["_sequence"]) { results.push(...this._sequence.doModelValidation()); }
    if (!this["category"]) { results.push(["category",'Missing required element: ExplanationOfBenefit.supportingInfo.category']); }
    if (this["category"]) { results.push(...this.category.doModelValidation()); }
    if (this["code"]) { results.push(...this.code.doModelValidation()); }
    if (this["_timingDate"]) { results.push(...this._timingDate.doModelValidation()); }
    if (this["timingPeriod"]) { results.push(...this.timingPeriod.doModelValidation()); }
    if (this["_valueBoolean"]) { results.push(...this._valueBoolean.doModelValidation()); }
    if (this["_valueString"]) { results.push(...this._valueString.doModelValidation()); }
    if (this["valueQuantity"]) { results.push(...this.valueQuantity.doModelValidation()); }
    if (this["valueAttachment"]) { results.push(...this.valueAttachment.doModelValidation()); }
    if (this["valueReference"]) { results.push(...this.valueReference.doModelValidation()); }
    if (this["reason"]) { results.push(...this.reason.doModelValidation()); }
    return results;
  }
}

/**
 * Information about diagnoses relevant to the claim items.
 */
export class ExplanationOfBenefitDiagnosis extends fhir.BackboneElement implements IExplanationOfBenefitDiagnosis {
  /**
   * Diagnosis are presented in list order to their expected importance: primary, secondary, etc.
   */
  public sequence: number|null;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.diagnosis.sequence
   */
  public _sequence?: fhir.FhirElement|undefined;
  /**
   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
   */
  public diagnosisCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
   */
  public diagnosisReference?: fhir.Reference|undefined;
  /**
   * For example: admitting, primary, secondary, discharge.
   */
  public type?: fhir.CodeableConcept[]|undefined;
  /**
   * Indication of whether the diagnosis was present on admission to a facility.
   */
  public onAdmission?: fhir.CodeableConcept|undefined;
  /**
   * For example, DRG (Diagnosis Related Group) or a bundled billing code. A patient may have a diagnosis of a Myocardio-infarction and a DRG for HeartAttack would assigned. The Claim item (and possible subsequent claims) would refer to the DRG for those line items that were for services related to the heart attack event.
   */
  public packageCode?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for ExplanationOfBenefitDiagnosis - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IExplanationOfBenefitDiagnosis> = { }) {
    super(source);
    if (source['sequence']) { this.sequence = source.sequence; }
    else { this.sequence = null; }
    if (source['_sequence']) { this._sequence = new fhir.FhirElement(source._sequence!); }
    if (source['diagnosisCodeableConcept']) { this.diagnosisCodeableConcept = new fhir.CodeableConcept(source.diagnosisCodeableConcept!); }
    if (source['diagnosisReference']) { this.diagnosisReference = new fhir.Reference(source.diagnosisReference!); }
    if (source['type']) { this.type = source.type.map((x) => new fhir.CodeableConcept(x)); }
    if (source['onAdmission']) { this.onAdmission = new fhir.CodeableConcept(source.onAdmission!); }
    if (source['packageCode']) { this.packageCode = new fhir.CodeableConcept(source.packageCode!); }
  }
  /**
   * Example-bound Value Set for type
   */
  public typeExampleValueSet():ExDiagnosistypeValueSetType {
    return ExDiagnosistypeValueSet;
  }
  /**
   * Example-bound Value Set for onAdmission
   */
  public onAdmissionExampleValueSet():ExDiagnosisOnAdmissionValueSetType {
    return ExDiagnosisOnAdmissionValueSet;
  }
  /**
   * Example-bound Value Set for packageCode
   */
  public packageCodeExampleValueSet():ExDiagnosisrelatedgroupValueSetType {
    return ExDiagnosisrelatedgroupValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["sequence"]) { results.push(["sequence",'Missing required element: ExplanationOfBenefit.diagnosis.sequence']); }
    if (this["_sequence"]) { results.push(...this._sequence.doModelValidation()); }
    if (this["diagnosisCodeableConcept"]) { results.push(...this.diagnosisCodeableConcept.doModelValidation()); }
    if (this["diagnosisReference"]) { results.push(...this.diagnosisReference.doModelValidation()); }
    if (this["type"]) { this.type.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["onAdmission"]) { results.push(...this.onAdmission.doModelValidation()); }
    if (this["packageCode"]) { results.push(...this.packageCode.doModelValidation()); }
    return results;
  }
}

/**
 * Procedures performed on the patient relevant to the billing items with the claim.
 */
export class ExplanationOfBenefitProcedure extends fhir.BackboneElement implements IExplanationOfBenefitProcedure {
  /**
   * A number to uniquely identify procedure entries.
   */
  public sequence: number|null;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.procedure.sequence
   */
  public _sequence?: fhir.FhirElement|undefined;
  /**
   * When the condition was observed or the relative ranking.
   */
  public type?: fhir.CodeableConcept[]|undefined;
  /**
   * Date and optionally time the procedure was performed.
   */
  public date?: string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.procedure.date
   */
  public _date?: fhir.FhirElement|undefined;
  /**
   * The code or reference to a Procedure resource which identifies the clinical intervention performed.
   */
  public procedureCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * The code or reference to a Procedure resource which identifies the clinical intervention performed.
   */
  public procedureReference?: fhir.Reference|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  public udi?: fhir.Reference[]|undefined;
  /**
   * Default constructor for ExplanationOfBenefitProcedure - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IExplanationOfBenefitProcedure> = { }) {
    super(source);
    if (source['sequence']) { this.sequence = source.sequence; }
    else { this.sequence = null; }
    if (source['_sequence']) { this._sequence = new fhir.FhirElement(source._sequence!); }
    if (source['type']) { this.type = source.type.map((x) => new fhir.CodeableConcept(x)); }
    if (source['date']) { this.date = source.date; }
    if (source['_date']) { this._date = new fhir.FhirElement(source._date!); }
    if (source['procedureCodeableConcept']) { this.procedureCodeableConcept = new fhir.CodeableConcept(source.procedureCodeableConcept!); }
    if (source['procedureReference']) { this.procedureReference = new fhir.Reference(source.procedureReference!); }
    if (source['udi']) { this.udi = source.udi.map((x) => new fhir.Reference(x)); }
  }
  /**
   * Example-bound Value Set for type
   */
  public typeExampleValueSet():ExProcedureTypeValueSetType {
    return ExProcedureTypeValueSet;
  }
  /**
   * Example-bound Value Set for procedureCodeableConcept
   */
  public procedureCodeableConceptExampleValueSet():Icd10ProceduresValueSetType {
    return Icd10ProceduresValueSet;
  }
  /**
   * Example-bound Value Set for procedureReference
   */
  public procedureReferenceExampleValueSet():Icd10ProceduresValueSetType {
    return Icd10ProceduresValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["sequence"]) { results.push(["sequence",'Missing required element: ExplanationOfBenefit.procedure.sequence']); }
    if (this["_sequence"]) { results.push(...this._sequence.doModelValidation()); }
    if (this["type"]) { this.type.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_date"]) { results.push(...this._date.doModelValidation()); }
    if (this["procedureCodeableConcept"]) { results.push(...this.procedureCodeableConcept.doModelValidation()); }
    if (this["procedureReference"]) { results.push(...this.procedureReference.doModelValidation()); }
    if (this["udi"]) { this.udi.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export class ExplanationOfBenefitInsurance extends fhir.BackboneElement implements IExplanationOfBenefitInsurance {
  /**
   * A patient may (will) have multiple insurance policies which provide reimbursement for healthcare services and products. For example, a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for adjudicating this claim. Other claims would be created to request adjudication against the other listed policies.
   */
  public focal: boolean|null;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.insurance.focal
   */
  public _focal?: fhir.FhirElement|undefined;
  /**
   * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
   */
  public coverage: fhir.Reference|null;
  /**
   * This value is an alphanumeric string that may be provided over the phone, via text, via paper, or within a ClaimResponse resource and is not a FHIR Identifier.
   */
  public preAuthRef?: string[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.insurance.preAuthRef
   */
  public _preAuthRef?: fhir.FhirElement[]|undefined;
  /**
   * Default constructor for ExplanationOfBenefitInsurance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IExplanationOfBenefitInsurance> = { }) {
    super(source);
    if (source['focal']) { this.focal = source.focal; }
    else { this.focal = null; }
    if (source['_focal']) { this._focal = new fhir.FhirElement(source._focal!); }
    if (source['coverage']) { this.coverage = new fhir.Reference(source.coverage!); }
    else { this.coverage = null; }
    if (source['preAuthRef']) { this.preAuthRef = source.preAuthRef.map((x) => (x)); }
    if (source['_preAuthRef']) { this._preAuthRef = source._preAuthRef.map((x) => new fhir.FhirElement(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["focal"]) { results.push(["focal",'Missing required element: ExplanationOfBenefit.insurance.focal']); }
    if (this["_focal"]) { results.push(...this._focal.doModelValidation()); }
    if (!this["coverage"]) { results.push(["coverage",'Missing required element: ExplanationOfBenefit.insurance.coverage']); }
    if (this["coverage"]) { results.push(...this.coverage.doModelValidation()); }
    if (this["_preAuthRef"]) { this._preAuthRef.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * Details of a accident which resulted in injuries which required the products and services listed in the claim.
 */
export class ExplanationOfBenefitAccident extends fhir.BackboneElement implements IExplanationOfBenefitAccident {
  /**
   * The date of the accident has to precede the dates of the products and services but within a reasonable timeframe.
   */
  public date?: string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.accident.date
   */
  public _date?: fhir.FhirElement|undefined;
  /**
   * The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * The physical location of the accident event.
   */
  public locationAddress?: fhir.Address|undefined;
  /**
   * The physical location of the accident event.
   */
  public locationReference?: fhir.Reference|undefined;
  /**
   * Default constructor for ExplanationOfBenefitAccident - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IExplanationOfBenefitAccident> = { }) {
    super(source);
    if (source['date']) { this.date = source.date; }
    if (source['_date']) { this._date = new fhir.FhirElement(source._date!); }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    if (source['locationAddress']) { this.locationAddress = new fhir.Address(source.locationAddress!); }
    if (source['locationReference']) { this.locationReference = new fhir.Reference(source.locationReference!); }
  }
  /**
   * Extensible-bound Value Set for type
   */
  public typeExtensibleValueSet():V3ActIncidentCodeValueSetType {
    return V3ActIncidentCodeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["_date"]) { results.push(...this._date.doModelValidation()); }
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (this["locationAddress"]) { results.push(...this.locationAddress.doModelValidation()); }
    if (this["locationReference"]) { results.push(...this.locationReference.doModelValidation()); }
    return results;
  }
}

/**
 * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
 */
export class ExplanationOfBenefitItemAdjudication extends fhir.BackboneElement implements IExplanationOfBenefitItemAdjudication {
  /**
   * For example, codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  public category: fhir.CodeableConcept|null;
  /**
   * For example, may indicate that the funds for this benefit type have been exhausted.
   */
  public reason?: fhir.CodeableConcept|undefined;
  /**
   * For example, amount submitted, eligible amount, co-payment, and benefit payable.
   */
  public amount?: fhir.Money|undefined;
  /**
   * For example: eligible percentage or co-payment percentage.
   */
  public value?: number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.adjudication.value
   */
  public _value?: fhir.FhirElement|undefined;
  /**
   * Default constructor for ExplanationOfBenefitItemAdjudication - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IExplanationOfBenefitItemAdjudication> = { }) {
    super(source);
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category!); }
    else { this.category = null; }
    if (source['reason']) { this.reason = new fhir.CodeableConcept(source.reason!); }
    if (source['amount']) { this.amount = new fhir.Money(source.amount!); }
    if (source['value']) { this.value = source.value; }
    if (source['_value']) { this._value = new fhir.FhirElement(source._value!); }
  }
  /**
   * Example-bound Value Set for category
   */
  public categoryExampleValueSet():AdjudicationValueSetType {
    return AdjudicationValueSet;
  }
  /**
   * Example-bound Value Set for reason
   */
  public reasonExampleValueSet():AdjudicationReasonValueSetType {
    return AdjudicationReasonValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["category"]) { results.push(["category",'Missing required element: ExplanationOfBenefit.item.adjudication.category']); }
    if (this["category"]) { results.push(...this.category.doModelValidation()); }
    if (this["reason"]) { results.push(...this.reason.doModelValidation()); }
    if (this["amount"]) { results.push(...this.amount.doModelValidation()); }
    if (this["_value"]) { results.push(...this._value.doModelValidation()); }
    return results;
  }
}

/**
 * Third-tier of goods and services.
 */
export class ExplanationOfBenefitItemDetailSubDetail extends fhir.BackboneElement implements IExplanationOfBenefitItemDetailSubDetail {
  /**
   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  public sequence: number|null;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.detail.subDetail.sequence
   */
  public _sequence?: fhir.FhirElement|undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  public revenue?: fhir.CodeableConcept|undefined;
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  public category?: fhir.CodeableConcept|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  public productOrService: fhir.CodeableConcept|null;
  /**
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
   */
  public modifier?: fhir.CodeableConcept[]|undefined;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  public programCode?: fhir.CodeableConcept[]|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  public unitPrice?: fhir.Money|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  public factor?: number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.detail.subDetail.factor
   */
  public _factor?: fhir.FhirElement|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  public net?: fhir.Money|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  public udi?: fhir.Reference[]|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  public noteNumber?: number[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.detail.subDetail.noteNumber
   */
  public _noteNumber?: fhir.FhirElement[]|undefined;
  /**
   * The adjudication results.
   */
  public adjudication?: fhir.ExplanationOfBenefitItemAdjudication[]|undefined;
  /**
   * Default constructor for ExplanationOfBenefitItemDetailSubDetail - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IExplanationOfBenefitItemDetailSubDetail> = { }) {
    super(source);
    if (source['sequence']) { this.sequence = source.sequence; }
    else { this.sequence = null; }
    if (source['_sequence']) { this._sequence = new fhir.FhirElement(source._sequence!); }
    if (source['revenue']) { this.revenue = new fhir.CodeableConcept(source.revenue!); }
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category!); }
    if (source['productOrService']) { this.productOrService = new fhir.CodeableConcept(source.productOrService!); }
    else { this.productOrService = null; }
    if (source['modifier']) { this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x)); }
    if (source['programCode']) { this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x)); }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity!); }
    if (source['unitPrice']) { this.unitPrice = new fhir.Money(source.unitPrice!); }
    if (source['factor']) { this.factor = source.factor; }
    if (source['_factor']) { this._factor = new fhir.FhirElement(source._factor!); }
    if (source['net']) { this.net = new fhir.Money(source.net!); }
    if (source['udi']) { this.udi = source.udi.map((x) => new fhir.Reference(x)); }
    if (source['noteNumber']) { this.noteNumber = source.noteNumber.map((x) => (x)); }
    if (source['_noteNumber']) { this._noteNumber = source._noteNumber.map((x) => new fhir.FhirElement(x)); }
    if (source['adjudication']) { this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x)); }
  }
  /**
   * Example-bound Value Set for revenue
   */
  public revenueExampleValueSet():ExRevenueCenterValueSetType {
    return ExRevenueCenterValueSet;
  }
  /**
   * Example-bound Value Set for category
   */
  public categoryExampleValueSet():ExBenefitcategoryValueSetType {
    return ExBenefitcategoryValueSet;
  }
  /**
   * Example-bound Value Set for productOrService
   */
  public productOrServiceExampleValueSet():ServiceUsclsValueSetType {
    return ServiceUsclsValueSet;
  }
  /**
   * Example-bound Value Set for modifier
   */
  public modifierExampleValueSet():ClaimModifiersValueSetType {
    return ClaimModifiersValueSet;
  }
  /**
   * Example-bound Value Set for programCode
   */
  public programCodeExampleValueSet():ExProgramCodeValueSetType {
    return ExProgramCodeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["sequence"]) { results.push(["sequence",'Missing required element: ExplanationOfBenefit.item.detail.subDetail.sequence']); }
    if (this["_sequence"]) { results.push(...this._sequence.doModelValidation()); }
    if (this["revenue"]) { results.push(...this.revenue.doModelValidation()); }
    if (this["category"]) { results.push(...this.category.doModelValidation()); }
    if (!this["productOrService"]) { results.push(["productOrService",'Missing required element: ExplanationOfBenefit.item.detail.subDetail.productOrService']); }
    if (this["productOrService"]) { results.push(...this.productOrService.doModelValidation()); }
    if (this["modifier"]) { this.modifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["programCode"]) { this.programCode.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["quantity"]) { results.push(...this.quantity.doModelValidation()); }
    if (this["unitPrice"]) { results.push(...this.unitPrice.doModelValidation()); }
    if (this["_factor"]) { results.push(...this._factor.doModelValidation()); }
    if (this["net"]) { results.push(...this.net.doModelValidation()); }
    if (this["udi"]) { this.udi.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_noteNumber"]) { this._noteNumber.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["adjudication"]) { this.adjudication.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * Second-tier of goods and services.
 */
export class ExplanationOfBenefitItemDetail extends fhir.BackboneElement implements IExplanationOfBenefitItemDetail {
  /**
   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  public sequence: number|null;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.detail.sequence
   */
  public _sequence?: fhir.FhirElement|undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  public revenue?: fhir.CodeableConcept|undefined;
  /**
   * Examples include: Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  public category?: fhir.CodeableConcept|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  public productOrService: fhir.CodeableConcept|null;
  /**
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  public modifier?: fhir.CodeableConcept[]|undefined;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  public programCode?: fhir.CodeableConcept[]|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  public unitPrice?: fhir.Money|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  public factor?: number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.detail.factor
   */
  public _factor?: fhir.FhirElement|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  public net?: fhir.Money|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  public udi?: fhir.Reference[]|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  public noteNumber?: number[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.detail.noteNumber
   */
  public _noteNumber?: fhir.FhirElement[]|undefined;
  /**
   * The adjudication results.
   */
  public adjudication?: fhir.ExplanationOfBenefitItemAdjudication[]|undefined;
  /**
   * Third-tier of goods and services.
   */
  public subDetail?: fhir.ExplanationOfBenefitItemDetailSubDetail[]|undefined;
  /**
   * Default constructor for ExplanationOfBenefitItemDetail - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IExplanationOfBenefitItemDetail> = { }) {
    super(source);
    if (source['sequence']) { this.sequence = source.sequence; }
    else { this.sequence = null; }
    if (source['_sequence']) { this._sequence = new fhir.FhirElement(source._sequence!); }
    if (source['revenue']) { this.revenue = new fhir.CodeableConcept(source.revenue!); }
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category!); }
    if (source['productOrService']) { this.productOrService = new fhir.CodeableConcept(source.productOrService!); }
    else { this.productOrService = null; }
    if (source['modifier']) { this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x)); }
    if (source['programCode']) { this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x)); }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity!); }
    if (source['unitPrice']) { this.unitPrice = new fhir.Money(source.unitPrice!); }
    if (source['factor']) { this.factor = source.factor; }
    if (source['_factor']) { this._factor = new fhir.FhirElement(source._factor!); }
    if (source['net']) { this.net = new fhir.Money(source.net!); }
    if (source['udi']) { this.udi = source.udi.map((x) => new fhir.Reference(x)); }
    if (source['noteNumber']) { this.noteNumber = source.noteNumber.map((x) => (x)); }
    if (source['_noteNumber']) { this._noteNumber = source._noteNumber.map((x) => new fhir.FhirElement(x)); }
    if (source['adjudication']) { this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x)); }
    if (source['subDetail']) { this.subDetail = source.subDetail.map((x) => new fhir.ExplanationOfBenefitItemDetailSubDetail(x)); }
  }
  /**
   * Example-bound Value Set for revenue
   */
  public revenueExampleValueSet():ExRevenueCenterValueSetType {
    return ExRevenueCenterValueSet;
  }
  /**
   * Example-bound Value Set for category
   */
  public categoryExampleValueSet():ExBenefitcategoryValueSetType {
    return ExBenefitcategoryValueSet;
  }
  /**
   * Example-bound Value Set for productOrService
   */
  public productOrServiceExampleValueSet():ServiceUsclsValueSetType {
    return ServiceUsclsValueSet;
  }
  /**
   * Example-bound Value Set for modifier
   */
  public modifierExampleValueSet():ClaimModifiersValueSetType {
    return ClaimModifiersValueSet;
  }
  /**
   * Example-bound Value Set for programCode
   */
  public programCodeExampleValueSet():ExProgramCodeValueSetType {
    return ExProgramCodeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["sequence"]) { results.push(["sequence",'Missing required element: ExplanationOfBenefit.item.detail.sequence']); }
    if (this["_sequence"]) { results.push(...this._sequence.doModelValidation()); }
    if (this["revenue"]) { results.push(...this.revenue.doModelValidation()); }
    if (this["category"]) { results.push(...this.category.doModelValidation()); }
    if (!this["productOrService"]) { results.push(["productOrService",'Missing required element: ExplanationOfBenefit.item.detail.productOrService']); }
    if (this["productOrService"]) { results.push(...this.productOrService.doModelValidation()); }
    if (this["modifier"]) { this.modifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["programCode"]) { this.programCode.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["quantity"]) { results.push(...this.quantity.doModelValidation()); }
    if (this["unitPrice"]) { results.push(...this.unitPrice.doModelValidation()); }
    if (this["_factor"]) { results.push(...this._factor.doModelValidation()); }
    if (this["net"]) { results.push(...this.net.doModelValidation()); }
    if (this["udi"]) { this.udi.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_noteNumber"]) { this._noteNumber.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["adjudication"]) { this.adjudication.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["subDetail"]) { this.subDetail.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
 */
export class ExplanationOfBenefitItem extends fhir.BackboneElement implements IExplanationOfBenefitItem {
  /**
   * A number to uniquely identify item entries.
   */
  public sequence: number|null;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.sequence
   */
  public _sequence?: fhir.FhirElement|undefined;
  /**
   * Care team members related to this service or product.
   */
  public careTeamSequence?: number[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.careTeamSequence
   */
  public _careTeamSequence?: fhir.FhirElement[]|undefined;
  /**
   * Diagnoses applicable for this service or product.
   */
  public diagnosisSequence?: number[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.diagnosisSequence
   */
  public _diagnosisSequence?: fhir.FhirElement[]|undefined;
  /**
   * Procedures applicable for this service or product.
   */
  public procedureSequence?: number[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.procedureSequence
   */
  public _procedureSequence?: fhir.FhirElement[]|undefined;
  /**
   * Exceptions, special conditions and supporting information applicable for this service or product.
   */
  public informationSequence?: number[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.informationSequence
   */
  public _informationSequence?: fhir.FhirElement[]|undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  public revenue?: fhir.CodeableConcept|undefined;
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  public category?: fhir.CodeableConcept|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  public productOrService: fhir.CodeableConcept|null;
  /**
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  public modifier?: fhir.CodeableConcept[]|undefined;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  public programCode?: fhir.CodeableConcept[]|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  public servicedDate?: string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.serviced[x]
   */
  public _servicedDate?: fhir.FhirElement|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  public servicedPeriod?: fhir.Period|undefined;
  /**
   * Where the product or service was provided.
   */
  public locationCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * Where the product or service was provided.
   */
  public locationAddress?: fhir.Address|undefined;
  /**
   * Where the product or service was provided.
   */
  public locationReference?: fhir.Reference|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  public unitPrice?: fhir.Money|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  public factor?: number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.factor
   */
  public _factor?: fhir.FhirElement|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  public net?: fhir.Money|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  public udi?: fhir.Reference[]|undefined;
  /**
   * For example: Providing a tooth code, allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
   */
  public bodySite?: fhir.CodeableConcept|undefined;
  /**
   * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
   */
  public subSite?: fhir.CodeableConcept[]|undefined;
  /**
   * A billed item may include goods or services provided in multiple encounters.
   */
  public encounter?: fhir.Reference[]|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  public noteNumber?: number[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.noteNumber
   */
  public _noteNumber?: fhir.FhirElement[]|undefined;
  /**
   * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
   */
  public adjudication?: fhir.ExplanationOfBenefitItemAdjudication[]|undefined;
  /**
   * Second-tier of goods and services.
   */
  public detail?: fhir.ExplanationOfBenefitItemDetail[]|undefined;
  /**
   * Default constructor for ExplanationOfBenefitItem - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IExplanationOfBenefitItem> = { }) {
    super(source);
    if (source['sequence']) { this.sequence = source.sequence; }
    else { this.sequence = null; }
    if (source['_sequence']) { this._sequence = new fhir.FhirElement(source._sequence!); }
    if (source['careTeamSequence']) { this.careTeamSequence = source.careTeamSequence.map((x) => (x)); }
    if (source['_careTeamSequence']) { this._careTeamSequence = source._careTeamSequence.map((x) => new fhir.FhirElement(x)); }
    if (source['diagnosisSequence']) { this.diagnosisSequence = source.diagnosisSequence.map((x) => (x)); }
    if (source['_diagnosisSequence']) { this._diagnosisSequence = source._diagnosisSequence.map((x) => new fhir.FhirElement(x)); }
    if (source['procedureSequence']) { this.procedureSequence = source.procedureSequence.map((x) => (x)); }
    if (source['_procedureSequence']) { this._procedureSequence = source._procedureSequence.map((x) => new fhir.FhirElement(x)); }
    if (source['informationSequence']) { this.informationSequence = source.informationSequence.map((x) => (x)); }
    if (source['_informationSequence']) { this._informationSequence = source._informationSequence.map((x) => new fhir.FhirElement(x)); }
    if (source['revenue']) { this.revenue = new fhir.CodeableConcept(source.revenue!); }
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category!); }
    if (source['productOrService']) { this.productOrService = new fhir.CodeableConcept(source.productOrService!); }
    else { this.productOrService = null; }
    if (source['modifier']) { this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x)); }
    if (source['programCode']) { this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x)); }
    if (source['servicedDate']) { this.servicedDate = source.servicedDate; }
    if (source['_servicedDate']) { this._servicedDate = new fhir.FhirElement(source._servicedDate!); }
    if (source['servicedPeriod']) { this.servicedPeriod = new fhir.Period(source.servicedPeriod!); }
    if (source['locationCodeableConcept']) { this.locationCodeableConcept = new fhir.CodeableConcept(source.locationCodeableConcept!); }
    if (source['locationAddress']) { this.locationAddress = new fhir.Address(source.locationAddress!); }
    if (source['locationReference']) { this.locationReference = new fhir.Reference(source.locationReference!); }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity!); }
    if (source['unitPrice']) { this.unitPrice = new fhir.Money(source.unitPrice!); }
    if (source['factor']) { this.factor = source.factor; }
    if (source['_factor']) { this._factor = new fhir.FhirElement(source._factor!); }
    if (source['net']) { this.net = new fhir.Money(source.net!); }
    if (source['udi']) { this.udi = source.udi.map((x) => new fhir.Reference(x)); }
    if (source['bodySite']) { this.bodySite = new fhir.CodeableConcept(source.bodySite!); }
    if (source['subSite']) { this.subSite = source.subSite.map((x) => new fhir.CodeableConcept(x)); }
    if (source['encounter']) { this.encounter = source.encounter.map((x) => new fhir.Reference(x)); }
    if (source['noteNumber']) { this.noteNumber = source.noteNumber.map((x) => (x)); }
    if (source['_noteNumber']) { this._noteNumber = source._noteNumber.map((x) => new fhir.FhirElement(x)); }
    if (source['adjudication']) { this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x)); }
    if (source['detail']) { this.detail = source.detail.map((x) => new fhir.ExplanationOfBenefitItemDetail(x)); }
  }
  /**
   * Example-bound Value Set for revenue
   */
  public revenueExampleValueSet():ExRevenueCenterValueSetType {
    return ExRevenueCenterValueSet;
  }
  /**
   * Example-bound Value Set for category
   */
  public categoryExampleValueSet():ExBenefitcategoryValueSetType {
    return ExBenefitcategoryValueSet;
  }
  /**
   * Example-bound Value Set for productOrService
   */
  public productOrServiceExampleValueSet():ServiceUsclsValueSetType {
    return ServiceUsclsValueSet;
  }
  /**
   * Example-bound Value Set for modifier
   */
  public modifierExampleValueSet():ClaimModifiersValueSetType {
    return ClaimModifiersValueSet;
  }
  /**
   * Example-bound Value Set for programCode
   */
  public programCodeExampleValueSet():ExProgramCodeValueSetType {
    return ExProgramCodeValueSet;
  }
  /**
   * Example-bound Value Set for locationCodeableConcept
   */
  public locationCodeableConceptExampleValueSet():ServicePlaceValueSetType {
    return ServicePlaceValueSet;
  }
  /**
   * Example-bound Value Set for locationAddress
   */
  public locationAddressExampleValueSet():ServicePlaceValueSetType {
    return ServicePlaceValueSet;
  }
  /**
   * Example-bound Value Set for locationReference
   */
  public locationReferenceExampleValueSet():ServicePlaceValueSetType {
    return ServicePlaceValueSet;
  }
  /**
   * Example-bound Value Set for bodySite
   */
  public bodySiteExampleValueSet():ToothValueSetType {
    return ToothValueSet;
  }
  /**
   * Example-bound Value Set for subSite
   */
  public subSiteExampleValueSet():SurfaceValueSetType {
    return SurfaceValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["sequence"]) { results.push(["sequence",'Missing required element: ExplanationOfBenefit.item.sequence']); }
    if (this["_sequence"]) { results.push(...this._sequence.doModelValidation()); }
    if (this["_careTeamSequence"]) { this._careTeamSequence.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_diagnosisSequence"]) { this._diagnosisSequence.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_procedureSequence"]) { this._procedureSequence.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_informationSequence"]) { this._informationSequence.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["revenue"]) { results.push(...this.revenue.doModelValidation()); }
    if (this["category"]) { results.push(...this.category.doModelValidation()); }
    if (!this["productOrService"]) { results.push(["productOrService",'Missing required element: ExplanationOfBenefit.item.productOrService']); }
    if (this["productOrService"]) { results.push(...this.productOrService.doModelValidation()); }
    if (this["modifier"]) { this.modifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["programCode"]) { this.programCode.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_servicedDate"]) { results.push(...this._servicedDate.doModelValidation()); }
    if (this["servicedPeriod"]) { results.push(...this.servicedPeriod.doModelValidation()); }
    if (this["locationCodeableConcept"]) { results.push(...this.locationCodeableConcept.doModelValidation()); }
    if (this["locationAddress"]) { results.push(...this.locationAddress.doModelValidation()); }
    if (this["locationReference"]) { results.push(...this.locationReference.doModelValidation()); }
    if (this["quantity"]) { results.push(...this.quantity.doModelValidation()); }
    if (this["unitPrice"]) { results.push(...this.unitPrice.doModelValidation()); }
    if (this["_factor"]) { results.push(...this._factor.doModelValidation()); }
    if (this["net"]) { results.push(...this.net.doModelValidation()); }
    if (this["udi"]) { this.udi.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["bodySite"]) { results.push(...this.bodySite.doModelValidation()); }
    if (this["subSite"]) { this.subSite.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["encounter"]) { this.encounter.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_noteNumber"]) { this._noteNumber.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["adjudication"]) { this.adjudication.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["detail"]) { this.detail.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * The third-tier service adjudications for payor added services.
 */
export class ExplanationOfBenefitAddItemDetailSubDetail extends fhir.BackboneElement implements IExplanationOfBenefitAddItemDetailSubDetail {
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  public productOrService: fhir.CodeableConcept|null;
  /**
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  public modifier?: fhir.CodeableConcept[]|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  public unitPrice?: fhir.Money|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  public factor?: number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.detail.subDetail.factor
   */
  public _factor?: fhir.FhirElement|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  public net?: fhir.Money|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  public noteNumber?: number[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.detail.subDetail.noteNumber
   */
  public _noteNumber?: fhir.FhirElement[]|undefined;
  /**
   * The adjudication results.
   */
  public adjudication?: fhir.ExplanationOfBenefitItemAdjudication[]|undefined;
  /**
   * Default constructor for ExplanationOfBenefitAddItemDetailSubDetail - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IExplanationOfBenefitAddItemDetailSubDetail> = { }) {
    super(source);
    if (source['productOrService']) { this.productOrService = new fhir.CodeableConcept(source.productOrService!); }
    else { this.productOrService = null; }
    if (source['modifier']) { this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x)); }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity!); }
    if (source['unitPrice']) { this.unitPrice = new fhir.Money(source.unitPrice!); }
    if (source['factor']) { this.factor = source.factor; }
    if (source['_factor']) { this._factor = new fhir.FhirElement(source._factor!); }
    if (source['net']) { this.net = new fhir.Money(source.net!); }
    if (source['noteNumber']) { this.noteNumber = source.noteNumber.map((x) => (x)); }
    if (source['_noteNumber']) { this._noteNumber = source._noteNumber.map((x) => new fhir.FhirElement(x)); }
    if (source['adjudication']) { this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x)); }
  }
  /**
   * Example-bound Value Set for productOrService
   */
  public productOrServiceExampleValueSet():ServiceUsclsValueSetType {
    return ServiceUsclsValueSet;
  }
  /**
   * Example-bound Value Set for modifier
   */
  public modifierExampleValueSet():ClaimModifiersValueSetType {
    return ClaimModifiersValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["productOrService"]) { results.push(["productOrService",'Missing required element: ExplanationOfBenefit.addItem.detail.subDetail.productOrService']); }
    if (this["productOrService"]) { results.push(...this.productOrService.doModelValidation()); }
    if (this["modifier"]) { this.modifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["quantity"]) { results.push(...this.quantity.doModelValidation()); }
    if (this["unitPrice"]) { results.push(...this.unitPrice.doModelValidation()); }
    if (this["_factor"]) { results.push(...this._factor.doModelValidation()); }
    if (this["net"]) { results.push(...this.net.doModelValidation()); }
    if (this["_noteNumber"]) { this._noteNumber.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["adjudication"]) { this.adjudication.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * The second-tier service adjudications for payor added services.
 */
export class ExplanationOfBenefitAddItemDetail extends fhir.BackboneElement implements IExplanationOfBenefitAddItemDetail {
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  public productOrService: fhir.CodeableConcept|null;
  /**
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  public modifier?: fhir.CodeableConcept[]|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  public unitPrice?: fhir.Money|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  public factor?: number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.detail.factor
   */
  public _factor?: fhir.FhirElement|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  public net?: fhir.Money|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  public noteNumber?: number[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.detail.noteNumber
   */
  public _noteNumber?: fhir.FhirElement[]|undefined;
  /**
   * The adjudication results.
   */
  public adjudication?: fhir.ExplanationOfBenefitItemAdjudication[]|undefined;
  /**
   * The third-tier service adjudications for payor added services.
   */
  public subDetail?: fhir.ExplanationOfBenefitAddItemDetailSubDetail[]|undefined;
  /**
   * Default constructor for ExplanationOfBenefitAddItemDetail - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IExplanationOfBenefitAddItemDetail> = { }) {
    super(source);
    if (source['productOrService']) { this.productOrService = new fhir.CodeableConcept(source.productOrService!); }
    else { this.productOrService = null; }
    if (source['modifier']) { this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x)); }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity!); }
    if (source['unitPrice']) { this.unitPrice = new fhir.Money(source.unitPrice!); }
    if (source['factor']) { this.factor = source.factor; }
    if (source['_factor']) { this._factor = new fhir.FhirElement(source._factor!); }
    if (source['net']) { this.net = new fhir.Money(source.net!); }
    if (source['noteNumber']) { this.noteNumber = source.noteNumber.map((x) => (x)); }
    if (source['_noteNumber']) { this._noteNumber = source._noteNumber.map((x) => new fhir.FhirElement(x)); }
    if (source['adjudication']) { this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x)); }
    if (source['subDetail']) { this.subDetail = source.subDetail.map((x) => new fhir.ExplanationOfBenefitAddItemDetailSubDetail(x)); }
  }
  /**
   * Example-bound Value Set for productOrService
   */
  public productOrServiceExampleValueSet():ServiceUsclsValueSetType {
    return ServiceUsclsValueSet;
  }
  /**
   * Example-bound Value Set for modifier
   */
  public modifierExampleValueSet():ClaimModifiersValueSetType {
    return ClaimModifiersValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["productOrService"]) { results.push(["productOrService",'Missing required element: ExplanationOfBenefit.addItem.detail.productOrService']); }
    if (this["productOrService"]) { results.push(...this.productOrService.doModelValidation()); }
    if (this["modifier"]) { this.modifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["quantity"]) { results.push(...this.quantity.doModelValidation()); }
    if (this["unitPrice"]) { results.push(...this.unitPrice.doModelValidation()); }
    if (this["_factor"]) { results.push(...this._factor.doModelValidation()); }
    if (this["net"]) { results.push(...this.net.doModelValidation()); }
    if (this["_noteNumber"]) { this._noteNumber.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["adjudication"]) { this.adjudication.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["subDetail"]) { this.subDetail.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * The first-tier service adjudications for payor added product or service lines.
 */
export class ExplanationOfBenefitAddItem extends fhir.BackboneElement implements IExplanationOfBenefitAddItem {
  /**
   * Claim items which this service line is intended to replace.
   */
  public itemSequence?: number[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.itemSequence
   */
  public _itemSequence?: fhir.FhirElement[]|undefined;
  /**
   * The sequence number of the details within the claim item which this line is intended to replace.
   */
  public detailSequence?: number[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.detailSequence
   */
  public _detailSequence?: fhir.FhirElement[]|undefined;
  /**
   * The sequence number of the sub-details woithin the details within the claim item which this line is intended to replace.
   */
  public subDetailSequence?: number[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.subDetailSequence
   */
  public _subDetailSequence?: fhir.FhirElement[]|undefined;
  /**
   * The providers who are authorized for the services rendered to the patient.
   */
  public provider?: fhir.Reference[]|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  public productOrService: fhir.CodeableConcept|null;
  /**
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  public modifier?: fhir.CodeableConcept[]|undefined;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  public programCode?: fhir.CodeableConcept[]|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  public servicedDate?: string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.serviced[x]
   */
  public _servicedDate?: fhir.FhirElement|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  public servicedPeriod?: fhir.Period|undefined;
  /**
   * Where the product or service was provided.
   */
  public locationCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * Where the product or service was provided.
   */
  public locationAddress?: fhir.Address|undefined;
  /**
   * Where the product or service was provided.
   */
  public locationReference?: fhir.Reference|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  public unitPrice?: fhir.Money|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  public factor?: number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.factor
   */
  public _factor?: fhir.FhirElement|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  public net?: fhir.Money|undefined;
  /**
   * For example, providing a tooth code allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
   */
  public bodySite?: fhir.CodeableConcept|undefined;
  /**
   * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
   */
  public subSite?: fhir.CodeableConcept[]|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  public noteNumber?: number[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.noteNumber
   */
  public _noteNumber?: fhir.FhirElement[]|undefined;
  /**
   * The adjudication results.
   */
  public adjudication?: fhir.ExplanationOfBenefitItemAdjudication[]|undefined;
  /**
   * The second-tier service adjudications for payor added services.
   */
  public detail?: fhir.ExplanationOfBenefitAddItemDetail[]|undefined;
  /**
   * Default constructor for ExplanationOfBenefitAddItem - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IExplanationOfBenefitAddItem> = { }) {
    super(source);
    if (source['itemSequence']) { this.itemSequence = source.itemSequence.map((x) => (x)); }
    if (source['_itemSequence']) { this._itemSequence = source._itemSequence.map((x) => new fhir.FhirElement(x)); }
    if (source['detailSequence']) { this.detailSequence = source.detailSequence.map((x) => (x)); }
    if (source['_detailSequence']) { this._detailSequence = source._detailSequence.map((x) => new fhir.FhirElement(x)); }
    if (source['subDetailSequence']) { this.subDetailSequence = source.subDetailSequence.map((x) => (x)); }
    if (source['_subDetailSequence']) { this._subDetailSequence = source._subDetailSequence.map((x) => new fhir.FhirElement(x)); }
    if (source['provider']) { this.provider = source.provider.map((x) => new fhir.Reference(x)); }
    if (source['productOrService']) { this.productOrService = new fhir.CodeableConcept(source.productOrService!); }
    else { this.productOrService = null; }
    if (source['modifier']) { this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x)); }
    if (source['programCode']) { this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x)); }
    if (source['servicedDate']) { this.servicedDate = source.servicedDate; }
    if (source['_servicedDate']) { this._servicedDate = new fhir.FhirElement(source._servicedDate!); }
    if (source['servicedPeriod']) { this.servicedPeriod = new fhir.Period(source.servicedPeriod!); }
    if (source['locationCodeableConcept']) { this.locationCodeableConcept = new fhir.CodeableConcept(source.locationCodeableConcept!); }
    if (source['locationAddress']) { this.locationAddress = new fhir.Address(source.locationAddress!); }
    if (source['locationReference']) { this.locationReference = new fhir.Reference(source.locationReference!); }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity!); }
    if (source['unitPrice']) { this.unitPrice = new fhir.Money(source.unitPrice!); }
    if (source['factor']) { this.factor = source.factor; }
    if (source['_factor']) { this._factor = new fhir.FhirElement(source._factor!); }
    if (source['net']) { this.net = new fhir.Money(source.net!); }
    if (source['bodySite']) { this.bodySite = new fhir.CodeableConcept(source.bodySite!); }
    if (source['subSite']) { this.subSite = source.subSite.map((x) => new fhir.CodeableConcept(x)); }
    if (source['noteNumber']) { this.noteNumber = source.noteNumber.map((x) => (x)); }
    if (source['_noteNumber']) { this._noteNumber = source._noteNumber.map((x) => new fhir.FhirElement(x)); }
    if (source['adjudication']) { this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x)); }
    if (source['detail']) { this.detail = source.detail.map((x) => new fhir.ExplanationOfBenefitAddItemDetail(x)); }
  }
  /**
   * Example-bound Value Set for productOrService
   */
  public productOrServiceExampleValueSet():ServiceUsclsValueSetType {
    return ServiceUsclsValueSet;
  }
  /**
   * Example-bound Value Set for modifier
   */
  public modifierExampleValueSet():ClaimModifiersValueSetType {
    return ClaimModifiersValueSet;
  }
  /**
   * Example-bound Value Set for programCode
   */
  public programCodeExampleValueSet():ExProgramCodeValueSetType {
    return ExProgramCodeValueSet;
  }
  /**
   * Example-bound Value Set for locationCodeableConcept
   */
  public locationCodeableConceptExampleValueSet():ServicePlaceValueSetType {
    return ServicePlaceValueSet;
  }
  /**
   * Example-bound Value Set for locationAddress
   */
  public locationAddressExampleValueSet():ServicePlaceValueSetType {
    return ServicePlaceValueSet;
  }
  /**
   * Example-bound Value Set for locationReference
   */
  public locationReferenceExampleValueSet():ServicePlaceValueSetType {
    return ServicePlaceValueSet;
  }
  /**
   * Example-bound Value Set for bodySite
   */
  public bodySiteExampleValueSet():ToothValueSetType {
    return ToothValueSet;
  }
  /**
   * Example-bound Value Set for subSite
   */
  public subSiteExampleValueSet():SurfaceValueSetType {
    return SurfaceValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["_itemSequence"]) { this._itemSequence.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_detailSequence"]) { this._detailSequence.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_subDetailSequence"]) { this._subDetailSequence.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["provider"]) { this.provider.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (!this["productOrService"]) { results.push(["productOrService",'Missing required element: ExplanationOfBenefit.addItem.productOrService']); }
    if (this["productOrService"]) { results.push(...this.productOrService.doModelValidation()); }
    if (this["modifier"]) { this.modifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["programCode"]) { this.programCode.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_servicedDate"]) { results.push(...this._servicedDate.doModelValidation()); }
    if (this["servicedPeriod"]) { results.push(...this.servicedPeriod.doModelValidation()); }
    if (this["locationCodeableConcept"]) { results.push(...this.locationCodeableConcept.doModelValidation()); }
    if (this["locationAddress"]) { results.push(...this.locationAddress.doModelValidation()); }
    if (this["locationReference"]) { results.push(...this.locationReference.doModelValidation()); }
    if (this["quantity"]) { results.push(...this.quantity.doModelValidation()); }
    if (this["unitPrice"]) { results.push(...this.unitPrice.doModelValidation()); }
    if (this["_factor"]) { results.push(...this._factor.doModelValidation()); }
    if (this["net"]) { results.push(...this.net.doModelValidation()); }
    if (this["bodySite"]) { results.push(...this.bodySite.doModelValidation()); }
    if (this["subSite"]) { this.subSite.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_noteNumber"]) { this._noteNumber.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["adjudication"]) { this.adjudication.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["detail"]) { this.detail.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * Totals for amounts submitted, co-pays, benefits payable etc.
 */
export class ExplanationOfBenefitTotal extends fhir.BackboneElement implements IExplanationOfBenefitTotal {
  /**
   * For example, codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  public category: fhir.CodeableConcept|null;
  /**
   * Monetary total amount associated with the category.
   */
  public amount: fhir.Money|null;
  /**
   * Default constructor for ExplanationOfBenefitTotal - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IExplanationOfBenefitTotal> = { }) {
    super(source);
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category!); }
    else { this.category = null; }
    if (source['amount']) { this.amount = new fhir.Money(source.amount!); }
    else { this.amount = null; }
  }
  /**
   * Example-bound Value Set for category
   */
  public categoryExampleValueSet():AdjudicationValueSetType {
    return AdjudicationValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["category"]) { results.push(["category",'Missing required element: ExplanationOfBenefit.total.category']); }
    if (this["category"]) { results.push(...this.category.doModelValidation()); }
    if (!this["amount"]) { results.push(["amount",'Missing required element: ExplanationOfBenefit.total.amount']); }
    if (this["amount"]) { results.push(...this.amount.doModelValidation()); }
    return results;
  }
}

/**
 * Payment details for the adjudication of the claim.
 */
export class ExplanationOfBenefitPayment extends fhir.BackboneElement implements IExplanationOfBenefitPayment {
  /**
   * Whether this represents partial or complete payment of the benefits payable.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Insurers will deduct amounts owing from the provider (adjustment), such as a prior overpayment, from the amount owing to the provider (benefits payable) when payment is made to the provider.
   */
  public adjustment?: fhir.Money|undefined;
  /**
   * Reason for the payment adjustment.
   */
  public adjustmentReason?: fhir.CodeableConcept|undefined;
  /**
   * Estimated date the payment will be issued or the actual issue date of payment.
   */
  public date?: string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.payment.date
   */
  public _date?: fhir.FhirElement|undefined;
  /**
   * Benefits payable less any payment adjustment.
   */
  public amount?: fhir.Money|undefined;
  /**
   * For example: EFT number or check number.
   */
  public identifier?: fhir.Identifier|undefined;
  /**
   * Default constructor for ExplanationOfBenefitPayment - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IExplanationOfBenefitPayment> = { }) {
    super(source);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    if (source['adjustment']) { this.adjustment = new fhir.Money(source.adjustment!); }
    if (source['adjustmentReason']) { this.adjustmentReason = new fhir.CodeableConcept(source.adjustmentReason!); }
    if (source['date']) { this.date = source.date; }
    if (source['_date']) { this._date = new fhir.FhirElement(source._date!); }
    if (source['amount']) { this.amount = new fhir.Money(source.amount!); }
    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier!); }
  }
  /**
   * Example-bound Value Set for type
   */
  public typeExampleValueSet():ExPaymenttypeValueSetType {
    return ExPaymenttypeValueSet;
  }
  /**
   * Example-bound Value Set for adjustmentReason
   */
  public adjustmentReasonExampleValueSet():PaymentAdjustmentReasonValueSetType {
    return PaymentAdjustmentReasonValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (this["adjustment"]) { results.push(...this.adjustment.doModelValidation()); }
    if (this["adjustmentReason"]) { results.push(...this.adjustmentReason.doModelValidation()); }
    if (this["_date"]) { results.push(...this._date.doModelValidation()); }
    if (this["amount"]) { results.push(...this.amount.doModelValidation()); }
    if (this["identifier"]) { results.push(...this.identifier.doModelValidation()); }
    return results;
  }
}

/**
 * A note that describes or explains adjudication results in a human readable form.
 */
export class ExplanationOfBenefitProcessNote extends fhir.BackboneElement implements IExplanationOfBenefitProcessNote {
  /**
   * A number to uniquely identify a note entry.
   */
  public number?: number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.processNote.number
   */
  public _number?: fhir.FhirElement|undefined;
  /**
   * The business purpose of the note text.
   */
  public type?: NoteTypeValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.processNote.type
   */
  public _type?: fhir.FhirElement|undefined;
  /**
   * The explanation or description associated with the processing.
   */
  public text?: string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.processNote.text
   */
  public _text?: fhir.FhirElement|undefined;
  /**
   * Only required if the language is different from the resource language.
   */
  public language?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for ExplanationOfBenefitProcessNote - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IExplanationOfBenefitProcessNote> = { }) {
    super(source);
    if (source['number']) { this.number = source.number; }
    if (source['_number']) { this._number = new fhir.FhirElement(source._number!); }
    if (source['type']) { this.type = source.type; }
    if (source['_type']) { this._type = new fhir.FhirElement(source._type!); }
    if (source['text']) { this.text = source.text; }
    if (source['_text']) { this._text = new fhir.FhirElement(source._text!); }
    if (source['language']) { this.language = new fhir.CodeableConcept(source.language!); }
  }
  /**
   * Required-bound Value Set for type
   */
  public typeRequiredValueSet():NoteTypeValueSetType {
    return NoteTypeValueSet;
  }
  /**
   * Preferred-bound Value Set for language
   */
  public languagePreferredValueSet():LanguagesValueSetType {
    return LanguagesValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["_number"]) { results.push(...this._number.doModelValidation()); }
    if (this["_type"]) { results.push(...this._type.doModelValidation()); }
    if (this["_text"]) { results.push(...this._text.doModelValidation()); }
    if (this["language"]) { results.push(...this.language.doModelValidation()); }
    return results;
  }
}

/**
 * Benefits Used to date.
 */
export class ExplanationOfBenefitBenefitBalanceFinancial extends fhir.BackboneElement implements IExplanationOfBenefitBenefitBalanceFinancial {
  /**
   * For example: deductible, visits, benefit amount.
   */
  public type: fhir.CodeableConcept|null;
  /**
   * The quantity of the benefit which is permitted under the coverage.
   */
  public allowedUnsignedInt?: number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.benefitBalance.financial.allowed[x]
   */
  public _allowedUnsignedInt?: fhir.FhirElement|undefined;
  /**
   * The quantity of the benefit which is permitted under the coverage.
   */
  public allowedString?: string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.benefitBalance.financial.allowed[x]
   */
  public _allowedString?: fhir.FhirElement|undefined;
  /**
   * The quantity of the benefit which is permitted under the coverage.
   */
  public allowedMoney?: fhir.Money|undefined;
  /**
   * The quantity of the benefit which have been consumed to date.
   */
  public usedUnsignedInt?: number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.benefitBalance.financial.used[x]
   */
  public _usedUnsignedInt?: fhir.FhirElement|undefined;
  /**
   * The quantity of the benefit which have been consumed to date.
   */
  public usedMoney?: fhir.Money|undefined;
  /**
   * Default constructor for ExplanationOfBenefitBenefitBalanceFinancial - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IExplanationOfBenefitBenefitBalanceFinancial> = { }) {
    super(source);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    else { this.type = null; }
    if (source['allowedUnsignedInt']) { this.allowedUnsignedInt = source.allowedUnsignedInt; }
    if (source['_allowedUnsignedInt']) { this._allowedUnsignedInt = new fhir.FhirElement(source._allowedUnsignedInt!); }
    if (source['allowedString']) { this.allowedString = source.allowedString; }
    if (source['_allowedString']) { this._allowedString = new fhir.FhirElement(source._allowedString!); }
    if (source['allowedMoney']) { this.allowedMoney = new fhir.Money(source.allowedMoney!); }
    if (source['usedUnsignedInt']) { this.usedUnsignedInt = source.usedUnsignedInt; }
    if (source['_usedUnsignedInt']) { this._usedUnsignedInt = new fhir.FhirElement(source._usedUnsignedInt!); }
    if (source['usedMoney']) { this.usedMoney = new fhir.Money(source.usedMoney!); }
  }
  /**
   * Example-bound Value Set for type
   */
  public typeExampleValueSet():BenefitTypeValueSetType {
    return BenefitTypeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["type"]) { results.push(["type",'Missing required element: ExplanationOfBenefit.benefitBalance.financial.type']); }
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (this["_allowedUnsignedInt"]) { results.push(...this._allowedUnsignedInt.doModelValidation()); }
    if (this["_allowedString"]) { results.push(...this._allowedString.doModelValidation()); }
    if (this["allowedMoney"]) { results.push(...this.allowedMoney.doModelValidation()); }
    if (this["_usedUnsignedInt"]) { results.push(...this._usedUnsignedInt.doModelValidation()); }
    if (this["usedMoney"]) { results.push(...this.usedMoney.doModelValidation()); }
    return results;
  }
}

/**
 * Balance by Benefit Category.
 */
export class ExplanationOfBenefitBenefitBalance extends fhir.BackboneElement implements IExplanationOfBenefitBenefitBalance {
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  public category: fhir.CodeableConcept|null;
  /**
   * True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage.
   */
  public excluded?: boolean|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.benefitBalance.excluded
   */
  public _excluded?: fhir.FhirElement|undefined;
  /**
   * For example: MED01, or DENT2.
   */
  public name?: string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.benefitBalance.name
   */
  public _name?: fhir.FhirElement|undefined;
  /**
   * For example, 'DENT2 covers 100% of basic, 50% of major but excludes Ortho, Implants and Cosmetic services'.
   */
  public description?: string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.benefitBalance.description
   */
  public _description?: fhir.FhirElement|undefined;
  /**
   * Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.
   */
  public network?: fhir.CodeableConcept|undefined;
  /**
   * Indicates if the benefits apply to an individual or to the family.
   */
  public unit?: fhir.CodeableConcept|undefined;
  /**
   * The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
   */
  public term?: fhir.CodeableConcept|undefined;
  /**
   * Benefits Used to date.
   */
  public financial?: fhir.ExplanationOfBenefitBenefitBalanceFinancial[]|undefined;
  /**
   * Default constructor for ExplanationOfBenefitBenefitBalance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IExplanationOfBenefitBenefitBalance> = { }) {
    super(source);
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category!); }
    else { this.category = null; }
    if (source['excluded']) { this.excluded = source.excluded; }
    if (source['_excluded']) { this._excluded = new fhir.FhirElement(source._excluded!); }
    if (source['name']) { this.name = source.name; }
    if (source['_name']) { this._name = new fhir.FhirElement(source._name!); }
    if (source['description']) { this.description = source.description; }
    if (source['_description']) { this._description = new fhir.FhirElement(source._description!); }
    if (source['network']) { this.network = new fhir.CodeableConcept(source.network!); }
    if (source['unit']) { this.unit = new fhir.CodeableConcept(source.unit!); }
    if (source['term']) { this.term = new fhir.CodeableConcept(source.term!); }
    if (source['financial']) { this.financial = source.financial.map((x) => new fhir.ExplanationOfBenefitBenefitBalanceFinancial(x)); }
  }
  /**
   * Example-bound Value Set for category
   */
  public categoryExampleValueSet():ExBenefitcategoryValueSetType {
    return ExBenefitcategoryValueSet;
  }
  /**
   * Example-bound Value Set for network
   */
  public networkExampleValueSet():BenefitNetworkValueSetType {
    return BenefitNetworkValueSet;
  }
  /**
   * Example-bound Value Set for unit
   */
  public unitExampleValueSet():BenefitUnitValueSetType {
    return BenefitUnitValueSet;
  }
  /**
   * Example-bound Value Set for term
   */
  public termExampleValueSet():BenefitTermValueSetType {
    return BenefitTermValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["category"]) { results.push(["category",'Missing required element: ExplanationOfBenefit.benefitBalance.category']); }
    if (this["category"]) { results.push(...this.category.doModelValidation()); }
    if (this["_excluded"]) { results.push(...this._excluded.doModelValidation()); }
    if (this["_name"]) { results.push(...this._name.doModelValidation()); }
    if (this["_description"]) { results.push(...this._description.doModelValidation()); }
    if (this["network"]) { results.push(...this.network.doModelValidation()); }
    if (this["unit"]) { results.push(...this.unit.doModelValidation()); }
    if (this["term"]) { results.push(...this.term.doModelValidation()); }
    if (this["financial"]) { this.financial.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
export class ExplanationOfBenefit extends fhir.DomainResource implements IExplanationOfBenefit {
  /**
   * Resource Type Name
   */
  public resourceType: "ExplanationOfBenefit";
  /**
   * A unique identifier assigned to this explanation of benefit.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  public status: ExplanationofbenefitStatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.status
   */
  public _status?: fhir.FhirElement|undefined;
  /**
   * The majority of jurisdictions use: oral, pharmacy, vision, professional and institutional, or variants on those terms, as the general styles of claims. The valueset is extensible to accommodate other jurisdictional requirements.
   */
  public type: fhir.CodeableConcept|null;
  /**
   * This may contain the local bill type codes such as the US UB-04 bill type code.
   */
  public subType?: fhir.CodeableConcept|undefined;
  /**
   * A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.
   */
  public use: ClaimUseValueSetEnum|null;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.use
   */
  public _use?: fhir.FhirElement|undefined;
  /**
   * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for forecast reimbursement is sought.
   */
  public patient: fhir.Reference|null;
  /**
   * Typically this would be today or in the past for a claim, and today or in the future for preauthorizations and prodeterminations. Typically line item dates of service should fall within the billing period if one is specified.
   */
  public billablePeriod?: fhir.Period|undefined;
  /**
   * This field is independent of the date of creation of the resource as it may reflect the creation date of a source document prior to digitization. Typically for claims all services must be completed as of this date.
   */
  public created: string|null;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.created
   */
  public _created?: fhir.FhirElement|undefined;
  /**
   * Individual who created the claim, predetermination or preauthorization.
   */
  public enterer?: fhir.Reference|undefined;
  /**
   * The party responsible for authorization, adjudication and reimbursement.
   */
  public insurer: fhir.Reference|null;
  /**
   * Typically this field would be 1..1 where this party is responsible for the claim but not necessarily professionally responsible for the provision of the individual products and services listed below.
   */
  public provider: fhir.Reference|null;
  /**
   * If a claim processor is unable to complete the processing as per the priority then they should generate and error and not process the request.
   */
  public priority?: fhir.CodeableConcept|undefined;
  /**
   * This field is only used for preauthorizations.
   */
  public fundsReserveRequested?: fhir.CodeableConcept|undefined;
  /**
   * Fund would be release by a future claim quoting the preAuthRef of this response. Examples of values include: provider, patient, none.
   */
  public fundsReserve?: fhir.CodeableConcept|undefined;
  /**
   * For example,  for the original treatment and follow-up exams.
   */
  public related?: fhir.ExplanationOfBenefitRelated[]|undefined;
  /**
   * Prescription to support the dispensing of pharmacy, device or vision products.
   */
  public prescription?: fhir.Reference|undefined;
  /**
   * For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefor issues a new prescription for an alternate medication which has the same therapeutic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'.
   */
  public originalPrescription?: fhir.Reference|undefined;
  /**
   * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and may choose to pay the subscriber instead.
   */
  public payee?: fhir.ExplanationOfBenefitPayee|undefined;
  /**
   * The referral resource which lists the date, practitioner, reason and other supporting information.
   */
  public referral?: fhir.Reference|undefined;
  /**
   * Facility where the services were provided.
   */
  public facility?: fhir.Reference|undefined;
  /**
   * The business identifier for the instance of the adjudication request: claim predetermination or preauthorization.
   */
  public claim?: fhir.Reference|undefined;
  /**
   * The business identifier for the instance of the adjudication response: claim, predetermination or preauthorization response.
   */
  public claimResponse?: fhir.Reference|undefined;
  /**
   * The resource may be used to indicate that: the request has been held (queued) for processing; that it has been processed and errors found (error); that no errors were found and that some of the adjudication has been undertaken (partial) or that all of the adjudication has been undertaken (complete).
   */
  public outcome: RemittanceOutcomeValueSetEnum|null;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.outcome
   */
  public _outcome?: fhir.FhirElement|undefined;
  /**
   * A human readable description of the status of the adjudication.
   */
  public disposition?: string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.disposition
   */
  public _disposition?: fhir.FhirElement|undefined;
  /**
   * This value is only present on preauthorization adjudications.
   */
  public preAuthRef?: string[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.preAuthRef
   */
  public _preAuthRef?: fhir.FhirElement[]|undefined;
  /**
   * This value is only present on preauthorization adjudications.
   */
  public preAuthRefPeriod?: fhir.Period[]|undefined;
  /**
   * The members of the team who provided the products and services.
   */
  public careTeam?: fhir.ExplanationOfBenefitCareTeam[]|undefined;
  /**
   * Often there are multiple jurisdiction specific valuesets which are required.
   */
  public supportingInfo?: fhir.ExplanationOfBenefitSupportingInfo[]|undefined;
  /**
   * Information about diagnoses relevant to the claim items.
   */
  public diagnosis?: fhir.ExplanationOfBenefitDiagnosis[]|undefined;
  /**
   * Procedures performed on the patient relevant to the billing items with the claim.
   */
  public procedure?: fhir.ExplanationOfBenefitProcedure[]|undefined;
  /**
   * This indicates the relative order of a series of EOBs related to different coverages for the same suite of services.
   */
  public precedence?: number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.precedence
   */
  public _precedence?: fhir.FhirElement|undefined;
  /**
   * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
   */
  public insurance: fhir.ExplanationOfBenefitInsurance[]|null;
  /**
   * Details of a accident which resulted in injuries which required the products and services listed in the claim.
   */
  public accident?: fhir.ExplanationOfBenefitAccident|undefined;
  /**
   * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
   */
  public item?: fhir.ExplanationOfBenefitItem[]|undefined;
  /**
   * The first-tier service adjudications for payor added product or service lines.
   */
  public addItem?: fhir.ExplanationOfBenefitAddItem[]|undefined;
  /**
   * The adjudication results which are presented at the header level rather than at the line-item or add-item levels.
   */
  public adjudication?: fhir.ExplanationOfBenefitItemAdjudication[]|undefined;
  /**
   * Totals for amounts submitted, co-pays, benefits payable etc.
   */
  public total?: fhir.ExplanationOfBenefitTotal[]|undefined;
  /**
   * Payment details for the adjudication of the claim.
   */
  public payment?: fhir.ExplanationOfBenefitPayment|undefined;
  /**
   * May be needed to identify specific jurisdictional forms.
   */
  public formCode?: fhir.CodeableConcept|undefined;
  /**
   * Needed to permit insurers to include the actual form.
   */
  public form?: fhir.Attachment|undefined;
  /**
   * A note that describes or explains adjudication results in a human readable form.
   */
  public processNote?: fhir.ExplanationOfBenefitProcessNote[]|undefined;
  /**
   * Not applicable when use=claim.
   */
  public benefitPeriod?: fhir.Period|undefined;
  /**
   * Balance by Benefit Category.
   */
  public benefitBalance?: fhir.ExplanationOfBenefitBenefitBalance[]|undefined;
  /**
   * Default constructor for ExplanationOfBenefit - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IExplanationOfBenefit> = { }) {
    super(source);
    this.resourceType = 'ExplanationOfBenefit';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['status']) { this.status = source.status; }
    else { this.status = null; }
    if (source['_status']) { this._status = new fhir.FhirElement(source._status!); }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    else { this.type = null; }
    if (source['subType']) { this.subType = new fhir.CodeableConcept(source.subType!); }
    if (source['use']) { this.use = source.use; }
    else { this.use = null; }
    if (source['_use']) { this._use = new fhir.FhirElement(source._use!); }
    if (source['patient']) { this.patient = new fhir.Reference(source.patient!); }
    else { this.patient = null; }
    if (source['billablePeriod']) { this.billablePeriod = new fhir.Period(source.billablePeriod!); }
    if (source['created']) { this.created = source.created; }
    else { this.created = null; }
    if (source['_created']) { this._created = new fhir.FhirElement(source._created!); }
    if (source['enterer']) { this.enterer = new fhir.Reference(source.enterer!); }
    if (source['insurer']) { this.insurer = new fhir.Reference(source.insurer!); }
    else { this.insurer = null; }
    if (source['provider']) { this.provider = new fhir.Reference(source.provider!); }
    else { this.provider = null; }
    if (source['priority']) { this.priority = new fhir.CodeableConcept(source.priority!); }
    if (source['fundsReserveRequested']) { this.fundsReserveRequested = new fhir.CodeableConcept(source.fundsReserveRequested!); }
    if (source['fundsReserve']) { this.fundsReserve = new fhir.CodeableConcept(source.fundsReserve!); }
    if (source['related']) { this.related = source.related.map((x) => new fhir.ExplanationOfBenefitRelated(x)); }
    if (source['prescription']) { this.prescription = new fhir.Reference(source.prescription!); }
    if (source['originalPrescription']) { this.originalPrescription = new fhir.Reference(source.originalPrescription!); }
    if (source['payee']) { this.payee = new fhir.ExplanationOfBenefitPayee(source.payee!); }
    if (source['referral']) { this.referral = new fhir.Reference(source.referral!); }
    if (source['facility']) { this.facility = new fhir.Reference(source.facility!); }
    if (source['claim']) { this.claim = new fhir.Reference(source.claim!); }
    if (source['claimResponse']) { this.claimResponse = new fhir.Reference(source.claimResponse!); }
    if (source['outcome']) { this.outcome = source.outcome; }
    else { this.outcome = null; }
    if (source['_outcome']) { this._outcome = new fhir.FhirElement(source._outcome!); }
    if (source['disposition']) { this.disposition = source.disposition; }
    if (source['_disposition']) { this._disposition = new fhir.FhirElement(source._disposition!); }
    if (source['preAuthRef']) { this.preAuthRef = source.preAuthRef.map((x) => (x)); }
    if (source['_preAuthRef']) { this._preAuthRef = source._preAuthRef.map((x) => new fhir.FhirElement(x)); }
    if (source['preAuthRefPeriod']) { this.preAuthRefPeriod = source.preAuthRefPeriod.map((x) => new fhir.Period(x)); }
    if (source['careTeam']) { this.careTeam = source.careTeam.map((x) => new fhir.ExplanationOfBenefitCareTeam(x)); }
    if (source['supportingInfo']) { this.supportingInfo = source.supportingInfo.map((x) => new fhir.ExplanationOfBenefitSupportingInfo(x)); }
    if (source['diagnosis']) { this.diagnosis = source.diagnosis.map((x) => new fhir.ExplanationOfBenefitDiagnosis(x)); }
    if (source['procedure']) { this.procedure = source.procedure.map((x) => new fhir.ExplanationOfBenefitProcedure(x)); }
    if (source['precedence']) { this.precedence = source.precedence; }
    if (source['_precedence']) { this._precedence = new fhir.FhirElement(source._precedence!); }
    if (source['insurance']) { this.insurance = source.insurance.map((x) => new fhir.ExplanationOfBenefitInsurance(x)); }
    else { this.insurance = null; }
    if (source['accident']) { this.accident = new fhir.ExplanationOfBenefitAccident(source.accident!); }
    if (source['item']) { this.item = source.item.map((x) => new fhir.ExplanationOfBenefitItem(x)); }
    if (source['addItem']) { this.addItem = source.addItem.map((x) => new fhir.ExplanationOfBenefitAddItem(x)); }
    if (source['adjudication']) { this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x)); }
    if (source['total']) { this.total = source.total.map((x) => new fhir.ExplanationOfBenefitTotal(x)); }
    if (source['payment']) { this.payment = new fhir.ExplanationOfBenefitPayment(source.payment!); }
    if (source['formCode']) { this.formCode = new fhir.CodeableConcept(source.formCode!); }
    if (source['form']) { this.form = new fhir.Attachment(source.form!); }
    if (source['processNote']) { this.processNote = source.processNote.map((x) => new fhir.ExplanationOfBenefitProcessNote(x)); }
    if (source['benefitPeriod']) { this.benefitPeriod = new fhir.Period(source.benefitPeriod!); }
    if (source['benefitBalance']) { this.benefitBalance = source.benefitBalance.map((x) => new fhir.ExplanationOfBenefitBenefitBalance(x)); }
  }
  /**
   * Required-bound Value Set for status
   */
  public statusRequiredValueSet():ExplanationofbenefitStatusValueSetType {
    return ExplanationofbenefitStatusValueSet;
  }
  /**
   * Extensible-bound Value Set for type
   */
  public typeExtensibleValueSet():ClaimTypeValueSetType {
    return ClaimTypeValueSet;
  }
  /**
   * Example-bound Value Set for subType
   */
  public subTypeExampleValueSet():ClaimSubtypeValueSetType {
    return ClaimSubtypeValueSet;
  }
  /**
   * Required-bound Value Set for use
   */
  public useRequiredValueSet():ClaimUseValueSetType {
    return ClaimUseValueSet;
  }
  /**
   * Example-bound Value Set for fundsReserveRequested
   */
  public fundsReserveRequestedExampleValueSet():FundsreserveValueSetType {
    return FundsreserveValueSet;
  }
  /**
   * Example-bound Value Set for fundsReserve
   */
  public fundsReserveExampleValueSet():FundsreserveValueSetType {
    return FundsreserveValueSet;
  }
  /**
   * Required-bound Value Set for outcome
   */
  public outcomeRequiredValueSet():RemittanceOutcomeValueSetType {
    return RemittanceOutcomeValueSet;
  }
  /**
   * Example-bound Value Set for formCode
   */
  public formCodeExampleValueSet():FormsValueSetType {
    return FormsValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: ExplanationOfBenefit.resourceType']); }
    if (this["identifier"]) { this.identifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (!this["status"]) { results.push(["status",'Missing required element: ExplanationOfBenefit.status']); }
    if (this["_status"]) { results.push(...this._status.doModelValidation()); }
    if (!this["type"]) { results.push(["type",'Missing required element: ExplanationOfBenefit.type']); }
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (this["subType"]) { results.push(...this.subType.doModelValidation()); }
    if (!this["use"]) { results.push(["use",'Missing required element: ExplanationOfBenefit.use']); }
    if (this["_use"]) { results.push(...this._use.doModelValidation()); }
    if (!this["patient"]) { results.push(["patient",'Missing required element: ExplanationOfBenefit.patient']); }
    if (this["patient"]) { results.push(...this.patient.doModelValidation()); }
    if (this["billablePeriod"]) { results.push(...this.billablePeriod.doModelValidation()); }
    if (!this["created"]) { results.push(["created",'Missing required element: ExplanationOfBenefit.created']); }
    if (this["_created"]) { results.push(...this._created.doModelValidation()); }
    if (this["enterer"]) { results.push(...this.enterer.doModelValidation()); }
    if (!this["insurer"]) { results.push(["insurer",'Missing required element: ExplanationOfBenefit.insurer']); }
    if (this["insurer"]) { results.push(...this.insurer.doModelValidation()); }
    if (!this["provider"]) { results.push(["provider",'Missing required element: ExplanationOfBenefit.provider']); }
    if (this["provider"]) { results.push(...this.provider.doModelValidation()); }
    if (this["priority"]) { results.push(...this.priority.doModelValidation()); }
    if (this["fundsReserveRequested"]) { results.push(...this.fundsReserveRequested.doModelValidation()); }
    if (this["fundsReserve"]) { results.push(...this.fundsReserve.doModelValidation()); }
    if (this["related"]) { this.related.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["prescription"]) { results.push(...this.prescription.doModelValidation()); }
    if (this["originalPrescription"]) { results.push(...this.originalPrescription.doModelValidation()); }
    if (this["payee"]) { results.push(...this.payee.doModelValidation()); }
    if (this["referral"]) { results.push(...this.referral.doModelValidation()); }
    if (this["facility"]) { results.push(...this.facility.doModelValidation()); }
    if (this["claim"]) { results.push(...this.claim.doModelValidation()); }
    if (this["claimResponse"]) { results.push(...this.claimResponse.doModelValidation()); }
    if (!this["outcome"]) { results.push(["outcome",'Missing required element: ExplanationOfBenefit.outcome']); }
    if (this["_outcome"]) { results.push(...this._outcome.doModelValidation()); }
    if (this["_disposition"]) { results.push(...this._disposition.doModelValidation()); }
    if (this["_preAuthRef"]) { this._preAuthRef.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["preAuthRefPeriod"]) { this.preAuthRefPeriod.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["careTeam"]) { this.careTeam.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["supportingInfo"]) { this.supportingInfo.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["diagnosis"]) { this.diagnosis.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["procedure"]) { this.procedure.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_precedence"]) { results.push(...this._precedence.doModelValidation()); }
    if ((!this["insurance"]) || (this["insurance"].length === 0)) { results.push(["insurance",'Missing required element: ExplanationOfBenefit.insurance']); }
    if (this["insurance"]) { this.insurance.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["accident"]) { results.push(...this.accident.doModelValidation()); }
    if (this["item"]) { this.item.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["addItem"]) { this.addItem.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["adjudication"]) { this.adjudication.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["total"]) { this.total.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["payment"]) { results.push(...this.payment.doModelValidation()); }
    if (this["formCode"]) { results.push(...this.formCode.doModelValidation()); }
    if (this["form"]) { results.push(...this.form.doModelValidation()); }
    if (this["processNote"]) { this.processNote.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["benefitPeriod"]) { results.push(...this.benefitPeriod.doModelValidation()); }
    if (this["benefitBalance"]) { this.benefitBalance.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}
