// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Ratio

import * as fhir from '../fhir.js';

import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Valid arguments for the Ratio type.
 */
export interface RatioArgs extends fhir.FhirElementArgs {
  /**
   * The value of the numerator.
   */
  numerator?: fhir.QuantityArgs|undefined;
  /**
   * The value of the denominator.
   */
  denominator?: fhir.QuantityArgs|undefined;
}

/**
 * A relationship of two Quantity values - expressed as a numerator and a denominator.
 */
export class Ratio extends fhir.FhirElement {
  readonly __dataType:string = 'Ratio';
  /**
   * The value of the numerator.
   */
  public numerator?: fhir.Quantity|undefined;
  /**
   * The value of the denominator.
   */
  public denominator?: fhir.Quantity|undefined;
  /**
   * Default constructor for Ratio - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<RatioArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['numerator']) { this.numerator = new fhir.Quantity(source.numerator); }
    if (source['denominator']) { this.denominator = new fhir.Quantity(source.denominator); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["numerator"]) { outcome.issue!.push(...this.numerator.doModelValidation().issue!); }
    if (this["denominator"]) { outcome.issue!.push(...this.denominator.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
