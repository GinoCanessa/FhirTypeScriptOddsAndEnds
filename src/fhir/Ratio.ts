// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
  // Restricted to: Patient|Encounter|Observation
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * A relationship of two Quantity values - expressed as a numerator and a denominator.
 */
export interface IRatio extends fhir.IFhirElement {
  /**
   * The value of the denominator.
   */
  denominator?: fhir.IQuantity|undefined;
  /**
   * The value of the numerator.
   */
  numerator?: fhir.IQuantity|undefined;
}
/**
 * A relationship of two Quantity values - expressed as a numerator and a denominator.
 */
export class Ratio extends fhir.FhirElement implements fhir.IRatio {
  /**
   * The value of the denominator.
   */
  public denominator?: fhir.Quantity|undefined;
  /**
   * The value of the numerator.
   */
  public numerator?: fhir.Quantity|undefined;
  /**
   * Default constructor for Ratio - initializes required elements to null.
   */
  constructor() {
    super();
  }
  /**
   * Factory function to create a Ratio from an object that MAY NOT contain all required elements.
   */
  static override FactoryCreate(source:Partial<fhir.IRatio>):Ratio {
    var dest:Partial<Ratio> = super.FactoryCreate(source) as Partial<Ratio>;
    if (source["denominator"] !== undefined) { dest.denominator = fhir.Quantity.FactoryCreate(source.denominator!); }
    if (source["numerator"] !== undefined) { dest.numerator = fhir.Quantity.FactoryCreate(source.numerator!); }
    return dest as Ratio;
  }
  /**
   * Check if the current Ratio contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a Ratio from an object that MUST contain all required elements.
   */
  static override FactoryCreateStrict(source:fhir.IRatio):Ratio {
    var dest:Ratio = this.FactoryCreate(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `Ratio is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
}
