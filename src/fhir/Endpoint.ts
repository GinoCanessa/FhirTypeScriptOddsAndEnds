// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * The technical details of an endpoint that can be used for electronic services, such as for web services providing XDS.b or a REST endpoint for another FHIR server. This may include any security context information.
 */
export type IEndpoint = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "Endpoint";
  /**
   * For rest-hook, and websocket, the end-point must be an http: or https: URL; for email, a mailto: url, for sms, a tel: url, and for message the endpoint can be in any form of url the server understands (usually, http: or mllp:). The URI is allowed to be relative; in which case, it is relative to the server end-point (since there may be more than one, clients should avoid using relative URIs)
   * This address will be to the service base, without any parameters, or sub-services or resources tacked on.
   * E.g. for a WADO-RS endpoint, the url should be "https://pacs.hospital.org/wado-rs"
   * and not "https://pacs.hospital.org/wado-rs/studies/1.2.250.1.59.40211.12345678.678910/series/1.2.250.1.59.40211.789001276.14556172.67789/instances/...".
   */
  address: string|null;
  _address?: fhir.IFhirElement|undefined;
  /**
   * For additional connectivity details for the protocol, extensions will be used at this point, as in the XDS example.
   */
  connectionType: fhir.ICoding|null;
  /**
   * Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.
   */
  contact?: fhir.IContactPoint[]|undefined;
  /**
   * Exactly what these mean depends on the channel type. The can convey additional information to the recipient and/or meet security requirements.
   */
  header?: string[]|undefined;
  _header?: fhir.IFhirElement[]|undefined;
  /**
   * Identifier for the organization that is used to identify the endpoint across multiple disparate systems.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * This property is not typically used when searching for Endpoint resources for usage. The typical usage is via the reference from an applicable Organization/Location/Practitioner resource, which is where the context is provided. Multiple Locations may reference a single endpoint, and don't have to be within the same organization resource, but most likely within the same organizational hierarchy.
   */
  managingOrganization?: fhir.IReference|undefined;
  /**
   * A friendly name that this endpoint can be referred to with.
   */
  name?: string|undefined;
  _name?: fhir.IFhirElement|undefined;
  /**
   * Sending the payload has obvious security consequences. The server is responsible for ensuring that the content is appropriately secured.
   */
  payloadMimeType?: string[]|undefined;
  _payloadMimeType?: fhir.IFhirElement[]|undefined;
  /**
   * The payloadFormat describes the serialization format of the data, where the payloadType indicates the specific document/schema that is being transferred; e.g. DischargeSummary or CarePlan.
   */
  payloadType: fhir.ICodeableConcept[]|null;
  /**
   * The interval during which the endpoint is expected to be operational.
   */
  period?: fhir.IPeriod|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the endpoint as not currently valid.
   */
  status: EndpointStatusEnum|null;
  _status?: fhir.IFhirElement|undefined;
}
/**
 * The technical details of an endpoint that can be used for electronic services, such as for web services providing XDS.b or a REST endpoint for another FHIR server. This may include any security context information.
 */
export class Endpoint extends fhir.DomainResource implements fhir.IEndpoint {
  /**
   * Resource Type Name
   */
  public override resourceType: "Endpoint";
  /**
   * For rest-hook, and websocket, the end-point must be an http: or https: URL; for email, a mailto: url, for sms, a tel: url, and for message the endpoint can be in any form of url the server understands (usually, http: or mllp:). The URI is allowed to be relative; in which case, it is relative to the server end-point (since there may be more than one, clients should avoid using relative URIs)
   * This address will be to the service base, without any parameters, or sub-services or resources tacked on.
   * E.g. for a WADO-RS endpoint, the url should be "https://pacs.hospital.org/wado-rs"
   * and not "https://pacs.hospital.org/wado-rs/studies/1.2.250.1.59.40211.12345678.678910/series/1.2.250.1.59.40211.789001276.14556172.67789/instances/...".
   */
  public address: string|null;
  public _address?: fhir.FhirElement|undefined;
  /**
   * For additional connectivity details for the protocol, extensions will be used at this point, as in the XDS example.
   */
  public connectionType: fhir.Coding|null;
  /**
   * Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.
   */
  public contact?: fhir.ContactPoint[]|undefined;
  /**
   * Exactly what these mean depends on the channel type. The can convey additional information to the recipient and/or meet security requirements.
   */
  public header?: string[]|undefined;
  public _header?: fhir.FhirElement[]|undefined;
  /**
   * Identifier for the organization that is used to identify the endpoint across multiple disparate systems.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * This property is not typically used when searching for Endpoint resources for usage. The typical usage is via the reference from an applicable Organization/Location/Practitioner resource, which is where the context is provided. Multiple Locations may reference a single endpoint, and don't have to be within the same organization resource, but most likely within the same organizational hierarchy.
   */
  public managingOrganization?: fhir.Reference|undefined;
  /**
   * A friendly name that this endpoint can be referred to with.
   */
  public name?: string|undefined;
  public _name?: fhir.FhirElement|undefined;
  /**
   * Sending the payload has obvious security consequences. The server is responsible for ensuring that the content is appropriately secured.
   */
  public payloadMimeType?: string[]|undefined;
  public _payloadMimeType?: fhir.FhirElement[]|undefined;
  /**
   * The payloadFormat describes the serialization format of the data, where the payloadType indicates the specific document/schema that is being transferred; e.g. DischargeSummary or CarePlan.
   */
  public payloadType: fhir.CodeableConcept[]|null;
  /**
   * The interval during which the endpoint is expected to be operational.
   */
  public period?: fhir.Period|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the endpoint as not currently valid.
   */
  public status: EndpointStatusEnum|null;
  public _status?: fhir.FhirElement|undefined;
  /**
   * Default constructor for Endpoint - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IEndpoint> = {}) {
    super(source);
    this.resourceType = 'Endpoint';
    this.address = null;
    if (source["address"]) { this.address = source.address; }
    if (this.address === undefined) { this.address = null }
    if (source["_address"]) { this._address = new fhir.FhirElement(source._address!); }
    this.connectionType = null;
    if (source["connectionType"]) { this.connectionType = new fhir.Coding(source.connectionType!); }
    if (this.connectionType === undefined) { this.connectionType = null }
    if (source["contact"]) { this.contact = source.contact.map((x:Partial<fhir.IContactPoint>) => new fhir.ContactPoint(x)); }
    if (source["header"]) { this.header = source.header.map((x) => (x)); }
    if (source["_header"]) { this._header = source._header.map((x:Partial<fhir.IFhirElement>) => new fhir.FhirElement(x)); }
    if (source["identifier"]) { this.identifier = source.identifier.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    if (source["managingOrganization"]) { this.managingOrganization = new fhir.Reference(source.managingOrganization!); }
    if (source["name"]) { this.name = source.name; }
    if (source["_name"]) { this._name = new fhir.FhirElement(source._name!); }
    if (source["payloadMimeType"]) { this.payloadMimeType = source.payloadMimeType.map((x) => (x)); }
    if (source["_payloadMimeType"]) { this._payloadMimeType = source._payloadMimeType.map((x:Partial<fhir.IFhirElement>) => new fhir.FhirElement(x)); }
    this.payloadType = null;
    if (source["payloadType"]) { this.payloadType = source.payloadType.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (this.payloadType === undefined) { this.payloadType = null }
    if (source["period"]) { this.period = new fhir.Period(source.period!); }
    this.status = null;
    if (source["status"]) { this.status = source.status; }
    if (this.status === undefined) { this.status = null }
    if (source["_status"]) { this._status = new fhir.FhirElement(source._status!); }
  }
  /**
   * Check if the current Endpoint contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["address"] === undefined) { missingElements.push("address"); }
    if (this["connectionType"] === undefined) { missingElements.push("connectionType"); }
    if ((!this["payloadType"]) || (this["payloadType"].length === 0)) { missingElements.push("payloadType"); }
    if (this["status"] === undefined) { missingElements.push("status"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a Endpoint from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IEndpoint):Endpoint {
    var dest:Endpoint = new Endpoint(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `Endpoint is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the Endpoint.status field
 */
export enum EndpointStatusEnum {
  ACTIVE = "active",
  SUSPENDED = "suspended",
  ERROR = "error",
  OFF = "off",
  ENTERED_IN_ERROR = "entered-in-error",
  TEST = "test",
}
