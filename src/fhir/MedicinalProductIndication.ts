// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
 */
export type IMedicinalProductIndicationOtherTherapy = fhir.IBackboneElement & {
  /**
   * Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication.
   */
  medicationCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication.
   */
  medicationReference?: fhir.IReference|undefined;
  /**
   * The type of relationship between the medicinal product indication or contraindication and another therapy.
   */
  therapyRelationshipType: fhir.ICodeableConcept|null;
}
/**
 * Indication for the Medicinal Product.
 */
export type IMedicinalProductIndication = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "MedicinalProductIndication";
  /**
   * Comorbidity (concurrent condition) or co-infection as part of the indication.
   */
  comorbidity?: fhir.ICodeableConcept[]|undefined;
  /**
   * The status of the disease or symptom for which the indication applies.
   */
  diseaseStatus?: fhir.ICodeableConcept|undefined;
  /**
   * The disease, symptom or procedure that is the indication for treatment.
   */
  diseaseSymptomProcedure?: fhir.ICodeableConcept|undefined;
  /**
   * Timing or duration information as part of the indication.
   */
  duration?: fhir.IQuantity|undefined;
  /**
   * The intended effect, aim or strategy to be achieved by the indication.
   */
  intendedEffect?: fhir.ICodeableConcept|undefined;
  /**
   * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
   */
  otherTherapy?: fhir.IMedicinalProductIndicationOtherTherapy[]|undefined;
  /**
   * The population group to which this applies.
   */
  population?: fhir.IPopulation[]|undefined;
  /**
   * The medication for which this is an indication.
   */
  subject?: fhir.IReference[]|undefined;
  /**
   * Describe the undesirable effects of the medicinal product.
   */
  undesirableEffect?: fhir.IReference[]|undefined;
}
/**
 * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
 */
export class MedicinalProductIndicationOtherTherapy extends fhir.BackboneElement implements fhir.IMedicinalProductIndicationOtherTherapy {
  /**
   * Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication.
   */
  public medicationCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication.
   */
  public medicationReference?: fhir.Reference|undefined;
  /**
   * The type of relationship between the medicinal product indication or contraindication and another therapy.
   */
  public therapyRelationshipType: fhir.CodeableConcept|null;
  /**
   * Default constructor for MedicinalProductIndicationOtherTherapy - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedicinalProductIndicationOtherTherapy> = {}) {
    super(source);
    if (source["medicationCodeableConcept"]) { this.medicationCodeableConcept = new fhir.CodeableConcept(source.medicationCodeableConcept!); }
    if (source["medicationReference"]) { this.medicationReference = new fhir.Reference(source.medicationReference!); }
    this.therapyRelationshipType = null;
    if (source["therapyRelationshipType"]) { this.therapyRelationshipType = new fhir.CodeableConcept(source.therapyRelationshipType!); }
    if (this.therapyRelationshipType === undefined) { this.therapyRelationshipType = null }
  }
  /**
   * Check if the current MedicinalProductIndicationOtherTherapy contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["therapyRelationshipType"] === undefined) { missingElements.push("therapyRelationshipType"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a MedicinalProductIndicationOtherTherapy from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IMedicinalProductIndicationOtherTherapy):MedicinalProductIndicationOtherTherapy {
    var dest:MedicinalProductIndicationOtherTherapy = new MedicinalProductIndicationOtherTherapy(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `MedicinalProductIndicationOtherTherapy is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Indication for the Medicinal Product.
 */
export class MedicinalProductIndication extends fhir.DomainResource implements fhir.IMedicinalProductIndication {
  /**
   * Resource Type Name
   */
  public override resourceType: "MedicinalProductIndication";
  /**
   * Comorbidity (concurrent condition) or co-infection as part of the indication.
   */
  public comorbidity?: fhir.CodeableConcept[]|undefined;
  /**
   * The status of the disease or symptom for which the indication applies.
   */
  public diseaseStatus?: fhir.CodeableConcept|undefined;
  /**
   * The disease, symptom or procedure that is the indication for treatment.
   */
  public diseaseSymptomProcedure?: fhir.CodeableConcept|undefined;
  /**
   * Timing or duration information as part of the indication.
   */
  public duration?: fhir.Quantity|undefined;
  /**
   * The intended effect, aim or strategy to be achieved by the indication.
   */
  public intendedEffect?: fhir.CodeableConcept|undefined;
  /**
   * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
   */
  public otherTherapy?: fhir.MedicinalProductIndicationOtherTherapy[]|undefined;
  /**
   * The population group to which this applies.
   */
  public population?: fhir.Population[]|undefined;
  /**
   * The medication for which this is an indication.
   */
  public subject?: fhir.Reference[]|undefined;
  /**
   * Describe the undesirable effects of the medicinal product.
   */
  public undesirableEffect?: fhir.Reference[]|undefined;
  /**
   * Default constructor for MedicinalProductIndication - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedicinalProductIndication> = {}) {
    super(source);
    this.resourceType = 'MedicinalProductIndication';
    if (source["comorbidity"]) { this.comorbidity = source.comorbidity.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["diseaseStatus"]) { this.diseaseStatus = new fhir.CodeableConcept(source.diseaseStatus!); }
    if (source["diseaseSymptomProcedure"]) { this.diseaseSymptomProcedure = new fhir.CodeableConcept(source.diseaseSymptomProcedure!); }
    if (source["duration"]) { this.duration = new fhir.Quantity(source.duration!); }
    if (source["intendedEffect"]) { this.intendedEffect = new fhir.CodeableConcept(source.intendedEffect!); }
    if (source["otherTherapy"]) { this.otherTherapy = source.otherTherapy.map((x:Partial<fhir.IMedicinalProductIndicationOtherTherapy>) => new fhir.MedicinalProductIndicationOtherTherapy(x)); }
    if (source["population"]) { this.population = source.population.map((x:Partial<fhir.IPopulation>) => new fhir.Population(x)); }
    if (source["subject"]) { this.subject = source.subject.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["undesirableEffect"]) { this.undesirableEffect = source.undesirableEffect.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
  }
  /**
   * Check if the current MedicinalProductIndication contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a MedicinalProductIndication from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IMedicinalProductIndication):MedicinalProductIndication {
    var dest:MedicinalProductIndication = new MedicinalProductIndication(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `MedicinalProductIndication is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
