// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * A time period defined by a start and end date and optionally time.
 */
export type IPeriod = fhir.IFhirElement & {
  /**
   * The high value includes any matching date/time. i.e. 2012-02-03T10:00:00 is in a period that has an end value of 2012-02-03.
   */
  end?: string|undefined;
  _end?: fhir.IFhirElement|undefined;
  /**
   * If the low element is missing, the meaning is that the low boundary is not known.
   */
  start?: string|undefined;
  _start?: fhir.IFhirElement|undefined;
}
/**
 * A time period defined by a start and end date and optionally time.
 */
export class Period extends fhir.FhirElement implements fhir.IPeriod {
  /**
   * The high value includes any matching date/time. i.e. 2012-02-03T10:00:00 is in a period that has an end value of 2012-02-03.
   */
  public end?: string|undefined;
  public _end?: fhir.FhirElement|undefined;
  /**
   * If the low element is missing, the meaning is that the low boundary is not known.
   */
  public start?: string|undefined;
  public _start?: fhir.FhirElement|undefined;
  /**
   * Default constructor for Period - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IPeriod> = {}) {
    super(source);
    if (source["end"]) { this.end = source.end; }
    if (source["_end"]) { this._end = new fhir.FhirElement(source._end!); }
    if (source["start"]) { this.start = source.start; }
    if (source["_start"]) { this._start = new fhir.FhirElement(source._start!); }
  }
  /**
   * Check if the current Period contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a Period from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IPeriod):Period {
    var dest:Period = new Period(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `Period is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
