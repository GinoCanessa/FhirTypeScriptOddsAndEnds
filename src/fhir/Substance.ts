// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Substance

import * as fhir from '../fhir.js'

import { SubstanceCodeValueSet, SubstanceCodeValueSetType, SubstanceCodeValueSetEnum } from '../fhirValueSets/SubstanceCodeValueSet.js'
import { SubstanceStatusValueSet, SubstanceStatusValueSetType, SubstanceStatusValueSetEnum } from '../fhirValueSets/SubstanceStatusValueSet.js'
import { SubstanceCategoryValueSet, SubstanceCategoryValueSetType, SubstanceCategoryValueSetEnum } from '../fhirValueSets/SubstanceCategoryValueSet.js'

/**
 * Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.
 */
export type ISubstanceInstance = fhir.IBackboneElement & { 
  /**
   * Identifier associated with the package/container (usually a label affixed directly).
   */
  identifier?: fhir.IIdentifier|undefined;
  /**
   * When the substance is no longer valid to use. For some substances, a single arbitrary date is used for expiry.
   */
  expiry?: string|undefined;
  /**
   * Extended properties for primitive element: Substance.instance.expiry
   */
  _expiry?: fhir.IFhirElement|undefined;
  /**
   * The amount of the substance.
   */
  quantity?: fhir.IQuantity|undefined;
}

/**
 * A substance can be composed of other substances.
 */
export type ISubstanceIngredient = fhir.IBackboneElement & { 
  /**
   * The amount of the ingredient in the substance - a concentration ratio.
   */
  quantity?: fhir.IRatio|undefined;
  /**
   * Another substance that is a component of this substance.
   */
  substanceCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * Another substance that is a component of this substance.
   */
  substanceReference?: fhir.IReference|undefined;
}

/**
 * A homogeneous material with a definite composition.
 */
export type ISubstance = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "Substance";
  /**
   * This identifier is associated with the kind of substance in contrast to the  Substance.instance.identifier which is associated with the package/container.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * A code to indicate if the substance is actively used.
   */
  status?: SubstanceStatusValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: Substance.status
   */
  _status?: fhir.IFhirElement|undefined;
  /**
   * The level of granularity is defined by the category concepts in the value set.   More fine-grained filtering can be performed using the metadata and/or terminology hierarchy in Substance.code.
   */
  category?: fhir.ICodeableConcept[]|undefined;
  /**
   * This could be a reference to an externally defined code.  It could also be a locally assigned code (e.g. a formulary),  optionally with translations to the standard drug codes.
   */
  code: fhir.ICodeableConcept|null;
  /**
   * A description of the substance - its appearance, handling requirements, and other usage notes.
   */
  description?: string|undefined;
  /**
   * Extended properties for primitive element: Substance.description
   */
  _description?: fhir.IFhirElement|undefined;
  /**
   * Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.
   */
  instance?: fhir.ISubstanceInstance[]|undefined;
  /**
   * A substance can be composed of other substances.
   */
  ingredient?: fhir.ISubstanceIngredient[]|undefined;
}

/**
 * Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.
 */
export class SubstanceInstance extends fhir.BackboneElement implements ISubstanceInstance {
  /**
   * Identifier associated with the package/container (usually a label affixed directly).
   */
  public identifier?: fhir.Identifier|undefined;
  /**
   * When the substance is no longer valid to use. For some substances, a single arbitrary date is used for expiry.
   */
  public expiry?: string|undefined;
  /**
   * Extended properties for primitive element: Substance.instance.expiry
   */
  public _expiry?: fhir.FhirElement|undefined;
  /**
   * The amount of the substance.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * Default constructor for SubstanceInstance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISubstanceInstance> = { }) {
    super(source);
    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier!); }
    if (source['expiry']) { this.expiry = source.expiry; }
    if (source['_expiry']) { this._expiry = new fhir.FhirElement(source._expiry!); }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["identifier"]) { results.push(...this.identifier.doModelValidation()); }
    if (this["_expiry"]) { results.push(...this._expiry.doModelValidation()); }
    if (this["quantity"]) { results.push(...this.quantity.doModelValidation()); }
    return results;
  }
}

/**
 * A substance can be composed of other substances.
 */
export class SubstanceIngredient extends fhir.BackboneElement implements ISubstanceIngredient {
  /**
   * The amount of the ingredient in the substance - a concentration ratio.
   */
  public quantity?: fhir.Ratio|undefined;
  /**
   * Another substance that is a component of this substance.
   */
  public substanceCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * Another substance that is a component of this substance.
   */
  public substanceReference?: fhir.Reference|undefined;
  /**
   * Default constructor for SubstanceIngredient - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISubstanceIngredient> = { }) {
    super(source);
    if (source['quantity']) { this.quantity = new fhir.Ratio(source.quantity!); }
    if (source['substanceCodeableConcept']) { this.substanceCodeableConcept = new fhir.CodeableConcept(source.substanceCodeableConcept!); }
    if (source['substanceReference']) { this.substanceReference = new fhir.Reference(source.substanceReference!); }
  }
  /**
   * Example-bound Value Set for substanceCodeableConcept
   */
  public static substanceCodeableConceptExampleValueSet():SubstanceCodeValueSetType {
    return SubstanceCodeValueSet;
  }
  /**
   * Example-bound Value Set for substanceReference
   */
  public static substanceReferenceExampleValueSet():SubstanceCodeValueSetType {
    return SubstanceCodeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["quantity"]) { results.push(...this.quantity.doModelValidation()); }
    if (this["substanceCodeableConcept"]) { results.push(...this.substanceCodeableConcept.doModelValidation()); }
    if (this["substanceReference"]) { results.push(...this.substanceReference.doModelValidation()); }
    return results;
  }
}

/**
 * A homogeneous material with a definite composition.
 */
export class Substance extends fhir.DomainResource implements ISubstance {
  /**
   * Resource Type Name
   */
  public resourceType: "Substance";
  /**
   * This identifier is associated with the kind of substance in contrast to the  Substance.instance.identifier which is associated with the package/container.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * A code to indicate if the substance is actively used.
   */
  public status?: SubstanceStatusValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: Substance.status
   */
  public _status?: fhir.FhirElement|undefined;
  /**
   * The level of granularity is defined by the category concepts in the value set.   More fine-grained filtering can be performed using the metadata and/or terminology hierarchy in Substance.code.
   */
  public category?: fhir.CodeableConcept[]|undefined;
  /**
   * This could be a reference to an externally defined code.  It could also be a locally assigned code (e.g. a formulary),  optionally with translations to the standard drug codes.
   */
  public code: fhir.CodeableConcept|null;
  /**
   * A description of the substance - its appearance, handling requirements, and other usage notes.
   */
  public description?: string|undefined;
  /**
   * Extended properties for primitive element: Substance.description
   */
  public _description?: fhir.FhirElement|undefined;
  /**
   * Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.
   */
  public instance?: fhir.SubstanceInstance[]|undefined;
  /**
   * A substance can be composed of other substances.
   */
  public ingredient?: fhir.SubstanceIngredient[]|undefined;
  /**
   * Default constructor for Substance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISubstance> = { }) {
    super(source);
    this.resourceType = 'Substance';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['status']) { this.status = source.status; }
    if (source['_status']) { this._status = new fhir.FhirElement(source._status!); }
    if (source['category']) { this.category = source.category.map((x) => new fhir.CodeableConcept(x)); }
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code!); }
    else { this.code = null; }
    if (source['description']) { this.description = source.description; }
    if (source['_description']) { this._description = new fhir.FhirElement(source._description!); }
    if (source['instance']) { this.instance = source.instance.map((x) => new fhir.SubstanceInstance(x)); }
    if (source['ingredient']) { this.ingredient = source.ingredient.map((x) => new fhir.SubstanceIngredient(x)); }
  }
  /**
   * Required-bound Value Set for status
   */
  public static statusRequiredValueSet():SubstanceStatusValueSetType {
    return SubstanceStatusValueSet;
  }
  /**
   * Extensible-bound Value Set for category
   */
  public static categoryExtensibleValueSet():SubstanceCategoryValueSetType {
    return SubstanceCategoryValueSet;
  }
  /**
   * Example-bound Value Set for code
   */
  public static codeExampleValueSet():SubstanceCodeValueSetType {
    return SubstanceCodeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: Substance.resourceType']); }
    if (this["identifier"]) { this.identifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_status"]) { results.push(...this._status.doModelValidation()); }
    if (this["category"]) { this.category.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (!this["code"]) { results.push(["code",'Missing required element: Substance.code']); }
    if (this["code"]) { results.push(...this.code.doModelValidation()); }
    if (this["_description"]) { results.push(...this._description.doModelValidation()); }
    if (this["instance"]) { this.instance.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["ingredient"]) { this.ingredient.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}
