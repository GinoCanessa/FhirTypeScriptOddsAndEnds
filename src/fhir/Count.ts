// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
 */
export type ICount = fhir.IQuantity & {
}
/**
 * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
 */
export class Count extends fhir.Quantity implements fhir.ICount {
  /**
   * Default constructor for Count - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.ICount> = {}) {
    super(source);
  }
  /**
   * Check if the current Count contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a Count from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.ICount):Count {
    var dest:Count = new Count(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `Count is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
