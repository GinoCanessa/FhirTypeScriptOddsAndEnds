// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Reference range of possible or expected values.
 */
export type ISubstanceAmountReferenceRange = fhir.IFhirElement & {
  /**
   * Upper limit possible or expected.
   */
  highLimit?: fhir.IQuantity|undefined;
  /**
   * Lower limit possible or expected.
   */
  lowLimit?: fhir.IQuantity|undefined;
}
/**
 * Chemical substances are a single substance type whose primary defining element is the molecular structure. Chemical substances shall be defined on the basis of their complete covalent molecular structure; the presence of a salt (counter-ion) and/or solvates (water, alcohols) is also captured. Purity, grade, physical form or particle size are not taken into account in the definition of a chemical substance or in the assignment of a Substance ID.
 */
export type ISubstanceAmount = fhir.IBackboneElement & {
  /**
   * Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
   */
  amountQuantity?: fhir.IQuantity|undefined;
  /**
   * Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
   */
  amountRange?: fhir.IRange|undefined;
  /**
   * Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
   */
  amountString?: string|undefined;
  _amountString?: fhir.IFhirElement|undefined;
  /**
   * A textual comment on a numeric value.
   */
  amountText?: string|undefined;
  _amountText?: fhir.IFhirElement|undefined;
  /**
   * Most elements that require a quantitative value will also have a field called amount type. Amount type should always be specified because the actual value of the amount is often dependent on it. EXAMPLE: In capturing the actual relative amounts of substances or molecular fragments it is essential to indicate whether the amount refers to a mole ratio or weight ratio. For any given element an effort should be made to use same the amount type for all related definitional elements.
   */
  amountType?: fhir.ICodeableConcept|undefined;
  /**
   * Reference range of possible or expected values.
   */
  referenceRange?: fhir.ISubstanceAmountReferenceRange|undefined;
}
/**
 * Reference range of possible or expected values.
 */
export class SubstanceAmountReferenceRange extends fhir.FhirElement implements fhir.ISubstanceAmountReferenceRange {
  /**
   * Upper limit possible or expected.
   */
  public highLimit?: fhir.Quantity|undefined;
  /**
   * Lower limit possible or expected.
   */
  public lowLimit?: fhir.Quantity|undefined;
  /**
   * Default constructor for SubstanceAmountReferenceRange - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.ISubstanceAmountReferenceRange> = {}) {
    super(source);
    if (source["highLimit"]) { this.highLimit = new fhir.Quantity(source.highLimit!); }
    if (source["lowLimit"]) { this.lowLimit = new fhir.Quantity(source.lowLimit!); }
  }
  /**
   * Check if the current SubstanceAmountReferenceRange contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a SubstanceAmountReferenceRange from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.ISubstanceAmountReferenceRange):SubstanceAmountReferenceRange {
    var dest:SubstanceAmountReferenceRange = new SubstanceAmountReferenceRange(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `SubstanceAmountReferenceRange is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Chemical substances are a single substance type whose primary defining element is the molecular structure. Chemical substances shall be defined on the basis of their complete covalent molecular structure; the presence of a salt (counter-ion) and/or solvates (water, alcohols) is also captured. Purity, grade, physical form or particle size are not taken into account in the definition of a chemical substance or in the assignment of a Substance ID.
 */
export class SubstanceAmount extends fhir.BackboneElement implements fhir.ISubstanceAmount {
  /**
   * Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
   */
  public amountQuantity?: fhir.Quantity|undefined;
  /**
   * Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
   */
  public amountRange?: fhir.Range|undefined;
  /**
   * Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
   */
  public amountString?: string|undefined;
  public _amountString?: fhir.FhirElement|undefined;
  /**
   * A textual comment on a numeric value.
   */
  public amountText?: string|undefined;
  public _amountText?: fhir.FhirElement|undefined;
  /**
   * Most elements that require a quantitative value will also have a field called amount type. Amount type should always be specified because the actual value of the amount is often dependent on it. EXAMPLE: In capturing the actual relative amounts of substances or molecular fragments it is essential to indicate whether the amount refers to a mole ratio or weight ratio. For any given element an effort should be made to use same the amount type for all related definitional elements.
   */
  public amountType?: fhir.CodeableConcept|undefined;
  /**
   * Reference range of possible or expected values.
   */
  public referenceRange?: fhir.SubstanceAmountReferenceRange|undefined;
  /**
   * Default constructor for SubstanceAmount - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.ISubstanceAmount> = {}) {
    super(source);
    if (source["amountQuantity"]) { this.amountQuantity = new fhir.Quantity(source.amountQuantity!); }
    if (source["amountRange"]) { this.amountRange = new fhir.Range(source.amountRange!); }
    if (source["amountString"]) { this.amountString = source.amountString; }
    if (source["_amountString"]) { this._amountString = new fhir.FhirElement(source._amountString!); }
    if (source["amountText"]) { this.amountText = source.amountText; }
    if (source["_amountText"]) { this._amountText = new fhir.FhirElement(source._amountText!); }
    if (source["amountType"]) { this.amountType = new fhir.CodeableConcept(source.amountType!); }
    if (source["referenceRange"]) { this.referenceRange = new fhir.SubstanceAmountReferenceRange(source.referenceRange!); }
  }
  /**
   * Check if the current SubstanceAmount contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a SubstanceAmount from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.ISubstanceAmount):SubstanceAmount {
    var dest:SubstanceAmount = new SubstanceAmount(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `SubstanceAmount is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
