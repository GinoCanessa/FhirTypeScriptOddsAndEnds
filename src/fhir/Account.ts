// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Account

import * as fhir from '../fhir.js';

import { AccountStatusValueSet, AccountStatusValueSetType,} from '../fhirValueSets/AccountStatusValueSet.js';
import { AccountStatusValueSetEnum } from '../valueSetEnums.js';
import { AccountTypeValueSet, AccountTypeValueSetType,} from '../fhirValueSets/AccountTypeValueSet.js';
import { AccountTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Valid arguments for the AccountCoverage type.
 */
export interface AccountCoverageArgs extends fhir.BackboneElementArgs {
  /**
   * The party(s) that contribute to payment (or part of) of the charges applied to this account (including self-pay).
   * A coverage may only be responsible for specific types of charges, and the sequence of the coverages in the account could be important when processing billing.
   */
  coverage: fhir.ReferenceArgs|null;
  /**
   * It is common in some jurisdictions for there to be multiple coverages allocated to an account, and a sequence is required to order the settling of the account (often with insurance claiming).
   */
  priority?: fhir.FhirPositiveInt|number|undefined;
}

/**
 * Typically. this may be some form of insurance, internal charges, or self-pay.
 * Local or jurisdictional business rules may determine which coverage covers which types of billable items charged to the account, and in which order.
 * Where the order is important, a local/jurisdictional extension may be defined to specify the order for the type of charge.
 */
export class AccountCoverage extends fhir.BackboneElement {
  readonly __dataType:string = 'AccountCoverage';
  /**
   * The party(s) that contribute to payment (or part of) of the charges applied to this account (including self-pay).
   * A coverage may only be responsible for specific types of charges, and the sequence of the coverages in the account could be important when processing billing.
   */
  public coverage: fhir.Reference|null;
  /**
   * It is common in some jurisdictions for there to be multiple coverages allocated to an account, and a sequence is required to order the settling of the account (often with insurance claiming).
   */
  public priority?: fhir.FhirPositiveInt|undefined;
  /**
   * Default constructor for AccountCoverage - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<AccountCoverageArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['coverage']) { this.coverage = new fhir.Reference(source.coverage); }
    else { this.coverage = null; }
    if (source['priority']) { this.priority = new fhir.FhirPositiveInt({value: source.priority}); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['coverage']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property coverage:fhir.Reference fhir: Account.coverage.coverage:Reference", }));
    }
    if (this["coverage"]) { outcome.issue!.push(...this.coverage.doModelValidation().issue!); }
    if (this["priority"]) { outcome.issue!.push(...this.priority.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the AccountGuarantor type.
 */
export interface AccountGuarantorArgs extends fhir.BackboneElementArgs {
  /**
   * The entity who is responsible.
   */
  party: fhir.ReferenceArgs|null;
  /**
   * A guarantor may be placed on credit hold or otherwise have their role temporarily suspended.
   */
  onHold?: fhir.FhirBoolean|boolean|undefined;
  /**
   * The timeframe during which the guarantor accepts responsibility for the account.
   */
  period?: fhir.PeriodArgs|undefined;
}

/**
 * The parties responsible for balancing the account if other payment options fall short.
 */
export class AccountGuarantor extends fhir.BackboneElement {
  readonly __dataType:string = 'AccountGuarantor';
  /**
   * The entity who is responsible.
   */
  public party: fhir.Reference|null;
  /**
   * A guarantor may be placed on credit hold or otherwise have their role temporarily suspended.
   */
  public onHold?: fhir.FhirBoolean|undefined;
  /**
   * The timeframe during which the guarantor accepts responsibility for the account.
   */
  public period?: fhir.Period|undefined;
  /**
   * Default constructor for AccountGuarantor - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<AccountGuarantorArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['party']) { this.party = new fhir.Reference(source.party); }
    else { this.party = null; }
    if (source['onHold']) { this.onHold = new fhir.FhirBoolean({value: source.onHold}); }
    if (source['period']) { this.period = new fhir.Period(source.period); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['party']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property party:fhir.Reference fhir: Account.guarantor.party:Reference", }));
    }
    if (this["party"]) { outcome.issue!.push(...this.party.doModelValidation().issue!); }
    if (this["onHold"]) { outcome.issue!.push(...this.onHold.doModelValidation().issue!); }
    if (this["period"]) { outcome.issue!.push(...this.period.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the Account type.
 */
export interface AccountArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "Account"|undefined;
  /**
   * Unique identifier used to reference the account.  Might or might not be intended for human use (e.g. credit card number).
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains the codes inactive and entered-in-error that mark the Account as not currently valid.
   */
  status: AccountStatusValueSetEnum|null;
  /**
   * Categorizes the account for reporting and searching purposes.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * Name used for the account when displaying it to humans in reports, etc.
   */
  name?: fhir.FhirString|string|undefined;
  /**
   * Accounts can be applied to non-patients for tracking other non-patient related activities, such as group services (patients not tracked, and costs charged to another body), or might not be allocated.
   */
  subject?: fhir.ReferenceArgs[]|undefined;
  /**
   * It is possible for transactions to be posted outside the service period, as long as the service was provided within the defined service period.
   */
  servicePeriod?: fhir.PeriodArgs|undefined;
  /**
   * Typically. this may be some form of insurance, internal charges, or self-pay.
   * Local or jurisdictional business rules may determine which coverage covers which types of billable items charged to the account, and in which order.
   * Where the order is important, a local/jurisdictional extension may be defined to specify the order for the type of charge.
   */
  coverage?: fhir.AccountCoverageArgs[]|undefined;
  /**
   * Indicates the service area, hospital, department, etc. with responsibility for managing the Account.
   */
  owner?: fhir.ReferenceArgs|undefined;
  /**
   * Provides additional information about what the account tracks and how it is used.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * The parties responsible for balancing the account if other payment options fall short.
   */
  guarantor?: fhir.AccountGuarantorArgs[]|undefined;
  /**
   * Reference to a parent Account.
   */
  partOf?: fhir.ReferenceArgs|undefined;
}

/**
 * A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.
 */
export class Account extends fhir.DomainResource {
  readonly __dataType:string = 'Account';
  /**
   * Resource Type Name
   */
  public resourceType: "Account";
  /**
   * Unique identifier used to reference the account.  Might or might not be intended for human use (e.g. credit card number).
   */
  public identifier?: fhir.Identifier[]|undefined = [];
  /**
   * This element is labeled as a modifier because the status contains the codes inactive and entered-in-error that mark the Account as not currently valid.
   */
  public status: AccountStatusValueSetEnum|null;
  /**
   * Categorizes the account for reporting and searching purposes.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Name used for the account when displaying it to humans in reports, etc.
   */
  public name?: fhir.FhirString|undefined;
  /**
   * Accounts can be applied to non-patients for tracking other non-patient related activities, such as group services (patients not tracked, and costs charged to another body), or might not be allocated.
   */
  public subject?: fhir.Reference[]|undefined = [];
  /**
   * It is possible for transactions to be posted outside the service period, as long as the service was provided within the defined service period.
   */
  public servicePeriod?: fhir.Period|undefined;
  /**
   * Typically. this may be some form of insurance, internal charges, or self-pay.
   * Local or jurisdictional business rules may determine which coverage covers which types of billable items charged to the account, and in which order.
   * Where the order is important, a local/jurisdictional extension may be defined to specify the order for the type of charge.
   */
  public coverage?: fhir.AccountCoverage[]|undefined = [];
  /**
   * Indicates the service area, hospital, department, etc. with responsibility for managing the Account.
   */
  public owner?: fhir.Reference|undefined;
  /**
   * Provides additional information about what the account tracks and how it is used.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * The parties responsible for balancing the account if other payment options fall short.
   */
  public guarantor?: fhir.AccountGuarantor[]|undefined = [];
  /**
   * Reference to a parent Account.
   */
  public partOf?: fhir.Reference|undefined;
  /**
   * Default constructor for Account - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<AccountArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'Account';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['status']) { this.status = source.status; }
    else { this.status = null; }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }
    if (source['subject']) { this.subject = source.subject.map((x) => new fhir.Reference(x)); }
    if (source['servicePeriod']) { this.servicePeriod = new fhir.Period(source.servicePeriod); }
    if (source['coverage']) { this.coverage = source.coverage.map((x) => new fhir.AccountCoverage(x)); }
    if (source['owner']) { this.owner = new fhir.Reference(source.owner); }
    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }
    if (source['guarantor']) { this.guarantor = source.guarantor.map((x) => new fhir.AccountGuarantor(x)); }
    if (source['partOf']) { this.partOf = new fhir.Reference(source.partOf); }
  }
  /**
   * Required-bound Value Set for status
   */
  public static statusRequiredValueSet():AccountStatusValueSetType {
    return AccountStatusValueSet;
  }
  /**
   * Example-bound Value Set for type
   */
  public static typeExampleValueSet():AccountTypeValueSetType {
    return AccountTypeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['resourceType']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property resourceType:'Account' fhir: Account.resourceType:'Account'", }));
    }
    if (this["identifier"]) { this.identifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (!this['status']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property status:AccountStatusValueSetEnum fhir: Account.status:code", }));
    }
    if (this["type"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }
    if (this["name"]) { outcome.issue!.push(...this.name.doModelValidation().issue!); }
    if (this["subject"]) { this.subject.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["servicePeriod"]) { outcome.issue!.push(...this.servicePeriod.doModelValidation().issue!); }
    if (this["coverage"]) { this.coverage.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["owner"]) { outcome.issue!.push(...this.owner.doModelValidation().issue!); }
    if (this["description"]) { outcome.issue!.push(...this.description.doModelValidation().issue!); }
    if (this["guarantor"]) { this.guarantor.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["partOf"]) { outcome.issue!.push(...this.partOf.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
