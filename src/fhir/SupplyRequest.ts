// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SupplyRequest

import * as fhir from '../fhir.js'

import { SupplyrequestStatusValueSet, SupplyrequestStatusValueSetType, SupplyrequestStatusValueSetEnum } from '../fhirValueSets/SupplyrequestStatusValueSet.js'
import { SupplyrequestKindValueSet, SupplyrequestKindValueSetType, SupplyrequestKindValueSetEnum } from '../fhirValueSets/SupplyrequestKindValueSet.js'
import { RequestPriorityValueSet, RequestPriorityValueSetType, RequestPriorityValueSetEnum } from '../fhirValueSets/RequestPriorityValueSet.js'
import { SupplyItemValueSet, SupplyItemValueSetType, SupplyItemValueSetEnum } from '../fhirValueSets/SupplyItemValueSet.js'
import { SupplyrequestReasonValueSet, SupplyrequestReasonValueSetType, SupplyrequestReasonValueSetEnum } from '../fhirValueSets/SupplyrequestReasonValueSet.js'

/**
 * Specific parameters for the ordered item.  For example, the size of the indicated item.
 */
export type ISupplyRequestParameter = fhir.IBackboneElement & { 
  /**
   * A code or string that identifies the device detail being asserted.
   */
  code?: fhir.ICodeableConcept|undefined;
  /**
   * Range means device should have a value that falls somewhere within the specified range.
   */
  valueCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * Range means device should have a value that falls somewhere within the specified range.
   */
  valueQuantity?: fhir.IQuantity|undefined;
  /**
   * Range means device should have a value that falls somewhere within the specified range.
   */
  valueRange?: fhir.IRange|undefined;
  /**
   * Range means device should have a value that falls somewhere within the specified range.
   */
  valueBoolean?: boolean|undefined;
  /**
   * Extended properties for primitive element: SupplyRequest.parameter.value[x]
   */
  _valueBoolean?: fhir.IFhirElement|undefined;
}

/**
 * A record of a request for a medication, substance or device used in the healthcare setting.
 */
export type ISupplyRequest = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "SupplyRequest";
  /**
   * The identifier.type element is used to distinguish between the identifiers assigned by the requester/placer and the performer/filler.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * Status of the supply request.
   */
  status?: SupplyrequestStatusValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: SupplyRequest.status
   */
  _status?: fhir.IFhirElement|undefined;
  /**
   * Category of supply, e.g.  central, non-stock, etc. This is used to support work flows associated with the supply process.
   */
  category?: fhir.ICodeableConcept|undefined;
  /**
   * Indicates how quickly this SupplyRequest should be addressed with respect to other requests.
   */
  priority?: RequestPriorityValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: SupplyRequest.priority
   */
  _priority?: fhir.IFhirElement|undefined;
  /**
   * Note that there's a difference between a prescription - an instruction to take a medication, along with a (sometimes) implicit supply, and an explicit request to supply, with no explicit instructions.
   */
  itemCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * Note that there's a difference between a prescription - an instruction to take a medication, along with a (sometimes) implicit supply, and an explicit request to supply, with no explicit instructions.
   */
  itemReference?: fhir.IReference|undefined;
  /**
   * The amount that is being ordered of the indicated item.
   */
  quantity: fhir.IQuantity|null;
  /**
   * Specific parameters for the ordered item.  For example, the size of the indicated item.
   */
  parameter?: fhir.ISupplyRequestParameter[]|undefined;
  /**
   * When the request should be fulfilled.
   */
  occurrenceDateTime?: string|undefined;
  /**
   * Extended properties for primitive element: SupplyRequest.occurrence[x]
   */
  _occurrenceDateTime?: fhir.IFhirElement|undefined;
  /**
   * When the request should be fulfilled.
   */
  occurrencePeriod?: fhir.IPeriod|undefined;
  /**
   * When the request should be fulfilled.
   */
  occurrenceTiming?: fhir.ITiming|undefined;
  /**
   * When the request was made.
   */
  authoredOn?: string|undefined;
  /**
   * Extended properties for primitive element: SupplyRequest.authoredOn
   */
  _authoredOn?: fhir.IFhirElement|undefined;
  /**
   * The device, practitioner, etc. who initiated the request.
   */
  requester?: fhir.IReference|undefined;
  /**
   * Who is intended to fulfill the request.
   */
  supplier?: fhir.IReference[]|undefined;
  /**
   * The reason why the supply item was requested.
   */
  reasonCode?: fhir.ICodeableConcept[]|undefined;
  /**
   * The reason why the supply item was requested.
   */
  reasonReference?: fhir.IReference[]|undefined;
  /**
   * Where the supply is expected to come from.
   */
  deliverFrom?: fhir.IReference|undefined;
  /**
   * Where the supply is destined to go.
   */
  deliverTo?: fhir.IReference|undefined;
}

/**
 * Specific parameters for the ordered item.  For example, the size of the indicated item.
 */
export class SupplyRequestParameter extends fhir.BackboneElement implements ISupplyRequestParameter {
  /**
   * A code or string that identifies the device detail being asserted.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * Range means device should have a value that falls somewhere within the specified range.
   */
  public valueCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * Range means device should have a value that falls somewhere within the specified range.
   */
  public valueQuantity?: fhir.Quantity|undefined;
  /**
   * Range means device should have a value that falls somewhere within the specified range.
   */
  public valueRange?: fhir.Range|undefined;
  /**
   * Range means device should have a value that falls somewhere within the specified range.
   */
  public valueBoolean?: boolean|undefined;
  /**
   * Extended properties for primitive element: SupplyRequest.parameter.value[x]
   */
  public _valueBoolean?: fhir.FhirElement|undefined;
  /**
   * Default constructor for SupplyRequestParameter - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISupplyRequestParameter> = { }) {
    super(source);
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code!); }
    if (source['valueCodeableConcept']) { this.valueCodeableConcept = new fhir.CodeableConcept(source.valueCodeableConcept!); }
    if (source['valueQuantity']) { this.valueQuantity = new fhir.Quantity(source.valueQuantity!); }
    if (source['valueRange']) { this.valueRange = new fhir.Range(source.valueRange!); }
    if (source['valueBoolean']) { this.valueBoolean = source.valueBoolean; }
    if (source['_valueBoolean']) { this._valueBoolean = new fhir.FhirElement(source._valueBoolean!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["code"]) { results.push(...this.code.doModelValidation()); }
    if (this["valueCodeableConcept"]) { results.push(...this.valueCodeableConcept.doModelValidation()); }
    if (this["valueQuantity"]) { results.push(...this.valueQuantity.doModelValidation()); }
    if (this["valueRange"]) { results.push(...this.valueRange.doModelValidation()); }
    if (this["_valueBoolean"]) { results.push(...this._valueBoolean.doModelValidation()); }
    return results;
  }
}

/**
 * A record of a request for a medication, substance or device used in the healthcare setting.
 */
export class SupplyRequest extends fhir.DomainResource implements ISupplyRequest {
  /**
   * Resource Type Name
   */
  public resourceType: "SupplyRequest";
  /**
   * The identifier.type element is used to distinguish between the identifiers assigned by the requester/placer and the performer/filler.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * Status of the supply request.
   */
  public status?: SupplyrequestStatusValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: SupplyRequest.status
   */
  public _status?: fhir.FhirElement|undefined;
  /**
   * Category of supply, e.g.  central, non-stock, etc. This is used to support work flows associated with the supply process.
   */
  public category?: fhir.CodeableConcept|undefined;
  /**
   * Indicates how quickly this SupplyRequest should be addressed with respect to other requests.
   */
  public priority?: RequestPriorityValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: SupplyRequest.priority
   */
  public _priority?: fhir.FhirElement|undefined;
  /**
   * Note that there's a difference between a prescription - an instruction to take a medication, along with a (sometimes) implicit supply, and an explicit request to supply, with no explicit instructions.
   */
  public itemCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * Note that there's a difference between a prescription - an instruction to take a medication, along with a (sometimes) implicit supply, and an explicit request to supply, with no explicit instructions.
   */
  public itemReference?: fhir.Reference|undefined;
  /**
   * The amount that is being ordered of the indicated item.
   */
  public quantity: fhir.Quantity|null;
  /**
   * Specific parameters for the ordered item.  For example, the size of the indicated item.
   */
  public parameter?: fhir.SupplyRequestParameter[]|undefined;
  /**
   * When the request should be fulfilled.
   */
  public occurrenceDateTime?: string|undefined;
  /**
   * Extended properties for primitive element: SupplyRequest.occurrence[x]
   */
  public _occurrenceDateTime?: fhir.FhirElement|undefined;
  /**
   * When the request should be fulfilled.
   */
  public occurrencePeriod?: fhir.Period|undefined;
  /**
   * When the request should be fulfilled.
   */
  public occurrenceTiming?: fhir.Timing|undefined;
  /**
   * When the request was made.
   */
  public authoredOn?: string|undefined;
  /**
   * Extended properties for primitive element: SupplyRequest.authoredOn
   */
  public _authoredOn?: fhir.FhirElement|undefined;
  /**
   * The device, practitioner, etc. who initiated the request.
   */
  public requester?: fhir.Reference|undefined;
  /**
   * Who is intended to fulfill the request.
   */
  public supplier?: fhir.Reference[]|undefined;
  /**
   * The reason why the supply item was requested.
   */
  public reasonCode?: fhir.CodeableConcept[]|undefined;
  /**
   * The reason why the supply item was requested.
   */
  public reasonReference?: fhir.Reference[]|undefined;
  /**
   * Where the supply is expected to come from.
   */
  public deliverFrom?: fhir.Reference|undefined;
  /**
   * Where the supply is destined to go.
   */
  public deliverTo?: fhir.Reference|undefined;
  /**
   * Default constructor for SupplyRequest - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISupplyRequest> = { }) {
    super(source);
    this.resourceType = 'SupplyRequest';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['status']) { this.status = source.status; }
    if (source['_status']) { this._status = new fhir.FhirElement(source._status!); }
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category!); }
    if (source['priority']) { this.priority = source.priority; }
    if (source['_priority']) { this._priority = new fhir.FhirElement(source._priority!); }
    if (source['itemCodeableConcept']) { this.itemCodeableConcept = new fhir.CodeableConcept(source.itemCodeableConcept!); }
    if (source['itemReference']) { this.itemReference = new fhir.Reference(source.itemReference!); }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity!); }
    else { this.quantity = null; }
    if (source['parameter']) { this.parameter = source.parameter.map((x) => new fhir.SupplyRequestParameter(x)); }
    if (source['occurrenceDateTime']) { this.occurrenceDateTime = source.occurrenceDateTime; }
    if (source['_occurrenceDateTime']) { this._occurrenceDateTime = new fhir.FhirElement(source._occurrenceDateTime!); }
    if (source['occurrencePeriod']) { this.occurrencePeriod = new fhir.Period(source.occurrencePeriod!); }
    if (source['occurrenceTiming']) { this.occurrenceTiming = new fhir.Timing(source.occurrenceTiming!); }
    if (source['authoredOn']) { this.authoredOn = source.authoredOn; }
    if (source['_authoredOn']) { this._authoredOn = new fhir.FhirElement(source._authoredOn!); }
    if (source['requester']) { this.requester = new fhir.Reference(source.requester!); }
    if (source['supplier']) { this.supplier = source.supplier.map((x) => new fhir.Reference(x)); }
    if (source['reasonCode']) { this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x)); }
    if (source['reasonReference']) { this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x)); }
    if (source['deliverFrom']) { this.deliverFrom = new fhir.Reference(source.deliverFrom!); }
    if (source['deliverTo']) { this.deliverTo = new fhir.Reference(source.deliverTo!); }
  }
  /**
   * Required-bound Value Set for status
   */
  public statusRequiredValueSet():SupplyrequestStatusValueSetType {
    return SupplyrequestStatusValueSet;
  }
  /**
   * Example-bound Value Set for category
   */
  public categoryExampleValueSet():SupplyrequestKindValueSetType {
    return SupplyrequestKindValueSet;
  }
  /**
   * Required-bound Value Set for priority
   */
  public priorityRequiredValueSet():RequestPriorityValueSetType {
    return RequestPriorityValueSet;
  }
  /**
   * Example-bound Value Set for itemCodeableConcept
   */
  public itemCodeableConceptExampleValueSet():SupplyItemValueSetType {
    return SupplyItemValueSet;
  }
  /**
   * Example-bound Value Set for itemReference
   */
  public itemReferenceExampleValueSet():SupplyItemValueSetType {
    return SupplyItemValueSet;
  }
  /**
   * Example-bound Value Set for reasonCode
   */
  public reasonCodeExampleValueSet():SupplyrequestReasonValueSetType {
    return SupplyrequestReasonValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: SupplyRequest.resourceType']); }
    if (this["identifier"]) { this.identifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_status"]) { results.push(...this._status.doModelValidation()); }
    if (this["category"]) { results.push(...this.category.doModelValidation()); }
    if (this["_priority"]) { results.push(...this._priority.doModelValidation()); }
    if (this["itemCodeableConcept"]) { results.push(...this.itemCodeableConcept.doModelValidation()); }
    if (this["itemReference"]) { results.push(...this.itemReference.doModelValidation()); }
    if (!this["quantity"]) { results.push(["quantity",'Missing required element: SupplyRequest.quantity']); }
    if (this["quantity"]) { results.push(...this.quantity.doModelValidation()); }
    if (this["parameter"]) { this.parameter.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_occurrenceDateTime"]) { results.push(...this._occurrenceDateTime.doModelValidation()); }
    if (this["occurrencePeriod"]) { results.push(...this.occurrencePeriod.doModelValidation()); }
    if (this["occurrenceTiming"]) { results.push(...this.occurrenceTiming.doModelValidation()); }
    if (this["_authoredOn"]) { results.push(...this._authoredOn.doModelValidation()); }
    if (this["requester"]) { results.push(...this.requester.doModelValidation()); }
    if (this["supplier"]) { this.supplier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["reasonCode"]) { this.reasonCode.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["reasonReference"]) { this.reasonReference.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["deliverFrom"]) { results.push(...this.deliverFrom.doModelValidation()); }
    if (this["deliverTo"]) { results.push(...this.deliverTo.doModelValidation()); }
    return results;
  }
}
