// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SupplyRequest

import * as fhir from '../fhir.js';

import { SupplyrequestStatusValueSet, SupplyrequestStatusValueSetType,} from '../fhirValueSets/SupplyrequestStatusValueSet.js';
import { SupplyrequestStatusValueSetEnum } from '../valueSetEnums.js';
import { SupplyrequestKindValueSet, SupplyrequestKindValueSetType,} from '../fhirValueSets/SupplyrequestKindValueSet.js';
import { SupplyrequestKindValueSetEnum } from '../valueSetEnums.js';
import { RequestPriorityValueSet, RequestPriorityValueSetType,} from '../fhirValueSets/RequestPriorityValueSet.js';
import { RequestPriorityValueSetEnum } from '../valueSetEnums.js';
import { SupplyrequestReasonValueSet, SupplyrequestReasonValueSetType,} from '../fhirValueSets/SupplyrequestReasonValueSet.js';
import { SupplyrequestReasonValueSetEnum } from '../valueSetEnums.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Valid arguments for the SupplyRequestParameter type.
 */
export interface SupplyRequestParameterArgs extends fhir.BackboneElementArgs {
  /**
   * A code or string that identifies the device detail being asserted.
   */
  code?: fhir.CodeableConceptArgs|undefined;
  /**
   * Range means device should have a value that falls somewhere within the specified range.
   */
  value?: fhir.CodeableConcept|fhir.Quantity|fhir.Range|fhir.FhirBoolean|undefined;
  /**
   * Range means device should have a value that falls somewhere within the specified range.
   */
  valueCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * Range means device should have a value that falls somewhere within the specified range.
   */
  valueQuantity?: fhir.QuantityArgs|undefined;
  /**
   * Range means device should have a value that falls somewhere within the specified range.
   */
  valueRange?: fhir.RangeArgs|undefined;
  /**
   * Range means device should have a value that falls somewhere within the specified range.
   */
  valueBoolean?: fhir.FhirBoolean|boolean|undefined;
}

/**
 * Specific parameters for the ordered item.  For example, the size of the indicated item.
 */
export class SupplyRequestParameter extends fhir.BackboneElement {
  readonly __dataType:string = 'SupplyRequestParameter';
  /**
   * A code or string that identifies the device detail being asserted.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * Range means device should have a value that falls somewhere within the specified range.
   */
  public value?: (fhir.CodeableConcept|fhir.Quantity|fhir.Range|fhir.FhirBoolean)|undefined;
  readonly __valueIsChoice:true = true;
  /**
   * Default constructor for SupplyRequestParameter - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<SupplyRequestParameterArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }
    if (source['value']) { this.value = source.value; }
    else if (source['valueCodeableConcept']) { this.value = new fhir.CodeableConcept(source.valueCodeableConcept); }
    else if (source['valueQuantity']) { this.value = new fhir.Quantity(source.valueQuantity); }
    else if (source['valueRange']) { this.value = new fhir.Range(source.valueRange); }
    else if (source['valueBoolean']) { this.value = new fhir.FhirBoolean({value: source.valueBoolean}); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["code"]) { outcome.issue!.push(...this.code.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the SupplyRequest type.
 */
export interface SupplyRequestArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "SupplyRequest"|undefined;
  /**
   * The identifier.type element is used to distinguish between the identifiers assigned by the requester/placer and the performer/filler.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * Status of the supply request.
   */
  status?: SupplyrequestStatusValueSetEnum|undefined;
  /**
   * Category of supply, e.g.  central, non-stock, etc. This is used to support work flows associated with the supply process.
   */
  category?: fhir.CodeableConceptArgs|undefined;
  /**
   * Indicates how quickly this SupplyRequest should be addressed with respect to other requests.
   */
  priority?: RequestPriorityValueSetEnum|undefined;
  /**
   * Note that there's a difference between a prescription - an instruction to take a medication, along with a (sometimes) implicit supply, and an explicit request to supply, with no explicit instructions.
   */
  item?: fhir.CodeableConcept|fhir.Reference|undefined;
  /**
   * Note that there's a difference between a prescription - an instruction to take a medication, along with a (sometimes) implicit supply, and an explicit request to supply, with no explicit instructions.
   */
  itemCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * Note that there's a difference between a prescription - an instruction to take a medication, along with a (sometimes) implicit supply, and an explicit request to supply, with no explicit instructions.
   */
  itemReference?: fhir.ReferenceArgs|undefined;
  /**
   * The amount that is being ordered of the indicated item.
   */
  quantity: fhir.QuantityArgs|null;
  /**
   * Specific parameters for the ordered item.  For example, the size of the indicated item.
   */
  parameter?: fhir.SupplyRequestParameterArgs[]|undefined;
  /**
   * When the request should be fulfilled.
   */
  occurrence?: fhir.FhirDateTime|fhir.Period|fhir.Timing|undefined;
  /**
   * When the request should be fulfilled.
   */
  occurrenceDateTime?: fhir.FhirDateTime|string|undefined;
  /**
   * When the request should be fulfilled.
   */
  occurrencePeriod?: fhir.PeriodArgs|undefined;
  /**
   * When the request should be fulfilled.
   */
  occurrenceTiming?: fhir.TimingArgs|undefined;
  /**
   * When the request was made.
   */
  authoredOn?: fhir.FhirDateTime|string|undefined;
  /**
   * The device, practitioner, etc. who initiated the request.
   */
  requester?: fhir.ReferenceArgs|undefined;
  /**
   * Who is intended to fulfill the request.
   */
  supplier?: fhir.ReferenceArgs[]|undefined;
  /**
   * The reason why the supply item was requested.
   */
  reasonCode?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * The reason why the supply item was requested.
   */
  reasonReference?: fhir.ReferenceArgs[]|undefined;
  /**
   * Where the supply is expected to come from.
   */
  deliverFrom?: fhir.ReferenceArgs|undefined;
  /**
   * Where the supply is destined to go.
   */
  deliverTo?: fhir.ReferenceArgs|undefined;
}

/**
 * A record of a request for a medication, substance or device used in the healthcare setting.
 */
export class SupplyRequest extends fhir.DomainResource {
  readonly __dataType:string = 'SupplyRequest';
  /**
   * Resource Type Name
   */
  public resourceType: "SupplyRequest";
  /**
   * The identifier.type element is used to distinguish between the identifiers assigned by the requester/placer and the performer/filler.
   */
  public identifier?: fhir.Identifier[]|undefined = [];
  /**
   * Status of the supply request.
   */
  public status?: SupplyrequestStatusValueSetEnum|undefined;
  /**
   * Category of supply, e.g.  central, non-stock, etc. This is used to support work flows associated with the supply process.
   */
  public category?: fhir.CodeableConcept|undefined;
  /**
   * Indicates how quickly this SupplyRequest should be addressed with respect to other requests.
   */
  public priority?: RequestPriorityValueSetEnum|undefined;
  /**
   * Note that there's a difference between a prescription - an instruction to take a medication, along with a (sometimes) implicit supply, and an explicit request to supply, with no explicit instructions.
   */
  public item: (fhir.CodeableConcept|fhir.Reference)|null;
  readonly __itemIsChoice:true = true;
  /**
   * The amount that is being ordered of the indicated item.
   */
  public quantity: fhir.Quantity|null;
  /**
   * Specific parameters for the ordered item.  For example, the size of the indicated item.
   */
  public parameter?: fhir.SupplyRequestParameter[]|undefined = [];
  /**
   * When the request should be fulfilled.
   */
  public occurrence?: (fhir.FhirDateTime|fhir.Period|fhir.Timing)|undefined;
  readonly __occurrenceIsChoice:true = true;
  /**
   * When the request was made.
   */
  public authoredOn?: fhir.FhirDateTime|undefined;
  /**
   * The device, practitioner, etc. who initiated the request.
   */
  public requester?: fhir.Reference|undefined;
  /**
   * Who is intended to fulfill the request.
   */
  public supplier?: fhir.Reference[]|undefined = [];
  /**
   * The reason why the supply item was requested.
   */
  public reasonCode?: fhir.CodeableConcept[]|undefined = [];
  /**
   * The reason why the supply item was requested.
   */
  public reasonReference?: fhir.Reference[]|undefined = [];
  /**
   * Where the supply is expected to come from.
   */
  public deliverFrom?: fhir.Reference|undefined;
  /**
   * Where the supply is destined to go.
   */
  public deliverTo?: fhir.Reference|undefined;
  /**
   * Default constructor for SupplyRequest - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<SupplyRequestArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'SupplyRequest';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['status']) { this.status = source.status; }
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category); }
    if (source['priority']) { this.priority = source.priority; }
    if (source['item']) { this.item = source.item; }
    else if (source['itemCodeableConcept']) { this.item = new fhir.CodeableConcept(source.itemCodeableConcept); }
    else if (source['itemReference']) { this.item = new fhir.Reference(source.itemReference); }
    else { this.item = null; }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity); }
    else { this.quantity = null; }
    if (source['parameter']) { this.parameter = source.parameter.map((x) => new fhir.SupplyRequestParameter(x)); }
    if (source['occurrence']) { this.occurrence = source.occurrence; }
    else if (source['occurrenceDateTime']) { this.occurrence = new fhir.FhirDateTime({value: source.occurrenceDateTime}); }
    else if (source['occurrencePeriod']) { this.occurrence = new fhir.Period(source.occurrencePeriod); }
    else if (source['occurrenceTiming']) { this.occurrence = new fhir.Timing(source.occurrenceTiming); }
    if (source['authoredOn']) { this.authoredOn = new fhir.FhirDateTime({value: source.authoredOn}); }
    if (source['requester']) { this.requester = new fhir.Reference(source.requester); }
    if (source['supplier']) { this.supplier = source.supplier.map((x) => new fhir.Reference(x)); }
    if (source['reasonCode']) { this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x)); }
    if (source['reasonReference']) { this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x)); }
    if (source['deliverFrom']) { this.deliverFrom = new fhir.Reference(source.deliverFrom); }
    if (source['deliverTo']) { this.deliverTo = new fhir.Reference(source.deliverTo); }
  }
  /**
   * Required-bound Value Set for status
   */
  public static statusRequiredValueSet():SupplyrequestStatusValueSetType {
    return SupplyrequestStatusValueSet;
  }
  /**
   * Example-bound Value Set for category
   */
  public static categoryExampleValueSet():SupplyrequestKindValueSetType {
    return SupplyrequestKindValueSet;
  }
  /**
   * Required-bound Value Set for priority
   */
  public static priorityRequiredValueSet():RequestPriorityValueSetType {
    return RequestPriorityValueSet;
  }
  /**
   * Example-bound Value Set for reasonCode
   */
  public static reasonCodeExampleValueSet():SupplyrequestReasonValueSetType {
    return SupplyrequestReasonValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['resourceType']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property resourceType:'SupplyRequest' fhir: SupplyRequest.resourceType:'SupplyRequest'", }));
    }
    if (this["identifier"]) { this.identifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["category"]) { outcome.issue!.push(...this.category.doModelValidation().issue!); }
    if (!this['item']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property item: fhir: SupplyRequest.item[x]:", }));
    }
    if (!this['quantity']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property quantity:fhir.Quantity fhir: SupplyRequest.quantity:Quantity", }));
    }
    if (this["quantity"]) { outcome.issue!.push(...this.quantity.doModelValidation().issue!); }
    if (this["parameter"]) { this.parameter.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["authoredOn"]) { outcome.issue!.push(...this.authoredOn.doModelValidation().issue!); }
    if (this["requester"]) { outcome.issue!.push(...this.requester.doModelValidation().issue!); }
    if (this["supplier"]) { this.supplier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["reasonCode"]) { this.reasonCode.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["reasonReference"]) { this.reasonReference.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["deliverFrom"]) { outcome.issue!.push(...this.deliverFrom.doModelValidation().issue!); }
    if (this["deliverTo"]) { outcome.issue!.push(...this.deliverTo.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
