// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Link to a resource that concerns the same actual person.
 */
export type IPersonLink = fhir.IBackboneElement & {
  /**
   * Level of assurance that this link is associated with the target resource.
   */
  assurance?: PersonLinkAssuranceEnum|undefined;
  _assurance?: fhir.IFhirElement|undefined;
  /**
   * The resource to which this actual person is associated.
   */
  target: fhir.IReference|null;
}
/**
 * Demographics and administrative information about a person independent of a specific health-related context.
 */
export type IPerson = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "Person";
  /**
   * Whether this person's record is in active use.
   */
  active?: boolean|undefined;
  _active?: fhir.IFhirElement|undefined;
  /**
   * Person may have multiple addresses with different uses or applicable periods.
   */
  address?: fhir.IAddress[]|undefined;
  /**
   * At least an estimated year should be provided as a guess if the real DOB is unknown.
   */
  birthDate?: string|undefined;
  _birthDate?: fhir.IFhirElement|undefined;
  /**
   * The gender might not match the biological sex as determined by genetics, or the individual's preferred identification. Note that for both humans and particularly animals, there are other legitimate possibilities than M and F, though a clear majority of systems and contexts only support M and F.
   */
  gender?: PersonGenderEnum|undefined;
  _gender?: fhir.IFhirElement|undefined;
  /**
   * Identifier for a person within a particular scope.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * Link to a resource that concerns the same actual person.
   */
  link?: fhir.IPersonLink[]|undefined;
  /**
   * The organization that is the custodian of the person record.
   */
  managingOrganization?: fhir.IReference|undefined;
  /**
   * Person may have multiple names with different uses or applicable periods.
   */
  name?: fhir.IHumanName[]|undefined;
  /**
   * An image that can be displayed as a thumbnail of the person to enhance the identification of the individual.
   */
  photo?: fhir.IAttachment|undefined;
  /**
   * Person may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently and also to help with identification.
   */
  telecom?: fhir.IContactPoint[]|undefined;
}
/**
 * Link to a resource that concerns the same actual person.
 */
export class PersonLink extends fhir.BackboneElement implements fhir.IPersonLink {
  /**
   * Level of assurance that this link is associated with the target resource.
   */
  public assurance?: PersonLinkAssuranceEnum|undefined;
  public _assurance?: fhir.FhirElement|undefined;
  /**
   * The resource to which this actual person is associated.
   */
  public target: fhir.Reference|null;
  /**
   * Default constructor for PersonLink - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IPersonLink> = {}) {
    super(source);
    if (source["assurance"]) { this.assurance = source.assurance; }
    if (source["_assurance"]) { this._assurance = new fhir.FhirElement(source._assurance!); }
    this.target = null;
    if (source["target"]) { this.target = new fhir.Reference(source.target!); }
    if (this.target === undefined) { this.target = null }
  }
  /**
   * Check if the current PersonLink contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["target"] === undefined) { missingElements.push("target"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a PersonLink from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IPersonLink):PersonLink {
    var dest:PersonLink = new PersonLink(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `PersonLink is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Demographics and administrative information about a person independent of a specific health-related context.
 */
export class Person extends fhir.DomainResource implements fhir.IPerson {
  /**
   * Resource Type Name
   */
  public override resourceType: "Person";
  /**
   * Whether this person's record is in active use.
   */
  public active?: boolean|undefined;
  public _active?: fhir.FhirElement|undefined;
  /**
   * Person may have multiple addresses with different uses or applicable periods.
   */
  public address?: fhir.Address[]|undefined;
  /**
   * At least an estimated year should be provided as a guess if the real DOB is unknown.
   */
  public birthDate?: string|undefined;
  public _birthDate?: fhir.FhirElement|undefined;
  /**
   * The gender might not match the biological sex as determined by genetics, or the individual's preferred identification. Note that for both humans and particularly animals, there are other legitimate possibilities than M and F, though a clear majority of systems and contexts only support M and F.
   */
  public gender?: PersonGenderEnum|undefined;
  public _gender?: fhir.FhirElement|undefined;
  /**
   * Identifier for a person within a particular scope.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * Link to a resource that concerns the same actual person.
   */
  public link?: fhir.PersonLink[]|undefined;
  /**
   * The organization that is the custodian of the person record.
   */
  public managingOrganization?: fhir.Reference|undefined;
  /**
   * Person may have multiple names with different uses or applicable periods.
   */
  public name?: fhir.HumanName[]|undefined;
  /**
   * An image that can be displayed as a thumbnail of the person to enhance the identification of the individual.
   */
  public photo?: fhir.Attachment|undefined;
  /**
   * Person may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently and also to help with identification.
   */
  public telecom?: fhir.ContactPoint[]|undefined;
  /**
   * Default constructor for Person - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IPerson> = {}) {
    super(source);
    this.resourceType = 'Person';
    if (source["active"]) { this.active = source.active; }
    if (source["_active"]) { this._active = new fhir.FhirElement(source._active!); }
    if (source["address"]) { this.address = source.address.map((x:Partial<fhir.IAddress>) => new fhir.Address(x)); }
    if (source["birthDate"]) { this.birthDate = source.birthDate; }
    if (source["_birthDate"]) { this._birthDate = new fhir.FhirElement(source._birthDate!); }
    if (source["gender"]) { this.gender = source.gender; }
    if (source["_gender"]) { this._gender = new fhir.FhirElement(source._gender!); }
    if (source["identifier"]) { this.identifier = source.identifier.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    if (source["link"]) { this.link = source.link.map((x:Partial<fhir.IPersonLink>) => new fhir.PersonLink(x)); }
    if (source["managingOrganization"]) { this.managingOrganization = new fhir.Reference(source.managingOrganization!); }
    if (source["name"]) { this.name = source.name.map((x:Partial<fhir.IHumanName>) => new fhir.HumanName(x)); }
    if (source["photo"]) { this.photo = new fhir.Attachment(source.photo!); }
    if (source["telecom"]) { this.telecom = source.telecom.map((x:Partial<fhir.IContactPoint>) => new fhir.ContactPoint(x)); }
  }
  /**
   * Check if the current Person contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a Person from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IPerson):Person {
    var dest:Person = new Person(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `Person is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the Person.link.assurance field
 */
export enum PersonLinkAssuranceEnum {
  LEVEL1 = "level1",
  LEVEL2 = "level2",
  LEVEL3 = "level3",
  LEVEL4 = "level4",
}
/**
 * Code Values for the Person.gender field
 */
export enum PersonGenderEnum {
  MALE = "male",
  FEMALE = "female",
  OTHER = "other",
  UNKNOWN = "unknown",
}
