// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
 */
export type IInsurancePlanContact = fhir.IBackboneElement & {
  /**
   * Visiting or postal addresses for the contact.
   */
  address?: fhir.IAddress|undefined;
  /**
   * A name associated with the contact.
   */
  name?: fhir.IHumanName|undefined;
  /**
   * Indicates a purpose for which the contact can be reached.
   */
  purpose?: fhir.ICodeableConcept|undefined;
  /**
   * A contact detail (e.g. a telephone number or an email address) by which the party may be contacted.
   */
  telecom?: fhir.IContactPoint[]|undefined;
}
/**
 * The specific limits on the benefit.
 */
export type IInsurancePlanCoverageBenefitLimit = fhir.IBackboneElement & {
  /**
   * Use `CodeableConcept.text` element if the data is free (uncoded) text.
   */
  code?: fhir.ICodeableConcept|undefined;
  /**
   * May also be called “eligible expense,” “payment allowance,” or “negotiated rate.”.
   */
  value?: fhir.IQuantity|undefined;
}
/**
 * Specific benefits under this type of coverage.
 */
export type IInsurancePlanCoverageBenefit = fhir.IBackboneElement & {
  /**
   * The specific limits on the benefit.
   */
  limit?: fhir.IInsurancePlanCoverageBenefitLimit[]|undefined;
  /**
   * The referral requirements to have access/coverage for this benefit.
   */
  requirement?: string|undefined;
  _requirement?: fhir.IFhirElement|undefined;
  /**
   * Type of benefit (primary care; speciality care; inpatient; outpatient).
   */
  type: fhir.ICodeableConcept|null;
}
/**
 * Details about the coverage offered by the insurance product.
 */
export type IInsurancePlanCoverage = fhir.IBackboneElement & {
  /**
   * Specific benefits under this type of coverage.
   */
  benefit: fhir.IInsurancePlanCoverageBenefit[]|null;
  /**
   * Networks are represented as a hierarchy of organization resources.
   */
  network?: fhir.IReference[]|undefined;
  /**
   * Type of coverage  (Medical; Dental; Mental Health; Substance Abuse; Vision; Drug; Short Term; Long Term Care; Hospice; Home Health).
   */
  type: fhir.ICodeableConcept|null;
}
/**
 * Overall costs associated with the plan.
 */
export type IInsurancePlanPlanGeneralCost = fhir.IBackboneElement & {
  /**
   * Additional information about the general costs associated with this plan.
   */
  comment?: string|undefined;
  _comment?: fhir.IFhirElement|undefined;
  /**
   * Value of the cost.
   */
  cost?: fhir.IMoney|undefined;
  /**
   * Number of participants enrolled in the plan.
   */
  groupSize?: number|undefined;
  _groupSize?: fhir.IFhirElement|undefined;
  /**
   * Type of cost.
   */
  type?: fhir.ICodeableConcept|undefined;
}
/**
 * List of the costs associated with a specific benefit.
 */
export type IInsurancePlanPlanSpecificCostBenefitCost = fhir.IBackboneElement & {
  /**
   * Whether the cost applies to in-network or out-of-network providers (in-network; out-of-network; other).
   */
  applicability?: fhir.ICodeableConcept|undefined;
  /**
   * Additional information about the cost, such as information about funding sources (e.g. HSA, HRA, FSA, RRA).
   */
  qualifiers?: fhir.ICodeableConcept[]|undefined;
  /**
   * Type of cost (copay; individual cap; family cap; coinsurance; deductible).
   */
  type: fhir.ICodeableConcept|null;
  /**
   * The actual cost value. (some of the costs may be represented as percentages rather than currency, e.g. 10% coinsurance).
   */
  value?: fhir.IQuantity|undefined;
}
/**
 * List of the specific benefits under this category of benefit.
 */
export type IInsurancePlanPlanSpecificCostBenefit = fhir.IBackboneElement & {
  /**
   * List of the costs associated with a specific benefit.
   */
  cost?: fhir.IInsurancePlanPlanSpecificCostBenefitCost[]|undefined;
  /**
   * Type of specific benefit (preventative; primary care office visit; speciality office visit; hospitalization; emergency room; urgent care).
   */
  type: fhir.ICodeableConcept|null;
}
/**
 * Costs associated with the coverage provided by the product.
 */
export type IInsurancePlanPlanSpecificCost = fhir.IBackboneElement & {
  /**
   * List of the specific benefits under this category of benefit.
   */
  benefit?: fhir.IInsurancePlanPlanSpecificCostBenefit[]|undefined;
  /**
   * General category of benefit (Medical; Dental; Vision; Drug; Mental Health; Substance Abuse; Hospice, Home Health).
   */
  category: fhir.ICodeableConcept|null;
}
/**
 * Details about an insurance plan.
 */
export type IInsurancePlanPlan = fhir.IBackboneElement & {
  /**
   * The geographic region in which a health insurance plan's benefits apply.
   */
  coverageArea?: fhir.IReference[]|undefined;
  /**
   * Overall costs associated with the plan.
   */
  generalCost?: fhir.IInsurancePlanPlanGeneralCost[]|undefined;
  /**
   * Business identifiers assigned to this health insurance plan which remain constant as the resource is updated and propagates from server to server.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * Networks are represented as a hierarchy of organization resources.
   */
  network?: fhir.IReference[]|undefined;
  /**
   * Costs associated with the coverage provided by the product.
   */
  specificCost?: fhir.IInsurancePlanPlanSpecificCost[]|undefined;
  /**
   * Type of plan. For example, "Platinum" or "High Deductable".
   */
  type?: fhir.ICodeableConcept|undefined;
}
/**
 * Details of a Health Insurance product/plan provided by an organization.
 */
export type IInsurancePlan = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "InsurancePlan";
  /**
   * An organization which administer other services such as underwriting, customer service and/or claims processing on behalf of the health insurance product owner.
   */
  administeredBy?: fhir.IReference|undefined;
  /**
   * There are no dates associated with the alias/historic names, as this is not intended to track when names were used, but to assist in searching so that older names can still result in identifying the product/plan.
   */
  alias?: string[]|undefined;
  _alias?: fhir.IFhirElement[]|undefined;
  /**
   * Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
   */
  contact?: fhir.IInsurancePlanContact[]|undefined;
  /**
   * Details about the coverage offered by the insurance product.
   */
  coverage?: fhir.IInsurancePlanCoverage[]|undefined;
  /**
   * The geographic region in which a health insurance product's benefits apply.
   */
  coverageArea?: fhir.IReference[]|undefined;
  /**
   * The technical endpoints providing access to services operated for the health insurance product.
   */
  endpoint?: fhir.IReference[]|undefined;
  /**
   * Business identifiers assigned to this health insurance product which remain constant as the resource is updated and propagates from server to server.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * If the name of the product/plan changes, consider putting the old name in the alias column so that it can still be located through searches.
   */
  name?: string|undefined;
  _name?: fhir.IFhirElement|undefined;
  /**
   * Networks are represented as a hierarchy of organization resources.
   */
  network?: fhir.IReference[]|undefined;
  /**
   * The entity that is providing  the health insurance product and underwriting the risk.  This is typically an insurance carriers, other third-party payers, or health plan sponsors comonly referred to as 'payers'.
   */
  ownedBy?: fhir.IReference|undefined;
  /**
   * The period of time that the health insurance product is available.
   */
  period?: fhir.IPeriod|undefined;
  /**
   * Details about an insurance plan.
   */
  plan?: fhir.IInsurancePlanPlan[]|undefined;
  /**
   * The current state of the health insurance product.
   */
  status?: InsurancePlanStatusEnum|undefined;
  _status?: fhir.IFhirElement|undefined;
  /**
   * The kind of health insurance product.
   */
  type?: fhir.ICodeableConcept[]|undefined;
}
/**
 * Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
 */
export class InsurancePlanContact extends fhir.BackboneElement implements fhir.IInsurancePlanContact {
  /**
   * Visiting or postal addresses for the contact.
   */
  public address?: fhir.Address|undefined;
  /**
   * A name associated with the contact.
   */
  public name?: fhir.HumanName|undefined;
  /**
   * Indicates a purpose for which the contact can be reached.
   */
  public purpose?: fhir.CodeableConcept|undefined;
  /**
   * A contact detail (e.g. a telephone number or an email address) by which the party may be contacted.
   */
  public telecom?: fhir.ContactPoint[]|undefined;
  /**
   * Default constructor for InsurancePlanContact - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IInsurancePlanContact> = {}) {
    super(source);
    if (source["address"]) { this.address = new fhir.Address(source.address!); }
    if (source["name"]) { this.name = new fhir.HumanName(source.name!); }
    if (source["purpose"]) { this.purpose = new fhir.CodeableConcept(source.purpose!); }
    if (source["telecom"]) { this.telecom = source.telecom.map((x:Partial<fhir.IContactPoint>) => new fhir.ContactPoint(x)); }
  }
  /**
   * Check if the current InsurancePlanContact contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a InsurancePlanContact from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IInsurancePlanContact):InsurancePlanContact {
    var dest:InsurancePlanContact = new InsurancePlanContact(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `InsurancePlanContact is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * The specific limits on the benefit.
 */
export class InsurancePlanCoverageBenefitLimit extends fhir.BackboneElement implements fhir.IInsurancePlanCoverageBenefitLimit {
  /**
   * Use `CodeableConcept.text` element if the data is free (uncoded) text.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * May also be called “eligible expense,” “payment allowance,” or “negotiated rate.”.
   */
  public value?: fhir.Quantity|undefined;
  /**
   * Default constructor for InsurancePlanCoverageBenefitLimit - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IInsurancePlanCoverageBenefitLimit> = {}) {
    super(source);
    if (source["code"]) { this.code = new fhir.CodeableConcept(source.code!); }
    if (source["value"]) { this.value = new fhir.Quantity(source.value!); }
  }
  /**
   * Check if the current InsurancePlanCoverageBenefitLimit contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a InsurancePlanCoverageBenefitLimit from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IInsurancePlanCoverageBenefitLimit):InsurancePlanCoverageBenefitLimit {
    var dest:InsurancePlanCoverageBenefitLimit = new InsurancePlanCoverageBenefitLimit(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `InsurancePlanCoverageBenefitLimit is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Specific benefits under this type of coverage.
 */
export class InsurancePlanCoverageBenefit extends fhir.BackboneElement implements fhir.IInsurancePlanCoverageBenefit {
  /**
   * The specific limits on the benefit.
   */
  public limit?: fhir.InsurancePlanCoverageBenefitLimit[]|undefined;
  /**
   * The referral requirements to have access/coverage for this benefit.
   */
  public requirement?: string|undefined;
  public _requirement?: fhir.FhirElement|undefined;
  /**
   * Type of benefit (primary care; speciality care; inpatient; outpatient).
   */
  public type: fhir.CodeableConcept|null;
  /**
   * Default constructor for InsurancePlanCoverageBenefit - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IInsurancePlanCoverageBenefit> = {}) {
    super(source);
    if (source["limit"]) { this.limit = source.limit.map((x:Partial<fhir.IInsurancePlanCoverageBenefitLimit>) => new fhir.InsurancePlanCoverageBenefitLimit(x)); }
    if (source["requirement"]) { this.requirement = source.requirement; }
    if (source["_requirement"]) { this._requirement = new fhir.FhirElement(source._requirement!); }
    this.type = null;
    if (source["type"]) { this.type = new fhir.CodeableConcept(source.type!); }
    if (this.type === undefined) { this.type = null }
  }
  /**
   * Check if the current InsurancePlanCoverageBenefit contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["type"] === undefined) { missingElements.push("type"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a InsurancePlanCoverageBenefit from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IInsurancePlanCoverageBenefit):InsurancePlanCoverageBenefit {
    var dest:InsurancePlanCoverageBenefit = new InsurancePlanCoverageBenefit(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `InsurancePlanCoverageBenefit is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Details about the coverage offered by the insurance product.
 */
export class InsurancePlanCoverage extends fhir.BackboneElement implements fhir.IInsurancePlanCoverage {
  /**
   * Specific benefits under this type of coverage.
   */
  public benefit: fhir.InsurancePlanCoverageBenefit[]|null;
  /**
   * Networks are represented as a hierarchy of organization resources.
   */
  public network?: fhir.Reference[]|undefined;
  /**
   * Type of coverage  (Medical; Dental; Mental Health; Substance Abuse; Vision; Drug; Short Term; Long Term Care; Hospice; Home Health).
   */
  public type: fhir.CodeableConcept|null;
  /**
   * Default constructor for InsurancePlanCoverage - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IInsurancePlanCoverage> = {}) {
    super(source);
    this.benefit = null;
    if (source["benefit"]) { this.benefit = source.benefit.map((x:Partial<fhir.IInsurancePlanCoverageBenefit>) => new fhir.InsurancePlanCoverageBenefit(x)); }
    if (this.benefit === undefined) { this.benefit = null }
    if (source["network"]) { this.network = source.network.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    this.type = null;
    if (source["type"]) { this.type = new fhir.CodeableConcept(source.type!); }
    if (this.type === undefined) { this.type = null }
  }
  /**
   * Check if the current InsurancePlanCoverage contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if ((!this["benefit"]) || (this["benefit"].length === 0)) { missingElements.push("benefit"); }
    if (this["type"] === undefined) { missingElements.push("type"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a InsurancePlanCoverage from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IInsurancePlanCoverage):InsurancePlanCoverage {
    var dest:InsurancePlanCoverage = new InsurancePlanCoverage(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `InsurancePlanCoverage is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Overall costs associated with the plan.
 */
export class InsurancePlanPlanGeneralCost extends fhir.BackboneElement implements fhir.IInsurancePlanPlanGeneralCost {
  /**
   * Additional information about the general costs associated with this plan.
   */
  public comment?: string|undefined;
  public _comment?: fhir.FhirElement|undefined;
  /**
   * Value of the cost.
   */
  public cost?: fhir.Money|undefined;
  /**
   * Number of participants enrolled in the plan.
   */
  public groupSize?: number|undefined;
  public _groupSize?: fhir.FhirElement|undefined;
  /**
   * Type of cost.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for InsurancePlanPlanGeneralCost - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IInsurancePlanPlanGeneralCost> = {}) {
    super(source);
    if (source["comment"]) { this.comment = source.comment; }
    if (source["_comment"]) { this._comment = new fhir.FhirElement(source._comment!); }
    if (source["cost"]) { this.cost = new fhir.Money(source.cost!); }
    if (source["groupSize"]) { this.groupSize = source.groupSize; }
    if (source["_groupSize"]) { this._groupSize = new fhir.FhirElement(source._groupSize!); }
    if (source["type"]) { this.type = new fhir.CodeableConcept(source.type!); }
  }
  /**
   * Check if the current InsurancePlanPlanGeneralCost contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a InsurancePlanPlanGeneralCost from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IInsurancePlanPlanGeneralCost):InsurancePlanPlanGeneralCost {
    var dest:InsurancePlanPlanGeneralCost = new InsurancePlanPlanGeneralCost(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `InsurancePlanPlanGeneralCost is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * List of the costs associated with a specific benefit.
 */
export class InsurancePlanPlanSpecificCostBenefitCost extends fhir.BackboneElement implements fhir.IInsurancePlanPlanSpecificCostBenefitCost {
  /**
   * Whether the cost applies to in-network or out-of-network providers (in-network; out-of-network; other).
   */
  public applicability?: fhir.CodeableConcept|undefined;
  /**
   * Additional information about the cost, such as information about funding sources (e.g. HSA, HRA, FSA, RRA).
   */
  public qualifiers?: fhir.CodeableConcept[]|undefined;
  /**
   * Type of cost (copay; individual cap; family cap; coinsurance; deductible).
   */
  public type: fhir.CodeableConcept|null;
  /**
   * The actual cost value. (some of the costs may be represented as percentages rather than currency, e.g. 10% coinsurance).
   */
  public value?: fhir.Quantity|undefined;
  /**
   * Default constructor for InsurancePlanPlanSpecificCostBenefitCost - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IInsurancePlanPlanSpecificCostBenefitCost> = {}) {
    super(source);
    if (source["applicability"]) { this.applicability = new fhir.CodeableConcept(source.applicability!); }
    if (source["qualifiers"]) { this.qualifiers = source.qualifiers.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    this.type = null;
    if (source["type"]) { this.type = new fhir.CodeableConcept(source.type!); }
    if (this.type === undefined) { this.type = null }
    if (source["value"]) { this.value = new fhir.Quantity(source.value!); }
  }
  /**
   * Check if the current InsurancePlanPlanSpecificCostBenefitCost contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["type"] === undefined) { missingElements.push("type"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a InsurancePlanPlanSpecificCostBenefitCost from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IInsurancePlanPlanSpecificCostBenefitCost):InsurancePlanPlanSpecificCostBenefitCost {
    var dest:InsurancePlanPlanSpecificCostBenefitCost = new InsurancePlanPlanSpecificCostBenefitCost(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `InsurancePlanPlanSpecificCostBenefitCost is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * List of the specific benefits under this category of benefit.
 */
export class InsurancePlanPlanSpecificCostBenefit extends fhir.BackboneElement implements fhir.IInsurancePlanPlanSpecificCostBenefit {
  /**
   * List of the costs associated with a specific benefit.
   */
  public cost?: fhir.InsurancePlanPlanSpecificCostBenefitCost[]|undefined;
  /**
   * Type of specific benefit (preventative; primary care office visit; speciality office visit; hospitalization; emergency room; urgent care).
   */
  public type: fhir.CodeableConcept|null;
  /**
   * Default constructor for InsurancePlanPlanSpecificCostBenefit - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IInsurancePlanPlanSpecificCostBenefit> = {}) {
    super(source);
    if (source["cost"]) { this.cost = source.cost.map((x:Partial<fhir.IInsurancePlanPlanSpecificCostBenefitCost>) => new fhir.InsurancePlanPlanSpecificCostBenefitCost(x)); }
    this.type = null;
    if (source["type"]) { this.type = new fhir.CodeableConcept(source.type!); }
    if (this.type === undefined) { this.type = null }
  }
  /**
   * Check if the current InsurancePlanPlanSpecificCostBenefit contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["type"] === undefined) { missingElements.push("type"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a InsurancePlanPlanSpecificCostBenefit from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IInsurancePlanPlanSpecificCostBenefit):InsurancePlanPlanSpecificCostBenefit {
    var dest:InsurancePlanPlanSpecificCostBenefit = new InsurancePlanPlanSpecificCostBenefit(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `InsurancePlanPlanSpecificCostBenefit is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Costs associated with the coverage provided by the product.
 */
export class InsurancePlanPlanSpecificCost extends fhir.BackboneElement implements fhir.IInsurancePlanPlanSpecificCost {
  /**
   * List of the specific benefits under this category of benefit.
   */
  public benefit?: fhir.InsurancePlanPlanSpecificCostBenefit[]|undefined;
  /**
   * General category of benefit (Medical; Dental; Vision; Drug; Mental Health; Substance Abuse; Hospice, Home Health).
   */
  public category: fhir.CodeableConcept|null;
  /**
   * Default constructor for InsurancePlanPlanSpecificCost - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IInsurancePlanPlanSpecificCost> = {}) {
    super(source);
    if (source["benefit"]) { this.benefit = source.benefit.map((x:Partial<fhir.IInsurancePlanPlanSpecificCostBenefit>) => new fhir.InsurancePlanPlanSpecificCostBenefit(x)); }
    this.category = null;
    if (source["category"]) { this.category = new fhir.CodeableConcept(source.category!); }
    if (this.category === undefined) { this.category = null }
  }
  /**
   * Check if the current InsurancePlanPlanSpecificCost contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["category"] === undefined) { missingElements.push("category"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a InsurancePlanPlanSpecificCost from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IInsurancePlanPlanSpecificCost):InsurancePlanPlanSpecificCost {
    var dest:InsurancePlanPlanSpecificCost = new InsurancePlanPlanSpecificCost(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `InsurancePlanPlanSpecificCost is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Details about an insurance plan.
 */
export class InsurancePlanPlan extends fhir.BackboneElement implements fhir.IInsurancePlanPlan {
  /**
   * The geographic region in which a health insurance plan's benefits apply.
   */
  public coverageArea?: fhir.Reference[]|undefined;
  /**
   * Overall costs associated with the plan.
   */
  public generalCost?: fhir.InsurancePlanPlanGeneralCost[]|undefined;
  /**
   * Business identifiers assigned to this health insurance plan which remain constant as the resource is updated and propagates from server to server.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * Networks are represented as a hierarchy of organization resources.
   */
  public network?: fhir.Reference[]|undefined;
  /**
   * Costs associated with the coverage provided by the product.
   */
  public specificCost?: fhir.InsurancePlanPlanSpecificCost[]|undefined;
  /**
   * Type of plan. For example, "Platinum" or "High Deductable".
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for InsurancePlanPlan - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IInsurancePlanPlan> = {}) {
    super(source);
    if (source["coverageArea"]) { this.coverageArea = source.coverageArea.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["generalCost"]) { this.generalCost = source.generalCost.map((x:Partial<fhir.IInsurancePlanPlanGeneralCost>) => new fhir.InsurancePlanPlanGeneralCost(x)); }
    if (source["identifier"]) { this.identifier = source.identifier.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    if (source["network"]) { this.network = source.network.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["specificCost"]) { this.specificCost = source.specificCost.map((x:Partial<fhir.IInsurancePlanPlanSpecificCost>) => new fhir.InsurancePlanPlanSpecificCost(x)); }
    if (source["type"]) { this.type = new fhir.CodeableConcept(source.type!); }
  }
  /**
   * Check if the current InsurancePlanPlan contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a InsurancePlanPlan from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IInsurancePlanPlan):InsurancePlanPlan {
    var dest:InsurancePlanPlan = new InsurancePlanPlan(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `InsurancePlanPlan is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Details of a Health Insurance product/plan provided by an organization.
 */
export class InsurancePlan extends fhir.DomainResource implements fhir.IInsurancePlan {
  /**
   * Resource Type Name
   */
  public override resourceType: "InsurancePlan";
  /**
   * An organization which administer other services such as underwriting, customer service and/or claims processing on behalf of the health insurance product owner.
   */
  public administeredBy?: fhir.Reference|undefined;
  /**
   * There are no dates associated with the alias/historic names, as this is not intended to track when names were used, but to assist in searching so that older names can still result in identifying the product/plan.
   */
  public alias?: string[]|undefined;
  public _alias?: fhir.FhirElement[]|undefined;
  /**
   * Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
   */
  public contact?: fhir.InsurancePlanContact[]|undefined;
  /**
   * Details about the coverage offered by the insurance product.
   */
  public coverage?: fhir.InsurancePlanCoverage[]|undefined;
  /**
   * The geographic region in which a health insurance product's benefits apply.
   */
  public coverageArea?: fhir.Reference[]|undefined;
  /**
   * The technical endpoints providing access to services operated for the health insurance product.
   */
  public endpoint?: fhir.Reference[]|undefined;
  /**
   * Business identifiers assigned to this health insurance product which remain constant as the resource is updated and propagates from server to server.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * If the name of the product/plan changes, consider putting the old name in the alias column so that it can still be located through searches.
   */
  public name?: string|undefined;
  public _name?: fhir.FhirElement|undefined;
  /**
   * Networks are represented as a hierarchy of organization resources.
   */
  public network?: fhir.Reference[]|undefined;
  /**
   * The entity that is providing  the health insurance product and underwriting the risk.  This is typically an insurance carriers, other third-party payers, or health plan sponsors comonly referred to as 'payers'.
   */
  public ownedBy?: fhir.Reference|undefined;
  /**
   * The period of time that the health insurance product is available.
   */
  public period?: fhir.Period|undefined;
  /**
   * Details about an insurance plan.
   */
  public plan?: fhir.InsurancePlanPlan[]|undefined;
  /**
   * The current state of the health insurance product.
   */
  public status?: InsurancePlanStatusEnum|undefined;
  public _status?: fhir.FhirElement|undefined;
  /**
   * The kind of health insurance product.
   */
  public type?: fhir.CodeableConcept[]|undefined;
  /**
   * Default constructor for InsurancePlan - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IInsurancePlan> = {}) {
    super(source);
    this.resourceType = 'InsurancePlan';
    if (source["administeredBy"]) { this.administeredBy = new fhir.Reference(source.administeredBy!); }
    if (source["alias"]) { this.alias = source.alias.map((x) => (x)); }
    if (source["_alias"]) { this._alias = source._alias.map((x:Partial<fhir.IFhirElement>) => new fhir.FhirElement(x)); }
    if (source["contact"]) { this.contact = source.contact.map((x:Partial<fhir.IInsurancePlanContact>) => new fhir.InsurancePlanContact(x)); }
    if (source["coverage"]) { this.coverage = source.coverage.map((x:Partial<fhir.IInsurancePlanCoverage>) => new fhir.InsurancePlanCoverage(x)); }
    if (source["coverageArea"]) { this.coverageArea = source.coverageArea.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["endpoint"]) { this.endpoint = source.endpoint.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["identifier"]) { this.identifier = source.identifier.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    if (source["name"]) { this.name = source.name; }
    if (source["_name"]) { this._name = new fhir.FhirElement(source._name!); }
    if (source["network"]) { this.network = source.network.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["ownedBy"]) { this.ownedBy = new fhir.Reference(source.ownedBy!); }
    if (source["period"]) { this.period = new fhir.Period(source.period!); }
    if (source["plan"]) { this.plan = source.plan.map((x:Partial<fhir.IInsurancePlanPlan>) => new fhir.InsurancePlanPlan(x)); }
    if (source["status"]) { this.status = source.status; }
    if (source["_status"]) { this._status = new fhir.FhirElement(source._status!); }
    if (source["type"]) { this.type = source.type.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
  }
  /**
   * Check if the current InsurancePlan contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a InsurancePlan from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IInsurancePlan):InsurancePlan {
    var dest:InsurancePlan = new InsurancePlan(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `InsurancePlan is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the InsurancePlan.status field
 */
export enum InsurancePlanStatusEnum {
  DRAFT = "draft",
  ACTIVE = "active",
  RETIRED = "retired",
  UNKNOWN = "unknown",
}
