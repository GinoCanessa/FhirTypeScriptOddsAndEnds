// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: InsurancePlan

import * as fhir from '../fhir.js';

import { ContactentityTypeValueSet, ContactentityTypeValueSetType,} from '../fhirValueSets/ContactentityTypeValueSet.js';
import { ContactentityTypeValueSetEnum } from '../valueSetEnums.js';
import { InsuranceplanApplicabilityValueSet, InsuranceplanApplicabilityValueSetType,} from '../fhirValueSets/InsuranceplanApplicabilityValueSet.js';
import { InsuranceplanApplicabilityValueSetEnum } from '../valueSetEnums.js';
import { PublicationStatusValueSet, PublicationStatusValueSetType,} from '../fhirValueSets/PublicationStatusValueSet.js';
import { PublicationStatusValueSetEnum } from '../valueSetEnums.js';
import { InsuranceplanTypeValueSet, InsuranceplanTypeValueSetType,} from '../fhirValueSets/InsuranceplanTypeValueSet.js';
import { InsuranceplanTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Valid arguments for the InsurancePlanContact type.
 */
export interface InsurancePlanContactArgs extends fhir.BackboneElementArgs {
  /**
   * Indicates a purpose for which the contact can be reached.
   */
  purpose?: fhir.CodeableConceptArgs|undefined;
  /**
   * A name associated with the contact.
   */
  name?: fhir.HumanNameArgs|undefined;
  /**
   * A contact detail (e.g. a telephone number or an email address) by which the party may be contacted.
   */
  telecom?: fhir.ContactPointArgs[]|undefined;
  /**
   * Visiting or postal addresses for the contact.
   */
  address?: fhir.AddressArgs|undefined;
}

/**
 * Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
 */
export class InsurancePlanContact extends fhir.BackboneElement {
  readonly __dataType:string = 'InsurancePlanContact';
  /**
   * Indicates a purpose for which the contact can be reached.
   */
  public purpose?: fhir.CodeableConcept|undefined;
  /**
   * A name associated with the contact.
   */
  public name?: fhir.HumanName|undefined;
  /**
   * A contact detail (e.g. a telephone number or an email address) by which the party may be contacted.
   */
  public telecom?: fhir.ContactPoint[]|undefined = [];
  /**
   * Visiting or postal addresses for the contact.
   */
  public address?: fhir.Address|undefined;
  /**
   * Default constructor for InsurancePlanContact - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<InsurancePlanContactArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['purpose']) { this.purpose = new fhir.CodeableConcept(source.purpose); }
    if (source['name']) { this.name = new fhir.HumanName(source.name); }
    if (source['telecom']) { this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x)); }
    if (source['address']) { this.address = new fhir.Address(source.address); }
  }
  /**
   * Extensible-bound Value Set for purpose
   */
  public static purposeExtensibleValueSet():ContactentityTypeValueSetType {
    return ContactentityTypeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["purpose"]) { outcome.issue!.push(...this.purpose.doModelValidation().issue!); }
    if (this["name"]) { outcome.issue!.push(...this.name.doModelValidation().issue!); }
    if (this["telecom"]) { this.telecom.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["address"]) { outcome.issue!.push(...this.address.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the InsurancePlanCoverageBenefitLimit type.
 */
export interface InsurancePlanCoverageBenefitLimitArgs extends fhir.BackboneElementArgs {
  /**
   * May also be called “eligible expense,” “payment allowance,” or “negotiated rate.”.
   */
  value?: fhir.QuantityArgs|undefined;
  /**
   * Use `CodeableConcept.text` element if the data is free (uncoded) text.
   */
  code?: fhir.CodeableConceptArgs|undefined;
}

/**
 * The specific limits on the benefit.
 */
export class InsurancePlanCoverageBenefitLimit extends fhir.BackboneElement {
  readonly __dataType:string = 'InsurancePlanCoverageBenefitLimit';
  /**
   * May also be called “eligible expense,” “payment allowance,” or “negotiated rate.”.
   */
  public value?: fhir.Quantity|undefined;
  /**
   * Use `CodeableConcept.text` element if the data is free (uncoded) text.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for InsurancePlanCoverageBenefitLimit - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<InsurancePlanCoverageBenefitLimitArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['value']) { this.value = new fhir.Quantity(source.value); }
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["value"]) { outcome.issue!.push(...this.value.doModelValidation().issue!); }
    if (this["code"]) { outcome.issue!.push(...this.code.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the InsurancePlanCoverageBenefit type.
 */
export interface InsurancePlanCoverageBenefitArgs extends fhir.BackboneElementArgs {
  /**
   * Type of benefit (primary care; speciality care; inpatient; outpatient).
   */
  type: fhir.CodeableConceptArgs|null;
  /**
   * The referral requirements to have access/coverage for this benefit.
   */
  requirement?: fhir.FhirString|string|undefined;
  /**
   * The specific limits on the benefit.
   */
  limit?: fhir.InsurancePlanCoverageBenefitLimitArgs[]|undefined;
}

/**
 * Specific benefits under this type of coverage.
 */
export class InsurancePlanCoverageBenefit extends fhir.BackboneElement {
  readonly __dataType:string = 'InsurancePlanCoverageBenefit';
  /**
   * Type of benefit (primary care; speciality care; inpatient; outpatient).
   */
  public type: fhir.CodeableConcept|null;
  /**
   * The referral requirements to have access/coverage for this benefit.
   */
  public requirement?: fhir.FhirString|undefined;
  /**
   * The specific limits on the benefit.
   */
  public limit?: fhir.InsurancePlanCoverageBenefitLimit[]|undefined = [];
  /**
   * Default constructor for InsurancePlanCoverageBenefit - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<InsurancePlanCoverageBenefitArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    else { this.type = null; }
    if (source['requirement']) { this.requirement = new fhir.FhirString({value: source.requirement}); }
    if (source['limit']) { this.limit = source.limit.map((x) => new fhir.InsurancePlanCoverageBenefitLimit(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['type']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property type:fhir.CodeableConcept fhir: InsurancePlan.coverage.benefit.type:CodeableConcept", }));
    }
    if (this["type"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }
    if (this["requirement"]) { outcome.issue!.push(...this.requirement.doModelValidation().issue!); }
    if (this["limit"]) { this.limit.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the InsurancePlanCoverage type.
 */
export interface InsurancePlanCoverageArgs extends fhir.BackboneElementArgs {
  /**
   * Type of coverage  (Medical; Dental; Mental Health; Substance Abuse; Vision; Drug; Short Term; Long Term Care; Hospice; Home Health).
   */
  type: fhir.CodeableConceptArgs|null;
  /**
   * Networks are represented as a hierarchy of organization resources.
   */
  network?: fhir.ReferenceArgs[]|undefined;
  /**
   * Specific benefits under this type of coverage.
   */
  benefit: fhir.InsurancePlanCoverageBenefitArgs[]|null;
}

/**
 * Details about the coverage offered by the insurance product.
 */
export class InsurancePlanCoverage extends fhir.BackboneElement {
  readonly __dataType:string = 'InsurancePlanCoverage';
  /**
   * Type of coverage  (Medical; Dental; Mental Health; Substance Abuse; Vision; Drug; Short Term; Long Term Care; Hospice; Home Health).
   */
  public type: fhir.CodeableConcept|null;
  /**
   * Networks are represented as a hierarchy of organization resources.
   */
  public network?: fhir.Reference[]|undefined = [];
  /**
   * Specific benefits under this type of coverage.
   */
  public benefit: fhir.InsurancePlanCoverageBenefit[]|null = [];
  /**
   * Default constructor for InsurancePlanCoverage - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<InsurancePlanCoverageArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    else { this.type = null; }
    if (source['network']) { this.network = source.network.map((x) => new fhir.Reference(x)); }
    if (source['benefit']) { this.benefit = source.benefit.map((x) => new fhir.InsurancePlanCoverageBenefit(x)); }
    else { this.benefit = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['type']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property type:fhir.CodeableConcept fhir: InsurancePlan.coverage.type:CodeableConcept", }));
    }
    if (this["type"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }
    if (this["network"]) { this.network.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (!this['benefit']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property benefit:fhir.InsurancePlanCoverageBenefit[] fhir: InsurancePlan.coverage.benefit:benefit", }));
    } else if (!Array.isArray(this.benefit)) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue,  diagnostics: "Found scalar in array property benefit:fhir.InsurancePlanCoverageBenefit[] fhir: InsurancePlan.coverage.benefit:benefit", }));
    } else if (this.benefit.length === 0) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property benefit:fhir.InsurancePlanCoverageBenefit[] fhir: InsurancePlan.coverage.benefit:benefit", }));
    }
    if (this["benefit"]) { this.benefit.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the InsurancePlanPlanGeneralCost type.
 */
export interface InsurancePlanPlanGeneralCostArgs extends fhir.BackboneElementArgs {
  /**
   * Type of cost.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * Number of participants enrolled in the plan.
   */
  groupSize?: fhir.FhirPositiveInt|number|undefined;
  /**
   * Value of the cost.
   */
  cost?: fhir.MoneyArgs|undefined;
  /**
   * Additional information about the general costs associated with this plan.
   */
  comment?: fhir.FhirString|string|undefined;
}

/**
 * Overall costs associated with the plan.
 */
export class InsurancePlanPlanGeneralCost extends fhir.BackboneElement {
  readonly __dataType:string = 'InsurancePlanPlanGeneralCost';
  /**
   * Type of cost.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Number of participants enrolled in the plan.
   */
  public groupSize?: fhir.FhirPositiveInt|undefined;
  /**
   * Value of the cost.
   */
  public cost?: fhir.Money|undefined;
  /**
   * Additional information about the general costs associated with this plan.
   */
  public comment?: fhir.FhirString|undefined;
  /**
   * Default constructor for InsurancePlanPlanGeneralCost - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<InsurancePlanPlanGeneralCostArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['groupSize']) { this.groupSize = new fhir.FhirPositiveInt({value: source.groupSize}); }
    if (source['cost']) { this.cost = new fhir.Money(source.cost); }
    if (source['comment']) { this.comment = new fhir.FhirString({value: source.comment}); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["type"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }
    if (this["groupSize"]) { outcome.issue!.push(...this.groupSize.doModelValidation().issue!); }
    if (this["cost"]) { outcome.issue!.push(...this.cost.doModelValidation().issue!); }
    if (this["comment"]) { outcome.issue!.push(...this.comment.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the InsurancePlanPlanSpecificCostBenefitCost type.
 */
export interface InsurancePlanPlanSpecificCostBenefitCostArgs extends fhir.BackboneElementArgs {
  /**
   * Type of cost (copay; individual cap; family cap; coinsurance; deductible).
   */
  type: fhir.CodeableConceptArgs|null;
  /**
   * Whether the cost applies to in-network or out-of-network providers (in-network; out-of-network; other).
   */
  applicability?: fhir.CodeableConceptArgs|undefined;
  /**
   * Additional information about the cost, such as information about funding sources (e.g. HSA, HRA, FSA, RRA).
   */
  qualifiers?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * The actual cost value. (some of the costs may be represented as percentages rather than currency, e.g. 10% coinsurance).
   */
  value?: fhir.QuantityArgs|undefined;
}

/**
 * List of the costs associated with a specific benefit.
 */
export class InsurancePlanPlanSpecificCostBenefitCost extends fhir.BackboneElement {
  readonly __dataType:string = 'InsurancePlanPlanSpecificCostBenefitCost';
  /**
   * Type of cost (copay; individual cap; family cap; coinsurance; deductible).
   */
  public type: fhir.CodeableConcept|null;
  /**
   * Whether the cost applies to in-network or out-of-network providers (in-network; out-of-network; other).
   */
  public applicability?: fhir.CodeableConcept|undefined;
  /**
   * Additional information about the cost, such as information about funding sources (e.g. HSA, HRA, FSA, RRA).
   */
  public qualifiers?: fhir.CodeableConcept[]|undefined = [];
  /**
   * The actual cost value. (some of the costs may be represented as percentages rather than currency, e.g. 10% coinsurance).
   */
  public value?: fhir.Quantity|undefined;
  /**
   * Default constructor for InsurancePlanPlanSpecificCostBenefitCost - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<InsurancePlanPlanSpecificCostBenefitCostArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    else { this.type = null; }
    if (source['applicability']) { this.applicability = new fhir.CodeableConcept(source.applicability); }
    if (source['qualifiers']) { this.qualifiers = source.qualifiers.map((x) => new fhir.CodeableConcept(x)); }
    if (source['value']) { this.value = new fhir.Quantity(source.value); }
  }
  /**
   * Required-bound Value Set for applicability
   */
  public static applicabilityRequiredValueSet():InsuranceplanApplicabilityValueSetType {
    return InsuranceplanApplicabilityValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['type']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property type:fhir.CodeableConcept fhir: InsurancePlan.plan.specificCost.benefit.cost.type:CodeableConcept", }));
    }
    if (this["type"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }
    if (this["applicability"]) { outcome.issue!.push(...this.applicability.doModelValidation().issue!); }
    if (this["qualifiers"]) { this.qualifiers.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["value"]) { outcome.issue!.push(...this.value.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the InsurancePlanPlanSpecificCostBenefit type.
 */
export interface InsurancePlanPlanSpecificCostBenefitArgs extends fhir.BackboneElementArgs {
  /**
   * Type of specific benefit (preventative; primary care office visit; speciality office visit; hospitalization; emergency room; urgent care).
   */
  type: fhir.CodeableConceptArgs|null;
  /**
   * List of the costs associated with a specific benefit.
   */
  cost?: fhir.InsurancePlanPlanSpecificCostBenefitCostArgs[]|undefined;
}

/**
 * List of the specific benefits under this category of benefit.
 */
export class InsurancePlanPlanSpecificCostBenefit extends fhir.BackboneElement {
  readonly __dataType:string = 'InsurancePlanPlanSpecificCostBenefit';
  /**
   * Type of specific benefit (preventative; primary care office visit; speciality office visit; hospitalization; emergency room; urgent care).
   */
  public type: fhir.CodeableConcept|null;
  /**
   * List of the costs associated with a specific benefit.
   */
  public cost?: fhir.InsurancePlanPlanSpecificCostBenefitCost[]|undefined = [];
  /**
   * Default constructor for InsurancePlanPlanSpecificCostBenefit - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<InsurancePlanPlanSpecificCostBenefitArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    else { this.type = null; }
    if (source['cost']) { this.cost = source.cost.map((x) => new fhir.InsurancePlanPlanSpecificCostBenefitCost(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['type']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property type:fhir.CodeableConcept fhir: InsurancePlan.plan.specificCost.benefit.type:CodeableConcept", }));
    }
    if (this["type"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }
    if (this["cost"]) { this.cost.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the InsurancePlanPlanSpecificCost type.
 */
export interface InsurancePlanPlanSpecificCostArgs extends fhir.BackboneElementArgs {
  /**
   * General category of benefit (Medical; Dental; Vision; Drug; Mental Health; Substance Abuse; Hospice, Home Health).
   */
  category: fhir.CodeableConceptArgs|null;
  /**
   * List of the specific benefits under this category of benefit.
   */
  benefit?: fhir.InsurancePlanPlanSpecificCostBenefitArgs[]|undefined;
}

/**
 * Costs associated with the coverage provided by the product.
 */
export class InsurancePlanPlanSpecificCost extends fhir.BackboneElement {
  readonly __dataType:string = 'InsurancePlanPlanSpecificCost';
  /**
   * General category of benefit (Medical; Dental; Vision; Drug; Mental Health; Substance Abuse; Hospice, Home Health).
   */
  public category: fhir.CodeableConcept|null;
  /**
   * List of the specific benefits under this category of benefit.
   */
  public benefit?: fhir.InsurancePlanPlanSpecificCostBenefit[]|undefined = [];
  /**
   * Default constructor for InsurancePlanPlanSpecificCost - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<InsurancePlanPlanSpecificCostArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category); }
    else { this.category = null; }
    if (source['benefit']) { this.benefit = source.benefit.map((x) => new fhir.InsurancePlanPlanSpecificCostBenefit(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['category']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property category:fhir.CodeableConcept fhir: InsurancePlan.plan.specificCost.category:CodeableConcept", }));
    }
    if (this["category"]) { outcome.issue!.push(...this.category.doModelValidation().issue!); }
    if (this["benefit"]) { this.benefit.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the InsurancePlanPlan type.
 */
export interface InsurancePlanPlanArgs extends fhir.BackboneElementArgs {
  /**
   * Business identifiers assigned to this health insurance plan which remain constant as the resource is updated and propagates from server to server.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * Type of plan. For example, "Platinum" or "High Deductable".
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * The geographic region in which a health insurance plan's benefits apply.
   */
  coverageArea?: fhir.ReferenceArgs[]|undefined;
  /**
   * Networks are represented as a hierarchy of organization resources.
   */
  network?: fhir.ReferenceArgs[]|undefined;
  /**
   * Overall costs associated with the plan.
   */
  generalCost?: fhir.InsurancePlanPlanGeneralCostArgs[]|undefined;
  /**
   * Costs associated with the coverage provided by the product.
   */
  specificCost?: fhir.InsurancePlanPlanSpecificCostArgs[]|undefined;
}

/**
 * Details about an insurance plan.
 */
export class InsurancePlanPlan extends fhir.BackboneElement {
  readonly __dataType:string = 'InsurancePlanPlan';
  /**
   * Business identifiers assigned to this health insurance plan which remain constant as the resource is updated and propagates from server to server.
   */
  public identifier?: fhir.Identifier[]|undefined = [];
  /**
   * Type of plan. For example, "Platinum" or "High Deductable".
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * The geographic region in which a health insurance plan's benefits apply.
   */
  public coverageArea?: fhir.Reference[]|undefined = [];
  /**
   * Networks are represented as a hierarchy of organization resources.
   */
  public network?: fhir.Reference[]|undefined = [];
  /**
   * Overall costs associated with the plan.
   */
  public generalCost?: fhir.InsurancePlanPlanGeneralCost[]|undefined = [];
  /**
   * Costs associated with the coverage provided by the product.
   */
  public specificCost?: fhir.InsurancePlanPlanSpecificCost[]|undefined = [];
  /**
   * Default constructor for InsurancePlanPlan - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<InsurancePlanPlanArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['coverageArea']) { this.coverageArea = source.coverageArea.map((x) => new fhir.Reference(x)); }
    if (source['network']) { this.network = source.network.map((x) => new fhir.Reference(x)); }
    if (source['generalCost']) { this.generalCost = source.generalCost.map((x) => new fhir.InsurancePlanPlanGeneralCost(x)); }
    if (source['specificCost']) { this.specificCost = source.specificCost.map((x) => new fhir.InsurancePlanPlanSpecificCost(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["identifier"]) { this.identifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["type"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }
    if (this["coverageArea"]) { this.coverageArea.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["network"]) { this.network.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["generalCost"]) { this.generalCost.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["specificCost"]) { this.specificCost.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the InsurancePlan type.
 */
export interface InsurancePlanArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "InsurancePlan"|undefined;
  /**
   * Business identifiers assigned to this health insurance product which remain constant as the resource is updated and propagates from server to server.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * The current state of the health insurance product.
   */
  status?: PublicationStatusValueSetEnum|undefined;
  /**
   * The kind of health insurance product.
   */
  type?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * If the name of the product/plan changes, consider putting the old name in the alias column so that it can still be located through searches.
   */
  name?: fhir.FhirString|string|undefined;
  /**
   * There are no dates associated with the alias/historic names, as this is not intended to track when names were used, but to assist in searching so that older names can still result in identifying the product/plan.
   */
  alias?: fhir.FhirString[]|string[]|undefined;
  /**
   * The period of time that the health insurance product is available.
   */
  period?: fhir.PeriodArgs|undefined;
  /**
   * The entity that is providing  the health insurance product and underwriting the risk.  This is typically an insurance carriers, other third-party payers, or health plan sponsors comonly referred to as 'payers'.
   */
  ownedBy?: fhir.ReferenceArgs|undefined;
  /**
   * An organization which administer other services such as underwriting, customer service and/or claims processing on behalf of the health insurance product owner.
   */
  administeredBy?: fhir.ReferenceArgs|undefined;
  /**
   * The geographic region in which a health insurance product's benefits apply.
   */
  coverageArea?: fhir.ReferenceArgs[]|undefined;
  /**
   * Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
   */
  contact?: fhir.InsurancePlanContactArgs[]|undefined;
  /**
   * The technical endpoints providing access to services operated for the health insurance product.
   */
  endpoint?: fhir.ReferenceArgs[]|undefined;
  /**
   * Networks are represented as a hierarchy of organization resources.
   */
  network?: fhir.ReferenceArgs[]|undefined;
  /**
   * Details about the coverage offered by the insurance product.
   */
  coverage?: fhir.InsurancePlanCoverageArgs[]|undefined;
  /**
   * Details about an insurance plan.
   */
  plan?: fhir.InsurancePlanPlanArgs[]|undefined;
}

/**
 * Details of a Health Insurance product/plan provided by an organization.
 */
export class InsurancePlan extends fhir.DomainResource {
  readonly __dataType:string = 'InsurancePlan';
  /**
   * Resource Type Name
   */
  public resourceType: "InsurancePlan";
  /**
   * Business identifiers assigned to this health insurance product which remain constant as the resource is updated and propagates from server to server.
   */
  public identifier?: fhir.Identifier[]|undefined = [];
  /**
   * The current state of the health insurance product.
   */
  public status?: PublicationStatusValueSetEnum|undefined;
  /**
   * The kind of health insurance product.
   */
  public type?: fhir.CodeableConcept[]|undefined = [];
  /**
   * If the name of the product/plan changes, consider putting the old name in the alias column so that it can still be located through searches.
   */
  public name?: fhir.FhirString|undefined;
  /**
   * There are no dates associated with the alias/historic names, as this is not intended to track when names were used, but to assist in searching so that older names can still result in identifying the product/plan.
   */
  public alias?: fhir.FhirString[]|undefined = [];
  /**
   * The period of time that the health insurance product is available.
   */
  public period?: fhir.Period|undefined;
  /**
   * The entity that is providing  the health insurance product and underwriting the risk.  This is typically an insurance carriers, other third-party payers, or health plan sponsors comonly referred to as 'payers'.
   */
  public ownedBy?: fhir.Reference|undefined;
  /**
   * An organization which administer other services such as underwriting, customer service and/or claims processing on behalf of the health insurance product owner.
   */
  public administeredBy?: fhir.Reference|undefined;
  /**
   * The geographic region in which a health insurance product's benefits apply.
   */
  public coverageArea?: fhir.Reference[]|undefined = [];
  /**
   * Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
   */
  public contact?: fhir.InsurancePlanContact[]|undefined = [];
  /**
   * The technical endpoints providing access to services operated for the health insurance product.
   */
  public endpoint?: fhir.Reference[]|undefined = [];
  /**
   * Networks are represented as a hierarchy of organization resources.
   */
  public network?: fhir.Reference[]|undefined = [];
  /**
   * Details about the coverage offered by the insurance product.
   */
  public coverage?: fhir.InsurancePlanCoverage[]|undefined = [];
  /**
   * Details about an insurance plan.
   */
  public plan?: fhir.InsurancePlanPlan[]|undefined = [];
  /**
   * Default constructor for InsurancePlan - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<InsurancePlanArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'InsurancePlan';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['status']) { this.status = source.status; }
    if (source['type']) { this.type = source.type.map((x) => new fhir.CodeableConcept(x)); }
    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }
    if (source['alias']) { this.alias = source.alias.map((x) => new fhir.FhirString({value: x})); }
    if (source['period']) { this.period = new fhir.Period(source.period); }
    if (source['ownedBy']) { this.ownedBy = new fhir.Reference(source.ownedBy); }
    if (source['administeredBy']) { this.administeredBy = new fhir.Reference(source.administeredBy); }
    if (source['coverageArea']) { this.coverageArea = source.coverageArea.map((x) => new fhir.Reference(x)); }
    if (source['contact']) { this.contact = source.contact.map((x) => new fhir.InsurancePlanContact(x)); }
    if (source['endpoint']) { this.endpoint = source.endpoint.map((x) => new fhir.Reference(x)); }
    if (source['network']) { this.network = source.network.map((x) => new fhir.Reference(x)); }
    if (source['coverage']) { this.coverage = source.coverage.map((x) => new fhir.InsurancePlanCoverage(x)); }
    if (source['plan']) { this.plan = source.plan.map((x) => new fhir.InsurancePlanPlan(x)); }
  }
  /**
   * Required-bound Value Set for status
   */
  public static statusRequiredValueSet():PublicationStatusValueSetType {
    return PublicationStatusValueSet;
  }
  /**
   * Example-bound Value Set for type
   */
  public static typeExampleValueSet():InsuranceplanTypeValueSetType {
    return InsuranceplanTypeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['resourceType']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property resourceType:'InsurancePlan' fhir: InsurancePlan.resourceType:'InsurancePlan'", }));
    }
    if (this["identifier"]) { this.identifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["type"]) { this.type.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["name"]) { outcome.issue!.push(...this.name.doModelValidation().issue!); }
    if (this["alias"]) { this.alias.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["period"]) { outcome.issue!.push(...this.period.doModelValidation().issue!); }
    if (this["ownedBy"]) { outcome.issue!.push(...this.ownedBy.doModelValidation().issue!); }
    if (this["administeredBy"]) { outcome.issue!.push(...this.administeredBy.doModelValidation().issue!); }
    if (this["coverageArea"]) { this.coverageArea.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["contact"]) { this.contact.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["endpoint"]) { this.endpoint.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["network"]) { this.network.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["coverage"]) { this.coverage.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["plan"]) { this.plan.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
