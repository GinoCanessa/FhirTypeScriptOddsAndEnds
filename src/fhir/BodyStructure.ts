// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: BodyStructure

import * as fhir from '../fhir.js'

import { BodystructureCodeValueSet, BodystructureCodeValueSetType, BodystructureCodeValueSetEnum } from '../fhirValueSets/BodystructureCodeValueSet.js'
import { BodySiteValueSet, BodySiteValueSetType, BodySiteValueSetEnum } from '../fhirValueSets/BodySiteValueSet.js'
import { BodystructureRelativeLocationValueSet, BodystructureRelativeLocationValueSetType, BodystructureRelativeLocationValueSetEnum } from '../fhirValueSets/BodystructureRelativeLocationValueSet.js'

/**
 * Record details about an anatomical structure.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.
 */
export type IBodyStructure = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "BodyStructure";
  /**
   * Identifier for this instance of the anatomical structure.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * This element is labeled as a modifier because it may be used to mark that the resource was created in error.
   */
  active?: boolean|undefined;
  /**
   * Extended properties for primitive element: BodyStructure.active
   */
  _active?: fhir.IFhirElement|undefined;
  /**
   * The minimum cardinality of 0 supports the use case of specifying a location without defining a morphology.
   */
  morphology?: fhir.ICodeableConcept|undefined;
  /**
   * The anatomical location or region of the specimen, lesion, or body structure.
   */
  location?: fhir.ICodeableConcept|undefined;
  /**
   * Qualifier to refine the anatomical location.  These include qualifiers for laterality, relative location, directionality, number, and plane.
   */
  locationQualifier?: fhir.ICodeableConcept[]|undefined;
  /**
   * This description could include any visual markings used to orientate the viewer e.g. external reference points, special sutures, ink markings.
   */
  description?: string|undefined;
  /**
   * Extended properties for primitive element: BodyStructure.description
   */
  _description?: fhir.IFhirElement|undefined;
  /**
   * Image or images used to identify a location.
   */
  image?: fhir.IAttachment[]|undefined;
  /**
   * The person to which the body site belongs.
   */
  patient: fhir.IReference|null;
}

/**
 * Record details about an anatomical structure.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.
 */
export class BodyStructure extends fhir.DomainResource implements IBodyStructure {
  /**
   * Resource Type Name
   */
  public resourceType: "BodyStructure";
  /**
   * Identifier for this instance of the anatomical structure.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * This element is labeled as a modifier because it may be used to mark that the resource was created in error.
   */
  public active?: boolean|undefined;
  /**
   * Extended properties for primitive element: BodyStructure.active
   */
  public _active?: fhir.FhirElement|undefined;
  /**
   * The minimum cardinality of 0 supports the use case of specifying a location without defining a morphology.
   */
  public morphology?: fhir.CodeableConcept|undefined;
  /**
   * The anatomical location or region of the specimen, lesion, or body structure.
   */
  public location?: fhir.CodeableConcept|undefined;
  /**
   * Qualifier to refine the anatomical location.  These include qualifiers for laterality, relative location, directionality, number, and plane.
   */
  public locationQualifier?: fhir.CodeableConcept[]|undefined;
  /**
   * This description could include any visual markings used to orientate the viewer e.g. external reference points, special sutures, ink markings.
   */
  public description?: string|undefined;
  /**
   * Extended properties for primitive element: BodyStructure.description
   */
  public _description?: fhir.FhirElement|undefined;
  /**
   * Image or images used to identify a location.
   */
  public image?: fhir.Attachment[]|undefined;
  /**
   * The person to which the body site belongs.
   */
  public patient: fhir.Reference|null;
  /**
   * Default constructor for BodyStructure - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IBodyStructure> = { }) {
    super(source);
    this.resourceType = 'BodyStructure';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['active']) { this.active = source.active; }
    if (source['_active']) { this._active = new fhir.FhirElement(source._active!); }
    if (source['morphology']) { this.morphology = new fhir.CodeableConcept(source.morphology!); }
    if (source['location']) { this.location = new fhir.CodeableConcept(source.location!); }
    if (source['locationQualifier']) { this.locationQualifier = source.locationQualifier.map((x) => new fhir.CodeableConcept(x)); }
    if (source['description']) { this.description = source.description; }
    if (source['_description']) { this._description = new fhir.FhirElement(source._description!); }
    if (source['image']) { this.image = source.image.map((x) => new fhir.Attachment(x)); }
    if (source['patient']) { this.patient = new fhir.Reference(source.patient!); }
    else { this.patient = null; }
  }
  /**
   * Example-bound Value Set for morphology
   */
  public static morphologyExampleValueSet():BodystructureCodeValueSetType {
    return BodystructureCodeValueSet;
  }
  /**
   * Example-bound Value Set for location
   */
  public static locationExampleValueSet():BodySiteValueSetType {
    return BodySiteValueSet;
  }
  /**
   * Example-bound Value Set for locationQualifier
   */
  public static locationQualifierExampleValueSet():BodystructureRelativeLocationValueSetType {
    return BodystructureRelativeLocationValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: BodyStructure.resourceType']); }
    if (this["identifier"]) { this.identifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_active"]) { results.push(...this._active.doModelValidation()); }
    if (this["morphology"]) { results.push(...this.morphology.doModelValidation()); }
    if (this["location"]) { results.push(...this.location.doModelValidation()); }
    if (this["locationQualifier"]) { this.locationQualifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_description"]) { results.push(...this._description.doModelValidation()); }
    if (this["image"]) { this.image.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (!this["patient"]) { results.push(["patient",'Missing required element: BodyStructure.patient']); }
    if (this["patient"]) { results.push(...this.patient.doModelValidation()); }
    return results;
  }
}
