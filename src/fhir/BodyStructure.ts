// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Record details about an anatomical structure.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.
 */
export type IBodyStructure = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "BodyStructure";
  /**
   * This element is labeled as a modifier because it may be used to mark that the resource was created in error.
   */
  active?: boolean|undefined;
  _active?: fhir.IFhirElement|undefined;
  /**
   * This description could include any visual markings used to orientate the viewer e.g. external reference points, special sutures, ink markings.
   */
  description?: string|undefined;
  _description?: fhir.IFhirElement|undefined;
  /**
   * Identifier for this instance of the anatomical structure.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * Image or images used to identify a location.
   */
  image?: fhir.IAttachment[]|undefined;
  /**
   * The anatomical location or region of the specimen, lesion, or body structure.
   */
  location?: fhir.ICodeableConcept|undefined;
  /**
   * Qualifier to refine the anatomical location.  These include qualifiers for laterality, relative location, directionality, number, and plane.
   */
  locationQualifier?: fhir.ICodeableConcept[]|undefined;
  /**
   * The minimum cardinality of 0 supports the use case of specifying a location without defining a morphology.
   */
  morphology?: fhir.ICodeableConcept|undefined;
  /**
   * The person to which the body site belongs.
   */
  patient: fhir.IReference|null;
}
/**
 * Record details about an anatomical structure.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.
 */
export class BodyStructure extends fhir.DomainResource implements fhir.IBodyStructure {
  /**
   * Resource Type Name
   */
  public override resourceType: "BodyStructure";
  /**
   * This element is labeled as a modifier because it may be used to mark that the resource was created in error.
   */
  public active?: boolean|undefined;
  public _active?: fhir.FhirElement|undefined;
  /**
   * This description could include any visual markings used to orientate the viewer e.g. external reference points, special sutures, ink markings.
   */
  public description?: string|undefined;
  public _description?: fhir.FhirElement|undefined;
  /**
   * Identifier for this instance of the anatomical structure.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * Image or images used to identify a location.
   */
  public image?: fhir.Attachment[]|undefined;
  /**
   * The anatomical location or region of the specimen, lesion, or body structure.
   */
  public location?: fhir.CodeableConcept|undefined;
  /**
   * Qualifier to refine the anatomical location.  These include qualifiers for laterality, relative location, directionality, number, and plane.
   */
  public locationQualifier?: fhir.CodeableConcept[]|undefined;
  /**
   * The minimum cardinality of 0 supports the use case of specifying a location without defining a morphology.
   */
  public morphology?: fhir.CodeableConcept|undefined;
  /**
   * The person to which the body site belongs.
   */
  public patient: fhir.Reference|null;
  /**
   * Default constructor for BodyStructure - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IBodyStructure> = {}) {
    super(source);
    this.resourceType = 'BodyStructure';
    if (source["active"]) { this.active = source.active; }
    if (source["_active"]) { this._active = new fhir.FhirElement(source._active!); }
    if (source["description"]) { this.description = source.description; }
    if (source["_description"]) { this._description = new fhir.FhirElement(source._description!); }
    if (source["identifier"]) { this.identifier = source.identifier.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    if (source["image"]) { this.image = source.image.map((x:Partial<fhir.IAttachment>) => new fhir.Attachment(x)); }
    if (source["location"]) { this.location = new fhir.CodeableConcept(source.location!); }
    if (source["locationQualifier"]) { this.locationQualifier = source.locationQualifier.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["morphology"]) { this.morphology = new fhir.CodeableConcept(source.morphology!); }
    this.patient = null;
    if (source["patient"]) { this.patient = new fhir.Reference(source.patient!); }
    if (this.patient === undefined) { this.patient = null }
  }
  /**
   * Check if the current BodyStructure contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["patient"] === undefined) { missingElements.push("patient"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a BodyStructure from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IBodyStructure):BodyStructure {
    var dest:BodyStructure = new BodyStructure(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `BodyStructure is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
