// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ImmunizationRecommendation

import * as fhir from '../fhir.js'

import { ImmunizationRecommendationDateCriterionValueSet, ImmunizationRecommendationDateCriterionValueSetType, ImmunizationRecommendationDateCriterionValueSetEnum } from '../fhirValueSets/ImmunizationRecommendationDateCriterionValueSet.js'
import { VaccineCodeValueSet, VaccineCodeValueSetType, VaccineCodeValueSetEnum } from '../fhirValueSets/VaccineCodeValueSet.js'
import { ImmunizationRecommendationTargetDiseaseValueSet, ImmunizationRecommendationTargetDiseaseValueSetType, ImmunizationRecommendationTargetDiseaseValueSetEnum } from '../fhirValueSets/ImmunizationRecommendationTargetDiseaseValueSet.js'
import { ImmunizationRecommendationStatusValueSet, ImmunizationRecommendationStatusValueSetType, ImmunizationRecommendationStatusValueSetEnum } from '../fhirValueSets/ImmunizationRecommendationStatusValueSet.js'
import { ImmunizationRecommendationReasonValueSet, ImmunizationRecommendationReasonValueSetType, ImmunizationRecommendationReasonValueSetEnum } from '../fhirValueSets/ImmunizationRecommendationReasonValueSet.js'

/**
 * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
 */
export type IImmunizationRecommendationRecommendationDateCriterion = fhir.IBackboneElement & { 
  /**
   * Date classification of recommendation.  For example, earliest date to give, latest date to give, etc.
   */
  code: fhir.ICodeableConcept|null;
  /**
   * The date whose meaning is specified by dateCriterion.code.
   */
  value: string|null;
  /**
   * Extended properties for primitive element: ImmunizationRecommendation.recommendation.dateCriterion.value
   */
  _value?: fhir.IFhirElement|undefined;
}

/**
 * Vaccine administration recommendations.
 */
export type IImmunizationRecommendationRecommendation = fhir.IBackboneElement & { 
  /**
   * Vaccine(s) or vaccine group that pertain to the recommendation.
   */
  vaccineCode?: fhir.ICodeableConcept[]|undefined;
  /**
   * The targeted disease for the recommendation.
   */
  targetDisease?: fhir.ICodeableConcept|undefined;
  /**
   * Vaccine(s) which should not be used to fulfill the recommendation.
   */
  contraindicatedVaccineCode?: fhir.ICodeableConcept[]|undefined;
  /**
   * Indicates the patient status with respect to the path to immunity for the target disease.
   */
  forecastStatus: fhir.ICodeableConcept|null;
  /**
   * The reason for the assigned forecast status.
   */
  forecastReason?: fhir.ICodeableConcept[]|undefined;
  /**
   * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
   */
  dateCriterion?: fhir.IImmunizationRecommendationRecommendationDateCriterion[]|undefined;
  /**
   * Contains the description about the protocol under which the vaccine was administered.
   */
  description?: string|undefined;
  /**
   * Extended properties for primitive element: ImmunizationRecommendation.recommendation.description
   */
  _description?: fhir.IFhirElement|undefined;
  /**
   * One possible path to achieve presumed immunity against a disease - within the context of an authority.
   */
  series?: string|undefined;
  /**
   * Extended properties for primitive element: ImmunizationRecommendation.recommendation.series
   */
  _series?: fhir.IFhirElement|undefined;
  /**
   * The use of an integer is prefered if known. A string should only be used in cases where an interger is not available (such as when documenting a recurring booster dose).
   */
  doseNumberPositiveInt?: number|undefined;
  /**
   * Extended properties for primitive element: ImmunizationRecommendation.recommendation.doseNumber[x]
   */
  _doseNumberPositiveInt?: fhir.IFhirElement|undefined;
  /**
   * The use of an integer is prefered if known. A string should only be used in cases where an interger is not available (such as when documenting a recurring booster dose).
   */
  doseNumberString?: string|undefined;
  /**
   * Extended properties for primitive element: ImmunizationRecommendation.recommendation.doseNumber[x]
   */
  _doseNumberString?: fhir.IFhirElement|undefined;
  /**
   * The use of an integer is prefered if known. A string should only be used in cases where an interger is not available (such as when documenting a recurring booster dose).
   */
  seriesDosesPositiveInt?: number|undefined;
  /**
   * Extended properties for primitive element: ImmunizationRecommendation.recommendation.seriesDoses[x]
   */
  _seriesDosesPositiveInt?: fhir.IFhirElement|undefined;
  /**
   * The use of an integer is prefered if known. A string should only be used in cases where an interger is not available (such as when documenting a recurring booster dose).
   */
  seriesDosesString?: string|undefined;
  /**
   * Extended properties for primitive element: ImmunizationRecommendation.recommendation.seriesDoses[x]
   */
  _seriesDosesString?: fhir.IFhirElement|undefined;
  /**
   * Immunization event history and/or evaluation that supports the status and recommendation.
   */
  supportingImmunization?: fhir.IReference[]|undefined;
  /**
   * Patient Information that supports the status and recommendation.  This includes patient observations, adverse reactions and allergy/intolerance information.
   */
  supportingPatientInformation?: fhir.IReference[]|undefined;
}

/**
 * A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification.
 */
export type IImmunizationRecommendation = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "ImmunizationRecommendation";
  /**
   * A unique identifier assigned to this particular recommendation record.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * The patient the recommendation(s) are for.
   */
  patient: fhir.IReference|null;
  /**
   * The date the immunization recommendation(s) were created.
   */
  date: string|null;
  /**
   * Extended properties for primitive element: ImmunizationRecommendation.date
   */
  _date?: fhir.IFhirElement|undefined;
  /**
   * Indicates the authority who published the protocol (e.g. ACIP).
   */
  authority?: fhir.IReference|undefined;
  /**
   * Vaccine administration recommendations.
   */
  recommendation: fhir.IImmunizationRecommendationRecommendation[]|null;
}

/**
 * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
 */
export class ImmunizationRecommendationRecommendationDateCriterion extends fhir.BackboneElement implements IImmunizationRecommendationRecommendationDateCriterion {
  /**
   * Date classification of recommendation.  For example, earliest date to give, latest date to give, etc.
   */
  public code: fhir.CodeableConcept|null;
  /**
   * The date whose meaning is specified by dateCriterion.code.
   */
  public value: string|null;
  /**
   * Extended properties for primitive element: ImmunizationRecommendation.recommendation.dateCriterion.value
   */
  public _value?: fhir.FhirElement|undefined;
  /**
   * Default constructor for ImmunizationRecommendationRecommendationDateCriterion - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IImmunizationRecommendationRecommendationDateCriterion> = { }) {
    super(source);
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code!); }
    else { this.code = null; }
    if (source['value']) { this.value = source.value; }
    else { this.value = null; }
    if (source['_value']) { this._value = new fhir.FhirElement(source._value!); }
  }
  /**
   * Example-bound Value Set for code
   */
  public static codeExampleValueSet():ImmunizationRecommendationDateCriterionValueSetType {
    return ImmunizationRecommendationDateCriterionValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["code"]) { results.push(["code",'Missing required element: ImmunizationRecommendation.recommendation.dateCriterion.code']); }
    if (this["code"]) { results.push(...this.code.doModelValidation()); }
    if (!this["value"]) { results.push(["value",'Missing required element: ImmunizationRecommendation.recommendation.dateCriterion.value']); }
    if (this["_value"]) { results.push(...this._value.doModelValidation()); }
    return results;
  }
}

/**
 * Vaccine administration recommendations.
 */
export class ImmunizationRecommendationRecommendation extends fhir.BackboneElement implements IImmunizationRecommendationRecommendation {
  /**
   * Vaccine(s) or vaccine group that pertain to the recommendation.
   */
  public vaccineCode?: fhir.CodeableConcept[]|undefined;
  /**
   * The targeted disease for the recommendation.
   */
  public targetDisease?: fhir.CodeableConcept|undefined;
  /**
   * Vaccine(s) which should not be used to fulfill the recommendation.
   */
  public contraindicatedVaccineCode?: fhir.CodeableConcept[]|undefined;
  /**
   * Indicates the patient status with respect to the path to immunity for the target disease.
   */
  public forecastStatus: fhir.CodeableConcept|null;
  /**
   * The reason for the assigned forecast status.
   */
  public forecastReason?: fhir.CodeableConcept[]|undefined;
  /**
   * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
   */
  public dateCriterion?: fhir.ImmunizationRecommendationRecommendationDateCriterion[]|undefined;
  /**
   * Contains the description about the protocol under which the vaccine was administered.
   */
  public description?: string|undefined;
  /**
   * Extended properties for primitive element: ImmunizationRecommendation.recommendation.description
   */
  public _description?: fhir.FhirElement|undefined;
  /**
   * One possible path to achieve presumed immunity against a disease - within the context of an authority.
   */
  public series?: string|undefined;
  /**
   * Extended properties for primitive element: ImmunizationRecommendation.recommendation.series
   */
  public _series?: fhir.FhirElement|undefined;
  /**
   * The use of an integer is prefered if known. A string should only be used in cases where an interger is not available (such as when documenting a recurring booster dose).
   */
  public doseNumberPositiveInt?: number|undefined;
  /**
   * Extended properties for primitive element: ImmunizationRecommendation.recommendation.doseNumber[x]
   */
  public _doseNumberPositiveInt?: fhir.FhirElement|undefined;
  /**
   * The use of an integer is prefered if known. A string should only be used in cases where an interger is not available (such as when documenting a recurring booster dose).
   */
  public doseNumberString?: string|undefined;
  /**
   * Extended properties for primitive element: ImmunizationRecommendation.recommendation.doseNumber[x]
   */
  public _doseNumberString?: fhir.FhirElement|undefined;
  /**
   * The use of an integer is prefered if known. A string should only be used in cases where an interger is not available (such as when documenting a recurring booster dose).
   */
  public seriesDosesPositiveInt?: number|undefined;
  /**
   * Extended properties for primitive element: ImmunizationRecommendation.recommendation.seriesDoses[x]
   */
  public _seriesDosesPositiveInt?: fhir.FhirElement|undefined;
  /**
   * The use of an integer is prefered if known. A string should only be used in cases where an interger is not available (such as when documenting a recurring booster dose).
   */
  public seriesDosesString?: string|undefined;
  /**
   * Extended properties for primitive element: ImmunizationRecommendation.recommendation.seriesDoses[x]
   */
  public _seriesDosesString?: fhir.FhirElement|undefined;
  /**
   * Immunization event history and/or evaluation that supports the status and recommendation.
   */
  public supportingImmunization?: fhir.Reference[]|undefined;
  /**
   * Patient Information that supports the status and recommendation.  This includes patient observations, adverse reactions and allergy/intolerance information.
   */
  public supportingPatientInformation?: fhir.Reference[]|undefined;
  /**
   * Default constructor for ImmunizationRecommendationRecommendation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IImmunizationRecommendationRecommendation> = { }) {
    super(source);
    if (source['vaccineCode']) { this.vaccineCode = source.vaccineCode.map((x) => new fhir.CodeableConcept(x)); }
    if (source['targetDisease']) { this.targetDisease = new fhir.CodeableConcept(source.targetDisease!); }
    if (source['contraindicatedVaccineCode']) { this.contraindicatedVaccineCode = source.contraindicatedVaccineCode.map((x) => new fhir.CodeableConcept(x)); }
    if (source['forecastStatus']) { this.forecastStatus = new fhir.CodeableConcept(source.forecastStatus!); }
    else { this.forecastStatus = null; }
    if (source['forecastReason']) { this.forecastReason = source.forecastReason.map((x) => new fhir.CodeableConcept(x)); }
    if (source['dateCriterion']) { this.dateCriterion = source.dateCriterion.map((x) => new fhir.ImmunizationRecommendationRecommendationDateCriterion(x)); }
    if (source['description']) { this.description = source.description; }
    if (source['_description']) { this._description = new fhir.FhirElement(source._description!); }
    if (source['series']) { this.series = source.series; }
    if (source['_series']) { this._series = new fhir.FhirElement(source._series!); }
    if (source['doseNumberPositiveInt']) { this.doseNumberPositiveInt = source.doseNumberPositiveInt; }
    if (source['_doseNumberPositiveInt']) { this._doseNumberPositiveInt = new fhir.FhirElement(source._doseNumberPositiveInt!); }
    if (source['doseNumberString']) { this.doseNumberString = source.doseNumberString; }
    if (source['_doseNumberString']) { this._doseNumberString = new fhir.FhirElement(source._doseNumberString!); }
    if (source['seriesDosesPositiveInt']) { this.seriesDosesPositiveInt = source.seriesDosesPositiveInt; }
    if (source['_seriesDosesPositiveInt']) { this._seriesDosesPositiveInt = new fhir.FhirElement(source._seriesDosesPositiveInt!); }
    if (source['seriesDosesString']) { this.seriesDosesString = source.seriesDosesString; }
    if (source['_seriesDosesString']) { this._seriesDosesString = new fhir.FhirElement(source._seriesDosesString!); }
    if (source['supportingImmunization']) { this.supportingImmunization = source.supportingImmunization.map((x) => new fhir.Reference(x)); }
    if (source['supportingPatientInformation']) { this.supportingPatientInformation = source.supportingPatientInformation.map((x) => new fhir.Reference(x)); }
  }
  /**
   * Example-bound Value Set for vaccineCode
   */
  public static vaccineCodeExampleValueSet():VaccineCodeValueSetType {
    return VaccineCodeValueSet;
  }
  /**
   * Example-bound Value Set for targetDisease
   */
  public static targetDiseaseExampleValueSet():ImmunizationRecommendationTargetDiseaseValueSetType {
    return ImmunizationRecommendationTargetDiseaseValueSet;
  }
  /**
   * Example-bound Value Set for contraindicatedVaccineCode
   */
  public static contraindicatedVaccineCodeExampleValueSet():VaccineCodeValueSetType {
    return VaccineCodeValueSet;
  }
  /**
   * Example-bound Value Set for forecastStatus
   */
  public static forecastStatusExampleValueSet():ImmunizationRecommendationStatusValueSetType {
    return ImmunizationRecommendationStatusValueSet;
  }
  /**
   * Example-bound Value Set for forecastReason
   */
  public static forecastReasonExampleValueSet():ImmunizationRecommendationReasonValueSetType {
    return ImmunizationRecommendationReasonValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["vaccineCode"]) { this.vaccineCode.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["targetDisease"]) { results.push(...this.targetDisease.doModelValidation()); }
    if (this["contraindicatedVaccineCode"]) { this.contraindicatedVaccineCode.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (!this["forecastStatus"]) { results.push(["forecastStatus",'Missing required element: ImmunizationRecommendation.recommendation.forecastStatus']); }
    if (this["forecastStatus"]) { results.push(...this.forecastStatus.doModelValidation()); }
    if (this["forecastReason"]) { this.forecastReason.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["dateCriterion"]) { this.dateCriterion.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_description"]) { results.push(...this._description.doModelValidation()); }
    if (this["_series"]) { results.push(...this._series.doModelValidation()); }
    if (this["_doseNumberPositiveInt"]) { results.push(...this._doseNumberPositiveInt.doModelValidation()); }
    if (this["_doseNumberString"]) { results.push(...this._doseNumberString.doModelValidation()); }
    if (this["_seriesDosesPositiveInt"]) { results.push(...this._seriesDosesPositiveInt.doModelValidation()); }
    if (this["_seriesDosesString"]) { results.push(...this._seriesDosesString.doModelValidation()); }
    if (this["supportingImmunization"]) { this.supportingImmunization.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["supportingPatientInformation"]) { this.supportingPatientInformation.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification.
 */
export class ImmunizationRecommendation extends fhir.DomainResource implements IImmunizationRecommendation {
  /**
   * Resource Type Name
   */
  public resourceType: "ImmunizationRecommendation";
  /**
   * A unique identifier assigned to this particular recommendation record.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * The patient the recommendation(s) are for.
   */
  public patient: fhir.Reference|null;
  /**
   * The date the immunization recommendation(s) were created.
   */
  public date: string|null;
  /**
   * Extended properties for primitive element: ImmunizationRecommendation.date
   */
  public _date?: fhir.FhirElement|undefined;
  /**
   * Indicates the authority who published the protocol (e.g. ACIP).
   */
  public authority?: fhir.Reference|undefined;
  /**
   * Vaccine administration recommendations.
   */
  public recommendation: fhir.ImmunizationRecommendationRecommendation[]|null;
  /**
   * Default constructor for ImmunizationRecommendation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IImmunizationRecommendation> = { }) {
    super(source);
    this.resourceType = 'ImmunizationRecommendation';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['patient']) { this.patient = new fhir.Reference(source.patient!); }
    else { this.patient = null; }
    if (source['date']) { this.date = source.date; }
    else { this.date = null; }
    if (source['_date']) { this._date = new fhir.FhirElement(source._date!); }
    if (source['authority']) { this.authority = new fhir.Reference(source.authority!); }
    if (source['recommendation']) { this.recommendation = source.recommendation.map((x) => new fhir.ImmunizationRecommendationRecommendation(x)); }
    else { this.recommendation = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: ImmunizationRecommendation.resourceType']); }
    if (this["identifier"]) { this.identifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (!this["patient"]) { results.push(["patient",'Missing required element: ImmunizationRecommendation.patient']); }
    if (this["patient"]) { results.push(...this.patient.doModelValidation()); }
    if (!this["date"]) { results.push(["date",'Missing required element: ImmunizationRecommendation.date']); }
    if (this["_date"]) { results.push(...this._date.doModelValidation()); }
    if (this["authority"]) { results.push(...this.authority.doModelValidation()); }
    if ((!this["recommendation"]) || (this["recommendation"].length === 0)) { results.push(["recommendation",'Missing required element: ImmunizationRecommendation.recommendation']); }
    if (this["recommendation"]) { this.recommendation.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}
