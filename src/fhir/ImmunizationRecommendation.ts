// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
 */
export type IImmunizationRecommendationRecommendationDateCriterion = fhir.IBackboneElement & {
  /**
   * Date classification of recommendation.  For example, earliest date to give, latest date to give, etc.
   */
  code: fhir.ICodeableConcept|null;
  /**
   * The date whose meaning is specified by dateCriterion.code.
   */
  value: string|null;
  _value?: fhir.IFhirElement|undefined;
}
/**
 * Vaccine administration recommendations.
 */
export type IImmunizationRecommendationRecommendation = fhir.IBackboneElement & {
  /**
   * Vaccine(s) which should not be used to fulfill the recommendation.
   */
  contraindicatedVaccineCode?: fhir.ICodeableConcept[]|undefined;
  /**
   * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
   */
  dateCriterion?: fhir.IImmunizationRecommendationRecommendationDateCriterion[]|undefined;
  /**
   * Contains the description about the protocol under which the vaccine was administered.
   */
  description?: string|undefined;
  _description?: fhir.IFhirElement|undefined;
  /**
   * The use of an integer is prefered if known. A string should only be used in cases where an interger is not available (such as when documenting a recurring booster dose).
   */
  doseNumberPositiveInt?: number|undefined;
  _doseNumberPositiveInt?: fhir.IFhirElement|undefined;
  /**
   * The use of an integer is prefered if known. A string should only be used in cases where an interger is not available (such as when documenting a recurring booster dose).
   */
  doseNumberString?: string|undefined;
  _doseNumberString?: fhir.IFhirElement|undefined;
  /**
   * The reason for the assigned forecast status.
   */
  forecastReason?: fhir.ICodeableConcept[]|undefined;
  /**
   * Indicates the patient status with respect to the path to immunity for the target disease.
   */
  forecastStatus: fhir.ICodeableConcept|null;
  /**
   * One possible path to achieve presumed immunity against a disease - within the context of an authority.
   */
  series?: string|undefined;
  _series?: fhir.IFhirElement|undefined;
  /**
   * The use of an integer is prefered if known. A string should only be used in cases where an interger is not available (such as when documenting a recurring booster dose).
   */
  seriesDosesPositiveInt?: number|undefined;
  _seriesDosesPositiveInt?: fhir.IFhirElement|undefined;
  /**
   * The use of an integer is prefered if known. A string should only be used in cases where an interger is not available (such as when documenting a recurring booster dose).
   */
  seriesDosesString?: string|undefined;
  _seriesDosesString?: fhir.IFhirElement|undefined;
  /**
   * Immunization event history and/or evaluation that supports the status and recommendation.
   */
  supportingImmunization?: fhir.IReference[]|undefined;
  /**
   * Patient Information that supports the status and recommendation.  This includes patient observations, adverse reactions and allergy/intolerance information.
   */
  supportingPatientInformation?: fhir.IReference[]|undefined;
  /**
   * The targeted disease for the recommendation.
   */
  targetDisease?: fhir.ICodeableConcept|undefined;
  /**
   * Vaccine(s) or vaccine group that pertain to the recommendation.
   */
  vaccineCode?: fhir.ICodeableConcept[]|undefined;
}
/**
 * A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification.
 */
export type IImmunizationRecommendation = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "ImmunizationRecommendation";
  /**
   * Indicates the authority who published the protocol (e.g. ACIP).
   */
  authority?: fhir.IReference|undefined;
  /**
   * The date the immunization recommendation(s) were created.
   */
  date: string|null;
  _date?: fhir.IFhirElement|undefined;
  /**
   * A unique identifier assigned to this particular recommendation record.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * The patient the recommendation(s) are for.
   */
  patient: fhir.IReference|null;
  /**
   * Vaccine administration recommendations.
   */
  recommendation: fhir.IImmunizationRecommendationRecommendation[]|null;
}
/**
 * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
 */
export class ImmunizationRecommendationRecommendationDateCriterion extends fhir.BackboneElement implements fhir.IImmunizationRecommendationRecommendationDateCriterion {
  /**
   * Date classification of recommendation.  For example, earliest date to give, latest date to give, etc.
   */
  public code: fhir.CodeableConcept|null;
  /**
   * The date whose meaning is specified by dateCriterion.code.
   */
  public value: string|null;
  public _value?: fhir.FhirElement|undefined;
  /**
   * Default constructor for ImmunizationRecommendationRecommendationDateCriterion - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IImmunizationRecommendationRecommendationDateCriterion> = {}) {
    super(source);
    this.code = null;
    if (source["code"]) { this.code = new fhir.CodeableConcept(source.code!); }
    if (this.code === undefined) { this.code = null }
    this.value = null;
    if (source["value"]) { this.value = source.value; }
    if (this.value === undefined) { this.value = null }
    if (source["_value"]) { this._value = new fhir.FhirElement(source._value!); }
  }
  /**
   * Check if the current ImmunizationRecommendationRecommendationDateCriterion contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["code"] === undefined) { missingElements.push("code"); }
    if (this["value"] === undefined) { missingElements.push("value"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ImmunizationRecommendationRecommendationDateCriterion from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IImmunizationRecommendationRecommendationDateCriterion):ImmunizationRecommendationRecommendationDateCriterion {
    var dest:ImmunizationRecommendationRecommendationDateCriterion = new ImmunizationRecommendationRecommendationDateCriterion(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `ImmunizationRecommendationRecommendationDateCriterion is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Vaccine administration recommendations.
 */
export class ImmunizationRecommendationRecommendation extends fhir.BackboneElement implements fhir.IImmunizationRecommendationRecommendation {
  /**
   * Vaccine(s) which should not be used to fulfill the recommendation.
   */
  public contraindicatedVaccineCode?: fhir.CodeableConcept[]|undefined;
  /**
   * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
   */
  public dateCriterion?: fhir.ImmunizationRecommendationRecommendationDateCriterion[]|undefined;
  /**
   * Contains the description about the protocol under which the vaccine was administered.
   */
  public description?: string|undefined;
  public _description?: fhir.FhirElement|undefined;
  /**
   * The use of an integer is prefered if known. A string should only be used in cases where an interger is not available (such as when documenting a recurring booster dose).
   */
  public doseNumberPositiveInt?: number|undefined;
  public _doseNumberPositiveInt?: fhir.FhirElement|undefined;
  /**
   * The use of an integer is prefered if known. A string should only be used in cases where an interger is not available (such as when documenting a recurring booster dose).
   */
  public doseNumberString?: string|undefined;
  public _doseNumberString?: fhir.FhirElement|undefined;
  /**
   * The reason for the assigned forecast status.
   */
  public forecastReason?: fhir.CodeableConcept[]|undefined;
  /**
   * Indicates the patient status with respect to the path to immunity for the target disease.
   */
  public forecastStatus: fhir.CodeableConcept|null;
  /**
   * One possible path to achieve presumed immunity against a disease - within the context of an authority.
   */
  public series?: string|undefined;
  public _series?: fhir.FhirElement|undefined;
  /**
   * The use of an integer is prefered if known. A string should only be used in cases where an interger is not available (such as when documenting a recurring booster dose).
   */
  public seriesDosesPositiveInt?: number|undefined;
  public _seriesDosesPositiveInt?: fhir.FhirElement|undefined;
  /**
   * The use of an integer is prefered if known. A string should only be used in cases where an interger is not available (such as when documenting a recurring booster dose).
   */
  public seriesDosesString?: string|undefined;
  public _seriesDosesString?: fhir.FhirElement|undefined;
  /**
   * Immunization event history and/or evaluation that supports the status and recommendation.
   */
  public supportingImmunization?: fhir.Reference[]|undefined;
  /**
   * Patient Information that supports the status and recommendation.  This includes patient observations, adverse reactions and allergy/intolerance information.
   */
  public supportingPatientInformation?: fhir.Reference[]|undefined;
  /**
   * The targeted disease for the recommendation.
   */
  public targetDisease?: fhir.CodeableConcept|undefined;
  /**
   * Vaccine(s) or vaccine group that pertain to the recommendation.
   */
  public vaccineCode?: fhir.CodeableConcept[]|undefined;
  /**
   * Default constructor for ImmunizationRecommendationRecommendation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IImmunizationRecommendationRecommendation> = {}) {
    super(source);
    if (source["contraindicatedVaccineCode"]) { this.contraindicatedVaccineCode = source.contraindicatedVaccineCode.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["dateCriterion"]) { this.dateCriterion = source.dateCriterion.map((x:Partial<fhir.IImmunizationRecommendationRecommendationDateCriterion>) => new fhir.ImmunizationRecommendationRecommendationDateCriterion(x)); }
    if (source["description"]) { this.description = source.description; }
    if (source["_description"]) { this._description = new fhir.FhirElement(source._description!); }
    if (source["doseNumberPositiveInt"]) { this.doseNumberPositiveInt = source.doseNumberPositiveInt; }
    if (source["_doseNumberPositiveInt"]) { this._doseNumberPositiveInt = new fhir.FhirElement(source._doseNumberPositiveInt!); }
    if (source["doseNumberString"]) { this.doseNumberString = source.doseNumberString; }
    if (source["_doseNumberString"]) { this._doseNumberString = new fhir.FhirElement(source._doseNumberString!); }
    if (source["forecastReason"]) { this.forecastReason = source.forecastReason.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    this.forecastStatus = null;
    if (source["forecastStatus"]) { this.forecastStatus = new fhir.CodeableConcept(source.forecastStatus!); }
    if (this.forecastStatus === undefined) { this.forecastStatus = null }
    if (source["series"]) { this.series = source.series; }
    if (source["_series"]) { this._series = new fhir.FhirElement(source._series!); }
    if (source["seriesDosesPositiveInt"]) { this.seriesDosesPositiveInt = source.seriesDosesPositiveInt; }
    if (source["_seriesDosesPositiveInt"]) { this._seriesDosesPositiveInt = new fhir.FhirElement(source._seriesDosesPositiveInt!); }
    if (source["seriesDosesString"]) { this.seriesDosesString = source.seriesDosesString; }
    if (source["_seriesDosesString"]) { this._seriesDosesString = new fhir.FhirElement(source._seriesDosesString!); }
    if (source["supportingImmunization"]) { this.supportingImmunization = source.supportingImmunization.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["supportingPatientInformation"]) { this.supportingPatientInformation = source.supportingPatientInformation.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["targetDisease"]) { this.targetDisease = new fhir.CodeableConcept(source.targetDisease!); }
    if (source["vaccineCode"]) { this.vaccineCode = source.vaccineCode.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
  }
  /**
   * Check if the current ImmunizationRecommendationRecommendation contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["forecastStatus"] === undefined) { missingElements.push("forecastStatus"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ImmunizationRecommendationRecommendation from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IImmunizationRecommendationRecommendation):ImmunizationRecommendationRecommendation {
    var dest:ImmunizationRecommendationRecommendation = new ImmunizationRecommendationRecommendation(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `ImmunizationRecommendationRecommendation is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification.
 */
export class ImmunizationRecommendation extends fhir.DomainResource implements fhir.IImmunizationRecommendation {
  /**
   * Resource Type Name
   */
  public override resourceType: "ImmunizationRecommendation";
  /**
   * Indicates the authority who published the protocol (e.g. ACIP).
   */
  public authority?: fhir.Reference|undefined;
  /**
   * The date the immunization recommendation(s) were created.
   */
  public date: string|null;
  public _date?: fhir.FhirElement|undefined;
  /**
   * A unique identifier assigned to this particular recommendation record.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * The patient the recommendation(s) are for.
   */
  public patient: fhir.Reference|null;
  /**
   * Vaccine administration recommendations.
   */
  public recommendation: fhir.ImmunizationRecommendationRecommendation[]|null;
  /**
   * Default constructor for ImmunizationRecommendation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IImmunizationRecommendation> = {}) {
    super(source);
    this.resourceType = 'ImmunizationRecommendation';
    if (source["authority"]) { this.authority = new fhir.Reference(source.authority!); }
    this.date = null;
    if (source["date"]) { this.date = source.date; }
    if (this.date === undefined) { this.date = null }
    if (source["_date"]) { this._date = new fhir.FhirElement(source._date!); }
    if (source["identifier"]) { this.identifier = source.identifier.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    this.patient = null;
    if (source["patient"]) { this.patient = new fhir.Reference(source.patient!); }
    if (this.patient === undefined) { this.patient = null }
    this.recommendation = null;
    if (source["recommendation"]) { this.recommendation = source.recommendation.map((x:Partial<fhir.IImmunizationRecommendationRecommendation>) => new fhir.ImmunizationRecommendationRecommendation(x)); }
    if (this.recommendation === undefined) { this.recommendation = null }
  }
  /**
   * Check if the current ImmunizationRecommendation contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["date"] === undefined) { missingElements.push("date"); }
    if (this["patient"] === undefined) { missingElements.push("patient"); }
    if ((!this["recommendation"]) || (this["recommendation"].length === 0)) { missingElements.push("recommendation"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ImmunizationRecommendation from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IImmunizationRecommendation):ImmunizationRecommendation {
    var dest:ImmunizationRecommendation = new ImmunizationRecommendation(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `ImmunizationRecommendation is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
