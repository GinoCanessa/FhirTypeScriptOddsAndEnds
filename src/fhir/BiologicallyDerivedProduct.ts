// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: BiologicallyDerivedProduct

import * as fhir from '../fhir.js'

import { ProcedureCodeValueSet, ProcedureCodeValueSetType, ProcedureCodeValueSetEnum } from '../fhirValueSets/ProcedureCodeValueSet.js'
import { ProductStorageScaleValueSet, ProductStorageScaleValueSetType, ProductStorageScaleValueSetEnum } from '../fhirValueSets/ProductStorageScaleValueSet.js'
import { ProductCategoryValueSet, ProductCategoryValueSetType, ProductCategoryValueSetEnum } from '../fhirValueSets/ProductCategoryValueSet.js'
import { ProductStatusValueSet, ProductStatusValueSetType, ProductStatusValueSetEnum } from '../fhirValueSets/ProductStatusValueSet.js'

/**
 * How this product was collected.
 */
export type IBiologicallyDerivedProductCollection = fhir.IBackboneElement & { 
  /**
   * Healthcare professional who is performing the collection.
   */
  collector?: fhir.IReference|undefined;
  /**
   * The patient or entity, such as a hospital or vendor in the case of a processed/manipulated/manufactured product, providing the product.
   */
  source?: fhir.IReference|undefined;
  /**
   * Time of product collection.
   */
  collectedDateTime?: string|undefined;
  /**
   * Extended properties for primitive element: BiologicallyDerivedProduct.collection.collected[x]
   */
  _collectedDateTime?: fhir.IFhirElement|undefined;
  /**
   * Time of product collection.
   */
  collectedPeriod?: fhir.IPeriod|undefined;
}

/**
 * Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
 */
export type IBiologicallyDerivedProductProcessing = fhir.IBackboneElement & { 
  /**
   * Description of of processing.
   */
  description?: string|undefined;
  /**
   * Extended properties for primitive element: BiologicallyDerivedProduct.processing.description
   */
  _description?: fhir.IFhirElement|undefined;
  /**
   * Procesing code.
   */
  procedure?: fhir.ICodeableConcept|undefined;
  /**
   * Substance added during processing.
   */
  additive?: fhir.IReference|undefined;
  /**
   * Time of processing.
   */
  timeDateTime?: string|undefined;
  /**
   * Extended properties for primitive element: BiologicallyDerivedProduct.processing.time[x]
   */
  _timeDateTime?: fhir.IFhirElement|undefined;
  /**
   * Time of processing.
   */
  timePeriod?: fhir.IPeriod|undefined;
}

/**
 * Any manipulation of product post-collection that is intended to alter the product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
 */
export type IBiologicallyDerivedProductManipulation = fhir.IBackboneElement & { 
  /**
   * Description of manipulation.
   */
  description?: string|undefined;
  /**
   * Extended properties for primitive element: BiologicallyDerivedProduct.manipulation.description
   */
  _description?: fhir.IFhirElement|undefined;
  /**
   * Time of manipulation.
   */
  timeDateTime?: string|undefined;
  /**
   * Extended properties for primitive element: BiologicallyDerivedProduct.manipulation.time[x]
   */
  _timeDateTime?: fhir.IFhirElement|undefined;
  /**
   * Time of manipulation.
   */
  timePeriod?: fhir.IPeriod|undefined;
}

/**
 * Product storage.
 */
export type IBiologicallyDerivedProductStorage = fhir.IBackboneElement & { 
  /**
   * Description of storage.
   */
  description?: string|undefined;
  /**
   * Extended properties for primitive element: BiologicallyDerivedProduct.storage.description
   */
  _description?: fhir.IFhirElement|undefined;
  /**
   * Storage temperature.
   */
  temperature?: number|undefined;
  /**
   * Extended properties for primitive element: BiologicallyDerivedProduct.storage.temperature
   */
  _temperature?: fhir.IFhirElement|undefined;
  /**
   * Temperature scale used.
   */
  scale?: ProductStorageScaleValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: BiologicallyDerivedProduct.storage.scale
   */
  _scale?: fhir.IFhirElement|undefined;
  /**
   * Storage timeperiod.
   */
  duration?: fhir.IPeriod|undefined;
}

/**
 * A material substance originating from a biological entity intended to be transplanted or infused
 * into another (possibly the same) biological entity.
 */
export type IBiologicallyDerivedProduct = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "BiologicallyDerivedProduct";
  /**
   * This records identifiers associated with this biologically derived product instance that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * Broad category of this product.
   */
  productCategory?: ProductCategoryValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: BiologicallyDerivedProduct.productCategory
   */
  _productCategory?: fhir.IFhirElement|undefined;
  /**
   * A code that identifies the kind of this biologically derived product (SNOMED Ctcode).
   */
  productCode?: fhir.ICodeableConcept|undefined;
  /**
   * Whether the product is currently available.
   */
  status?: ProductStatusValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: BiologicallyDerivedProduct.status
   */
  _status?: fhir.IFhirElement|undefined;
  /**
   * Procedure request to obtain this biologically derived product.
   */
  request?: fhir.IReference[]|undefined;
  /**
   * Number of discrete units within this product.
   */
  quantity?: number|undefined;
  /**
   * Extended properties for primitive element: BiologicallyDerivedProduct.quantity
   */
  _quantity?: fhir.IFhirElement|undefined;
  /**
   * For products that have multiple collections. For example Peripheral Blood Stem Cells may be collected over several days from a single donor and the donation split into in multiple containers which must be linked to the parent donation.
   */
  parent?: fhir.IReference[]|undefined;
  /**
   * How this product was collected.
   */
  collection?: fhir.IBiologicallyDerivedProductCollection|undefined;
  /**
   * Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
   */
  processing?: fhir.IBiologicallyDerivedProductProcessing[]|undefined;
  /**
   * Any manipulation of product post-collection that is intended to alter the product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
   */
  manipulation?: fhir.IBiologicallyDerivedProductManipulation|undefined;
  /**
   * Product storage.
   */
  storage?: fhir.IBiologicallyDerivedProductStorage[]|undefined;
}

/**
 * How this product was collected.
 */
export class BiologicallyDerivedProductCollection extends fhir.BackboneElement implements IBiologicallyDerivedProductCollection {
  /**
   * Healthcare professional who is performing the collection.
   */
  public collector?: fhir.Reference|undefined;
  /**
   * The patient or entity, such as a hospital or vendor in the case of a processed/manipulated/manufactured product, providing the product.
   */
  public source?: fhir.Reference|undefined;
  /**
   * Time of product collection.
   */
  public collectedDateTime?: string|undefined;
  /**
   * Extended properties for primitive element: BiologicallyDerivedProduct.collection.collected[x]
   */
  public _collectedDateTime?: fhir.FhirElement|undefined;
  /**
   * Time of product collection.
   */
  public collectedPeriod?: fhir.Period|undefined;
  /**
   * Default constructor for BiologicallyDerivedProductCollection - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IBiologicallyDerivedProductCollection> = { }) {
    super(source);
    if (source['collector']) { this.collector = new fhir.Reference(source.collector!); }
    if (source['source']) { this.source = new fhir.Reference(source.source!); }
    if (source['collectedDateTime']) { this.collectedDateTime = source.collectedDateTime; }
    if (source['_collectedDateTime']) { this._collectedDateTime = new fhir.FhirElement(source._collectedDateTime!); }
    if (source['collectedPeriod']) { this.collectedPeriod = new fhir.Period(source.collectedPeriod!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["collector"]) { results.push(...this.collector.doModelValidation()); }
    if (this["source"]) { results.push(...this.source.doModelValidation()); }
    if (this["_collectedDateTime"]) { results.push(...this._collectedDateTime.doModelValidation()); }
    if (this["collectedPeriod"]) { results.push(...this.collectedPeriod.doModelValidation()); }
    return results;
  }
}

/**
 * Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
 */
export class BiologicallyDerivedProductProcessing extends fhir.BackboneElement implements IBiologicallyDerivedProductProcessing {
  /**
   * Description of of processing.
   */
  public description?: string|undefined;
  /**
   * Extended properties for primitive element: BiologicallyDerivedProduct.processing.description
   */
  public _description?: fhir.FhirElement|undefined;
  /**
   * Procesing code.
   */
  public procedure?: fhir.CodeableConcept|undefined;
  /**
   * Substance added during processing.
   */
  public additive?: fhir.Reference|undefined;
  /**
   * Time of processing.
   */
  public timeDateTime?: string|undefined;
  /**
   * Extended properties for primitive element: BiologicallyDerivedProduct.processing.time[x]
   */
  public _timeDateTime?: fhir.FhirElement|undefined;
  /**
   * Time of processing.
   */
  public timePeriod?: fhir.Period|undefined;
  /**
   * Default constructor for BiologicallyDerivedProductProcessing - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IBiologicallyDerivedProductProcessing> = { }) {
    super(source);
    if (source['description']) { this.description = source.description; }
    if (source['_description']) { this._description = new fhir.FhirElement(source._description!); }
    if (source['procedure']) { this.procedure = new fhir.CodeableConcept(source.procedure!); }
    if (source['additive']) { this.additive = new fhir.Reference(source.additive!); }
    if (source['timeDateTime']) { this.timeDateTime = source.timeDateTime; }
    if (source['_timeDateTime']) { this._timeDateTime = new fhir.FhirElement(source._timeDateTime!); }
    if (source['timePeriod']) { this.timePeriod = new fhir.Period(source.timePeriod!); }
  }
  /**
   * Example-bound Value Set for procedure
   */
  public static procedureExampleValueSet():ProcedureCodeValueSetType {
    return ProcedureCodeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["_description"]) { results.push(...this._description.doModelValidation()); }
    if (this["procedure"]) { results.push(...this.procedure.doModelValidation()); }
    if (this["additive"]) { results.push(...this.additive.doModelValidation()); }
    if (this["_timeDateTime"]) { results.push(...this._timeDateTime.doModelValidation()); }
    if (this["timePeriod"]) { results.push(...this.timePeriod.doModelValidation()); }
    return results;
  }
}

/**
 * Any manipulation of product post-collection that is intended to alter the product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
 */
export class BiologicallyDerivedProductManipulation extends fhir.BackboneElement implements IBiologicallyDerivedProductManipulation {
  /**
   * Description of manipulation.
   */
  public description?: string|undefined;
  /**
   * Extended properties for primitive element: BiologicallyDerivedProduct.manipulation.description
   */
  public _description?: fhir.FhirElement|undefined;
  /**
   * Time of manipulation.
   */
  public timeDateTime?: string|undefined;
  /**
   * Extended properties for primitive element: BiologicallyDerivedProduct.manipulation.time[x]
   */
  public _timeDateTime?: fhir.FhirElement|undefined;
  /**
   * Time of manipulation.
   */
  public timePeriod?: fhir.Period|undefined;
  /**
   * Default constructor for BiologicallyDerivedProductManipulation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IBiologicallyDerivedProductManipulation> = { }) {
    super(source);
    if (source['description']) { this.description = source.description; }
    if (source['_description']) { this._description = new fhir.FhirElement(source._description!); }
    if (source['timeDateTime']) { this.timeDateTime = source.timeDateTime; }
    if (source['_timeDateTime']) { this._timeDateTime = new fhir.FhirElement(source._timeDateTime!); }
    if (source['timePeriod']) { this.timePeriod = new fhir.Period(source.timePeriod!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["_description"]) { results.push(...this._description.doModelValidation()); }
    if (this["_timeDateTime"]) { results.push(...this._timeDateTime.doModelValidation()); }
    if (this["timePeriod"]) { results.push(...this.timePeriod.doModelValidation()); }
    return results;
  }
}

/**
 * Product storage.
 */
export class BiologicallyDerivedProductStorage extends fhir.BackboneElement implements IBiologicallyDerivedProductStorage {
  /**
   * Description of storage.
   */
  public description?: string|undefined;
  /**
   * Extended properties for primitive element: BiologicallyDerivedProduct.storage.description
   */
  public _description?: fhir.FhirElement|undefined;
  /**
   * Storage temperature.
   */
  public temperature?: number|undefined;
  /**
   * Extended properties for primitive element: BiologicallyDerivedProduct.storage.temperature
   */
  public _temperature?: fhir.FhirElement|undefined;
  /**
   * Temperature scale used.
   */
  public scale?: ProductStorageScaleValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: BiologicallyDerivedProduct.storage.scale
   */
  public _scale?: fhir.FhirElement|undefined;
  /**
   * Storage timeperiod.
   */
  public duration?: fhir.Period|undefined;
  /**
   * Default constructor for BiologicallyDerivedProductStorage - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IBiologicallyDerivedProductStorage> = { }) {
    super(source);
    if (source['description']) { this.description = source.description; }
    if (source['_description']) { this._description = new fhir.FhirElement(source._description!); }
    if (source['temperature']) { this.temperature = source.temperature; }
    if (source['_temperature']) { this._temperature = new fhir.FhirElement(source._temperature!); }
    if (source['scale']) { this.scale = source.scale; }
    if (source['_scale']) { this._scale = new fhir.FhirElement(source._scale!); }
    if (source['duration']) { this.duration = new fhir.Period(source.duration!); }
  }
  /**
   * Required-bound Value Set for scale
   */
  public static scaleRequiredValueSet():ProductStorageScaleValueSetType {
    return ProductStorageScaleValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["_description"]) { results.push(...this._description.doModelValidation()); }
    if (this["_temperature"]) { results.push(...this._temperature.doModelValidation()); }
    if (this["_scale"]) { results.push(...this._scale.doModelValidation()); }
    if (this["duration"]) { results.push(...this.duration.doModelValidation()); }
    return results;
  }
}

/**
 * A material substance originating from a biological entity intended to be transplanted or infused
 * into another (possibly the same) biological entity.
 */
export class BiologicallyDerivedProduct extends fhir.DomainResource implements IBiologicallyDerivedProduct {
  /**
   * Resource Type Name
   */
  public resourceType: "BiologicallyDerivedProduct";
  /**
   * This records identifiers associated with this biologically derived product instance that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * Broad category of this product.
   */
  public productCategory?: ProductCategoryValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: BiologicallyDerivedProduct.productCategory
   */
  public _productCategory?: fhir.FhirElement|undefined;
  /**
   * A code that identifies the kind of this biologically derived product (SNOMED Ctcode).
   */
  public productCode?: fhir.CodeableConcept|undefined;
  /**
   * Whether the product is currently available.
   */
  public status?: ProductStatusValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: BiologicallyDerivedProduct.status
   */
  public _status?: fhir.FhirElement|undefined;
  /**
   * Procedure request to obtain this biologically derived product.
   */
  public request?: fhir.Reference[]|undefined;
  /**
   * Number of discrete units within this product.
   */
  public quantity?: number|undefined;
  /**
   * Extended properties for primitive element: BiologicallyDerivedProduct.quantity
   */
  public _quantity?: fhir.FhirElement|undefined;
  /**
   * For products that have multiple collections. For example Peripheral Blood Stem Cells may be collected over several days from a single donor and the donation split into in multiple containers which must be linked to the parent donation.
   */
  public parent?: fhir.Reference[]|undefined;
  /**
   * How this product was collected.
   */
  public collection?: fhir.BiologicallyDerivedProductCollection|undefined;
  /**
   * Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
   */
  public processing?: fhir.BiologicallyDerivedProductProcessing[]|undefined;
  /**
   * Any manipulation of product post-collection that is intended to alter the product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
   */
  public manipulation?: fhir.BiologicallyDerivedProductManipulation|undefined;
  /**
   * Product storage.
   */
  public storage?: fhir.BiologicallyDerivedProductStorage[]|undefined;
  /**
   * Default constructor for BiologicallyDerivedProduct - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IBiologicallyDerivedProduct> = { }) {
    super(source);
    this.resourceType = 'BiologicallyDerivedProduct';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['productCategory']) { this.productCategory = source.productCategory; }
    if (source['_productCategory']) { this._productCategory = new fhir.FhirElement(source._productCategory!); }
    if (source['productCode']) { this.productCode = new fhir.CodeableConcept(source.productCode!); }
    if (source['status']) { this.status = source.status; }
    if (source['_status']) { this._status = new fhir.FhirElement(source._status!); }
    if (source['request']) { this.request = source.request.map((x) => new fhir.Reference(x)); }
    if (source['quantity']) { this.quantity = source.quantity; }
    if (source['_quantity']) { this._quantity = new fhir.FhirElement(source._quantity!); }
    if (source['parent']) { this.parent = source.parent.map((x) => new fhir.Reference(x)); }
    if (source['collection']) { this.collection = new fhir.BiologicallyDerivedProductCollection(source.collection!); }
    if (source['processing']) { this.processing = source.processing.map((x) => new fhir.BiologicallyDerivedProductProcessing(x)); }
    if (source['manipulation']) { this.manipulation = new fhir.BiologicallyDerivedProductManipulation(source.manipulation!); }
    if (source['storage']) { this.storage = source.storage.map((x) => new fhir.BiologicallyDerivedProductStorage(x)); }
  }
  /**
   * Required-bound Value Set for productCategory
   */
  public static productCategoryRequiredValueSet():ProductCategoryValueSetType {
    return ProductCategoryValueSet;
  }
  /**
   * Required-bound Value Set for status
   */
  public static statusRequiredValueSet():ProductStatusValueSetType {
    return ProductStatusValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: BiologicallyDerivedProduct.resourceType']); }
    if (this["identifier"]) { this.identifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_productCategory"]) { results.push(...this._productCategory.doModelValidation()); }
    if (this["productCode"]) { results.push(...this.productCode.doModelValidation()); }
    if (this["_status"]) { results.push(...this._status.doModelValidation()); }
    if (this["request"]) { this.request.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_quantity"]) { results.push(...this._quantity.doModelValidation()); }
    if (this["parent"]) { this.parent.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["collection"]) { results.push(...this.collection.doModelValidation()); }
    if (this["processing"]) { this.processing.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["manipulation"]) { results.push(...this.manipulation.doModelValidation()); }
    if (this["storage"]) { this.storage.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}
