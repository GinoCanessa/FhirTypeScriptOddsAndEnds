// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: SampledData

import * as fhir from '../fhir.js';

import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Valid arguments for the SampledData type.
 */
export interface SampledDataArgs extends fhir.FhirElementArgs {
  /**
   * The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.
   */
  origin: fhir.QuantityArgs|null;
  /**
   * This is usually a whole number.
   */
  period: fhir.FhirDecimal|number|undefined;
  /**
   * A correction factor that is applied to the sampled data points before they are added to the origin.
   */
  factor?: fhir.FhirDecimal|number|undefined;
  /**
   * The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit).
   */
  lowerLimit?: fhir.FhirDecimal|number|undefined;
  /**
   * The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit).
   */
  upperLimit?: fhir.FhirDecimal|number|undefined;
  /**
   * If there is more than one dimension, the code for the type of data will define the meaning of the dimensions (typically ECG data).
   */
  dimensions: fhir.FhirPositiveInt|number|undefined;
  /**
   * Data may be missing if it is omitted for summarization purposes. In general, data is required for any actual use of a SampledData.
   */
  data?: fhir.FhirString|string|undefined;
}

/**
 * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
 */
export class SampledData extends fhir.FhirElement {
  readonly __dataType:string = 'SampledData';
  /**
   * The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.
   */
  public origin: fhir.Quantity|null;
  /**
   * This is usually a whole number.
   */
  public period: fhir.FhirDecimal|null;
  /**
   * A correction factor that is applied to the sampled data points before they are added to the origin.
   */
  public factor?: fhir.FhirDecimal|undefined;
  /**
   * The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit).
   */
  public lowerLimit?: fhir.FhirDecimal|undefined;
  /**
   * The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit).
   */
  public upperLimit?: fhir.FhirDecimal|undefined;
  /**
   * If there is more than one dimension, the code for the type of data will define the meaning of the dimensions (typically ECG data).
   */
  public dimensions: fhir.FhirPositiveInt|null;
  /**
   * Data may be missing if it is omitted for summarization purposes. In general, data is required for any actual use of a SampledData.
   */
  public data?: fhir.FhirString|undefined;
  /**
   * Default constructor for SampledData - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<SampledDataArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['origin']) { this.origin = new fhir.Quantity(source.origin); }
    else { this.origin = null; }
    if (source['period']) { this.period = new fhir.FhirDecimal({value: source.period}); }
    else { this.period = null; }
    if (source['factor']) { this.factor = new fhir.FhirDecimal({value: source.factor}); }
    if (source['lowerLimit']) { this.lowerLimit = new fhir.FhirDecimal({value: source.lowerLimit}); }
    if (source['upperLimit']) { this.upperLimit = new fhir.FhirDecimal({value: source.upperLimit}); }
    if (source['dimensions']) { this.dimensions = new fhir.FhirPositiveInt({value: source.dimensions}); }
    else { this.dimensions = null; }
    if (source['data']) { this.data = new fhir.FhirString({value: source.data}); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['origin']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property origin:fhir.Quantity fhir: SampledData.origin:Quantity", }));
    }
    if (this["origin"]) { outcome.issue!.push(...this.origin.doModelValidation().issue!); }
    if (!this['period']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property period:fhir.FhirDecimal fhir: SampledData.period:decimal", }));
    }
    if (this["period"]) { outcome.issue!.push(...this.period.doModelValidation().issue!); }
    if (this["factor"]) { outcome.issue!.push(...this.factor.doModelValidation().issue!); }
    if (this["lowerLimit"]) { outcome.issue!.push(...this.lowerLimit.doModelValidation().issue!); }
    if (this["upperLimit"]) { outcome.issue!.push(...this.upperLimit.doModelValidation().issue!); }
    if (!this['dimensions']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property dimensions:fhir.FhirPositiveInt fhir: SampledData.dimensions:positiveInt", }));
    }
    if (this["dimensions"]) { outcome.issue!.push(...this.dimensions.doModelValidation().issue!); }
    if (this["data"]) { outcome.issue!.push(...this.data.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
