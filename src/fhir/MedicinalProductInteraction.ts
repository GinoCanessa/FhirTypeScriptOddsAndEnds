// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * The specific medication, food or laboratory test that interacts.
 */
export type IMedicinalProductInteractionInteractant = fhir.IBackboneElement & {
  /**
   * The specific medication, food or laboratory test that interacts.
   */
  itemReference?: fhir.IReference|undefined;
  /**
   * The specific medication, food or laboratory test that interacts.
   */
  itemCodeableConcept?: fhir.ICodeableConcept|undefined;
}
/**
 * The interactions of the medicinal product with other medicinal products, or other forms of interactions.
 */
export type IMedicinalProductInteraction = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "MedicinalProductInteraction";
  /**
   * The interaction described.
   */
  description?: string|undefined;
  _description?: fhir.IFhirElement|undefined;
  /**
   * The effect of the interaction, for example "reduced gastric absorption of primary medication".
   */
  effect?: fhir.ICodeableConcept|undefined;
  /**
   * The incidence of the interaction, e.g. theoretical, observed.
   */
  incidence?: fhir.ICodeableConcept|undefined;
  /**
   * The specific medication, food or laboratory test that interacts.
   */
  interactant?: fhir.IMedicinalProductInteractionInteractant[]|undefined;
  /**
   * Actions for managing the interaction.
   */
  management?: fhir.ICodeableConcept|undefined;
  /**
   * The medication for which this is a described interaction.
   */
  subject?: fhir.IReference[]|undefined;
  /**
   * The type of the interaction e.g. drug-drug interaction, drug-food interaction, drug-lab test interaction.
   */
  type?: fhir.ICodeableConcept|undefined;
}
/**
 * The specific medication, food or laboratory test that interacts.
 */
export class MedicinalProductInteractionInteractant extends fhir.BackboneElement implements fhir.IMedicinalProductInteractionInteractant {
  /**
   * The specific medication, food or laboratory test that interacts.
   */
  public itemReference?: fhir.Reference|undefined;
  /**
   * The specific medication, food or laboratory test that interacts.
   */
  public itemCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for MedicinalProductInteractionInteractant - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedicinalProductInteractionInteractant> = {}) {
    super(source);
    if (source["itemReference"]) { this.itemReference = new fhir.Reference(source.itemReference!); }
    if (source["itemCodeableConcept"]) { this.itemCodeableConcept = new fhir.CodeableConcept(source.itemCodeableConcept!); }
  }
  /**
   * Check if the current MedicinalProductInteractionInteractant contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a MedicinalProductInteractionInteractant from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IMedicinalProductInteractionInteractant):MedicinalProductInteractionInteractant {
    var dest:MedicinalProductInteractionInteractant = new MedicinalProductInteractionInteractant(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `MedicinalProductInteractionInteractant is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * The interactions of the medicinal product with other medicinal products, or other forms of interactions.
 */
export class MedicinalProductInteraction extends fhir.DomainResource implements fhir.IMedicinalProductInteraction {
  /**
   * Resource Type Name
   */
  public override resourceType: "MedicinalProductInteraction";
  /**
   * The interaction described.
   */
  public description?: string|undefined;
  public _description?: fhir.FhirElement|undefined;
  /**
   * The effect of the interaction, for example "reduced gastric absorption of primary medication".
   */
  public effect?: fhir.CodeableConcept|undefined;
  /**
   * The incidence of the interaction, e.g. theoretical, observed.
   */
  public incidence?: fhir.CodeableConcept|undefined;
  /**
   * The specific medication, food or laboratory test that interacts.
   */
  public interactant?: fhir.MedicinalProductInteractionInteractant[]|undefined;
  /**
   * Actions for managing the interaction.
   */
  public management?: fhir.CodeableConcept|undefined;
  /**
   * The medication for which this is a described interaction.
   */
  public subject?: fhir.Reference[]|undefined;
  /**
   * The type of the interaction e.g. drug-drug interaction, drug-food interaction, drug-lab test interaction.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for MedicinalProductInteraction - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedicinalProductInteraction> = {}) {
    super(source);
    this.resourceType = 'MedicinalProductInteraction';
    if (source["description"]) { this.description = source.description; }
    if (source["_description"]) { this._description = new fhir.FhirElement(source._description!); }
    if (source["effect"]) { this.effect = new fhir.CodeableConcept(source.effect!); }
    if (source["incidence"]) { this.incidence = new fhir.CodeableConcept(source.incidence!); }
    if (source["interactant"]) { this.interactant = source.interactant.map((x:Partial<fhir.IMedicinalProductInteractionInteractant>) => new fhir.MedicinalProductInteractionInteractant(x)); }
    if (source["management"]) { this.management = new fhir.CodeableConcept(source.management!); }
    if (source["subject"]) { this.subject = source.subject.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["type"]) { this.type = new fhir.CodeableConcept(source.type!); }
  }
  /**
   * Check if the current MedicinalProductInteraction contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a MedicinalProductInteraction from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IMedicinalProductInteraction):MedicinalProductInteraction {
    var dest:MedicinalProductInteraction = new MedicinalProductInteraction(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `MedicinalProductInteraction is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
