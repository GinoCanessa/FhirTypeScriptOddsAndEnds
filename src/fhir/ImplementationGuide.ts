// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
 */
export type IImplementationGuideDependsOn = fhir.IBackboneElement & {
  /**
   * The NPM package name for the Implementation Guide that this IG depends on.
   */
  packageId?: string|undefined;
  _packageId?: fhir.IFhirElement|undefined;
  /**
   * Usually, A canonical reference to the implementation guide is the same as the master location at which the implementation guide is published.
   */
  uri: string|null;
  _uri?: fhir.IFhirElement|undefined;
  /**
   * This follows the syntax of the NPM packaging version field - see [[reference]].
   */
  version?: string|undefined;
  _version?: fhir.IFhirElement|undefined;
}
/**
 * See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.
 */
export type IImplementationGuideGlobal = fhir.IBackboneElement & {
  /**
   * A reference to the profile that all instances must conform to.
   */
  profile: string|null;
  _profile?: fhir.IFhirElement|undefined;
  /**
   * The type must match that of the profile that is referred to but is made explicit here as a denormalization so that a system processing the implementation guide resource knows which resources the profile applies to even if the profile itself is not available.
   */
  type: string|null;
  _type?: fhir.IFhirElement|undefined;
}
/**
 * Groupings are arbitrary sub-divisions of content. Typically, they are used to help build Table of Contents automatically.
 */
export type IImplementationGuideDefinitionGrouping = fhir.IBackboneElement & {
  /**
   * Human readable text describing the package.
   */
  description?: string|undefined;
  _description?: fhir.IFhirElement|undefined;
  /**
   * The human-readable title to display for the package of resources when rendering the implementation guide.
   */
  name: string|null;
  _name?: fhir.IFhirElement|undefined;
}
/**
 * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
 */
export type IImplementationGuideDefinitionResource = fhir.IBackboneElement & {
  /**
   * This is mostly used with examples to explain why it is present (though they can have extensive comments in the examples).
   */
  description?: string|undefined;
  _description?: fhir.IFhirElement|undefined;
  /**
   * Examples: 
   * * StructureDefinition -&gt; Any 
   * * ValueSet -&gt; expansion 
   * * OperationDefinition -&gt; Parameters 
   * * Questionnaire -&gt; QuestionnaireResponse.
   */
  exampleBoolean?: boolean|undefined;
  _exampleBoolean?: fhir.IFhirElement|undefined;
  /**
   * Examples: 
   * * StructureDefinition -&gt; Any 
   * * ValueSet -&gt; expansion 
   * * OperationDefinition -&gt; Parameters 
   * * Questionnaire -&gt; QuestionnaireResponse.
   */
  exampleCanonical?: string|undefined;
  _exampleCanonical?: fhir.IFhirElement|undefined;
  /**
   * The resource SHALL be valid against all the versions it is specified to apply to. If the resource referred to is a StructureDefinition, the fhirVersion stated in the StructureDefinition cannot disagree with the version specified here; the specified versions SHALL include the version specified by the StructureDefinition, and may include additional versions using the [applicable-version](extension-structuredefinition-applicable-version.html) extension.
   */
  fhirVersion?: string[]|undefined;
  _fhirVersion?: fhir.IFhirElement[]|undefined;
  /**
   * This must correspond to a package.id element within this implementation guide.
   */
  groupingId?: string|undefined;
  _groupingId?: fhir.IFhirElement|undefined;
  /**
   * A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).
   */
  name?: string|undefined;
  _name?: fhir.IFhirElement|undefined;
  /**
   * Usually this is a relative URL that locates the resource within the implementation guide. If you authoring an implementation guide, and will publish it using the FHIR publication tooling, use a URI that may point to a resource, or to one of various alternative representations (e.g. spreadsheet). The tooling will convert this when it publishes it.
   */
  reference: fhir.IReference|null;
}
/**
 * Pages automatically become sections if they have sub-pages. By convention, the home page is called index.html.
 */
export type IImplementationGuideDefinitionPage = fhir.IBackboneElement & {
  /**
   * A code that indicates how the page is generated.
   */
  generation: ImplementationGuideDefinitionPageGenerationEnum|null;
  _generation?: fhir.IFhirElement|undefined;
  /**
   * The publishing tool will autogenerate source for list (source = n/a) and inject included implementations for include (source = uri of guide to include).
   */
  nameUrl?: string|undefined;
  _nameUrl?: fhir.IFhirElement|undefined;
  /**
   * The publishing tool will autogenerate source for list (source = n/a) and inject included implementations for include (source = uri of guide to include).
   */
  nameReference?: fhir.IReference|undefined;
  /**
   * The implementation guide breadcrumbs are generated from this structure.
   */
  page?: fhir.IImplementationGuideDefinitionPage[]|undefined;
  /**
   * A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc.
   */
  title: string|null;
  _title?: fhir.IFhirElement|undefined;
}
/**
 * Defines how IG is built by tools.
 */
export type IImplementationGuideDefinitionParameter = fhir.IBackboneElement & {
  /**
   * apply | path-resource | path-pages | path-tx-cache | expansion-parameter | rule-broken-links | generate-xml | generate-json | generate-turtle | html-template.
   */
  code: ImplementationGuideDefinitionParameterCodeEnum|null;
  _code?: fhir.IFhirElement|undefined;
  /**
   * Value for named type.
   */
  value: string|null;
  _value?: fhir.IFhirElement|undefined;
}
/**
 * A template for building resources.
 */
export type IImplementationGuideDefinitionTemplate = fhir.IBackboneElement & {
  /**
   * Type of template specified.
   */
  code: string|null;
  _code?: fhir.IFhirElement|undefined;
  /**
   * The scope in which the template applies.
   */
  scope?: string|undefined;
  _scope?: fhir.IFhirElement|undefined;
  /**
   * The source location for the template.
   */
  source: string|null;
  _source?: fhir.IFhirElement|undefined;
}
/**
 * Principally, this consists of information abuot source resource and file locations, and build parameters and templates.
 */
export type IImplementationGuideDefinition = fhir.IBackboneElement & {
  /**
   * Groupings are arbitrary sub-divisions of content. Typically, they are used to help build Table of Contents automatically.
   */
  grouping?: fhir.IImplementationGuideDefinitionGrouping[]|undefined;
  /**
   * Pages automatically become sections if they have sub-pages. By convention, the home page is called index.html.
   */
  page?: fhir.IImplementationGuideDefinitionPage|undefined;
  /**
   * Defines how IG is built by tools.
   */
  parameter?: fhir.IImplementationGuideDefinitionParameter[]|undefined;
  /**
   * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
   */
  resource: fhir.IImplementationGuideDefinitionResource[]|null;
  /**
   * A template for building resources.
   */
  template?: fhir.IImplementationGuideDefinitionTemplate[]|undefined;
}
/**
 * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
 */
export type IImplementationGuideManifestResource = fhir.IBackboneElement & {
  /**
   * Typically, conformance resources and knowledge resources are directly part of the implementation guide, with their normal meaning, and patient linked resources are usually examples. However this is not always true.
   */
  exampleBoolean?: boolean|undefined;
  _exampleBoolean?: fhir.IFhirElement|undefined;
  /**
   * Typically, conformance resources and knowledge resources are directly part of the implementation guide, with their normal meaning, and patient linked resources are usually examples. However this is not always true.
   */
  exampleCanonical?: string|undefined;
  _exampleCanonical?: fhir.IFhirElement|undefined;
  /**
   * Usually this is a relative URL that locates the resource within the implementation guide. If you authoring an implementation guide, and will publish it using the FHIR publication tooling, use a URI that may point to a resource, or to one of various alternative representations (e.g. spreadsheet). The tooling will convert this when it publishes it.
   */
  reference: fhir.IReference|null;
  /**
   * Appending 'rendering' + "/" + this should resolve to the resource page.
   */
  relativePath?: string|undefined;
  _relativePath?: fhir.IFhirElement|undefined;
}
/**
 * Information about a page within the IG.
 */
export type IImplementationGuideManifestPage = fhir.IBackboneElement & {
  /**
   * Appending 'rendering' + "/" + page.name + "#" + page.anchor should resolve to the anchor.
   */
  anchor?: string[]|undefined;
  _anchor?: fhir.IFhirElement[]|undefined;
  /**
   * Appending 'rendering' + "/" + this should resolve to the page.
   */
  name: string|null;
  _name?: fhir.IFhirElement|undefined;
  /**
   * Label for the page intended for human display.
   */
  title?: string|undefined;
  _title?: fhir.IFhirElement|undefined;
}
/**
 * Information about an assembled implementation guide, created by the publication tooling.
 */
export type IImplementationGuideManifest = fhir.IBackboneElement & {
  /**
   * Indicates a relative path to an image that exists within the IG.
   */
  image?: string[]|undefined;
  _image?: fhir.IFhirElement[]|undefined;
  /**
   * Indicates the relative path of an additional non-page, non-image file that is part of the IG - e.g. zip, jar and similar files that could be the target of a hyperlink in a derived IG.
   */
  other?: string[]|undefined;
  _other?: fhir.IFhirElement[]|undefined;
  /**
   * Information about a page within the IG.
   */
  page?: fhir.IImplementationGuideManifestPage[]|undefined;
  /**
   * A pointer to official web page, PDF or other rendering of the implementation guide.
   */
  rendering?: string|undefined;
  _rendering?: fhir.IFhirElement|undefined;
  /**
   * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
   */
  resource: fhir.IImplementationGuideManifestResource[]|null;
}
/**
 * A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
 */
export type IImplementationGuide = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "ImplementationGuide";
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: fhir.IContactDetail[]|undefined;
  /**
   * A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the implementation guide.
   */
  copyright?: string|undefined;
  _copyright?: fhir.IFhirElement|undefined;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the implementation guide. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: string|undefined;
  _date?: fhir.IFhirElement|undefined;
  /**
   * Principally, this consists of information abuot source resource and file locations, and build parameters and templates.
   */
  definition?: fhir.IImplementationGuideDefinition|undefined;
  /**
   * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
   */
  dependsOn?: fhir.IImplementationGuideDependsOn[]|undefined;
  /**
   * This description can be used to capture details such as why the implementation guide was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the implementation guide as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the implementation guide is presumed to be the predominant language in the place the implementation guide was created).
   */
  description?: string|undefined;
  _description?: fhir.IFhirElement|undefined;
  /**
   * Allows filtering of implementation guides that are appropriate for use versus not.
   */
  experimental?: boolean|undefined;
  _experimental?: fhir.IFhirElement|undefined;
  /**
   * Most implementation guides target a single version - e.g. they describe how to use a particular version, and the profiles and examples etc are valid for that version. But some implementation guides describe how to use multiple different versions of FHIR to solve the same problem, or in concert with each other. Typically, the requirement to support multiple versions arises as implementation matures and different implementation communities are stuck at different versions by regulation or market dynamics.
   */
  fhirVersion: string[]|null;
  _fhirVersion?: fhir.IFhirElement[]|undefined;
  /**
   * See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.
   */
  global?: fhir.IImplementationGuideGlobal[]|undefined;
  /**
   * It may be possible for the implementation guide to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: fhir.ICodeableConcept[]|undefined;
  /**
   * The license that applies to this Implementation Guide, using an SPDX license code, or 'not-open-source'.
   */
  license?: string|undefined;
  _license?: fhir.IFhirElement|undefined;
  /**
   * Information about an assembled implementation guide, created by the publication tooling.
   */
  manifest?: fhir.IImplementationGuideManifest|undefined;
  /**
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name: string|null;
  _name?: fhir.IFhirElement|undefined;
  /**
   * Many (if not all) IG publishing tools will require that this element be present. For implementation guides published through HL7 or the FHIR foundation, the FHIR product director assigns package IDs.
   */
  packageId: string|null;
  _packageId?: fhir.IFhirElement|undefined;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the implementation guide is the organization or individual primarily responsible for the maintenance and upkeep of the implementation guide. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the implementation guide. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string|undefined;
  _publisher?: fhir.IFhirElement|undefined;
  /**
   * Allows filtering of implementation guides that are appropriate for use versus not.
   */
  status: ImplementationGuideStatusEnum|null;
  _status?: fhir.IFhirElement|undefined;
  /**
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string|undefined;
  _title?: fhir.IFhirElement|undefined;
  /**
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url: string|null;
  _url?: fhir.IFhirElement|undefined;
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: fhir.IUsageContext[]|undefined;
  /**
   * There may be different implementation guide instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the implementation guide with the format [url]|[version].
   */
  version?: string|undefined;
  _version?: fhir.IFhirElement|undefined;
}
/**
 * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
 */
export class ImplementationGuideDependsOn extends fhir.BackboneElement implements fhir.IImplementationGuideDependsOn {
  /**
   * The NPM package name for the Implementation Guide that this IG depends on.
   */
  public packageId?: string|undefined;
  public _packageId?: fhir.FhirElement|undefined;
  /**
   * Usually, A canonical reference to the implementation guide is the same as the master location at which the implementation guide is published.
   */
  public uri: string|null;
  public _uri?: fhir.FhirElement|undefined;
  /**
   * This follows the syntax of the NPM packaging version field - see [[reference]].
   */
  public version?: string|undefined;
  public _version?: fhir.FhirElement|undefined;
  /**
   * Default constructor for ImplementationGuideDependsOn - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IImplementationGuideDependsOn> = {}) {
    super(source);
    if (source["packageId"]) { this.packageId = source.packageId; }
    if (source["_packageId"]) { this._packageId = new fhir.FhirElement(source._packageId!); }
    this.uri = null;
    if (source["uri"]) { this.uri = source.uri; }
    if (this.uri === undefined) { this.uri = null }
    if (source["_uri"]) { this._uri = new fhir.FhirElement(source._uri!); }
    if (source["version"]) { this.version = source.version; }
    if (source["_version"]) { this._version = new fhir.FhirElement(source._version!); }
  }
  /**
   * Check if the current ImplementationGuideDependsOn contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["uri"] === undefined) { missingElements.push("uri"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ImplementationGuideDependsOn from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IImplementationGuideDependsOn):ImplementationGuideDependsOn {
    var dest:ImplementationGuideDependsOn = new ImplementationGuideDependsOn(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `ImplementationGuideDependsOn is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.
 */
export class ImplementationGuideGlobal extends fhir.BackboneElement implements fhir.IImplementationGuideGlobal {
  /**
   * A reference to the profile that all instances must conform to.
   */
  public profile: string|null;
  public _profile?: fhir.FhirElement|undefined;
  /**
   * The type must match that of the profile that is referred to but is made explicit here as a denormalization so that a system processing the implementation guide resource knows which resources the profile applies to even if the profile itself is not available.
   */
  public type: string|null;
  public _type?: fhir.FhirElement|undefined;
  /**
   * Default constructor for ImplementationGuideGlobal - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IImplementationGuideGlobal> = {}) {
    super(source);
    this.profile = null;
    if (source["profile"]) { this.profile = source.profile; }
    if (this.profile === undefined) { this.profile = null }
    if (source["_profile"]) { this._profile = new fhir.FhirElement(source._profile!); }
    this.type = null;
    if (source["type"]) { this.type = source.type; }
    if (this.type === undefined) { this.type = null }
    if (source["_type"]) { this._type = new fhir.FhirElement(source._type!); }
  }
  /**
   * Check if the current ImplementationGuideGlobal contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["profile"] === undefined) { missingElements.push("profile"); }
    if (this["type"] === undefined) { missingElements.push("type"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ImplementationGuideGlobal from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IImplementationGuideGlobal):ImplementationGuideGlobal {
    var dest:ImplementationGuideGlobal = new ImplementationGuideGlobal(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `ImplementationGuideGlobal is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Groupings are arbitrary sub-divisions of content. Typically, they are used to help build Table of Contents automatically.
 */
export class ImplementationGuideDefinitionGrouping extends fhir.BackboneElement implements fhir.IImplementationGuideDefinitionGrouping {
  /**
   * Human readable text describing the package.
   */
  public description?: string|undefined;
  public _description?: fhir.FhirElement|undefined;
  /**
   * The human-readable title to display for the package of resources when rendering the implementation guide.
   */
  public name: string|null;
  public _name?: fhir.FhirElement|undefined;
  /**
   * Default constructor for ImplementationGuideDefinitionGrouping - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IImplementationGuideDefinitionGrouping> = {}) {
    super(source);
    if (source["description"]) { this.description = source.description; }
    if (source["_description"]) { this._description = new fhir.FhirElement(source._description!); }
    this.name = null;
    if (source["name"]) { this.name = source.name; }
    if (this.name === undefined) { this.name = null }
    if (source["_name"]) { this._name = new fhir.FhirElement(source._name!); }
  }
  /**
   * Check if the current ImplementationGuideDefinitionGrouping contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["name"] === undefined) { missingElements.push("name"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ImplementationGuideDefinitionGrouping from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IImplementationGuideDefinitionGrouping):ImplementationGuideDefinitionGrouping {
    var dest:ImplementationGuideDefinitionGrouping = new ImplementationGuideDefinitionGrouping(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `ImplementationGuideDefinitionGrouping is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
 */
export class ImplementationGuideDefinitionResource extends fhir.BackboneElement implements fhir.IImplementationGuideDefinitionResource {
  /**
   * This is mostly used with examples to explain why it is present (though they can have extensive comments in the examples).
   */
  public description?: string|undefined;
  public _description?: fhir.FhirElement|undefined;
  /**
   * Examples: 
   * * StructureDefinition -&gt; Any 
   * * ValueSet -&gt; expansion 
   * * OperationDefinition -&gt; Parameters 
   * * Questionnaire -&gt; QuestionnaireResponse.
   */
  public exampleBoolean?: boolean|undefined;
  public _exampleBoolean?: fhir.FhirElement|undefined;
  /**
   * Examples: 
   * * StructureDefinition -&gt; Any 
   * * ValueSet -&gt; expansion 
   * * OperationDefinition -&gt; Parameters 
   * * Questionnaire -&gt; QuestionnaireResponse.
   */
  public exampleCanonical?: string|undefined;
  public _exampleCanonical?: fhir.FhirElement|undefined;
  /**
   * The resource SHALL be valid against all the versions it is specified to apply to. If the resource referred to is a StructureDefinition, the fhirVersion stated in the StructureDefinition cannot disagree with the version specified here; the specified versions SHALL include the version specified by the StructureDefinition, and may include additional versions using the [applicable-version](extension-structuredefinition-applicable-version.html) extension.
   */
  public fhirVersion?: string[]|undefined;
  public _fhirVersion?: fhir.FhirElement[]|undefined;
  /**
   * This must correspond to a package.id element within this implementation guide.
   */
  public groupingId?: string|undefined;
  public _groupingId?: fhir.FhirElement|undefined;
  /**
   * A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).
   */
  public name?: string|undefined;
  public _name?: fhir.FhirElement|undefined;
  /**
   * Usually this is a relative URL that locates the resource within the implementation guide. If you authoring an implementation guide, and will publish it using the FHIR publication tooling, use a URI that may point to a resource, or to one of various alternative representations (e.g. spreadsheet). The tooling will convert this when it publishes it.
   */
  public reference: fhir.Reference|null;
  /**
   * Default constructor for ImplementationGuideDefinitionResource - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IImplementationGuideDefinitionResource> = {}) {
    super(source);
    if (source["description"]) { this.description = source.description; }
    if (source["_description"]) { this._description = new fhir.FhirElement(source._description!); }
    if (source["exampleBoolean"]) { this.exampleBoolean = source.exampleBoolean; }
    if (source["_exampleBoolean"]) { this._exampleBoolean = new fhir.FhirElement(source._exampleBoolean!); }
    if (source["exampleCanonical"]) { this.exampleCanonical = source.exampleCanonical; }
    if (source["_exampleCanonical"]) { this._exampleCanonical = new fhir.FhirElement(source._exampleCanonical!); }
    if (source["fhirVersion"]) { this.fhirVersion = source.fhirVersion.map((x) => (x)); }
    if (source["_fhirVersion"]) { this._fhirVersion = source._fhirVersion.map((x:Partial<fhir.IFhirElement>) => new fhir.FhirElement(x)); }
    if (source["groupingId"]) { this.groupingId = source.groupingId; }
    if (source["_groupingId"]) { this._groupingId = new fhir.FhirElement(source._groupingId!); }
    if (source["name"]) { this.name = source.name; }
    if (source["_name"]) { this._name = new fhir.FhirElement(source._name!); }
    this.reference = null;
    if (source["reference"]) { this.reference = new fhir.Reference(source.reference!); }
    if (this.reference === undefined) { this.reference = null }
  }
  /**
   * Check if the current ImplementationGuideDefinitionResource contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["reference"] === undefined) { missingElements.push("reference"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ImplementationGuideDefinitionResource from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IImplementationGuideDefinitionResource):ImplementationGuideDefinitionResource {
    var dest:ImplementationGuideDefinitionResource = new ImplementationGuideDefinitionResource(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `ImplementationGuideDefinitionResource is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Pages automatically become sections if they have sub-pages. By convention, the home page is called index.html.
 */
export class ImplementationGuideDefinitionPage extends fhir.BackboneElement implements fhir.IImplementationGuideDefinitionPage {
  /**
   * A code that indicates how the page is generated.
   */
  public generation: ImplementationGuideDefinitionPageGenerationEnum|null;
  public _generation?: fhir.FhirElement|undefined;
  /**
   * The publishing tool will autogenerate source for list (source = n/a) and inject included implementations for include (source = uri of guide to include).
   */
  public nameUrl?: string|undefined;
  public _nameUrl?: fhir.FhirElement|undefined;
  /**
   * The publishing tool will autogenerate source for list (source = n/a) and inject included implementations for include (source = uri of guide to include).
   */
  public nameReference?: fhir.Reference|undefined;
  /**
   * The implementation guide breadcrumbs are generated from this structure.
   */
  public page?: fhir.ImplementationGuideDefinitionPage[]|undefined;
  /**
   * A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc.
   */
  public title: string|null;
  public _title?: fhir.FhirElement|undefined;
  /**
   * Default constructor for ImplementationGuideDefinitionPage - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IImplementationGuideDefinitionPage> = {}) {
    super(source);
    this.generation = null;
    if (source["generation"]) { this.generation = source.generation; }
    if (this.generation === undefined) { this.generation = null }
    if (source["_generation"]) { this._generation = new fhir.FhirElement(source._generation!); }
    if (source["nameUrl"]) { this.nameUrl = source.nameUrl; }
    if (source["_nameUrl"]) { this._nameUrl = new fhir.FhirElement(source._nameUrl!); }
    if (source["nameReference"]) { this.nameReference = new fhir.Reference(source.nameReference!); }
    if (source["page"]) { this.page = source.page.map((x:Partial<fhir.IImplementationGuideDefinitionPage>) => new fhir.ImplementationGuideDefinitionPage(x)); }
    this.title = null;
    if (source["title"]) { this.title = source.title; }
    if (this.title === undefined) { this.title = null }
    if (source["_title"]) { this._title = new fhir.FhirElement(source._title!); }
  }
  /**
   * Check if the current ImplementationGuideDefinitionPage contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["generation"] === undefined) { missingElements.push("generation"); }
    if (this["title"] === undefined) { missingElements.push("title"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ImplementationGuideDefinitionPage from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IImplementationGuideDefinitionPage):ImplementationGuideDefinitionPage {
    var dest:ImplementationGuideDefinitionPage = new ImplementationGuideDefinitionPage(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `ImplementationGuideDefinitionPage is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Defines how IG is built by tools.
 */
export class ImplementationGuideDefinitionParameter extends fhir.BackboneElement implements fhir.IImplementationGuideDefinitionParameter {
  /**
   * apply | path-resource | path-pages | path-tx-cache | expansion-parameter | rule-broken-links | generate-xml | generate-json | generate-turtle | html-template.
   */
  public code: ImplementationGuideDefinitionParameterCodeEnum|null;
  public _code?: fhir.FhirElement|undefined;
  /**
   * Value for named type.
   */
  public value: string|null;
  public _value?: fhir.FhirElement|undefined;
  /**
   * Default constructor for ImplementationGuideDefinitionParameter - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IImplementationGuideDefinitionParameter> = {}) {
    super(source);
    this.code = null;
    if (source["code"]) { this.code = source.code; }
    if (this.code === undefined) { this.code = null }
    if (source["_code"]) { this._code = new fhir.FhirElement(source._code!); }
    this.value = null;
    if (source["value"]) { this.value = source.value; }
    if (this.value === undefined) { this.value = null }
    if (source["_value"]) { this._value = new fhir.FhirElement(source._value!); }
  }
  /**
   * Check if the current ImplementationGuideDefinitionParameter contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["code"] === undefined) { missingElements.push("code"); }
    if (this["value"] === undefined) { missingElements.push("value"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ImplementationGuideDefinitionParameter from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IImplementationGuideDefinitionParameter):ImplementationGuideDefinitionParameter {
    var dest:ImplementationGuideDefinitionParameter = new ImplementationGuideDefinitionParameter(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `ImplementationGuideDefinitionParameter is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * A template for building resources.
 */
export class ImplementationGuideDefinitionTemplate extends fhir.BackboneElement implements fhir.IImplementationGuideDefinitionTemplate {
  /**
   * Type of template specified.
   */
  public code: string|null;
  public _code?: fhir.FhirElement|undefined;
  /**
   * The scope in which the template applies.
   */
  public scope?: string|undefined;
  public _scope?: fhir.FhirElement|undefined;
  /**
   * The source location for the template.
   */
  public source: string|null;
  public _source?: fhir.FhirElement|undefined;
  /**
   * Default constructor for ImplementationGuideDefinitionTemplate - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IImplementationGuideDefinitionTemplate> = {}) {
    super(source);
    this.code = null;
    if (source["code"]) { this.code = source.code; }
    if (this.code === undefined) { this.code = null }
    if (source["_code"]) { this._code = new fhir.FhirElement(source._code!); }
    if (source["scope"]) { this.scope = source.scope; }
    if (source["_scope"]) { this._scope = new fhir.FhirElement(source._scope!); }
    this.source = null;
    if (source["source"]) { this.source = source.source; }
    if (this.source === undefined) { this.source = null }
    if (source["_source"]) { this._source = new fhir.FhirElement(source._source!); }
  }
  /**
   * Check if the current ImplementationGuideDefinitionTemplate contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["code"] === undefined) { missingElements.push("code"); }
    if (this["source"] === undefined) { missingElements.push("source"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ImplementationGuideDefinitionTemplate from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IImplementationGuideDefinitionTemplate):ImplementationGuideDefinitionTemplate {
    var dest:ImplementationGuideDefinitionTemplate = new ImplementationGuideDefinitionTemplate(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `ImplementationGuideDefinitionTemplate is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Principally, this consists of information abuot source resource and file locations, and build parameters and templates.
 */
export class ImplementationGuideDefinition extends fhir.BackboneElement implements fhir.IImplementationGuideDefinition {
  /**
   * Groupings are arbitrary sub-divisions of content. Typically, they are used to help build Table of Contents automatically.
   */
  public grouping?: fhir.ImplementationGuideDefinitionGrouping[]|undefined;
  /**
   * Pages automatically become sections if they have sub-pages. By convention, the home page is called index.html.
   */
  public page?: fhir.ImplementationGuideDefinitionPage|undefined;
  /**
   * Defines how IG is built by tools.
   */
  public parameter?: fhir.ImplementationGuideDefinitionParameter[]|undefined;
  /**
   * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
   */
  public resource: fhir.ImplementationGuideDefinitionResource[]|null;
  /**
   * A template for building resources.
   */
  public template?: fhir.ImplementationGuideDefinitionTemplate[]|undefined;
  /**
   * Default constructor for ImplementationGuideDefinition - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IImplementationGuideDefinition> = {}) {
    super(source);
    if (source["grouping"]) { this.grouping = source.grouping.map((x:Partial<fhir.IImplementationGuideDefinitionGrouping>) => new fhir.ImplementationGuideDefinitionGrouping(x)); }
    if (source["page"]) { this.page = new fhir.ImplementationGuideDefinitionPage(source.page!); }
    if (source["parameter"]) { this.parameter = source.parameter.map((x:Partial<fhir.IImplementationGuideDefinitionParameter>) => new fhir.ImplementationGuideDefinitionParameter(x)); }
    this.resource = null;
    if (source["resource"]) { this.resource = source.resource.map((x:Partial<fhir.IImplementationGuideDefinitionResource>) => new fhir.ImplementationGuideDefinitionResource(x)); }
    if (this.resource === undefined) { this.resource = null }
    if (source["template"]) { this.template = source.template.map((x:Partial<fhir.IImplementationGuideDefinitionTemplate>) => new fhir.ImplementationGuideDefinitionTemplate(x)); }
  }
  /**
   * Check if the current ImplementationGuideDefinition contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if ((!this["resource"]) || (this["resource"].length === 0)) { missingElements.push("resource"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ImplementationGuideDefinition from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IImplementationGuideDefinition):ImplementationGuideDefinition {
    var dest:ImplementationGuideDefinition = new ImplementationGuideDefinition(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `ImplementationGuideDefinition is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
 */
export class ImplementationGuideManifestResource extends fhir.BackboneElement implements fhir.IImplementationGuideManifestResource {
  /**
   * Typically, conformance resources and knowledge resources are directly part of the implementation guide, with their normal meaning, and patient linked resources are usually examples. However this is not always true.
   */
  public exampleBoolean?: boolean|undefined;
  public _exampleBoolean?: fhir.FhirElement|undefined;
  /**
   * Typically, conformance resources and knowledge resources are directly part of the implementation guide, with their normal meaning, and patient linked resources are usually examples. However this is not always true.
   */
  public exampleCanonical?: string|undefined;
  public _exampleCanonical?: fhir.FhirElement|undefined;
  /**
   * Usually this is a relative URL that locates the resource within the implementation guide. If you authoring an implementation guide, and will publish it using the FHIR publication tooling, use a URI that may point to a resource, or to one of various alternative representations (e.g. spreadsheet). The tooling will convert this when it publishes it.
   */
  public reference: fhir.Reference|null;
  /**
   * Appending 'rendering' + "/" + this should resolve to the resource page.
   */
  public relativePath?: string|undefined;
  public _relativePath?: fhir.FhirElement|undefined;
  /**
   * Default constructor for ImplementationGuideManifestResource - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IImplementationGuideManifestResource> = {}) {
    super(source);
    if (source["exampleBoolean"]) { this.exampleBoolean = source.exampleBoolean; }
    if (source["_exampleBoolean"]) { this._exampleBoolean = new fhir.FhirElement(source._exampleBoolean!); }
    if (source["exampleCanonical"]) { this.exampleCanonical = source.exampleCanonical; }
    if (source["_exampleCanonical"]) { this._exampleCanonical = new fhir.FhirElement(source._exampleCanonical!); }
    this.reference = null;
    if (source["reference"]) { this.reference = new fhir.Reference(source.reference!); }
    if (this.reference === undefined) { this.reference = null }
    if (source["relativePath"]) { this.relativePath = source.relativePath; }
    if (source["_relativePath"]) { this._relativePath = new fhir.FhirElement(source._relativePath!); }
  }
  /**
   * Check if the current ImplementationGuideManifestResource contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["reference"] === undefined) { missingElements.push("reference"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ImplementationGuideManifestResource from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IImplementationGuideManifestResource):ImplementationGuideManifestResource {
    var dest:ImplementationGuideManifestResource = new ImplementationGuideManifestResource(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `ImplementationGuideManifestResource is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Information about a page within the IG.
 */
export class ImplementationGuideManifestPage extends fhir.BackboneElement implements fhir.IImplementationGuideManifestPage {
  /**
   * Appending 'rendering' + "/" + page.name + "#" + page.anchor should resolve to the anchor.
   */
  public anchor?: string[]|undefined;
  public _anchor?: fhir.FhirElement[]|undefined;
  /**
   * Appending 'rendering' + "/" + this should resolve to the page.
   */
  public name: string|null;
  public _name?: fhir.FhirElement|undefined;
  /**
   * Label for the page intended for human display.
   */
  public title?: string|undefined;
  public _title?: fhir.FhirElement|undefined;
  /**
   * Default constructor for ImplementationGuideManifestPage - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IImplementationGuideManifestPage> = {}) {
    super(source);
    if (source["anchor"]) { this.anchor = source.anchor.map((x) => (x)); }
    if (source["_anchor"]) { this._anchor = source._anchor.map((x:Partial<fhir.IFhirElement>) => new fhir.FhirElement(x)); }
    this.name = null;
    if (source["name"]) { this.name = source.name; }
    if (this.name === undefined) { this.name = null }
    if (source["_name"]) { this._name = new fhir.FhirElement(source._name!); }
    if (source["title"]) { this.title = source.title; }
    if (source["_title"]) { this._title = new fhir.FhirElement(source._title!); }
  }
  /**
   * Check if the current ImplementationGuideManifestPage contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["name"] === undefined) { missingElements.push("name"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ImplementationGuideManifestPage from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IImplementationGuideManifestPage):ImplementationGuideManifestPage {
    var dest:ImplementationGuideManifestPage = new ImplementationGuideManifestPage(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `ImplementationGuideManifestPage is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Information about an assembled implementation guide, created by the publication tooling.
 */
export class ImplementationGuideManifest extends fhir.BackboneElement implements fhir.IImplementationGuideManifest {
  /**
   * Indicates a relative path to an image that exists within the IG.
   */
  public image?: string[]|undefined;
  public _image?: fhir.FhirElement[]|undefined;
  /**
   * Indicates the relative path of an additional non-page, non-image file that is part of the IG - e.g. zip, jar and similar files that could be the target of a hyperlink in a derived IG.
   */
  public other?: string[]|undefined;
  public _other?: fhir.FhirElement[]|undefined;
  /**
   * Information about a page within the IG.
   */
  public page?: fhir.ImplementationGuideManifestPage[]|undefined;
  /**
   * A pointer to official web page, PDF or other rendering of the implementation guide.
   */
  public rendering?: string|undefined;
  public _rendering?: fhir.FhirElement|undefined;
  /**
   * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
   */
  public resource: fhir.ImplementationGuideManifestResource[]|null;
  /**
   * Default constructor for ImplementationGuideManifest - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IImplementationGuideManifest> = {}) {
    super(source);
    if (source["image"]) { this.image = source.image.map((x) => (x)); }
    if (source["_image"]) { this._image = source._image.map((x:Partial<fhir.IFhirElement>) => new fhir.FhirElement(x)); }
    if (source["other"]) { this.other = source.other.map((x) => (x)); }
    if (source["_other"]) { this._other = source._other.map((x:Partial<fhir.IFhirElement>) => new fhir.FhirElement(x)); }
    if (source["page"]) { this.page = source.page.map((x:Partial<fhir.IImplementationGuideManifestPage>) => new fhir.ImplementationGuideManifestPage(x)); }
    if (source["rendering"]) { this.rendering = source.rendering; }
    if (source["_rendering"]) { this._rendering = new fhir.FhirElement(source._rendering!); }
    this.resource = null;
    if (source["resource"]) { this.resource = source.resource.map((x:Partial<fhir.IImplementationGuideManifestResource>) => new fhir.ImplementationGuideManifestResource(x)); }
    if (this.resource === undefined) { this.resource = null }
  }
  /**
   * Check if the current ImplementationGuideManifest contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if ((!this["resource"]) || (this["resource"].length === 0)) { missingElements.push("resource"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ImplementationGuideManifest from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IImplementationGuideManifest):ImplementationGuideManifest {
    var dest:ImplementationGuideManifest = new ImplementationGuideManifest(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `ImplementationGuideManifest is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
 */
export class ImplementationGuide extends fhir.DomainResource implements fhir.IImplementationGuide {
  /**
   * Resource Type Name
   */
  public override resourceType: "ImplementationGuide";
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  public contact?: fhir.ContactDetail[]|undefined;
  /**
   * A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the implementation guide.
   */
  public copyright?: string|undefined;
  public _copyright?: fhir.FhirElement|undefined;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the implementation guide. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  public date?: string|undefined;
  public _date?: fhir.FhirElement|undefined;
  /**
   * Principally, this consists of information abuot source resource and file locations, and build parameters and templates.
   */
  public definition?: fhir.ImplementationGuideDefinition|undefined;
  /**
   * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
   */
  public dependsOn?: fhir.ImplementationGuideDependsOn[]|undefined;
  /**
   * This description can be used to capture details such as why the implementation guide was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the implementation guide as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the implementation guide is presumed to be the predominant language in the place the implementation guide was created).
   */
  public description?: string|undefined;
  public _description?: fhir.FhirElement|undefined;
  /**
   * Allows filtering of implementation guides that are appropriate for use versus not.
   */
  public experimental?: boolean|undefined;
  public _experimental?: fhir.FhirElement|undefined;
  /**
   * Most implementation guides target a single version - e.g. they describe how to use a particular version, and the profiles and examples etc are valid for that version. But some implementation guides describe how to use multiple different versions of FHIR to solve the same problem, or in concert with each other. Typically, the requirement to support multiple versions arises as implementation matures and different implementation communities are stuck at different versions by regulation or market dynamics.
   */
  public fhirVersion: string[]|null;
  public _fhirVersion?: fhir.FhirElement[]|undefined;
  /**
   * See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.
   */
  public global?: fhir.ImplementationGuideGlobal[]|undefined;
  /**
   * It may be possible for the implementation guide to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  public jurisdiction?: fhir.CodeableConcept[]|undefined;
  /**
   * The license that applies to this Implementation Guide, using an SPDX license code, or 'not-open-source'.
   */
  public license?: string|undefined;
  public _license?: fhir.FhirElement|undefined;
  /**
   * Information about an assembled implementation guide, created by the publication tooling.
   */
  public manifest?: fhir.ImplementationGuideManifest|undefined;
  /**
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  public name: string|null;
  public _name?: fhir.FhirElement|undefined;
  /**
   * Many (if not all) IG publishing tools will require that this element be present. For implementation guides published through HL7 or the FHIR foundation, the FHIR product director assigns package IDs.
   */
  public packageId: string|null;
  public _packageId?: fhir.FhirElement|undefined;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the implementation guide is the organization or individual primarily responsible for the maintenance and upkeep of the implementation guide. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the implementation guide. This item SHOULD be populated unless the information is available from context.
   */
  public publisher?: string|undefined;
  public _publisher?: fhir.FhirElement|undefined;
  /**
   * Allows filtering of implementation guides that are appropriate for use versus not.
   */
  public status: ImplementationGuideStatusEnum|null;
  public _status?: fhir.FhirElement|undefined;
  /**
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  public title?: string|undefined;
  public _title?: fhir.FhirElement|undefined;
  /**
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  public url: string|null;
  public _url?: fhir.FhirElement|undefined;
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  public useContext?: fhir.UsageContext[]|undefined;
  /**
   * There may be different implementation guide instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the implementation guide with the format [url]|[version].
   */
  public version?: string|undefined;
  public _version?: fhir.FhirElement|undefined;
  /**
   * Default constructor for ImplementationGuide - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IImplementationGuide> = {}) {
    super(source);
    this.resourceType = 'ImplementationGuide';
    if (source["contact"]) { this.contact = source.contact.map((x:Partial<fhir.IContactDetail>) => new fhir.ContactDetail(x)); }
    if (source["copyright"]) { this.copyright = source.copyright; }
    if (source["_copyright"]) { this._copyright = new fhir.FhirElement(source._copyright!); }
    if (source["date"]) { this.date = source.date; }
    if (source["_date"]) { this._date = new fhir.FhirElement(source._date!); }
    if (source["definition"]) { this.definition = new fhir.ImplementationGuideDefinition(source.definition!); }
    if (source["dependsOn"]) { this.dependsOn = source.dependsOn.map((x:Partial<fhir.IImplementationGuideDependsOn>) => new fhir.ImplementationGuideDependsOn(x)); }
    if (source["description"]) { this.description = source.description; }
    if (source["_description"]) { this._description = new fhir.FhirElement(source._description!); }
    if (source["experimental"]) { this.experimental = source.experimental; }
    if (source["_experimental"]) { this._experimental = new fhir.FhirElement(source._experimental!); }
    this.fhirVersion = null;
    if (source["fhirVersion"]) { this.fhirVersion = source.fhirVersion.map((x) => (x)); }
    if (this.fhirVersion === undefined) { this.fhirVersion = null }
    if (source["_fhirVersion"]) { this._fhirVersion = source._fhirVersion.map((x:Partial<fhir.IFhirElement>) => new fhir.FhirElement(x)); }
    if (source["global"]) { this.global = source.global.map((x:Partial<fhir.IImplementationGuideGlobal>) => new fhir.ImplementationGuideGlobal(x)); }
    if (source["jurisdiction"]) { this.jurisdiction = source.jurisdiction.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["license"]) { this.license = source.license; }
    if (source["_license"]) { this._license = new fhir.FhirElement(source._license!); }
    if (source["manifest"]) { this.manifest = new fhir.ImplementationGuideManifest(source.manifest!); }
    this.name = null;
    if (source["name"]) { this.name = source.name; }
    if (this.name === undefined) { this.name = null }
    if (source["_name"]) { this._name = new fhir.FhirElement(source._name!); }
    this.packageId = null;
    if (source["packageId"]) { this.packageId = source.packageId; }
    if (this.packageId === undefined) { this.packageId = null }
    if (source["_packageId"]) { this._packageId = new fhir.FhirElement(source._packageId!); }
    if (source["publisher"]) { this.publisher = source.publisher; }
    if (source["_publisher"]) { this._publisher = new fhir.FhirElement(source._publisher!); }
    this.status = null;
    if (source["status"]) { this.status = source.status; }
    if (this.status === undefined) { this.status = null }
    if (source["_status"]) { this._status = new fhir.FhirElement(source._status!); }
    if (source["title"]) { this.title = source.title; }
    if (source["_title"]) { this._title = new fhir.FhirElement(source._title!); }
    this.url = null;
    if (source["url"]) { this.url = source.url; }
    if (this.url === undefined) { this.url = null }
    if (source["_url"]) { this._url = new fhir.FhirElement(source._url!); }
    if (source["useContext"]) { this.useContext = source.useContext.map((x:Partial<fhir.IUsageContext>) => new fhir.UsageContext(x)); }
    if (source["version"]) { this.version = source.version; }
    if (source["_version"]) { this._version = new fhir.FhirElement(source._version!); }
  }
  /**
   * Check if the current ImplementationGuide contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if ((!this["fhirVersion"]) || (this["fhirVersion"].length === 0)) { missingElements.push("fhirVersion"); }
    if (this["name"] === undefined) { missingElements.push("name"); }
    if (this["packageId"] === undefined) { missingElements.push("packageId"); }
    if (this["status"] === undefined) { missingElements.push("status"); }
    if (this["url"] === undefined) { missingElements.push("url"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ImplementationGuide from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IImplementationGuide):ImplementationGuide {
    var dest:ImplementationGuide = new ImplementationGuide(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `ImplementationGuide is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the ImplementationGuide.definition.page.generation field
 */
export enum ImplementationGuideDefinitionPageGenerationEnum {
  HTML = "html",
  MARKDOWN = "markdown",
  XML = "xml",
  GENERATED = "generated",
}
/**
 * Code Values for the ImplementationGuide.definition.parameter.code field
 */
export enum ImplementationGuideDefinitionParameterCodeEnum {
  APPLY = "apply",
  PATH_RESOURCE = "path-resource",
  PATH_PAGES = "path-pages",
  PATH_TX_CACHE = "path-tx-cache",
  EXPANSION_PARAMETER = "expansion-parameter",
  RULE_BROKEN_LINKS = "rule-broken-links",
  GENERATE_XML = "generate-xml",
  GENERATE_JSON = "generate-json",
  GENERATE_TURTLE = "generate-turtle",
  HTML_TEMPLATE = "html-template",
}
/**
 * Code Values for the ImplementationGuide.status field
 */
export enum ImplementationGuideStatusEnum {
  DRAFT = "draft",
  ACTIVE = "active",
  RETIRED = "retired",
  UNKNOWN = "unknown",
}
