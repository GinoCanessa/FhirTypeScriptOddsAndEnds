// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Device

import * as fhir from '../fhir.js'

import { UdiEntryTypeValueSet, UdiEntryTypeValueSetType, UdiEntryTypeValueSetEnum } from '../fhirValueSets/UdiEntryTypeValueSet.js'
import { DeviceNametypeValueSet, DeviceNametypeValueSetType, DeviceNametypeValueSetEnum } from '../fhirValueSets/DeviceNametypeValueSet.js'
import { DeviceStatusValueSet, DeviceStatusValueSetType, DeviceStatusValueSetEnum } from '../fhirValueSets/DeviceStatusValueSet.js'
import { DeviceStatusReasonValueSet, DeviceStatusReasonValueSetType, DeviceStatusReasonValueSetEnum } from '../fhirValueSets/DeviceStatusReasonValueSet.js'
import { DeviceTypeValueSet, DeviceTypeValueSetType, DeviceTypeValueSetEnum } from '../fhirValueSets/DeviceTypeValueSet.js'

/**
 * UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
 */
export type IDeviceUdiCarrier = fhir.IBackboneElement & { 
  /**
   * The device identifier (DI) is a mandatory, fixed portion of a UDI that identifies the labeler and the specific version or model of a device.
   */
  deviceIdentifier?: string|undefined;
  /**
   * Extended properties for primitive element: Device.udiCarrier.deviceIdentifier
   */
  _deviceIdentifier?: fhir.IFhirElement|undefined;
  /**
   * Organization that is charged with issuing UDIs for devices.  For example, the US FDA issuers include :
   * 1) GS1: 
   * http://hl7.org/fhir/NamingSystem/gs1-di, 
   * 2) HIBCC:
   * http://hl7.org/fhir/NamingSystem/hibcc-dI, 
   * 3) ICCBBA for blood containers:
   * http://hl7.org/fhir/NamingSystem/iccbba-blood-di, 
   * 4) ICCBA for other devices:
   * http://hl7.org/fhir/NamingSystem/iccbba-other-di.
   */
  issuer?: string|undefined;
  /**
   * Extended properties for primitive element: Device.udiCarrier.issuer
   */
  _issuer?: fhir.IFhirElement|undefined;
  /**
   * The identity of the authoritative source for UDI generation within a  jurisdiction.  All UDIs are globally unique within a single namespace with the appropriate repository uri as the system.  For example,  UDIs of devices managed in the U.S. by the FDA, the value is  http://hl7.org/fhir/NamingSystem/fda-udi.
   */
  jurisdiction?: string|undefined;
  /**
   * Extended properties for primitive element: Device.udiCarrier.jurisdiction
   */
  _jurisdiction?: fhir.IFhirElement|undefined;
  /**
   * The AIDC form of UDIs should be scanned or otherwise used for the identification of the device whenever possible to minimize errors in records resulting from manual transcriptions. If separate barcodes for DI and PI are present, concatenate the string with DI first and in order of human readable expression on label.
   */
  carrierAIDC?: string|undefined;
  /**
   * Extended properties for primitive element: Device.udiCarrier.carrierAIDC
   */
  _carrierAIDC?: fhir.IFhirElement|undefined;
  /**
   * If separate barcodes for DI and PI are present, concatenate the string with DI first and in order of human readable expression on label.
   */
  carrierHRF?: string|undefined;
  /**
   * Extended properties for primitive element: Device.udiCarrier.carrierHRF
   */
  _carrierHRF?: fhir.IFhirElement|undefined;
  /**
   * A coded entry to indicate how the data was entered.
   */
  entryType?: UdiEntryTypeValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: Device.udiCarrier.entryType
   */
  _entryType?: fhir.IFhirElement|undefined;
}

/**
 * This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
 */
export type IDeviceDeviceName = fhir.IBackboneElement & { 
  /**
   * The name of the device.
   */
  name: string|null;
  /**
   * Extended properties for primitive element: Device.deviceName.name
   */
  _name?: fhir.IFhirElement|undefined;
  /**
   * The type of deviceName.
   * UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName.
   */
  type: DeviceNametypeValueSetEnum|null;
  /**
   * Extended properties for primitive element: Device.deviceName.type
   */
  _type?: fhir.IFhirElement|undefined;
}

/**
 * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
 */
export type IDeviceSpecialization = fhir.IBackboneElement & { 
  /**
   * The standard that is used to operate and communicate.
   */
  systemType: fhir.ICodeableConcept|null;
  /**
   * The version of the standard that is used to operate and communicate.
   */
  version?: string|undefined;
  /**
   * Extended properties for primitive element: Device.specialization.version
   */
  _version?: fhir.IFhirElement|undefined;
}

/**
 * The actual design of the device or software version running on the device.
 */
export type IDeviceVersion = fhir.IBackboneElement & { 
  /**
   * The type of the device version.
   */
  type?: fhir.ICodeableConcept|undefined;
  /**
   * A single component of the device version.
   */
  component?: fhir.IIdentifier|undefined;
  /**
   * The version text.
   */
  value: string|null;
  /**
   * Extended properties for primitive element: Device.version.value
   */
  _value?: fhir.IFhirElement|undefined;
}

/**
 * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
 */
export type IDeviceProperty = fhir.IBackboneElement & { 
  /**
   * Code that specifies the property DeviceDefinitionPropetyCode (Extensible).
   */
  type: fhir.ICodeableConcept|null;
  /**
   * Property value as a quantity.
   */
  valueQuantity?: fhir.IQuantity[]|undefined;
  /**
   * Property value as a code, e.g., NTP4 (synced to NTP).
   */
  valueCode?: fhir.ICodeableConcept[]|undefined;
}

/**
 * A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.
 */
export type IDevice = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "Device";
  /**
   * The barcode string from a barcode present on a device label or package may identify the instance, include names given to the device in local usage, or may identify the type of device. If the identifier identifies the type of device, Device.type element should be used.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * The reference to the definition for the device.
   */
  definition?: fhir.IReference|undefined;
  /**
   * UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
   */
  udiCarrier?: fhir.IDeviceUdiCarrier[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains the codes inactive and entered-in-error that mark the device (record)as not currently valid.
   */
  status?: DeviceStatusValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: Device.status
   */
  _status?: fhir.IFhirElement|undefined;
  /**
   * Reason for the dtatus of the Device availability.
   */
  statusReason?: fhir.ICodeableConcept[]|undefined;
  /**
   * For example, this applies to devices in the United States regulated under *Code of Federal Regulation 21CFRÂ§1271.290(c)*.
   */
  distinctIdentifier?: string|undefined;
  /**
   * Extended properties for primitive element: Device.distinctIdentifier
   */
  _distinctIdentifier?: fhir.IFhirElement|undefined;
  /**
   * A name of the manufacturer.
   */
  manufacturer?: string|undefined;
  /**
   * Extended properties for primitive element: Device.manufacturer
   */
  _manufacturer?: fhir.IFhirElement|undefined;
  /**
   * The date and time when the device was manufactured.
   */
  manufactureDate?: string|undefined;
  /**
   * Extended properties for primitive element: Device.manufactureDate
   */
  _manufactureDate?: fhir.IFhirElement|undefined;
  /**
   * The date and time beyond which this device is no longer valid or should not be used (if applicable).
   */
  expirationDate?: string|undefined;
  /**
   * Extended properties for primitive element: Device.expirationDate
   */
  _expirationDate?: fhir.IFhirElement|undefined;
  /**
   * Lot number assigned by the manufacturer.
   */
  lotNumber?: string|undefined;
  /**
   * Extended properties for primitive element: Device.lotNumber
   */
  _lotNumber?: fhir.IFhirElement|undefined;
  /**
   * Alphanumeric Maximum 20.
   */
  serialNumber?: string|undefined;
  /**
   * Extended properties for primitive element: Device.serialNumber
   */
  _serialNumber?: fhir.IFhirElement|undefined;
  /**
   * This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
   */
  deviceName?: fhir.IDeviceDeviceName[]|undefined;
  /**
   * The model number for the device.
   */
  modelNumber?: string|undefined;
  /**
   * Extended properties for primitive element: Device.modelNumber
   */
  _modelNumber?: fhir.IFhirElement|undefined;
  /**
   * Alphanumeric Maximum 20.
   */
  partNumber?: string|undefined;
  /**
   * Extended properties for primitive element: Device.partNumber
   */
  _partNumber?: fhir.IFhirElement|undefined;
  /**
   * The kind or type of device.
   */
  type?: fhir.ICodeableConcept|undefined;
  /**
   * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
   */
  specialization?: fhir.IDeviceSpecialization[]|undefined;
  /**
   * The actual design of the device or software version running on the device.
   */
  version?: fhir.IDeviceVersion[]|undefined;
  /**
   * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
   */
  property?: fhir.IDeviceProperty[]|undefined;
  /**
   * Patient information, If the device is affixed to a person.
   */
  patient?: fhir.IReference|undefined;
  /**
   * An organization that is responsible for the provision and ongoing maintenance of the device.
   */
  owner?: fhir.IReference|undefined;
  /**
   * used for troubleshooting etc.
   */
  contact?: fhir.IContactPoint[]|undefined;
  /**
   * The place where the device can be found.
   */
  location?: fhir.IReference|undefined;
  /**
   * If the device is running a FHIR server, the network address should  be the Base URL from which a conformance statement may be retrieved.
   */
  url?: string|undefined;
  /**
   * Extended properties for primitive element: Device.url
   */
  _url?: fhir.IFhirElement|undefined;
  /**
   * Descriptive information, usage information or implantation information that is not captured in an existing element.
   */
  note?: fhir.IAnnotation[]|undefined;
  /**
   * Provides additional safety characteristics about a medical device.  For example devices containing latex.
   */
  safety?: fhir.ICodeableConcept[]|undefined;
  /**
   * The parent device.
   */
  parent?: fhir.IReference|undefined;
}

/**
 * UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
 */
export class DeviceUdiCarrier extends fhir.BackboneElement implements IDeviceUdiCarrier {
  /**
   * The device identifier (DI) is a mandatory, fixed portion of a UDI that identifies the labeler and the specific version or model of a device.
   */
  public deviceIdentifier?: string|undefined;
  /**
   * Extended properties for primitive element: Device.udiCarrier.deviceIdentifier
   */
  public _deviceIdentifier?: fhir.FhirElement|undefined;
  /**
   * Organization that is charged with issuing UDIs for devices.  For example, the US FDA issuers include :
   * 1) GS1: 
   * http://hl7.org/fhir/NamingSystem/gs1-di, 
   * 2) HIBCC:
   * http://hl7.org/fhir/NamingSystem/hibcc-dI, 
   * 3) ICCBBA for blood containers:
   * http://hl7.org/fhir/NamingSystem/iccbba-blood-di, 
   * 4) ICCBA for other devices:
   * http://hl7.org/fhir/NamingSystem/iccbba-other-di.
   */
  public issuer?: string|undefined;
  /**
   * Extended properties for primitive element: Device.udiCarrier.issuer
   */
  public _issuer?: fhir.FhirElement|undefined;
  /**
   * The identity of the authoritative source for UDI generation within a  jurisdiction.  All UDIs are globally unique within a single namespace with the appropriate repository uri as the system.  For example,  UDIs of devices managed in the U.S. by the FDA, the value is  http://hl7.org/fhir/NamingSystem/fda-udi.
   */
  public jurisdiction?: string|undefined;
  /**
   * Extended properties for primitive element: Device.udiCarrier.jurisdiction
   */
  public _jurisdiction?: fhir.FhirElement|undefined;
  /**
   * The AIDC form of UDIs should be scanned or otherwise used for the identification of the device whenever possible to minimize errors in records resulting from manual transcriptions. If separate barcodes for DI and PI are present, concatenate the string with DI first and in order of human readable expression on label.
   */
  public carrierAIDC?: string|undefined;
  /**
   * Extended properties for primitive element: Device.udiCarrier.carrierAIDC
   */
  public _carrierAIDC?: fhir.FhirElement|undefined;
  /**
   * If separate barcodes for DI and PI are present, concatenate the string with DI first and in order of human readable expression on label.
   */
  public carrierHRF?: string|undefined;
  /**
   * Extended properties for primitive element: Device.udiCarrier.carrierHRF
   */
  public _carrierHRF?: fhir.FhirElement|undefined;
  /**
   * A coded entry to indicate how the data was entered.
   */
  public entryType?: UdiEntryTypeValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: Device.udiCarrier.entryType
   */
  public _entryType?: fhir.FhirElement|undefined;
  /**
   * Default constructor for DeviceUdiCarrier - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IDeviceUdiCarrier> = { }) {
    super(source);
    if (source['deviceIdentifier']) { this.deviceIdentifier = source.deviceIdentifier; }
    if (source['_deviceIdentifier']) { this._deviceIdentifier = new fhir.FhirElement(source._deviceIdentifier!); }
    if (source['issuer']) { this.issuer = source.issuer; }
    if (source['_issuer']) { this._issuer = new fhir.FhirElement(source._issuer!); }
    if (source['jurisdiction']) { this.jurisdiction = source.jurisdiction; }
    if (source['_jurisdiction']) { this._jurisdiction = new fhir.FhirElement(source._jurisdiction!); }
    if (source['carrierAIDC']) { this.carrierAIDC = source.carrierAIDC; }
    if (source['_carrierAIDC']) { this._carrierAIDC = new fhir.FhirElement(source._carrierAIDC!); }
    if (source['carrierHRF']) { this.carrierHRF = source.carrierHRF; }
    if (source['_carrierHRF']) { this._carrierHRF = new fhir.FhirElement(source._carrierHRF!); }
    if (source['entryType']) { this.entryType = source.entryType; }
    if (source['_entryType']) { this._entryType = new fhir.FhirElement(source._entryType!); }
  }
  /**
   * Required-bound Value Set for entryType
   */
  public static entryTypeRequiredValueSet():UdiEntryTypeValueSetType {
    return UdiEntryTypeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["_deviceIdentifier"]) { results.push(...this._deviceIdentifier.doModelValidation()); }
    if (this["_issuer"]) { results.push(...this._issuer.doModelValidation()); }
    if (this["_jurisdiction"]) { results.push(...this._jurisdiction.doModelValidation()); }
    if (this["_carrierAIDC"]) { results.push(...this._carrierAIDC.doModelValidation()); }
    if (this["_carrierHRF"]) { results.push(...this._carrierHRF.doModelValidation()); }
    if (this["_entryType"]) { results.push(...this._entryType.doModelValidation()); }
    return results;
  }
}

/**
 * This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
 */
export class DeviceDeviceName extends fhir.BackboneElement implements IDeviceDeviceName {
  /**
   * The name of the device.
   */
  public name: string|null;
  /**
   * Extended properties for primitive element: Device.deviceName.name
   */
  public _name?: fhir.FhirElement|undefined;
  /**
   * The type of deviceName.
   * UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName.
   */
  public type: DeviceNametypeValueSetEnum|null;
  /**
   * Extended properties for primitive element: Device.deviceName.type
   */
  public _type?: fhir.FhirElement|undefined;
  /**
   * Default constructor for DeviceDeviceName - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IDeviceDeviceName> = { }) {
    super(source);
    if (source['name']) { this.name = source.name; }
    else { this.name = null; }
    if (source['_name']) { this._name = new fhir.FhirElement(source._name!); }
    if (source['type']) { this.type = source.type; }
    else { this.type = null; }
    if (source['_type']) { this._type = new fhir.FhirElement(source._type!); }
  }
  /**
   * Required-bound Value Set for type
   */
  public static typeRequiredValueSet():DeviceNametypeValueSetType {
    return DeviceNametypeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["name"]) { results.push(["name",'Missing required element: Device.deviceName.name']); }
    if (this["_name"]) { results.push(...this._name.doModelValidation()); }
    if (!this["type"]) { results.push(["type",'Missing required element: Device.deviceName.type']); }
    if (this["_type"]) { results.push(...this._type.doModelValidation()); }
    return results;
  }
}

/**
 * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
 */
export class DeviceSpecialization extends fhir.BackboneElement implements IDeviceSpecialization {
  /**
   * The standard that is used to operate and communicate.
   */
  public systemType: fhir.CodeableConcept|null;
  /**
   * The version of the standard that is used to operate and communicate.
   */
  public version?: string|undefined;
  /**
   * Extended properties for primitive element: Device.specialization.version
   */
  public _version?: fhir.FhirElement|undefined;
  /**
   * Default constructor for DeviceSpecialization - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IDeviceSpecialization> = { }) {
    super(source);
    if (source['systemType']) { this.systemType = new fhir.CodeableConcept(source.systemType!); }
    else { this.systemType = null; }
    if (source['version']) { this.version = source.version; }
    if (source['_version']) { this._version = new fhir.FhirElement(source._version!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["systemType"]) { results.push(["systemType",'Missing required element: Device.specialization.systemType']); }
    if (this["systemType"]) { results.push(...this.systemType.doModelValidation()); }
    if (this["_version"]) { results.push(...this._version.doModelValidation()); }
    return results;
  }
}

/**
 * The actual design of the device or software version running on the device.
 */
export class DeviceVersion extends fhir.BackboneElement implements IDeviceVersion {
  /**
   * The type of the device version.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * A single component of the device version.
   */
  public component?: fhir.Identifier|undefined;
  /**
   * The version text.
   */
  public value: string|null;
  /**
   * Extended properties for primitive element: Device.version.value
   */
  public _value?: fhir.FhirElement|undefined;
  /**
   * Default constructor for DeviceVersion - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IDeviceVersion> = { }) {
    super(source);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    if (source['component']) { this.component = new fhir.Identifier(source.component!); }
    if (source['value']) { this.value = source.value; }
    else { this.value = null; }
    if (source['_value']) { this._value = new fhir.FhirElement(source._value!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (this["component"]) { results.push(...this.component.doModelValidation()); }
    if (!this["value"]) { results.push(["value",'Missing required element: Device.version.value']); }
    if (this["_value"]) { results.push(...this._value.doModelValidation()); }
    return results;
  }
}

/**
 * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
 */
export class DeviceProperty extends fhir.BackboneElement implements IDeviceProperty {
  /**
   * Code that specifies the property DeviceDefinitionPropetyCode (Extensible).
   */
  public type: fhir.CodeableConcept|null;
  /**
   * Property value as a quantity.
   */
  public valueQuantity?: fhir.Quantity[]|undefined;
  /**
   * Property value as a code, e.g., NTP4 (synced to NTP).
   */
  public valueCode?: fhir.CodeableConcept[]|undefined;
  /**
   * Default constructor for DeviceProperty - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IDeviceProperty> = { }) {
    super(source);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    else { this.type = null; }
    if (source['valueQuantity']) { this.valueQuantity = source.valueQuantity.map((x) => new fhir.Quantity(x)); }
    if (source['valueCode']) { this.valueCode = source.valueCode.map((x) => new fhir.CodeableConcept(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["type"]) { results.push(["type",'Missing required element: Device.property.type']); }
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (this["valueQuantity"]) { this.valueQuantity.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["valueCode"]) { this.valueCode.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.
 */
export class Device extends fhir.DomainResource implements IDevice {
  /**
   * Resource Type Name
   */
  public resourceType: "Device";
  /**
   * The barcode string from a barcode present on a device label or package may identify the instance, include names given to the device in local usage, or may identify the type of device. If the identifier identifies the type of device, Device.type element should be used.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * The reference to the definition for the device.
   */
  public definition?: fhir.Reference|undefined;
  /**
   * UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
   */
  public udiCarrier?: fhir.DeviceUdiCarrier[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains the codes inactive and entered-in-error that mark the device (record)as not currently valid.
   */
  public status?: DeviceStatusValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: Device.status
   */
  public _status?: fhir.FhirElement|undefined;
  /**
   * Reason for the dtatus of the Device availability.
   */
  public statusReason?: fhir.CodeableConcept[]|undefined;
  /**
   * For example, this applies to devices in the United States regulated under *Code of Federal Regulation 21CFRÂ§1271.290(c)*.
   */
  public distinctIdentifier?: string|undefined;
  /**
   * Extended properties for primitive element: Device.distinctIdentifier
   */
  public _distinctIdentifier?: fhir.FhirElement|undefined;
  /**
   * A name of the manufacturer.
   */
  public manufacturer?: string|undefined;
  /**
   * Extended properties for primitive element: Device.manufacturer
   */
  public _manufacturer?: fhir.FhirElement|undefined;
  /**
   * The date and time when the device was manufactured.
   */
  public manufactureDate?: string|undefined;
  /**
   * Extended properties for primitive element: Device.manufactureDate
   */
  public _manufactureDate?: fhir.FhirElement|undefined;
  /**
   * The date and time beyond which this device is no longer valid or should not be used (if applicable).
   */
  public expirationDate?: string|undefined;
  /**
   * Extended properties for primitive element: Device.expirationDate
   */
  public _expirationDate?: fhir.FhirElement|undefined;
  /**
   * Lot number assigned by the manufacturer.
   */
  public lotNumber?: string|undefined;
  /**
   * Extended properties for primitive element: Device.lotNumber
   */
  public _lotNumber?: fhir.FhirElement|undefined;
  /**
   * Alphanumeric Maximum 20.
   */
  public serialNumber?: string|undefined;
  /**
   * Extended properties for primitive element: Device.serialNumber
   */
  public _serialNumber?: fhir.FhirElement|undefined;
  /**
   * This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
   */
  public deviceName?: fhir.DeviceDeviceName[]|undefined;
  /**
   * The model number for the device.
   */
  public modelNumber?: string|undefined;
  /**
   * Extended properties for primitive element: Device.modelNumber
   */
  public _modelNumber?: fhir.FhirElement|undefined;
  /**
   * Alphanumeric Maximum 20.
   */
  public partNumber?: string|undefined;
  /**
   * Extended properties for primitive element: Device.partNumber
   */
  public _partNumber?: fhir.FhirElement|undefined;
  /**
   * The kind or type of device.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
   */
  public specialization?: fhir.DeviceSpecialization[]|undefined;
  /**
   * The actual design of the device or software version running on the device.
   */
  public version?: fhir.DeviceVersion[]|undefined;
  /**
   * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
   */
  public property?: fhir.DeviceProperty[]|undefined;
  /**
   * Patient information, If the device is affixed to a person.
   */
  public patient?: fhir.Reference|undefined;
  /**
   * An organization that is responsible for the provision and ongoing maintenance of the device.
   */
  public owner?: fhir.Reference|undefined;
  /**
   * used for troubleshooting etc.
   */
  public contact?: fhir.ContactPoint[]|undefined;
  /**
   * The place where the device can be found.
   */
  public location?: fhir.Reference|undefined;
  /**
   * If the device is running a FHIR server, the network address should  be the Base URL from which a conformance statement may be retrieved.
   */
  public url?: string|undefined;
  /**
   * Extended properties for primitive element: Device.url
   */
  public _url?: fhir.FhirElement|undefined;
  /**
   * Descriptive information, usage information or implantation information that is not captured in an existing element.
   */
  public note?: fhir.Annotation[]|undefined;
  /**
   * Provides additional safety characteristics about a medical device.  For example devices containing latex.
   */
  public safety?: fhir.CodeableConcept[]|undefined;
  /**
   * The parent device.
   */
  public parent?: fhir.Reference|undefined;
  /**
   * Default constructor for Device - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IDevice> = { }) {
    super(source);
    this.resourceType = 'Device';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['definition']) { this.definition = new fhir.Reference(source.definition!); }
    if (source['udiCarrier']) { this.udiCarrier = source.udiCarrier.map((x) => new fhir.DeviceUdiCarrier(x)); }
    if (source['status']) { this.status = source.status; }
    if (source['_status']) { this._status = new fhir.FhirElement(source._status!); }
    if (source['statusReason']) { this.statusReason = source.statusReason.map((x) => new fhir.CodeableConcept(x)); }
    if (source['distinctIdentifier']) { this.distinctIdentifier = source.distinctIdentifier; }
    if (source['_distinctIdentifier']) { this._distinctIdentifier = new fhir.FhirElement(source._distinctIdentifier!); }
    if (source['manufacturer']) { this.manufacturer = source.manufacturer; }
    if (source['_manufacturer']) { this._manufacturer = new fhir.FhirElement(source._manufacturer!); }
    if (source['manufactureDate']) { this.manufactureDate = source.manufactureDate; }
    if (source['_manufactureDate']) { this._manufactureDate = new fhir.FhirElement(source._manufactureDate!); }
    if (source['expirationDate']) { this.expirationDate = source.expirationDate; }
    if (source['_expirationDate']) { this._expirationDate = new fhir.FhirElement(source._expirationDate!); }
    if (source['lotNumber']) { this.lotNumber = source.lotNumber; }
    if (source['_lotNumber']) { this._lotNumber = new fhir.FhirElement(source._lotNumber!); }
    if (source['serialNumber']) { this.serialNumber = source.serialNumber; }
    if (source['_serialNumber']) { this._serialNumber = new fhir.FhirElement(source._serialNumber!); }
    if (source['deviceName']) { this.deviceName = source.deviceName.map((x) => new fhir.DeviceDeviceName(x)); }
    if (source['modelNumber']) { this.modelNumber = source.modelNumber; }
    if (source['_modelNumber']) { this._modelNumber = new fhir.FhirElement(source._modelNumber!); }
    if (source['partNumber']) { this.partNumber = source.partNumber; }
    if (source['_partNumber']) { this._partNumber = new fhir.FhirElement(source._partNumber!); }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    if (source['specialization']) { this.specialization = source.specialization.map((x) => new fhir.DeviceSpecialization(x)); }
    if (source['version']) { this.version = source.version.map((x) => new fhir.DeviceVersion(x)); }
    if (source['property']) { this.property = source.property.map((x) => new fhir.DeviceProperty(x)); }
    if (source['patient']) { this.patient = new fhir.Reference(source.patient!); }
    if (source['owner']) { this.owner = new fhir.Reference(source.owner!); }
    if (source['contact']) { this.contact = source.contact.map((x) => new fhir.ContactPoint(x)); }
    if (source['location']) { this.location = new fhir.Reference(source.location!); }
    if (source['url']) { this.url = source.url; }
    if (source['_url']) { this._url = new fhir.FhirElement(source._url!); }
    if (source['note']) { this.note = source.note.map((x) => new fhir.Annotation(x)); }
    if (source['safety']) { this.safety = source.safety.map((x) => new fhir.CodeableConcept(x)); }
    if (source['parent']) { this.parent = new fhir.Reference(source.parent!); }
  }
  /**
   * Required-bound Value Set for status
   */
  public static statusRequiredValueSet():DeviceStatusValueSetType {
    return DeviceStatusValueSet;
  }
  /**
   * Extensible-bound Value Set for statusReason
   */
  public static statusReasonExtensibleValueSet():DeviceStatusReasonValueSetType {
    return DeviceStatusReasonValueSet;
  }
  /**
   * Example-bound Value Set for type
   */
  public static typeExampleValueSet():DeviceTypeValueSetType {
    return DeviceTypeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: Device.resourceType']); }
    if (this["identifier"]) { this.identifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["definition"]) { results.push(...this.definition.doModelValidation()); }
    if (this["udiCarrier"]) { this.udiCarrier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_status"]) { results.push(...this._status.doModelValidation()); }
    if (this["statusReason"]) { this.statusReason.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_distinctIdentifier"]) { results.push(...this._distinctIdentifier.doModelValidation()); }
    if (this["_manufacturer"]) { results.push(...this._manufacturer.doModelValidation()); }
    if (this["_manufactureDate"]) { results.push(...this._manufactureDate.doModelValidation()); }
    if (this["_expirationDate"]) { results.push(...this._expirationDate.doModelValidation()); }
    if (this["_lotNumber"]) { results.push(...this._lotNumber.doModelValidation()); }
    if (this["_serialNumber"]) { results.push(...this._serialNumber.doModelValidation()); }
    if (this["deviceName"]) { this.deviceName.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_modelNumber"]) { results.push(...this._modelNumber.doModelValidation()); }
    if (this["_partNumber"]) { results.push(...this._partNumber.doModelValidation()); }
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (this["specialization"]) { this.specialization.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["version"]) { this.version.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["property"]) { this.property.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["patient"]) { results.push(...this.patient.doModelValidation()); }
    if (this["owner"]) { results.push(...this.owner.doModelValidation()); }
    if (this["contact"]) { this.contact.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["location"]) { results.push(...this.location.doModelValidation()); }
    if (this["_url"]) { results.push(...this._url.doModelValidation()); }
    if (this["note"]) { this.note.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["safety"]) { this.safety.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["parent"]) { results.push(...this.parent.doModelValidation()); }
    return results;
  }
}
