// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Benefits used to date.
 */
export type ICoverageEligibilityResponseInsuranceItemBenefit = fhir.IBackboneElement & {
  /**
   * The quantity of the benefit which is permitted under the coverage.
   */
  allowedUnsignedInt?: number|undefined;
  _allowedUnsignedInt?: fhir.IFhirElement|undefined;
  /**
   * The quantity of the benefit which is permitted under the coverage.
   */
  allowedString?: string|undefined;
  _allowedString?: fhir.IFhirElement|undefined;
  /**
   * The quantity of the benefit which is permitted under the coverage.
   */
  allowedMoney?: fhir.IMoney|undefined;
  /**
   * For example: deductible, visits, benefit amount.
   */
  type: fhir.ICodeableConcept|null;
  /**
   * The quantity of the benefit which have been consumed to date.
   */
  usedUnsignedInt?: number|undefined;
  _usedUnsignedInt?: fhir.IFhirElement|undefined;
  /**
   * The quantity of the benefit which have been consumed to date.
   */
  usedString?: string|undefined;
  _usedString?: fhir.IFhirElement|undefined;
  /**
   * The quantity of the benefit which have been consumed to date.
   */
  usedMoney?: fhir.IMoney|undefined;
}
/**
 * Benefits and optionally current balances, and authorization details by category or service.
 */
export type ICoverageEligibilityResponseInsuranceItem = fhir.IBackboneElement & {
  /**
   * A boolean flag indicating whether a preauthorization is required prior to actual service delivery.
   */
  authorizationRequired?: boolean|undefined;
  _authorizationRequired?: fhir.IFhirElement|undefined;
  /**
   * Codes or comments regarding information or actions associated with the preauthorization.
   */
  authorizationSupporting?: fhir.ICodeableConcept[]|undefined;
  /**
   * A web location for obtaining requirements or descriptive information regarding the preauthorization.
   */
  authorizationUrl?: string|undefined;
  _authorizationUrl?: fhir.IFhirElement|undefined;
  /**
   * Benefits used to date.
   */
  benefit?: fhir.ICoverageEligibilityResponseInsuranceItemBenefit[]|undefined;
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category?: fhir.ICodeableConcept|undefined;
  /**
   * For example 'DENT2 covers 100% of basic, 50% of major but excludes Ortho, Implants and Cosmetic services'.
   */
  description?: string|undefined;
  _description?: fhir.IFhirElement|undefined;
  /**
   * True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage.
   */
  excluded?: boolean|undefined;
  _excluded?: fhir.IFhirElement|undefined;
  /**
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: fhir.ICodeableConcept[]|undefined;
  /**
   * For example: MED01, or DENT2.
   */
  name?: string|undefined;
  _name?: fhir.IFhirElement|undefined;
  /**
   * Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.
   */
  network?: fhir.ICodeableConcept|undefined;
  /**
   * Code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI).
   */
  productOrService?: fhir.ICodeableConcept|undefined;
  /**
   * The practitioner who is eligible for the provision of the product or service.
   */
  provider?: fhir.IReference|undefined;
  /**
   * The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
   */
  term?: fhir.ICodeableConcept|undefined;
  /**
   * Indicates if the benefits apply to an individual or to the family.
   */
  unit?: fhir.ICodeableConcept|undefined;
}
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export type ICoverageEligibilityResponseInsurance = fhir.IBackboneElement & {
  /**
   * The term of the benefits documented in this response.
   */
  benefitPeriod?: fhir.IPeriod|undefined;
  /**
   * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
   */
  coverage: fhir.IReference|null;
  /**
   * Flag indicating if the coverage provided is inforce currently if no service date(s) specified or for the whole duration of the service dates.
   */
  inforce?: boolean|undefined;
  _inforce?: fhir.IFhirElement|undefined;
  /**
   * Benefits and optionally current balances, and authorization details by category or service.
   */
  item?: fhir.ICoverageEligibilityResponseInsuranceItem[]|undefined;
}
/**
 * Errors encountered during the processing of the request.
 */
export type ICoverageEligibilityResponseError = fhir.IBackboneElement & {
  /**
   * An error code,from a specified code system, which details why the eligibility check could not be performed.
   */
  code: fhir.ICodeableConcept|null;
}
/**
 * This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.
 */
export type ICoverageEligibilityResponse = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "CoverageEligibilityResponse";
  /**
   * The date this resource was created.
   */
  created: string|null;
  _created?: fhir.IFhirElement|undefined;
  /**
   * A human readable description of the status of the adjudication.
   */
  disposition?: string|undefined;
  _disposition?: fhir.IFhirElement|undefined;
  /**
   * Errors encountered during the processing of the request.
   */
  error?: fhir.ICoverageEligibilityResponseError[]|undefined;
  /**
   * May be needed to identify specific jurisdictional forms.
   */
  form?: fhir.ICodeableConcept|undefined;
  /**
   * A unique identifier assigned to this coverage eligiblity request.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
   */
  insurance?: fhir.ICoverageEligibilityResponseInsurance[]|undefined;
  /**
   * The Insurer who issued the coverage in question and is the author of the response.
   */
  insurer: fhir.IReference|null;
  /**
   * The resource may be used to indicate that: the request has been held (queued) for processing; that it has been processed and errors found (error); that no errors were found and that some of the adjudication has been undertaken (partial) or that all of the adjudication has been undertaken (complete).
   */
  outcome: CoverageEligibilityResponseOutcomeEnum|null;
  _outcome?: fhir.IFhirElement|undefined;
  /**
   * The party who is the beneficiary of the supplied coverage and for whom eligibility is sought.
   */
  patient: fhir.IReference|null;
  /**
   * A reference from the Insurer to which these services pertain to be used on further communication and as proof that the request occurred.
   */
  preAuthRef?: string|undefined;
  _preAuthRef?: fhir.IFhirElement|undefined;
  /**
   * Code to specify whether requesting: prior authorization requirements for some service categories or billing codes; benefits for coverages specified or discovered; discovery and return of coverages for the patient; and/or validation that the specified coverage is in-force at the date/period specified or 'now' if not specified.
   */
  purpose: CoverageEligibilityResponsePurposeEnum[]|null;
  _purpose?: fhir.IFhirElement[]|undefined;
  /**
   * Reference to the original request resource.
   */
  request: fhir.IReference|null;
  /**
   * Typically this field would be 1..1 where this party is responsible for the claim but not necessarily professionally responsible for the provision of the individual products and services listed below.
   */
  requestor?: fhir.IReference|undefined;
  /**
   * The date or dates when the enclosed suite of services were performed or completed.
   */
  servicedDate?: string|undefined;
  _servicedDate?: fhir.IFhirElement|undefined;
  /**
   * The date or dates when the enclosed suite of services were performed or completed.
   */
  servicedPeriod?: fhir.IPeriod|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: CoverageEligibilityResponseStatusEnum|null;
  _status?: fhir.IFhirElement|undefined;
}
/**
 * Benefits used to date.
 */
export class CoverageEligibilityResponseInsuranceItemBenefit extends fhir.BackboneElement implements fhir.ICoverageEligibilityResponseInsuranceItemBenefit {
  /**
   * The quantity of the benefit which is permitted under the coverage.
   */
  public allowedUnsignedInt?: number|undefined;
  public _allowedUnsignedInt?: fhir.FhirElement|undefined;
  /**
   * The quantity of the benefit which is permitted under the coverage.
   */
  public allowedString?: string|undefined;
  public _allowedString?: fhir.FhirElement|undefined;
  /**
   * The quantity of the benefit which is permitted under the coverage.
   */
  public allowedMoney?: fhir.Money|undefined;
  /**
   * For example: deductible, visits, benefit amount.
   */
  public type: fhir.CodeableConcept|null;
  /**
   * The quantity of the benefit which have been consumed to date.
   */
  public usedUnsignedInt?: number|undefined;
  public _usedUnsignedInt?: fhir.FhirElement|undefined;
  /**
   * The quantity of the benefit which have been consumed to date.
   */
  public usedString?: string|undefined;
  public _usedString?: fhir.FhirElement|undefined;
  /**
   * The quantity of the benefit which have been consumed to date.
   */
  public usedMoney?: fhir.Money|undefined;
  /**
   * Default constructor for CoverageEligibilityResponseInsuranceItemBenefit - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.ICoverageEligibilityResponseInsuranceItemBenefit> = {}) {
    super(source);
    if (source["allowedUnsignedInt"]) { this.allowedUnsignedInt = source.allowedUnsignedInt; }
    if (source["_allowedUnsignedInt"]) { this._allowedUnsignedInt = new fhir.FhirElement(source._allowedUnsignedInt!); }
    if (source["allowedString"]) { this.allowedString = source.allowedString; }
    if (source["_allowedString"]) { this._allowedString = new fhir.FhirElement(source._allowedString!); }
    if (source["allowedMoney"]) { this.allowedMoney = new fhir.Money(source.allowedMoney!); }
    this.type = null;
    if (source["type"]) { this.type = new fhir.CodeableConcept(source.type!); }
    if (this.type === undefined) { this.type = null }
    if (source["usedUnsignedInt"]) { this.usedUnsignedInt = source.usedUnsignedInt; }
    if (source["_usedUnsignedInt"]) { this._usedUnsignedInt = new fhir.FhirElement(source._usedUnsignedInt!); }
    if (source["usedString"]) { this.usedString = source.usedString; }
    if (source["_usedString"]) { this._usedString = new fhir.FhirElement(source._usedString!); }
    if (source["usedMoney"]) { this.usedMoney = new fhir.Money(source.usedMoney!); }
  }
  /**
   * Check if the current CoverageEligibilityResponseInsuranceItemBenefit contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["type"] === undefined) { missingElements.push("type"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a CoverageEligibilityResponseInsuranceItemBenefit from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.ICoverageEligibilityResponseInsuranceItemBenefit):CoverageEligibilityResponseInsuranceItemBenefit {
    var dest:CoverageEligibilityResponseInsuranceItemBenefit = new CoverageEligibilityResponseInsuranceItemBenefit(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `CoverageEligibilityResponseInsuranceItemBenefit is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Benefits and optionally current balances, and authorization details by category or service.
 */
export class CoverageEligibilityResponseInsuranceItem extends fhir.BackboneElement implements fhir.ICoverageEligibilityResponseInsuranceItem {
  /**
   * A boolean flag indicating whether a preauthorization is required prior to actual service delivery.
   */
  public authorizationRequired?: boolean|undefined;
  public _authorizationRequired?: fhir.FhirElement|undefined;
  /**
   * Codes or comments regarding information or actions associated with the preauthorization.
   */
  public authorizationSupporting?: fhir.CodeableConcept[]|undefined;
  /**
   * A web location for obtaining requirements or descriptive information regarding the preauthorization.
   */
  public authorizationUrl?: string|undefined;
  public _authorizationUrl?: fhir.FhirElement|undefined;
  /**
   * Benefits used to date.
   */
  public benefit?: fhir.CoverageEligibilityResponseInsuranceItemBenefit[]|undefined;
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  public category?: fhir.CodeableConcept|undefined;
  /**
   * For example 'DENT2 covers 100% of basic, 50% of major but excludes Ortho, Implants and Cosmetic services'.
   */
  public description?: string|undefined;
  public _description?: fhir.FhirElement|undefined;
  /**
   * True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage.
   */
  public excluded?: boolean|undefined;
  public _excluded?: fhir.FhirElement|undefined;
  /**
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  public modifier?: fhir.CodeableConcept[]|undefined;
  /**
   * For example: MED01, or DENT2.
   */
  public name?: string|undefined;
  public _name?: fhir.FhirElement|undefined;
  /**
   * Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.
   */
  public network?: fhir.CodeableConcept|undefined;
  /**
   * Code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI).
   */
  public productOrService?: fhir.CodeableConcept|undefined;
  /**
   * The practitioner who is eligible for the provision of the product or service.
   */
  public provider?: fhir.Reference|undefined;
  /**
   * The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
   */
  public term?: fhir.CodeableConcept|undefined;
  /**
   * Indicates if the benefits apply to an individual or to the family.
   */
  public unit?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for CoverageEligibilityResponseInsuranceItem - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.ICoverageEligibilityResponseInsuranceItem> = {}) {
    super(source);
    if (source["authorizationRequired"]) { this.authorizationRequired = source.authorizationRequired; }
    if (source["_authorizationRequired"]) { this._authorizationRequired = new fhir.FhirElement(source._authorizationRequired!); }
    if (source["authorizationSupporting"]) { this.authorizationSupporting = source.authorizationSupporting.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["authorizationUrl"]) { this.authorizationUrl = source.authorizationUrl; }
    if (source["_authorizationUrl"]) { this._authorizationUrl = new fhir.FhirElement(source._authorizationUrl!); }
    if (source["benefit"]) { this.benefit = source.benefit.map((x:Partial<fhir.ICoverageEligibilityResponseInsuranceItemBenefit>) => new fhir.CoverageEligibilityResponseInsuranceItemBenefit(x)); }
    if (source["category"]) { this.category = new fhir.CodeableConcept(source.category!); }
    if (source["description"]) { this.description = source.description; }
    if (source["_description"]) { this._description = new fhir.FhirElement(source._description!); }
    if (source["excluded"]) { this.excluded = source.excluded; }
    if (source["_excluded"]) { this._excluded = new fhir.FhirElement(source._excluded!); }
    if (source["modifier"]) { this.modifier = source.modifier.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["name"]) { this.name = source.name; }
    if (source["_name"]) { this._name = new fhir.FhirElement(source._name!); }
    if (source["network"]) { this.network = new fhir.CodeableConcept(source.network!); }
    if (source["productOrService"]) { this.productOrService = new fhir.CodeableConcept(source.productOrService!); }
    if (source["provider"]) { this.provider = new fhir.Reference(source.provider!); }
    if (source["term"]) { this.term = new fhir.CodeableConcept(source.term!); }
    if (source["unit"]) { this.unit = new fhir.CodeableConcept(source.unit!); }
  }
  /**
   * Check if the current CoverageEligibilityResponseInsuranceItem contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a CoverageEligibilityResponseInsuranceItem from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.ICoverageEligibilityResponseInsuranceItem):CoverageEligibilityResponseInsuranceItem {
    var dest:CoverageEligibilityResponseInsuranceItem = new CoverageEligibilityResponseInsuranceItem(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `CoverageEligibilityResponseInsuranceItem is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export class CoverageEligibilityResponseInsurance extends fhir.BackboneElement implements fhir.ICoverageEligibilityResponseInsurance {
  /**
   * The term of the benefits documented in this response.
   */
  public benefitPeriod?: fhir.Period|undefined;
  /**
   * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
   */
  public coverage: fhir.Reference|null;
  /**
   * Flag indicating if the coverage provided is inforce currently if no service date(s) specified or for the whole duration of the service dates.
   */
  public inforce?: boolean|undefined;
  public _inforce?: fhir.FhirElement|undefined;
  /**
   * Benefits and optionally current balances, and authorization details by category or service.
   */
  public item?: fhir.CoverageEligibilityResponseInsuranceItem[]|undefined;
  /**
   * Default constructor for CoverageEligibilityResponseInsurance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.ICoverageEligibilityResponseInsurance> = {}) {
    super(source);
    if (source["benefitPeriod"]) { this.benefitPeriod = new fhir.Period(source.benefitPeriod!); }
    this.coverage = null;
    if (source["coverage"]) { this.coverage = new fhir.Reference(source.coverage!); }
    if (this.coverage === undefined) { this.coverage = null }
    if (source["inforce"]) { this.inforce = source.inforce; }
    if (source["_inforce"]) { this._inforce = new fhir.FhirElement(source._inforce!); }
    if (source["item"]) { this.item = source.item.map((x:Partial<fhir.ICoverageEligibilityResponseInsuranceItem>) => new fhir.CoverageEligibilityResponseInsuranceItem(x)); }
  }
  /**
   * Check if the current CoverageEligibilityResponseInsurance contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["coverage"] === undefined) { missingElements.push("coverage"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a CoverageEligibilityResponseInsurance from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.ICoverageEligibilityResponseInsurance):CoverageEligibilityResponseInsurance {
    var dest:CoverageEligibilityResponseInsurance = new CoverageEligibilityResponseInsurance(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `CoverageEligibilityResponseInsurance is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Errors encountered during the processing of the request.
 */
export class CoverageEligibilityResponseError extends fhir.BackboneElement implements fhir.ICoverageEligibilityResponseError {
  /**
   * An error code,from a specified code system, which details why the eligibility check could not be performed.
   */
  public code: fhir.CodeableConcept|null;
  /**
   * Default constructor for CoverageEligibilityResponseError - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.ICoverageEligibilityResponseError> = {}) {
    super(source);
    this.code = null;
    if (source["code"]) { this.code = new fhir.CodeableConcept(source.code!); }
    if (this.code === undefined) { this.code = null }
  }
  /**
   * Check if the current CoverageEligibilityResponseError contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["code"] === undefined) { missingElements.push("code"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a CoverageEligibilityResponseError from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.ICoverageEligibilityResponseError):CoverageEligibilityResponseError {
    var dest:CoverageEligibilityResponseError = new CoverageEligibilityResponseError(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `CoverageEligibilityResponseError is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.
 */
export class CoverageEligibilityResponse extends fhir.DomainResource implements fhir.ICoverageEligibilityResponse {
  /**
   * Resource Type Name
   */
  public override resourceType: "CoverageEligibilityResponse";
  /**
   * The date this resource was created.
   */
  public created: string|null;
  public _created?: fhir.FhirElement|undefined;
  /**
   * A human readable description of the status of the adjudication.
   */
  public disposition?: string|undefined;
  public _disposition?: fhir.FhirElement|undefined;
  /**
   * Errors encountered during the processing of the request.
   */
  public error?: fhir.CoverageEligibilityResponseError[]|undefined;
  /**
   * May be needed to identify specific jurisdictional forms.
   */
  public form?: fhir.CodeableConcept|undefined;
  /**
   * A unique identifier assigned to this coverage eligiblity request.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
   */
  public insurance?: fhir.CoverageEligibilityResponseInsurance[]|undefined;
  /**
   * The Insurer who issued the coverage in question and is the author of the response.
   */
  public insurer: fhir.Reference|null;
  /**
   * The resource may be used to indicate that: the request has been held (queued) for processing; that it has been processed and errors found (error); that no errors were found and that some of the adjudication has been undertaken (partial) or that all of the adjudication has been undertaken (complete).
   */
  public outcome: CoverageEligibilityResponseOutcomeEnum|null;
  public _outcome?: fhir.FhirElement|undefined;
  /**
   * The party who is the beneficiary of the supplied coverage and for whom eligibility is sought.
   */
  public patient: fhir.Reference|null;
  /**
   * A reference from the Insurer to which these services pertain to be used on further communication and as proof that the request occurred.
   */
  public preAuthRef?: string|undefined;
  public _preAuthRef?: fhir.FhirElement|undefined;
  /**
   * Code to specify whether requesting: prior authorization requirements for some service categories or billing codes; benefits for coverages specified or discovered; discovery and return of coverages for the patient; and/or validation that the specified coverage is in-force at the date/period specified or 'now' if not specified.
   */
  public purpose: CoverageEligibilityResponsePurposeEnum[]|null;
  public _purpose?: fhir.FhirElement[]|undefined;
  /**
   * Reference to the original request resource.
   */
  public request: fhir.Reference|null;
  /**
   * Typically this field would be 1..1 where this party is responsible for the claim but not necessarily professionally responsible for the provision of the individual products and services listed below.
   */
  public requestor?: fhir.Reference|undefined;
  /**
   * The date or dates when the enclosed suite of services were performed or completed.
   */
  public servicedDate?: string|undefined;
  public _servicedDate?: fhir.FhirElement|undefined;
  /**
   * The date or dates when the enclosed suite of services were performed or completed.
   */
  public servicedPeriod?: fhir.Period|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  public status: CoverageEligibilityResponseStatusEnum|null;
  public _status?: fhir.FhirElement|undefined;
  /**
   * Default constructor for CoverageEligibilityResponse - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.ICoverageEligibilityResponse> = {}) {
    super(source);
    this.resourceType = 'CoverageEligibilityResponse';
    this.created = null;
    if (source["created"]) { this.created = source.created; }
    if (this.created === undefined) { this.created = null }
    if (source["_created"]) { this._created = new fhir.FhirElement(source._created!); }
    if (source["disposition"]) { this.disposition = source.disposition; }
    if (source["_disposition"]) { this._disposition = new fhir.FhirElement(source._disposition!); }
    if (source["error"]) { this.error = source.error.map((x:Partial<fhir.ICoverageEligibilityResponseError>) => new fhir.CoverageEligibilityResponseError(x)); }
    if (source["form"]) { this.form = new fhir.CodeableConcept(source.form!); }
    if (source["identifier"]) { this.identifier = source.identifier.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    if (source["insurance"]) { this.insurance = source.insurance.map((x:Partial<fhir.ICoverageEligibilityResponseInsurance>) => new fhir.CoverageEligibilityResponseInsurance(x)); }
    this.insurer = null;
    if (source["insurer"]) { this.insurer = new fhir.Reference(source.insurer!); }
    if (this.insurer === undefined) { this.insurer = null }
    this.outcome = null;
    if (source["outcome"]) { this.outcome = source.outcome; }
    if (this.outcome === undefined) { this.outcome = null }
    if (source["_outcome"]) { this._outcome = new fhir.FhirElement(source._outcome!); }
    this.patient = null;
    if (source["patient"]) { this.patient = new fhir.Reference(source.patient!); }
    if (this.patient === undefined) { this.patient = null }
    if (source["preAuthRef"]) { this.preAuthRef = source.preAuthRef; }
    if (source["_preAuthRef"]) { this._preAuthRef = new fhir.FhirElement(source._preAuthRef!); }
    this.purpose = null;
    if (source["purpose"]) { this.purpose = source.purpose.map((x) => (x)); }
    if (this.purpose === undefined) { this.purpose = null }
    if (source["_purpose"]) { this._purpose = source._purpose.map((x:Partial<fhir.IFhirElement>) => new fhir.FhirElement(x)); }
    this.request = null;
    if (source["request"]) { this.request = new fhir.Reference(source.request!); }
    if (this.request === undefined) { this.request = null }
    if (source["requestor"]) { this.requestor = new fhir.Reference(source.requestor!); }
    if (source["servicedDate"]) { this.servicedDate = source.servicedDate; }
    if (source["_servicedDate"]) { this._servicedDate = new fhir.FhirElement(source._servicedDate!); }
    if (source["servicedPeriod"]) { this.servicedPeriod = new fhir.Period(source.servicedPeriod!); }
    this.status = null;
    if (source["status"]) { this.status = source.status; }
    if (this.status === undefined) { this.status = null }
    if (source["_status"]) { this._status = new fhir.FhirElement(source._status!); }
  }
  /**
   * Check if the current CoverageEligibilityResponse contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["created"] === undefined) { missingElements.push("created"); }
    if (this["insurer"] === undefined) { missingElements.push("insurer"); }
    if (this["outcome"] === undefined) { missingElements.push("outcome"); }
    if (this["patient"] === undefined) { missingElements.push("patient"); }
    if ((!this["purpose"]) || (this["purpose"].length === 0)) { missingElements.push("purpose"); }
    if (this["request"] === undefined) { missingElements.push("request"); }
    if (this["status"] === undefined) { missingElements.push("status"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a CoverageEligibilityResponse from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.ICoverageEligibilityResponse):CoverageEligibilityResponse {
    var dest:CoverageEligibilityResponse = new CoverageEligibilityResponse(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `CoverageEligibilityResponse is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the CoverageEligibilityResponse.outcome field
 */
export enum CoverageEligibilityResponseOutcomeEnum {
  QUEUED = "queued",
  COMPLETE = "complete",
  ERROR = "error",
  PARTIAL = "partial",
}
/**
 * Code Values for the CoverageEligibilityResponse.purpose field
 */
export enum CoverageEligibilityResponsePurposeEnum {
  AUTH_REQUIREMENTS = "auth-requirements",
  BENEFITS = "benefits",
  DISCOVERY = "discovery",
  VALIDATION = "validation",
}
/**
 * Code Values for the CoverageEligibilityResponse.status field
 */
export enum CoverageEligibilityResponseStatusEnum {
  ACTIVE = "active",
  CANCELLED = "cancelled",
  DRAFT = "draft",
  ENTERED_IN_ERROR = "entered-in-error",
}
