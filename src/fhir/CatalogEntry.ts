// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: CatalogEntry

import * as fhir from '../fhir.js'

import { RelationTypeValueSet, RelationTypeValueSetType, RelationTypeValueSetEnum } from '../fhirValueSets/RelationTypeValueSet.js'
import { PublicationStatusValueSet, PublicationStatusValueSetType, PublicationStatusValueSetEnum } from '../fhirValueSets/PublicationStatusValueSet.js'

/**
 * Used for example, to point to a substance, or to a device used to administer a medication.
 */
export type ICatalogEntryRelatedEntry = fhir.IBackboneElement & { 
  /**
   * The type of relation to the related item: child, parent, packageContent, containerPackage, usedIn, uses, requires, etc.
   */
  relationtype: RelationTypeValueSetEnum|null;
  /**
   * Extended properties for primitive element: CatalogEntry.relatedEntry.relationtype
   */
  _relationtype?: fhir.IFhirElement|undefined;
  /**
   * The reference to the related item.
   */
  item: fhir.IReference|null;
}

/**
 * Catalog entries are wrappers that contextualize items included in a catalog.
 */
export type ICatalogEntry = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "CatalogEntry";
  /**
   * Used in supporting different identifiers for the same product, e.g. manufacturer code and retailer code.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * The type of item - medication, device, service, protocol or other.
   */
  type?: fhir.ICodeableConcept|undefined;
  /**
   * Whether the entry represents an orderable item.
   */
  orderable: boolean|null;
  /**
   * Extended properties for primitive element: CatalogEntry.orderable
   */
  _orderable?: fhir.IFhirElement|undefined;
  /**
   * The item in a catalog or definition.
   */
  referencedItem: fhir.IReference|null;
  /**
   * Used in supporting related concepts, e.g. NDC to RxNorm.
   */
  additionalIdentifier?: fhir.IIdentifier[]|undefined;
  /**
   * Classes of devices, or ATC for medication.
   */
  classification?: fhir.ICodeableConcept[]|undefined;
  /**
   * Used to support catalog exchange even for unsupported products, e.g. getting list of medications even if not prescribable.
   */
  status?: PublicationStatusValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: CatalogEntry.status
   */
  _status?: fhir.IFhirElement|undefined;
  /**
   * The time period in which this catalog entry is expected to be active.
   */
  validityPeriod?: fhir.IPeriod|undefined;
  /**
   * The date until which this catalog entry is expected to be active.
   */
  validTo?: string|undefined;
  /**
   * Extended properties for primitive element: CatalogEntry.validTo
   */
  _validTo?: fhir.IFhirElement|undefined;
  /**
   * Perhaps not needed - if we use fhir resource metadata.
   */
  lastUpdated?: string|undefined;
  /**
   * Extended properties for primitive element: CatalogEntry.lastUpdated
   */
  _lastUpdated?: fhir.IFhirElement|undefined;
  /**
   * Used for examplefor Out of Formulary, or any specifics.
   */
  additionalCharacteristic?: fhir.ICodeableConcept[]|undefined;
  /**
   * User for example for ATC classification, or.
   */
  additionalClassification?: fhir.ICodeableConcept[]|undefined;
  /**
   * Used for example, to point to a substance, or to a device used to administer a medication.
   */
  relatedEntry?: fhir.ICatalogEntryRelatedEntry[]|undefined;
}

/**
 * Used for example, to point to a substance, or to a device used to administer a medication.
 */
export class CatalogEntryRelatedEntry extends fhir.BackboneElement implements ICatalogEntryRelatedEntry {
  /**
   * The type of relation to the related item: child, parent, packageContent, containerPackage, usedIn, uses, requires, etc.
   */
  public relationtype: RelationTypeValueSetEnum|null;
  /**
   * Extended properties for primitive element: CatalogEntry.relatedEntry.relationtype
   */
  public _relationtype?: fhir.FhirElement|undefined;
  /**
   * The reference to the related item.
   */
  public item: fhir.Reference|null;
  /**
   * Default constructor for CatalogEntryRelatedEntry - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ICatalogEntryRelatedEntry> = { }) {
    super(source);
    if (source['relationtype']) { this.relationtype = source.relationtype; }
    else { this.relationtype = null; }
    if (source['_relationtype']) { this._relationtype = new fhir.FhirElement(source._relationtype!); }
    if (source['item']) { this.item = new fhir.Reference(source.item!); }
    else { this.item = null; }
  }
  /**
   * Required-bound Value Set for relationtype
   */
  public static relationtypeRequiredValueSet():RelationTypeValueSetType {
    return RelationTypeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["relationtype"]) { results.push(["relationtype",'Missing required element: CatalogEntry.relatedEntry.relationtype']); }
    if (this["_relationtype"]) { results.push(...this._relationtype.doModelValidation()); }
    if (!this["item"]) { results.push(["item",'Missing required element: CatalogEntry.relatedEntry.item']); }
    if (this["item"]) { results.push(...this.item.doModelValidation()); }
    return results;
  }
}

/**
 * Catalog entries are wrappers that contextualize items included in a catalog.
 */
export class CatalogEntry extends fhir.DomainResource implements ICatalogEntry {
  /**
   * Resource Type Name
   */
  public resourceType: "CatalogEntry";
  /**
   * Used in supporting different identifiers for the same product, e.g. manufacturer code and retailer code.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * The type of item - medication, device, service, protocol or other.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Whether the entry represents an orderable item.
   */
  public orderable: boolean|null;
  /**
   * Extended properties for primitive element: CatalogEntry.orderable
   */
  public _orderable?: fhir.FhirElement|undefined;
  /**
   * The item in a catalog or definition.
   */
  public referencedItem: fhir.Reference|null;
  /**
   * Used in supporting related concepts, e.g. NDC to RxNorm.
   */
  public additionalIdentifier?: fhir.Identifier[]|undefined;
  /**
   * Classes of devices, or ATC for medication.
   */
  public classification?: fhir.CodeableConcept[]|undefined;
  /**
   * Used to support catalog exchange even for unsupported products, e.g. getting list of medications even if not prescribable.
   */
  public status?: PublicationStatusValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: CatalogEntry.status
   */
  public _status?: fhir.FhirElement|undefined;
  /**
   * The time period in which this catalog entry is expected to be active.
   */
  public validityPeriod?: fhir.Period|undefined;
  /**
   * The date until which this catalog entry is expected to be active.
   */
  public validTo?: string|undefined;
  /**
   * Extended properties for primitive element: CatalogEntry.validTo
   */
  public _validTo?: fhir.FhirElement|undefined;
  /**
   * Perhaps not needed - if we use fhir resource metadata.
   */
  public lastUpdated?: string|undefined;
  /**
   * Extended properties for primitive element: CatalogEntry.lastUpdated
   */
  public _lastUpdated?: fhir.FhirElement|undefined;
  /**
   * Used for examplefor Out of Formulary, or any specifics.
   */
  public additionalCharacteristic?: fhir.CodeableConcept[]|undefined;
  /**
   * User for example for ATC classification, or.
   */
  public additionalClassification?: fhir.CodeableConcept[]|undefined;
  /**
   * Used for example, to point to a substance, or to a device used to administer a medication.
   */
  public relatedEntry?: fhir.CatalogEntryRelatedEntry[]|undefined;
  /**
   * Default constructor for CatalogEntry - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ICatalogEntry> = { }) {
    super(source);
    this.resourceType = 'CatalogEntry';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    if (source['orderable']) { this.orderable = source.orderable; }
    else { this.orderable = null; }
    if (source['_orderable']) { this._orderable = new fhir.FhirElement(source._orderable!); }
    if (source['referencedItem']) { this.referencedItem = new fhir.Reference(source.referencedItem!); }
    else { this.referencedItem = null; }
    if (source['additionalIdentifier']) { this.additionalIdentifier = source.additionalIdentifier.map((x) => new fhir.Identifier(x)); }
    if (source['classification']) { this.classification = source.classification.map((x) => new fhir.CodeableConcept(x)); }
    if (source['status']) { this.status = source.status; }
    if (source['_status']) { this._status = new fhir.FhirElement(source._status!); }
    if (source['validityPeriod']) { this.validityPeriod = new fhir.Period(source.validityPeriod!); }
    if (source['validTo']) { this.validTo = source.validTo; }
    if (source['_validTo']) { this._validTo = new fhir.FhirElement(source._validTo!); }
    if (source['lastUpdated']) { this.lastUpdated = source.lastUpdated; }
    if (source['_lastUpdated']) { this._lastUpdated = new fhir.FhirElement(source._lastUpdated!); }
    if (source['additionalCharacteristic']) { this.additionalCharacteristic = source.additionalCharacteristic.map((x) => new fhir.CodeableConcept(x)); }
    if (source['additionalClassification']) { this.additionalClassification = source.additionalClassification.map((x) => new fhir.CodeableConcept(x)); }
    if (source['relatedEntry']) { this.relatedEntry = source.relatedEntry.map((x) => new fhir.CatalogEntryRelatedEntry(x)); }
  }
  /**
   * Required-bound Value Set for status
   */
  public static statusRequiredValueSet():PublicationStatusValueSetType {
    return PublicationStatusValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: CatalogEntry.resourceType']); }
    if (this["identifier"]) { this.identifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (!this["orderable"]) { results.push(["orderable",'Missing required element: CatalogEntry.orderable']); }
    if (this["_orderable"]) { results.push(...this._orderable.doModelValidation()); }
    if (!this["referencedItem"]) { results.push(["referencedItem",'Missing required element: CatalogEntry.referencedItem']); }
    if (this["referencedItem"]) { results.push(...this.referencedItem.doModelValidation()); }
    if (this["additionalIdentifier"]) { this.additionalIdentifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["classification"]) { this.classification.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_status"]) { results.push(...this._status.doModelValidation()); }
    if (this["validityPeriod"]) { results.push(...this.validityPeriod.doModelValidation()); }
    if (this["_validTo"]) { results.push(...this._validTo.doModelValidation()); }
    if (this["_lastUpdated"]) { results.push(...this._lastUpdated.doModelValidation()); }
    if (this["additionalCharacteristic"]) { this.additionalCharacteristic.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["additionalClassification"]) { this.additionalClassification.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["relatedEntry"]) { this.relatedEntry.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}
