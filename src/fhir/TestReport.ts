// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: TestReport

import * as fhir from '../fhir.js'

import { ReportParticipantTypeValueSet, ReportParticipantTypeValueSetType, ReportParticipantTypeValueSetEnum } from '../fhirValueSets/ReportParticipantTypeValueSet.js'
import { ReportActionResultCodesValueSet, ReportActionResultCodesValueSetType, ReportActionResultCodesValueSetEnum } from '../fhirValueSets/ReportActionResultCodesValueSet.js'
import { ReportStatusCodesValueSet, ReportStatusCodesValueSetType, ReportStatusCodesValueSetEnum } from '../fhirValueSets/ReportStatusCodesValueSet.js'
import { ReportResultCodesValueSet, ReportResultCodesValueSetType, ReportResultCodesValueSetEnum } from '../fhirValueSets/ReportResultCodesValueSet.js'

/**
 * A participant in the test execution, either the execution engine, a client, or a server.
 */
export type ITestReportParticipant = fhir.IBackboneElement & { 
  /**
   * The type of participant.
   */
  type: ReportParticipantTypeValueSetEnum|null;
  /**
   * Extended properties for primitive element: TestReport.participant.type
   */
  _type?: fhir.IFhirElement|undefined;
  /**
   * The uri of the participant. An absolute URL is preferred.
   */
  uri: string|null;
  /**
   * Extended properties for primitive element: TestReport.participant.uri
   */
  _uri?: fhir.IFhirElement|undefined;
  /**
   * The display name of the participant.
   */
  display?: string|undefined;
  /**
   * Extended properties for primitive element: TestReport.participant.display
   */
  _display?: fhir.IFhirElement|undefined;
}

/**
 * The operation performed.
 */
export type ITestReportSetupActionOperation = fhir.IBackboneElement & { 
  /**
   * The result of this operation.
   */
  result: ReportActionResultCodesValueSetEnum|null;
  /**
   * Extended properties for primitive element: TestReport.setup.action.operation.result
   */
  _result?: fhir.IFhirElement|undefined;
  /**
   * An explanatory message associated with the result.
   */
  message?: string|undefined;
  /**
   * Extended properties for primitive element: TestReport.setup.action.operation.message
   */
  _message?: fhir.IFhirElement|undefined;
  /**
   * A link to further details on the result.
   */
  detail?: string|undefined;
  /**
   * Extended properties for primitive element: TestReport.setup.action.operation.detail
   */
  _detail?: fhir.IFhirElement|undefined;
}

/**
 * The results of the assertion performed on the previous operations.
 */
export type ITestReportSetupActionAssert = fhir.IBackboneElement & { 
  /**
   * The result of this assertion.
   */
  result: ReportActionResultCodesValueSetEnum|null;
  /**
   * Extended properties for primitive element: TestReport.setup.action.assert.result
   */
  _result?: fhir.IFhirElement|undefined;
  /**
   * An explanatory message associated with the result.
   */
  message?: string|undefined;
  /**
   * Extended properties for primitive element: TestReport.setup.action.assert.message
   */
  _message?: fhir.IFhirElement|undefined;
  /**
   * A link to further details on the result.
   */
  detail?: string|undefined;
  /**
   * Extended properties for primitive element: TestReport.setup.action.assert.detail
   */
  _detail?: fhir.IFhirElement|undefined;
}

/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export type ITestReportSetupAction = fhir.IBackboneElement & { 
  /**
   * The operation performed.
   */
  operation?: fhir.ITestReportSetupActionOperation|undefined;
  /**
   * The results of the assertion performed on the previous operations.
   */
  assert?: fhir.ITestReportSetupActionAssert|undefined;
}

/**
 * The results of the series of required setup operations before the tests were executed.
 */
export type ITestReportSetup = fhir.IBackboneElement & { 
  /**
   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
   */
  action: fhir.ITestReportSetupAction[]|null;
}

/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export type ITestReportTestAction = fhir.IBackboneElement & { 
  /**
   * An operation would involve a REST request to a server.
   */
  operation?: fhir.ITestReportSetupActionOperation|undefined;
  /**
   * The results of the assertion performed on the previous operations.
   */
  assert?: fhir.ITestReportSetupActionAssert|undefined;
}

/**
 * A test executed from the test script.
 */
export type ITestReportTest = fhir.IBackboneElement & { 
  /**
   * The name of this test used for tracking/logging purposes by test engines.
   */
  name?: string|undefined;
  /**
   * Extended properties for primitive element: TestReport.test.name
   */
  _name?: fhir.IFhirElement|undefined;
  /**
   * A short description of the test used by test engines for tracking and reporting purposes.
   */
  description?: string|undefined;
  /**
   * Extended properties for primitive element: TestReport.test.description
   */
  _description?: fhir.IFhirElement|undefined;
  /**
   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
   */
  action: fhir.ITestReportTestAction[]|null;
}

/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export type ITestReportTeardownAction = fhir.IBackboneElement & { 
  /**
   * An operation would involve a REST request to a server.
   */
  operation: fhir.ITestReportSetupActionOperation|null;
}

/**
 * The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
 */
export type ITestReportTeardown = fhir.IBackboneElement & { 
  /**
   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
   */
  action: fhir.ITestReportTeardownAction[]|null;
}

/**
 * A summary of information based on the results of executing a TestScript.
 */
export type ITestReport = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "TestReport";
  /**
   * Identifier for the TestScript assigned for external purposes outside the context of FHIR.
   */
  identifier?: fhir.IIdentifier|undefined;
  /**
   * Not expected to be globally unique.
   */
  name?: string|undefined;
  /**
   * Extended properties for primitive element: TestReport.name
   */
  _name?: fhir.IFhirElement|undefined;
  /**
   * The status represents where the execution is currently within the test script execution life cycle.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ReportStatusCodesValueSetEnum|null;
  /**
   * Extended properties for primitive element: TestReport.status
   */
  _status?: fhir.IFhirElement|undefined;
  /**
   * Ideally this is an absolute URL that is used to identify the version-specific TestScript that was executed, matching the `TestScript.url`.
   */
  testScript: fhir.IReference|null;
  /**
   * The pass and fail result represents a completed test script execution. The pending result represents a test script execution that has not yet started or is currently in progress.
   */
  result: ReportResultCodesValueSetEnum|null;
  /**
   * Extended properties for primitive element: TestReport.result
   */
  _result?: fhir.IFhirElement|undefined;
  /**
   * The final score (percentage of tests passed) resulting from the execution of the TestScript.
   */
  score?: number|undefined;
  /**
   * Extended properties for primitive element: TestReport.score
   */
  _score?: fhir.IFhirElement|undefined;
  /**
   * Usually an organization, but may be an individual. This item SHOULD be populated unless the information is available from context.
   */
  tester?: string|undefined;
  /**
   * Extended properties for primitive element: TestReport.tester
   */
  _tester?: fhir.IFhirElement|undefined;
  /**
   * Additional specific dates may be added as extensions.
   */
  issued?: string|undefined;
  /**
   * Extended properties for primitive element: TestReport.issued
   */
  _issued?: fhir.IFhirElement|undefined;
  /**
   * A participant in the test execution, either the execution engine, a client, or a server.
   */
  participant?: fhir.ITestReportParticipant[]|undefined;
  /**
   * The results of the series of required setup operations before the tests were executed.
   */
  setup?: fhir.ITestReportSetup|undefined;
  /**
   * A test executed from the test script.
   */
  test?: fhir.ITestReportTest[]|undefined;
  /**
   * The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
   */
  teardown?: fhir.ITestReportTeardown|undefined;
}

/**
 * A participant in the test execution, either the execution engine, a client, or a server.
 */
export class TestReportParticipant extends fhir.BackboneElement implements ITestReportParticipant {
  /**
   * The type of participant.
   */
  public type: ReportParticipantTypeValueSetEnum|null;
  /**
   * Extended properties for primitive element: TestReport.participant.type
   */
  public _type?: fhir.FhirElement|undefined;
  /**
   * The uri of the participant. An absolute URL is preferred.
   */
  public uri: string|null;
  /**
   * Extended properties for primitive element: TestReport.participant.uri
   */
  public _uri?: fhir.FhirElement|undefined;
  /**
   * The display name of the participant.
   */
  public display?: string|undefined;
  /**
   * Extended properties for primitive element: TestReport.participant.display
   */
  public _display?: fhir.FhirElement|undefined;
  /**
   * Default constructor for TestReportParticipant - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ITestReportParticipant> = { }) {
    super(source);
    if (source['type']) { this.type = source.type; }
    else { this.type = null; }
    if (source['_type']) { this._type = new fhir.FhirElement(source._type!); }
    if (source['uri']) { this.uri = source.uri; }
    else { this.uri = null; }
    if (source['_uri']) { this._uri = new fhir.FhirElement(source._uri!); }
    if (source['display']) { this.display = source.display; }
    if (source['_display']) { this._display = new fhir.FhirElement(source._display!); }
  }
  /**
   * Required-bound Value Set for type
   */
  public static typeRequiredValueSet():ReportParticipantTypeValueSetType {
    return ReportParticipantTypeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["type"]) { results.push(["type",'Missing required element: TestReport.participant.type']); }
    if (this["_type"]) { results.push(...this._type.doModelValidation()); }
    if (!this["uri"]) { results.push(["uri",'Missing required element: TestReport.participant.uri']); }
    if (this["_uri"]) { results.push(...this._uri.doModelValidation()); }
    if (this["_display"]) { results.push(...this._display.doModelValidation()); }
    return results;
  }
}

/**
 * The operation performed.
 */
export class TestReportSetupActionOperation extends fhir.BackboneElement implements ITestReportSetupActionOperation {
  /**
   * The result of this operation.
   */
  public result: ReportActionResultCodesValueSetEnum|null;
  /**
   * Extended properties for primitive element: TestReport.setup.action.operation.result
   */
  public _result?: fhir.FhirElement|undefined;
  /**
   * An explanatory message associated with the result.
   */
  public message?: string|undefined;
  /**
   * Extended properties for primitive element: TestReport.setup.action.operation.message
   */
  public _message?: fhir.FhirElement|undefined;
  /**
   * A link to further details on the result.
   */
  public detail?: string|undefined;
  /**
   * Extended properties for primitive element: TestReport.setup.action.operation.detail
   */
  public _detail?: fhir.FhirElement|undefined;
  /**
   * Default constructor for TestReportSetupActionOperation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ITestReportSetupActionOperation> = { }) {
    super(source);
    if (source['result']) { this.result = source.result; }
    else { this.result = null; }
    if (source['_result']) { this._result = new fhir.FhirElement(source._result!); }
    if (source['message']) { this.message = source.message; }
    if (source['_message']) { this._message = new fhir.FhirElement(source._message!); }
    if (source['detail']) { this.detail = source.detail; }
    if (source['_detail']) { this._detail = new fhir.FhirElement(source._detail!); }
  }
  /**
   * Required-bound Value Set for result
   */
  public static resultRequiredValueSet():ReportActionResultCodesValueSetType {
    return ReportActionResultCodesValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["result"]) { results.push(["result",'Missing required element: TestReport.setup.action.operation.result']); }
    if (this["_result"]) { results.push(...this._result.doModelValidation()); }
    if (this["_message"]) { results.push(...this._message.doModelValidation()); }
    if (this["_detail"]) { results.push(...this._detail.doModelValidation()); }
    return results;
  }
}

/**
 * The results of the assertion performed on the previous operations.
 */
export class TestReportSetupActionAssert extends fhir.BackboneElement implements ITestReportSetupActionAssert {
  /**
   * The result of this assertion.
   */
  public result: ReportActionResultCodesValueSetEnum|null;
  /**
   * Extended properties for primitive element: TestReport.setup.action.assert.result
   */
  public _result?: fhir.FhirElement|undefined;
  /**
   * An explanatory message associated with the result.
   */
  public message?: string|undefined;
  /**
   * Extended properties for primitive element: TestReport.setup.action.assert.message
   */
  public _message?: fhir.FhirElement|undefined;
  /**
   * A link to further details on the result.
   */
  public detail?: string|undefined;
  /**
   * Extended properties for primitive element: TestReport.setup.action.assert.detail
   */
  public _detail?: fhir.FhirElement|undefined;
  /**
   * Default constructor for TestReportSetupActionAssert - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ITestReportSetupActionAssert> = { }) {
    super(source);
    if (source['result']) { this.result = source.result; }
    else { this.result = null; }
    if (source['_result']) { this._result = new fhir.FhirElement(source._result!); }
    if (source['message']) { this.message = source.message; }
    if (source['_message']) { this._message = new fhir.FhirElement(source._message!); }
    if (source['detail']) { this.detail = source.detail; }
    if (source['_detail']) { this._detail = new fhir.FhirElement(source._detail!); }
  }
  /**
   * Required-bound Value Set for result
   */
  public static resultRequiredValueSet():ReportActionResultCodesValueSetType {
    return ReportActionResultCodesValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["result"]) { results.push(["result",'Missing required element: TestReport.setup.action.assert.result']); }
    if (this["_result"]) { results.push(...this._result.doModelValidation()); }
    if (this["_message"]) { results.push(...this._message.doModelValidation()); }
    if (this["_detail"]) { results.push(...this._detail.doModelValidation()); }
    return results;
  }
}

/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestReportSetupAction extends fhir.BackboneElement implements ITestReportSetupAction {
  /**
   * The operation performed.
   */
  public operation?: fhir.TestReportSetupActionOperation|undefined;
  /**
   * The results of the assertion performed on the previous operations.
   */
  public assert?: fhir.TestReportSetupActionAssert|undefined;
  /**
   * Default constructor for TestReportSetupAction - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ITestReportSetupAction> = { }) {
    super(source);
    if (source['operation']) { this.operation = new fhir.TestReportSetupActionOperation(source.operation!); }
    if (source['assert']) { this.assert = new fhir.TestReportSetupActionAssert(source.assert!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["operation"]) { results.push(...this.operation.doModelValidation()); }
    if (this["assert"]) { results.push(...this.assert.doModelValidation()); }
    return results;
  }
}

/**
 * The results of the series of required setup operations before the tests were executed.
 */
export class TestReportSetup extends fhir.BackboneElement implements ITestReportSetup {
  /**
   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
   */
  public action: fhir.TestReportSetupAction[]|null;
  /**
   * Default constructor for TestReportSetup - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ITestReportSetup> = { }) {
    super(source);
    if (source['action']) { this.action = source.action.map((x) => new fhir.TestReportSetupAction(x)); }
    else { this.action = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if ((!this["action"]) || (this["action"].length === 0)) { results.push(["action",'Missing required element: TestReport.setup.action']); }
    if (this["action"]) { this.action.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestReportTestAction extends fhir.BackboneElement implements ITestReportTestAction {
  /**
   * An operation would involve a REST request to a server.
   */
  public operation?: fhir.TestReportSetupActionOperation|undefined;
  /**
   * The results of the assertion performed on the previous operations.
   */
  public assert?: fhir.TestReportSetupActionAssert|undefined;
  /**
   * Default constructor for TestReportTestAction - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ITestReportTestAction> = { }) {
    super(source);
    if (source['operation']) { this.operation = new fhir.TestReportSetupActionOperation(source.operation!); }
    if (source['assert']) { this.assert = new fhir.TestReportSetupActionAssert(source.assert!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["operation"]) { results.push(...this.operation.doModelValidation()); }
    if (this["assert"]) { results.push(...this.assert.doModelValidation()); }
    return results;
  }
}

/**
 * A test executed from the test script.
 */
export class TestReportTest extends fhir.BackboneElement implements ITestReportTest {
  /**
   * The name of this test used for tracking/logging purposes by test engines.
   */
  public name?: string|undefined;
  /**
   * Extended properties for primitive element: TestReport.test.name
   */
  public _name?: fhir.FhirElement|undefined;
  /**
   * A short description of the test used by test engines for tracking and reporting purposes.
   */
  public description?: string|undefined;
  /**
   * Extended properties for primitive element: TestReport.test.description
   */
  public _description?: fhir.FhirElement|undefined;
  /**
   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
   */
  public action: fhir.TestReportTestAction[]|null;
  /**
   * Default constructor for TestReportTest - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ITestReportTest> = { }) {
    super(source);
    if (source['name']) { this.name = source.name; }
    if (source['_name']) { this._name = new fhir.FhirElement(source._name!); }
    if (source['description']) { this.description = source.description; }
    if (source['_description']) { this._description = new fhir.FhirElement(source._description!); }
    if (source['action']) { this.action = source.action.map((x) => new fhir.TestReportTestAction(x)); }
    else { this.action = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["_name"]) { results.push(...this._name.doModelValidation()); }
    if (this["_description"]) { results.push(...this._description.doModelValidation()); }
    if ((!this["action"]) || (this["action"].length === 0)) { results.push(["action",'Missing required element: TestReport.test.action']); }
    if (this["action"]) { this.action.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestReportTeardownAction extends fhir.BackboneElement implements ITestReportTeardownAction {
  /**
   * An operation would involve a REST request to a server.
   */
  public operation: fhir.TestReportSetupActionOperation|null;
  /**
   * Default constructor for TestReportTeardownAction - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ITestReportTeardownAction> = { }) {
    super(source);
    if (source['operation']) { this.operation = new fhir.TestReportSetupActionOperation(source.operation!); }
    else { this.operation = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["operation"]) { results.push(["operation",'Missing required element: TestReport.teardown.action.operation']); }
    if (this["operation"]) { results.push(...this.operation.doModelValidation()); }
    return results;
  }
}

/**
 * The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
 */
export class TestReportTeardown extends fhir.BackboneElement implements ITestReportTeardown {
  /**
   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
   */
  public action: fhir.TestReportTeardownAction[]|null;
  /**
   * Default constructor for TestReportTeardown - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ITestReportTeardown> = { }) {
    super(source);
    if (source['action']) { this.action = source.action.map((x) => new fhir.TestReportTeardownAction(x)); }
    else { this.action = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if ((!this["action"]) || (this["action"].length === 0)) { results.push(["action",'Missing required element: TestReport.teardown.action']); }
    if (this["action"]) { this.action.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * A summary of information based on the results of executing a TestScript.
 */
export class TestReport extends fhir.DomainResource implements ITestReport {
  /**
   * Resource Type Name
   */
  public resourceType: "TestReport";
  /**
   * Identifier for the TestScript assigned for external purposes outside the context of FHIR.
   */
  public identifier?: fhir.Identifier|undefined;
  /**
   * Not expected to be globally unique.
   */
  public name?: string|undefined;
  /**
   * Extended properties for primitive element: TestReport.name
   */
  public _name?: fhir.FhirElement|undefined;
  /**
   * The status represents where the execution is currently within the test script execution life cycle.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  public status: ReportStatusCodesValueSetEnum|null;
  /**
   * Extended properties for primitive element: TestReport.status
   */
  public _status?: fhir.FhirElement|undefined;
  /**
   * Ideally this is an absolute URL that is used to identify the version-specific TestScript that was executed, matching the `TestScript.url`.
   */
  public testScript: fhir.Reference|null;
  /**
   * The pass and fail result represents a completed test script execution. The pending result represents a test script execution that has not yet started or is currently in progress.
   */
  public result: ReportResultCodesValueSetEnum|null;
  /**
   * Extended properties for primitive element: TestReport.result
   */
  public _result?: fhir.FhirElement|undefined;
  /**
   * The final score (percentage of tests passed) resulting from the execution of the TestScript.
   */
  public score?: number|undefined;
  /**
   * Extended properties for primitive element: TestReport.score
   */
  public _score?: fhir.FhirElement|undefined;
  /**
   * Usually an organization, but may be an individual. This item SHOULD be populated unless the information is available from context.
   */
  public tester?: string|undefined;
  /**
   * Extended properties for primitive element: TestReport.tester
   */
  public _tester?: fhir.FhirElement|undefined;
  /**
   * Additional specific dates may be added as extensions.
   */
  public issued?: string|undefined;
  /**
   * Extended properties for primitive element: TestReport.issued
   */
  public _issued?: fhir.FhirElement|undefined;
  /**
   * A participant in the test execution, either the execution engine, a client, or a server.
   */
  public participant?: fhir.TestReportParticipant[]|undefined;
  /**
   * The results of the series of required setup operations before the tests were executed.
   */
  public setup?: fhir.TestReportSetup|undefined;
  /**
   * A test executed from the test script.
   */
  public test?: fhir.TestReportTest[]|undefined;
  /**
   * The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
   */
  public teardown?: fhir.TestReportTeardown|undefined;
  /**
   * Default constructor for TestReport - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ITestReport> = { }) {
    super(source);
    this.resourceType = 'TestReport';
    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier!); }
    if (source['name']) { this.name = source.name; }
    if (source['_name']) { this._name = new fhir.FhirElement(source._name!); }
    if (source['status']) { this.status = source.status; }
    else { this.status = null; }
    if (source['_status']) { this._status = new fhir.FhirElement(source._status!); }
    if (source['testScript']) { this.testScript = new fhir.Reference(source.testScript!); }
    else { this.testScript = null; }
    if (source['result']) { this.result = source.result; }
    else { this.result = null; }
    if (source['_result']) { this._result = new fhir.FhirElement(source._result!); }
    if (source['score']) { this.score = source.score; }
    if (source['_score']) { this._score = new fhir.FhirElement(source._score!); }
    if (source['tester']) { this.tester = source.tester; }
    if (source['_tester']) { this._tester = new fhir.FhirElement(source._tester!); }
    if (source['issued']) { this.issued = source.issued; }
    if (source['_issued']) { this._issued = new fhir.FhirElement(source._issued!); }
    if (source['participant']) { this.participant = source.participant.map((x) => new fhir.TestReportParticipant(x)); }
    if (source['setup']) { this.setup = new fhir.TestReportSetup(source.setup!); }
    if (source['test']) { this.test = source.test.map((x) => new fhir.TestReportTest(x)); }
    if (source['teardown']) { this.teardown = new fhir.TestReportTeardown(source.teardown!); }
  }
  /**
   * Required-bound Value Set for status
   */
  public static statusRequiredValueSet():ReportStatusCodesValueSetType {
    return ReportStatusCodesValueSet;
  }
  /**
   * Required-bound Value Set for result
   */
  public static resultRequiredValueSet():ReportResultCodesValueSetType {
    return ReportResultCodesValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: TestReport.resourceType']); }
    if (this["identifier"]) { results.push(...this.identifier.doModelValidation()); }
    if (this["_name"]) { results.push(...this._name.doModelValidation()); }
    if (!this["status"]) { results.push(["status",'Missing required element: TestReport.status']); }
    if (this["_status"]) { results.push(...this._status.doModelValidation()); }
    if (!this["testScript"]) { results.push(["testScript",'Missing required element: TestReport.testScript']); }
    if (this["testScript"]) { results.push(...this.testScript.doModelValidation()); }
    if (!this["result"]) { results.push(["result",'Missing required element: TestReport.result']); }
    if (this["_result"]) { results.push(...this._result.doModelValidation()); }
    if (this["_score"]) { results.push(...this._score.doModelValidation()); }
    if (this["_tester"]) { results.push(...this._tester.doModelValidation()); }
    if (this["_issued"]) { results.push(...this._issued.doModelValidation()); }
    if (this["participant"]) { this.participant.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["setup"]) { results.push(...this.setup.doModelValidation()); }
    if (this["test"]) { this.test.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["teardown"]) { results.push(...this.teardown.doModelValidation()); }
    return results;
  }
}
