// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Describes a comparison of an immunization event against published recommendations to determine if the administration is "valid" in relation to those  recommendations.
 */
export type IImmunizationEvaluation = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "ImmunizationEvaluation";
  /**
   * Indicates the authority who published the protocol (e.g. ACIP).
   */
  authority?: fhir.IReference|undefined;
  /**
   * The date the evaluation of the vaccine administration event was performed.
   */
  date?: string|undefined;
  _date?: fhir.IFhirElement|undefined;
  /**
   * Additional information about the evaluation.
   */
  description?: string|undefined;
  _description?: fhir.IFhirElement|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  doseNumberPositiveInt?: number|undefined;
  _doseNumberPositiveInt?: fhir.IFhirElement|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  doseNumberString?: string|undefined;
  _doseNumberString?: fhir.IFhirElement|undefined;
  /**
   * Indicates if the dose is valid or not valid with respect to the published recommendations.
   */
  doseStatus: fhir.ICodeableConcept|null;
  /**
   * Provides an explanation as to why the vaccine administration event is valid or not relative to the published recommendations.
   */
  doseStatusReason?: fhir.ICodeableConcept[]|undefined;
  /**
   * A unique identifier assigned to this immunization evaluation record.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * The vaccine administration event being evaluated.
   */
  immunizationEvent: fhir.IReference|null;
  /**
   * The individual for whom the evaluation is being done.
   */
  patient: fhir.IReference|null;
  /**
   * One possible path to achieve presumed immunity against a disease - within the context of an authority.
   */
  series?: string|undefined;
  _series?: fhir.IFhirElement|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  seriesDosesPositiveInt?: number|undefined;
  _seriesDosesPositiveInt?: fhir.IFhirElement|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  seriesDosesString?: string|undefined;
  _seriesDosesString?: fhir.IFhirElement|undefined;
  /**
   * Indicates the current status of the evaluation of the vaccination administration event.
   */
  status: ImmunizationEvaluationStatusEnum|null;
  _status?: fhir.IFhirElement|undefined;
  /**
   * The vaccine preventable disease the dose is being evaluated against.
   */
  targetDisease: fhir.ICodeableConcept|null;
}
/**
 * Describes a comparison of an immunization event against published recommendations to determine if the administration is "valid" in relation to those  recommendations.
 */
export class ImmunizationEvaluation extends fhir.DomainResource implements fhir.IImmunizationEvaluation {
  /**
   * Resource Type Name
   */
  public override resourceType: "ImmunizationEvaluation";
  /**
   * Indicates the authority who published the protocol (e.g. ACIP).
   */
  public authority?: fhir.Reference|undefined;
  /**
   * The date the evaluation of the vaccine administration event was performed.
   */
  public date?: string|undefined;
  public _date?: fhir.FhirElement|undefined;
  /**
   * Additional information about the evaluation.
   */
  public description?: string|undefined;
  public _description?: fhir.FhirElement|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  public doseNumberPositiveInt?: number|undefined;
  public _doseNumberPositiveInt?: fhir.FhirElement|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  public doseNumberString?: string|undefined;
  public _doseNumberString?: fhir.FhirElement|undefined;
  /**
   * Indicates if the dose is valid or not valid with respect to the published recommendations.
   */
  public doseStatus: fhir.CodeableConcept|null;
  /**
   * Provides an explanation as to why the vaccine administration event is valid or not relative to the published recommendations.
   */
  public doseStatusReason?: fhir.CodeableConcept[]|undefined;
  /**
   * A unique identifier assigned to this immunization evaluation record.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * The vaccine administration event being evaluated.
   */
  public immunizationEvent: fhir.Reference|null;
  /**
   * The individual for whom the evaluation is being done.
   */
  public patient: fhir.Reference|null;
  /**
   * One possible path to achieve presumed immunity against a disease - within the context of an authority.
   */
  public series?: string|undefined;
  public _series?: fhir.FhirElement|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  public seriesDosesPositiveInt?: number|undefined;
  public _seriesDosesPositiveInt?: fhir.FhirElement|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  public seriesDosesString?: string|undefined;
  public _seriesDosesString?: fhir.FhirElement|undefined;
  /**
   * Indicates the current status of the evaluation of the vaccination administration event.
   */
  public status: ImmunizationEvaluationStatusEnum|null;
  public _status?: fhir.FhirElement|undefined;
  /**
   * The vaccine preventable disease the dose is being evaluated against.
   */
  public targetDisease: fhir.CodeableConcept|null;
  /**
   * Default constructor for ImmunizationEvaluation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IImmunizationEvaluation> = {}) {
    super(source);
    this.resourceType = 'ImmunizationEvaluation';
    if (source["authority"]) { this.authority = new fhir.Reference(source.authority!); }
    if (source["date"]) { this.date = source.date; }
    if (source["_date"]) { this._date = new fhir.FhirElement(source._date!); }
    if (source["description"]) { this.description = source.description; }
    if (source["_description"]) { this._description = new fhir.FhirElement(source._description!); }
    if (source["doseNumberPositiveInt"]) { this.doseNumberPositiveInt = source.doseNumberPositiveInt; }
    if (source["_doseNumberPositiveInt"]) { this._doseNumberPositiveInt = new fhir.FhirElement(source._doseNumberPositiveInt!); }
    if (source["doseNumberString"]) { this.doseNumberString = source.doseNumberString; }
    if (source["_doseNumberString"]) { this._doseNumberString = new fhir.FhirElement(source._doseNumberString!); }
    this.doseStatus = null;
    if (source["doseStatus"]) { this.doseStatus = new fhir.CodeableConcept(source.doseStatus!); }
    if (this.doseStatus === undefined) { this.doseStatus = null }
    if (source["doseStatusReason"]) { this.doseStatusReason = source.doseStatusReason.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["identifier"]) { this.identifier = source.identifier.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    this.immunizationEvent = null;
    if (source["immunizationEvent"]) { this.immunizationEvent = new fhir.Reference(source.immunizationEvent!); }
    if (this.immunizationEvent === undefined) { this.immunizationEvent = null }
    this.patient = null;
    if (source["patient"]) { this.patient = new fhir.Reference(source.patient!); }
    if (this.patient === undefined) { this.patient = null }
    if (source["series"]) { this.series = source.series; }
    if (source["_series"]) { this._series = new fhir.FhirElement(source._series!); }
    if (source["seriesDosesPositiveInt"]) { this.seriesDosesPositiveInt = source.seriesDosesPositiveInt; }
    if (source["_seriesDosesPositiveInt"]) { this._seriesDosesPositiveInt = new fhir.FhirElement(source._seriesDosesPositiveInt!); }
    if (source["seriesDosesString"]) { this.seriesDosesString = source.seriesDosesString; }
    if (source["_seriesDosesString"]) { this._seriesDosesString = new fhir.FhirElement(source._seriesDosesString!); }
    this.status = null;
    if (source["status"]) { this.status = source.status; }
    if (this.status === undefined) { this.status = null }
    if (source["_status"]) { this._status = new fhir.FhirElement(source._status!); }
    this.targetDisease = null;
    if (source["targetDisease"]) { this.targetDisease = new fhir.CodeableConcept(source.targetDisease!); }
    if (this.targetDisease === undefined) { this.targetDisease = null }
  }
  /**
   * Check if the current ImmunizationEvaluation contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["doseStatus"] === undefined) { missingElements.push("doseStatus"); }
    if (this["immunizationEvent"] === undefined) { missingElements.push("immunizationEvent"); }
    if (this["patient"] === undefined) { missingElements.push("patient"); }
    if (this["status"] === undefined) { missingElements.push("status"); }
    if (this["targetDisease"] === undefined) { missingElements.push("targetDisease"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ImmunizationEvaluation from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IImmunizationEvaluation):ImmunizationEvaluation {
    var dest:ImmunizationEvaluation = new ImmunizationEvaluation(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `ImmunizationEvaluation is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the ImmunizationEvaluation.status field
 */
export enum ImmunizationEvaluationStatusEnum {
  COMPLETED = "completed",
  ENTERED_IN_ERROR = "entered-in-error",
}
