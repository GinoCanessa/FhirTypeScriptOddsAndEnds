// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Related artifacts such as additional documentation, justification, or bibliographic references.
 */
export type IRelatedArtifact = fhir.IFhirElement & {
  /**
   * Additional structured information about citations should be captured as extensions.
   */
  citation?: string|undefined;
  _citation?: fhir.IFhirElement|undefined;
  /**
   * A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.
   */
  display?: string|undefined;
  _display?: fhir.IFhirElement|undefined;
  /**
   * The document being referenced, represented as an attachment. This is exclusive with the resource element.
   */
  document?: fhir.IAttachment|undefined;
  /**
   * A short label that can be used to reference the citation from elsewhere in the containing artifact, such as a footnote index.
   */
  label?: string|undefined;
  _label?: fhir.IFhirElement|undefined;
  /**
   * If the type is predecessor, this is a reference to the succeeding knowledge resource. If the type is successor, this is a reference to the prior knowledge resource.
   */
  resource?: string|undefined;
  _resource?: fhir.IFhirElement|undefined;
  /**
   * The type of relationship to the related artifact.
   */
  type: RelatedArtifactTypeEnum|null;
  _type?: fhir.IFhirElement|undefined;
  /**
   * If a document or resource element is present, this element SHALL NOT be provided (use the url or reference in the Attachment or resource reference).
   */
  url?: string|undefined;
  _url?: fhir.IFhirElement|undefined;
}
/**
 * Related artifacts such as additional documentation, justification, or bibliographic references.
 */
export class RelatedArtifact extends fhir.FhirElement implements fhir.IRelatedArtifact {
  /**
   * Additional structured information about citations should be captured as extensions.
   */
  public citation?: string|undefined;
  public _citation?: fhir.FhirElement|undefined;
  /**
   * A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.
   */
  public display?: string|undefined;
  public _display?: fhir.FhirElement|undefined;
  /**
   * The document being referenced, represented as an attachment. This is exclusive with the resource element.
   */
  public document?: fhir.Attachment|undefined;
  /**
   * A short label that can be used to reference the citation from elsewhere in the containing artifact, such as a footnote index.
   */
  public label?: string|undefined;
  public _label?: fhir.FhirElement|undefined;
  /**
   * If the type is predecessor, this is a reference to the succeeding knowledge resource. If the type is successor, this is a reference to the prior knowledge resource.
   */
  public resource?: string|undefined;
  public _resource?: fhir.FhirElement|undefined;
  /**
   * The type of relationship to the related artifact.
   */
  public type: RelatedArtifactTypeEnum|null;
  public _type?: fhir.FhirElement|undefined;
  /**
   * If a document or resource element is present, this element SHALL NOT be provided (use the url or reference in the Attachment or resource reference).
   */
  public url?: string|undefined;
  public _url?: fhir.FhirElement|undefined;
  /**
   * Default constructor for RelatedArtifact - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IRelatedArtifact> = {}) {
    super(source);
    if (source["citation"]) { this.citation = source.citation; }
    if (source["_citation"]) { this._citation = new fhir.FhirElement(source._citation!); }
    if (source["display"]) { this.display = source.display; }
    if (source["_display"]) { this._display = new fhir.FhirElement(source._display!); }
    if (source["document"]) { this.document = new fhir.Attachment(source.document!); }
    if (source["label"]) { this.label = source.label; }
    if (source["_label"]) { this._label = new fhir.FhirElement(source._label!); }
    if (source["resource"]) { this.resource = source.resource; }
    if (source["_resource"]) { this._resource = new fhir.FhirElement(source._resource!); }
    this.type = null;
    if (source["type"]) { this.type = source.type; }
    if (this.type === undefined) { this.type = null }
    if (source["_type"]) { this._type = new fhir.FhirElement(source._type!); }
    if (source["url"]) { this.url = source.url; }
    if (source["_url"]) { this._url = new fhir.FhirElement(source._url!); }
  }
  /**
   * Check if the current RelatedArtifact contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["type"] === undefined) { missingElements.push("type"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a RelatedArtifact from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IRelatedArtifact):RelatedArtifact {
    var dest:RelatedArtifact = new RelatedArtifact(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `RelatedArtifact is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the RelatedArtifact.type field
 */
export enum RelatedArtifactTypeEnum {
  DOCUMENTATION = "documentation",
  JUSTIFICATION = "justification",
  CITATION = "citation",
  PREDECESSOR = "predecessor",
  SUCCESSOR = "successor",
  DERIVED_FROM = "derived-from",
  DEPENDS_ON = "depends-on",
  COMPOSED_OF = "composed-of",
}
