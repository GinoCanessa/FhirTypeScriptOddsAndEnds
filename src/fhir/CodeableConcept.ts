// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
  // Restricted to: Patient|Encounter|Observation
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
 */
export interface ICodeableConcept extends fhir.IFhirElement {
  /**
   * Codes may be defined very casually in enumerations, or code lists, up to very formal definitions such as SNOMED CT - see the HL7 v3 Core Principles for more information.  Ordering of codings is undefined and SHALL NOT be used to infer meaning. Generally, at most only one of the coding values will be labeled as UserSelected = true.
   */
  coding?: fhir.ICoding[]|undefined;
  /**
   * Very often the text is the same as a displayName of one of the codings.
   */
  text?: string|undefined;
  _text?: fhir.IFhirElement|undefined;
}
/**
 * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
 */
export class CodeableConcept extends fhir.FhirElement implements fhir.ICodeableConcept {
  /**
   * Codes may be defined very casually in enumerations, or code lists, up to very formal definitions such as SNOMED CT - see the HL7 v3 Core Principles for more information.  Ordering of codings is undefined and SHALL NOT be used to infer meaning. Generally, at most only one of the coding values will be labeled as UserSelected = true.
   */
  public coding?: fhir.Coding[]|undefined;
  /**
   * Very often the text is the same as a displayName of one of the codings.
   */
  public text?: string|undefined;
  public _text?: fhir.FhirElement|undefined;
  /**
   * Default constructor for CodeableConcept - initializes required elements to null.
   */
  constructor() {
    super();
  }
  /**
   * Factory function to create a CodeableConcept from an object that MAY NOT contain all required elements.
   */
  static override FactoryCreate(source:Partial<fhir.ICodeableConcept>):CodeableConcept {
    var dest:Partial<CodeableConcept> = super.FactoryCreate(source) as Partial<CodeableConcept>;
    if (source["coding"] !== undefined) { dest.coding = source.coding.map((x:Partial<fhir.ICoding>) => fhir.Coding.FactoryCreate(x)); }
    if (source["text"] !== undefined) { dest.text = source.text; }
    if (source["_text"] !== undefined) { dest._text = fhir.FhirElement.FactoryCreate(source._text!); }
    return dest as CodeableConcept;
  }
  /**
   * Check if the current CodeableConcept contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a CodeableConcept from an object that MUST contain all required elements.
   */
  static override FactoryCreateStrict(source:fhir.ICodeableConcept):CodeableConcept {
    var dest:CodeableConcept = this.FactoryCreate(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `CodeableConcept is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
}
