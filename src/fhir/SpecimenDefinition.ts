// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SpecimenDefinition

import * as fhir from '../fhir.js'

import { V20371ValueSet, V20371ValueSetType, V20371ValueSetEnum } from '../fhirValueSets/V20371ValueSet.js'
import { ContainerMaterialValueSet, ContainerMaterialValueSetType, ContainerMaterialValueSetEnum } from '../fhirValueSets/ContainerMaterialValueSet.js'
import { SpecimenContainerTypeValueSet, SpecimenContainerTypeValueSetType, SpecimenContainerTypeValueSetEnum } from '../fhirValueSets/SpecimenContainerTypeValueSet.js'
import { ContainerCapValueSet, ContainerCapValueSetType, ContainerCapValueSetEnum } from '../fhirValueSets/ContainerCapValueSet.js'
import { HandlingConditionValueSet, HandlingConditionValueSetType, HandlingConditionValueSetEnum } from '../fhirValueSets/HandlingConditionValueSet.js'
import { V20487ValueSet, V20487ValueSetType, V20487ValueSetEnum } from '../fhirValueSets/V20487ValueSet.js'
import { SpecimenContainedPreferenceValueSet, SpecimenContainedPreferenceValueSetType, SpecimenContainedPreferenceValueSetEnum } from '../fhirValueSets/SpecimenContainedPreferenceValueSet.js'
import { RejectionCriteriaValueSet, RejectionCriteriaValueSetType, RejectionCriteriaValueSetEnum } from '../fhirValueSets/RejectionCriteriaValueSet.js'
import { PreparePatientPriorSpecimenCollectionValueSet, PreparePatientPriorSpecimenCollectionValueSetType, PreparePatientPriorSpecimenCollectionValueSetEnum } from '../fhirValueSets/PreparePatientPriorSpecimenCollectionValueSet.js'
import { SpecimenCollectionValueSet, SpecimenCollectionValueSetType, SpecimenCollectionValueSetEnum } from '../fhirValueSets/SpecimenCollectionValueSet.js'

/**
 * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
 */
export type ISpecimenDefinitionTypeTestedContainerAdditive = fhir.IBackboneElement & { 
  /**
   * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
   */
  additiveCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
   */
  additiveReference?: fhir.IReference|undefined;
}

/**
 * The specimen's container.
 */
export type ISpecimenDefinitionTypeTestedContainer = fhir.IBackboneElement & { 
  /**
   * The type of material of the container.
   */
  material?: fhir.ICodeableConcept|undefined;
  /**
   * The type of container used to contain this kind of specimen.
   */
  type?: fhir.ICodeableConcept|undefined;
  /**
   * Color of container cap.
   */
  cap?: fhir.ICodeableConcept|undefined;
  /**
   * The textual description of the kind of container.
   */
  description?: string|undefined;
  /**
   * Extended properties for primitive element: SpecimenDefinition.typeTested.container.description
   */
  _description?: fhir.IFhirElement|undefined;
  /**
   * The capacity (volume or other measure) of this kind of container.
   */
  capacity?: fhir.IQuantity|undefined;
  /**
   * The minimum volume to be conditioned in the container.
   */
  minimumVolumeQuantity?: fhir.IQuantity|undefined;
  /**
   * The minimum volume to be conditioned in the container.
   */
  minimumVolumeString?: string|undefined;
  /**
   * Extended properties for primitive element: SpecimenDefinition.typeTested.container.minimumVolume[x]
   */
  _minimumVolumeString?: fhir.IFhirElement|undefined;
  /**
   * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
   */
  additive?: fhir.ISpecimenDefinitionTypeTestedContainerAdditive[]|undefined;
  /**
   * Special processing that should be applied to the container for this kind of specimen.
   */
  preparation?: string|undefined;
  /**
   * Extended properties for primitive element: SpecimenDefinition.typeTested.container.preparation
   */
  _preparation?: fhir.IFhirElement|undefined;
}

/**
 * Set of instructions for preservation/transport of the specimen at a defined temperature interval, prior the testing process.
 */
export type ISpecimenDefinitionTypeTestedHandling = fhir.IBackboneElement & { 
  /**
   * It qualifies the interval of temperature, which characterizes an occurrence of handling. Conditions that are not related to temperature may be handled in the instruction element.
   */
  temperatureQualifier?: fhir.ICodeableConcept|undefined;
  /**
   * The temperature interval for this set of handling instructions.
   */
  temperatureRange?: fhir.IRange|undefined;
  /**
   * The maximum time interval of preservation of the specimen with these conditions.
   */
  maxDuration?: fhir.IDuration|undefined;
  /**
   * Additional textual instructions for the preservation or transport of the specimen. For instance, 'Protect from light exposure'.
   */
  instruction?: string|undefined;
  /**
   * Extended properties for primitive element: SpecimenDefinition.typeTested.handling.instruction
   */
  _instruction?: fhir.IFhirElement|undefined;
}

/**
 * Specimen conditioned in a container as expected by the testing laboratory.
 */
export type ISpecimenDefinitionTypeTested = fhir.IBackboneElement & { 
  /**
   * Primary of secondary specimen.
   */
  isDerived?: boolean|undefined;
  /**
   * Extended properties for primitive element: SpecimenDefinition.typeTested.isDerived
   */
  _isDerived?: fhir.IFhirElement|undefined;
  /**
   * The kind of specimen conditioned for testing expected by lab.
   */
  type?: fhir.ICodeableConcept|undefined;
  /**
   * The preference for this type of conditioned specimen.
   */
  preference: SpecimenContainedPreferenceValueSetEnum|null;
  /**
   * Extended properties for primitive element: SpecimenDefinition.typeTested.preference
   */
  _preference?: fhir.IFhirElement|undefined;
  /**
   * The specimen's container.
   */
  container?: fhir.ISpecimenDefinitionTypeTestedContainer|undefined;
  /**
   * Requirements for delivery and special handling of this kind of conditioned specimen.
   */
  requirement?: string|undefined;
  /**
   * Extended properties for primitive element: SpecimenDefinition.typeTested.requirement
   */
  _requirement?: fhir.IFhirElement|undefined;
  /**
   * The usual time that a specimen of this kind is retained after the ordered tests are completed, for the purpose of additional testing.
   */
  retentionTime?: fhir.IDuration|undefined;
  /**
   * Criterion for rejection of the specimen in its container by the laboratory.
   */
  rejectionCriterion?: fhir.ICodeableConcept[]|undefined;
  /**
   * Set of instructions for preservation/transport of the specimen at a defined temperature interval, prior the testing process.
   */
  handling?: fhir.ISpecimenDefinitionTypeTestedHandling[]|undefined;
}

/**
 * A kind of specimen with associated set of requirements.
 */
export type ISpecimenDefinition = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "SpecimenDefinition";
  /**
   * A business identifier associated with the kind of specimen.
   */
  identifier?: fhir.IIdentifier|undefined;
  /**
   * The kind of material to be collected.
   */
  typeCollected?: fhir.ICodeableConcept|undefined;
  /**
   * Preparation of the patient for specimen collection.
   */
  patientPreparation?: fhir.ICodeableConcept[]|undefined;
  /**
   * Time aspect of specimen collection (duration or offset).
   */
  timeAspect?: string|undefined;
  /**
   * Extended properties for primitive element: SpecimenDefinition.timeAspect
   */
  _timeAspect?: fhir.IFhirElement|undefined;
  /**
   * The action to be performed for collecting the specimen.
   */
  collection?: fhir.ICodeableConcept[]|undefined;
  /**
   * Specimen conditioned in a container as expected by the testing laboratory.
   */
  typeTested?: fhir.ISpecimenDefinitionTypeTested[]|undefined;
}

/**
 * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
 */
export class SpecimenDefinitionTypeTestedContainerAdditive extends fhir.BackboneElement implements ISpecimenDefinitionTypeTestedContainerAdditive {
  /**
   * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
   */
  public additiveCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
   */
  public additiveReference?: fhir.Reference|undefined;
  /**
   * Default constructor for SpecimenDefinitionTypeTestedContainerAdditive - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISpecimenDefinitionTypeTestedContainerAdditive> = { }) {
    super(source);
    if (source['additiveCodeableConcept']) { this.additiveCodeableConcept = new fhir.CodeableConcept(source.additiveCodeableConcept!); }
    if (source['additiveReference']) { this.additiveReference = new fhir.Reference(source.additiveReference!); }
  }
  /**
   * Example-bound Value Set for additiveCodeableConcept
   */
  public static additiveCodeableConceptExampleValueSet():V20371ValueSetType {
    return V20371ValueSet;
  }
  /**
   * Example-bound Value Set for additiveReference
   */
  public static additiveReferenceExampleValueSet():V20371ValueSetType {
    return V20371ValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["additiveCodeableConcept"]) { results.push(...this.additiveCodeableConcept.doModelValidation()); }
    if (this["additiveReference"]) { results.push(...this.additiveReference.doModelValidation()); }
    return results;
  }
}

/**
 * The specimen's container.
 */
export class SpecimenDefinitionTypeTestedContainer extends fhir.BackboneElement implements ISpecimenDefinitionTypeTestedContainer {
  /**
   * The type of material of the container.
   */
  public material?: fhir.CodeableConcept|undefined;
  /**
   * The type of container used to contain this kind of specimen.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Color of container cap.
   */
  public cap?: fhir.CodeableConcept|undefined;
  /**
   * The textual description of the kind of container.
   */
  public description?: string|undefined;
  /**
   * Extended properties for primitive element: SpecimenDefinition.typeTested.container.description
   */
  public _description?: fhir.FhirElement|undefined;
  /**
   * The capacity (volume or other measure) of this kind of container.
   */
  public capacity?: fhir.Quantity|undefined;
  /**
   * The minimum volume to be conditioned in the container.
   */
  public minimumVolumeQuantity?: fhir.Quantity|undefined;
  /**
   * The minimum volume to be conditioned in the container.
   */
  public minimumVolumeString?: string|undefined;
  /**
   * Extended properties for primitive element: SpecimenDefinition.typeTested.container.minimumVolume[x]
   */
  public _minimumVolumeString?: fhir.FhirElement|undefined;
  /**
   * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
   */
  public additive?: fhir.SpecimenDefinitionTypeTestedContainerAdditive[]|undefined;
  /**
   * Special processing that should be applied to the container for this kind of specimen.
   */
  public preparation?: string|undefined;
  /**
   * Extended properties for primitive element: SpecimenDefinition.typeTested.container.preparation
   */
  public _preparation?: fhir.FhirElement|undefined;
  /**
   * Default constructor for SpecimenDefinitionTypeTestedContainer - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISpecimenDefinitionTypeTestedContainer> = { }) {
    super(source);
    if (source['material']) { this.material = new fhir.CodeableConcept(source.material!); }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    if (source['cap']) { this.cap = new fhir.CodeableConcept(source.cap!); }
    if (source['description']) { this.description = source.description; }
    if (source['_description']) { this._description = new fhir.FhirElement(source._description!); }
    if (source['capacity']) { this.capacity = new fhir.Quantity(source.capacity!); }
    if (source['minimumVolumeQuantity']) { this.minimumVolumeQuantity = new fhir.Quantity(source.minimumVolumeQuantity!); }
    if (source['minimumVolumeString']) { this.minimumVolumeString = source.minimumVolumeString; }
    if (source['_minimumVolumeString']) { this._minimumVolumeString = new fhir.FhirElement(source._minimumVolumeString!); }
    if (source['additive']) { this.additive = source.additive.map((x) => new fhir.SpecimenDefinitionTypeTestedContainerAdditive(x)); }
    if (source['preparation']) { this.preparation = source.preparation; }
    if (source['_preparation']) { this._preparation = new fhir.FhirElement(source._preparation!); }
  }
  /**
   * Example-bound Value Set for material
   */
  public static materialExampleValueSet():ContainerMaterialValueSetType {
    return ContainerMaterialValueSet;
  }
  /**
   * Example-bound Value Set for type
   */
  public static typeExampleValueSet():SpecimenContainerTypeValueSetType {
    return SpecimenContainerTypeValueSet;
  }
  /**
   * Example-bound Value Set for cap
   */
  public static capExampleValueSet():ContainerCapValueSetType {
    return ContainerCapValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["material"]) { results.push(...this.material.doModelValidation()); }
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (this["cap"]) { results.push(...this.cap.doModelValidation()); }
    if (this["_description"]) { results.push(...this._description.doModelValidation()); }
    if (this["capacity"]) { results.push(...this.capacity.doModelValidation()); }
    if (this["minimumVolumeQuantity"]) { results.push(...this.minimumVolumeQuantity.doModelValidation()); }
    if (this["_minimumVolumeString"]) { results.push(...this._minimumVolumeString.doModelValidation()); }
    if (this["additive"]) { this.additive.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_preparation"]) { results.push(...this._preparation.doModelValidation()); }
    return results;
  }
}

/**
 * Set of instructions for preservation/transport of the specimen at a defined temperature interval, prior the testing process.
 */
export class SpecimenDefinitionTypeTestedHandling extends fhir.BackboneElement implements ISpecimenDefinitionTypeTestedHandling {
  /**
   * It qualifies the interval of temperature, which characterizes an occurrence of handling. Conditions that are not related to temperature may be handled in the instruction element.
   */
  public temperatureQualifier?: fhir.CodeableConcept|undefined;
  /**
   * The temperature interval for this set of handling instructions.
   */
  public temperatureRange?: fhir.Range|undefined;
  /**
   * The maximum time interval of preservation of the specimen with these conditions.
   */
  public maxDuration?: fhir.Duration|undefined;
  /**
   * Additional textual instructions for the preservation or transport of the specimen. For instance, 'Protect from light exposure'.
   */
  public instruction?: string|undefined;
  /**
   * Extended properties for primitive element: SpecimenDefinition.typeTested.handling.instruction
   */
  public _instruction?: fhir.FhirElement|undefined;
  /**
   * Default constructor for SpecimenDefinitionTypeTestedHandling - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISpecimenDefinitionTypeTestedHandling> = { }) {
    super(source);
    if (source['temperatureQualifier']) { this.temperatureQualifier = new fhir.CodeableConcept(source.temperatureQualifier!); }
    if (source['temperatureRange']) { this.temperatureRange = new fhir.Range(source.temperatureRange!); }
    if (source['maxDuration']) { this.maxDuration = new fhir.Duration(source.maxDuration!); }
    if (source['instruction']) { this.instruction = source.instruction; }
    if (source['_instruction']) { this._instruction = new fhir.FhirElement(source._instruction!); }
  }
  /**
   * Example-bound Value Set for temperatureQualifier
   */
  public static temperatureQualifierExampleValueSet():HandlingConditionValueSetType {
    return HandlingConditionValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["temperatureQualifier"]) { results.push(...this.temperatureQualifier.doModelValidation()); }
    if (this["temperatureRange"]) { results.push(...this.temperatureRange.doModelValidation()); }
    if (this["maxDuration"]) { results.push(...this.maxDuration.doModelValidation()); }
    if (this["_instruction"]) { results.push(...this._instruction.doModelValidation()); }
    return results;
  }
}

/**
 * Specimen conditioned in a container as expected by the testing laboratory.
 */
export class SpecimenDefinitionTypeTested extends fhir.BackboneElement implements ISpecimenDefinitionTypeTested {
  /**
   * Primary of secondary specimen.
   */
  public isDerived?: boolean|undefined;
  /**
   * Extended properties for primitive element: SpecimenDefinition.typeTested.isDerived
   */
  public _isDerived?: fhir.FhirElement|undefined;
  /**
   * The kind of specimen conditioned for testing expected by lab.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * The preference for this type of conditioned specimen.
   */
  public preference: SpecimenContainedPreferenceValueSetEnum|null;
  /**
   * Extended properties for primitive element: SpecimenDefinition.typeTested.preference
   */
  public _preference?: fhir.FhirElement|undefined;
  /**
   * The specimen's container.
   */
  public container?: fhir.SpecimenDefinitionTypeTestedContainer|undefined;
  /**
   * Requirements for delivery and special handling of this kind of conditioned specimen.
   */
  public requirement?: string|undefined;
  /**
   * Extended properties for primitive element: SpecimenDefinition.typeTested.requirement
   */
  public _requirement?: fhir.FhirElement|undefined;
  /**
   * The usual time that a specimen of this kind is retained after the ordered tests are completed, for the purpose of additional testing.
   */
  public retentionTime?: fhir.Duration|undefined;
  /**
   * Criterion for rejection of the specimen in its container by the laboratory.
   */
  public rejectionCriterion?: fhir.CodeableConcept[]|undefined;
  /**
   * Set of instructions for preservation/transport of the specimen at a defined temperature interval, prior the testing process.
   */
  public handling?: fhir.SpecimenDefinitionTypeTestedHandling[]|undefined;
  /**
   * Default constructor for SpecimenDefinitionTypeTested - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISpecimenDefinitionTypeTested> = { }) {
    super(source);
    if (source['isDerived']) { this.isDerived = source.isDerived; }
    if (source['_isDerived']) { this._isDerived = new fhir.FhirElement(source._isDerived!); }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    if (source['preference']) { this.preference = source.preference; }
    else { this.preference = null; }
    if (source['_preference']) { this._preference = new fhir.FhirElement(source._preference!); }
    if (source['container']) { this.container = new fhir.SpecimenDefinitionTypeTestedContainer(source.container!); }
    if (source['requirement']) { this.requirement = source.requirement; }
    if (source['_requirement']) { this._requirement = new fhir.FhirElement(source._requirement!); }
    if (source['retentionTime']) { this.retentionTime = new fhir.Duration(source.retentionTime!); }
    if (source['rejectionCriterion']) { this.rejectionCriterion = source.rejectionCriterion.map((x) => new fhir.CodeableConcept(x)); }
    if (source['handling']) { this.handling = source.handling.map((x) => new fhir.SpecimenDefinitionTypeTestedHandling(x)); }
  }
  /**
   * Example-bound Value Set for type
   */
  public static typeExampleValueSet():V20487ValueSetType {
    return V20487ValueSet;
  }
  /**
   * Required-bound Value Set for preference
   */
  public static preferenceRequiredValueSet():SpecimenContainedPreferenceValueSetType {
    return SpecimenContainedPreferenceValueSet;
  }
  /**
   * Example-bound Value Set for rejectionCriterion
   */
  public static rejectionCriterionExampleValueSet():RejectionCriteriaValueSetType {
    return RejectionCriteriaValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["_isDerived"]) { results.push(...this._isDerived.doModelValidation()); }
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (!this["preference"]) { results.push(["preference",'Missing required element: SpecimenDefinition.typeTested.preference']); }
    if (this["_preference"]) { results.push(...this._preference.doModelValidation()); }
    if (this["container"]) { results.push(...this.container.doModelValidation()); }
    if (this["_requirement"]) { results.push(...this._requirement.doModelValidation()); }
    if (this["retentionTime"]) { results.push(...this.retentionTime.doModelValidation()); }
    if (this["rejectionCriterion"]) { this.rejectionCriterion.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["handling"]) { this.handling.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * A kind of specimen with associated set of requirements.
 */
export class SpecimenDefinition extends fhir.DomainResource implements ISpecimenDefinition {
  /**
   * Resource Type Name
   */
  public resourceType: "SpecimenDefinition";
  /**
   * A business identifier associated with the kind of specimen.
   */
  public identifier?: fhir.Identifier|undefined;
  /**
   * The kind of material to be collected.
   */
  public typeCollected?: fhir.CodeableConcept|undefined;
  /**
   * Preparation of the patient for specimen collection.
   */
  public patientPreparation?: fhir.CodeableConcept[]|undefined;
  /**
   * Time aspect of specimen collection (duration or offset).
   */
  public timeAspect?: string|undefined;
  /**
   * Extended properties for primitive element: SpecimenDefinition.timeAspect
   */
  public _timeAspect?: fhir.FhirElement|undefined;
  /**
   * The action to be performed for collecting the specimen.
   */
  public collection?: fhir.CodeableConcept[]|undefined;
  /**
   * Specimen conditioned in a container as expected by the testing laboratory.
   */
  public typeTested?: fhir.SpecimenDefinitionTypeTested[]|undefined;
  /**
   * Default constructor for SpecimenDefinition - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISpecimenDefinition> = { }) {
    super(source);
    this.resourceType = 'SpecimenDefinition';
    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier!); }
    if (source['typeCollected']) { this.typeCollected = new fhir.CodeableConcept(source.typeCollected!); }
    if (source['patientPreparation']) { this.patientPreparation = source.patientPreparation.map((x) => new fhir.CodeableConcept(x)); }
    if (source['timeAspect']) { this.timeAspect = source.timeAspect; }
    if (source['_timeAspect']) { this._timeAspect = new fhir.FhirElement(source._timeAspect!); }
    if (source['collection']) { this.collection = source.collection.map((x) => new fhir.CodeableConcept(x)); }
    if (source['typeTested']) { this.typeTested = source.typeTested.map((x) => new fhir.SpecimenDefinitionTypeTested(x)); }
  }
  /**
   * Example-bound Value Set for typeCollected
   */
  public static typeCollectedExampleValueSet():V20487ValueSetType {
    return V20487ValueSet;
  }
  /**
   * Example-bound Value Set for patientPreparation
   */
  public static patientPreparationExampleValueSet():PreparePatientPriorSpecimenCollectionValueSetType {
    return PreparePatientPriorSpecimenCollectionValueSet;
  }
  /**
   * Example-bound Value Set for collection
   */
  public static collectionExampleValueSet():SpecimenCollectionValueSetType {
    return SpecimenCollectionValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: SpecimenDefinition.resourceType']); }
    if (this["identifier"]) { results.push(...this.identifier.doModelValidation()); }
    if (this["typeCollected"]) { results.push(...this.typeCollected.doModelValidation()); }
    if (this["patientPreparation"]) { this.patientPreparation.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_timeAspect"]) { results.push(...this._timeAspect.doModelValidation()); }
    if (this["collection"]) { this.collection.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["typeTested"]) { this.typeTested.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}
