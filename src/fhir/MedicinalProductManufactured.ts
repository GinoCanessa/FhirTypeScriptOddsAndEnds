// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * The manufactured item as contained in the packaged medicinal product.
 */
export type IMedicinalProductManufactured = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "MedicinalProductManufactured";
  /**
   * Ingredient.
   */
  ingredient?: fhir.IReference[]|undefined;
  /**
   * Dose form as manufactured and before any transformation into the pharmaceutical product.
   */
  manufacturedDoseForm: fhir.ICodeableConcept|null;
  /**
   * Manufacturer of the item (Note that this should be named "manufacturer" but it currently causes technical issues).
   */
  manufacturer?: fhir.IReference[]|undefined;
  /**
   * Other codeable characteristics.
   */
  otherCharacteristics?: fhir.ICodeableConcept[]|undefined;
  /**
   * Dimensions, color etc.
   */
  physicalCharacteristics?: fhir.IProdCharacteristic|undefined;
  /**
   * The quantity or "count number" of the manufactured item.
   */
  quantity: fhir.IQuantity|null;
  /**
   * The “real world” units in which the quantity of the manufactured item is described.
   */
  unitOfPresentation?: fhir.ICodeableConcept|undefined;
}
/**
 * The manufactured item as contained in the packaged medicinal product.
 */
export class MedicinalProductManufactured extends fhir.DomainResource implements fhir.IMedicinalProductManufactured {
  /**
   * Resource Type Name
   */
  public override resourceType: "MedicinalProductManufactured";
  /**
   * Ingredient.
   */
  public ingredient?: fhir.Reference[]|undefined;
  /**
   * Dose form as manufactured and before any transformation into the pharmaceutical product.
   */
  public manufacturedDoseForm: fhir.CodeableConcept|null;
  /**
   * Manufacturer of the item (Note that this should be named "manufacturer" but it currently causes technical issues).
   */
  public manufacturer?: fhir.Reference[]|undefined;
  /**
   * Other codeable characteristics.
   */
  public otherCharacteristics?: fhir.CodeableConcept[]|undefined;
  /**
   * Dimensions, color etc.
   */
  public physicalCharacteristics?: fhir.ProdCharacteristic|undefined;
  /**
   * The quantity or "count number" of the manufactured item.
   */
  public quantity: fhir.Quantity|null;
  /**
   * The “real world” units in which the quantity of the manufactured item is described.
   */
  public unitOfPresentation?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for MedicinalProductManufactured - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedicinalProductManufactured> = {}) {
    super(source);
    this.resourceType = 'MedicinalProductManufactured';
    if (source["ingredient"]) { this.ingredient = source.ingredient.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    this.manufacturedDoseForm = null;
    if (source["manufacturedDoseForm"]) { this.manufacturedDoseForm = new fhir.CodeableConcept(source.manufacturedDoseForm!); }
    if (this.manufacturedDoseForm === undefined) { this.manufacturedDoseForm = null }
    if (source["manufacturer"]) { this.manufacturer = source.manufacturer.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["otherCharacteristics"]) { this.otherCharacteristics = source.otherCharacteristics.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["physicalCharacteristics"]) { this.physicalCharacteristics = new fhir.ProdCharacteristic(source.physicalCharacteristics!); }
    this.quantity = null;
    if (source["quantity"]) { this.quantity = new fhir.Quantity(source.quantity!); }
    if (this.quantity === undefined) { this.quantity = null }
    if (source["unitOfPresentation"]) { this.unitOfPresentation = new fhir.CodeableConcept(source.unitOfPresentation!); }
  }
  /**
   * Check if the current MedicinalProductManufactured contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["manufacturedDoseForm"] === undefined) { missingElements.push("manufacturedDoseForm"); }
    if (this["quantity"] === undefined) { missingElements.push("quantity"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a MedicinalProductManufactured from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IMedicinalProductManufactured):MedicinalProductManufactured {
    var dest:MedicinalProductManufactured = new MedicinalProductManufactured(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `MedicinalProductManufactured is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
