// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProductManufactured

import * as fhir from '../fhir.js'


/**
 * The manufactured item as contained in the packaged medicinal product.
 */
export type IMedicinalProductManufactured = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "MedicinalProductManufactured";
  /**
   * Dose form as manufactured and before any transformation into the pharmaceutical product.
   */
  manufacturedDoseForm: fhir.ICodeableConcept|null;
  /**
   * The “real world” units in which the quantity of the manufactured item is described.
   */
  unitOfPresentation?: fhir.ICodeableConcept|undefined;
  /**
   * The quantity or "count number" of the manufactured item.
   */
  quantity: fhir.IQuantity|null;
  /**
   * Manufacturer of the item (Note that this should be named "manufacturer" but it currently causes technical issues).
   */
  manufacturer?: fhir.IReference[]|undefined;
  /**
   * Ingredient.
   */
  ingredient?: fhir.IReference[]|undefined;
  /**
   * Dimensions, color etc.
   */
  physicalCharacteristics?: fhir.IProdCharacteristic|undefined;
  /**
   * Other codeable characteristics.
   */
  otherCharacteristics?: fhir.ICodeableConcept[]|undefined;
}

/**
 * The manufactured item as contained in the packaged medicinal product.
 */
export class MedicinalProductManufactured extends fhir.DomainResource implements IMedicinalProductManufactured {
  /**
   * Resource Type Name
   */
  public resourceType: "MedicinalProductManufactured";
  /**
   * Dose form as manufactured and before any transformation into the pharmaceutical product.
   */
  public manufacturedDoseForm: fhir.CodeableConcept|null;
  /**
   * The “real world” units in which the quantity of the manufactured item is described.
   */
  public unitOfPresentation?: fhir.CodeableConcept|undefined;
  /**
   * The quantity or "count number" of the manufactured item.
   */
  public quantity: fhir.Quantity|null;
  /**
   * Manufacturer of the item (Note that this should be named "manufacturer" but it currently causes technical issues).
   */
  public manufacturer?: fhir.Reference[]|undefined;
  /**
   * Ingredient.
   */
  public ingredient?: fhir.Reference[]|undefined;
  /**
   * Dimensions, color etc.
   */
  public physicalCharacteristics?: fhir.ProdCharacteristic|undefined;
  /**
   * Other codeable characteristics.
   */
  public otherCharacteristics?: fhir.CodeableConcept[]|undefined;
  /**
   * Default constructor for MedicinalProductManufactured - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IMedicinalProductManufactured> = { }) {
    super(source);
    this.resourceType = 'MedicinalProductManufactured';
    if (source['manufacturedDoseForm']) { this.manufacturedDoseForm = new fhir.CodeableConcept(source.manufacturedDoseForm!); }
    else { this.manufacturedDoseForm = null; }
    if (source['unitOfPresentation']) { this.unitOfPresentation = new fhir.CodeableConcept(source.unitOfPresentation!); }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity!); }
    else { this.quantity = null; }
    if (source['manufacturer']) { this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x)); }
    if (source['ingredient']) { this.ingredient = source.ingredient.map((x) => new fhir.Reference(x)); }
    if (source['physicalCharacteristics']) { this.physicalCharacteristics = new fhir.ProdCharacteristic(source.physicalCharacteristics!); }
    if (source['otherCharacteristics']) { this.otherCharacteristics = source.otherCharacteristics.map((x) => new fhir.CodeableConcept(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: MedicinalProductManufactured.resourceType']); }
    if (!this["manufacturedDoseForm"]) { results.push(["manufacturedDoseForm",'Missing required element: MedicinalProductManufactured.manufacturedDoseForm']); }
    if (this["manufacturedDoseForm"]) { results.push(...this.manufacturedDoseForm.doModelValidation()); }
    if (this["unitOfPresentation"]) { results.push(...this.unitOfPresentation.doModelValidation()); }
    if (!this["quantity"]) { results.push(["quantity",'Missing required element: MedicinalProductManufactured.quantity']); }
    if (this["quantity"]) { results.push(...this.quantity.doModelValidation()); }
    if (this["manufacturer"]) { this.manufacturer.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["ingredient"]) { this.ingredient.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["physicalCharacteristics"]) { results.push(...this.physicalCharacteristics.doModelValidation()); }
    if (this["otherCharacteristics"]) { this.otherCharacteristics.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}
