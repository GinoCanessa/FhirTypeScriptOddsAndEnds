// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: CodeSystem

import * as fhir from '../fhir.js'

import { FilterOperatorValueSet, FilterOperatorValueSetType, FilterOperatorValueSetEnum } from '../fhirValueSets/FilterOperatorValueSet.js'
import { ConceptPropertyTypeValueSet, ConceptPropertyTypeValueSetType, ConceptPropertyTypeValueSetEnum } from '../fhirValueSets/ConceptPropertyTypeValueSet.js'
import { LanguagesValueSet, LanguagesValueSetType, LanguagesValueSetEnum } from '../fhirValueSets/LanguagesValueSet.js'
import { DesignationUseValueSet, DesignationUseValueSetType, DesignationUseValueSetEnum } from '../fhirValueSets/DesignationUseValueSet.js'
import { PublicationStatusValueSet, PublicationStatusValueSetType, PublicationStatusValueSetEnum } from '../fhirValueSets/PublicationStatusValueSet.js'
import { CodesystemHierarchyMeaningValueSet, CodesystemHierarchyMeaningValueSetType, CodesystemHierarchyMeaningValueSetEnum } from '../fhirValueSets/CodesystemHierarchyMeaningValueSet.js'
import { CodesystemContentModeValueSet, CodesystemContentModeValueSetType, CodesystemContentModeValueSetEnum } from '../fhirValueSets/CodesystemContentModeValueSet.js'

/**
 * Note that filters defined in code systems usually require custom code on the part of any terminology engine that will make them available for use in value set filters. For this reason, they are generally only seen in high value published terminologies.
 */
export type ICodeSystemFilter = fhir.IBackboneElement & { 
  /**
   * The code that identifies this filter when it is used as a filter in [ValueSet](valueset.html#).compose.include.filter.
   */
  code: string|null;
  /**
   * Extended properties for primitive element: CodeSystem.filter.code
   */
  _code?: fhir.IFhirElement|undefined;
  /**
   * A description of how or why the filter is used.
   */
  description?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.filter.description
   */
  _description?: fhir.IFhirElement|undefined;
  /**
   * A list of operators that can be used with the filter.
   */
  operator: FilterOperatorValueSetEnum[]|null;
  /**
   * Extended properties for primitive element: CodeSystem.filter.operator
   */
  _operator?: fhir.IFhirElement[]|undefined;
  /**
   * A description of what the value for the filter should be.
   */
  value: string|null;
  /**
   * Extended properties for primitive element: CodeSystem.filter.value
   */
  _value?: fhir.IFhirElement|undefined;
}

/**
 * A property defines an additional slot through which additional information can be provided about a concept.
 */
export type ICodeSystemProperty = fhir.IBackboneElement & { 
  /**
   * A code that is used to identify the property. The code is used internally (in CodeSystem.concept.property.code) and also externally, such as in property filters.
   */
  code: string|null;
  /**
   * Extended properties for primitive element: CodeSystem.property.code
   */
  _code?: fhir.IFhirElement|undefined;
  /**
   * Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system.
   */
  uri?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.property.uri
   */
  _uri?: fhir.IFhirElement|undefined;
  /**
   * A description of the property- why it is defined, and how its value might be used.
   */
  description?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.property.description
   */
  _description?: fhir.IFhirElement|undefined;
  /**
   * The type of the property value. Properties of type "code" contain a code defined by the code system (e.g. a reference to another defined concept).
   */
  type: ConceptPropertyTypeValueSetEnum|null;
  /**
   * Extended properties for primitive element: CodeSystem.property.type
   */
  _type?: fhir.IFhirElement|undefined;
}

/**
 * Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
 */
export type ICodeSystemConceptDesignation = fhir.IBackboneElement & { 
  /**
   * In the absence of a language, the resource language applies.
   */
  language?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.concept.designation.language
   */
  _language?: fhir.IFhirElement|undefined;
  /**
   * If no use is provided, the designation can be assumed to be suitable for general display to a human user.
   */
  use?: fhir.ICoding|undefined;
  /**
   * The text value for this designation.
   */
  value: string|null;
  /**
   * Extended properties for primitive element: CodeSystem.concept.designation.value
   */
  _value?: fhir.IFhirElement|undefined;
}

/**
 * A property value for this concept.
 */
export type ICodeSystemConceptProperty = fhir.IBackboneElement & { 
  /**
   * A code that is a reference to CodeSystem.property.code.
   */
  code: string|null;
  /**
   * Extended properties for primitive element: CodeSystem.concept.property.code
   */
  _code?: fhir.IFhirElement|undefined;
  /**
   * The value of this property.
   */
  valueCode?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.concept.property.value[x]
   */
  _valueCode?: fhir.IFhirElement|undefined;
  /**
   * The value of this property.
   */
  valueCoding?: fhir.ICoding|undefined;
  /**
   * The value of this property.
   */
  valueString?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.concept.property.value[x]
   */
  _valueString?: fhir.IFhirElement|undefined;
  /**
   * The value of this property.
   */
  valueInteger?: number|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.concept.property.value[x]
   */
  _valueInteger?: fhir.IFhirElement|undefined;
  /**
   * The value of this property.
   */
  valueBoolean?: boolean|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.concept.property.value[x]
   */
  _valueBoolean?: fhir.IFhirElement|undefined;
  /**
   * The value of this property.
   */
  valueDateTime?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.concept.property.value[x]
   */
  _valueDateTime?: fhir.IFhirElement|undefined;
  /**
   * The value of this property.
   */
  valueDecimal?: number|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.concept.property.value[x]
   */
  _valueDecimal?: fhir.IFhirElement|undefined;
}

/**
 * If this is empty, it means that the code system resource does not represent the content of the code system.
 */
export type ICodeSystemConcept = fhir.IBackboneElement & { 
  /**
   * A code - a text symbol - that uniquely identifies the concept within the code system.
   */
  code: string|null;
  /**
   * Extended properties for primitive element: CodeSystem.concept.code
   */
  _code?: fhir.IFhirElement|undefined;
  /**
   * A human readable string that is the recommended default way to present this concept to a user.
   */
  display?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.concept.display
   */
  _display?: fhir.IFhirElement|undefined;
  /**
   * The formal definition of the concept. The code system resource does not make formal definitions required, because of the prevalence of legacy systems. However, they are highly recommended, as without them there is no formal meaning associated with the concept.
   */
  definition?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.concept.definition
   */
  _definition?: fhir.IFhirElement|undefined;
  /**
   * Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
   */
  designation?: fhir.ICodeSystemConceptDesignation[]|undefined;
  /**
   * A property value for this concept.
   */
  property?: fhir.ICodeSystemConceptProperty[]|undefined;
  /**
   * Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships is variable (is-a/contains/categorizes) - see hierarchyMeaning.
   */
  concept?: fhir.ICodeSystemConcept[]|undefined;
}

/**
 * The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.
 */
export type ICodeSystem = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "CodeSystem";
  /**
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.url
   */
  _url?: fhir.IFhirElement|undefined;
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this code system outside of FHIR, where it is not possible to use the logical URI.  Note that HL7 defines at least three identifiers for many of its code systems - the FHIR canonical URL, the OID and the V2 Table 0396 mnemonic code.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * There may be different code system instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the code system with the format [url]|[version].
   */
  version?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.version
   */
  _version?: fhir.IFhirElement|undefined;
  /**
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.name
   */
  _name?: fhir.IFhirElement|undefined;
  /**
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.title
   */
  _title?: fhir.IFhirElement|undefined;
  /**
   * Allows filtering of code systems that are appropriate for use versus not.
   */
  status: PublicationStatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: CodeSystem.status
   */
  _status?: fhir.IFhirElement|undefined;
  /**
   * Allows filtering of code systems that are appropriate for use versus not.
   */
  experimental?: boolean|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.experimental
   */
  _experimental?: fhir.IFhirElement|undefined;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the code system. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.date
   */
  _date?: fhir.IFhirElement|undefined;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the code system is the organization or individual primarily responsible for the maintenance and upkeep of the code system. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the code system. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.publisher
   */
  _publisher?: fhir.IFhirElement|undefined;
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: fhir.IContactDetail[]|undefined;
  /**
   * This description can be used to capture details such as why the code system was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the code system as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the code system is presumed to be the predominant language in the place the code system was created).
   */
  description?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.description
   */
  _description?: fhir.IFhirElement|undefined;
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: fhir.IUsageContext[]|undefined;
  /**
   * It may be possible for the code system to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: fhir.ICodeableConcept[]|undefined;
  /**
   * This element does not describe the usage of the code system. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this code system.
   */
  purpose?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.purpose
   */
  _purpose?: fhir.IFhirElement|undefined;
  /**
   * ... Sometimes, the copyright differs between the code system and the codes that are included. The copyright statement should clearly differentiate between these when required.
   */
  copyright?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.copyright
   */
  _copyright?: fhir.IFhirElement|undefined;
  /**
   * If this value is missing, then it is not specified whether a code system is case sensitive or not. When the rule is not known, Postel's law should be followed: produce codes with the correct case, and accept codes in any case. This element is primarily provided to support validation software.
   */
  caseSensitive?: boolean|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.caseSensitive
   */
  _caseSensitive?: fhir.IFhirElement|undefined;
  /**
   * The definition of the value set SHALL include all codes from this code system and only codes from this code system, and it SHALL be immutable.
   */
  valueSet?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.valueSet
   */
  _valueSet?: fhir.IFhirElement|undefined;
  /**
   * Note that other representations might have a different hierarchy or none at all, and represent the information using properties.
   */
  hierarchyMeaning?: CodesystemHierarchyMeaningValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.hierarchyMeaning
   */
  _hierarchyMeaning?: fhir.IFhirElement|undefined;
  /**
   * Note that the code system resource does not define what the compositional grammar is, only whether or not there is one.
   */
  compositional?: boolean|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.compositional
   */
  _compositional?: fhir.IFhirElement|undefined;
  /**
   * Best practice is that code systems do not redefine concepts, or that if concepts are redefined, a new code system definition is created. But this is not always possible, so some code systems may be defined as 'versionNeeded'.
   * Most code systems occasionally refine the displays defined for concepts between versions. Contexts in which the concept display values are validated may require that the version be specified for some code systems irrespective of the value of this property.
   */
  versionNeeded?: boolean|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.versionNeeded
   */
  _versionNeeded?: fhir.IFhirElement|undefined;
  /**
   * The extent of the content of the code system (the concepts and codes it defines) are represented in this resource instance.
   */
  content: CodesystemContentModeValueSetEnum|null;
  /**
   * Extended properties for primitive element: CodeSystem.content
   */
  _content?: fhir.IFhirElement|undefined;
  /**
   * The most common use of a code system supplement is to add additional language support.
   */
  supplements?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.supplements
   */
  _supplements?: fhir.IFhirElement|undefined;
  /**
   * The count of concepts defined in this resource cannot be more than this value but may be less for several reasons - see the content element.
   */
  count?: number|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.count
   */
  _count?: fhir.IFhirElement|undefined;
  /**
   * Note that filters defined in code systems usually require custom code on the part of any terminology engine that will make them available for use in value set filters. For this reason, they are generally only seen in high value published terminologies.
   */
  filter?: fhir.ICodeSystemFilter[]|undefined;
  /**
   * A property defines an additional slot through which additional information can be provided about a concept.
   */
  property?: fhir.ICodeSystemProperty[]|undefined;
  /**
   * If this is empty, it means that the code system resource does not represent the content of the code system.
   */
  concept?: fhir.ICodeSystemConcept[]|undefined;
}

/**
 * Note that filters defined in code systems usually require custom code on the part of any terminology engine that will make them available for use in value set filters. For this reason, they are generally only seen in high value published terminologies.
 */
export class CodeSystemFilter extends fhir.BackboneElement implements ICodeSystemFilter {
  /**
   * The code that identifies this filter when it is used as a filter in [ValueSet](valueset.html#).compose.include.filter.
   */
  public code: string|null;
  /**
   * Extended properties for primitive element: CodeSystem.filter.code
   */
  public _code?: fhir.FhirElement|undefined;
  /**
   * A description of how or why the filter is used.
   */
  public description?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.filter.description
   */
  public _description?: fhir.FhirElement|undefined;
  /**
   * A list of operators that can be used with the filter.
   */
  public operator: FilterOperatorValueSetEnum[]|null;
  /**
   * Extended properties for primitive element: CodeSystem.filter.operator
   */
  public _operator?: fhir.FhirElement[]|undefined;
  /**
   * A description of what the value for the filter should be.
   */
  public value: string|null;
  /**
   * Extended properties for primitive element: CodeSystem.filter.value
   */
  public _value?: fhir.FhirElement|undefined;
  /**
   * Default constructor for CodeSystemFilter - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ICodeSystemFilter> = { }) {
    super(source);
    if (source['code']) { this.code = source.code; }
    else { this.code = null; }
    if (source['_code']) { this._code = new fhir.FhirElement(source._code!); }
    if (source['description']) { this.description = source.description; }
    if (source['_description']) { this._description = new fhir.FhirElement(source._description!); }
    if (source['operator']) { this.operator = source.operator.map((x) => (x)); }
    else { this.operator = null; }
    if (source['_operator']) { this._operator = source._operator.map((x) => new fhir.FhirElement(x)); }
    if (source['value']) { this.value = source.value; }
    else { this.value = null; }
    if (source['_value']) { this._value = new fhir.FhirElement(source._value!); }
  }
  /**
   * Required-bound Value Set for operator
   */
  public static operatorRequiredValueSet():FilterOperatorValueSetType {
    return FilterOperatorValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["code"]) { results.push(["code",'Missing required element: CodeSystem.filter.code']); }
    if (this["_code"]) { results.push(...this._code.doModelValidation()); }
    if (this["_description"]) { results.push(...this._description.doModelValidation()); }
    if ((!this["operator"]) || (this["operator"].length === 0)) { results.push(["operator",'Missing required element: CodeSystem.filter.operator']); }
    if (this["_operator"]) { this._operator.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (!this["value"]) { results.push(["value",'Missing required element: CodeSystem.filter.value']); }
    if (this["_value"]) { results.push(...this._value.doModelValidation()); }
    return results;
  }
}

/**
 * A property defines an additional slot through which additional information can be provided about a concept.
 */
export class CodeSystemProperty extends fhir.BackboneElement implements ICodeSystemProperty {
  /**
   * A code that is used to identify the property. The code is used internally (in CodeSystem.concept.property.code) and also externally, such as in property filters.
   */
  public code: string|null;
  /**
   * Extended properties for primitive element: CodeSystem.property.code
   */
  public _code?: fhir.FhirElement|undefined;
  /**
   * Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system.
   */
  public uri?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.property.uri
   */
  public _uri?: fhir.FhirElement|undefined;
  /**
   * A description of the property- why it is defined, and how its value might be used.
   */
  public description?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.property.description
   */
  public _description?: fhir.FhirElement|undefined;
  /**
   * The type of the property value. Properties of type "code" contain a code defined by the code system (e.g. a reference to another defined concept).
   */
  public type: ConceptPropertyTypeValueSetEnum|null;
  /**
   * Extended properties for primitive element: CodeSystem.property.type
   */
  public _type?: fhir.FhirElement|undefined;
  /**
   * Default constructor for CodeSystemProperty - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ICodeSystemProperty> = { }) {
    super(source);
    if (source['code']) { this.code = source.code; }
    else { this.code = null; }
    if (source['_code']) { this._code = new fhir.FhirElement(source._code!); }
    if (source['uri']) { this.uri = source.uri; }
    if (source['_uri']) { this._uri = new fhir.FhirElement(source._uri!); }
    if (source['description']) { this.description = source.description; }
    if (source['_description']) { this._description = new fhir.FhirElement(source._description!); }
    if (source['type']) { this.type = source.type; }
    else { this.type = null; }
    if (source['_type']) { this._type = new fhir.FhirElement(source._type!); }
  }
  /**
   * Required-bound Value Set for type
   */
  public static typeRequiredValueSet():ConceptPropertyTypeValueSetType {
    return ConceptPropertyTypeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["code"]) { results.push(["code",'Missing required element: CodeSystem.property.code']); }
    if (this["_code"]) { results.push(...this._code.doModelValidation()); }
    if (this["_uri"]) { results.push(...this._uri.doModelValidation()); }
    if (this["_description"]) { results.push(...this._description.doModelValidation()); }
    if (!this["type"]) { results.push(["type",'Missing required element: CodeSystem.property.type']); }
    if (this["_type"]) { results.push(...this._type.doModelValidation()); }
    return results;
  }
}

/**
 * Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
 */
export class CodeSystemConceptDesignation extends fhir.BackboneElement implements ICodeSystemConceptDesignation {
  /**
   * In the absence of a language, the resource language applies.
   */
  public language?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.concept.designation.language
   */
  public _language?: fhir.FhirElement|undefined;
  /**
   * If no use is provided, the designation can be assumed to be suitable for general display to a human user.
   */
  public use?: fhir.Coding|undefined;
  /**
   * The text value for this designation.
   */
  public value: string|null;
  /**
   * Extended properties for primitive element: CodeSystem.concept.designation.value
   */
  public _value?: fhir.FhirElement|undefined;
  /**
   * Default constructor for CodeSystemConceptDesignation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ICodeSystemConceptDesignation> = { }) {
    super(source);
    if (source['language']) { this.language = source.language; }
    if (source['_language']) { this._language = new fhir.FhirElement(source._language!); }
    if (source['use']) { this.use = new fhir.Coding(source.use!); }
    if (source['value']) { this.value = source.value; }
    else { this.value = null; }
    if (source['_value']) { this._value = new fhir.FhirElement(source._value!); }
  }
  /**
   * Preferred-bound Value Set for language
   */
  public static languagePreferredValueSet():LanguagesValueSetType {
    return LanguagesValueSet;
  }
  /**
   * Extensible-bound Value Set for use
   */
  public static useExtensibleValueSet():DesignationUseValueSetType {
    return DesignationUseValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["_language"]) { results.push(...this._language.doModelValidation()); }
    if (this["use"]) { results.push(...this.use.doModelValidation()); }
    if (!this["value"]) { results.push(["value",'Missing required element: CodeSystem.concept.designation.value']); }
    if (this["_value"]) { results.push(...this._value.doModelValidation()); }
    return results;
  }
}

/**
 * A property value for this concept.
 */
export class CodeSystemConceptProperty extends fhir.BackboneElement implements ICodeSystemConceptProperty {
  /**
   * A code that is a reference to CodeSystem.property.code.
   */
  public code: string|null;
  /**
   * Extended properties for primitive element: CodeSystem.concept.property.code
   */
  public _code?: fhir.FhirElement|undefined;
  /**
   * The value of this property.
   */
  public valueCode?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.concept.property.value[x]
   */
  public _valueCode?: fhir.FhirElement|undefined;
  /**
   * The value of this property.
   */
  public valueCoding?: fhir.Coding|undefined;
  /**
   * The value of this property.
   */
  public valueString?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.concept.property.value[x]
   */
  public _valueString?: fhir.FhirElement|undefined;
  /**
   * The value of this property.
   */
  public valueInteger?: number|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.concept.property.value[x]
   */
  public _valueInteger?: fhir.FhirElement|undefined;
  /**
   * The value of this property.
   */
  public valueBoolean?: boolean|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.concept.property.value[x]
   */
  public _valueBoolean?: fhir.FhirElement|undefined;
  /**
   * The value of this property.
   */
  public valueDateTime?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.concept.property.value[x]
   */
  public _valueDateTime?: fhir.FhirElement|undefined;
  /**
   * The value of this property.
   */
  public valueDecimal?: number|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.concept.property.value[x]
   */
  public _valueDecimal?: fhir.FhirElement|undefined;
  /**
   * Default constructor for CodeSystemConceptProperty - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ICodeSystemConceptProperty> = { }) {
    super(source);
    if (source['code']) { this.code = source.code; }
    else { this.code = null; }
    if (source['_code']) { this._code = new fhir.FhirElement(source._code!); }
    if (source['valueCode']) { this.valueCode = source.valueCode; }
    if (source['_valueCode']) { this._valueCode = new fhir.FhirElement(source._valueCode!); }
    if (source['valueCoding']) { this.valueCoding = new fhir.Coding(source.valueCoding!); }
    if (source['valueString']) { this.valueString = source.valueString; }
    if (source['_valueString']) { this._valueString = new fhir.FhirElement(source._valueString!); }
    if (source['valueInteger']) { this.valueInteger = source.valueInteger; }
    if (source['_valueInteger']) { this._valueInteger = new fhir.FhirElement(source._valueInteger!); }
    if (source['valueBoolean']) { this.valueBoolean = source.valueBoolean; }
    if (source['_valueBoolean']) { this._valueBoolean = new fhir.FhirElement(source._valueBoolean!); }
    if (source['valueDateTime']) { this.valueDateTime = source.valueDateTime; }
    if (source['_valueDateTime']) { this._valueDateTime = new fhir.FhirElement(source._valueDateTime!); }
    if (source['valueDecimal']) { this.valueDecimal = source.valueDecimal; }
    if (source['_valueDecimal']) { this._valueDecimal = new fhir.FhirElement(source._valueDecimal!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["code"]) { results.push(["code",'Missing required element: CodeSystem.concept.property.code']); }
    if (this["_code"]) { results.push(...this._code.doModelValidation()); }
    if (this["_valueCode"]) { results.push(...this._valueCode.doModelValidation()); }
    if (this["valueCoding"]) { results.push(...this.valueCoding.doModelValidation()); }
    if (this["_valueString"]) { results.push(...this._valueString.doModelValidation()); }
    if (this["_valueInteger"]) { results.push(...this._valueInteger.doModelValidation()); }
    if (this["_valueBoolean"]) { results.push(...this._valueBoolean.doModelValidation()); }
    if (this["_valueDateTime"]) { results.push(...this._valueDateTime.doModelValidation()); }
    if (this["_valueDecimal"]) { results.push(...this._valueDecimal.doModelValidation()); }
    return results;
  }
}

/**
 * If this is empty, it means that the code system resource does not represent the content of the code system.
 */
export class CodeSystemConcept extends fhir.BackboneElement implements ICodeSystemConcept {
  /**
   * A code - a text symbol - that uniquely identifies the concept within the code system.
   */
  public code: string|null;
  /**
   * Extended properties for primitive element: CodeSystem.concept.code
   */
  public _code?: fhir.FhirElement|undefined;
  /**
   * A human readable string that is the recommended default way to present this concept to a user.
   */
  public display?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.concept.display
   */
  public _display?: fhir.FhirElement|undefined;
  /**
   * The formal definition of the concept. The code system resource does not make formal definitions required, because of the prevalence of legacy systems. However, they are highly recommended, as without them there is no formal meaning associated with the concept.
   */
  public definition?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.concept.definition
   */
  public _definition?: fhir.FhirElement|undefined;
  /**
   * Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
   */
  public designation?: fhir.CodeSystemConceptDesignation[]|undefined;
  /**
   * A property value for this concept.
   */
  public property?: fhir.CodeSystemConceptProperty[]|undefined;
  /**
   * Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships is variable (is-a/contains/categorizes) - see hierarchyMeaning.
   */
  public concept?: fhir.CodeSystemConcept[]|undefined;
  /**
   * Default constructor for CodeSystemConcept - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ICodeSystemConcept> = { }) {
    super(source);
    if (source['code']) { this.code = source.code; }
    else { this.code = null; }
    if (source['_code']) { this._code = new fhir.FhirElement(source._code!); }
    if (source['display']) { this.display = source.display; }
    if (source['_display']) { this._display = new fhir.FhirElement(source._display!); }
    if (source['definition']) { this.definition = source.definition; }
    if (source['_definition']) { this._definition = new fhir.FhirElement(source._definition!); }
    if (source['designation']) { this.designation = source.designation.map((x) => new fhir.CodeSystemConceptDesignation(x)); }
    if (source['property']) { this.property = source.property.map((x) => new fhir.CodeSystemConceptProperty(x)); }
    if (source['concept']) { this.concept = source.concept.map((x) => new fhir.CodeSystemConcept(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["code"]) { results.push(["code",'Missing required element: CodeSystem.concept.code']); }
    if (this["_code"]) { results.push(...this._code.doModelValidation()); }
    if (this["_display"]) { results.push(...this._display.doModelValidation()); }
    if (this["_definition"]) { results.push(...this._definition.doModelValidation()); }
    if (this["designation"]) { this.designation.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["property"]) { this.property.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["concept"]) { this.concept.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.
 */
export class CodeSystem extends fhir.DomainResource implements ICodeSystem {
  /**
   * Resource Type Name
   */
  public resourceType: "CodeSystem";
  /**
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  public url?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.url
   */
  public _url?: fhir.FhirElement|undefined;
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this code system outside of FHIR, where it is not possible to use the logical URI.  Note that HL7 defines at least three identifiers for many of its code systems - the FHIR canonical URL, the OID and the V2 Table 0396 mnemonic code.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * There may be different code system instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the code system with the format [url]|[version].
   */
  public version?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.version
   */
  public _version?: fhir.FhirElement|undefined;
  /**
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  public name?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.name
   */
  public _name?: fhir.FhirElement|undefined;
  /**
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  public title?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.title
   */
  public _title?: fhir.FhirElement|undefined;
  /**
   * Allows filtering of code systems that are appropriate for use versus not.
   */
  public status: PublicationStatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: CodeSystem.status
   */
  public _status?: fhir.FhirElement|undefined;
  /**
   * Allows filtering of code systems that are appropriate for use versus not.
   */
  public experimental?: boolean|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.experimental
   */
  public _experimental?: fhir.FhirElement|undefined;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the code system. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  public date?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.date
   */
  public _date?: fhir.FhirElement|undefined;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the code system is the organization or individual primarily responsible for the maintenance and upkeep of the code system. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the code system. This item SHOULD be populated unless the information is available from context.
   */
  public publisher?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.publisher
   */
  public _publisher?: fhir.FhirElement|undefined;
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  public contact?: fhir.ContactDetail[]|undefined;
  /**
   * This description can be used to capture details such as why the code system was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the code system as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the code system is presumed to be the predominant language in the place the code system was created).
   */
  public description?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.description
   */
  public _description?: fhir.FhirElement|undefined;
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  public useContext?: fhir.UsageContext[]|undefined;
  /**
   * It may be possible for the code system to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  public jurisdiction?: fhir.CodeableConcept[]|undefined;
  /**
   * This element does not describe the usage of the code system. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this code system.
   */
  public purpose?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.purpose
   */
  public _purpose?: fhir.FhirElement|undefined;
  /**
   * ... Sometimes, the copyright differs between the code system and the codes that are included. The copyright statement should clearly differentiate between these when required.
   */
  public copyright?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.copyright
   */
  public _copyright?: fhir.FhirElement|undefined;
  /**
   * If this value is missing, then it is not specified whether a code system is case sensitive or not. When the rule is not known, Postel's law should be followed: produce codes with the correct case, and accept codes in any case. This element is primarily provided to support validation software.
   */
  public caseSensitive?: boolean|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.caseSensitive
   */
  public _caseSensitive?: fhir.FhirElement|undefined;
  /**
   * The definition of the value set SHALL include all codes from this code system and only codes from this code system, and it SHALL be immutable.
   */
  public valueSet?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.valueSet
   */
  public _valueSet?: fhir.FhirElement|undefined;
  /**
   * Note that other representations might have a different hierarchy or none at all, and represent the information using properties.
   */
  public hierarchyMeaning?: CodesystemHierarchyMeaningValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.hierarchyMeaning
   */
  public _hierarchyMeaning?: fhir.FhirElement|undefined;
  /**
   * Note that the code system resource does not define what the compositional grammar is, only whether or not there is one.
   */
  public compositional?: boolean|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.compositional
   */
  public _compositional?: fhir.FhirElement|undefined;
  /**
   * Best practice is that code systems do not redefine concepts, or that if concepts are redefined, a new code system definition is created. But this is not always possible, so some code systems may be defined as 'versionNeeded'.
   * Most code systems occasionally refine the displays defined for concepts between versions. Contexts in which the concept display values are validated may require that the version be specified for some code systems irrespective of the value of this property.
   */
  public versionNeeded?: boolean|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.versionNeeded
   */
  public _versionNeeded?: fhir.FhirElement|undefined;
  /**
   * The extent of the content of the code system (the concepts and codes it defines) are represented in this resource instance.
   */
  public content: CodesystemContentModeValueSetEnum|null;
  /**
   * Extended properties for primitive element: CodeSystem.content
   */
  public _content?: fhir.FhirElement|undefined;
  /**
   * The most common use of a code system supplement is to add additional language support.
   */
  public supplements?: string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.supplements
   */
  public _supplements?: fhir.FhirElement|undefined;
  /**
   * The count of concepts defined in this resource cannot be more than this value but may be less for several reasons - see the content element.
   */
  public count?: number|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.count
   */
  public _count?: fhir.FhirElement|undefined;
  /**
   * Note that filters defined in code systems usually require custom code on the part of any terminology engine that will make them available for use in value set filters. For this reason, they are generally only seen in high value published terminologies.
   */
  public filter?: fhir.CodeSystemFilter[]|undefined;
  /**
   * A property defines an additional slot through which additional information can be provided about a concept.
   */
  public property?: fhir.CodeSystemProperty[]|undefined;
  /**
   * If this is empty, it means that the code system resource does not represent the content of the code system.
   */
  public concept?: fhir.CodeSystemConcept[]|undefined;
  /**
   * Default constructor for CodeSystem - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ICodeSystem> = { }) {
    super(source);
    this.resourceType = 'CodeSystem';
    if (source['url']) { this.url = source.url; }
    if (source['_url']) { this._url = new fhir.FhirElement(source._url!); }
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['version']) { this.version = source.version; }
    if (source['_version']) { this._version = new fhir.FhirElement(source._version!); }
    if (source['name']) { this.name = source.name; }
    if (source['_name']) { this._name = new fhir.FhirElement(source._name!); }
    if (source['title']) { this.title = source.title; }
    if (source['_title']) { this._title = new fhir.FhirElement(source._title!); }
    if (source['status']) { this.status = source.status; }
    else { this.status = null; }
    if (source['_status']) { this._status = new fhir.FhirElement(source._status!); }
    if (source['experimental']) { this.experimental = source.experimental; }
    if (source['_experimental']) { this._experimental = new fhir.FhirElement(source._experimental!); }
    if (source['date']) { this.date = source.date; }
    if (source['_date']) { this._date = new fhir.FhirElement(source._date!); }
    if (source['publisher']) { this.publisher = source.publisher; }
    if (source['_publisher']) { this._publisher = new fhir.FhirElement(source._publisher!); }
    if (source['contact']) { this.contact = source.contact.map((x) => new fhir.ContactDetail(x)); }
    if (source['description']) { this.description = source.description; }
    if (source['_description']) { this._description = new fhir.FhirElement(source._description!); }
    if (source['useContext']) { this.useContext = source.useContext.map((x) => new fhir.UsageContext(x)); }
    if (source['jurisdiction']) { this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x)); }
    if (source['purpose']) { this.purpose = source.purpose; }
    if (source['_purpose']) { this._purpose = new fhir.FhirElement(source._purpose!); }
    if (source['copyright']) { this.copyright = source.copyright; }
    if (source['_copyright']) { this._copyright = new fhir.FhirElement(source._copyright!); }
    if (source['caseSensitive']) { this.caseSensitive = source.caseSensitive; }
    if (source['_caseSensitive']) { this._caseSensitive = new fhir.FhirElement(source._caseSensitive!); }
    if (source['valueSet']) { this.valueSet = source.valueSet; }
    if (source['_valueSet']) { this._valueSet = new fhir.FhirElement(source._valueSet!); }
    if (source['hierarchyMeaning']) { this.hierarchyMeaning = source.hierarchyMeaning; }
    if (source['_hierarchyMeaning']) { this._hierarchyMeaning = new fhir.FhirElement(source._hierarchyMeaning!); }
    if (source['compositional']) { this.compositional = source.compositional; }
    if (source['_compositional']) { this._compositional = new fhir.FhirElement(source._compositional!); }
    if (source['versionNeeded']) { this.versionNeeded = source.versionNeeded; }
    if (source['_versionNeeded']) { this._versionNeeded = new fhir.FhirElement(source._versionNeeded!); }
    if (source['content']) { this.content = source.content; }
    else { this.content = null; }
    if (source['_content']) { this._content = new fhir.FhirElement(source._content!); }
    if (source['supplements']) { this.supplements = source.supplements; }
    if (source['_supplements']) { this._supplements = new fhir.FhirElement(source._supplements!); }
    if (source['count']) { this.count = source.count; }
    if (source['_count']) { this._count = new fhir.FhirElement(source._count!); }
    if (source['filter']) { this.filter = source.filter.map((x) => new fhir.CodeSystemFilter(x)); }
    if (source['property']) { this.property = source.property.map((x) => new fhir.CodeSystemProperty(x)); }
    if (source['concept']) { this.concept = source.concept.map((x) => new fhir.CodeSystemConcept(x)); }
  }
  /**
   * Required-bound Value Set for status
   */
  public static statusRequiredValueSet():PublicationStatusValueSetType {
    return PublicationStatusValueSet;
  }
  /**
   * Required-bound Value Set for hierarchyMeaning
   */
  public static hierarchyMeaningRequiredValueSet():CodesystemHierarchyMeaningValueSetType {
    return CodesystemHierarchyMeaningValueSet;
  }
  /**
   * Required-bound Value Set for content
   */
  public static contentRequiredValueSet():CodesystemContentModeValueSetType {
    return CodesystemContentModeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: CodeSystem.resourceType']); }
    if (this["_url"]) { results.push(...this._url.doModelValidation()); }
    if (this["identifier"]) { this.identifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_version"]) { results.push(...this._version.doModelValidation()); }
    if (this["_name"]) { results.push(...this._name.doModelValidation()); }
    if (this["_title"]) { results.push(...this._title.doModelValidation()); }
    if (!this["status"]) { results.push(["status",'Missing required element: CodeSystem.status']); }
    if (this["_status"]) { results.push(...this._status.doModelValidation()); }
    if (this["_experimental"]) { results.push(...this._experimental.doModelValidation()); }
    if (this["_date"]) { results.push(...this._date.doModelValidation()); }
    if (this["_publisher"]) { results.push(...this._publisher.doModelValidation()); }
    if (this["contact"]) { this.contact.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_description"]) { results.push(...this._description.doModelValidation()); }
    if (this["useContext"]) { this.useContext.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["jurisdiction"]) { this.jurisdiction.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_purpose"]) { results.push(...this._purpose.doModelValidation()); }
    if (this["_copyright"]) { results.push(...this._copyright.doModelValidation()); }
    if (this["_caseSensitive"]) { results.push(...this._caseSensitive.doModelValidation()); }
    if (this["_valueSet"]) { results.push(...this._valueSet.doModelValidation()); }
    if (this["_hierarchyMeaning"]) { results.push(...this._hierarchyMeaning.doModelValidation()); }
    if (this["_compositional"]) { results.push(...this._compositional.doModelValidation()); }
    if (this["_versionNeeded"]) { results.push(...this._versionNeeded.doModelValidation()); }
    if (!this["content"]) { results.push(["content",'Missing required element: CodeSystem.content']); }
    if (this["_content"]) { results.push(...this._content.doModelValidation()); }
    if (this["_supplements"]) { results.push(...this._supplements.doModelValidation()); }
    if (this["_count"]) { results.push(...this._count.doModelValidation()); }
    if (this["filter"]) { this.filter.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["property"]) { this.property.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["concept"]) { this.concept.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}
