// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Money

import * as fhir from '../fhir.js';

import { CurrenciesValueSet, CurrenciesValueSetType,} from '../fhirValueSets/CurrenciesValueSet.js';
import { CurrenciesValueSetEnum } from '../valueSetEnums.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Valid arguments for the Money type.
 */
export interface MoneyArgs extends fhir.FhirElementArgs {
  /**
   * Monetary values have their own rules for handling precision (refer to standard accounting text books).
   */
  value?: fhir.FhirDecimal|number|undefined;
  /**
   * ISO 4217 Currency Code.
   */
  currency?: fhir.FhirCode|string|undefined;
}

/**
 * An amount of economic utility in some recognized currency.
 */
export class Money extends fhir.FhirElement {
  readonly __dataType:string = 'Money';
  /**
   * Monetary values have their own rules for handling precision (refer to standard accounting text books).
   */
  public value?: fhir.FhirDecimal|undefined;
  /**
   * ISO 4217 Currency Code.
   */
  public currency?: fhir.FhirCode|undefined;
  /**
   * Default constructor for Money - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MoneyArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['value']) { this.value = new fhir.FhirDecimal({value: source.value}); }
    if (source['currency']) { this.currency = new fhir.FhirCode({value: source.currency}); }
  }
  /**
   * Required-bound Value Set for currency
   */
  public static currencyRequiredValueSet():CurrenciesValueSetType {
    return CurrenciesValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["value"]) { outcome.issue!.push(...this.value.doModelValidation().issue!); }
    if (this["currency"]) { outcome.issue!.push(...this.currency.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
