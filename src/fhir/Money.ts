// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Money

import * as fhir from '../fhir.js'

import { CurrenciesValueSet, CurrenciesValueSetType, CurrenciesValueSetEnum } from '../fhirValueSets/CurrenciesValueSet.js'

/**
 * An amount of economic utility in some recognized currency.
 */
export type IMoney = fhir.IFhirElement & { 
  /**
   * Monetary values have their own rules for handling precision (refer to standard accounting text books).
   */
  value?: number|undefined;
  /**
   * Extended properties for primitive element: Money.value
   */
  _value?: fhir.IFhirElement|undefined;
  /**
   * ISO 4217 Currency Code.
   */
  currency?: string|undefined;
  /**
   * Extended properties for primitive element: Money.currency
   */
  _currency?: fhir.IFhirElement|undefined;
}

/**
 * An amount of economic utility in some recognized currency.
 */
export class Money extends fhir.FhirElement implements IMoney {
  /**
   * Monetary values have their own rules for handling precision (refer to standard accounting text books).
   */
  public value?: number|undefined;
  /**
   * Extended properties for primitive element: Money.value
   */
  public _value?: fhir.FhirElement|undefined;
  /**
   * ISO 4217 Currency Code.
   */
  public currency?: string|undefined;
  /**
   * Extended properties for primitive element: Money.currency
   */
  public _currency?: fhir.FhirElement|undefined;
  /**
   * Default constructor for Money - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IMoney> = { }) {
    super(source);
    if (source['value']) { this.value = source.value; }
    if (source['_value']) { this._value = new fhir.FhirElement(source._value!); }
    if (source['currency']) { this.currency = source.currency; }
    if (source['_currency']) { this._currency = new fhir.FhirElement(source._currency!); }
  }
  /**
   * Required-bound Value Set for currency
   */
  public currencyRequiredValueSet():CurrenciesValueSetType {
    return CurrenciesValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["_value"]) { results.push(...this._value.doModelValidation()); }
    if (this["_currency"]) { results.push(...this._currency.doModelValidation()); }
    return results;
  }
}
