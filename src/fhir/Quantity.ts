// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
 */
export type IQuantity = fhir.IFhirElement & {
  /**
   * The preferred system is UCUM, but SNOMED CT can also be used (for customary units) or ISO 4217 for currency.  The context of use may additionally require a code from a particular system.
   */
  code?: string|undefined;
  _code?: fhir.IFhirElement|undefined;
  /**
   * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "&lt;" , then the real value is &lt; stated value.
   */
  comparator?: QuantityComparatorEnum|undefined;
  _comparator?: fhir.IFhirElement|undefined;
  /**
   * The identification of the system that provides the coded form of the unit.
   */
  system?: string|undefined;
  _system?: fhir.IFhirElement|undefined;
  /**
   * A human-readable form of the unit.
   */
  unit?: string|undefined;
  _unit?: fhir.IFhirElement|undefined;
  /**
   * The implicit precision in the value should always be honored. Monetary values have their own rules for handling precision (refer to standard accounting text books).
   */
  value?: number|undefined;
  _value?: fhir.IFhirElement|undefined;
}
/**
 * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
 */
export class Quantity extends fhir.FhirElement implements fhir.IQuantity {
  /**
   * The preferred system is UCUM, but SNOMED CT can also be used (for customary units) or ISO 4217 for currency.  The context of use may additionally require a code from a particular system.
   */
  public code?: string|undefined;
  public _code?: fhir.FhirElement|undefined;
  /**
   * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "&lt;" , then the real value is &lt; stated value.
   */
  public comparator?: QuantityComparatorEnum|undefined;
  public _comparator?: fhir.FhirElement|undefined;
  /**
   * The identification of the system that provides the coded form of the unit.
   */
  public system?: string|undefined;
  public _system?: fhir.FhirElement|undefined;
  /**
   * A human-readable form of the unit.
   */
  public unit?: string|undefined;
  public _unit?: fhir.FhirElement|undefined;
  /**
   * The implicit precision in the value should always be honored. Monetary values have their own rules for handling precision (refer to standard accounting text books).
   */
  public value?: number|undefined;
  public _value?: fhir.FhirElement|undefined;
  /**
   * Default constructor for Quantity - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IQuantity> = {}) {
    super(source);
    if (source["code"]) { this.code = source.code; }
    if (source["_code"]) { this._code = new fhir.FhirElement(source._code!); }
    if (source["comparator"]) { this.comparator = source.comparator; }
    if (source["_comparator"]) { this._comparator = new fhir.FhirElement(source._comparator!); }
    if (source["system"]) { this.system = source.system; }
    if (source["_system"]) { this._system = new fhir.FhirElement(source._system!); }
    if (source["unit"]) { this.unit = source.unit; }
    if (source["_unit"]) { this._unit = new fhir.FhirElement(source._unit!); }
    if (source["value"]) { this.value = source.value; }
    if (source["_value"]) { this._value = new fhir.FhirElement(source._value!); }
  }
  /**
   * Check if the current Quantity contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a Quantity from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IQuantity):Quantity {
    var dest:Quantity = new Quantity(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `Quantity is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the Quantity.comparator field
 */
export enum QuantityComparatorEnum {
  LESS_THAN = "<",
  LESS_THAN_OR_EQUALS = "<=",
  GREATER_THAN_OR_EQUALS = ">=",
  GREATER_THAN = ">",
}
