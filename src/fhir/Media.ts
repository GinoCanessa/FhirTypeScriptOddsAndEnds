// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Media

import * as fhir from '../fhir.js'

import { EventStatusValueSet, EventStatusValueSetType, EventStatusValueSetEnum } from '../fhirValueSets/EventStatusValueSet.js'
import { MediaTypeValueSet, MediaTypeValueSetType, MediaTypeValueSetEnum } from '../fhirValueSets/MediaTypeValueSet.js'
import { MediaViewValueSet, MediaViewValueSetType, MediaViewValueSetEnum } from '../fhirValueSets/MediaViewValueSet.js'
import { ProcedureReasonValueSet, ProcedureReasonValueSetType, ProcedureReasonValueSetEnum } from '../fhirValueSets/ProcedureReasonValueSet.js'
import { BodySiteValueSet, BodySiteValueSetType, BodySiteValueSetEnum } from '../fhirValueSets/BodySiteValueSet.js'

/**
 * A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
 */
export type IMedia = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "Media";
  /**
   * The identifier label and use can be used to determine what kind of identifier it is.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * A procedure that is fulfilled in whole or in part by the creation of this media.
   */
  basedOn?: fhir.IReference[]|undefined;
  /**
   * Not to be used to link an event to an Encounter - use Media.encounter for that.
   * [The allowed reference resources may be adjusted as appropriate for the event resource].
   */
  partOf?: fhir.IReference[]|undefined;
  /**
   * A nominal state-transition diagram can be found in the [[event.html#statemachine | Event pattern]] documentation
   * Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
   */
  status: EventStatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: Media.status
   */
  _status?: fhir.IFhirElement|undefined;
  /**
   * A code that classifies whether the media is an image, video or audio recording or some other media category.
   */
  type?: fhir.ICodeableConcept|undefined;
  /**
   * Details of the type of the media - usually, how it was acquired (what type of device). If images sourced from a DICOM system, are wrapped in a Media resource, then this is the modality.
   */
  modality?: fhir.ICodeableConcept|undefined;
  /**
   * The name of the imaging view e.g. Lateral or Antero-posterior (AP).
   */
  view?: fhir.ICodeableConcept|undefined;
  /**
   * Who/What this Media is a record of.
   */
  subject?: fhir.IReference|undefined;
  /**
   * This will typically be the encounter the media occurred within.
   */
  encounter?: fhir.IReference|undefined;
  /**
   * The date and time(s) at which the media was collected.
   */
  createdDateTime?: string|undefined;
  /**
   * Extended properties for primitive element: Media.created[x]
   */
  _createdDateTime?: fhir.IFhirElement|undefined;
  /**
   * The date and time(s) at which the media was collected.
   */
  createdPeriod?: fhir.IPeriod|undefined;
  /**
   * It may be the same as the [`lastUpdated` ](resource-definitions.html#Meta.lastUpdated) time of the resource itself.  For Observations that do require review and verification for certain updates, it might not be the same as the `lastUpdated` time of the resource itself due to a non-clinically significant update that does not require the new version to be reviewed and verified again.
   */
  issued?: string|undefined;
  /**
   * Extended properties for primitive element: Media.issued
   */
  _issued?: fhir.IFhirElement|undefined;
  /**
   * The person who administered the collection of the image.
   */
  operator?: fhir.IReference|undefined;
  /**
   * Textual reasons can be captured using reasonCode.text.
   */
  reasonCode?: fhir.ICodeableConcept[]|undefined;
  /**
   * Only used if not implicit in code found in Observation.code.  In many systems, this may be represented as a related observation instead of an inline component.   
   * If the use case requires BodySite to be handled as a separate resource (e.g. to identify and track separately) then use the standard extension[ bodySite](extension-bodysite.html).
   */
  bodySite?: fhir.ICodeableConcept|undefined;
  /**
   * The name of the device / manufacturer of the device  that was used to make the recording.
   */
  deviceName?: string|undefined;
  /**
   * Extended properties for primitive element: Media.deviceName
   */
  _deviceName?: fhir.IFhirElement|undefined;
  /**
   * An extension should be used if further typing of the device is needed.  Secondary devices used to support collecting a media can be represented using either extension or through the Observation.related element.
   */
  device?: fhir.IReference|undefined;
  /**
   * Height of the image in pixels (photo/video).
   */
  height?: number|undefined;
  /**
   * Extended properties for primitive element: Media.height
   */
  _height?: fhir.IFhirElement|undefined;
  /**
   * Width of the image in pixels (photo/video).
   */
  width?: number|undefined;
  /**
   * Extended properties for primitive element: Media.width
   */
  _width?: fhir.IFhirElement|undefined;
  /**
   * if the number of frames is not supplied, the value may be unknown. Applications should not assume that there is only one frame unless it is explicitly stated.
   */
  frames?: number|undefined;
  /**
   * Extended properties for primitive element: Media.frames
   */
  _frames?: fhir.IFhirElement|undefined;
  /**
   * The duration might differ from occurrencePeriod if recording was paused.
   */
  duration?: number|undefined;
  /**
   * Extended properties for primitive element: Media.duration
   */
  _duration?: fhir.IFhirElement|undefined;
  /**
   * Recommended content types: image/jpeg, image/png, image/tiff, video/mpeg, audio/mp4, application/dicom. Application/dicom can contain the transfer syntax as a parameter.  For media that covers a period of time (video/sound), the content.creationTime is the end time. Creation time is used for tracking, organizing versions and searching.
   */
  content: fhir.IAttachment|null;
  /**
   * Not to be used for observations, conclusions, etc. Instead use an [Observation](observation.html) based on the Media/ImagingStudy resource.
   */
  note?: fhir.IAnnotation[]|undefined;
}

/**
 * A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
 */
export class Media extends fhir.DomainResource implements IMedia {
  /**
   * Resource Type Name
   */
  public resourceType: "Media";
  /**
   * The identifier label and use can be used to determine what kind of identifier it is.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * A procedure that is fulfilled in whole or in part by the creation of this media.
   */
  public basedOn?: fhir.Reference[]|undefined;
  /**
   * Not to be used to link an event to an Encounter - use Media.encounter for that.
   * [The allowed reference resources may be adjusted as appropriate for the event resource].
   */
  public partOf?: fhir.Reference[]|undefined;
  /**
   * A nominal state-transition diagram can be found in the [[event.html#statemachine | Event pattern]] documentation
   * Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
   */
  public status: EventStatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: Media.status
   */
  public _status?: fhir.FhirElement|undefined;
  /**
   * A code that classifies whether the media is an image, video or audio recording or some other media category.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Details of the type of the media - usually, how it was acquired (what type of device). If images sourced from a DICOM system, are wrapped in a Media resource, then this is the modality.
   */
  public modality?: fhir.CodeableConcept|undefined;
  /**
   * The name of the imaging view e.g. Lateral or Antero-posterior (AP).
   */
  public view?: fhir.CodeableConcept|undefined;
  /**
   * Who/What this Media is a record of.
   */
  public subject?: fhir.Reference|undefined;
  /**
   * This will typically be the encounter the media occurred within.
   */
  public encounter?: fhir.Reference|undefined;
  /**
   * The date and time(s) at which the media was collected.
   */
  public createdDateTime?: string|undefined;
  /**
   * Extended properties for primitive element: Media.created[x]
   */
  public _createdDateTime?: fhir.FhirElement|undefined;
  /**
   * The date and time(s) at which the media was collected.
   */
  public createdPeriod?: fhir.Period|undefined;
  /**
   * It may be the same as the [`lastUpdated` ](resource-definitions.html#Meta.lastUpdated) time of the resource itself.  For Observations that do require review and verification for certain updates, it might not be the same as the `lastUpdated` time of the resource itself due to a non-clinically significant update that does not require the new version to be reviewed and verified again.
   */
  public issued?: string|undefined;
  /**
   * Extended properties for primitive element: Media.issued
   */
  public _issued?: fhir.FhirElement|undefined;
  /**
   * The person who administered the collection of the image.
   */
  public operator?: fhir.Reference|undefined;
  /**
   * Textual reasons can be captured using reasonCode.text.
   */
  public reasonCode?: fhir.CodeableConcept[]|undefined;
  /**
   * Only used if not implicit in code found in Observation.code.  In many systems, this may be represented as a related observation instead of an inline component.   
   * If the use case requires BodySite to be handled as a separate resource (e.g. to identify and track separately) then use the standard extension[ bodySite](extension-bodysite.html).
   */
  public bodySite?: fhir.CodeableConcept|undefined;
  /**
   * The name of the device / manufacturer of the device  that was used to make the recording.
   */
  public deviceName?: string|undefined;
  /**
   * Extended properties for primitive element: Media.deviceName
   */
  public _deviceName?: fhir.FhirElement|undefined;
  /**
   * An extension should be used if further typing of the device is needed.  Secondary devices used to support collecting a media can be represented using either extension or through the Observation.related element.
   */
  public device?: fhir.Reference|undefined;
  /**
   * Height of the image in pixels (photo/video).
   */
  public height?: number|undefined;
  /**
   * Extended properties for primitive element: Media.height
   */
  public _height?: fhir.FhirElement|undefined;
  /**
   * Width of the image in pixels (photo/video).
   */
  public width?: number|undefined;
  /**
   * Extended properties for primitive element: Media.width
   */
  public _width?: fhir.FhirElement|undefined;
  /**
   * if the number of frames is not supplied, the value may be unknown. Applications should not assume that there is only one frame unless it is explicitly stated.
   */
  public frames?: number|undefined;
  /**
   * Extended properties for primitive element: Media.frames
   */
  public _frames?: fhir.FhirElement|undefined;
  /**
   * The duration might differ from occurrencePeriod if recording was paused.
   */
  public duration?: number|undefined;
  /**
   * Extended properties for primitive element: Media.duration
   */
  public _duration?: fhir.FhirElement|undefined;
  /**
   * Recommended content types: image/jpeg, image/png, image/tiff, video/mpeg, audio/mp4, application/dicom. Application/dicom can contain the transfer syntax as a parameter.  For media that covers a period of time (video/sound), the content.creationTime is the end time. Creation time is used for tracking, organizing versions and searching.
   */
  public content: fhir.Attachment|null;
  /**
   * Not to be used for observations, conclusions, etc. Instead use an [Observation](observation.html) based on the Media/ImagingStudy resource.
   */
  public note?: fhir.Annotation[]|undefined;
  /**
   * Default constructor for Media - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IMedia> = { }) {
    super(source);
    this.resourceType = 'Media';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['basedOn']) { this.basedOn = source.basedOn.map((x) => new fhir.Reference(x)); }
    if (source['partOf']) { this.partOf = source.partOf.map((x) => new fhir.Reference(x)); }
    if (source['status']) { this.status = source.status; }
    else { this.status = null; }
    if (source['_status']) { this._status = new fhir.FhirElement(source._status!); }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    if (source['modality']) { this.modality = new fhir.CodeableConcept(source.modality!); }
    if (source['view']) { this.view = new fhir.CodeableConcept(source.view!); }
    if (source['subject']) { this.subject = new fhir.Reference(source.subject!); }
    if (source['encounter']) { this.encounter = new fhir.Reference(source.encounter!); }
    if (source['createdDateTime']) { this.createdDateTime = source.createdDateTime; }
    if (source['_createdDateTime']) { this._createdDateTime = new fhir.FhirElement(source._createdDateTime!); }
    if (source['createdPeriod']) { this.createdPeriod = new fhir.Period(source.createdPeriod!); }
    if (source['issued']) { this.issued = source.issued; }
    if (source['_issued']) { this._issued = new fhir.FhirElement(source._issued!); }
    if (source['operator']) { this.operator = new fhir.Reference(source.operator!); }
    if (source['reasonCode']) { this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x)); }
    if (source['bodySite']) { this.bodySite = new fhir.CodeableConcept(source.bodySite!); }
    if (source['deviceName']) { this.deviceName = source.deviceName; }
    if (source['_deviceName']) { this._deviceName = new fhir.FhirElement(source._deviceName!); }
    if (source['device']) { this.device = new fhir.Reference(source.device!); }
    if (source['height']) { this.height = source.height; }
    if (source['_height']) { this._height = new fhir.FhirElement(source._height!); }
    if (source['width']) { this.width = source.width; }
    if (source['_width']) { this._width = new fhir.FhirElement(source._width!); }
    if (source['frames']) { this.frames = source.frames; }
    if (source['_frames']) { this._frames = new fhir.FhirElement(source._frames!); }
    if (source['duration']) { this.duration = source.duration; }
    if (source['_duration']) { this._duration = new fhir.FhirElement(source._duration!); }
    if (source['content']) { this.content = new fhir.Attachment(source.content!); }
    else { this.content = null; }
    if (source['note']) { this.note = source.note.map((x) => new fhir.Annotation(x)); }
  }
  /**
   * Required-bound Value Set for status
   */
  public static statusRequiredValueSet():EventStatusValueSetType {
    return EventStatusValueSet;
  }
  /**
   * Extensible-bound Value Set for type
   */
  public static typeExtensibleValueSet():MediaTypeValueSetType {
    return MediaTypeValueSet;
  }
  /**
   * Example-bound Value Set for view
   */
  public static viewExampleValueSet():MediaViewValueSetType {
    return MediaViewValueSet;
  }
  /**
   * Example-bound Value Set for reasonCode
   */
  public static reasonCodeExampleValueSet():ProcedureReasonValueSetType {
    return ProcedureReasonValueSet;
  }
  /**
   * Example-bound Value Set for bodySite
   */
  public static bodySiteExampleValueSet():BodySiteValueSetType {
    return BodySiteValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: Media.resourceType']); }
    if (this["identifier"]) { this.identifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["basedOn"]) { this.basedOn.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["partOf"]) { this.partOf.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (!this["status"]) { results.push(["status",'Missing required element: Media.status']); }
    if (this["_status"]) { results.push(...this._status.doModelValidation()); }
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (this["modality"]) { results.push(...this.modality.doModelValidation()); }
    if (this["view"]) { results.push(...this.view.doModelValidation()); }
    if (this["subject"]) { results.push(...this.subject.doModelValidation()); }
    if (this["encounter"]) { results.push(...this.encounter.doModelValidation()); }
    if (this["_createdDateTime"]) { results.push(...this._createdDateTime.doModelValidation()); }
    if (this["createdPeriod"]) { results.push(...this.createdPeriod.doModelValidation()); }
    if (this["_issued"]) { results.push(...this._issued.doModelValidation()); }
    if (this["operator"]) { results.push(...this.operator.doModelValidation()); }
    if (this["reasonCode"]) { this.reasonCode.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["bodySite"]) { results.push(...this.bodySite.doModelValidation()); }
    if (this["_deviceName"]) { results.push(...this._deviceName.doModelValidation()); }
    if (this["device"]) { results.push(...this.device.doModelValidation()); }
    if (this["_height"]) { results.push(...this._height.doModelValidation()); }
    if (this["_width"]) { results.push(...this._width.doModelValidation()); }
    if (this["_frames"]) { results.push(...this._frames.doModelValidation()); }
    if (this["_duration"]) { results.push(...this._duration.doModelValidation()); }
    if (!this["content"]) { results.push(["content",'Missing required element: Media.content']); }
    if (this["content"]) { results.push(...this.content.doModelValidation()); }
    if (this["note"]) { this.note.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}
