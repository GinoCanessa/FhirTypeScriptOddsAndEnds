// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * All the identified characteristics must be true for an entity to a member of the group.
 */
export type IGroupCharacteristic = fhir.IBackboneElement & {
  /**
   * A code that identifies the kind of trait being asserted.
   */
  code: fhir.ICodeableConcept|null;
  /**
   * This is labeled as "Is Modifier" because applications cannot wrongly include excluded members as included or vice versa.
   */
  exclude: boolean|null;
  _exclude?: fhir.IFhirElement|undefined;
  /**
   * The period over which the characteristic is tested; e.g. the patient had an operation during the month of June.
   */
  period?: fhir.IPeriod|undefined;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueBoolean?: boolean|undefined;
  _valueBoolean?: fhir.IFhirElement|undefined;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueQuantity?: fhir.IQuantity|undefined;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueRange?: fhir.IRange|undefined;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueReference?: fhir.IReference|undefined;
}
/**
 * Identifies the resource instances that are members of the group.
 */
export type IGroupMember = fhir.IBackboneElement & {
  /**
   * A reference to the entity that is a member of the group. Must be consistent with Group.type. If the entity is another group, then the type must be the same.
   */
  entity: fhir.IReference|null;
  /**
   * A flag to indicate that the member is no longer in the group, but previously may have been a member.
   */
  inactive?: boolean|undefined;
  _inactive?: fhir.IFhirElement|undefined;
  /**
   * The period that the member was in the group, if known.
   */
  period?: fhir.IPeriod|undefined;
}
/**
 * Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
 */
export type IGroup = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "Group";
  /**
   * Indicates whether the record for the group is available for use or is merely being retained for historical purposes.
   */
  active?: boolean|undefined;
  _active?: fhir.IFhirElement|undefined;
  /**
   * If true, indicates that the resource refers to a specific group of real individuals.  If false, the group defines a set of intended individuals.
   */
  actual: boolean|null;
  _actual?: fhir.IFhirElement|undefined;
  /**
   * All the identified characteristics must be true for an entity to a member of the group.
   */
  characteristic?: fhir.IGroupCharacteristic[]|undefined;
  /**
   * This would generally be omitted for Person resources.
   */
  code?: fhir.ICodeableConcept|undefined;
  /**
   * A unique business identifier for this group.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * This does not strictly align with ownership of a herd or flock, but may suffice to represent that relationship in simple cases. More complex cases will require an extension.
   */
  managingEntity?: fhir.IReference|undefined;
  /**
   * Identifies the resource instances that are members of the group.
   */
  member?: fhir.IGroupMember[]|undefined;
  /**
   * A label assigned to the group for human identification and communication.
   */
  name?: string|undefined;
  _name?: fhir.IFhirElement|undefined;
  /**
   * Note that the quantity may be less than the number of members if some of the members are not active.
   */
  quantity?: number|undefined;
  _quantity?: fhir.IFhirElement|undefined;
  /**
   * Group members SHALL be of the appropriate resource type (Patient for person or animal; or Practitioner, Device, Medication or Substance for the other types.).
   */
  type: GroupTypeEnum|null;
  _type?: fhir.IFhirElement|undefined;
}
/**
 * All the identified characteristics must be true for an entity to a member of the group.
 */
export class GroupCharacteristic extends fhir.BackboneElement implements fhir.IGroupCharacteristic {
  /**
   * A code that identifies the kind of trait being asserted.
   */
  public code: fhir.CodeableConcept|null;
  /**
   * This is labeled as "Is Modifier" because applications cannot wrongly include excluded members as included or vice versa.
   */
  public exclude: boolean|null;
  public _exclude?: fhir.FhirElement|undefined;
  /**
   * The period over which the characteristic is tested; e.g. the patient had an operation during the month of June.
   */
  public period?: fhir.Period|undefined;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  public valueCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  public valueBoolean?: boolean|undefined;
  public _valueBoolean?: fhir.FhirElement|undefined;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  public valueQuantity?: fhir.Quantity|undefined;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  public valueRange?: fhir.Range|undefined;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  public valueReference?: fhir.Reference|undefined;
  /**
   * Default constructor for GroupCharacteristic - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IGroupCharacteristic> = {}) {
    super(source);
    this.code = null;
    if (source["code"]) { this.code = new fhir.CodeableConcept(source.code!); }
    if (this.code === undefined) { this.code = null }
    this.exclude = null;
    if (source["exclude"]) { this.exclude = source.exclude; }
    if (this.exclude === undefined) { this.exclude = null }
    if (source["_exclude"]) { this._exclude = new fhir.FhirElement(source._exclude!); }
    if (source["period"]) { this.period = new fhir.Period(source.period!); }
    if (source["valueCodeableConcept"]) { this.valueCodeableConcept = new fhir.CodeableConcept(source.valueCodeableConcept!); }
    if (source["valueBoolean"]) { this.valueBoolean = source.valueBoolean; }
    if (source["_valueBoolean"]) { this._valueBoolean = new fhir.FhirElement(source._valueBoolean!); }
    if (source["valueQuantity"]) { this.valueQuantity = new fhir.Quantity(source.valueQuantity!); }
    if (source["valueRange"]) { this.valueRange = new fhir.Range(source.valueRange!); }
    if (source["valueReference"]) { this.valueReference = new fhir.Reference(source.valueReference!); }
  }
  /**
   * Check if the current GroupCharacteristic contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["code"] === undefined) { missingElements.push("code"); }
    if (this["exclude"] === undefined) { missingElements.push("exclude"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a GroupCharacteristic from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IGroupCharacteristic):GroupCharacteristic {
    var dest:GroupCharacteristic = new GroupCharacteristic(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `GroupCharacteristic is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Identifies the resource instances that are members of the group.
 */
export class GroupMember extends fhir.BackboneElement implements fhir.IGroupMember {
  /**
   * A reference to the entity that is a member of the group. Must be consistent with Group.type. If the entity is another group, then the type must be the same.
   */
  public entity: fhir.Reference|null;
  /**
   * A flag to indicate that the member is no longer in the group, but previously may have been a member.
   */
  public inactive?: boolean|undefined;
  public _inactive?: fhir.FhirElement|undefined;
  /**
   * The period that the member was in the group, if known.
   */
  public period?: fhir.Period|undefined;
  /**
   * Default constructor for GroupMember - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IGroupMember> = {}) {
    super(source);
    this.entity = null;
    if (source["entity"]) { this.entity = new fhir.Reference(source.entity!); }
    if (this.entity === undefined) { this.entity = null }
    if (source["inactive"]) { this.inactive = source.inactive; }
    if (source["_inactive"]) { this._inactive = new fhir.FhirElement(source._inactive!); }
    if (source["period"]) { this.period = new fhir.Period(source.period!); }
  }
  /**
   * Check if the current GroupMember contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["entity"] === undefined) { missingElements.push("entity"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a GroupMember from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IGroupMember):GroupMember {
    var dest:GroupMember = new GroupMember(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `GroupMember is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
 */
export class Group extends fhir.DomainResource implements fhir.IGroup {
  /**
   * Resource Type Name
   */
  public override resourceType: "Group";
  /**
   * Indicates whether the record for the group is available for use or is merely being retained for historical purposes.
   */
  public active?: boolean|undefined;
  public _active?: fhir.FhirElement|undefined;
  /**
   * If true, indicates that the resource refers to a specific group of real individuals.  If false, the group defines a set of intended individuals.
   */
  public actual: boolean|null;
  public _actual?: fhir.FhirElement|undefined;
  /**
   * All the identified characteristics must be true for an entity to a member of the group.
   */
  public characteristic?: fhir.GroupCharacteristic[]|undefined;
  /**
   * This would generally be omitted for Person resources.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * A unique business identifier for this group.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * This does not strictly align with ownership of a herd or flock, but may suffice to represent that relationship in simple cases. More complex cases will require an extension.
   */
  public managingEntity?: fhir.Reference|undefined;
  /**
   * Identifies the resource instances that are members of the group.
   */
  public member?: fhir.GroupMember[]|undefined;
  /**
   * A label assigned to the group for human identification and communication.
   */
  public name?: string|undefined;
  public _name?: fhir.FhirElement|undefined;
  /**
   * Note that the quantity may be less than the number of members if some of the members are not active.
   */
  public quantity?: number|undefined;
  public _quantity?: fhir.FhirElement|undefined;
  /**
   * Group members SHALL be of the appropriate resource type (Patient for person or animal; or Practitioner, Device, Medication or Substance for the other types.).
   */
  public type: GroupTypeEnum|null;
  public _type?: fhir.FhirElement|undefined;
  /**
   * Default constructor for Group - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IGroup> = {}) {
    super(source);
    this.resourceType = 'Group';
    if (source["active"]) { this.active = source.active; }
    if (source["_active"]) { this._active = new fhir.FhirElement(source._active!); }
    this.actual = null;
    if (source["actual"]) { this.actual = source.actual; }
    if (this.actual === undefined) { this.actual = null }
    if (source["_actual"]) { this._actual = new fhir.FhirElement(source._actual!); }
    if (source["characteristic"]) { this.characteristic = source.characteristic.map((x:Partial<fhir.IGroupCharacteristic>) => new fhir.GroupCharacteristic(x)); }
    if (source["code"]) { this.code = new fhir.CodeableConcept(source.code!); }
    if (source["identifier"]) { this.identifier = source.identifier.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    if (source["managingEntity"]) { this.managingEntity = new fhir.Reference(source.managingEntity!); }
    if (source["member"]) { this.member = source.member.map((x:Partial<fhir.IGroupMember>) => new fhir.GroupMember(x)); }
    if (source["name"]) { this.name = source.name; }
    if (source["_name"]) { this._name = new fhir.FhirElement(source._name!); }
    if (source["quantity"]) { this.quantity = source.quantity; }
    if (source["_quantity"]) { this._quantity = new fhir.FhirElement(source._quantity!); }
    this.type = null;
    if (source["type"]) { this.type = source.type; }
    if (this.type === undefined) { this.type = null }
    if (source["_type"]) { this._type = new fhir.FhirElement(source._type!); }
  }
  /**
   * Check if the current Group contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["actual"] === undefined) { missingElements.push("actual"); }
    if (this["type"] === undefined) { missingElements.push("type"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a Group from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IGroup):Group {
    var dest:Group = new Group(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `Group is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the Group.type field
 */
export enum GroupTypeEnum {
  PERSON = "person",
  ANIMAL = "animal",
  PRACTITIONER = "practitioner",
  DEVICE = "device",
  MEDICATION = "medication",
  SUBSTANCE = "substance",
}
