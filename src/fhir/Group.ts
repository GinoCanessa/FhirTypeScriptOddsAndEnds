// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Group

import * as fhir from '../fhir.js'

import { GroupTypeValueSet, GroupTypeValueSetType, GroupTypeValueSetEnum } from '../fhirValueSets/GroupTypeValueSet.js'

/**
 * All the identified characteristics must be true for an entity to a member of the group.
 */
export type IGroupCharacteristic = fhir.IBackboneElement & { 
  /**
   * A code that identifies the kind of trait being asserted.
   */
  code: fhir.ICodeableConcept|null;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueBoolean?: boolean|undefined;
  /**
   * Extended properties for primitive element: Group.characteristic.value[x]
   */
  _valueBoolean?: fhir.IFhirElement|undefined;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueQuantity?: fhir.IQuantity|undefined;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueRange?: fhir.IRange|undefined;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueReference?: fhir.IReference|undefined;
  /**
   * This is labeled as "Is Modifier" because applications cannot wrongly include excluded members as included or vice versa.
   */
  exclude: boolean|null;
  /**
   * Extended properties for primitive element: Group.characteristic.exclude
   */
  _exclude?: fhir.IFhirElement|undefined;
  /**
   * The period over which the characteristic is tested; e.g. the patient had an operation during the month of June.
   */
  period?: fhir.IPeriod|undefined;
}

/**
 * Identifies the resource instances that are members of the group.
 */
export type IGroupMember = fhir.IBackboneElement & { 
  /**
   * A reference to the entity that is a member of the group. Must be consistent with Group.type. If the entity is another group, then the type must be the same.
   */
  entity: fhir.IReference|null;
  /**
   * The period that the member was in the group, if known.
   */
  period?: fhir.IPeriod|undefined;
  /**
   * A flag to indicate that the member is no longer in the group, but previously may have been a member.
   */
  inactive?: boolean|undefined;
  /**
   * Extended properties for primitive element: Group.member.inactive
   */
  _inactive?: fhir.IFhirElement|undefined;
}

/**
 * Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
 */
export type IGroup = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "Group";
  /**
   * A unique business identifier for this group.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * Indicates whether the record for the group is available for use or is merely being retained for historical purposes.
   */
  active?: boolean|undefined;
  /**
   * Extended properties for primitive element: Group.active
   */
  _active?: fhir.IFhirElement|undefined;
  /**
   * Group members SHALL be of the appropriate resource type (Patient for person or animal; or Practitioner, Device, Medication or Substance for the other types.).
   */
  type: GroupTypeValueSetEnum|null;
  /**
   * Extended properties for primitive element: Group.type
   */
  _type?: fhir.IFhirElement|undefined;
  /**
   * If true, indicates that the resource refers to a specific group of real individuals.  If false, the group defines a set of intended individuals.
   */
  actual: boolean|null;
  /**
   * Extended properties for primitive element: Group.actual
   */
  _actual?: fhir.IFhirElement|undefined;
  /**
   * This would generally be omitted for Person resources.
   */
  code?: fhir.ICodeableConcept|undefined;
  /**
   * A label assigned to the group for human identification and communication.
   */
  name?: string|undefined;
  /**
   * Extended properties for primitive element: Group.name
   */
  _name?: fhir.IFhirElement|undefined;
  /**
   * Note that the quantity may be less than the number of members if some of the members are not active.
   */
  quantity?: number|undefined;
  /**
   * Extended properties for primitive element: Group.quantity
   */
  _quantity?: fhir.IFhirElement|undefined;
  /**
   * This does not strictly align with ownership of a herd or flock, but may suffice to represent that relationship in simple cases. More complex cases will require an extension.
   */
  managingEntity?: fhir.IReference|undefined;
  /**
   * All the identified characteristics must be true for an entity to a member of the group.
   */
  characteristic?: fhir.IGroupCharacteristic[]|undefined;
  /**
   * Identifies the resource instances that are members of the group.
   */
  member?: fhir.IGroupMember[]|undefined;
}

/**
 * All the identified characteristics must be true for an entity to a member of the group.
 */
export class GroupCharacteristic extends fhir.BackboneElement implements IGroupCharacteristic {
  /**
   * A code that identifies the kind of trait being asserted.
   */
  public code: fhir.CodeableConcept|null;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  public valueCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  public valueBoolean?: boolean|undefined;
  /**
   * Extended properties for primitive element: Group.characteristic.value[x]
   */
  public _valueBoolean?: fhir.FhirElement|undefined;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  public valueQuantity?: fhir.Quantity|undefined;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  public valueRange?: fhir.Range|undefined;
  /**
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  public valueReference?: fhir.Reference|undefined;
  /**
   * This is labeled as "Is Modifier" because applications cannot wrongly include excluded members as included or vice versa.
   */
  public exclude: boolean|null;
  /**
   * Extended properties for primitive element: Group.characteristic.exclude
   */
  public _exclude?: fhir.FhirElement|undefined;
  /**
   * The period over which the characteristic is tested; e.g. the patient had an operation during the month of June.
   */
  public period?: fhir.Period|undefined;
  /**
   * Default constructor for GroupCharacteristic - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IGroupCharacteristic> = { }) {
    super(source);
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code!); }
    else { this.code = null; }
    if (source['valueCodeableConcept']) { this.valueCodeableConcept = new fhir.CodeableConcept(source.valueCodeableConcept!); }
    if (source['valueBoolean']) { this.valueBoolean = source.valueBoolean; }
    if (source['_valueBoolean']) { this._valueBoolean = new fhir.FhirElement(source._valueBoolean!); }
    if (source['valueQuantity']) { this.valueQuantity = new fhir.Quantity(source.valueQuantity!); }
    if (source['valueRange']) { this.valueRange = new fhir.Range(source.valueRange!); }
    if (source['valueReference']) { this.valueReference = new fhir.Reference(source.valueReference!); }
    if (source['exclude']) { this.exclude = source.exclude; }
    else { this.exclude = null; }
    if (source['_exclude']) { this._exclude = new fhir.FhirElement(source._exclude!); }
    if (source['period']) { this.period = new fhir.Period(source.period!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["code"]) { results.push(["code",'Missing required element: Group.characteristic.code']); }
    if (this["code"]) { results.push(...this.code.doModelValidation()); }
    if (this["valueCodeableConcept"]) { results.push(...this.valueCodeableConcept.doModelValidation()); }
    if (this["_valueBoolean"]) { results.push(...this._valueBoolean.doModelValidation()); }
    if (this["valueQuantity"]) { results.push(...this.valueQuantity.doModelValidation()); }
    if (this["valueRange"]) { results.push(...this.valueRange.doModelValidation()); }
    if (this["valueReference"]) { results.push(...this.valueReference.doModelValidation()); }
    if (!this["exclude"]) { results.push(["exclude",'Missing required element: Group.characteristic.exclude']); }
    if (this["_exclude"]) { results.push(...this._exclude.doModelValidation()); }
    if (this["period"]) { results.push(...this.period.doModelValidation()); }
    return results;
  }
}

/**
 * Identifies the resource instances that are members of the group.
 */
export class GroupMember extends fhir.BackboneElement implements IGroupMember {
  /**
   * A reference to the entity that is a member of the group. Must be consistent with Group.type. If the entity is another group, then the type must be the same.
   */
  public entity: fhir.Reference|null;
  /**
   * The period that the member was in the group, if known.
   */
  public period?: fhir.Period|undefined;
  /**
   * A flag to indicate that the member is no longer in the group, but previously may have been a member.
   */
  public inactive?: boolean|undefined;
  /**
   * Extended properties for primitive element: Group.member.inactive
   */
  public _inactive?: fhir.FhirElement|undefined;
  /**
   * Default constructor for GroupMember - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IGroupMember> = { }) {
    super(source);
    if (source['entity']) { this.entity = new fhir.Reference(source.entity!); }
    else { this.entity = null; }
    if (source['period']) { this.period = new fhir.Period(source.period!); }
    if (source['inactive']) { this.inactive = source.inactive; }
    if (source['_inactive']) { this._inactive = new fhir.FhirElement(source._inactive!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["entity"]) { results.push(["entity",'Missing required element: Group.member.entity']); }
    if (this["entity"]) { results.push(...this.entity.doModelValidation()); }
    if (this["period"]) { results.push(...this.period.doModelValidation()); }
    if (this["_inactive"]) { results.push(...this._inactive.doModelValidation()); }
    return results;
  }
}

/**
 * Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
 */
export class Group extends fhir.DomainResource implements IGroup {
  /**
   * Resource Type Name
   */
  public resourceType: "Group";
  /**
   * A unique business identifier for this group.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * Indicates whether the record for the group is available for use or is merely being retained for historical purposes.
   */
  public active?: boolean|undefined;
  /**
   * Extended properties for primitive element: Group.active
   */
  public _active?: fhir.FhirElement|undefined;
  /**
   * Group members SHALL be of the appropriate resource type (Patient for person or animal; or Practitioner, Device, Medication or Substance for the other types.).
   */
  public type: GroupTypeValueSetEnum|null;
  /**
   * Extended properties for primitive element: Group.type
   */
  public _type?: fhir.FhirElement|undefined;
  /**
   * If true, indicates that the resource refers to a specific group of real individuals.  If false, the group defines a set of intended individuals.
   */
  public actual: boolean|null;
  /**
   * Extended properties for primitive element: Group.actual
   */
  public _actual?: fhir.FhirElement|undefined;
  /**
   * This would generally be omitted for Person resources.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * A label assigned to the group for human identification and communication.
   */
  public name?: string|undefined;
  /**
   * Extended properties for primitive element: Group.name
   */
  public _name?: fhir.FhirElement|undefined;
  /**
   * Note that the quantity may be less than the number of members if some of the members are not active.
   */
  public quantity?: number|undefined;
  /**
   * Extended properties for primitive element: Group.quantity
   */
  public _quantity?: fhir.FhirElement|undefined;
  /**
   * This does not strictly align with ownership of a herd or flock, but may suffice to represent that relationship in simple cases. More complex cases will require an extension.
   */
  public managingEntity?: fhir.Reference|undefined;
  /**
   * All the identified characteristics must be true for an entity to a member of the group.
   */
  public characteristic?: fhir.GroupCharacteristic[]|undefined;
  /**
   * Identifies the resource instances that are members of the group.
   */
  public member?: fhir.GroupMember[]|undefined;
  /**
   * Default constructor for Group - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IGroup> = { }) {
    super(source);
    this.resourceType = 'Group';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['active']) { this.active = source.active; }
    if (source['_active']) { this._active = new fhir.FhirElement(source._active!); }
    if (source['type']) { this.type = source.type; }
    else { this.type = null; }
    if (source['_type']) { this._type = new fhir.FhirElement(source._type!); }
    if (source['actual']) { this.actual = source.actual; }
    else { this.actual = null; }
    if (source['_actual']) { this._actual = new fhir.FhirElement(source._actual!); }
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code!); }
    if (source['name']) { this.name = source.name; }
    if (source['_name']) { this._name = new fhir.FhirElement(source._name!); }
    if (source['quantity']) { this.quantity = source.quantity; }
    if (source['_quantity']) { this._quantity = new fhir.FhirElement(source._quantity!); }
    if (source['managingEntity']) { this.managingEntity = new fhir.Reference(source.managingEntity!); }
    if (source['characteristic']) { this.characteristic = source.characteristic.map((x) => new fhir.GroupCharacteristic(x)); }
    if (source['member']) { this.member = source.member.map((x) => new fhir.GroupMember(x)); }
  }
  /**
   * Required-bound Value Set for type
   */
  public static typeRequiredValueSet():GroupTypeValueSetType {
    return GroupTypeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: Group.resourceType']); }
    if (this["identifier"]) { this.identifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_active"]) { results.push(...this._active.doModelValidation()); }
    if (!this["type"]) { results.push(["type",'Missing required element: Group.type']); }
    if (this["_type"]) { results.push(...this._type.doModelValidation()); }
    if (!this["actual"]) { results.push(["actual",'Missing required element: Group.actual']); }
    if (this["_actual"]) { results.push(...this._actual.doModelValidation()); }
    if (this["code"]) { results.push(...this.code.doModelValidation()); }
    if (this["_name"]) { results.push(...this._name.doModelValidation()); }
    if (this["_quantity"]) { results.push(...this._quantity.doModelValidation()); }
    if (this["managingEntity"]) { results.push(...this.managingEntity.doModelValidation()); }
    if (this["characteristic"]) { this.characteristic.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["member"]) { this.member.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}
