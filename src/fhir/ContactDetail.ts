// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Specifies contact information for a person or organization.
 */
export type IContactDetail = fhir.IFhirElement & {
  /**
   * If there is no named individual, the telecom information is for the organization as a whole.
   */
  name?: string|undefined;
  _name?: fhir.IFhirElement|undefined;
  /**
   * The contact details for the individual (if a name was provided) or the organization.
   */
  telecom?: fhir.IContactPoint[]|undefined;
}
/**
 * Specifies contact information for a person or organization.
 */
export class ContactDetail extends fhir.FhirElement implements fhir.IContactDetail {
  /**
   * If there is no named individual, the telecom information is for the organization as a whole.
   */
  public name?: string|undefined;
  public _name?: fhir.FhirElement|undefined;
  /**
   * The contact details for the individual (if a name was provided) or the organization.
   */
  public telecom?: fhir.ContactPoint[]|undefined;
  /**
   * Default constructor for ContactDetail - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IContactDetail> = {}) {
    super(source);
    if (source["name"]) { this.name = source.name; }
    if (source["_name"]) { this._name = new fhir.FhirElement(source._name!); }
    if (source["telecom"]) { this.telecom = source.telecom.map((x:Partial<fhir.IContactPoint>) => new fhir.ContactPoint(x)); }
  }
  /**
   * Check if the current ContactDetail contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ContactDetail from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IContactDetail):ContactDetail {
    var dest:ContactDetail = new ContactDetail(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `ContactDetail is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
