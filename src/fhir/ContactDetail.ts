// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: ContactDetail

import * as fhir from '../fhir.js'


/**
 * Specifies contact information for a person or organization.
 */
export type IContactDetail = fhir.IFhirElement & { 
  /**
   * If there is no named individual, the telecom information is for the organization as a whole.
   */
  name?: string|undefined;
  /**
   * Extended properties for primitive element: ContactDetail.name
   */
  _name?: fhir.IFhirElement|undefined;
  /**
   * The contact details for the individual (if a name was provided) or the organization.
   */
  telecom?: fhir.IContactPoint[]|undefined;
}

/**
 * Specifies contact information for a person or organization.
 */
export class ContactDetail extends fhir.FhirElement implements IContactDetail {
  /**
   * If there is no named individual, the telecom information is for the organization as a whole.
   */
  public name?: string|undefined;
  /**
   * Extended properties for primitive element: ContactDetail.name
   */
  public _name?: fhir.FhirElement|undefined;
  /**
   * The contact details for the individual (if a name was provided) or the organization.
   */
  public telecom?: fhir.ContactPoint[]|undefined;
  /**
   * Default constructor for ContactDetail - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IContactDetail> = { }) {
    super(source);
    if (source['name']) { this.name = source.name; }
    if (source['_name']) { this._name = new fhir.FhirElement(source._name!); }
    if (source['telecom']) { this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["_name"]) { results.push(...this._name.doModelValidation()); }
    if (this["telecom"]) { this.telecom.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}
