// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * An error, warning, or information message that results from a system action.
 */
export type IOperationOutcomeIssue = fhir.IBackboneElement & {
  /**
   * Describes the type of the issue. The system that creates an OperationOutcome SHALL choose the most applicable code from the IssueType value set, and may additional provide its own code for the error in the details element.
   */
  code: string|null;
  _code?: fhir.IFhirElement|undefined;
  /**
   * A human readable description of the error issue SHOULD be placed in details.text.
   */
  details?: fhir.ICodeableConcept|undefined;
  /**
   * This may be a description of how a value is erroneous, a stack dump to help trace the issue or other troubleshooting information.
   */
  diagnostics?: string|undefined;
  _diagnostics?: fhir.IFhirElement|undefined;
  /**
   * The root of the FHIRPath is the resource or bundle that generated OperationOutcome.  Each FHIRPath SHALL resolve to a single node.
   */
  expression?: string[]|undefined;
  _expression?: fhir.IFhirElement[]|undefined;
  /**
   * The root of the XPath is the resource or bundle that generated OperationOutcome.  Each XPath SHALL resolve to a single node.  This element is deprecated, and is being replaced by expression.
   */
  location?: string[]|undefined;
  _location?: fhir.IFhirElement[]|undefined;
  /**
   * This is labeled as "Is Modifier" because applications should not confuse hints and warnings with errors.
   */
  severity: OperationOutcomeIssueSeverityEnum|null;
  _severity?: fhir.IFhirElement|undefined;
}
/**
 * A collection of error, warning, or information messages that result from a system action.
 */
export type IOperationOutcome = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "OperationOutcome";
  /**
   * An error, warning, or information message that results from a system action.
   */
  issue: fhir.IOperationOutcomeIssue[]|null;
}
/**
 * An error, warning, or information message that results from a system action.
 */
export class OperationOutcomeIssue extends fhir.BackboneElement implements fhir.IOperationOutcomeIssue {
  /**
   * Describes the type of the issue. The system that creates an OperationOutcome SHALL choose the most applicable code from the IssueType value set, and may additional provide its own code for the error in the details element.
   */
  public code: string|null;
  public _code?: fhir.FhirElement|undefined;
  /**
   * A human readable description of the error issue SHOULD be placed in details.text.
   */
  public details?: fhir.CodeableConcept|undefined;
  /**
   * This may be a description of how a value is erroneous, a stack dump to help trace the issue or other troubleshooting information.
   */
  public diagnostics?: string|undefined;
  public _diagnostics?: fhir.FhirElement|undefined;
  /**
   * The root of the FHIRPath is the resource or bundle that generated OperationOutcome.  Each FHIRPath SHALL resolve to a single node.
   */
  public expression?: string[]|undefined;
  public _expression?: fhir.FhirElement[]|undefined;
  /**
   * The root of the XPath is the resource or bundle that generated OperationOutcome.  Each XPath SHALL resolve to a single node.  This element is deprecated, and is being replaced by expression.
   */
  public location?: string[]|undefined;
  public _location?: fhir.FhirElement[]|undefined;
  /**
   * This is labeled as "Is Modifier" because applications should not confuse hints and warnings with errors.
   */
  public severity: OperationOutcomeIssueSeverityEnum|null;
  public _severity?: fhir.FhirElement|undefined;
  /**
   * Default constructor for OperationOutcomeIssue - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IOperationOutcomeIssue> = {}) {
    super(source);
    this.code = null;
    if (source["code"]) { this.code = source.code; }
    if (this.code === undefined) { this.code = null }
    if (source["_code"]) { this._code = new fhir.FhirElement(source._code!); }
    if (source["details"]) { this.details = new fhir.CodeableConcept(source.details!); }
    if (source["diagnostics"]) { this.diagnostics = source.diagnostics; }
    if (source["_diagnostics"]) { this._diagnostics = new fhir.FhirElement(source._diagnostics!); }
    if (source["expression"]) { this.expression = source.expression.map((x) => (x)); }
    if (source["_expression"]) { this._expression = source._expression.map((x:Partial<fhir.IFhirElement>) => new fhir.FhirElement(x)); }
    if (source["location"]) { this.location = source.location.map((x) => (x)); }
    if (source["_location"]) { this._location = source._location.map((x:Partial<fhir.IFhirElement>) => new fhir.FhirElement(x)); }
    this.severity = null;
    if (source["severity"]) { this.severity = source.severity; }
    if (this.severity === undefined) { this.severity = null }
    if (source["_severity"]) { this._severity = new fhir.FhirElement(source._severity!); }
  }
  /**
   * Check if the current OperationOutcomeIssue contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["code"] === undefined) { missingElements.push("code"); }
    if (this["severity"] === undefined) { missingElements.push("severity"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a OperationOutcomeIssue from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IOperationOutcomeIssue):OperationOutcomeIssue {
    var dest:OperationOutcomeIssue = new OperationOutcomeIssue(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `OperationOutcomeIssue is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * A collection of error, warning, or information messages that result from a system action.
 */
export class OperationOutcome extends fhir.DomainResource implements fhir.IOperationOutcome {
  /**
   * Resource Type Name
   */
  public override resourceType: "OperationOutcome";
  /**
   * An error, warning, or information message that results from a system action.
   */
  public issue: fhir.OperationOutcomeIssue[]|null;
  /**
   * Default constructor for OperationOutcome - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IOperationOutcome> = {}) {
    super(source);
    this.resourceType = 'OperationOutcome';
    this.issue = null;
    if (source["issue"]) { this.issue = source.issue.map((x:Partial<fhir.IOperationOutcomeIssue>) => new fhir.OperationOutcomeIssue(x)); }
    if (this.issue === undefined) { this.issue = null }
  }
  /**
   * Check if the current OperationOutcome contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if ((!this["issue"]) || (this["issue"].length === 0)) { missingElements.push("issue"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a OperationOutcome from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IOperationOutcome):OperationOutcome {
    var dest:OperationOutcome = new OperationOutcome(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `OperationOutcome is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the OperationOutcome.issue.severity field
 */
export enum OperationOutcomeIssueSeverityEnum {
  FATAL = "fatal",
  ERROR = "error",
  WARNING = "warning",
  INFORMATION = "information",
}
