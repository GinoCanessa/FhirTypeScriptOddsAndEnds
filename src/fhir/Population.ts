// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * A populatioof people with some set of grouping criteria.
 */
export type IPopulation = fhir.IBackboneElement & {
  /**
   * The age of the specific population.
   */
  ageRange?: fhir.IRange|undefined;
  /**
   * The age of the specific population.
   */
  ageCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * The gender of the specific population.
   */
  gender?: fhir.ICodeableConcept|undefined;
  /**
   * The existing physiological conditions of the specific population to which this applies.
   */
  physiologicalCondition?: fhir.ICodeableConcept|undefined;
  /**
   * Race of the specific population.
   */
  race?: fhir.ICodeableConcept|undefined;
}
/**
 * A populatioof people with some set of grouping criteria.
 */
export class Population extends fhir.BackboneElement implements fhir.IPopulation {
  /**
   * The age of the specific population.
   */
  public ageRange?: fhir.Range|undefined;
  /**
   * The age of the specific population.
   */
  public ageCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * The gender of the specific population.
   */
  public gender?: fhir.CodeableConcept|undefined;
  /**
   * The existing physiological conditions of the specific population to which this applies.
   */
  public physiologicalCondition?: fhir.CodeableConcept|undefined;
  /**
   * Race of the specific population.
   */
  public race?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for Population - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IPopulation> = {}) {
    super(source);
    if (source["ageRange"]) { this.ageRange = new fhir.Range(source.ageRange!); }
    if (source["ageCodeableConcept"]) { this.ageCodeableConcept = new fhir.CodeableConcept(source.ageCodeableConcept!); }
    if (source["gender"]) { this.gender = new fhir.CodeableConcept(source.gender!); }
    if (source["physiologicalCondition"]) { this.physiologicalCondition = new fhir.CodeableConcept(source.physiologicalCondition!); }
    if (source["race"]) { this.race = new fhir.CodeableConcept(source.race!); }
  }
  /**
   * Check if the current Population contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a Population from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IPopulation):Population {
    var dest:Population = new Population(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `Population is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
