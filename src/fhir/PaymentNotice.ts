// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: PaymentNotice

import * as fhir from '../fhir.js'

import { FmStatusValueSet, FmStatusValueSetType, FmStatusValueSetEnum } from '../fhirValueSets/FmStatusValueSet.js'
import { PaymentStatusValueSet, PaymentStatusValueSetType, PaymentStatusValueSetEnum } from '../fhirValueSets/PaymentStatusValueSet.js'

/**
 * This resource provides the status of the payment for goods and services rendered, and the request and response resource references.
 */
export type IPaymentNotice = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "PaymentNotice";
  /**
   * A unique identifier assigned to this payment notice.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: FmStatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: PaymentNotice.status
   */
  _status?: fhir.IFhirElement|undefined;
  /**
   * Reference of resource for which payment is being made.
   */
  request?: fhir.IReference|undefined;
  /**
   * Reference of response to resource for which payment is being made.
   */
  response?: fhir.IReference|undefined;
  /**
   * The date when this resource was created.
   */
  created: string|null;
  /**
   * Extended properties for primitive element: PaymentNotice.created
   */
  _created?: fhir.IFhirElement|undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  provider?: fhir.IReference|undefined;
  /**
   * A reference to the payment which is the subject of this notice.
   */
  payment: fhir.IReference|null;
  /**
   * The date when the above payment action occurred.
   */
  paymentDate?: string|undefined;
  /**
   * Extended properties for primitive element: PaymentNotice.paymentDate
   */
  _paymentDate?: fhir.IFhirElement|undefined;
  /**
   * The party who will receive or has received payment that is the subject of this notification.
   */
  payee?: fhir.IReference|undefined;
  /**
   * The party who is notified of the payment status.
   */
  recipient: fhir.IReference|null;
  /**
   * The amount sent to the payee.
   */
  amount: fhir.IMoney|null;
  /**
   * Typically paid: payment sent, cleared: payment received.
   */
  paymentStatus?: fhir.ICodeableConcept|undefined;
}

/**
 * This resource provides the status of the payment for goods and services rendered, and the request and response resource references.
 */
export class PaymentNotice extends fhir.DomainResource implements IPaymentNotice {
  /**
   * Resource Type Name
   */
  public resourceType: "PaymentNotice";
  /**
   * A unique identifier assigned to this payment notice.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  public status: FmStatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: PaymentNotice.status
   */
  public _status?: fhir.FhirElement|undefined;
  /**
   * Reference of resource for which payment is being made.
   */
  public request?: fhir.Reference|undefined;
  /**
   * Reference of response to resource for which payment is being made.
   */
  public response?: fhir.Reference|undefined;
  /**
   * The date when this resource was created.
   */
  public created: string|null;
  /**
   * Extended properties for primitive element: PaymentNotice.created
   */
  public _created?: fhir.FhirElement|undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  public provider?: fhir.Reference|undefined;
  /**
   * A reference to the payment which is the subject of this notice.
   */
  public payment: fhir.Reference|null;
  /**
   * The date when the above payment action occurred.
   */
  public paymentDate?: string|undefined;
  /**
   * Extended properties for primitive element: PaymentNotice.paymentDate
   */
  public _paymentDate?: fhir.FhirElement|undefined;
  /**
   * The party who will receive or has received payment that is the subject of this notification.
   */
  public payee?: fhir.Reference|undefined;
  /**
   * The party who is notified of the payment status.
   */
  public recipient: fhir.Reference|null;
  /**
   * The amount sent to the payee.
   */
  public amount: fhir.Money|null;
  /**
   * Typically paid: payment sent, cleared: payment received.
   */
  public paymentStatus?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for PaymentNotice - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IPaymentNotice> = { }) {
    super(source);
    this.resourceType = 'PaymentNotice';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['status']) { this.status = source.status; }
    else { this.status = null; }
    if (source['_status']) { this._status = new fhir.FhirElement(source._status!); }
    if (source['request']) { this.request = new fhir.Reference(source.request!); }
    if (source['response']) { this.response = new fhir.Reference(source.response!); }
    if (source['created']) { this.created = source.created; }
    else { this.created = null; }
    if (source['_created']) { this._created = new fhir.FhirElement(source._created!); }
    if (source['provider']) { this.provider = new fhir.Reference(source.provider!); }
    if (source['payment']) { this.payment = new fhir.Reference(source.payment!); }
    else { this.payment = null; }
    if (source['paymentDate']) { this.paymentDate = source.paymentDate; }
    if (source['_paymentDate']) { this._paymentDate = new fhir.FhirElement(source._paymentDate!); }
    if (source['payee']) { this.payee = new fhir.Reference(source.payee!); }
    if (source['recipient']) { this.recipient = new fhir.Reference(source.recipient!); }
    else { this.recipient = null; }
    if (source['amount']) { this.amount = new fhir.Money(source.amount!); }
    else { this.amount = null; }
    if (source['paymentStatus']) { this.paymentStatus = new fhir.CodeableConcept(source.paymentStatus!); }
  }
  /**
   * Required-bound Value Set for status
   */
  public statusRequiredValueSet():FmStatusValueSetType {
    return FmStatusValueSet;
  }
  /**
   * Example-bound Value Set for paymentStatus
   */
  public paymentStatusExampleValueSet():PaymentStatusValueSetType {
    return PaymentStatusValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: PaymentNotice.resourceType']); }
    if (this["identifier"]) { this.identifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (!this["status"]) { results.push(["status",'Missing required element: PaymentNotice.status']); }
    if (this["_status"]) { results.push(...this._status.doModelValidation()); }
    if (this["request"]) { results.push(...this.request.doModelValidation()); }
    if (this["response"]) { results.push(...this.response.doModelValidation()); }
    if (!this["created"]) { results.push(["created",'Missing required element: PaymentNotice.created']); }
    if (this["_created"]) { results.push(...this._created.doModelValidation()); }
    if (this["provider"]) { results.push(...this.provider.doModelValidation()); }
    if (!this["payment"]) { results.push(["payment",'Missing required element: PaymentNotice.payment']); }
    if (this["payment"]) { results.push(...this.payment.doModelValidation()); }
    if (this["_paymentDate"]) { results.push(...this._paymentDate.doModelValidation()); }
    if (this["payee"]) { results.push(...this.payee.doModelValidation()); }
    if (!this["recipient"]) { results.push(["recipient",'Missing required element: PaymentNotice.recipient']); }
    if (this["recipient"]) { results.push(...this.recipient.doModelValidation()); }
    if (!this["amount"]) { results.push(["amount",'Missing required element: PaymentNotice.amount']); }
    if (this["amount"]) { results.push(...this.amount.doModelValidation()); }
    if (this["paymentStatus"]) { results.push(...this.paymentStatus.doModelValidation()); }
    return results;
  }
}
