// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * This resource provides the status of the payment for goods and services rendered, and the request and response resource references.
 */
export type IPaymentNotice = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "PaymentNotice";
  /**
   * The amount sent to the payee.
   */
  amount: fhir.IMoney|null;
  /**
   * The date when this resource was created.
   */
  created: string|null;
  _created?: fhir.IFhirElement|undefined;
  /**
   * A unique identifier assigned to this payment notice.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * The party who will receive or has received payment that is the subject of this notification.
   */
  payee?: fhir.IReference|undefined;
  /**
   * A reference to the payment which is the subject of this notice.
   */
  payment: fhir.IReference|null;
  /**
   * The date when the above payment action occurred.
   */
  paymentDate?: string|undefined;
  _paymentDate?: fhir.IFhirElement|undefined;
  /**
   * Typically paid: payment sent, cleared: payment received.
   */
  paymentStatus?: fhir.ICodeableConcept|undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  provider?: fhir.IReference|undefined;
  /**
   * The party who is notified of the payment status.
   */
  recipient: fhir.IReference|null;
  /**
   * Reference of resource for which payment is being made.
   */
  request?: fhir.IReference|undefined;
  /**
   * Reference of response to resource for which payment is being made.
   */
  response?: fhir.IReference|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: PaymentNoticeStatusEnum|null;
  _status?: fhir.IFhirElement|undefined;
}
/**
 * This resource provides the status of the payment for goods and services rendered, and the request and response resource references.
 */
export class PaymentNotice extends fhir.DomainResource implements fhir.IPaymentNotice {
  /**
   * Resource Type Name
   */
  public override resourceType: "PaymentNotice";
  /**
   * The amount sent to the payee.
   */
  public amount: fhir.Money|null;
  /**
   * The date when this resource was created.
   */
  public created: string|null;
  public _created?: fhir.FhirElement|undefined;
  /**
   * A unique identifier assigned to this payment notice.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * The party who will receive or has received payment that is the subject of this notification.
   */
  public payee?: fhir.Reference|undefined;
  /**
   * A reference to the payment which is the subject of this notice.
   */
  public payment: fhir.Reference|null;
  /**
   * The date when the above payment action occurred.
   */
  public paymentDate?: string|undefined;
  public _paymentDate?: fhir.FhirElement|undefined;
  /**
   * Typically paid: payment sent, cleared: payment received.
   */
  public paymentStatus?: fhir.CodeableConcept|undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  public provider?: fhir.Reference|undefined;
  /**
   * The party who is notified of the payment status.
   */
  public recipient: fhir.Reference|null;
  /**
   * Reference of resource for which payment is being made.
   */
  public request?: fhir.Reference|undefined;
  /**
   * Reference of response to resource for which payment is being made.
   */
  public response?: fhir.Reference|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  public status: PaymentNoticeStatusEnum|null;
  public _status?: fhir.FhirElement|undefined;
  /**
   * Default constructor for PaymentNotice - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IPaymentNotice> = {}) {
    super(source);
    this.resourceType = 'PaymentNotice';
    this.amount = null;
    if (source["amount"]) { this.amount = new fhir.Money(source.amount!); }
    if (this.amount === undefined) { this.amount = null }
    this.created = null;
    if (source["created"]) { this.created = source.created; }
    if (this.created === undefined) { this.created = null }
    if (source["_created"]) { this._created = new fhir.FhirElement(source._created!); }
    if (source["identifier"]) { this.identifier = source.identifier.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    if (source["payee"]) { this.payee = new fhir.Reference(source.payee!); }
    this.payment = null;
    if (source["payment"]) { this.payment = new fhir.Reference(source.payment!); }
    if (this.payment === undefined) { this.payment = null }
    if (source["paymentDate"]) { this.paymentDate = source.paymentDate; }
    if (source["_paymentDate"]) { this._paymentDate = new fhir.FhirElement(source._paymentDate!); }
    if (source["paymentStatus"]) { this.paymentStatus = new fhir.CodeableConcept(source.paymentStatus!); }
    if (source["provider"]) { this.provider = new fhir.Reference(source.provider!); }
    this.recipient = null;
    if (source["recipient"]) { this.recipient = new fhir.Reference(source.recipient!); }
    if (this.recipient === undefined) { this.recipient = null }
    if (source["request"]) { this.request = new fhir.Reference(source.request!); }
    if (source["response"]) { this.response = new fhir.Reference(source.response!); }
    this.status = null;
    if (source["status"]) { this.status = source.status; }
    if (this.status === undefined) { this.status = null }
    if (source["_status"]) { this._status = new fhir.FhirElement(source._status!); }
  }
  /**
   * Check if the current PaymentNotice contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["amount"] === undefined) { missingElements.push("amount"); }
    if (this["created"] === undefined) { missingElements.push("created"); }
    if (this["payment"] === undefined) { missingElements.push("payment"); }
    if (this["recipient"] === undefined) { missingElements.push("recipient"); }
    if (this["status"] === undefined) { missingElements.push("status"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a PaymentNotice from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IPaymentNotice):PaymentNotice {
    var dest:PaymentNotice = new PaymentNotice(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `PaymentNotice is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the PaymentNotice.status field
 */
export enum PaymentNoticeStatusEnum {
  ACTIVE = "active",
  CANCELLED = "cancelled",
  DRAFT = "draft",
  ENTERED_IN_ERROR = "entered-in-error",
}
