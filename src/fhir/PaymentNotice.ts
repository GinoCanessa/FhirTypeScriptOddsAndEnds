// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: PaymentNotice

import * as fhir from '../fhir.js';

import { FmStatusValueSet, FmStatusValueSetType,} from '../fhirValueSets/FmStatusValueSet.js';
import { FmStatusValueSetEnum } from '../valueSetEnums.js';
import { PaymentStatusValueSet, PaymentStatusValueSetType,} from '../fhirValueSets/PaymentStatusValueSet.js';
import { PaymentStatusValueSetEnum } from '../valueSetEnums.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Valid arguments for the PaymentNotice type.
 */
export interface PaymentNoticeArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "PaymentNotice"|undefined;
  /**
   * A unique identifier assigned to this payment notice.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: FmStatusValueSetEnum|null;
  /**
   * Reference of resource for which payment is being made.
   */
  request?: fhir.ReferenceArgs|undefined;
  /**
   * Reference of response to resource for which payment is being made.
   */
  response?: fhir.ReferenceArgs|undefined;
  /**
   * The date when this resource was created.
   */
  created: fhir.FhirDateTime|string|undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  provider?: fhir.ReferenceArgs|undefined;
  /**
   * A reference to the payment which is the subject of this notice.
   */
  payment: fhir.ReferenceArgs|null;
  /**
   * The date when the above payment action occurred.
   */
  paymentDate?: fhir.FhirDate|string|undefined;
  /**
   * The party who will receive or has received payment that is the subject of this notification.
   */
  payee?: fhir.ReferenceArgs|undefined;
  /**
   * The party who is notified of the payment status.
   */
  recipient: fhir.ReferenceArgs|null;
  /**
   * The amount sent to the payee.
   */
  amount: fhir.MoneyArgs|null;
  /**
   * Typically paid: payment sent, cleared: payment received.
   */
  paymentStatus?: fhir.CodeableConceptArgs|undefined;
}

/**
 * This resource provides the status of the payment for goods and services rendered, and the request and response resource references.
 */
export class PaymentNotice extends fhir.DomainResource {
  readonly __dataType:string = 'PaymentNotice';
  /**
   * Resource Type Name
   */
  public resourceType: "PaymentNotice";
  /**
   * A unique identifier assigned to this payment notice.
   */
  public identifier?: fhir.Identifier[]|undefined = [];
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  public status: FmStatusValueSetEnum|null;
  /**
   * Reference of resource for which payment is being made.
   */
  public request?: fhir.Reference|undefined;
  /**
   * Reference of response to resource for which payment is being made.
   */
  public response?: fhir.Reference|undefined;
  /**
   * The date when this resource was created.
   */
  public created: fhir.FhirDateTime|null;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  public provider?: fhir.Reference|undefined;
  /**
   * A reference to the payment which is the subject of this notice.
   */
  public payment: fhir.Reference|null;
  /**
   * The date when the above payment action occurred.
   */
  public paymentDate?: fhir.FhirDate|undefined;
  /**
   * The party who will receive or has received payment that is the subject of this notification.
   */
  public payee?: fhir.Reference|undefined;
  /**
   * The party who is notified of the payment status.
   */
  public recipient: fhir.Reference|null;
  /**
   * The amount sent to the payee.
   */
  public amount: fhir.Money|null;
  /**
   * Typically paid: payment sent, cleared: payment received.
   */
  public paymentStatus?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for PaymentNotice - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<PaymentNoticeArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'PaymentNotice';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['status']) { this.status = source.status; }
    else { this.status = null; }
    if (source['request']) { this.request = new fhir.Reference(source.request); }
    if (source['response']) { this.response = new fhir.Reference(source.response); }
    if (source['created']) { this.created = new fhir.FhirDateTime({value: source.created}); }
    else { this.created = null; }
    if (source['provider']) { this.provider = new fhir.Reference(source.provider); }
    if (source['payment']) { this.payment = new fhir.Reference(source.payment); }
    else { this.payment = null; }
    if (source['paymentDate']) { this.paymentDate = new fhir.FhirDate({value: source.paymentDate}); }
    if (source['payee']) { this.payee = new fhir.Reference(source.payee); }
    if (source['recipient']) { this.recipient = new fhir.Reference(source.recipient); }
    else { this.recipient = null; }
    if (source['amount']) { this.amount = new fhir.Money(source.amount); }
    else { this.amount = null; }
    if (source['paymentStatus']) { this.paymentStatus = new fhir.CodeableConcept(source.paymentStatus); }
  }
  /**
   * Required-bound Value Set for status
   */
  public static statusRequiredValueSet():FmStatusValueSetType {
    return FmStatusValueSet;
  }
  /**
   * Example-bound Value Set for paymentStatus
   */
  public static paymentStatusExampleValueSet():PaymentStatusValueSetType {
    return PaymentStatusValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['resourceType']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property resourceType:'PaymentNotice' fhir: PaymentNotice.resourceType:'PaymentNotice'", }));
    }
    if (this["identifier"]) { this.identifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (!this['status']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property status:FmStatusValueSetEnum fhir: PaymentNotice.status:code", }));
    }
    if (this["request"]) { outcome.issue!.push(...this.request.doModelValidation().issue!); }
    if (this["response"]) { outcome.issue!.push(...this.response.doModelValidation().issue!); }
    if (!this['created']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property created:fhir.FhirDateTime fhir: PaymentNotice.created:dateTime", }));
    }
    if (this["created"]) { outcome.issue!.push(...this.created.doModelValidation().issue!); }
    if (this["provider"]) { outcome.issue!.push(...this.provider.doModelValidation().issue!); }
    if (!this['payment']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property payment:fhir.Reference fhir: PaymentNotice.payment:Reference", }));
    }
    if (this["payment"]) { outcome.issue!.push(...this.payment.doModelValidation().issue!); }
    if (this["paymentDate"]) { outcome.issue!.push(...this.paymentDate.doModelValidation().issue!); }
    if (this["payee"]) { outcome.issue!.push(...this.payee.doModelValidation().issue!); }
    if (!this['recipient']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property recipient:fhir.Reference fhir: PaymentNotice.recipient:Reference", }));
    }
    if (this["recipient"]) { outcome.issue!.push(...this.recipient.doModelValidation().issue!); }
    if (!this['amount']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property amount:fhir.Money fhir: PaymentNotice.amount:Money", }));
    }
    if (this["amount"]) { outcome.issue!.push(...this.amount.doModelValidation().issue!); }
    if (this["paymentStatus"]) { outcome.issue!.push(...this.paymentStatus.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
