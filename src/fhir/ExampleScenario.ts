// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Actor participating in the resource.
 */
export type IExampleScenarioActor = fhir.IBackboneElement & {
  /**
   * should this be called ID or acronym?
   */
  actorId: string|null;
  _actorId?: fhir.IFhirElement|undefined;
  /**
   * Cardinality: is name and description 1..1?
   */
  description?: string|undefined;
  _description?: fhir.IFhirElement|undefined;
  /**
   * Cardinality: is name and description 1..1?
   */
  name?: string|undefined;
  _name?: fhir.IFhirElement|undefined;
  /**
   * The type of actor - person or system.
   */
  type: ExampleScenarioActorTypeEnum|null;
  _type?: fhir.IFhirElement|undefined;
}
/**
 * A specific version of the resource.
 */
export type IExampleScenarioInstanceVersion = fhir.IBackboneElement & {
  /**
   * The description of the resource version.
   */
  description: string|null;
  _description?: fhir.IFhirElement|undefined;
  /**
   * The identifier of a specific version of a resource.
   */
  versionId: string|null;
  _versionId?: fhir.IFhirElement|undefined;
}
/**
 * Resources contained in the instance (e.g. the observations contained in a bundle).
 */
export type IExampleScenarioInstanceContainedInstance = fhir.IBackboneElement & {
  /**
   * Each resource contained in the instance.
   */
  resourceId: string|null;
  _resourceId?: fhir.IFhirElement|undefined;
  /**
   * A specific version of a resource contained in the instance.
   */
  versionId?: string|undefined;
  _versionId?: fhir.IFhirElement|undefined;
}
/**
 * Each resource and each version that is present in the workflow.
 */
export type IExampleScenarioInstance = fhir.IBackboneElement & {
  /**
   * Resources contained in the instance (e.g. the observations contained in a bundle).
   */
  containedInstance?: fhir.IExampleScenarioInstanceContainedInstance[]|undefined;
  /**
   * Human-friendly description of the resource instance.
   */
  description?: string|undefined;
  _description?: fhir.IFhirElement|undefined;
  /**
   * A short name for the resource instance.
   */
  name?: string|undefined;
  _name?: fhir.IFhirElement|undefined;
  /**
   * The id of the resource for referencing.
   */
  resourceId: string|null;
  _resourceId?: fhir.IFhirElement|undefined;
  /**
   * The type of the resource.
   */
  resourceType: string|null;
  _resourceType?: fhir.IFhirElement|undefined;
  /**
   * A specific version of the resource.
   */
  version?: fhir.IExampleScenarioInstanceVersion[]|undefined;
}
/**
 * Each interaction or action.
 */
export type IExampleScenarioProcessStepOperation = fhir.IBackboneElement & {
  /**
   * A comment to be inserted in the diagram.
   */
  description?: string|undefined;
  _description?: fhir.IFhirElement|undefined;
  /**
   * Who starts the transaction.
   */
  initiator?: string|undefined;
  _initiator?: fhir.IFhirElement|undefined;
  /**
   * Whether the initiator is deactivated right after the transaction.
   */
  initiatorActive?: boolean|undefined;
  _initiatorActive?: fhir.IFhirElement|undefined;
  /**
   * The human-friendly name of the interaction.
   */
  name?: string|undefined;
  _name?: fhir.IFhirElement|undefined;
  /**
   * The sequential number of the interaction, e.g. 1.2.5.
   */
  number: string|null;
  _number?: fhir.IFhirElement|undefined;
  /**
   * Who receives the transaction.
   */
  receiver?: string|undefined;
  _receiver?: fhir.IFhirElement|undefined;
  /**
   * Whether the receiver is deactivated right after the transaction.
   */
  receiverActive?: boolean|undefined;
  _receiverActive?: fhir.IFhirElement|undefined;
  /**
   * Each resource instance used by the initiator.
   */
  request?: fhir.IExampleScenarioInstanceContainedInstance|undefined;
  /**
   * Each resource instance used by the responder.
   */
  response?: fhir.IExampleScenarioInstanceContainedInstance|undefined;
  /**
   * The type of operation - CRUD.
   */
  type?: string|undefined;
  _type?: fhir.IFhirElement|undefined;
}
/**
 * Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.
 */
export type IExampleScenarioProcessStepAlternative = fhir.IBackboneElement & {
  /**
   * A human-readable description of the alternative explaining when the alternative should occur rather than the base step.
   */
  description?: string|undefined;
  _description?: fhir.IFhirElement|undefined;
  /**
   * What happens in each alternative option.
   */
  step?: fhir.IExampleScenarioProcessStep[]|undefined;
  /**
   * The label to display for the alternative that gives a sense of the circumstance in which the alternative should be invoked.
   */
  title: string|null;
  _title?: fhir.IFhirElement|undefined;
}
/**
 * Each step of the process.
 */
export type IExampleScenarioProcessStep = fhir.IBackboneElement & {
  /**
   * Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.
   */
  alternative?: fhir.IExampleScenarioProcessStepAlternative[]|undefined;
  /**
   * Each interaction or action.
   */
  operation?: fhir.IExampleScenarioProcessStepOperation|undefined;
  /**
   * If there is a pause in the flow.
   */
  pause?: boolean|undefined;
  _pause?: fhir.IFhirElement|undefined;
  /**
   * Nested process.
   */
  process?: fhir.IExampleScenarioProcess[]|undefined;
}
/**
 * Each major process - a group of operations.
 */
export type IExampleScenarioProcess = fhir.IBackboneElement & {
  /**
   * A longer description of the group of operations.
   */
  description?: string|undefined;
  _description?: fhir.IFhirElement|undefined;
  /**
   * Description of final status after the process ends.
   */
  postConditions?: string|undefined;
  _postConditions?: fhir.IFhirElement|undefined;
  /**
   * Description of initial status before the process starts.
   */
  preConditions?: string|undefined;
  _preConditions?: fhir.IFhirElement|undefined;
  /**
   * Each step of the process.
   */
  step?: fhir.IExampleScenarioProcessStep[]|undefined;
  /**
   * The diagram title of the group of operations.
   */
  title: string|null;
  _title?: fhir.IFhirElement|undefined;
}
/**
 * Example of workflow instance.
 */
export type IExampleScenario = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "ExampleScenario";
  /**
   * Actor participating in the resource.
   */
  actor?: fhir.IExampleScenarioActor[]|undefined;
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: fhir.IContactDetail[]|undefined;
  /**
   * nullFrequently, the copyright differs between the value set and the codes that are included. The copyright statement should clearly differentiate between these when required.
   */
  copyright?: string|undefined;
  _copyright?: fhir.IFhirElement|undefined;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the example scenario. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: string|undefined;
  _date?: fhir.IFhirElement|undefined;
  /**
   * Allows filtering of example scenarios that are appropriate for use versus not.
   */
  experimental?: boolean|undefined;
  _experimental?: fhir.IFhirElement|undefined;
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this example scenario outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * Each resource and each version that is present in the workflow.
   */
  instance?: fhir.IExampleScenarioInstance[]|undefined;
  /**
   * It may be possible for the example scenario to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: fhir.ICodeableConcept[]|undefined;
  /**
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: string|undefined;
  _name?: fhir.IFhirElement|undefined;
  /**
   * Each major process - a group of operations.
   */
  process?: fhir.IExampleScenarioProcess[]|undefined;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the example scenario is the organization or individual primarily responsible for the maintenance and upkeep of the example scenario. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the example scenario. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string|undefined;
  _publisher?: fhir.IFhirElement|undefined;
  /**
   * This element does not describe the usage of the example scenario. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this example scenario.
   */
  purpose?: string|undefined;
  _purpose?: fhir.IFhirElement|undefined;
  /**
   * Allows filtering of example scenarios that are appropriate for use versus not.
   */
  status: ExampleScenarioStatusEnum|null;
  _status?: fhir.IFhirElement|undefined;
  /**
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: string|undefined;
  _url?: fhir.IFhirElement|undefined;
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: fhir.IUsageContext[]|undefined;
  /**
   * There may be different example scenario instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the example scenario with the format [url]|[version].
   */
  version?: string|undefined;
  _version?: fhir.IFhirElement|undefined;
  /**
   * Another nested workflow.
   */
  workflow?: string[]|undefined;
  _workflow?: fhir.IFhirElement[]|undefined;
}
/**
 * Actor participating in the resource.
 */
export class ExampleScenarioActor extends fhir.BackboneElement implements fhir.IExampleScenarioActor {
  /**
   * should this be called ID or acronym?
   */
  public actorId: string|null;
  public _actorId?: fhir.FhirElement|undefined;
  /**
   * Cardinality: is name and description 1..1?
   */
  public description?: string|undefined;
  public _description?: fhir.FhirElement|undefined;
  /**
   * Cardinality: is name and description 1..1?
   */
  public name?: string|undefined;
  public _name?: fhir.FhirElement|undefined;
  /**
   * The type of actor - person or system.
   */
  public type: ExampleScenarioActorTypeEnum|null;
  public _type?: fhir.FhirElement|undefined;
  /**
   * Default constructor for ExampleScenarioActor - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IExampleScenarioActor> = {}) {
    super(source);
    this.actorId = null;
    if (source["actorId"]) { this.actorId = source.actorId; }
    if (this.actorId === undefined) { this.actorId = null }
    if (source["_actorId"]) { this._actorId = new fhir.FhirElement(source._actorId!); }
    if (source["description"]) { this.description = source.description; }
    if (source["_description"]) { this._description = new fhir.FhirElement(source._description!); }
    if (source["name"]) { this.name = source.name; }
    if (source["_name"]) { this._name = new fhir.FhirElement(source._name!); }
    this.type = null;
    if (source["type"]) { this.type = source.type; }
    if (this.type === undefined) { this.type = null }
    if (source["_type"]) { this._type = new fhir.FhirElement(source._type!); }
  }
  /**
   * Check if the current ExampleScenarioActor contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["actorId"] === undefined) { missingElements.push("actorId"); }
    if (this["type"] === undefined) { missingElements.push("type"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ExampleScenarioActor from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IExampleScenarioActor):ExampleScenarioActor {
    var dest:ExampleScenarioActor = new ExampleScenarioActor(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `ExampleScenarioActor is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * A specific version of the resource.
 */
export class ExampleScenarioInstanceVersion extends fhir.BackboneElement implements fhir.IExampleScenarioInstanceVersion {
  /**
   * The description of the resource version.
   */
  public description: string|null;
  public _description?: fhir.FhirElement|undefined;
  /**
   * The identifier of a specific version of a resource.
   */
  public versionId: string|null;
  public _versionId?: fhir.FhirElement|undefined;
  /**
   * Default constructor for ExampleScenarioInstanceVersion - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IExampleScenarioInstanceVersion> = {}) {
    super(source);
    this.description = null;
    if (source["description"]) { this.description = source.description; }
    if (this.description === undefined) { this.description = null }
    if (source["_description"]) { this._description = new fhir.FhirElement(source._description!); }
    this.versionId = null;
    if (source["versionId"]) { this.versionId = source.versionId; }
    if (this.versionId === undefined) { this.versionId = null }
    if (source["_versionId"]) { this._versionId = new fhir.FhirElement(source._versionId!); }
  }
  /**
   * Check if the current ExampleScenarioInstanceVersion contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["description"] === undefined) { missingElements.push("description"); }
    if (this["versionId"] === undefined) { missingElements.push("versionId"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ExampleScenarioInstanceVersion from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IExampleScenarioInstanceVersion):ExampleScenarioInstanceVersion {
    var dest:ExampleScenarioInstanceVersion = new ExampleScenarioInstanceVersion(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `ExampleScenarioInstanceVersion is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Resources contained in the instance (e.g. the observations contained in a bundle).
 */
export class ExampleScenarioInstanceContainedInstance extends fhir.BackboneElement implements fhir.IExampleScenarioInstanceContainedInstance {
  /**
   * Each resource contained in the instance.
   */
  public resourceId: string|null;
  public _resourceId?: fhir.FhirElement|undefined;
  /**
   * A specific version of a resource contained in the instance.
   */
  public versionId?: string|undefined;
  public _versionId?: fhir.FhirElement|undefined;
  /**
   * Default constructor for ExampleScenarioInstanceContainedInstance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IExampleScenarioInstanceContainedInstance> = {}) {
    super(source);
    this.resourceId = null;
    if (source["resourceId"]) { this.resourceId = source.resourceId; }
    if (this.resourceId === undefined) { this.resourceId = null }
    if (source["_resourceId"]) { this._resourceId = new fhir.FhirElement(source._resourceId!); }
    if (source["versionId"]) { this.versionId = source.versionId; }
    if (source["_versionId"]) { this._versionId = new fhir.FhirElement(source._versionId!); }
  }
  /**
   * Check if the current ExampleScenarioInstanceContainedInstance contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["resourceId"] === undefined) { missingElements.push("resourceId"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ExampleScenarioInstanceContainedInstance from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IExampleScenarioInstanceContainedInstance):ExampleScenarioInstanceContainedInstance {
    var dest:ExampleScenarioInstanceContainedInstance = new ExampleScenarioInstanceContainedInstance(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `ExampleScenarioInstanceContainedInstance is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Each resource and each version that is present in the workflow.
 */
export class ExampleScenarioInstance extends fhir.BackboneElement implements fhir.IExampleScenarioInstance {
  /**
   * Resources contained in the instance (e.g. the observations contained in a bundle).
   */
  public containedInstance?: fhir.ExampleScenarioInstanceContainedInstance[]|undefined;
  /**
   * Human-friendly description of the resource instance.
   */
  public description?: string|undefined;
  public _description?: fhir.FhirElement|undefined;
  /**
   * A short name for the resource instance.
   */
  public name?: string|undefined;
  public _name?: fhir.FhirElement|undefined;
  /**
   * The id of the resource for referencing.
   */
  public resourceId: string|null;
  public _resourceId?: fhir.FhirElement|undefined;
  /**
   * The type of the resource.
   */
  public resourceType: string|null;
  public _resourceType?: fhir.FhirElement|undefined;
  /**
   * A specific version of the resource.
   */
  public version?: fhir.ExampleScenarioInstanceVersion[]|undefined;
  /**
   * Default constructor for ExampleScenarioInstance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IExampleScenarioInstance> = {}) {
    super(source);
    if (source["containedInstance"]) { this.containedInstance = source.containedInstance.map((x:Partial<fhir.IExampleScenarioInstanceContainedInstance>) => new fhir.ExampleScenarioInstanceContainedInstance(x)); }
    if (source["description"]) { this.description = source.description; }
    if (source["_description"]) { this._description = new fhir.FhirElement(source._description!); }
    if (source["name"]) { this.name = source.name; }
    if (source["_name"]) { this._name = new fhir.FhirElement(source._name!); }
    this.resourceId = null;
    if (source["resourceId"]) { this.resourceId = source.resourceId; }
    if (this.resourceId === undefined) { this.resourceId = null }
    if (source["_resourceId"]) { this._resourceId = new fhir.FhirElement(source._resourceId!); }
    this.resourceType = null;
    if (source["resourceType"]) { this.resourceType = source.resourceType; }
    if (this.resourceType === undefined) { this.resourceType = null }
    if (source["_resourceType"]) { this._resourceType = new fhir.FhirElement(source._resourceType!); }
    if (source["version"]) { this.version = source.version.map((x:Partial<fhir.IExampleScenarioInstanceVersion>) => new fhir.ExampleScenarioInstanceVersion(x)); }
  }
  /**
   * Check if the current ExampleScenarioInstance contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["resourceId"] === undefined) { missingElements.push("resourceId"); }
    if (this["resourceType"] === undefined) { missingElements.push("resourceType"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ExampleScenarioInstance from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IExampleScenarioInstance):ExampleScenarioInstance {
    var dest:ExampleScenarioInstance = new ExampleScenarioInstance(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `ExampleScenarioInstance is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Each interaction or action.
 */
export class ExampleScenarioProcessStepOperation extends fhir.BackboneElement implements fhir.IExampleScenarioProcessStepOperation {
  /**
   * A comment to be inserted in the diagram.
   */
  public description?: string|undefined;
  public _description?: fhir.FhirElement|undefined;
  /**
   * Who starts the transaction.
   */
  public initiator?: string|undefined;
  public _initiator?: fhir.FhirElement|undefined;
  /**
   * Whether the initiator is deactivated right after the transaction.
   */
  public initiatorActive?: boolean|undefined;
  public _initiatorActive?: fhir.FhirElement|undefined;
  /**
   * The human-friendly name of the interaction.
   */
  public name?: string|undefined;
  public _name?: fhir.FhirElement|undefined;
  /**
   * The sequential number of the interaction, e.g. 1.2.5.
   */
  public number: string|null;
  public _number?: fhir.FhirElement|undefined;
  /**
   * Who receives the transaction.
   */
  public receiver?: string|undefined;
  public _receiver?: fhir.FhirElement|undefined;
  /**
   * Whether the receiver is deactivated right after the transaction.
   */
  public receiverActive?: boolean|undefined;
  public _receiverActive?: fhir.FhirElement|undefined;
  /**
   * Each resource instance used by the initiator.
   */
  public request?: fhir.ExampleScenarioInstanceContainedInstance|undefined;
  /**
   * Each resource instance used by the responder.
   */
  public response?: fhir.ExampleScenarioInstanceContainedInstance|undefined;
  /**
   * The type of operation - CRUD.
   */
  public type?: string|undefined;
  public _type?: fhir.FhirElement|undefined;
  /**
   * Default constructor for ExampleScenarioProcessStepOperation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IExampleScenarioProcessStepOperation> = {}) {
    super(source);
    if (source["description"]) { this.description = source.description; }
    if (source["_description"]) { this._description = new fhir.FhirElement(source._description!); }
    if (source["initiator"]) { this.initiator = source.initiator; }
    if (source["_initiator"]) { this._initiator = new fhir.FhirElement(source._initiator!); }
    if (source["initiatorActive"]) { this.initiatorActive = source.initiatorActive; }
    if (source["_initiatorActive"]) { this._initiatorActive = new fhir.FhirElement(source._initiatorActive!); }
    if (source["name"]) { this.name = source.name; }
    if (source["_name"]) { this._name = new fhir.FhirElement(source._name!); }
    this.number = null;
    if (source["number"]) { this.number = source.number; }
    if (this.number === undefined) { this.number = null }
    if (source["_number"]) { this._number = new fhir.FhirElement(source._number!); }
    if (source["receiver"]) { this.receiver = source.receiver; }
    if (source["_receiver"]) { this._receiver = new fhir.FhirElement(source._receiver!); }
    if (source["receiverActive"]) { this.receiverActive = source.receiverActive; }
    if (source["_receiverActive"]) { this._receiverActive = new fhir.FhirElement(source._receiverActive!); }
    if (source["request"]) { this.request = new fhir.ExampleScenarioInstanceContainedInstance(source.request!); }
    if (source["response"]) { this.response = new fhir.ExampleScenarioInstanceContainedInstance(source.response!); }
    if (source["type"]) { this.type = source.type; }
    if (source["_type"]) { this._type = new fhir.FhirElement(source._type!); }
  }
  /**
   * Check if the current ExampleScenarioProcessStepOperation contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["number"] === undefined) { missingElements.push("number"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ExampleScenarioProcessStepOperation from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IExampleScenarioProcessStepOperation):ExampleScenarioProcessStepOperation {
    var dest:ExampleScenarioProcessStepOperation = new ExampleScenarioProcessStepOperation(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `ExampleScenarioProcessStepOperation is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.
 */
export class ExampleScenarioProcessStepAlternative extends fhir.BackboneElement implements fhir.IExampleScenarioProcessStepAlternative {
  /**
   * A human-readable description of the alternative explaining when the alternative should occur rather than the base step.
   */
  public description?: string|undefined;
  public _description?: fhir.FhirElement|undefined;
  /**
   * What happens in each alternative option.
   */
  public step?: fhir.ExampleScenarioProcessStep[]|undefined;
  /**
   * The label to display for the alternative that gives a sense of the circumstance in which the alternative should be invoked.
   */
  public title: string|null;
  public _title?: fhir.FhirElement|undefined;
  /**
   * Default constructor for ExampleScenarioProcessStepAlternative - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IExampleScenarioProcessStepAlternative> = {}) {
    super(source);
    if (source["description"]) { this.description = source.description; }
    if (source["_description"]) { this._description = new fhir.FhirElement(source._description!); }
    if (source["step"]) { this.step = source.step.map((x:Partial<fhir.IExampleScenarioProcessStep>) => new fhir.ExampleScenarioProcessStep(x)); }
    this.title = null;
    if (source["title"]) { this.title = source.title; }
    if (this.title === undefined) { this.title = null }
    if (source["_title"]) { this._title = new fhir.FhirElement(source._title!); }
  }
  /**
   * Check if the current ExampleScenarioProcessStepAlternative contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["title"] === undefined) { missingElements.push("title"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ExampleScenarioProcessStepAlternative from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IExampleScenarioProcessStepAlternative):ExampleScenarioProcessStepAlternative {
    var dest:ExampleScenarioProcessStepAlternative = new ExampleScenarioProcessStepAlternative(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `ExampleScenarioProcessStepAlternative is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Each step of the process.
 */
export class ExampleScenarioProcessStep extends fhir.BackboneElement implements fhir.IExampleScenarioProcessStep {
  /**
   * Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.
   */
  public alternative?: fhir.ExampleScenarioProcessStepAlternative[]|undefined;
  /**
   * Each interaction or action.
   */
  public operation?: fhir.ExampleScenarioProcessStepOperation|undefined;
  /**
   * If there is a pause in the flow.
   */
  public pause?: boolean|undefined;
  public _pause?: fhir.FhirElement|undefined;
  /**
   * Nested process.
   */
  public process?: fhir.ExampleScenarioProcess[]|undefined;
  /**
   * Default constructor for ExampleScenarioProcessStep - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IExampleScenarioProcessStep> = {}) {
    super(source);
    if (source["alternative"]) { this.alternative = source.alternative.map((x:Partial<fhir.IExampleScenarioProcessStepAlternative>) => new fhir.ExampleScenarioProcessStepAlternative(x)); }
    if (source["operation"]) { this.operation = new fhir.ExampleScenarioProcessStepOperation(source.operation!); }
    if (source["pause"]) { this.pause = source.pause; }
    if (source["_pause"]) { this._pause = new fhir.FhirElement(source._pause!); }
    if (source["process"]) { this.process = source.process.map((x:Partial<fhir.IExampleScenarioProcess>) => new fhir.ExampleScenarioProcess(x)); }
  }
  /**
   * Check if the current ExampleScenarioProcessStep contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ExampleScenarioProcessStep from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IExampleScenarioProcessStep):ExampleScenarioProcessStep {
    var dest:ExampleScenarioProcessStep = new ExampleScenarioProcessStep(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `ExampleScenarioProcessStep is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Each major process - a group of operations.
 */
export class ExampleScenarioProcess extends fhir.BackboneElement implements fhir.IExampleScenarioProcess {
  /**
   * A longer description of the group of operations.
   */
  public description?: string|undefined;
  public _description?: fhir.FhirElement|undefined;
  /**
   * Description of final status after the process ends.
   */
  public postConditions?: string|undefined;
  public _postConditions?: fhir.FhirElement|undefined;
  /**
   * Description of initial status before the process starts.
   */
  public preConditions?: string|undefined;
  public _preConditions?: fhir.FhirElement|undefined;
  /**
   * Each step of the process.
   */
  public step?: fhir.ExampleScenarioProcessStep[]|undefined;
  /**
   * The diagram title of the group of operations.
   */
  public title: string|null;
  public _title?: fhir.FhirElement|undefined;
  /**
   * Default constructor for ExampleScenarioProcess - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IExampleScenarioProcess> = {}) {
    super(source);
    if (source["description"]) { this.description = source.description; }
    if (source["_description"]) { this._description = new fhir.FhirElement(source._description!); }
    if (source["postConditions"]) { this.postConditions = source.postConditions; }
    if (source["_postConditions"]) { this._postConditions = new fhir.FhirElement(source._postConditions!); }
    if (source["preConditions"]) { this.preConditions = source.preConditions; }
    if (source["_preConditions"]) { this._preConditions = new fhir.FhirElement(source._preConditions!); }
    if (source["step"]) { this.step = source.step.map((x:Partial<fhir.IExampleScenarioProcessStep>) => new fhir.ExampleScenarioProcessStep(x)); }
    this.title = null;
    if (source["title"]) { this.title = source.title; }
    if (this.title === undefined) { this.title = null }
    if (source["_title"]) { this._title = new fhir.FhirElement(source._title!); }
  }
  /**
   * Check if the current ExampleScenarioProcess contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["title"] === undefined) { missingElements.push("title"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ExampleScenarioProcess from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IExampleScenarioProcess):ExampleScenarioProcess {
    var dest:ExampleScenarioProcess = new ExampleScenarioProcess(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `ExampleScenarioProcess is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Example of workflow instance.
 */
export class ExampleScenario extends fhir.DomainResource implements fhir.IExampleScenario {
  /**
   * Resource Type Name
   */
  public override resourceType: "ExampleScenario";
  /**
   * Actor participating in the resource.
   */
  public actor?: fhir.ExampleScenarioActor[]|undefined;
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  public contact?: fhir.ContactDetail[]|undefined;
  /**
   * nullFrequently, the copyright differs between the value set and the codes that are included. The copyright statement should clearly differentiate between these when required.
   */
  public copyright?: string|undefined;
  public _copyright?: fhir.FhirElement|undefined;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the example scenario. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  public date?: string|undefined;
  public _date?: fhir.FhirElement|undefined;
  /**
   * Allows filtering of example scenarios that are appropriate for use versus not.
   */
  public experimental?: boolean|undefined;
  public _experimental?: fhir.FhirElement|undefined;
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this example scenario outside of FHIR, where it is not possible to use the logical URI.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * Each resource and each version that is present in the workflow.
   */
  public instance?: fhir.ExampleScenarioInstance[]|undefined;
  /**
   * It may be possible for the example scenario to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  public jurisdiction?: fhir.CodeableConcept[]|undefined;
  /**
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  public name?: string|undefined;
  public _name?: fhir.FhirElement|undefined;
  /**
   * Each major process - a group of operations.
   */
  public process?: fhir.ExampleScenarioProcess[]|undefined;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the example scenario is the organization or individual primarily responsible for the maintenance and upkeep of the example scenario. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the example scenario. This item SHOULD be populated unless the information is available from context.
   */
  public publisher?: string|undefined;
  public _publisher?: fhir.FhirElement|undefined;
  /**
   * This element does not describe the usage of the example scenario. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this example scenario.
   */
  public purpose?: string|undefined;
  public _purpose?: fhir.FhirElement|undefined;
  /**
   * Allows filtering of example scenarios that are appropriate for use versus not.
   */
  public status: ExampleScenarioStatusEnum|null;
  public _status?: fhir.FhirElement|undefined;
  /**
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  public url?: string|undefined;
  public _url?: fhir.FhirElement|undefined;
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  public useContext?: fhir.UsageContext[]|undefined;
  /**
   * There may be different example scenario instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the example scenario with the format [url]|[version].
   */
  public version?: string|undefined;
  public _version?: fhir.FhirElement|undefined;
  /**
   * Another nested workflow.
   */
  public workflow?: string[]|undefined;
  public _workflow?: fhir.FhirElement[]|undefined;
  /**
   * Default constructor for ExampleScenario - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IExampleScenario> = {}) {
    super(source);
    this.resourceType = 'ExampleScenario';
    if (source["actor"]) { this.actor = source.actor.map((x:Partial<fhir.IExampleScenarioActor>) => new fhir.ExampleScenarioActor(x)); }
    if (source["contact"]) { this.contact = source.contact.map((x:Partial<fhir.IContactDetail>) => new fhir.ContactDetail(x)); }
    if (source["copyright"]) { this.copyright = source.copyright; }
    if (source["_copyright"]) { this._copyright = new fhir.FhirElement(source._copyright!); }
    if (source["date"]) { this.date = source.date; }
    if (source["_date"]) { this._date = new fhir.FhirElement(source._date!); }
    if (source["experimental"]) { this.experimental = source.experimental; }
    if (source["_experimental"]) { this._experimental = new fhir.FhirElement(source._experimental!); }
    if (source["identifier"]) { this.identifier = source.identifier.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    if (source["instance"]) { this.instance = source.instance.map((x:Partial<fhir.IExampleScenarioInstance>) => new fhir.ExampleScenarioInstance(x)); }
    if (source["jurisdiction"]) { this.jurisdiction = source.jurisdiction.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["name"]) { this.name = source.name; }
    if (source["_name"]) { this._name = new fhir.FhirElement(source._name!); }
    if (source["process"]) { this.process = source.process.map((x:Partial<fhir.IExampleScenarioProcess>) => new fhir.ExampleScenarioProcess(x)); }
    if (source["publisher"]) { this.publisher = source.publisher; }
    if (source["_publisher"]) { this._publisher = new fhir.FhirElement(source._publisher!); }
    if (source["purpose"]) { this.purpose = source.purpose; }
    if (source["_purpose"]) { this._purpose = new fhir.FhirElement(source._purpose!); }
    this.status = null;
    if (source["status"]) { this.status = source.status; }
    if (this.status === undefined) { this.status = null }
    if (source["_status"]) { this._status = new fhir.FhirElement(source._status!); }
    if (source["url"]) { this.url = source.url; }
    if (source["_url"]) { this._url = new fhir.FhirElement(source._url!); }
    if (source["useContext"]) { this.useContext = source.useContext.map((x:Partial<fhir.IUsageContext>) => new fhir.UsageContext(x)); }
    if (source["version"]) { this.version = source.version; }
    if (source["_version"]) { this._version = new fhir.FhirElement(source._version!); }
    if (source["workflow"]) { this.workflow = source.workflow.map((x) => (x)); }
    if (source["_workflow"]) { this._workflow = source._workflow.map((x:Partial<fhir.IFhirElement>) => new fhir.FhirElement(x)); }
  }
  /**
   * Check if the current ExampleScenario contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["status"] === undefined) { missingElements.push("status"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ExampleScenario from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IExampleScenario):ExampleScenario {
    var dest:ExampleScenario = new ExampleScenario(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `ExampleScenario is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the ExampleScenario.actor.type field
 */
export enum ExampleScenarioActorTypeEnum {
  PERSON = "person",
  ENTITY = "entity",
}
/**
 * Code Values for the ExampleScenario.status field
 */
export enum ExampleScenarioStatusEnum {
  DRAFT = "draft",
  ACTIVE = "active",
  RETIRED = "retired",
  UNKNOWN = "unknown",
}
