// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * This resource provides the insurance enrollment details to the insurer regarding a specified coverage.
 */
export type IEnrollmentRequest = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "EnrollmentRequest";
  /**
   * Patient Resource.
   */
  candidate?: fhir.IReference|undefined;
  /**
   * Reference to the program or plan identification, underwriter or payor.
   */
  coverage?: fhir.IReference|undefined;
  /**
   * The date when this resource was created.
   */
  created?: string|undefined;
  _created?: fhir.IFhirElement|undefined;
  /**
   * The Response business identifier.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * The Insurer who is target  of the request.
   */
  insurer?: fhir.IReference|undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  provider?: fhir.IReference|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the request as not currently valid.
   */
  status?: EnrollmentRequestStatusEnum|undefined;
  _status?: fhir.IFhirElement|undefined;
}
/**
 * This resource provides the insurance enrollment details to the insurer regarding a specified coverage.
 */
export class EnrollmentRequest extends fhir.DomainResource implements fhir.IEnrollmentRequest {
  /**
   * Resource Type Name
   */
  public override resourceType: "EnrollmentRequest";
  /**
   * Patient Resource.
   */
  public candidate?: fhir.Reference|undefined;
  /**
   * Reference to the program or plan identification, underwriter or payor.
   */
  public coverage?: fhir.Reference|undefined;
  /**
   * The date when this resource was created.
   */
  public created?: string|undefined;
  public _created?: fhir.FhirElement|undefined;
  /**
   * The Response business identifier.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * The Insurer who is target  of the request.
   */
  public insurer?: fhir.Reference|undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  public provider?: fhir.Reference|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the request as not currently valid.
   */
  public status?: EnrollmentRequestStatusEnum|undefined;
  public _status?: fhir.FhirElement|undefined;
  /**
   * Default constructor for EnrollmentRequest - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IEnrollmentRequest> = {}) {
    super(source);
    this.resourceType = 'EnrollmentRequest';
    if (source["candidate"]) { this.candidate = new fhir.Reference(source.candidate!); }
    if (source["coverage"]) { this.coverage = new fhir.Reference(source.coverage!); }
    if (source["created"]) { this.created = source.created; }
    if (source["_created"]) { this._created = new fhir.FhirElement(source._created!); }
    if (source["identifier"]) { this.identifier = source.identifier.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    if (source["insurer"]) { this.insurer = new fhir.Reference(source.insurer!); }
    if (source["provider"]) { this.provider = new fhir.Reference(source.provider!); }
    if (source["status"]) { this.status = source.status; }
    if (source["_status"]) { this._status = new fhir.FhirElement(source._status!); }
  }
  /**
   * Check if the current EnrollmentRequest contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a EnrollmentRequest from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IEnrollmentRequest):EnrollmentRequest {
    var dest:EnrollmentRequest = new EnrollmentRequest(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `EnrollmentRequest is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the EnrollmentRequest.status field
 */
export enum EnrollmentRequestStatusEnum {
  ACTIVE = "active",
  CANCELLED = "cancelled",
  DRAFT = "draft",
  ENTERED_IN_ERROR = "entered-in-error",
}
