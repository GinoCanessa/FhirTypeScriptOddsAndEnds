// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * The ingredients need not be a complete list.  If an ingredient is not specified, this does not indicate whether an ingredient is present or absent.  If an ingredient is specified it does not mean that all ingredients are specified.  It is possible to specify both inactive and active ingredients.
 */
export type IMedicationIngredient = fhir.IBackboneElement & {
  /**
   * Indication of whether this ingredient affects the therapeutic action of the drug.
   */
  isActive?: boolean|undefined;
  _isActive?: fhir.IFhirElement|undefined;
  /**
   * The actual ingredient - either a substance (simple ingredient) or another medication of a medication.
   */
  itemCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * The actual ingredient - either a substance (simple ingredient) or another medication of a medication.
   */
  itemReference?: fhir.IReference|undefined;
  /**
   * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet.
   */
  strength?: fhir.IRatio|undefined;
}
/**
 * Information that only applies to packages (not products).
 */
export type IMedicationBatch = fhir.IBackboneElement & {
  /**
   * When this specific batch of product will expire.
   */
  expirationDate?: string|undefined;
  _expirationDate?: fhir.IFhirElement|undefined;
  /**
   * The assigned lot number of a batch of the specified product.
   */
  lotNumber?: string|undefined;
  _lotNumber?: fhir.IFhirElement|undefined;
}
/**
 * This resource is primarily used for the identification and definition of a medication for the purposes of prescribing, dispensing, and administering a medication as well as for making statements about medication use.
 */
export type IMedication = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "Medication";
  /**
   * Specific amount of the drug in the packaged product.  For example, when specifying a product that has the same strength (For example, Insulin glargine 100 unit per mL solution for injection), this attribute provides additional clarification of the package amount (For example, 3 mL, 10mL, etc.).
   */
  amount?: fhir.IRatio|undefined;
  /**
   * Information that only applies to packages (not products).
   */
  batch?: fhir.IMedicationBatch|undefined;
  /**
   * Depending on the context of use, the code that was actually selected by the user (prescriber, dispenser, etc.) will have the coding.userSelected set to true.  As described in the coding datatype: "A coding may be marked as a "userSelected" if a user selected the particular coded value in a user interface (e.g. the user selects an item in a pick-list). If a user selected coding exists, it is the preferred choice for performing translations etc. Other codes can only be literal translations to alternative code systems, or codes at a lower level of granularity (e.g. a generic code for a vendor-specific primary one).
   */
  code?: fhir.ICodeableConcept|undefined;
  /**
   * When Medication is referenced from MedicationRequest, this is the ordered form.  When Medication is referenced within MedicationDispense, this is the dispensed form.  When Medication is referenced within MedicationAdministration, this is administered form.
   */
  form?: fhir.ICodeableConcept|undefined;
  /**
   * The serial number could be included as an identifier.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * The ingredients need not be a complete list.  If an ingredient is not specified, this does not indicate whether an ingredient is present or absent.  If an ingredient is specified it does not mean that all ingredients are specified.  It is possible to specify both inactive and active ingredients.
   */
  ingredient?: fhir.IMedicationIngredient[]|undefined;
  /**
   * Describes the details of the manufacturer of the medication product.  This is not intended to represent the distributor of a medication product.
   */
  manufacturer?: fhir.IReference|undefined;
  /**
   * This status is intended to identify if the medication in a local system is in active use within a drug database or inventory.  For example, a pharmacy system may create a new drug file record for a compounded product "ABC Hospital Special Cream" with an active status.  At some point in the future, it may be determined that the drug record was created with an error and the status is changed to "entered in error".   This status is not intended to specify if a medication is part of a particular formulary.  It is possible that the drug record may be referenced by multiple formularies or catalogues and each of those entries would have a separate status.
   */
  status?: MedicationStatusEnum|undefined;
  _status?: fhir.IFhirElement|undefined;
}
/**
 * The ingredients need not be a complete list.  If an ingredient is not specified, this does not indicate whether an ingredient is present or absent.  If an ingredient is specified it does not mean that all ingredients are specified.  It is possible to specify both inactive and active ingredients.
 */
export class MedicationIngredient extends fhir.BackboneElement implements fhir.IMedicationIngredient {
  /**
   * Indication of whether this ingredient affects the therapeutic action of the drug.
   */
  public isActive?: boolean|undefined;
  public _isActive?: fhir.FhirElement|undefined;
  /**
   * The actual ingredient - either a substance (simple ingredient) or another medication of a medication.
   */
  public itemCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * The actual ingredient - either a substance (simple ingredient) or another medication of a medication.
   */
  public itemReference?: fhir.Reference|undefined;
  /**
   * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet.
   */
  public strength?: fhir.Ratio|undefined;
  /**
   * Default constructor for MedicationIngredient - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedicationIngredient> = {}) {
    super(source);
    if (source["isActive"]) { this.isActive = source.isActive; }
    if (source["_isActive"]) { this._isActive = new fhir.FhirElement(source._isActive!); }
    if (source["itemCodeableConcept"]) { this.itemCodeableConcept = new fhir.CodeableConcept(source.itemCodeableConcept!); }
    if (source["itemReference"]) { this.itemReference = new fhir.Reference(source.itemReference!); }
    if (source["strength"]) { this.strength = new fhir.Ratio(source.strength!); }
  }
  /**
   * Check if the current MedicationIngredient contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a MedicationIngredient from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IMedicationIngredient):MedicationIngredient {
    var dest:MedicationIngredient = new MedicationIngredient(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `MedicationIngredient is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Information that only applies to packages (not products).
 */
export class MedicationBatch extends fhir.BackboneElement implements fhir.IMedicationBatch {
  /**
   * When this specific batch of product will expire.
   */
  public expirationDate?: string|undefined;
  public _expirationDate?: fhir.FhirElement|undefined;
  /**
   * The assigned lot number of a batch of the specified product.
   */
  public lotNumber?: string|undefined;
  public _lotNumber?: fhir.FhirElement|undefined;
  /**
   * Default constructor for MedicationBatch - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedicationBatch> = {}) {
    super(source);
    if (source["expirationDate"]) { this.expirationDate = source.expirationDate; }
    if (source["_expirationDate"]) { this._expirationDate = new fhir.FhirElement(source._expirationDate!); }
    if (source["lotNumber"]) { this.lotNumber = source.lotNumber; }
    if (source["_lotNumber"]) { this._lotNumber = new fhir.FhirElement(source._lotNumber!); }
  }
  /**
   * Check if the current MedicationBatch contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a MedicationBatch from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IMedicationBatch):MedicationBatch {
    var dest:MedicationBatch = new MedicationBatch(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `MedicationBatch is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * This resource is primarily used for the identification and definition of a medication for the purposes of prescribing, dispensing, and administering a medication as well as for making statements about medication use.
 */
export class Medication extends fhir.DomainResource implements fhir.IMedication {
  /**
   * Resource Type Name
   */
  public override resourceType: "Medication";
  /**
   * Specific amount of the drug in the packaged product.  For example, when specifying a product that has the same strength (For example, Insulin glargine 100 unit per mL solution for injection), this attribute provides additional clarification of the package amount (For example, 3 mL, 10mL, etc.).
   */
  public amount?: fhir.Ratio|undefined;
  /**
   * Information that only applies to packages (not products).
   */
  public batch?: fhir.MedicationBatch|undefined;
  /**
   * Depending on the context of use, the code that was actually selected by the user (prescriber, dispenser, etc.) will have the coding.userSelected set to true.  As described in the coding datatype: "A coding may be marked as a "userSelected" if a user selected the particular coded value in a user interface (e.g. the user selects an item in a pick-list). If a user selected coding exists, it is the preferred choice for performing translations etc. Other codes can only be literal translations to alternative code systems, or codes at a lower level of granularity (e.g. a generic code for a vendor-specific primary one).
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * When Medication is referenced from MedicationRequest, this is the ordered form.  When Medication is referenced within MedicationDispense, this is the dispensed form.  When Medication is referenced within MedicationAdministration, this is administered form.
   */
  public form?: fhir.CodeableConcept|undefined;
  /**
   * The serial number could be included as an identifier.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * The ingredients need not be a complete list.  If an ingredient is not specified, this does not indicate whether an ingredient is present or absent.  If an ingredient is specified it does not mean that all ingredients are specified.  It is possible to specify both inactive and active ingredients.
   */
  public ingredient?: fhir.MedicationIngredient[]|undefined;
  /**
   * Describes the details of the manufacturer of the medication product.  This is not intended to represent the distributor of a medication product.
   */
  public manufacturer?: fhir.Reference|undefined;
  /**
   * This status is intended to identify if the medication in a local system is in active use within a drug database or inventory.  For example, a pharmacy system may create a new drug file record for a compounded product "ABC Hospital Special Cream" with an active status.  At some point in the future, it may be determined that the drug record was created with an error and the status is changed to "entered in error".   This status is not intended to specify if a medication is part of a particular formulary.  It is possible that the drug record may be referenced by multiple formularies or catalogues and each of those entries would have a separate status.
   */
  public status?: MedicationStatusEnum|undefined;
  public _status?: fhir.FhirElement|undefined;
  /**
   * Default constructor for Medication - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedication> = {}) {
    super(source);
    this.resourceType = 'Medication';
    if (source["amount"]) { this.amount = new fhir.Ratio(source.amount!); }
    if (source["batch"]) { this.batch = new fhir.MedicationBatch(source.batch!); }
    if (source["code"]) { this.code = new fhir.CodeableConcept(source.code!); }
    if (source["form"]) { this.form = new fhir.CodeableConcept(source.form!); }
    if (source["identifier"]) { this.identifier = source.identifier.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    if (source["ingredient"]) { this.ingredient = source.ingredient.map((x:Partial<fhir.IMedicationIngredient>) => new fhir.MedicationIngredient(x)); }
    if (source["manufacturer"]) { this.manufacturer = new fhir.Reference(source.manufacturer!); }
    if (source["status"]) { this.status = source.status; }
    if (source["_status"]) { this._status = new fhir.FhirElement(source._status!); }
  }
  /**
   * Check if the current Medication contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a Medication from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IMedication):Medication {
    var dest:Medication = new Medication(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `Medication is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the Medication.status field
 */
export enum MedicationStatusEnum {
  ACTIVE = "active",
  INACTIVE = "inactive",
  ENTERED_IN_ERROR = "entered-in-error",
}
