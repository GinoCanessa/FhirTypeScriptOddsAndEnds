// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Task

import * as fhir from '../fhir.js'

import { TaskStatusValueSet, TaskStatusValueSetType, TaskStatusValueSetEnum } from '../fhirValueSets/TaskStatusValueSet.js'
import { TaskIntentValueSet, TaskIntentValueSetType, TaskIntentValueSetEnum } from '../fhirValueSets/TaskIntentValueSet.js'
import { RequestPriorityValueSet, RequestPriorityValueSetType, RequestPriorityValueSetEnum } from '../fhirValueSets/RequestPriorityValueSet.js'
import { TaskCodeValueSet, TaskCodeValueSetType, TaskCodeValueSetEnum } from '../fhirValueSets/TaskCodeValueSet.js'
import { PerformerRoleValueSet, PerformerRoleValueSetType, PerformerRoleValueSetEnum } from '../fhirValueSets/PerformerRoleValueSet.js'

/**
 * If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
 */
export type ITaskRestriction = fhir.IBackboneElement & { 
  /**
   * Indicates the number of times the requested action should occur.
   */
  repetitions?: number|undefined;
  /**
   * Extended properties for primitive element: Task.restriction.repetitions
   */
  _repetitions?: fhir.IFhirElement|undefined;
  /**
   * Note that period.high is the due date representing the time by which the task should be completed.
   */
  period?: fhir.IPeriod|undefined;
  /**
   * For requests that are targeted to more than on potential recipient/target, for whom is fulfillment sought?
   */
  recipient?: fhir.IReference[]|undefined;
}

/**
 * Additional information that may be needed in the execution of the task.
 */
export type ITaskInput = fhir.IBackboneElement & { 
  /**
   * If referencing a BPMN workflow or Protocol, the "system" is the URL for the workflow definition and the code is the "name" of the required input.
   */
  type: fhir.ICodeableConcept|null;
  /**
   * The value of the input parameter as a basic type.
   */
  valueBase64Binary?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  _valueBase64Binary?: fhir.IFhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueBoolean?: boolean|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  _valueBoolean?: fhir.IFhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueCanonical?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  _valueCanonical?: fhir.IFhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueCode?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  _valueCode?: fhir.IFhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueDate?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  _valueDate?: fhir.IFhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueDateTime?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  _valueDateTime?: fhir.IFhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueDecimal?: number|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  _valueDecimal?: fhir.IFhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueId?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  _valueId?: fhir.IFhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueInstant?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  _valueInstant?: fhir.IFhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueInteger?: number|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  _valueInteger?: fhir.IFhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueMarkdown?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  _valueMarkdown?: fhir.IFhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueOid?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  _valueOid?: fhir.IFhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valuePositiveInt?: number|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  _valuePositiveInt?: fhir.IFhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueString?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  _valueString?: fhir.IFhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueTime?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  _valueTime?: fhir.IFhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueUnsignedInt?: number|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  _valueUnsignedInt?: fhir.IFhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueUri?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  _valueUri?: fhir.IFhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueUrl?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  _valueUrl?: fhir.IFhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueUuid?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  _valueUuid?: fhir.IFhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueAddress?: fhir.IAddress|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueAge?: fhir.IAge|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueAnnotation?: fhir.IAnnotation|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueAttachment?: fhir.IAttachment|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueCoding?: fhir.ICoding|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueContactPoint?: fhir.IContactPoint|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueCount?: fhir.ICount|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueDistance?: fhir.IDistance|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueDuration?: fhir.IDuration|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueHumanName?: fhir.IHumanName|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueIdentifier?: fhir.IIdentifier|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueMoney?: fhir.IMoney|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valuePeriod?: fhir.IPeriod|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueQuantity?: fhir.IQuantity|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueRange?: fhir.IRange|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueRatio?: fhir.IRatio|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueReference?: fhir.IReference|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueSampledData?: fhir.ISampledData|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueSignature?: fhir.ISignature|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueTiming?: fhir.ITiming|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueContactDetail?: fhir.IContactDetail|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueContributor?: fhir.IContributor|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueDataRequirement?: fhir.IDataRequirement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueExpression?: fhir.IExpression|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueParameterDefinition?: fhir.IParameterDefinition|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueRelatedArtifact?: fhir.IRelatedArtifact|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueTriggerDefinition?: fhir.ITriggerDefinition|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueUsageContext?: fhir.IUsageContext|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueDosage?: fhir.IDosage|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueMeta?: fhir.IMeta|undefined;
}

/**
 * Outputs produced by the Task.
 */
export type ITaskOutput = fhir.IBackboneElement & { 
  /**
   * The name of the Output parameter.
   */
  type: fhir.ICodeableConcept|null;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueBase64Binary?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  _valueBase64Binary?: fhir.IFhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueBoolean?: boolean|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  _valueBoolean?: fhir.IFhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueCanonical?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  _valueCanonical?: fhir.IFhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueCode?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  _valueCode?: fhir.IFhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueDate?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  _valueDate?: fhir.IFhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueDateTime?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  _valueDateTime?: fhir.IFhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueDecimal?: number|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  _valueDecimal?: fhir.IFhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueId?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  _valueId?: fhir.IFhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueInstant?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  _valueInstant?: fhir.IFhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueInteger?: number|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  _valueInteger?: fhir.IFhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueMarkdown?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  _valueMarkdown?: fhir.IFhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueOid?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  _valueOid?: fhir.IFhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valuePositiveInt?: number|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  _valuePositiveInt?: fhir.IFhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueString?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  _valueString?: fhir.IFhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueTime?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  _valueTime?: fhir.IFhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueUnsignedInt?: number|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  _valueUnsignedInt?: fhir.IFhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueUri?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  _valueUri?: fhir.IFhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueUrl?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  _valueUrl?: fhir.IFhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueUuid?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  _valueUuid?: fhir.IFhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueAddress?: fhir.IAddress|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueAge?: fhir.IAge|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueAnnotation?: fhir.IAnnotation|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueAttachment?: fhir.IAttachment|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueCoding?: fhir.ICoding|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueContactPoint?: fhir.IContactPoint|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueCount?: fhir.ICount|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueDistance?: fhir.IDistance|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueDuration?: fhir.IDuration|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueHumanName?: fhir.IHumanName|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueIdentifier?: fhir.IIdentifier|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueMoney?: fhir.IMoney|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valuePeriod?: fhir.IPeriod|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueQuantity?: fhir.IQuantity|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueRange?: fhir.IRange|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueRatio?: fhir.IRatio|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueReference?: fhir.IReference|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueSampledData?: fhir.ISampledData|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueSignature?: fhir.ISignature|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueTiming?: fhir.ITiming|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueContactDetail?: fhir.IContactDetail|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueContributor?: fhir.IContributor|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueDataRequirement?: fhir.IDataRequirement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueExpression?: fhir.IExpression|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueParameterDefinition?: fhir.IParameterDefinition|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueRelatedArtifact?: fhir.IRelatedArtifact|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueTriggerDefinition?: fhir.ITriggerDefinition|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueUsageContext?: fhir.IUsageContext|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueDosage?: fhir.IDosage|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueMeta?: fhir.IMeta|undefined;
}

/**
 * A task to be performed.
 */
export type ITask = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "Task";
  /**
   * The business identifier for this task.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * The URL pointing to a *FHIR*-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.
   */
  instantiatesCanonical?: string|undefined;
  /**
   * Extended properties for primitive element: Task.instantiatesCanonical
   */
  _instantiatesCanonical?: fhir.IFhirElement|undefined;
  /**
   * The URL pointing to an *externally* maintained  protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.
   */
  instantiatesUri?: string|undefined;
  /**
   * Extended properties for primitive element: Task.instantiatesUri
   */
  _instantiatesUri?: fhir.IFhirElement|undefined;
  /**
   * BasedOn refers to a higher-level authorization that triggered the creation of the task.  It references a "request" resource such as a ServiceRequest, MedicationRequest, ServiceRequest, CarePlan, etc. which is distinct from the "request" resource the task is seeking to fulfill.  This latter resource is referenced by FocusOn.  For example, based on a ServiceRequest (= BasedOn), a task is created to fulfill a procedureRequest ( = FocusOn ) to collect a specimen from a patient.
   */
  basedOn?: fhir.IReference[]|undefined;
  /**
   * An identifier that links together multiple tasks and other requests that were created in the same context.
   */
  groupIdentifier?: fhir.IIdentifier|undefined;
  /**
   * This should usually be 0..1.
   */
  partOf?: fhir.IReference[]|undefined;
  /**
   * The current status of the task.
   */
  status: TaskStatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: Task.status
   */
  _status?: fhir.IFhirElement|undefined;
  /**
   * This applies to the current status.  Look at the history of the task to see reasons for past statuses.
   */
  statusReason?: fhir.ICodeableConcept|undefined;
  /**
   * Contains business-specific nuances of the business state.
   */
  businessStatus?: fhir.ICodeableConcept|undefined;
  /**
   * This element is immutable.  Proposed tasks, planned tasks, etc. must be distinct instances.
   * In most cases, Tasks will have an intent of "order".
   */
  intent: TaskIntentValueSetEnum|null;
  /**
   * Extended properties for primitive element: Task.intent
   */
  _intent?: fhir.IFhirElement|undefined;
  /**
   * Indicates how quickly the Task should be addressed with respect to other requests.
   */
  priority?: RequestPriorityValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: Task.priority
   */
  _priority?: fhir.IFhirElement|undefined;
  /**
   * The title (eg "My Tasks", "Outstanding Tasks for Patient X") should go into the code.
   */
  code?: fhir.ICodeableConcept|undefined;
  /**
   * A free-text description of what is to be performed.
   */
  description?: string|undefined;
  /**
   * Extended properties for primitive element: Task.description
   */
  _description?: fhir.IFhirElement|undefined;
  /**
   * If multiple resources need to be manipulated, use sub-tasks.  (This ensures that status can be tracked independently for each referenced resource.).
   */
  focus?: fhir.IReference|undefined;
  /**
   * The entity who benefits from the performance of the service specified in the task (e.g., the patient).
   */
  for?: fhir.IReference|undefined;
  /**
   * The healthcare event  (e.g. a patient and healthcare provider interaction) during which this task was created.
   */
  encounter?: fhir.IReference|undefined;
  /**
   * Identifies the time action was first taken against the task (start) and/or the time final action was taken against the task prior to marking it as completed (end).
   */
  executionPeriod?: fhir.IPeriod|undefined;
  /**
   * The date and time this task was created.
   */
  authoredOn?: string|undefined;
  /**
   * Extended properties for primitive element: Task.authoredOn
   */
  _authoredOn?: fhir.IFhirElement|undefined;
  /**
   * The date and time of last modification to this task.
   */
  lastModified?: string|undefined;
  /**
   * Extended properties for primitive element: Task.lastModified
   */
  _lastModified?: fhir.IFhirElement|undefined;
  /**
   * The creator of the task.
   */
  requester?: fhir.IReference|undefined;
  /**
   * The kind of participant that should perform the task.
   */
  performerType?: fhir.ICodeableConcept[]|undefined;
  /**
   * Tasks may be created with an owner not yet identified.
   */
  owner?: fhir.IReference|undefined;
  /**
   * Principal physical location where the this task is performed.
   */
  location?: fhir.IReference|undefined;
  /**
   * This should only be included if there is no focus or if it differs from the reason indicated on the focus.
   */
  reasonCode?: fhir.ICodeableConcept|undefined;
  /**
   * Tasks might be justified based on an Observation, a Condition, a past or planned procedure, etc.   This should only be included if there is no focus or if it differs from the reason indicated on the focus.    Use the CodeableConcept text element in `Task.reasonCode` if the data is free (uncoded) text.
   */
  reasonReference?: fhir.IReference|undefined;
  /**
   * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be relevant to the Task.
   */
  insurance?: fhir.IReference[]|undefined;
  /**
   * Free-text information captured about the task as it progresses.
   */
  note?: fhir.IAnnotation[]|undefined;
  /**
   * This element does not point to the Provenance associated with the *current* version of the resource - as it would be created after this version existed.  The Provenance for the current version can be retrieved with a _revinclude.
   */
  relevantHistory?: fhir.IReference[]|undefined;
  /**
   * If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
   */
  restriction?: fhir.ITaskRestriction|undefined;
  /**
   * Additional information that may be needed in the execution of the task.
   */
  input?: fhir.ITaskInput[]|undefined;
  /**
   * Outputs produced by the Task.
   */
  output?: fhir.ITaskOutput[]|undefined;
}

/**
 * If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
 */
export class TaskRestriction extends fhir.BackboneElement implements ITaskRestriction {
  /**
   * Indicates the number of times the requested action should occur.
   */
  public repetitions?: number|undefined;
  /**
   * Extended properties for primitive element: Task.restriction.repetitions
   */
  public _repetitions?: fhir.FhirElement|undefined;
  /**
   * Note that period.high is the due date representing the time by which the task should be completed.
   */
  public period?: fhir.Period|undefined;
  /**
   * For requests that are targeted to more than on potential recipient/target, for whom is fulfillment sought?
   */
  public recipient?: fhir.Reference[]|undefined;
  /**
   * Default constructor for TaskRestriction - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ITaskRestriction> = { }) {
    super(source);
    if (source['repetitions']) { this.repetitions = source.repetitions; }
    if (source['_repetitions']) { this._repetitions = new fhir.FhirElement(source._repetitions!); }
    if (source['period']) { this.period = new fhir.Period(source.period!); }
    if (source['recipient']) { this.recipient = source.recipient.map((x) => new fhir.Reference(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["_repetitions"]) { results.push(...this._repetitions.doModelValidation()); }
    if (this["period"]) { results.push(...this.period.doModelValidation()); }
    if (this["recipient"]) { this.recipient.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * Additional information that may be needed in the execution of the task.
 */
export class TaskInput extends fhir.BackboneElement implements ITaskInput {
  /**
   * If referencing a BPMN workflow or Protocol, the "system" is the URL for the workflow definition and the code is the "name" of the required input.
   */
  public type: fhir.CodeableConcept|null;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueBase64Binary?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  public _valueBase64Binary?: fhir.FhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueBoolean?: boolean|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  public _valueBoolean?: fhir.FhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueCanonical?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  public _valueCanonical?: fhir.FhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueCode?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  public _valueCode?: fhir.FhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueDate?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  public _valueDate?: fhir.FhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueDateTime?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  public _valueDateTime?: fhir.FhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueDecimal?: number|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  public _valueDecimal?: fhir.FhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueId?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  public _valueId?: fhir.FhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueInstant?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  public _valueInstant?: fhir.FhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueInteger?: number|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  public _valueInteger?: fhir.FhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueMarkdown?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  public _valueMarkdown?: fhir.FhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueOid?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  public _valueOid?: fhir.FhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valuePositiveInt?: number|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  public _valuePositiveInt?: fhir.FhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueString?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  public _valueString?: fhir.FhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueTime?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  public _valueTime?: fhir.FhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueUnsignedInt?: number|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  public _valueUnsignedInt?: fhir.FhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueUri?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  public _valueUri?: fhir.FhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueUrl?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  public _valueUrl?: fhir.FhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueUuid?: string|undefined;
  /**
   * Extended properties for primitive element: Task.input.value[x]
   */
  public _valueUuid?: fhir.FhirElement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueAddress?: fhir.Address|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueAge?: fhir.Age|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueAnnotation?: fhir.Annotation|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueAttachment?: fhir.Attachment|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueCoding?: fhir.Coding|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueContactPoint?: fhir.ContactPoint|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueCount?: fhir.Count|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueDistance?: fhir.Distance|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueDuration?: fhir.Duration|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueHumanName?: fhir.HumanName|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueIdentifier?: fhir.Identifier|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueMoney?: fhir.Money|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valuePeriod?: fhir.Period|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueQuantity?: fhir.Quantity|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueRange?: fhir.Range|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueRatio?: fhir.Ratio|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueReference?: fhir.Reference|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueSampledData?: fhir.SampledData|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueSignature?: fhir.Signature|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueTiming?: fhir.Timing|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueContactDetail?: fhir.ContactDetail|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueContributor?: fhir.Contributor|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueDataRequirement?: fhir.DataRequirement|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueExpression?: fhir.Expression|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueParameterDefinition?: fhir.ParameterDefinition|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueRelatedArtifact?: fhir.RelatedArtifact|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueTriggerDefinition?: fhir.TriggerDefinition|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueUsageContext?: fhir.UsageContext|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueDosage?: fhir.Dosage|undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  public valueMeta?: fhir.Meta|undefined;
  /**
   * Default constructor for TaskInput - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ITaskInput> = { }) {
    super(source);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    else { this.type = null; }
    if (source['valueBase64Binary']) { this.valueBase64Binary = source.valueBase64Binary; }
    if (source['_valueBase64Binary']) { this._valueBase64Binary = new fhir.FhirElement(source._valueBase64Binary!); }
    if (source['valueBoolean']) { this.valueBoolean = source.valueBoolean; }
    if (source['_valueBoolean']) { this._valueBoolean = new fhir.FhirElement(source._valueBoolean!); }
    if (source['valueCanonical']) { this.valueCanonical = source.valueCanonical; }
    if (source['_valueCanonical']) { this._valueCanonical = new fhir.FhirElement(source._valueCanonical!); }
    if (source['valueCode']) { this.valueCode = source.valueCode; }
    if (source['_valueCode']) { this._valueCode = new fhir.FhirElement(source._valueCode!); }
    if (source['valueDate']) { this.valueDate = source.valueDate; }
    if (source['_valueDate']) { this._valueDate = new fhir.FhirElement(source._valueDate!); }
    if (source['valueDateTime']) { this.valueDateTime = source.valueDateTime; }
    if (source['_valueDateTime']) { this._valueDateTime = new fhir.FhirElement(source._valueDateTime!); }
    if (source['valueDecimal']) { this.valueDecimal = source.valueDecimal; }
    if (source['_valueDecimal']) { this._valueDecimal = new fhir.FhirElement(source._valueDecimal!); }
    if (source['valueId']) { this.valueId = source.valueId; }
    if (source['_valueId']) { this._valueId = new fhir.FhirElement(source._valueId!); }
    if (source['valueInstant']) { this.valueInstant = source.valueInstant; }
    if (source['_valueInstant']) { this._valueInstant = new fhir.FhirElement(source._valueInstant!); }
    if (source['valueInteger']) { this.valueInteger = source.valueInteger; }
    if (source['_valueInteger']) { this._valueInteger = new fhir.FhirElement(source._valueInteger!); }
    if (source['valueMarkdown']) { this.valueMarkdown = source.valueMarkdown; }
    if (source['_valueMarkdown']) { this._valueMarkdown = new fhir.FhirElement(source._valueMarkdown!); }
    if (source['valueOid']) { this.valueOid = source.valueOid; }
    if (source['_valueOid']) { this._valueOid = new fhir.FhirElement(source._valueOid!); }
    if (source['valuePositiveInt']) { this.valuePositiveInt = source.valuePositiveInt; }
    if (source['_valuePositiveInt']) { this._valuePositiveInt = new fhir.FhirElement(source._valuePositiveInt!); }
    if (source['valueString']) { this.valueString = source.valueString; }
    if (source['_valueString']) { this._valueString = new fhir.FhirElement(source._valueString!); }
    if (source['valueTime']) { this.valueTime = source.valueTime; }
    if (source['_valueTime']) { this._valueTime = new fhir.FhirElement(source._valueTime!); }
    if (source['valueUnsignedInt']) { this.valueUnsignedInt = source.valueUnsignedInt; }
    if (source['_valueUnsignedInt']) { this._valueUnsignedInt = new fhir.FhirElement(source._valueUnsignedInt!); }
    if (source['valueUri']) { this.valueUri = source.valueUri; }
    if (source['_valueUri']) { this._valueUri = new fhir.FhirElement(source._valueUri!); }
    if (source['valueUrl']) { this.valueUrl = source.valueUrl; }
    if (source['_valueUrl']) { this._valueUrl = new fhir.FhirElement(source._valueUrl!); }
    if (source['valueUuid']) { this.valueUuid = source.valueUuid; }
    if (source['_valueUuid']) { this._valueUuid = new fhir.FhirElement(source._valueUuid!); }
    if (source['valueAddress']) { this.valueAddress = new fhir.Address(source.valueAddress!); }
    if (source['valueAge']) { this.valueAge = new fhir.Age(source.valueAge!); }
    if (source['valueAnnotation']) { this.valueAnnotation = new fhir.Annotation(source.valueAnnotation!); }
    if (source['valueAttachment']) { this.valueAttachment = new fhir.Attachment(source.valueAttachment!); }
    if (source['valueCodeableConcept']) { this.valueCodeableConcept = new fhir.CodeableConcept(source.valueCodeableConcept!); }
    if (source['valueCoding']) { this.valueCoding = new fhir.Coding(source.valueCoding!); }
    if (source['valueContactPoint']) { this.valueContactPoint = new fhir.ContactPoint(source.valueContactPoint!); }
    if (source['valueCount']) { this.valueCount = new fhir.Count(source.valueCount!); }
    if (source['valueDistance']) { this.valueDistance = new fhir.Distance(source.valueDistance!); }
    if (source['valueDuration']) { this.valueDuration = new fhir.Duration(source.valueDuration!); }
    if (source['valueHumanName']) { this.valueHumanName = new fhir.HumanName(source.valueHumanName!); }
    if (source['valueIdentifier']) { this.valueIdentifier = new fhir.Identifier(source.valueIdentifier!); }
    if (source['valueMoney']) { this.valueMoney = new fhir.Money(source.valueMoney!); }
    if (source['valuePeriod']) { this.valuePeriod = new fhir.Period(source.valuePeriod!); }
    if (source['valueQuantity']) { this.valueQuantity = new fhir.Quantity(source.valueQuantity!); }
    if (source['valueRange']) { this.valueRange = new fhir.Range(source.valueRange!); }
    if (source['valueRatio']) { this.valueRatio = new fhir.Ratio(source.valueRatio!); }
    if (source['valueReference']) { this.valueReference = new fhir.Reference(source.valueReference!); }
    if (source['valueSampledData']) { this.valueSampledData = new fhir.SampledData(source.valueSampledData!); }
    if (source['valueSignature']) { this.valueSignature = new fhir.Signature(source.valueSignature!); }
    if (source['valueTiming']) { this.valueTiming = new fhir.Timing(source.valueTiming!); }
    if (source['valueContactDetail']) { this.valueContactDetail = new fhir.ContactDetail(source.valueContactDetail!); }
    if (source['valueContributor']) { this.valueContributor = new fhir.Contributor(source.valueContributor!); }
    if (source['valueDataRequirement']) { this.valueDataRequirement = new fhir.DataRequirement(source.valueDataRequirement!); }
    if (source['valueExpression']) { this.valueExpression = new fhir.Expression(source.valueExpression!); }
    if (source['valueParameterDefinition']) { this.valueParameterDefinition = new fhir.ParameterDefinition(source.valueParameterDefinition!); }
    if (source['valueRelatedArtifact']) { this.valueRelatedArtifact = new fhir.RelatedArtifact(source.valueRelatedArtifact!); }
    if (source['valueTriggerDefinition']) { this.valueTriggerDefinition = new fhir.TriggerDefinition(source.valueTriggerDefinition!); }
    if (source['valueUsageContext']) { this.valueUsageContext = new fhir.UsageContext(source.valueUsageContext!); }
    if (source['valueDosage']) { this.valueDosage = new fhir.Dosage(source.valueDosage!); }
    if (source['valueMeta']) { this.valueMeta = new fhir.Meta(source.valueMeta!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["type"]) { results.push(["type",'Missing required element: Task.input.type']); }
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (this["_valueBase64Binary"]) { results.push(...this._valueBase64Binary.doModelValidation()); }
    if (this["_valueBoolean"]) { results.push(...this._valueBoolean.doModelValidation()); }
    if (this["_valueCanonical"]) { results.push(...this._valueCanonical.doModelValidation()); }
    if (this["_valueCode"]) { results.push(...this._valueCode.doModelValidation()); }
    if (this["_valueDate"]) { results.push(...this._valueDate.doModelValidation()); }
    if (this["_valueDateTime"]) { results.push(...this._valueDateTime.doModelValidation()); }
    if (this["_valueDecimal"]) { results.push(...this._valueDecimal.doModelValidation()); }
    if (this["_valueId"]) { results.push(...this._valueId.doModelValidation()); }
    if (this["_valueInstant"]) { results.push(...this._valueInstant.doModelValidation()); }
    if (this["_valueInteger"]) { results.push(...this._valueInteger.doModelValidation()); }
    if (this["_valueMarkdown"]) { results.push(...this._valueMarkdown.doModelValidation()); }
    if (this["_valueOid"]) { results.push(...this._valueOid.doModelValidation()); }
    if (this["_valuePositiveInt"]) { results.push(...this._valuePositiveInt.doModelValidation()); }
    if (this["_valueString"]) { results.push(...this._valueString.doModelValidation()); }
    if (this["_valueTime"]) { results.push(...this._valueTime.doModelValidation()); }
    if (this["_valueUnsignedInt"]) { results.push(...this._valueUnsignedInt.doModelValidation()); }
    if (this["_valueUri"]) { results.push(...this._valueUri.doModelValidation()); }
    if (this["_valueUrl"]) { results.push(...this._valueUrl.doModelValidation()); }
    if (this["_valueUuid"]) { results.push(...this._valueUuid.doModelValidation()); }
    if (this["valueAddress"]) { results.push(...this.valueAddress.doModelValidation()); }
    if (this["valueAge"]) { results.push(...this.valueAge.doModelValidation()); }
    if (this["valueAnnotation"]) { results.push(...this.valueAnnotation.doModelValidation()); }
    if (this["valueAttachment"]) { results.push(...this.valueAttachment.doModelValidation()); }
    if (this["valueCodeableConcept"]) { results.push(...this.valueCodeableConcept.doModelValidation()); }
    if (this["valueCoding"]) { results.push(...this.valueCoding.doModelValidation()); }
    if (this["valueContactPoint"]) { results.push(...this.valueContactPoint.doModelValidation()); }
    if (this["valueCount"]) { results.push(...this.valueCount.doModelValidation()); }
    if (this["valueDistance"]) { results.push(...this.valueDistance.doModelValidation()); }
    if (this["valueDuration"]) { results.push(...this.valueDuration.doModelValidation()); }
    if (this["valueHumanName"]) { results.push(...this.valueHumanName.doModelValidation()); }
    if (this["valueIdentifier"]) { results.push(...this.valueIdentifier.doModelValidation()); }
    if (this["valueMoney"]) { results.push(...this.valueMoney.doModelValidation()); }
    if (this["valuePeriod"]) { results.push(...this.valuePeriod.doModelValidation()); }
    if (this["valueQuantity"]) { results.push(...this.valueQuantity.doModelValidation()); }
    if (this["valueRange"]) { results.push(...this.valueRange.doModelValidation()); }
    if (this["valueRatio"]) { results.push(...this.valueRatio.doModelValidation()); }
    if (this["valueReference"]) { results.push(...this.valueReference.doModelValidation()); }
    if (this["valueSampledData"]) { results.push(...this.valueSampledData.doModelValidation()); }
    if (this["valueSignature"]) { results.push(...this.valueSignature.doModelValidation()); }
    if (this["valueTiming"]) { results.push(...this.valueTiming.doModelValidation()); }
    if (this["valueContactDetail"]) { results.push(...this.valueContactDetail.doModelValidation()); }
    if (this["valueContributor"]) { results.push(...this.valueContributor.doModelValidation()); }
    if (this["valueDataRequirement"]) { results.push(...this.valueDataRequirement.doModelValidation()); }
    if (this["valueExpression"]) { results.push(...this.valueExpression.doModelValidation()); }
    if (this["valueParameterDefinition"]) { results.push(...this.valueParameterDefinition.doModelValidation()); }
    if (this["valueRelatedArtifact"]) { results.push(...this.valueRelatedArtifact.doModelValidation()); }
    if (this["valueTriggerDefinition"]) { results.push(...this.valueTriggerDefinition.doModelValidation()); }
    if (this["valueUsageContext"]) { results.push(...this.valueUsageContext.doModelValidation()); }
    if (this["valueDosage"]) { results.push(...this.valueDosage.doModelValidation()); }
    if (this["valueMeta"]) { results.push(...this.valueMeta.doModelValidation()); }
    return results;
  }
}

/**
 * Outputs produced by the Task.
 */
export class TaskOutput extends fhir.BackboneElement implements ITaskOutput {
  /**
   * The name of the Output parameter.
   */
  public type: fhir.CodeableConcept|null;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueBase64Binary?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  public _valueBase64Binary?: fhir.FhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueBoolean?: boolean|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  public _valueBoolean?: fhir.FhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueCanonical?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  public _valueCanonical?: fhir.FhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueCode?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  public _valueCode?: fhir.FhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueDate?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  public _valueDate?: fhir.FhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueDateTime?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  public _valueDateTime?: fhir.FhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueDecimal?: number|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  public _valueDecimal?: fhir.FhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueId?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  public _valueId?: fhir.FhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueInstant?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  public _valueInstant?: fhir.FhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueInteger?: number|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  public _valueInteger?: fhir.FhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueMarkdown?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  public _valueMarkdown?: fhir.FhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueOid?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  public _valueOid?: fhir.FhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valuePositiveInt?: number|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  public _valuePositiveInt?: fhir.FhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueString?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  public _valueString?: fhir.FhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueTime?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  public _valueTime?: fhir.FhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueUnsignedInt?: number|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  public _valueUnsignedInt?: fhir.FhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueUri?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  public _valueUri?: fhir.FhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueUrl?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  public _valueUrl?: fhir.FhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueUuid?: string|undefined;
  /**
   * Extended properties for primitive element: Task.output.value[x]
   */
  public _valueUuid?: fhir.FhirElement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueAddress?: fhir.Address|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueAge?: fhir.Age|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueAnnotation?: fhir.Annotation|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueAttachment?: fhir.Attachment|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueCoding?: fhir.Coding|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueContactPoint?: fhir.ContactPoint|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueCount?: fhir.Count|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueDistance?: fhir.Distance|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueDuration?: fhir.Duration|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueHumanName?: fhir.HumanName|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueIdentifier?: fhir.Identifier|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueMoney?: fhir.Money|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valuePeriod?: fhir.Period|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueQuantity?: fhir.Quantity|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueRange?: fhir.Range|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueRatio?: fhir.Ratio|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueReference?: fhir.Reference|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueSampledData?: fhir.SampledData|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueSignature?: fhir.Signature|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueTiming?: fhir.Timing|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueContactDetail?: fhir.ContactDetail|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueContributor?: fhir.Contributor|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueDataRequirement?: fhir.DataRequirement|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueExpression?: fhir.Expression|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueParameterDefinition?: fhir.ParameterDefinition|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueRelatedArtifact?: fhir.RelatedArtifact|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueTriggerDefinition?: fhir.TriggerDefinition|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueUsageContext?: fhir.UsageContext|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueDosage?: fhir.Dosage|undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  public valueMeta?: fhir.Meta|undefined;
  /**
   * Default constructor for TaskOutput - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ITaskOutput> = { }) {
    super(source);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    else { this.type = null; }
    if (source['valueBase64Binary']) { this.valueBase64Binary = source.valueBase64Binary; }
    if (source['_valueBase64Binary']) { this._valueBase64Binary = new fhir.FhirElement(source._valueBase64Binary!); }
    if (source['valueBoolean']) { this.valueBoolean = source.valueBoolean; }
    if (source['_valueBoolean']) { this._valueBoolean = new fhir.FhirElement(source._valueBoolean!); }
    if (source['valueCanonical']) { this.valueCanonical = source.valueCanonical; }
    if (source['_valueCanonical']) { this._valueCanonical = new fhir.FhirElement(source._valueCanonical!); }
    if (source['valueCode']) { this.valueCode = source.valueCode; }
    if (source['_valueCode']) { this._valueCode = new fhir.FhirElement(source._valueCode!); }
    if (source['valueDate']) { this.valueDate = source.valueDate; }
    if (source['_valueDate']) { this._valueDate = new fhir.FhirElement(source._valueDate!); }
    if (source['valueDateTime']) { this.valueDateTime = source.valueDateTime; }
    if (source['_valueDateTime']) { this._valueDateTime = new fhir.FhirElement(source._valueDateTime!); }
    if (source['valueDecimal']) { this.valueDecimal = source.valueDecimal; }
    if (source['_valueDecimal']) { this._valueDecimal = new fhir.FhirElement(source._valueDecimal!); }
    if (source['valueId']) { this.valueId = source.valueId; }
    if (source['_valueId']) { this._valueId = new fhir.FhirElement(source._valueId!); }
    if (source['valueInstant']) { this.valueInstant = source.valueInstant; }
    if (source['_valueInstant']) { this._valueInstant = new fhir.FhirElement(source._valueInstant!); }
    if (source['valueInteger']) { this.valueInteger = source.valueInteger; }
    if (source['_valueInteger']) { this._valueInteger = new fhir.FhirElement(source._valueInteger!); }
    if (source['valueMarkdown']) { this.valueMarkdown = source.valueMarkdown; }
    if (source['_valueMarkdown']) { this._valueMarkdown = new fhir.FhirElement(source._valueMarkdown!); }
    if (source['valueOid']) { this.valueOid = source.valueOid; }
    if (source['_valueOid']) { this._valueOid = new fhir.FhirElement(source._valueOid!); }
    if (source['valuePositiveInt']) { this.valuePositiveInt = source.valuePositiveInt; }
    if (source['_valuePositiveInt']) { this._valuePositiveInt = new fhir.FhirElement(source._valuePositiveInt!); }
    if (source['valueString']) { this.valueString = source.valueString; }
    if (source['_valueString']) { this._valueString = new fhir.FhirElement(source._valueString!); }
    if (source['valueTime']) { this.valueTime = source.valueTime; }
    if (source['_valueTime']) { this._valueTime = new fhir.FhirElement(source._valueTime!); }
    if (source['valueUnsignedInt']) { this.valueUnsignedInt = source.valueUnsignedInt; }
    if (source['_valueUnsignedInt']) { this._valueUnsignedInt = new fhir.FhirElement(source._valueUnsignedInt!); }
    if (source['valueUri']) { this.valueUri = source.valueUri; }
    if (source['_valueUri']) { this._valueUri = new fhir.FhirElement(source._valueUri!); }
    if (source['valueUrl']) { this.valueUrl = source.valueUrl; }
    if (source['_valueUrl']) { this._valueUrl = new fhir.FhirElement(source._valueUrl!); }
    if (source['valueUuid']) { this.valueUuid = source.valueUuid; }
    if (source['_valueUuid']) { this._valueUuid = new fhir.FhirElement(source._valueUuid!); }
    if (source['valueAddress']) { this.valueAddress = new fhir.Address(source.valueAddress!); }
    if (source['valueAge']) { this.valueAge = new fhir.Age(source.valueAge!); }
    if (source['valueAnnotation']) { this.valueAnnotation = new fhir.Annotation(source.valueAnnotation!); }
    if (source['valueAttachment']) { this.valueAttachment = new fhir.Attachment(source.valueAttachment!); }
    if (source['valueCodeableConcept']) { this.valueCodeableConcept = new fhir.CodeableConcept(source.valueCodeableConcept!); }
    if (source['valueCoding']) { this.valueCoding = new fhir.Coding(source.valueCoding!); }
    if (source['valueContactPoint']) { this.valueContactPoint = new fhir.ContactPoint(source.valueContactPoint!); }
    if (source['valueCount']) { this.valueCount = new fhir.Count(source.valueCount!); }
    if (source['valueDistance']) { this.valueDistance = new fhir.Distance(source.valueDistance!); }
    if (source['valueDuration']) { this.valueDuration = new fhir.Duration(source.valueDuration!); }
    if (source['valueHumanName']) { this.valueHumanName = new fhir.HumanName(source.valueHumanName!); }
    if (source['valueIdentifier']) { this.valueIdentifier = new fhir.Identifier(source.valueIdentifier!); }
    if (source['valueMoney']) { this.valueMoney = new fhir.Money(source.valueMoney!); }
    if (source['valuePeriod']) { this.valuePeriod = new fhir.Period(source.valuePeriod!); }
    if (source['valueQuantity']) { this.valueQuantity = new fhir.Quantity(source.valueQuantity!); }
    if (source['valueRange']) { this.valueRange = new fhir.Range(source.valueRange!); }
    if (source['valueRatio']) { this.valueRatio = new fhir.Ratio(source.valueRatio!); }
    if (source['valueReference']) { this.valueReference = new fhir.Reference(source.valueReference!); }
    if (source['valueSampledData']) { this.valueSampledData = new fhir.SampledData(source.valueSampledData!); }
    if (source['valueSignature']) { this.valueSignature = new fhir.Signature(source.valueSignature!); }
    if (source['valueTiming']) { this.valueTiming = new fhir.Timing(source.valueTiming!); }
    if (source['valueContactDetail']) { this.valueContactDetail = new fhir.ContactDetail(source.valueContactDetail!); }
    if (source['valueContributor']) { this.valueContributor = new fhir.Contributor(source.valueContributor!); }
    if (source['valueDataRequirement']) { this.valueDataRequirement = new fhir.DataRequirement(source.valueDataRequirement!); }
    if (source['valueExpression']) { this.valueExpression = new fhir.Expression(source.valueExpression!); }
    if (source['valueParameterDefinition']) { this.valueParameterDefinition = new fhir.ParameterDefinition(source.valueParameterDefinition!); }
    if (source['valueRelatedArtifact']) { this.valueRelatedArtifact = new fhir.RelatedArtifact(source.valueRelatedArtifact!); }
    if (source['valueTriggerDefinition']) { this.valueTriggerDefinition = new fhir.TriggerDefinition(source.valueTriggerDefinition!); }
    if (source['valueUsageContext']) { this.valueUsageContext = new fhir.UsageContext(source.valueUsageContext!); }
    if (source['valueDosage']) { this.valueDosage = new fhir.Dosage(source.valueDosage!); }
    if (source['valueMeta']) { this.valueMeta = new fhir.Meta(source.valueMeta!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["type"]) { results.push(["type",'Missing required element: Task.output.type']); }
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (this["_valueBase64Binary"]) { results.push(...this._valueBase64Binary.doModelValidation()); }
    if (this["_valueBoolean"]) { results.push(...this._valueBoolean.doModelValidation()); }
    if (this["_valueCanonical"]) { results.push(...this._valueCanonical.doModelValidation()); }
    if (this["_valueCode"]) { results.push(...this._valueCode.doModelValidation()); }
    if (this["_valueDate"]) { results.push(...this._valueDate.doModelValidation()); }
    if (this["_valueDateTime"]) { results.push(...this._valueDateTime.doModelValidation()); }
    if (this["_valueDecimal"]) { results.push(...this._valueDecimal.doModelValidation()); }
    if (this["_valueId"]) { results.push(...this._valueId.doModelValidation()); }
    if (this["_valueInstant"]) { results.push(...this._valueInstant.doModelValidation()); }
    if (this["_valueInteger"]) { results.push(...this._valueInteger.doModelValidation()); }
    if (this["_valueMarkdown"]) { results.push(...this._valueMarkdown.doModelValidation()); }
    if (this["_valueOid"]) { results.push(...this._valueOid.doModelValidation()); }
    if (this["_valuePositiveInt"]) { results.push(...this._valuePositiveInt.doModelValidation()); }
    if (this["_valueString"]) { results.push(...this._valueString.doModelValidation()); }
    if (this["_valueTime"]) { results.push(...this._valueTime.doModelValidation()); }
    if (this["_valueUnsignedInt"]) { results.push(...this._valueUnsignedInt.doModelValidation()); }
    if (this["_valueUri"]) { results.push(...this._valueUri.doModelValidation()); }
    if (this["_valueUrl"]) { results.push(...this._valueUrl.doModelValidation()); }
    if (this["_valueUuid"]) { results.push(...this._valueUuid.doModelValidation()); }
    if (this["valueAddress"]) { results.push(...this.valueAddress.doModelValidation()); }
    if (this["valueAge"]) { results.push(...this.valueAge.doModelValidation()); }
    if (this["valueAnnotation"]) { results.push(...this.valueAnnotation.doModelValidation()); }
    if (this["valueAttachment"]) { results.push(...this.valueAttachment.doModelValidation()); }
    if (this["valueCodeableConcept"]) { results.push(...this.valueCodeableConcept.doModelValidation()); }
    if (this["valueCoding"]) { results.push(...this.valueCoding.doModelValidation()); }
    if (this["valueContactPoint"]) { results.push(...this.valueContactPoint.doModelValidation()); }
    if (this["valueCount"]) { results.push(...this.valueCount.doModelValidation()); }
    if (this["valueDistance"]) { results.push(...this.valueDistance.doModelValidation()); }
    if (this["valueDuration"]) { results.push(...this.valueDuration.doModelValidation()); }
    if (this["valueHumanName"]) { results.push(...this.valueHumanName.doModelValidation()); }
    if (this["valueIdentifier"]) { results.push(...this.valueIdentifier.doModelValidation()); }
    if (this["valueMoney"]) { results.push(...this.valueMoney.doModelValidation()); }
    if (this["valuePeriod"]) { results.push(...this.valuePeriod.doModelValidation()); }
    if (this["valueQuantity"]) { results.push(...this.valueQuantity.doModelValidation()); }
    if (this["valueRange"]) { results.push(...this.valueRange.doModelValidation()); }
    if (this["valueRatio"]) { results.push(...this.valueRatio.doModelValidation()); }
    if (this["valueReference"]) { results.push(...this.valueReference.doModelValidation()); }
    if (this["valueSampledData"]) { results.push(...this.valueSampledData.doModelValidation()); }
    if (this["valueSignature"]) { results.push(...this.valueSignature.doModelValidation()); }
    if (this["valueTiming"]) { results.push(...this.valueTiming.doModelValidation()); }
    if (this["valueContactDetail"]) { results.push(...this.valueContactDetail.doModelValidation()); }
    if (this["valueContributor"]) { results.push(...this.valueContributor.doModelValidation()); }
    if (this["valueDataRequirement"]) { results.push(...this.valueDataRequirement.doModelValidation()); }
    if (this["valueExpression"]) { results.push(...this.valueExpression.doModelValidation()); }
    if (this["valueParameterDefinition"]) { results.push(...this.valueParameterDefinition.doModelValidation()); }
    if (this["valueRelatedArtifact"]) { results.push(...this.valueRelatedArtifact.doModelValidation()); }
    if (this["valueTriggerDefinition"]) { results.push(...this.valueTriggerDefinition.doModelValidation()); }
    if (this["valueUsageContext"]) { results.push(...this.valueUsageContext.doModelValidation()); }
    if (this["valueDosage"]) { results.push(...this.valueDosage.doModelValidation()); }
    if (this["valueMeta"]) { results.push(...this.valueMeta.doModelValidation()); }
    return results;
  }
}

/**
 * A task to be performed.
 */
export class Task extends fhir.DomainResource implements ITask {
  /**
   * Resource Type Name
   */
  public resourceType: "Task";
  /**
   * The business identifier for this task.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * The URL pointing to a *FHIR*-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.
   */
  public instantiatesCanonical?: string|undefined;
  /**
   * Extended properties for primitive element: Task.instantiatesCanonical
   */
  public _instantiatesCanonical?: fhir.FhirElement|undefined;
  /**
   * The URL pointing to an *externally* maintained  protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.
   */
  public instantiatesUri?: string|undefined;
  /**
   * Extended properties for primitive element: Task.instantiatesUri
   */
  public _instantiatesUri?: fhir.FhirElement|undefined;
  /**
   * BasedOn refers to a higher-level authorization that triggered the creation of the task.  It references a "request" resource such as a ServiceRequest, MedicationRequest, ServiceRequest, CarePlan, etc. which is distinct from the "request" resource the task is seeking to fulfill.  This latter resource is referenced by FocusOn.  For example, based on a ServiceRequest (= BasedOn), a task is created to fulfill a procedureRequest ( = FocusOn ) to collect a specimen from a patient.
   */
  public basedOn?: fhir.Reference[]|undefined;
  /**
   * An identifier that links together multiple tasks and other requests that were created in the same context.
   */
  public groupIdentifier?: fhir.Identifier|undefined;
  /**
   * This should usually be 0..1.
   */
  public partOf?: fhir.Reference[]|undefined;
  /**
   * The current status of the task.
   */
  public status: TaskStatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: Task.status
   */
  public _status?: fhir.FhirElement|undefined;
  /**
   * This applies to the current status.  Look at the history of the task to see reasons for past statuses.
   */
  public statusReason?: fhir.CodeableConcept|undefined;
  /**
   * Contains business-specific nuances of the business state.
   */
  public businessStatus?: fhir.CodeableConcept|undefined;
  /**
   * This element is immutable.  Proposed tasks, planned tasks, etc. must be distinct instances.
   * In most cases, Tasks will have an intent of "order".
   */
  public intent: TaskIntentValueSetEnum|null;
  /**
   * Extended properties for primitive element: Task.intent
   */
  public _intent?: fhir.FhirElement|undefined;
  /**
   * Indicates how quickly the Task should be addressed with respect to other requests.
   */
  public priority?: RequestPriorityValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: Task.priority
   */
  public _priority?: fhir.FhirElement|undefined;
  /**
   * The title (eg "My Tasks", "Outstanding Tasks for Patient X") should go into the code.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * A free-text description of what is to be performed.
   */
  public description?: string|undefined;
  /**
   * Extended properties for primitive element: Task.description
   */
  public _description?: fhir.FhirElement|undefined;
  /**
   * If multiple resources need to be manipulated, use sub-tasks.  (This ensures that status can be tracked independently for each referenced resource.).
   */
  public focus?: fhir.Reference|undefined;
  /**
   * The entity who benefits from the performance of the service specified in the task (e.g., the patient).
   */
  public for?: fhir.Reference|undefined;
  /**
   * The healthcare event  (e.g. a patient and healthcare provider interaction) during which this task was created.
   */
  public encounter?: fhir.Reference|undefined;
  /**
   * Identifies the time action was first taken against the task (start) and/or the time final action was taken against the task prior to marking it as completed (end).
   */
  public executionPeriod?: fhir.Period|undefined;
  /**
   * The date and time this task was created.
   */
  public authoredOn?: string|undefined;
  /**
   * Extended properties for primitive element: Task.authoredOn
   */
  public _authoredOn?: fhir.FhirElement|undefined;
  /**
   * The date and time of last modification to this task.
   */
  public lastModified?: string|undefined;
  /**
   * Extended properties for primitive element: Task.lastModified
   */
  public _lastModified?: fhir.FhirElement|undefined;
  /**
   * The creator of the task.
   */
  public requester?: fhir.Reference|undefined;
  /**
   * The kind of participant that should perform the task.
   */
  public performerType?: fhir.CodeableConcept[]|undefined;
  /**
   * Tasks may be created with an owner not yet identified.
   */
  public owner?: fhir.Reference|undefined;
  /**
   * Principal physical location where the this task is performed.
   */
  public location?: fhir.Reference|undefined;
  /**
   * This should only be included if there is no focus or if it differs from the reason indicated on the focus.
   */
  public reasonCode?: fhir.CodeableConcept|undefined;
  /**
   * Tasks might be justified based on an Observation, a Condition, a past or planned procedure, etc.   This should only be included if there is no focus or if it differs from the reason indicated on the focus.    Use the CodeableConcept text element in `Task.reasonCode` if the data is free (uncoded) text.
   */
  public reasonReference?: fhir.Reference|undefined;
  /**
   * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be relevant to the Task.
   */
  public insurance?: fhir.Reference[]|undefined;
  /**
   * Free-text information captured about the task as it progresses.
   */
  public note?: fhir.Annotation[]|undefined;
  /**
   * This element does not point to the Provenance associated with the *current* version of the resource - as it would be created after this version existed.  The Provenance for the current version can be retrieved with a _revinclude.
   */
  public relevantHistory?: fhir.Reference[]|undefined;
  /**
   * If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
   */
  public restriction?: fhir.TaskRestriction|undefined;
  /**
   * Additional information that may be needed in the execution of the task.
   */
  public input?: fhir.TaskInput[]|undefined;
  /**
   * Outputs produced by the Task.
   */
  public output?: fhir.TaskOutput[]|undefined;
  /**
   * Default constructor for Task - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ITask> = { }) {
    super(source);
    this.resourceType = 'Task';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['instantiatesCanonical']) { this.instantiatesCanonical = source.instantiatesCanonical; }
    if (source['_instantiatesCanonical']) { this._instantiatesCanonical = new fhir.FhirElement(source._instantiatesCanonical!); }
    if (source['instantiatesUri']) { this.instantiatesUri = source.instantiatesUri; }
    if (source['_instantiatesUri']) { this._instantiatesUri = new fhir.FhirElement(source._instantiatesUri!); }
    if (source['basedOn']) { this.basedOn = source.basedOn.map((x) => new fhir.Reference(x)); }
    if (source['groupIdentifier']) { this.groupIdentifier = new fhir.Identifier(source.groupIdentifier!); }
    if (source['partOf']) { this.partOf = source.partOf.map((x) => new fhir.Reference(x)); }
    if (source['status']) { this.status = source.status; }
    else { this.status = null; }
    if (source['_status']) { this._status = new fhir.FhirElement(source._status!); }
    if (source['statusReason']) { this.statusReason = new fhir.CodeableConcept(source.statusReason!); }
    if (source['businessStatus']) { this.businessStatus = new fhir.CodeableConcept(source.businessStatus!); }
    if (source['intent']) { this.intent = source.intent; }
    else { this.intent = null; }
    if (source['_intent']) { this._intent = new fhir.FhirElement(source._intent!); }
    if (source['priority']) { this.priority = source.priority; }
    if (source['_priority']) { this._priority = new fhir.FhirElement(source._priority!); }
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code!); }
    if (source['description']) { this.description = source.description; }
    if (source['_description']) { this._description = new fhir.FhirElement(source._description!); }
    if (source['focus']) { this.focus = new fhir.Reference(source.focus!); }
    if (source['for']) { this.for = new fhir.Reference(source.for!); }
    if (source['encounter']) { this.encounter = new fhir.Reference(source.encounter!); }
    if (source['executionPeriod']) { this.executionPeriod = new fhir.Period(source.executionPeriod!); }
    if (source['authoredOn']) { this.authoredOn = source.authoredOn; }
    if (source['_authoredOn']) { this._authoredOn = new fhir.FhirElement(source._authoredOn!); }
    if (source['lastModified']) { this.lastModified = source.lastModified; }
    if (source['_lastModified']) { this._lastModified = new fhir.FhirElement(source._lastModified!); }
    if (source['requester']) { this.requester = new fhir.Reference(source.requester!); }
    if (source['performerType']) { this.performerType = source.performerType.map((x) => new fhir.CodeableConcept(x)); }
    if (source['owner']) { this.owner = new fhir.Reference(source.owner!); }
    if (source['location']) { this.location = new fhir.Reference(source.location!); }
    if (source['reasonCode']) { this.reasonCode = new fhir.CodeableConcept(source.reasonCode!); }
    if (source['reasonReference']) { this.reasonReference = new fhir.Reference(source.reasonReference!); }
    if (source['insurance']) { this.insurance = source.insurance.map((x) => new fhir.Reference(x)); }
    if (source['note']) { this.note = source.note.map((x) => new fhir.Annotation(x)); }
    if (source['relevantHistory']) { this.relevantHistory = source.relevantHistory.map((x) => new fhir.Reference(x)); }
    if (source['restriction']) { this.restriction = new fhir.TaskRestriction(source.restriction!); }
    if (source['input']) { this.input = source.input.map((x) => new fhir.TaskInput(x)); }
    if (source['output']) { this.output = source.output.map((x) => new fhir.TaskOutput(x)); }
  }
  /**
   * Required-bound Value Set for status
   */
  public static statusRequiredValueSet():TaskStatusValueSetType {
    return TaskStatusValueSet;
  }
  /**
   * Required-bound Value Set for intent
   */
  public static intentRequiredValueSet():TaskIntentValueSetType {
    return TaskIntentValueSet;
  }
  /**
   * Required-bound Value Set for priority
   */
  public static priorityRequiredValueSet():RequestPriorityValueSetType {
    return RequestPriorityValueSet;
  }
  /**
   * Example-bound Value Set for code
   */
  public static codeExampleValueSet():TaskCodeValueSetType {
    return TaskCodeValueSet;
  }
  /**
   * Preferred-bound Value Set for performerType
   */
  public static performerTypePreferredValueSet():PerformerRoleValueSetType {
    return PerformerRoleValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: Task.resourceType']); }
    if (this["identifier"]) { this.identifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_instantiatesCanonical"]) { results.push(...this._instantiatesCanonical.doModelValidation()); }
    if (this["_instantiatesUri"]) { results.push(...this._instantiatesUri.doModelValidation()); }
    if (this["basedOn"]) { this.basedOn.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["groupIdentifier"]) { results.push(...this.groupIdentifier.doModelValidation()); }
    if (this["partOf"]) { this.partOf.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (!this["status"]) { results.push(["status",'Missing required element: Task.status']); }
    if (this["_status"]) { results.push(...this._status.doModelValidation()); }
    if (this["statusReason"]) { results.push(...this.statusReason.doModelValidation()); }
    if (this["businessStatus"]) { results.push(...this.businessStatus.doModelValidation()); }
    if (!this["intent"]) { results.push(["intent",'Missing required element: Task.intent']); }
    if (this["_intent"]) { results.push(...this._intent.doModelValidation()); }
    if (this["_priority"]) { results.push(...this._priority.doModelValidation()); }
    if (this["code"]) { results.push(...this.code.doModelValidation()); }
    if (this["_description"]) { results.push(...this._description.doModelValidation()); }
    if (this["focus"]) { results.push(...this.focus.doModelValidation()); }
    if (this["for"]) { results.push(...this.for.doModelValidation()); }
    if (this["encounter"]) { results.push(...this.encounter.doModelValidation()); }
    if (this["executionPeriod"]) { results.push(...this.executionPeriod.doModelValidation()); }
    if (this["_authoredOn"]) { results.push(...this._authoredOn.doModelValidation()); }
    if (this["_lastModified"]) { results.push(...this._lastModified.doModelValidation()); }
    if (this["requester"]) { results.push(...this.requester.doModelValidation()); }
    if (this["performerType"]) { this.performerType.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["owner"]) { results.push(...this.owner.doModelValidation()); }
    if (this["location"]) { results.push(...this.location.doModelValidation()); }
    if (this["reasonCode"]) { results.push(...this.reasonCode.doModelValidation()); }
    if (this["reasonReference"]) { results.push(...this.reasonReference.doModelValidation()); }
    if (this["insurance"]) { this.insurance.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["note"]) { this.note.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["relevantHistory"]) { this.relevantHistory.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["restriction"]) { results.push(...this.restriction.doModelValidation()); }
    if (this["input"]) { this.input.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["output"]) { this.output.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}
