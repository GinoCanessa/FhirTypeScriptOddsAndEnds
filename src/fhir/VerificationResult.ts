// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: VerificationResult

import * as fhir from '../fhir.js'

import { VerificationresultPrimarySourceTypeValueSet, VerificationresultPrimarySourceTypeValueSetType, VerificationresultPrimarySourceTypeValueSetEnum } from '../fhirValueSets/VerificationresultPrimarySourceTypeValueSet.js'
import { VerificationresultCommunicationMethodValueSet, VerificationresultCommunicationMethodValueSetType, VerificationresultCommunicationMethodValueSetEnum } from '../fhirValueSets/VerificationresultCommunicationMethodValueSet.js'
import { VerificationresultValidationStatusValueSet, VerificationresultValidationStatusValueSetType, VerificationresultValidationStatusValueSetEnum } from '../fhirValueSets/VerificationresultValidationStatusValueSet.js'
import { VerificationresultCanPushUpdatesValueSet, VerificationresultCanPushUpdatesValueSetType, VerificationresultCanPushUpdatesValueSetEnum } from '../fhirValueSets/VerificationresultCanPushUpdatesValueSet.js'
import { VerificationresultPushTypeAvailableValueSet, VerificationresultPushTypeAvailableValueSetType, VerificationresultPushTypeAvailableValueSetEnum } from '../fhirValueSets/VerificationresultPushTypeAvailableValueSet.js'
import { VerificationresultNeedValueSet, VerificationresultNeedValueSetType, VerificationresultNeedValueSetEnum } from '../fhirValueSets/VerificationresultNeedValueSet.js'
import { VerificationresultStatusValueSet, VerificationresultStatusValueSetType, VerificationresultStatusValueSetEnum } from '../fhirValueSets/VerificationresultStatusValueSet.js'
import { VerificationresultValidationTypeValueSet, VerificationresultValidationTypeValueSetType, VerificationresultValidationTypeValueSetEnum } from '../fhirValueSets/VerificationresultValidationTypeValueSet.js'
import { VerificationresultValidationProcessValueSet, VerificationresultValidationProcessValueSetType, VerificationresultValidationProcessValueSetEnum } from '../fhirValueSets/VerificationresultValidationProcessValueSet.js'
import { VerificationresultFailureActionValueSet, VerificationresultFailureActionValueSetType, VerificationresultFailureActionValueSetEnum } from '../fhirValueSets/VerificationresultFailureActionValueSet.js'

/**
 * Information about the primary source(s) involved in validation.
 */
export type IVerificationResultPrimarySource = fhir.IBackboneElement & { 
  /**
   * Reference to the primary source.
   */
  who?: fhir.IReference|undefined;
  /**
   * Type of primary source (License Board; Primary Education; Continuing Education; Postal Service; Relationship owner; Registration Authority; legal source; issuing source; authoritative source).
   */
  type?: fhir.ICodeableConcept[]|undefined;
  /**
   * Method for communicating with the primary source (manual; API; Push).
   */
  communicationMethod?: fhir.ICodeableConcept[]|undefined;
  /**
   * Status of the validation of the target against the primary source (successful; failed; unknown).
   */
  validationStatus?: fhir.ICodeableConcept|undefined;
  /**
   * When the target was validated against the primary source.
   */
  validationDate?: string|undefined;
  /**
   * Extended properties for primitive element: VerificationResult.primarySource.validationDate
   */
  _validationDate?: fhir.IFhirElement|undefined;
  /**
   * Ability of the primary source to push updates/alerts (yes; no; undetermined).
   */
  canPushUpdates?: fhir.ICodeableConcept|undefined;
  /**
   * Type of alerts/updates the primary source can send (specific requested changes; any changes; as defined by source).
   */
  pushTypeAvailable?: fhir.ICodeableConcept[]|undefined;
}

/**
 * Information about the entity attesting to information.
 */
export type IVerificationResultAttestation = fhir.IBackboneElement & { 
  /**
   * The individual or organization attesting to information.
   */
  who?: fhir.IReference|undefined;
  /**
   * When the who is asserting on behalf of another (organization or individual).
   */
  onBehalfOf?: fhir.IReference|undefined;
  /**
   * The method by which attested information was submitted/retrieved (manual; API; Push).
   */
  communicationMethod?: fhir.ICodeableConcept|undefined;
  /**
   * The date the information was attested to.
   */
  date?: string|undefined;
  /**
   * Extended properties for primitive element: VerificationResult.attestation.date
   */
  _date?: fhir.IFhirElement|undefined;
  /**
   * A digital identity certificate associated with the attestation source.
   */
  sourceIdentityCertificate?: string|undefined;
  /**
   * Extended properties for primitive element: VerificationResult.attestation.sourceIdentityCertificate
   */
  _sourceIdentityCertificate?: fhir.IFhirElement|undefined;
  /**
   * A digital identity certificate associated with the proxy entity submitting attested information on behalf of the attestation source.
   */
  proxyIdentityCertificate?: string|undefined;
  /**
   * Extended properties for primitive element: VerificationResult.attestation.proxyIdentityCertificate
   */
  _proxyIdentityCertificate?: fhir.IFhirElement|undefined;
  /**
   * Signed assertion by the proxy entity indicating that they have the right to submit attested information on behalf of the attestation source.
   */
  proxySignature?: fhir.ISignature|undefined;
  /**
   * Signed assertion by the attestation source that they have attested to the information.
   */
  sourceSignature?: fhir.ISignature|undefined;
}

/**
 * Information about the entity validating information.
 */
export type IVerificationResultValidator = fhir.IBackboneElement & { 
  /**
   * Reference to the organization validating information.
   */
  organization: fhir.IReference|null;
  /**
   * A digital identity certificate associated with the validator.
   */
  identityCertificate?: string|undefined;
  /**
   * Extended properties for primitive element: VerificationResult.validator.identityCertificate
   */
  _identityCertificate?: fhir.IFhirElement|undefined;
  /**
   * Signed assertion by the validator that they have validated the information.
   */
  attestationSignature?: fhir.ISignature|undefined;
}

/**
 * Describes validation requirements, source(s), status and dates for one or more elements.
 */
export type IVerificationResult = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "VerificationResult";
  /**
   * A resource that was validated.
   */
  target?: fhir.IReference[]|undefined;
  /**
   * The fhirpath location(s) within the resource that was validated.
   */
  targetLocation?: string[]|undefined;
  /**
   * Extended properties for primitive element: VerificationResult.targetLocation
   */
  _targetLocation?: fhir.IFhirElement[]|undefined;
  /**
   * The frequency with which the target must be validated (none; initial; periodic).
   */
  need?: fhir.ICodeableConcept|undefined;
  /**
   * The validation status of the target (attested; validated; in process; requires revalidation; validation failed; revalidation failed).
   */
  status: VerificationresultStatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: VerificationResult.status
   */
  _status?: fhir.IFhirElement|undefined;
  /**
   * When the validation status was updated.
   */
  statusDate?: string|undefined;
  /**
   * Extended properties for primitive element: VerificationResult.statusDate
   */
  _statusDate?: fhir.IFhirElement|undefined;
  /**
   * What the target is validated against (nothing; primary source; multiple sources).
   */
  validationType?: fhir.ICodeableConcept|undefined;
  /**
   * The primary process by which the target is validated (edit check; value set; primary source; multiple sources; standalone; in context).
   */
  validationProcess?: fhir.ICodeableConcept[]|undefined;
  /**
   * Frequency of revalidation.
   */
  frequency?: fhir.ITiming|undefined;
  /**
   * The date/time validation was last completed (including failed validations).
   */
  lastPerformed?: string|undefined;
  /**
   * Extended properties for primitive element: VerificationResult.lastPerformed
   */
  _lastPerformed?: fhir.IFhirElement|undefined;
  /**
   * The date when target is next validated, if appropriate.
   */
  nextScheduled?: string|undefined;
  /**
   * Extended properties for primitive element: VerificationResult.nextScheduled
   */
  _nextScheduled?: fhir.IFhirElement|undefined;
  /**
   * The result if validation fails (fatal; warning; record only; none).
   */
  failureAction?: fhir.ICodeableConcept|undefined;
  /**
   * Information about the primary source(s) involved in validation.
   */
  primarySource?: fhir.IVerificationResultPrimarySource[]|undefined;
  /**
   * Information about the entity attesting to information.
   */
  attestation?: fhir.IVerificationResultAttestation|undefined;
  /**
   * Information about the entity validating information.
   */
  validator?: fhir.IVerificationResultValidator[]|undefined;
}

/**
 * Information about the primary source(s) involved in validation.
 */
export class VerificationResultPrimarySource extends fhir.BackboneElement implements IVerificationResultPrimarySource {
  /**
   * Reference to the primary source.
   */
  public who?: fhir.Reference|undefined;
  /**
   * Type of primary source (License Board; Primary Education; Continuing Education; Postal Service; Relationship owner; Registration Authority; legal source; issuing source; authoritative source).
   */
  public type?: fhir.CodeableConcept[]|undefined;
  /**
   * Method for communicating with the primary source (manual; API; Push).
   */
  public communicationMethod?: fhir.CodeableConcept[]|undefined;
  /**
   * Status of the validation of the target against the primary source (successful; failed; unknown).
   */
  public validationStatus?: fhir.CodeableConcept|undefined;
  /**
   * When the target was validated against the primary source.
   */
  public validationDate?: string|undefined;
  /**
   * Extended properties for primitive element: VerificationResult.primarySource.validationDate
   */
  public _validationDate?: fhir.FhirElement|undefined;
  /**
   * Ability of the primary source to push updates/alerts (yes; no; undetermined).
   */
  public canPushUpdates?: fhir.CodeableConcept|undefined;
  /**
   * Type of alerts/updates the primary source can send (specific requested changes; any changes; as defined by source).
   */
  public pushTypeAvailable?: fhir.CodeableConcept[]|undefined;
  /**
   * Default constructor for VerificationResultPrimarySource - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IVerificationResultPrimarySource> = { }) {
    super(source);
    if (source['who']) { this.who = new fhir.Reference(source.who!); }
    if (source['type']) { this.type = source.type.map((x) => new fhir.CodeableConcept(x)); }
    if (source['communicationMethod']) { this.communicationMethod = source.communicationMethod.map((x) => new fhir.CodeableConcept(x)); }
    if (source['validationStatus']) { this.validationStatus = new fhir.CodeableConcept(source.validationStatus!); }
    if (source['validationDate']) { this.validationDate = source.validationDate; }
    if (source['_validationDate']) { this._validationDate = new fhir.FhirElement(source._validationDate!); }
    if (source['canPushUpdates']) { this.canPushUpdates = new fhir.CodeableConcept(source.canPushUpdates!); }
    if (source['pushTypeAvailable']) { this.pushTypeAvailable = source.pushTypeAvailable.map((x) => new fhir.CodeableConcept(x)); }
  }
  /**
   * Example-bound Value Set for type
   */
  public static typeExampleValueSet():VerificationresultPrimarySourceTypeValueSetType {
    return VerificationresultPrimarySourceTypeValueSet;
  }
  /**
   * Example-bound Value Set for communicationMethod
   */
  public static communicationMethodExampleValueSet():VerificationresultCommunicationMethodValueSetType {
    return VerificationresultCommunicationMethodValueSet;
  }
  /**
   * Preferred-bound Value Set for validationStatus
   */
  public static validationStatusPreferredValueSet():VerificationresultValidationStatusValueSetType {
    return VerificationresultValidationStatusValueSet;
  }
  /**
   * Preferred-bound Value Set for canPushUpdates
   */
  public static canPushUpdatesPreferredValueSet():VerificationresultCanPushUpdatesValueSetType {
    return VerificationresultCanPushUpdatesValueSet;
  }
  /**
   * Preferred-bound Value Set for pushTypeAvailable
   */
  public static pushTypeAvailablePreferredValueSet():VerificationresultPushTypeAvailableValueSetType {
    return VerificationresultPushTypeAvailableValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["who"]) { results.push(...this.who.doModelValidation()); }
    if (this["type"]) { this.type.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["communicationMethod"]) { this.communicationMethod.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["validationStatus"]) { results.push(...this.validationStatus.doModelValidation()); }
    if (this["_validationDate"]) { results.push(...this._validationDate.doModelValidation()); }
    if (this["canPushUpdates"]) { results.push(...this.canPushUpdates.doModelValidation()); }
    if (this["pushTypeAvailable"]) { this.pushTypeAvailable.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * Information about the entity attesting to information.
 */
export class VerificationResultAttestation extends fhir.BackboneElement implements IVerificationResultAttestation {
  /**
   * The individual or organization attesting to information.
   */
  public who?: fhir.Reference|undefined;
  /**
   * When the who is asserting on behalf of another (organization or individual).
   */
  public onBehalfOf?: fhir.Reference|undefined;
  /**
   * The method by which attested information was submitted/retrieved (manual; API; Push).
   */
  public communicationMethod?: fhir.CodeableConcept|undefined;
  /**
   * The date the information was attested to.
   */
  public date?: string|undefined;
  /**
   * Extended properties for primitive element: VerificationResult.attestation.date
   */
  public _date?: fhir.FhirElement|undefined;
  /**
   * A digital identity certificate associated with the attestation source.
   */
  public sourceIdentityCertificate?: string|undefined;
  /**
   * Extended properties for primitive element: VerificationResult.attestation.sourceIdentityCertificate
   */
  public _sourceIdentityCertificate?: fhir.FhirElement|undefined;
  /**
   * A digital identity certificate associated with the proxy entity submitting attested information on behalf of the attestation source.
   */
  public proxyIdentityCertificate?: string|undefined;
  /**
   * Extended properties for primitive element: VerificationResult.attestation.proxyIdentityCertificate
   */
  public _proxyIdentityCertificate?: fhir.FhirElement|undefined;
  /**
   * Signed assertion by the proxy entity indicating that they have the right to submit attested information on behalf of the attestation source.
   */
  public proxySignature?: fhir.Signature|undefined;
  /**
   * Signed assertion by the attestation source that they have attested to the information.
   */
  public sourceSignature?: fhir.Signature|undefined;
  /**
   * Default constructor for VerificationResultAttestation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IVerificationResultAttestation> = { }) {
    super(source);
    if (source['who']) { this.who = new fhir.Reference(source.who!); }
    if (source['onBehalfOf']) { this.onBehalfOf = new fhir.Reference(source.onBehalfOf!); }
    if (source['communicationMethod']) { this.communicationMethod = new fhir.CodeableConcept(source.communicationMethod!); }
    if (source['date']) { this.date = source.date; }
    if (source['_date']) { this._date = new fhir.FhirElement(source._date!); }
    if (source['sourceIdentityCertificate']) { this.sourceIdentityCertificate = source.sourceIdentityCertificate; }
    if (source['_sourceIdentityCertificate']) { this._sourceIdentityCertificate = new fhir.FhirElement(source._sourceIdentityCertificate!); }
    if (source['proxyIdentityCertificate']) { this.proxyIdentityCertificate = source.proxyIdentityCertificate; }
    if (source['_proxyIdentityCertificate']) { this._proxyIdentityCertificate = new fhir.FhirElement(source._proxyIdentityCertificate!); }
    if (source['proxySignature']) { this.proxySignature = new fhir.Signature(source.proxySignature!); }
    if (source['sourceSignature']) { this.sourceSignature = new fhir.Signature(source.sourceSignature!); }
  }
  /**
   * Example-bound Value Set for communicationMethod
   */
  public static communicationMethodExampleValueSet():VerificationresultCommunicationMethodValueSetType {
    return VerificationresultCommunicationMethodValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["who"]) { results.push(...this.who.doModelValidation()); }
    if (this["onBehalfOf"]) { results.push(...this.onBehalfOf.doModelValidation()); }
    if (this["communicationMethod"]) { results.push(...this.communicationMethod.doModelValidation()); }
    if (this["_date"]) { results.push(...this._date.doModelValidation()); }
    if (this["_sourceIdentityCertificate"]) { results.push(...this._sourceIdentityCertificate.doModelValidation()); }
    if (this["_proxyIdentityCertificate"]) { results.push(...this._proxyIdentityCertificate.doModelValidation()); }
    if (this["proxySignature"]) { results.push(...this.proxySignature.doModelValidation()); }
    if (this["sourceSignature"]) { results.push(...this.sourceSignature.doModelValidation()); }
    return results;
  }
}

/**
 * Information about the entity validating information.
 */
export class VerificationResultValidator extends fhir.BackboneElement implements IVerificationResultValidator {
  /**
   * Reference to the organization validating information.
   */
  public organization: fhir.Reference|null;
  /**
   * A digital identity certificate associated with the validator.
   */
  public identityCertificate?: string|undefined;
  /**
   * Extended properties for primitive element: VerificationResult.validator.identityCertificate
   */
  public _identityCertificate?: fhir.FhirElement|undefined;
  /**
   * Signed assertion by the validator that they have validated the information.
   */
  public attestationSignature?: fhir.Signature|undefined;
  /**
   * Default constructor for VerificationResultValidator - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IVerificationResultValidator> = { }) {
    super(source);
    if (source['organization']) { this.organization = new fhir.Reference(source.organization!); }
    else { this.organization = null; }
    if (source['identityCertificate']) { this.identityCertificate = source.identityCertificate; }
    if (source['_identityCertificate']) { this._identityCertificate = new fhir.FhirElement(source._identityCertificate!); }
    if (source['attestationSignature']) { this.attestationSignature = new fhir.Signature(source.attestationSignature!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["organization"]) { results.push(["organization",'Missing required element: VerificationResult.validator.organization']); }
    if (this["organization"]) { results.push(...this.organization.doModelValidation()); }
    if (this["_identityCertificate"]) { results.push(...this._identityCertificate.doModelValidation()); }
    if (this["attestationSignature"]) { results.push(...this.attestationSignature.doModelValidation()); }
    return results;
  }
}

/**
 * Describes validation requirements, source(s), status and dates for one or more elements.
 */
export class VerificationResult extends fhir.DomainResource implements IVerificationResult {
  /**
   * Resource Type Name
   */
  public resourceType: "VerificationResult";
  /**
   * A resource that was validated.
   */
  public target?: fhir.Reference[]|undefined;
  /**
   * The fhirpath location(s) within the resource that was validated.
   */
  public targetLocation?: string[]|undefined;
  /**
   * Extended properties for primitive element: VerificationResult.targetLocation
   */
  public _targetLocation?: fhir.FhirElement[]|undefined;
  /**
   * The frequency with which the target must be validated (none; initial; periodic).
   */
  public need?: fhir.CodeableConcept|undefined;
  /**
   * The validation status of the target (attested; validated; in process; requires revalidation; validation failed; revalidation failed).
   */
  public status: VerificationresultStatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: VerificationResult.status
   */
  public _status?: fhir.FhirElement|undefined;
  /**
   * When the validation status was updated.
   */
  public statusDate?: string|undefined;
  /**
   * Extended properties for primitive element: VerificationResult.statusDate
   */
  public _statusDate?: fhir.FhirElement|undefined;
  /**
   * What the target is validated against (nothing; primary source; multiple sources).
   */
  public validationType?: fhir.CodeableConcept|undefined;
  /**
   * The primary process by which the target is validated (edit check; value set; primary source; multiple sources; standalone; in context).
   */
  public validationProcess?: fhir.CodeableConcept[]|undefined;
  /**
   * Frequency of revalidation.
   */
  public frequency?: fhir.Timing|undefined;
  /**
   * The date/time validation was last completed (including failed validations).
   */
  public lastPerformed?: string|undefined;
  /**
   * Extended properties for primitive element: VerificationResult.lastPerformed
   */
  public _lastPerformed?: fhir.FhirElement|undefined;
  /**
   * The date when target is next validated, if appropriate.
   */
  public nextScheduled?: string|undefined;
  /**
   * Extended properties for primitive element: VerificationResult.nextScheduled
   */
  public _nextScheduled?: fhir.FhirElement|undefined;
  /**
   * The result if validation fails (fatal; warning; record only; none).
   */
  public failureAction?: fhir.CodeableConcept|undefined;
  /**
   * Information about the primary source(s) involved in validation.
   */
  public primarySource?: fhir.VerificationResultPrimarySource[]|undefined;
  /**
   * Information about the entity attesting to information.
   */
  public attestation?: fhir.VerificationResultAttestation|undefined;
  /**
   * Information about the entity validating information.
   */
  public validator?: fhir.VerificationResultValidator[]|undefined;
  /**
   * Default constructor for VerificationResult - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IVerificationResult> = { }) {
    super(source);
    this.resourceType = 'VerificationResult';
    if (source['target']) { this.target = source.target.map((x) => new fhir.Reference(x)); }
    if (source['targetLocation']) { this.targetLocation = source.targetLocation.map((x) => (x)); }
    if (source['_targetLocation']) { this._targetLocation = source._targetLocation.map((x) => new fhir.FhirElement(x)); }
    if (source['need']) { this.need = new fhir.CodeableConcept(source.need!); }
    if (source['status']) { this.status = source.status; }
    else { this.status = null; }
    if (source['_status']) { this._status = new fhir.FhirElement(source._status!); }
    if (source['statusDate']) { this.statusDate = source.statusDate; }
    if (source['_statusDate']) { this._statusDate = new fhir.FhirElement(source._statusDate!); }
    if (source['validationType']) { this.validationType = new fhir.CodeableConcept(source.validationType!); }
    if (source['validationProcess']) { this.validationProcess = source.validationProcess.map((x) => new fhir.CodeableConcept(x)); }
    if (source['frequency']) { this.frequency = new fhir.Timing(source.frequency!); }
    if (source['lastPerformed']) { this.lastPerformed = source.lastPerformed; }
    if (source['_lastPerformed']) { this._lastPerformed = new fhir.FhirElement(source._lastPerformed!); }
    if (source['nextScheduled']) { this.nextScheduled = source.nextScheduled; }
    if (source['_nextScheduled']) { this._nextScheduled = new fhir.FhirElement(source._nextScheduled!); }
    if (source['failureAction']) { this.failureAction = new fhir.CodeableConcept(source.failureAction!); }
    if (source['primarySource']) { this.primarySource = source.primarySource.map((x) => new fhir.VerificationResultPrimarySource(x)); }
    if (source['attestation']) { this.attestation = new fhir.VerificationResultAttestation(source.attestation!); }
    if (source['validator']) { this.validator = source.validator.map((x) => new fhir.VerificationResultValidator(x)); }
  }
  /**
   * Preferred-bound Value Set for need
   */
  public static needPreferredValueSet():VerificationresultNeedValueSetType {
    return VerificationresultNeedValueSet;
  }
  /**
   * Required-bound Value Set for status
   */
  public static statusRequiredValueSet():VerificationresultStatusValueSetType {
    return VerificationresultStatusValueSet;
  }
  /**
   * Preferred-bound Value Set for validationType
   */
  public static validationTypePreferredValueSet():VerificationresultValidationTypeValueSetType {
    return VerificationresultValidationTypeValueSet;
  }
  /**
   * Example-bound Value Set for validationProcess
   */
  public static validationProcessExampleValueSet():VerificationresultValidationProcessValueSetType {
    return VerificationresultValidationProcessValueSet;
  }
  /**
   * Preferred-bound Value Set for failureAction
   */
  public static failureActionPreferredValueSet():VerificationresultFailureActionValueSetType {
    return VerificationresultFailureActionValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: VerificationResult.resourceType']); }
    if (this["target"]) { this.target.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_targetLocation"]) { this._targetLocation.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["need"]) { results.push(...this.need.doModelValidation()); }
    if (!this["status"]) { results.push(["status",'Missing required element: VerificationResult.status']); }
    if (this["_status"]) { results.push(...this._status.doModelValidation()); }
    if (this["_statusDate"]) { results.push(...this._statusDate.doModelValidation()); }
    if (this["validationType"]) { results.push(...this.validationType.doModelValidation()); }
    if (this["validationProcess"]) { this.validationProcess.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["frequency"]) { results.push(...this.frequency.doModelValidation()); }
    if (this["_lastPerformed"]) { results.push(...this._lastPerformed.doModelValidation()); }
    if (this["_nextScheduled"]) { results.push(...this._nextScheduled.doModelValidation()); }
    if (this["failureAction"]) { results.push(...this.failureAction.doModelValidation()); }
    if (this["primarySource"]) { this.primarySource.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["attestation"]) { results.push(...this.attestation.doModelValidation()); }
    if (this["validator"]) { this.validator.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}
