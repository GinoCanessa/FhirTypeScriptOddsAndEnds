// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Describe the undesirable effects of the medicinal product.
 */
export type IMedicinalProductUndesirableEffect = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "MedicinalProductUndesirableEffect";
  /**
   * Classification of the effect.
   */
  classification?: fhir.ICodeableConcept|undefined;
  /**
   * The frequency of occurrence of the effect.
   */
  frequencyOfOccurrence?: fhir.ICodeableConcept|undefined;
  /**
   * The population group to which this applies.
   */
  population?: fhir.IPopulation[]|undefined;
  /**
   * The medication for which this is an indication.
   */
  subject?: fhir.IReference[]|undefined;
  /**
   * The symptom, condition or undesirable effect.
   */
  symptomConditionEffect?: fhir.ICodeableConcept|undefined;
}
/**
 * Describe the undesirable effects of the medicinal product.
 */
export class MedicinalProductUndesirableEffect extends fhir.DomainResource implements fhir.IMedicinalProductUndesirableEffect {
  /**
   * Resource Type Name
   */
  public override resourceType: "MedicinalProductUndesirableEffect";
  /**
   * Classification of the effect.
   */
  public classification?: fhir.CodeableConcept|undefined;
  /**
   * The frequency of occurrence of the effect.
   */
  public frequencyOfOccurrence?: fhir.CodeableConcept|undefined;
  /**
   * The population group to which this applies.
   */
  public population?: fhir.Population[]|undefined;
  /**
   * The medication for which this is an indication.
   */
  public subject?: fhir.Reference[]|undefined;
  /**
   * The symptom, condition or undesirable effect.
   */
  public symptomConditionEffect?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for MedicinalProductUndesirableEffect - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedicinalProductUndesirableEffect> = {}) {
    super(source);
    this.resourceType = 'MedicinalProductUndesirableEffect';
    if (source["classification"]) { this.classification = new fhir.CodeableConcept(source.classification!); }
    if (source["frequencyOfOccurrence"]) { this.frequencyOfOccurrence = new fhir.CodeableConcept(source.frequencyOfOccurrence!); }
    if (source["population"]) { this.population = source.population.map((x:Partial<fhir.IPopulation>) => new fhir.Population(x)); }
    if (source["subject"]) { this.subject = source.subject.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["symptomConditionEffect"]) { this.symptomConditionEffect = new fhir.CodeableConcept(source.symptomConditionEffect!); }
  }
  /**
   * Check if the current MedicinalProductUndesirableEffect contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a MedicinalProductUndesirableEffect from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IMedicinalProductUndesirableEffect):MedicinalProductUndesirableEffect {
    var dest:MedicinalProductUndesirableEffect = new MedicinalProductUndesirableEffect(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `MedicinalProductUndesirableEffect is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
