// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: StructureMap

import * as fhir from '../fhir.js';

import { MapModelModeValueSet, MapModelModeValueSetType,} from '../fhirValueSets/MapModelModeValueSet.js';
import { MapModelModeValueSetEnum } from '../valueSetEnums.js';
import { MapInputModeValueSet, MapInputModeValueSetType,} from '../fhirValueSets/MapInputModeValueSet.js';
import { MapInputModeValueSetEnum } from '../valueSetEnums.js';
import { MapSourceListModeValueSet, MapSourceListModeValueSetType,} from '../fhirValueSets/MapSourceListModeValueSet.js';
import { MapSourceListModeValueSetEnum } from '../valueSetEnums.js';
import { MapContextTypeValueSet, MapContextTypeValueSetType,} from '../fhirValueSets/MapContextTypeValueSet.js';
import { MapContextTypeValueSetEnum } from '../valueSetEnums.js';
import { MapTargetListModeValueSet, MapTargetListModeValueSetType,} from '../fhirValueSets/MapTargetListModeValueSet.js';
import { MapTargetListModeValueSetEnum } from '../valueSetEnums.js';
import { MapTransformValueSet, MapTransformValueSetType,} from '../fhirValueSets/MapTransformValueSet.js';
import { MapTransformValueSetEnum } from '../valueSetEnums.js';
import { MapGroupTypeModeValueSet, MapGroupTypeModeValueSetType,} from '../fhirValueSets/MapGroupTypeModeValueSet.js';
import { MapGroupTypeModeValueSetEnum } from '../valueSetEnums.js';
import { PublicationStatusValueSet, PublicationStatusValueSetType,} from '../fhirValueSets/PublicationStatusValueSet.js';
import { PublicationStatusValueSetEnum } from '../valueSetEnums.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Valid arguments for the StructureMapStructure type.
 */
export interface StructureMapStructureArgs extends fhir.BackboneElementArgs {
  /**
   * The canonical reference to the structure.
   */
  url: fhir.FhirCanonical|string|undefined;
  /**
   * How the referenced structure is used in this mapping.
   */
  mode: MapModelModeValueSetEnum|null;
  /**
   * This is needed if both types have the same name (e.g. version conversion).
   */
  alias?: fhir.FhirString|string|undefined;
  /**
   * Documentation that describes how the structure is used in the mapping.
   */
  documentation?: fhir.FhirString|string|undefined;
}

/**
 * It is not necessary for a structure map to identify any dependent structures, though not listing them may restrict its usefulness.
 */
export class StructureMapStructure extends fhir.BackboneElement {
  readonly __dataType:string = 'StructureMapStructure';
  /**
   * The canonical reference to the structure.
   */
  public url: fhir.FhirCanonical|null;
  /**
   * How the referenced structure is used in this mapping.
   */
  public mode: MapModelModeValueSetEnum|null;
  /**
   * This is needed if both types have the same name (e.g. version conversion).
   */
  public alias?: fhir.FhirString|undefined;
  /**
   * Documentation that describes how the structure is used in the mapping.
   */
  public documentation?: fhir.FhirString|undefined;
  /**
   * Default constructor for StructureMapStructure - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<StructureMapStructureArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['url']) { this.url = new fhir.FhirCanonical({value: source.url}); }
    else { this.url = null; }
    if (source['mode']) { this.mode = source.mode; }
    else { this.mode = null; }
    if (source['alias']) { this.alias = new fhir.FhirString({value: source.alias}); }
    if (source['documentation']) { this.documentation = new fhir.FhirString({value: source.documentation}); }
  }
  /**
   * Required-bound Value Set for mode
   */
  public static modeRequiredValueSet():MapModelModeValueSetType {
    return MapModelModeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['url']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property url:fhir.FhirCanonical fhir: StructureMap.structure.url:canonical", }));
    }
    if (this["url"]) { outcome.issue!.push(...this.url.doModelValidation().issue!); }
    if (!this['mode']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property mode:MapModelModeValueSetEnum fhir: StructureMap.structure.mode:code", }));
    }
    if (this["alias"]) { outcome.issue!.push(...this.alias.doModelValidation().issue!); }
    if (this["documentation"]) { outcome.issue!.push(...this.documentation.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the StructureMapGroupInput type.
 */
export interface StructureMapGroupInputArgs extends fhir.BackboneElementArgs {
  /**
   * Name for this instance of data.
   */
  name: fhir.FhirId|string|undefined;
  /**
   * Type for this instance of data.
   */
  type?: fhir.FhirString|string|undefined;
  /**
   * Mode for this instance of data.
   */
  mode: MapInputModeValueSetEnum|null;
  /**
   * Documentation for this instance of data.
   */
  documentation?: fhir.FhirString|string|undefined;
}

/**
 * If no inputs are named, then the entry mappings are type based.
 */
export class StructureMapGroupInput extends fhir.BackboneElement {
  readonly __dataType:string = 'StructureMapGroupInput';
  /**
   * Name for this instance of data.
   */
  public name: fhir.FhirId|null;
  /**
   * Type for this instance of data.
   */
  public type?: fhir.FhirString|undefined;
  /**
   * Mode for this instance of data.
   */
  public mode: MapInputModeValueSetEnum|null;
  /**
   * Documentation for this instance of data.
   */
  public documentation?: fhir.FhirString|undefined;
  /**
   * Default constructor for StructureMapGroupInput - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<StructureMapGroupInputArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['name']) { this.name = new fhir.FhirId({value: source.name}); }
    else { this.name = null; }
    if (source['type']) { this.type = new fhir.FhirString({value: source.type}); }
    if (source['mode']) { this.mode = source.mode; }
    else { this.mode = null; }
    if (source['documentation']) { this.documentation = new fhir.FhirString({value: source.documentation}); }
  }
  /**
   * Required-bound Value Set for mode
   */
  public static modeRequiredValueSet():MapInputModeValueSetType {
    return MapInputModeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['name']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property name:fhir.FhirId fhir: StructureMap.group.input.name:id", }));
    }
    if (this["name"]) { outcome.issue!.push(...this.name.doModelValidation().issue!); }
    if (this["type"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }
    if (!this['mode']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property mode:MapInputModeValueSetEnum fhir: StructureMap.group.input.mode:code", }));
    }
    if (this["documentation"]) { outcome.issue!.push(...this.documentation.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the StructureMapGroupRuleSource type.
 */
export interface StructureMapGroupRuleSourceArgs extends fhir.BackboneElementArgs {
  /**
   * Type or variable this rule applies to.
   */
  context: fhir.FhirId|string|undefined;
  /**
   * Specified minimum cardinality for the element. This is optional; if present, it acts an implicit check on the input content.
   */
  min?: fhir.FhirInteger|number|undefined;
  /**
   * Specified maximum cardinality for the element - a number or a "*". This is optional; if present, it acts an implicit check on the input content (* just serves as documentation; it's the default value).
   */
  max?: fhir.FhirString|string|undefined;
  /**
   * Specified type for the element. This works as a condition on the mapping - use for polymorphic elements.
   */
  type?: fhir.FhirString|string|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValue?: fhir.FhirBase64Binary|fhir.FhirBoolean|fhir.FhirCanonical|fhir.FhirCode|fhir.FhirDate|fhir.FhirDateTime|fhir.FhirDecimal|fhir.FhirId|fhir.FhirInstant|fhir.FhirInteger|fhir.FhirMarkdown|fhir.FhirOid|fhir.FhirPositiveInt|fhir.FhirString|fhir.FhirTime|fhir.FhirUnsignedInt|fhir.FhirUri|fhir.FhirUrl|fhir.FhirUuid|fhir.Address|fhir.Age|fhir.Annotation|fhir.Attachment|fhir.CodeableConcept|fhir.Coding|fhir.ContactPoint|fhir.Count|fhir.Distance|fhir.Duration|fhir.HumanName|fhir.Identifier|fhir.Money|fhir.Period|fhir.Quantity|fhir.Range|fhir.Ratio|fhir.Reference|fhir.SampledData|fhir.Signature|fhir.Timing|fhir.ContactDetail|fhir.Contributor|fhir.DataRequirement|fhir.Expression|fhir.ParameterDefinition|fhir.RelatedArtifact|fhir.TriggerDefinition|fhir.UsageContext|fhir.Dosage|fhir.Meta|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueBase64Binary?: fhir.FhirBase64Binary|string|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueBoolean?: fhir.FhirBoolean|boolean|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueCanonical?: fhir.FhirCanonical|string|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueCode?: fhir.FhirCode|string|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueDate?: fhir.FhirDate|string|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueDateTime?: fhir.FhirDateTime|string|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueDecimal?: fhir.FhirDecimal|number|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueId?: fhir.FhirId|string|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueInstant?: fhir.FhirInstant|string|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueInteger?: fhir.FhirInteger|number|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueMarkdown?: fhir.FhirMarkdown|string|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueOid?: fhir.FhirOid|string|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValuePositiveInt?: fhir.FhirPositiveInt|number|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueString?: fhir.FhirString|string|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueTime?: fhir.FhirTime|string|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueUnsignedInt?: fhir.FhirUnsignedInt|number|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueUri?: fhir.FhirUri|string|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueUrl?: fhir.FhirUrl|string|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueUuid?: fhir.FhirUuid|string|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueAddress?: fhir.AddressArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueAge?: fhir.AgeArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueAnnotation?: fhir.AnnotationArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueAttachment?: fhir.AttachmentArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueCoding?: fhir.CodingArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueContactPoint?: fhir.ContactPointArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueCount?: fhir.CountArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueDistance?: fhir.DistanceArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueDuration?: fhir.DurationArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueHumanName?: fhir.HumanNameArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueIdentifier?: fhir.IdentifierArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueMoney?: fhir.MoneyArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValuePeriod?: fhir.PeriodArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueQuantity?: fhir.QuantityArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueRange?: fhir.RangeArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueRatio?: fhir.RatioArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueReference?: fhir.ReferenceArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueSampledData?: fhir.SampledDataArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueSignature?: fhir.SignatureArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueTiming?: fhir.TimingArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueContactDetail?: fhir.ContactDetailArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueContributor?: fhir.ContributorArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueDataRequirement?: fhir.DataRequirementArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueExpression?: fhir.ExpressionArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueParameterDefinition?: fhir.ParameterDefinitionArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueRelatedArtifact?: fhir.RelatedArtifactArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueTriggerDefinition?: fhir.TriggerDefinitionArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueUsageContext?: fhir.UsageContextArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueDosage?: fhir.DosageArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueMeta?: fhir.MetaArgs|undefined;
  /**
   * Optional field for this source.
   */
  element?: fhir.FhirString|string|undefined;
  /**
   * How to handle the list mode for this element.
   */
  listMode?: MapSourceListModeValueSetEnum|undefined;
  /**
   * Named context for field, if a field is specified.
   */
  variable?: fhir.FhirId|string|undefined;
  /**
   * FHIRPath expression  - must be true or the rule does not apply.
   */
  condition?: fhir.FhirString|string|undefined;
  /**
   * FHIRPath expression  - must be true or the mapping engine throws an error instead of completing.
   */
  check?: fhir.FhirString|string|undefined;
  /**
   * This is typically used for recording that something Is not transformed to the target for some reason.
   */
  logMessage?: fhir.FhirString|string|undefined;
}

/**
 * Source inputs to the mapping.
 */
export class StructureMapGroupRuleSource extends fhir.BackboneElement {
  readonly __dataType:string = 'StructureMapGroupRuleSource';
  /**
   * Type or variable this rule applies to.
   */
  public context: fhir.FhirId|null;
  /**
   * Specified minimum cardinality for the element. This is optional; if present, it acts an implicit check on the input content.
   */
  public min?: fhir.FhirInteger|undefined;
  /**
   * Specified maximum cardinality for the element - a number or a "*". This is optional; if present, it acts an implicit check on the input content (* just serves as documentation; it's the default value).
   */
  public max?: fhir.FhirString|undefined;
  /**
   * Specified type for the element. This works as a condition on the mapping - use for polymorphic elements.
   */
  public type?: fhir.FhirString|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  public defaultValue?: (fhir.FhirBase64Binary|fhir.FhirBoolean|fhir.FhirCanonical|fhir.FhirCode|fhir.FhirDate|fhir.FhirDateTime|fhir.FhirDecimal|fhir.FhirId|fhir.FhirInstant|fhir.FhirInteger|fhir.FhirMarkdown|fhir.FhirOid|fhir.FhirPositiveInt|fhir.FhirString|fhir.FhirTime|fhir.FhirUnsignedInt|fhir.FhirUri|fhir.FhirUrl|fhir.FhirUuid|fhir.Address|fhir.Age|fhir.Annotation|fhir.Attachment|fhir.CodeableConcept|fhir.Coding|fhir.ContactPoint|fhir.Count|fhir.Distance|fhir.Duration|fhir.HumanName|fhir.Identifier|fhir.Money|fhir.Period|fhir.Quantity|fhir.Range|fhir.Ratio|fhir.Reference|fhir.SampledData|fhir.Signature|fhir.Timing|fhir.ContactDetail|fhir.Contributor|fhir.DataRequirement|fhir.Expression|fhir.ParameterDefinition|fhir.RelatedArtifact|fhir.TriggerDefinition|fhir.UsageContext|fhir.Dosage|fhir.Meta)|undefined;
  readonly __defaultValueIsChoice:true = true;
  /**
   * Optional field for this source.
   */
  public element?: fhir.FhirString|undefined;
  /**
   * How to handle the list mode for this element.
   */
  public listMode?: MapSourceListModeValueSetEnum|undefined;
  /**
   * Named context for field, if a field is specified.
   */
  public variable?: fhir.FhirId|undefined;
  /**
   * FHIRPath expression  - must be true or the rule does not apply.
   */
  public condition?: fhir.FhirString|undefined;
  /**
   * FHIRPath expression  - must be true or the mapping engine throws an error instead of completing.
   */
  public check?: fhir.FhirString|undefined;
  /**
   * This is typically used for recording that something Is not transformed to the target for some reason.
   */
  public logMessage?: fhir.FhirString|undefined;
  /**
   * Default constructor for StructureMapGroupRuleSource - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<StructureMapGroupRuleSourceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['context']) { this.context = new fhir.FhirId({value: source.context}); }
    else { this.context = null; }
    if (source['min']) { this.min = new fhir.FhirInteger({value: source.min}); }
    if (source['max']) { this.max = new fhir.FhirString({value: source.max}); }
    if (source['type']) { this.type = new fhir.FhirString({value: source.type}); }
    if (source['defaultValue']) { this.defaultValue = source.defaultValue; }
    else if (source['defaultValueBase64Binary']) { this.defaultValue = new fhir.FhirBase64Binary({value: source.defaultValueBase64Binary}); }
    else if (source['defaultValueBoolean']) { this.defaultValue = new fhir.FhirBoolean({value: source.defaultValueBoolean}); }
    else if (source['defaultValueCanonical']) { this.defaultValue = new fhir.FhirCanonical({value: source.defaultValueCanonical}); }
    else if (source['defaultValueCode']) { this.defaultValue = new fhir.FhirCode({value: source.defaultValueCode}); }
    else if (source['defaultValueDate']) { this.defaultValue = new fhir.FhirDate({value: source.defaultValueDate}); }
    else if (source['defaultValueDateTime']) { this.defaultValue = new fhir.FhirDateTime({value: source.defaultValueDateTime}); }
    else if (source['defaultValueDecimal']) { this.defaultValue = new fhir.FhirDecimal({value: source.defaultValueDecimal}); }
    else if (source['defaultValueId']) { this.defaultValue = new fhir.FhirId({value: source.defaultValueId}); }
    else if (source['defaultValueInstant']) { this.defaultValue = new fhir.FhirInstant({value: source.defaultValueInstant}); }
    else if (source['defaultValueInteger']) { this.defaultValue = new fhir.FhirInteger({value: source.defaultValueInteger}); }
    else if (source['defaultValueMarkdown']) { this.defaultValue = new fhir.FhirMarkdown({value: source.defaultValueMarkdown}); }
    else if (source['defaultValueOid']) { this.defaultValue = new fhir.FhirOid({value: source.defaultValueOid}); }
    else if (source['defaultValuePositiveInt']) { this.defaultValue = new fhir.FhirPositiveInt({value: source.defaultValuePositiveInt}); }
    else if (source['defaultValueString']) { this.defaultValue = new fhir.FhirString({value: source.defaultValueString}); }
    else if (source['defaultValueTime']) { this.defaultValue = new fhir.FhirTime({value: source.defaultValueTime}); }
    else if (source['defaultValueUnsignedInt']) { this.defaultValue = new fhir.FhirUnsignedInt({value: source.defaultValueUnsignedInt}); }
    else if (source['defaultValueUri']) { this.defaultValue = new fhir.FhirUri({value: source.defaultValueUri}); }
    else if (source['defaultValueUrl']) { this.defaultValue = new fhir.FhirUrl({value: source.defaultValueUrl}); }
    else if (source['defaultValueUuid']) { this.defaultValue = new fhir.FhirUuid({value: source.defaultValueUuid}); }
    else if (source['defaultValueAddress']) { this.defaultValue = new fhir.Address(source.defaultValueAddress); }
    else if (source['defaultValueAge']) { this.defaultValue = new fhir.Age(source.defaultValueAge); }
    else if (source['defaultValueAnnotation']) { this.defaultValue = new fhir.Annotation(source.defaultValueAnnotation); }
    else if (source['defaultValueAttachment']) { this.defaultValue = new fhir.Attachment(source.defaultValueAttachment); }
    else if (source['defaultValueCodeableConcept']) { this.defaultValue = new fhir.CodeableConcept(source.defaultValueCodeableConcept); }
    else if (source['defaultValueCoding']) { this.defaultValue = new fhir.Coding(source.defaultValueCoding); }
    else if (source['defaultValueContactPoint']) { this.defaultValue = new fhir.ContactPoint(source.defaultValueContactPoint); }
    else if (source['defaultValueCount']) { this.defaultValue = new fhir.Count(source.defaultValueCount); }
    else if (source['defaultValueDistance']) { this.defaultValue = new fhir.Distance(source.defaultValueDistance); }
    else if (source['defaultValueDuration']) { this.defaultValue = new fhir.Duration(source.defaultValueDuration); }
    else if (source['defaultValueHumanName']) { this.defaultValue = new fhir.HumanName(source.defaultValueHumanName); }
    else if (source['defaultValueIdentifier']) { this.defaultValue = new fhir.Identifier(source.defaultValueIdentifier); }
    else if (source['defaultValueMoney']) { this.defaultValue = new fhir.Money(source.defaultValueMoney); }
    else if (source['defaultValuePeriod']) { this.defaultValue = new fhir.Period(source.defaultValuePeriod); }
    else if (source['defaultValueQuantity']) { this.defaultValue = new fhir.Quantity(source.defaultValueQuantity); }
    else if (source['defaultValueRange']) { this.defaultValue = new fhir.Range(source.defaultValueRange); }
    else if (source['defaultValueRatio']) { this.defaultValue = new fhir.Ratio(source.defaultValueRatio); }
    else if (source['defaultValueReference']) { this.defaultValue = new fhir.Reference(source.defaultValueReference); }
    else if (source['defaultValueSampledData']) { this.defaultValue = new fhir.SampledData(source.defaultValueSampledData); }
    else if (source['defaultValueSignature']) { this.defaultValue = new fhir.Signature(source.defaultValueSignature); }
    else if (source['defaultValueTiming']) { this.defaultValue = new fhir.Timing(source.defaultValueTiming); }
    else if (source['defaultValueContactDetail']) { this.defaultValue = new fhir.ContactDetail(source.defaultValueContactDetail); }
    else if (source['defaultValueContributor']) { this.defaultValue = new fhir.Contributor(source.defaultValueContributor); }
    else if (source['defaultValueDataRequirement']) { this.defaultValue = new fhir.DataRequirement(source.defaultValueDataRequirement); }
    else if (source['defaultValueExpression']) { this.defaultValue = new fhir.Expression(source.defaultValueExpression); }
    else if (source['defaultValueParameterDefinition']) { this.defaultValue = new fhir.ParameterDefinition(source.defaultValueParameterDefinition); }
    else if (source['defaultValueRelatedArtifact']) { this.defaultValue = new fhir.RelatedArtifact(source.defaultValueRelatedArtifact); }
    else if (source['defaultValueTriggerDefinition']) { this.defaultValue = new fhir.TriggerDefinition(source.defaultValueTriggerDefinition); }
    else if (source['defaultValueUsageContext']) { this.defaultValue = new fhir.UsageContext(source.defaultValueUsageContext); }
    else if (source['defaultValueDosage']) { this.defaultValue = new fhir.Dosage(source.defaultValueDosage); }
    else if (source['defaultValueMeta']) { this.defaultValue = new fhir.Meta(source.defaultValueMeta); }
    if (source['element']) { this.element = new fhir.FhirString({value: source.element}); }
    if (source['listMode']) { this.listMode = source.listMode; }
    if (source['variable']) { this.variable = new fhir.FhirId({value: source.variable}); }
    if (source['condition']) { this.condition = new fhir.FhirString({value: source.condition}); }
    if (source['check']) { this.check = new fhir.FhirString({value: source.check}); }
    if (source['logMessage']) { this.logMessage = new fhir.FhirString({value: source.logMessage}); }
  }
  /**
   * Required-bound Value Set for listMode
   */
  public static listModeRequiredValueSet():MapSourceListModeValueSetType {
    return MapSourceListModeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['context']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property context:fhir.FhirId fhir: StructureMap.group.rule.source.context:id", }));
    }
    if (this["context"]) { outcome.issue!.push(...this.context.doModelValidation().issue!); }
    if (this["min"]) { outcome.issue!.push(...this.min.doModelValidation().issue!); }
    if (this["max"]) { outcome.issue!.push(...this.max.doModelValidation().issue!); }
    if (this["type"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }
    if (this["element"]) { outcome.issue!.push(...this.element.doModelValidation().issue!); }
    if (this["variable"]) { outcome.issue!.push(...this.variable.doModelValidation().issue!); }
    if (this["condition"]) { outcome.issue!.push(...this.condition.doModelValidation().issue!); }
    if (this["check"]) { outcome.issue!.push(...this.check.doModelValidation().issue!); }
    if (this["logMessage"]) { outcome.issue!.push(...this.logMessage.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the StructureMapGroupRuleTargetParameter type.
 */
export interface StructureMapGroupRuleTargetParameterArgs extends fhir.BackboneElementArgs {
  /**
   * Parameter value - variable or literal.
   */
  value?: fhir.FhirId|fhir.FhirString|fhir.FhirBoolean|fhir.FhirInteger|fhir.FhirDecimal|undefined;
  /**
   * Parameter value - variable or literal.
   */
  valueId?: fhir.FhirId|string|undefined;
  /**
   * Parameter value - variable or literal.
   */
  valueString?: fhir.FhirString|string|undefined;
  /**
   * Parameter value - variable or literal.
   */
  valueBoolean?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Parameter value - variable or literal.
   */
  valueInteger?: fhir.FhirInteger|number|undefined;
  /**
   * Parameter value - variable or literal.
   */
  valueDecimal?: fhir.FhirDecimal|number|undefined;
}

/**
 * Parameters to the transform.
 */
export class StructureMapGroupRuleTargetParameter extends fhir.BackboneElement {
  readonly __dataType:string = 'StructureMapGroupRuleTargetParameter';
  /**
   * Parameter value - variable or literal.
   */
  public value: (fhir.FhirId|fhir.FhirString|fhir.FhirBoolean|fhir.FhirInteger|fhir.FhirDecimal)|null;
  readonly __valueIsChoice:true = true;
  /**
   * Default constructor for StructureMapGroupRuleTargetParameter - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<StructureMapGroupRuleTargetParameterArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['value']) { this.value = source.value; }
    else if (source['valueId']) { this.value = new fhir.FhirId({value: source.valueId}); }
    else if (source['valueString']) { this.value = new fhir.FhirString({value: source.valueString}); }
    else if (source['valueBoolean']) { this.value = new fhir.FhirBoolean({value: source.valueBoolean}); }
    else if (source['valueInteger']) { this.value = new fhir.FhirInteger({value: source.valueInteger}); }
    else if (source['valueDecimal']) { this.value = new fhir.FhirDecimal({value: source.valueDecimal}); }
    else { this.value = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['value']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property value: fhir: StructureMap.group.rule.target.parameter.value[x]:", }));
    }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the StructureMapGroupRuleTarget type.
 */
export interface StructureMapGroupRuleTargetArgs extends fhir.BackboneElementArgs {
  /**
   * Type or variable this rule applies to.
   */
  context?: fhir.FhirId|string|undefined;
  /**
   * How to interpret the context.
   */
  contextType?: MapContextTypeValueSetEnum|undefined;
  /**
   * Field to create in the context.
   */
  element?: fhir.FhirString|string|undefined;
  /**
   * Named context for field, if desired, and a field is specified.
   */
  variable?: fhir.FhirId|string|undefined;
  /**
   * If field is a list, how to manage the list.
   */
  listMode?: MapTargetListModeValueSetEnum[]|undefined;
  /**
   * Internal rule reference for shared list items.
   */
  listRuleId?: fhir.FhirId|string|undefined;
  /**
   * How the data is copied / created.
   */
  transform?: MapTransformValueSetEnum|undefined;
  /**
   * Parameters to the transform.
   */
  parameter?: fhir.StructureMapGroupRuleTargetParameterArgs[]|undefined;
}

/**
 * Content to create because of this mapping rule.
 */
export class StructureMapGroupRuleTarget extends fhir.BackboneElement {
  readonly __dataType:string = 'StructureMapGroupRuleTarget';
  /**
   * Type or variable this rule applies to.
   */
  public context?: fhir.FhirId|undefined;
  /**
   * How to interpret the context.
   */
  public contextType?: MapContextTypeValueSetEnum|undefined;
  /**
   * Field to create in the context.
   */
  public element?: fhir.FhirString|undefined;
  /**
   * Named context for field, if desired, and a field is specified.
   */
  public variable?: fhir.FhirId|undefined;
  /**
   * If field is a list, how to manage the list.
   */
  public listMode?: MapTargetListModeValueSetEnum[]|undefined = [];
  /**
   * Internal rule reference for shared list items.
   */
  public listRuleId?: fhir.FhirId|undefined;
  /**
   * How the data is copied / created.
   */
  public transform?: MapTransformValueSetEnum|undefined;
  /**
   * Parameters to the transform.
   */
  public parameter?: fhir.StructureMapGroupRuleTargetParameter[]|undefined = [];
  /**
   * Default constructor for StructureMapGroupRuleTarget - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<StructureMapGroupRuleTargetArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['context']) { this.context = new fhir.FhirId({value: source.context}); }
    if (source['contextType']) { this.contextType = source.contextType; }
    if (source['element']) { this.element = new fhir.FhirString({value: source.element}); }
    if (source['variable']) { this.variable = new fhir.FhirId({value: source.variable}); }
    if (source['listMode']) { this.listMode = source.listMode.map((x) => x); }
    if (source['listRuleId']) { this.listRuleId = new fhir.FhirId({value: source.listRuleId}); }
    if (source['transform']) { this.transform = source.transform; }
    if (source['parameter']) { this.parameter = source.parameter.map((x) => new fhir.StructureMapGroupRuleTargetParameter(x)); }
  }
  /**
   * Required-bound Value Set for contextType
   */
  public static contextTypeRequiredValueSet():MapContextTypeValueSetType {
    return MapContextTypeValueSet;
  }
  /**
   * Required-bound Value Set for listMode
   */
  public static listModeRequiredValueSet():MapTargetListModeValueSetType {
    return MapTargetListModeValueSet;
  }
  /**
   * Required-bound Value Set for transform
   */
  public static transformRequiredValueSet():MapTransformValueSetType {
    return MapTransformValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["context"]) { outcome.issue!.push(...this.context.doModelValidation().issue!); }
    if (this["element"]) { outcome.issue!.push(...this.element.doModelValidation().issue!); }
    if (this["variable"]) { outcome.issue!.push(...this.variable.doModelValidation().issue!); }
    if (this["listRuleId"]) { outcome.issue!.push(...this.listRuleId.doModelValidation().issue!); }
    if (this["parameter"]) { this.parameter.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the StructureMapGroupRuleDependent type.
 */
export interface StructureMapGroupRuleDependentArgs extends fhir.BackboneElementArgs {
  /**
   * Name of a rule or group to apply.
   */
  name: fhir.FhirId|string|undefined;
  /**
   * Variable to pass to the rule or group.
   */
  variable: fhir.FhirString[]|string[]|undefined;
}

/**
 * Which other rules to apply in the context of this rule.
 */
export class StructureMapGroupRuleDependent extends fhir.BackboneElement {
  readonly __dataType:string = 'StructureMapGroupRuleDependent';
  /**
   * Name of a rule or group to apply.
   */
  public name: fhir.FhirId|null;
  /**
   * Variable to pass to the rule or group.
   */
  public variable: fhir.FhirString[]|null = [];
  /**
   * Default constructor for StructureMapGroupRuleDependent - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<StructureMapGroupRuleDependentArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['name']) { this.name = new fhir.FhirId({value: source.name}); }
    else { this.name = null; }
    if (source['variable']) { this.variable = source.variable.map((x) => new fhir.FhirString({value: x})); }
    else { this.variable = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['name']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property name:fhir.FhirId fhir: StructureMap.group.rule.dependent.name:id", }));
    }
    if (this["name"]) { outcome.issue!.push(...this.name.doModelValidation().issue!); }
    if (!this['variable']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property variable:fhir.FhirString[] fhir: StructureMap.group.rule.dependent.variable:string", }));
    } else if (!Array.isArray(this.variable)) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue,  diagnostics: "Found scalar in array property variable:fhir.FhirString[] fhir: StructureMap.group.rule.dependent.variable:string", }));
    } else if (this.variable.length === 0) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property variable:fhir.FhirString[] fhir: StructureMap.group.rule.dependent.variable:string", }));
    }
    if (this["variable"]) { this.variable.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the StructureMapGroupRule type.
 */
export interface StructureMapGroupRuleArgs extends fhir.BackboneElementArgs {
  /**
   * Name of the rule for internal references.
   */
  name: fhir.FhirId|string|undefined;
  /**
   * Source inputs to the mapping.
   */
  source: fhir.StructureMapGroupRuleSourceArgs[]|null;
  /**
   * Content to create because of this mapping rule.
   */
  target?: fhir.StructureMapGroupRuleTargetArgs[]|undefined;
  /**
   * Rules contained in this rule.
   */
  rule?: fhir.StructureMapGroupRuleArgs[]|undefined;
  /**
   * Which other rules to apply in the context of this rule.
   */
  dependent?: fhir.StructureMapGroupRuleDependentArgs[]|undefined;
  /**
   * Documentation for this instance of data.
   */
  documentation?: fhir.FhirString|string|undefined;
}

/**
 * Transform Rule from source to target.
 */
export class StructureMapGroupRule extends fhir.BackboneElement {
  readonly __dataType:string = 'StructureMapGroupRule';
  /**
   * Name of the rule for internal references.
   */
  public name: fhir.FhirId|null;
  /**
   * Source inputs to the mapping.
   */
  public source: fhir.StructureMapGroupRuleSource[]|null = [];
  /**
   * Content to create because of this mapping rule.
   */
  public target?: fhir.StructureMapGroupRuleTarget[]|undefined = [];
  /**
   * Rules contained in this rule.
   */
  public rule?: fhir.StructureMapGroupRule[]|undefined = [];
  /**
   * Which other rules to apply in the context of this rule.
   */
  public dependent?: fhir.StructureMapGroupRuleDependent[]|undefined = [];
  /**
   * Documentation for this instance of data.
   */
  public documentation?: fhir.FhirString|undefined;
  /**
   * Default constructor for StructureMapGroupRule - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<StructureMapGroupRuleArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['name']) { this.name = new fhir.FhirId({value: source.name}); }
    else { this.name = null; }
    if (source['source']) { this.source = source.source.map((x) => new fhir.StructureMapGroupRuleSource(x)); }
    else { this.source = null; }
    if (source['target']) { this.target = source.target.map((x) => new fhir.StructureMapGroupRuleTarget(x)); }
    if (source['rule']) { this.rule = source.rule.map((x) => new fhir.StructureMapGroupRule(x)); }
    if (source['dependent']) { this.dependent = source.dependent.map((x) => new fhir.StructureMapGroupRuleDependent(x)); }
    if (source['documentation']) { this.documentation = new fhir.FhirString({value: source.documentation}); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['name']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property name:fhir.FhirId fhir: StructureMap.group.rule.name:id", }));
    }
    if (this["name"]) { outcome.issue!.push(...this.name.doModelValidation().issue!); }
    if (!this['source']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property source:fhir.StructureMapGroupRuleSource[] fhir: StructureMap.group.rule.source:source", }));
    } else if (!Array.isArray(this.source)) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue,  diagnostics: "Found scalar in array property source:fhir.StructureMapGroupRuleSource[] fhir: StructureMap.group.rule.source:source", }));
    } else if (this.source.length === 0) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property source:fhir.StructureMapGroupRuleSource[] fhir: StructureMap.group.rule.source:source", }));
    }
    if (this["source"]) { this.source.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["target"]) { this.target.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["rule"]) { this.rule.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["dependent"]) { this.dependent.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["documentation"]) { outcome.issue!.push(...this.documentation.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the StructureMapGroup type.
 */
export interface StructureMapGroupArgs extends fhir.BackboneElementArgs {
  /**
   * A unique name for the group for the convenience of human readers.
   */
  name: fhir.FhirId|string|undefined;
  /**
   * Another group that this group adds rules to.
   */
  extends?: fhir.FhirId|string|undefined;
  /**
   * Not applicable if the underlying model is untyped. There can only be one default mapping for any particular type combination.
   */
  typeMode: MapGroupTypeModeValueSetEnum|null;
  /**
   * Additional supporting documentation that explains the purpose of the group and the types of mappings within it.
   */
  documentation?: fhir.FhirString|string|undefined;
  /**
   * If no inputs are named, then the entry mappings are type based.
   */
  input: fhir.StructureMapGroupInputArgs[]|null;
  /**
   * Transform Rule from source to target.
   */
  rule: fhir.StructureMapGroupRuleArgs[]|null;
}

/**
 * Organizes the mapping into manageable chunks for human review/ease of maintenance.
 */
export class StructureMapGroup extends fhir.BackboneElement {
  readonly __dataType:string = 'StructureMapGroup';
  /**
   * A unique name for the group for the convenience of human readers.
   */
  public name: fhir.FhirId|null;
  /**
   * Another group that this group adds rules to.
   */
  public extends?: fhir.FhirId|undefined;
  /**
   * Not applicable if the underlying model is untyped. There can only be one default mapping for any particular type combination.
   */
  public typeMode: MapGroupTypeModeValueSetEnum|null;
  /**
   * Additional supporting documentation that explains the purpose of the group and the types of mappings within it.
   */
  public documentation?: fhir.FhirString|undefined;
  /**
   * If no inputs are named, then the entry mappings are type based.
   */
  public input: fhir.StructureMapGroupInput[]|null = [];
  /**
   * Transform Rule from source to target.
   */
  public rule: fhir.StructureMapGroupRule[]|null = [];
  /**
   * Default constructor for StructureMapGroup - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<StructureMapGroupArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['name']) { this.name = new fhir.FhirId({value: source.name}); }
    else { this.name = null; }
    if (source['extends']) { this.extends = new fhir.FhirId({value: source.extends}); }
    if (source['typeMode']) { this.typeMode = source.typeMode; }
    else { this.typeMode = null; }
    if (source['documentation']) { this.documentation = new fhir.FhirString({value: source.documentation}); }
    if (source['input']) { this.input = source.input.map((x) => new fhir.StructureMapGroupInput(x)); }
    else { this.input = null; }
    if (source['rule']) { this.rule = source.rule.map((x) => new fhir.StructureMapGroupRule(x)); }
    else { this.rule = null; }
  }
  /**
   * Required-bound Value Set for typeMode
   */
  public static typeModeRequiredValueSet():MapGroupTypeModeValueSetType {
    return MapGroupTypeModeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['name']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property name:fhir.FhirId fhir: StructureMap.group.name:id", }));
    }
    if (this["name"]) { outcome.issue!.push(...this.name.doModelValidation().issue!); }
    if (this["extends"]) { outcome.issue!.push(...this.extends.doModelValidation().issue!); }
    if (!this['typeMode']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property typeMode:MapGroupTypeModeValueSetEnum fhir: StructureMap.group.typeMode:code", }));
    }
    if (this["documentation"]) { outcome.issue!.push(...this.documentation.doModelValidation().issue!); }
    if (!this['input']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property input:fhir.StructureMapGroupInput[] fhir: StructureMap.group.input:input", }));
    } else if (!Array.isArray(this.input)) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue,  diagnostics: "Found scalar in array property input:fhir.StructureMapGroupInput[] fhir: StructureMap.group.input:input", }));
    } else if (this.input.length === 0) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property input:fhir.StructureMapGroupInput[] fhir: StructureMap.group.input:input", }));
    }
    if (this["input"]) { this.input.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (!this['rule']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property rule:fhir.StructureMapGroupRule[] fhir: StructureMap.group.rule:rule", }));
    } else if (!Array.isArray(this.rule)) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue,  diagnostics: "Found scalar in array property rule:fhir.StructureMapGroupRule[] fhir: StructureMap.group.rule:rule", }));
    } else if (this.rule.length === 0) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property rule:fhir.StructureMapGroupRule[] fhir: StructureMap.group.rule:rule", }));
    }
    if (this["rule"]) { this.rule.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the StructureMap type.
 */
export interface StructureMapArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "StructureMap"|undefined;
  /**
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url: fhir.FhirUri|string|undefined;
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this structure map outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * There may be different structure map instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the structure map with the format [url]|[version].
   */
  version?: fhir.FhirString|string|undefined;
  /**
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name: fhir.FhirString|string|undefined;
  /**
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: fhir.FhirString|string|undefined;
  /**
   * Allows filtering of structure maps that are appropriate for use versus not.
   */
  status: PublicationStatusValueSetEnum|null;
  /**
   * Allows filtering of structure maps that are appropriate for use versus not.
   */
  experimental?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the structure map. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: fhir.FhirDateTime|string|undefined;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the structure map is the organization or individual primarily responsible for the maintenance and upkeep of the structure map. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the structure map. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: fhir.FhirString|string|undefined;
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: fhir.ContactDetailArgs[]|undefined;
  /**
   * This description can be used to capture details such as why the structure map was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the structure map as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the structure map is presumed to be the predominant language in the place the structure map was created).
   */
  description?: fhir.FhirMarkdown|string|undefined;
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: fhir.UsageContextArgs[]|undefined;
  /**
   * It may be possible for the structure map to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * This element does not describe the usage of the structure map. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this structure map.
   */
  purpose?: fhir.FhirMarkdown|string|undefined;
  /**
   * A copyright statement relating to the structure map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure map.
   */
  copyright?: fhir.FhirMarkdown|string|undefined;
  /**
   * It is not necessary for a structure map to identify any dependent structures, though not listing them may restrict its usefulness.
   */
  structure?: fhir.StructureMapStructureArgs[]|undefined;
  /**
   * Other maps used by this map (canonical URLs).
   */
  import?: fhir.FhirCanonical[]|string[]|undefined;
  /**
   * Organizes the mapping into manageable chunks for human review/ease of maintenance.
   */
  group: fhir.StructureMapGroupArgs[]|null;
}

/**
 * A Map of relationships between 2 structures that can be used to transform data.
 */
export class StructureMap extends fhir.DomainResource {
  readonly __dataType:string = 'StructureMap';
  /**
   * Resource Type Name
   */
  public resourceType: "StructureMap";
  /**
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  public url: fhir.FhirUri|null;
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this structure map outside of FHIR, where it is not possible to use the logical URI.
   */
  public identifier?: fhir.Identifier[]|undefined = [];
  /**
   * There may be different structure map instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the structure map with the format [url]|[version].
   */
  public version?: fhir.FhirString|undefined;
  /**
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  public name: fhir.FhirString|null;
  /**
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  public title?: fhir.FhirString|undefined;
  /**
   * Allows filtering of structure maps that are appropriate for use versus not.
   */
  public status: PublicationStatusValueSetEnum|null;
  /**
   * Allows filtering of structure maps that are appropriate for use versus not.
   */
  public experimental?: fhir.FhirBoolean|undefined;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the structure map. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  public date?: fhir.FhirDateTime|undefined;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the structure map is the organization or individual primarily responsible for the maintenance and upkeep of the structure map. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the structure map. This item SHOULD be populated unless the information is available from context.
   */
  public publisher?: fhir.FhirString|undefined;
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  public contact?: fhir.ContactDetail[]|undefined = [];
  /**
   * This description can be used to capture details such as why the structure map was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the structure map as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the structure map is presumed to be the predominant language in the place the structure map was created).
   */
  public description?: fhir.FhirMarkdown|undefined;
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  public useContext?: fhir.UsageContext[]|undefined = [];
  /**
   * It may be possible for the structure map to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  public jurisdiction?: fhir.CodeableConcept[]|undefined = [];
  /**
   * This element does not describe the usage of the structure map. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this structure map.
   */
  public purpose?: fhir.FhirMarkdown|undefined;
  /**
   * A copyright statement relating to the structure map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure map.
   */
  public copyright?: fhir.FhirMarkdown|undefined;
  /**
   * It is not necessary for a structure map to identify any dependent structures, though not listing them may restrict its usefulness.
   */
  public structure?: fhir.StructureMapStructure[]|undefined = [];
  /**
   * Other maps used by this map (canonical URLs).
   */
  public import?: fhir.FhirCanonical[]|undefined = [];
  /**
   * Organizes the mapping into manageable chunks for human review/ease of maintenance.
   */
  public group: fhir.StructureMapGroup[]|null = [];
  /**
   * Default constructor for StructureMap - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<StructureMapArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'StructureMap';
    if (source['url']) { this.url = new fhir.FhirUri({value: source.url}); }
    else { this.url = null; }
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['version']) { this.version = new fhir.FhirString({value: source.version}); }
    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }
    else { this.name = null; }
    if (source['title']) { this.title = new fhir.FhirString({value: source.title}); }
    if (source['status']) { this.status = source.status; }
    else { this.status = null; }
    if (source['experimental']) { this.experimental = new fhir.FhirBoolean({value: source.experimental}); }
    if (source['date']) { this.date = new fhir.FhirDateTime({value: source.date}); }
    if (source['publisher']) { this.publisher = new fhir.FhirString({value: source.publisher}); }
    if (source['contact']) { this.contact = source.contact.map((x) => new fhir.ContactDetail(x)); }
    if (source['description']) { this.description = new fhir.FhirMarkdown({value: source.description}); }
    if (source['useContext']) { this.useContext = source.useContext.map((x) => new fhir.UsageContext(x)); }
    if (source['jurisdiction']) { this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x)); }
    if (source['purpose']) { this.purpose = new fhir.FhirMarkdown({value: source.purpose}); }
    if (source['copyright']) { this.copyright = new fhir.FhirMarkdown({value: source.copyright}); }
    if (source['structure']) { this.structure = source.structure.map((x) => new fhir.StructureMapStructure(x)); }
    if (source['import']) { this.import = source.import.map((x) => new fhir.FhirCanonical({value: x})); }
    if (source['group']) { this.group = source.group.map((x) => new fhir.StructureMapGroup(x)); }
    else { this.group = null; }
  }
  /**
   * Required-bound Value Set for status
   */
  public static statusRequiredValueSet():PublicationStatusValueSetType {
    return PublicationStatusValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['resourceType']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property resourceType:'StructureMap' fhir: StructureMap.resourceType:'StructureMap'", }));
    }
    if (!this['url']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property url:fhir.FhirUri fhir: StructureMap.url:uri", }));
    }
    if (this["url"]) { outcome.issue!.push(...this.url.doModelValidation().issue!); }
    if (this["identifier"]) { this.identifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["version"]) { outcome.issue!.push(...this.version.doModelValidation().issue!); }
    if (!this['name']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property name:fhir.FhirString fhir: StructureMap.name:string", }));
    }
    if (this["name"]) { outcome.issue!.push(...this.name.doModelValidation().issue!); }
    if (this["title"]) { outcome.issue!.push(...this.title.doModelValidation().issue!); }
    if (!this['status']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property status:PublicationStatusValueSetEnum fhir: StructureMap.status:code", }));
    }
    if (this["experimental"]) { outcome.issue!.push(...this.experimental.doModelValidation().issue!); }
    if (this["date"]) { outcome.issue!.push(...this.date.doModelValidation().issue!); }
    if (this["publisher"]) { outcome.issue!.push(...this.publisher.doModelValidation().issue!); }
    if (this["contact"]) { this.contact.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["description"]) { outcome.issue!.push(...this.description.doModelValidation().issue!); }
    if (this["useContext"]) { this.useContext.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["jurisdiction"]) { this.jurisdiction.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["purpose"]) { outcome.issue!.push(...this.purpose.doModelValidation().issue!); }
    if (this["copyright"]) { outcome.issue!.push(...this.copyright.doModelValidation().issue!); }
    if (this["structure"]) { this.structure.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["import"]) { this.import.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (!this['group']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property group:fhir.StructureMapGroup[] fhir: StructureMap.group:group", }));
    } else if (!Array.isArray(this.group)) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue,  diagnostics: "Found scalar in array property group:fhir.StructureMapGroup[] fhir: StructureMap.group:group", }));
    } else if (this.group.length === 0) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property group:fhir.StructureMapGroup[] fhir: StructureMap.group:group", }));
    }
    if (this["group"]) { this.group.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
