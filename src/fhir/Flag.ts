// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Flag

import * as fhir from '../fhir.js'

import { FlagStatusValueSet, FlagStatusValueSetType, FlagStatusValueSetEnum } from '../fhirValueSets/FlagStatusValueSet.js'
import { FlagCategoryValueSet, FlagCategoryValueSetType, FlagCategoryValueSetEnum } from '../fhirValueSets/FlagCategoryValueSet.js'
import { FlagCodeValueSet, FlagCodeValueSetType, FlagCodeValueSetEnum } from '../fhirValueSets/FlagCodeValueSet.js'

/**
 * Prospective warnings of potential issues when providing care to the patient.
 */
export type IFlag = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "Flag";
  /**
   * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: FlagStatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: Flag.status
   */
  _status?: fhir.IFhirElement|undefined;
  /**
   * The value set will often need to be adjusted based on local business rules and usage context.
   */
  category?: fhir.ICodeableConcept[]|undefined;
  /**
   * If non-coded, use CodeableConcept.text.  This element should always be included in the narrative.
   */
  code: fhir.ICodeableConcept|null;
  /**
   * The patient, location, group, organization, or practitioner etc. this is about record this flag is associated with.
   */
  subject: fhir.IReference|null;
  /**
   * The period of time from the activation of the flag to inactivation of the flag. If the flag is active, the end of the period should be unspecified.
   */
  period?: fhir.IPeriod|undefined;
  /**
   * If both Flag.encounter and Flag.period are valued, then Flag.period.start shall not be before Encounter.period.start and Flag.period.end shall not be after Encounter.period.end.
   */
  encounter?: fhir.IReference|undefined;
  /**
   * The person, organization or device that created the flag.
   */
  author?: fhir.IReference|undefined;
}

/**
 * Prospective warnings of potential issues when providing care to the patient.
 */
export class Flag extends fhir.DomainResource implements IFlag {
  /**
   * Resource Type Name
   */
  public resourceType: "Flag";
  /**
   * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  public status: FlagStatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: Flag.status
   */
  public _status?: fhir.FhirElement|undefined;
  /**
   * The value set will often need to be adjusted based on local business rules and usage context.
   */
  public category?: fhir.CodeableConcept[]|undefined;
  /**
   * If non-coded, use CodeableConcept.text.  This element should always be included in the narrative.
   */
  public code: fhir.CodeableConcept|null;
  /**
   * The patient, location, group, organization, or practitioner etc. this is about record this flag is associated with.
   */
  public subject: fhir.Reference|null;
  /**
   * The period of time from the activation of the flag to inactivation of the flag. If the flag is active, the end of the period should be unspecified.
   */
  public period?: fhir.Period|undefined;
  /**
   * If both Flag.encounter and Flag.period are valued, then Flag.period.start shall not be before Encounter.period.start and Flag.period.end shall not be after Encounter.period.end.
   */
  public encounter?: fhir.Reference|undefined;
  /**
   * The person, organization or device that created the flag.
   */
  public author?: fhir.Reference|undefined;
  /**
   * Default constructor for Flag - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IFlag> = { }) {
    super(source);
    this.resourceType = 'Flag';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['status']) { this.status = source.status; }
    else { this.status = null; }
    if (source['_status']) { this._status = new fhir.FhirElement(source._status!); }
    if (source['category']) { this.category = source.category.map((x) => new fhir.CodeableConcept(x)); }
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code!); }
    else { this.code = null; }
    if (source['subject']) { this.subject = new fhir.Reference(source.subject!); }
    else { this.subject = null; }
    if (source['period']) { this.period = new fhir.Period(source.period!); }
    if (source['encounter']) { this.encounter = new fhir.Reference(source.encounter!); }
    if (source['author']) { this.author = new fhir.Reference(source.author!); }
  }
  /**
   * Required-bound Value Set for status
   */
  public static statusRequiredValueSet():FlagStatusValueSetType {
    return FlagStatusValueSet;
  }
  /**
   * Example-bound Value Set for category
   */
  public static categoryExampleValueSet():FlagCategoryValueSetType {
    return FlagCategoryValueSet;
  }
  /**
   * Example-bound Value Set for code
   */
  public static codeExampleValueSet():FlagCodeValueSetType {
    return FlagCodeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: Flag.resourceType']); }
    if (this["identifier"]) { this.identifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (!this["status"]) { results.push(["status",'Missing required element: Flag.status']); }
    if (this["_status"]) { results.push(...this._status.doModelValidation()); }
    if (this["category"]) { this.category.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (!this["code"]) { results.push(["code",'Missing required element: Flag.code']); }
    if (this["code"]) { results.push(...this.code.doModelValidation()); }
    if (!this["subject"]) { results.push(["subject",'Missing required element: Flag.subject']); }
    if (this["subject"]) { results.push(...this.subject.doModelValidation()); }
    if (this["period"]) { results.push(...this.period.doModelValidation()); }
    if (this["encounter"]) { results.push(...this.encounter.doModelValidation()); }
    if (this["author"]) { results.push(...this.author.doModelValidation()); }
    return results;
  }
}
