// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Location

import * as fhir from '../fhir.js'

import { DaysOfWeekValueSet, DaysOfWeekValueSetType, DaysOfWeekValueSetEnum } from '../fhirValueSets/DaysOfWeekValueSet.js'
import { LocationStatusValueSet, LocationStatusValueSetType, LocationStatusValueSetEnum } from '../fhirValueSets/LocationStatusValueSet.js'
import { V20116ValueSet, V20116ValueSetType, V20116ValueSetEnum } from '../fhirValueSets/V20116ValueSet.js'
import { LocationModeValueSet, LocationModeValueSetType, LocationModeValueSetEnum } from '../fhirValueSets/LocationModeValueSet.js'
import { V3ServiceDeliveryLocationRoleTypeValueSet, V3ServiceDeliveryLocationRoleTypeValueSetType, V3ServiceDeliveryLocationRoleTypeValueSetEnum } from '../fhirValueSets/V3ServiceDeliveryLocationRoleTypeValueSet.js'
import { LocationPhysicalTypeValueSet, LocationPhysicalTypeValueSetType, LocationPhysicalTypeValueSetEnum } from '../fhirValueSets/LocationPhysicalTypeValueSet.js'

/**
 * The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).
 */
export type ILocationPosition = fhir.IBackboneElement & { 
  /**
   * Longitude. The value domain and the interpretation are the same as for the text of the longitude element in KML (see notes below).
   */
  longitude: number|null;
  /**
   * Extended properties for primitive element: Location.position.longitude
   */
  _longitude?: fhir.IFhirElement|undefined;
  /**
   * Latitude. The value domain and the interpretation are the same as for the text of the latitude element in KML (see notes below).
   */
  latitude: number|null;
  /**
   * Extended properties for primitive element: Location.position.latitude
   */
  _latitude?: fhir.IFhirElement|undefined;
  /**
   * Altitude. The value domain and the interpretation are the same as for the text of the altitude element in KML (see notes below).
   */
  altitude?: number|undefined;
  /**
   * Extended properties for primitive element: Location.position.altitude
   */
  _altitude?: fhir.IFhirElement|undefined;
}

/**
 * This type of information is commonly found published in directories and on websites informing customers when the facility is available.
 * Specific services within the location may have their own hours which could be shorter (or longer) than the locations hours.
 */
export type ILocationHoursOfOperation = fhir.IBackboneElement & { 
  /**
   * Indicates which days of the week are available between the start and end Times.
   */
  daysOfWeek?: DaysOfWeekValueSetEnum[]|undefined;
  /**
   * Extended properties for primitive element: Location.hoursOfOperation.daysOfWeek
   */
  _daysOfWeek?: fhir.IFhirElement[]|undefined;
  /**
   * The Location is open all day.
   */
  allDay?: boolean|undefined;
  /**
   * Extended properties for primitive element: Location.hoursOfOperation.allDay
   */
  _allDay?: fhir.IFhirElement|undefined;
  /**
   * Time that the Location opens.
   */
  openingTime?: string|undefined;
  /**
   * Extended properties for primitive element: Location.hoursOfOperation.openingTime
   */
  _openingTime?: fhir.IFhirElement|undefined;
  /**
   * Time that the Location closes.
   */
  closingTime?: string|undefined;
  /**
   * Extended properties for primitive element: Location.hoursOfOperation.closingTime
   */
  _closingTime?: fhir.IFhirElement|undefined;
}

/**
 * Details and position information for a physical place where services are provided and resources and participants may be stored, found, contained, or accommodated.
 */
export type ILocation = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "Location";
  /**
   * Unique code or number identifying the location to its users.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * The status property covers the general availability of the resource, not the current value which may be covered by the operationStatus, or by a schedule/slots if they are configured for the location.
   */
  status?: LocationStatusValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: Location.status
   */
  _status?: fhir.IFhirElement|undefined;
  /**
   * The operational status covers operation values most relevant to beds (but can also apply to rooms/units/chairs/etc. such as an isolation unit/dialysis chair). This typically covers concepts such as contamination, housekeeping, and other activities like maintenance.
   */
  operationalStatus?: fhir.ICoding|undefined;
  /**
   * If the name of a location changes, consider putting the old name in the alias column so that it can still be located through searches.
   */
  name?: string|undefined;
  /**
   * Extended properties for primitive element: Location.name
   */
  _name?: fhir.IFhirElement|undefined;
  /**
   * There are no dates associated with the alias/historic names, as this is not intended to track when names were used, but to assist in searching so that older names can still result in identifying the location.
   */
  alias?: string[]|undefined;
  /**
   * Extended properties for primitive element: Location.alias
   */
  _alias?: fhir.IFhirElement[]|undefined;
  /**
   * Description of the Location, which helps in finding or referencing the place.
   */
  description?: string|undefined;
  /**
   * Extended properties for primitive element: Location.description
   */
  _description?: fhir.IFhirElement|undefined;
  /**
   * This is labeled as a modifier because whether or not the location is a class of locations changes how it can be used and understood.
   */
  mode?: LocationModeValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: Location.mode
   */
  _mode?: fhir.IFhirElement|undefined;
  /**
   * Indicates the type of function performed at the location.
   */
  type?: fhir.ICodeableConcept[]|undefined;
  /**
   * The contact details of communication devices available at the location. This can include phone numbers, fax numbers, mobile numbers, email addresses and web sites.
   */
  telecom?: fhir.IContactPoint[]|undefined;
  /**
   * Additional addresses should be recorded using another instance of the Location resource, or via the Organization.
   */
  address?: fhir.IAddress|undefined;
  /**
   * Physical form of the location, e.g. building, room, vehicle, road.
   */
  physicalType?: fhir.ICodeableConcept|undefined;
  /**
   * The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).
   */
  position?: fhir.ILocationPosition|undefined;
  /**
   * This can also be used as the part of the organization hierarchy where this location provides services. These services can be defined through the HealthcareService resource.
   */
  managingOrganization?: fhir.IReference|undefined;
  /**
   * Another Location of which this Location is physically a part of.
   */
  partOf?: fhir.IReference|undefined;
  /**
   * This type of information is commonly found published in directories and on websites informing customers when the facility is available.
   * Specific services within the location may have their own hours which could be shorter (or longer) than the locations hours.
   */
  hoursOfOperation?: fhir.ILocationHoursOfOperation[]|undefined;
  /**
   * A description of when the locations opening ours are different to normal, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as detailed in the opening hours Times.
   */
  availabilityExceptions?: string|undefined;
  /**
   * Extended properties for primitive element: Location.availabilityExceptions
   */
  _availabilityExceptions?: fhir.IFhirElement|undefined;
  /**
   * Technical endpoints providing access to services operated for the location.
   */
  endpoint?: fhir.IReference[]|undefined;
}

/**
 * The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).
 */
export class LocationPosition extends fhir.BackboneElement implements ILocationPosition {
  /**
   * Longitude. The value domain and the interpretation are the same as for the text of the longitude element in KML (see notes below).
   */
  public longitude: number|null;
  /**
   * Extended properties for primitive element: Location.position.longitude
   */
  public _longitude?: fhir.FhirElement|undefined;
  /**
   * Latitude. The value domain and the interpretation are the same as for the text of the latitude element in KML (see notes below).
   */
  public latitude: number|null;
  /**
   * Extended properties for primitive element: Location.position.latitude
   */
  public _latitude?: fhir.FhirElement|undefined;
  /**
   * Altitude. The value domain and the interpretation are the same as for the text of the altitude element in KML (see notes below).
   */
  public altitude?: number|undefined;
  /**
   * Extended properties for primitive element: Location.position.altitude
   */
  public _altitude?: fhir.FhirElement|undefined;
  /**
   * Default constructor for LocationPosition - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ILocationPosition> = { }) {
    super(source);
    if (source['longitude']) { this.longitude = source.longitude; }
    else { this.longitude = null; }
    if (source['_longitude']) { this._longitude = new fhir.FhirElement(source._longitude!); }
    if (source['latitude']) { this.latitude = source.latitude; }
    else { this.latitude = null; }
    if (source['_latitude']) { this._latitude = new fhir.FhirElement(source._latitude!); }
    if (source['altitude']) { this.altitude = source.altitude; }
    if (source['_altitude']) { this._altitude = new fhir.FhirElement(source._altitude!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["longitude"]) { results.push(["longitude",'Missing required element: Location.position.longitude']); }
    if (this["_longitude"]) { results.push(...this._longitude.doModelValidation()); }
    if (!this["latitude"]) { results.push(["latitude",'Missing required element: Location.position.latitude']); }
    if (this["_latitude"]) { results.push(...this._latitude.doModelValidation()); }
    if (this["_altitude"]) { results.push(...this._altitude.doModelValidation()); }
    return results;
  }
}

/**
 * This type of information is commonly found published in directories and on websites informing customers when the facility is available.
 * Specific services within the location may have their own hours which could be shorter (or longer) than the locations hours.
 */
export class LocationHoursOfOperation extends fhir.BackboneElement implements ILocationHoursOfOperation {
  /**
   * Indicates which days of the week are available between the start and end Times.
   */
  public daysOfWeek?: DaysOfWeekValueSetEnum[]|undefined;
  /**
   * Extended properties for primitive element: Location.hoursOfOperation.daysOfWeek
   */
  public _daysOfWeek?: fhir.FhirElement[]|undefined;
  /**
   * The Location is open all day.
   */
  public allDay?: boolean|undefined;
  /**
   * Extended properties for primitive element: Location.hoursOfOperation.allDay
   */
  public _allDay?: fhir.FhirElement|undefined;
  /**
   * Time that the Location opens.
   */
  public openingTime?: string|undefined;
  /**
   * Extended properties for primitive element: Location.hoursOfOperation.openingTime
   */
  public _openingTime?: fhir.FhirElement|undefined;
  /**
   * Time that the Location closes.
   */
  public closingTime?: string|undefined;
  /**
   * Extended properties for primitive element: Location.hoursOfOperation.closingTime
   */
  public _closingTime?: fhir.FhirElement|undefined;
  /**
   * Default constructor for LocationHoursOfOperation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ILocationHoursOfOperation> = { }) {
    super(source);
    if (source['daysOfWeek']) { this.daysOfWeek = source.daysOfWeek.map((x) => (x)); }
    if (source['_daysOfWeek']) { this._daysOfWeek = source._daysOfWeek.map((x) => new fhir.FhirElement(x)); }
    if (source['allDay']) { this.allDay = source.allDay; }
    if (source['_allDay']) { this._allDay = new fhir.FhirElement(source._allDay!); }
    if (source['openingTime']) { this.openingTime = source.openingTime; }
    if (source['_openingTime']) { this._openingTime = new fhir.FhirElement(source._openingTime!); }
    if (source['closingTime']) { this.closingTime = source.closingTime; }
    if (source['_closingTime']) { this._closingTime = new fhir.FhirElement(source._closingTime!); }
  }
  /**
   * Required-bound Value Set for daysOfWeek
   */
  public daysOfWeekRequiredValueSet():DaysOfWeekValueSetType {
    return DaysOfWeekValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["_daysOfWeek"]) { this._daysOfWeek.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_allDay"]) { results.push(...this._allDay.doModelValidation()); }
    if (this["_openingTime"]) { results.push(...this._openingTime.doModelValidation()); }
    if (this["_closingTime"]) { results.push(...this._closingTime.doModelValidation()); }
    return results;
  }
}

/**
 * Details and position information for a physical place where services are provided and resources and participants may be stored, found, contained, or accommodated.
 */
export class Location extends fhir.DomainResource implements ILocation {
  /**
   * Resource Type Name
   */
  public resourceType: "Location";
  /**
   * Unique code or number identifying the location to its users.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * The status property covers the general availability of the resource, not the current value which may be covered by the operationStatus, or by a schedule/slots if they are configured for the location.
   */
  public status?: LocationStatusValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: Location.status
   */
  public _status?: fhir.FhirElement|undefined;
  /**
   * The operational status covers operation values most relevant to beds (but can also apply to rooms/units/chairs/etc. such as an isolation unit/dialysis chair). This typically covers concepts such as contamination, housekeeping, and other activities like maintenance.
   */
  public operationalStatus?: fhir.Coding|undefined;
  /**
   * If the name of a location changes, consider putting the old name in the alias column so that it can still be located through searches.
   */
  public name?: string|undefined;
  /**
   * Extended properties for primitive element: Location.name
   */
  public _name?: fhir.FhirElement|undefined;
  /**
   * There are no dates associated with the alias/historic names, as this is not intended to track when names were used, but to assist in searching so that older names can still result in identifying the location.
   */
  public alias?: string[]|undefined;
  /**
   * Extended properties for primitive element: Location.alias
   */
  public _alias?: fhir.FhirElement[]|undefined;
  /**
   * Description of the Location, which helps in finding or referencing the place.
   */
  public description?: string|undefined;
  /**
   * Extended properties for primitive element: Location.description
   */
  public _description?: fhir.FhirElement|undefined;
  /**
   * This is labeled as a modifier because whether or not the location is a class of locations changes how it can be used and understood.
   */
  public mode?: LocationModeValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: Location.mode
   */
  public _mode?: fhir.FhirElement|undefined;
  /**
   * Indicates the type of function performed at the location.
   */
  public type?: fhir.CodeableConcept[]|undefined;
  /**
   * The contact details of communication devices available at the location. This can include phone numbers, fax numbers, mobile numbers, email addresses and web sites.
   */
  public telecom?: fhir.ContactPoint[]|undefined;
  /**
   * Additional addresses should be recorded using another instance of the Location resource, or via the Organization.
   */
  public address?: fhir.Address|undefined;
  /**
   * Physical form of the location, e.g. building, room, vehicle, road.
   */
  public physicalType?: fhir.CodeableConcept|undefined;
  /**
   * The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).
   */
  public position?: fhir.LocationPosition|undefined;
  /**
   * This can also be used as the part of the organization hierarchy where this location provides services. These services can be defined through the HealthcareService resource.
   */
  public managingOrganization?: fhir.Reference|undefined;
  /**
   * Another Location of which this Location is physically a part of.
   */
  public partOf?: fhir.Reference|undefined;
  /**
   * This type of information is commonly found published in directories and on websites informing customers when the facility is available.
   * Specific services within the location may have their own hours which could be shorter (or longer) than the locations hours.
   */
  public hoursOfOperation?: fhir.LocationHoursOfOperation[]|undefined;
  /**
   * A description of when the locations opening ours are different to normal, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as detailed in the opening hours Times.
   */
  public availabilityExceptions?: string|undefined;
  /**
   * Extended properties for primitive element: Location.availabilityExceptions
   */
  public _availabilityExceptions?: fhir.FhirElement|undefined;
  /**
   * Technical endpoints providing access to services operated for the location.
   */
  public endpoint?: fhir.Reference[]|undefined;
  /**
   * Default constructor for Location - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ILocation> = { }) {
    super(source);
    this.resourceType = 'Location';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['status']) { this.status = source.status; }
    if (source['_status']) { this._status = new fhir.FhirElement(source._status!); }
    if (source['operationalStatus']) { this.operationalStatus = new fhir.Coding(source.operationalStatus!); }
    if (source['name']) { this.name = source.name; }
    if (source['_name']) { this._name = new fhir.FhirElement(source._name!); }
    if (source['alias']) { this.alias = source.alias.map((x) => (x)); }
    if (source['_alias']) { this._alias = source._alias.map((x) => new fhir.FhirElement(x)); }
    if (source['description']) { this.description = source.description; }
    if (source['_description']) { this._description = new fhir.FhirElement(source._description!); }
    if (source['mode']) { this.mode = source.mode; }
    if (source['_mode']) { this._mode = new fhir.FhirElement(source._mode!); }
    if (source['type']) { this.type = source.type.map((x) => new fhir.CodeableConcept(x)); }
    if (source['telecom']) { this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x)); }
    if (source['address']) { this.address = new fhir.Address(source.address!); }
    if (source['physicalType']) { this.physicalType = new fhir.CodeableConcept(source.physicalType!); }
    if (source['position']) { this.position = new fhir.LocationPosition(source.position!); }
    if (source['managingOrganization']) { this.managingOrganization = new fhir.Reference(source.managingOrganization!); }
    if (source['partOf']) { this.partOf = new fhir.Reference(source.partOf!); }
    if (source['hoursOfOperation']) { this.hoursOfOperation = source.hoursOfOperation.map((x) => new fhir.LocationHoursOfOperation(x)); }
    if (source['availabilityExceptions']) { this.availabilityExceptions = source.availabilityExceptions; }
    if (source['_availabilityExceptions']) { this._availabilityExceptions = new fhir.FhirElement(source._availabilityExceptions!); }
    if (source['endpoint']) { this.endpoint = source.endpoint.map((x) => new fhir.Reference(x)); }
  }
  /**
   * Required-bound Value Set for status
   */
  public statusRequiredValueSet():LocationStatusValueSetType {
    return LocationStatusValueSet;
  }
  /**
   * Preferred-bound Value Set for operationalStatus
   */
  public operationalStatusPreferredValueSet():V20116ValueSetType {
    return V20116ValueSet;
  }
  /**
   * Required-bound Value Set for mode
   */
  public modeRequiredValueSet():LocationModeValueSetType {
    return LocationModeValueSet;
  }
  /**
   * Extensible-bound Value Set for type
   */
  public typeExtensibleValueSet():V3ServiceDeliveryLocationRoleTypeValueSetType {
    return V3ServiceDeliveryLocationRoleTypeValueSet;
  }
  /**
   * Example-bound Value Set for physicalType
   */
  public physicalTypeExampleValueSet():LocationPhysicalTypeValueSetType {
    return LocationPhysicalTypeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: Location.resourceType']); }
    if (this["identifier"]) { this.identifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_status"]) { results.push(...this._status.doModelValidation()); }
    if (this["operationalStatus"]) { results.push(...this.operationalStatus.doModelValidation()); }
    if (this["_name"]) { results.push(...this._name.doModelValidation()); }
    if (this["_alias"]) { this._alias.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_description"]) { results.push(...this._description.doModelValidation()); }
    if (this["_mode"]) { results.push(...this._mode.doModelValidation()); }
    if (this["type"]) { this.type.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["telecom"]) { this.telecom.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["address"]) { results.push(...this.address.doModelValidation()); }
    if (this["physicalType"]) { results.push(...this.physicalType.doModelValidation()); }
    if (this["position"]) { results.push(...this.position.doModelValidation()); }
    if (this["managingOrganization"]) { results.push(...this.managingOrganization.doModelValidation()); }
    if (this["partOf"]) { results.push(...this.partOf.doModelValidation()); }
    if (this["hoursOfOperation"]) { this.hoursOfOperation.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_availabilityExceptions"]) { results.push(...this._availabilityExceptions.doModelValidation()); }
    if (this["endpoint"]) { this.endpoint.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}
