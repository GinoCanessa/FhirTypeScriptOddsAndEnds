// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Expression

import * as fhir from '../fhir.js';

import { ExpressionLanguageValueSet, ExpressionLanguageValueSetType,} from '../fhirValueSets/ExpressionLanguageValueSet.js';
import { ExpressionLanguageValueSetEnum } from '../valueSetEnums.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Valid arguments for the Expression type.
 */
export interface ExpressionArgs extends fhir.FhirElementArgs {
  /**
   * A brief, natural language description of the condition that effectively communicates the intended semantics.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined.
   */
  name?: fhir.FhirId|string|undefined;
  /**
   * The media type of the language for the expression.
   */
  language: fhir.FhirCode|string|undefined;
  /**
   * An expression in the specified language that returns a value.
   */
  expression?: fhir.FhirString|string|undefined;
  /**
   * If both a reference and an expression is found, the reference SHALL point to the same expression.
   */
  reference?: fhir.FhirUri|string|undefined;
}

/**
 * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
 */
export class Expression extends fhir.FhirElement {
  readonly __dataType:string = 'Expression';
  /**
   * A brief, natural language description of the condition that effectively communicates the intended semantics.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined.
   */
  public name?: fhir.FhirId|undefined;
  /**
   * The media type of the language for the expression.
   */
  public language: fhir.FhirCode|null;
  /**
   * An expression in the specified language that returns a value.
   */
  public expression?: fhir.FhirString|undefined;
  /**
   * If both a reference and an expression is found, the reference SHALL point to the same expression.
   */
  public reference?: fhir.FhirUri|undefined;
  /**
   * Default constructor for Expression - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExpressionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }
    if (source['name']) { this.name = new fhir.FhirId({value: source.name}); }
    if (source['language']) { this.language = new fhir.FhirCode({value: source.language}); }
    else { this.language = null; }
    if (source['expression']) { this.expression = new fhir.FhirString({value: source.expression}); }
    if (source['reference']) { this.reference = new fhir.FhirUri({value: source.reference}); }
  }
  /**
   * Extensible-bound Value Set for language
   */
  public static languageExtensibleValueSet():ExpressionLanguageValueSetType {
    return ExpressionLanguageValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["description"]) { outcome.issue!.push(...this.description.doModelValidation().issue!); }
    if (this["name"]) { outcome.issue!.push(...this.name.doModelValidation().issue!); }
    if (!this['language']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property language:fhir.FhirCode fhir: Expression.language:code", }));
    }
    if (this["language"]) { outcome.issue!.push(...this.language.doModelValidation().issue!); }
    if (this["expression"]) { outcome.issue!.push(...this.expression.doModelValidation().issue!); }
    if (this["reference"]) { outcome.issue!.push(...this.reference.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
