// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
 */
export type IExpression = fhir.IFhirElement & {
  /**
   * A brief, natural language description of the condition that effectively communicates the intended semantics.
   */
  description?: string|undefined;
  _description?: fhir.IFhirElement|undefined;
  /**
   * An expression in the specified language that returns a value.
   */
  expression?: string|undefined;
  _expression?: fhir.IFhirElement|undefined;
  /**
   * The media type of the language for the expression.
   */
  language: string|null;
  _language?: fhir.IFhirElement|undefined;
  /**
   * A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined.
   */
  name?: string|undefined;
  _name?: fhir.IFhirElement|undefined;
  /**
   * If both a reference and an expression is found, the reference SHALL point to the same expression.
   */
  reference?: string|undefined;
  _reference?: fhir.IFhirElement|undefined;
}
/**
 * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
 */
export class Expression extends fhir.FhirElement implements fhir.IExpression {
  /**
   * A brief, natural language description of the condition that effectively communicates the intended semantics.
   */
  public description?: string|undefined;
  public _description?: fhir.FhirElement|undefined;
  /**
   * An expression in the specified language that returns a value.
   */
  public expression?: string|undefined;
  public _expression?: fhir.FhirElement|undefined;
  /**
   * The media type of the language for the expression.
   */
  public language: string|null;
  public _language?: fhir.FhirElement|undefined;
  /**
   * A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined.
   */
  public name?: string|undefined;
  public _name?: fhir.FhirElement|undefined;
  /**
   * If both a reference and an expression is found, the reference SHALL point to the same expression.
   */
  public reference?: string|undefined;
  public _reference?: fhir.FhirElement|undefined;
  /**
   * Default constructor for Expression - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IExpression> = {}) {
    super(source);
    if (source["description"]) { this.description = source.description; }
    if (source["_description"]) { this._description = new fhir.FhirElement(source._description!); }
    if (source["expression"]) { this.expression = source.expression; }
    if (source["_expression"]) { this._expression = new fhir.FhirElement(source._expression!); }
    this.language = null;
    if (source["language"]) { this.language = source.language; }
    if (this.language === undefined) { this.language = null }
    if (source["_language"]) { this._language = new fhir.FhirElement(source._language!); }
    if (source["name"]) { this.name = source.name; }
    if (source["_name"]) { this._name = new fhir.FhirElement(source._name!); }
    if (source["reference"]) { this.reference = source.reference; }
    if (source["_reference"]) { this._reference = new fhir.FhirElement(source._reference!); }
  }
  /**
   * Check if the current Expression contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["language"] === undefined) { missingElements.push("language"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a Expression from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IExpression):Expression {
    var dest:Expression = new Expression(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `Expression is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the Expression.language field
 */
export enum ExpressionLanguageEnum {
  TEXT_CQL = "text/cql",
  TEXT_FHIRPATH = "text/fhirpath",
  APPLICATION_X_FHIR_QUERY = "application/x-fhir-query",
}
