// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Expression

import * as fhir from '../fhir.js'

import { ExpressionLanguageValueSet, ExpressionLanguageValueSetType, ExpressionLanguageValueSetEnum } from '../fhirValueSets/ExpressionLanguageValueSet.js'

/**
 * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
 */
export type IExpression = fhir.IFhirElement & { 
  /**
   * A brief, natural language description of the condition that effectively communicates the intended semantics.
   */
  description?: string|undefined;
  /**
   * Extended properties for primitive element: Expression.description
   */
  _description?: fhir.IFhirElement|undefined;
  /**
   * A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined.
   */
  name?: string|undefined;
  /**
   * Extended properties for primitive element: Expression.name
   */
  _name?: fhir.IFhirElement|undefined;
  /**
   * The media type of the language for the expression.
   */
  language: string|null;
  /**
   * Extended properties for primitive element: Expression.language
   */
  _language?: fhir.IFhirElement|undefined;
  /**
   * An expression in the specified language that returns a value.
   */
  expression?: string|undefined;
  /**
   * Extended properties for primitive element: Expression.expression
   */
  _expression?: fhir.IFhirElement|undefined;
  /**
   * If both a reference and an expression is found, the reference SHALL point to the same expression.
   */
  reference?: string|undefined;
  /**
   * Extended properties for primitive element: Expression.reference
   */
  _reference?: fhir.IFhirElement|undefined;
}

/**
 * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
 */
export class Expression extends fhir.FhirElement implements IExpression {
  /**
   * A brief, natural language description of the condition that effectively communicates the intended semantics.
   */
  public description?: string|undefined;
  /**
   * Extended properties for primitive element: Expression.description
   */
  public _description?: fhir.FhirElement|undefined;
  /**
   * A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined.
   */
  public name?: string|undefined;
  /**
   * Extended properties for primitive element: Expression.name
   */
  public _name?: fhir.FhirElement|undefined;
  /**
   * The media type of the language for the expression.
   */
  public language: string|null;
  /**
   * Extended properties for primitive element: Expression.language
   */
  public _language?: fhir.FhirElement|undefined;
  /**
   * An expression in the specified language that returns a value.
   */
  public expression?: string|undefined;
  /**
   * Extended properties for primitive element: Expression.expression
   */
  public _expression?: fhir.FhirElement|undefined;
  /**
   * If both a reference and an expression is found, the reference SHALL point to the same expression.
   */
  public reference?: string|undefined;
  /**
   * Extended properties for primitive element: Expression.reference
   */
  public _reference?: fhir.FhirElement|undefined;
  /**
   * Default constructor for Expression - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IExpression> = { }) {
    super(source);
    if (source['description']) { this.description = source.description; }
    if (source['_description']) { this._description = new fhir.FhirElement(source._description!); }
    if (source['name']) { this.name = source.name; }
    if (source['_name']) { this._name = new fhir.FhirElement(source._name!); }
    if (source['language']) { this.language = source.language; }
    else { this.language = null; }
    if (source['_language']) { this._language = new fhir.FhirElement(source._language!); }
    if (source['expression']) { this.expression = source.expression; }
    if (source['_expression']) { this._expression = new fhir.FhirElement(source._expression!); }
    if (source['reference']) { this.reference = source.reference; }
    if (source['_reference']) { this._reference = new fhir.FhirElement(source._reference!); }
  }
  /**
   * Extensible-bound Value Set for language
   */
  public static languageExtensibleValueSet():ExpressionLanguageValueSetType {
    return ExpressionLanguageValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["_description"]) { results.push(...this._description.doModelValidation()); }
    if (this["_name"]) { results.push(...this._name.doModelValidation()); }
    if (!this["language"]) { results.push(["language",'Missing required element: Expression.language']); }
    if (this["_language"]) { results.push(...this._language.doModelValidation()); }
    if (this["_expression"]) { results.push(...this._expression.doModelValidation()); }
    if (this["_reference"]) { results.push(...this._reference.doModelValidation()); }
    return results;
  }
}
