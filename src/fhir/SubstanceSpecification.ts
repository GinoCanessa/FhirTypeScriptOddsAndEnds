// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SubstanceSpecification

import * as fhir from '../fhir.js'


/**
 * Moiety, for structural modifications.
 */
export type ISubstanceSpecificationMoiety = fhir.IBackboneElement & { 
  /**
   * Role that the moiety is playing.
   */
  role?: fhir.ICodeableConcept|undefined;
  /**
   * Identifier by which this moiety substance is known.
   */
  identifier?: fhir.IIdentifier|undefined;
  /**
   * Textual name for this moiety substance.
   */
  name?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.moiety.name
   */
  _name?: fhir.IFhirElement|undefined;
  /**
   * Stereochemistry type.
   */
  stereochemistry?: fhir.ICodeableConcept|undefined;
  /**
   * Optical activity type.
   */
  opticalActivity?: fhir.ICodeableConcept|undefined;
  /**
   * Molecular formula.
   */
  molecularFormula?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.moiety.molecularFormula
   */
  _molecularFormula?: fhir.IFhirElement|undefined;
  /**
   * Quantitative value for this moiety.
   */
  amountQuantity?: fhir.IQuantity|undefined;
  /**
   * Quantitative value for this moiety.
   */
  amountString?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.moiety.amount[x]
   */
  _amountString?: fhir.IFhirElement|undefined;
}

/**
 * General specifications for this substance, including how it is related to other substances.
 */
export type ISubstanceSpecificationProperty = fhir.IBackboneElement & { 
  /**
   * A category for this property, e.g. Physical, Chemical, Enzymatic.
   */
  category?: fhir.ICodeableConcept|undefined;
  /**
   * Property type e.g. viscosity, pH, isoelectric point.
   */
  code?: fhir.ICodeableConcept|undefined;
  /**
   * Parameters that were used in the measurement of a property (e.g. for viscosity: measured at 20C with a pH of 7.1).
   */
  parameters?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.property.parameters
   */
  _parameters?: fhir.IFhirElement|undefined;
  /**
   * A substance upon which a defining property depends (e.g. for solubility: in water, in alcohol).
   */
  definingSubstanceReference?: fhir.IReference|undefined;
  /**
   * A substance upon which a defining property depends (e.g. for solubility: in water, in alcohol).
   */
  definingSubstanceCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * Quantitative value for this property.
   */
  amountQuantity?: fhir.IQuantity|undefined;
  /**
   * Quantitative value for this property.
   */
  amountString?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.property.amount[x]
   */
  _amountString?: fhir.IFhirElement|undefined;
}

/**
 * The molecular weight or weight range (for proteins, polymers or nucleic acids).
 */
export type ISubstanceSpecificationStructureIsotopeMolecularWeight = fhir.IBackboneElement & { 
  /**
   * The method by which the molecular weight was determined.
   */
  method?: fhir.ICodeableConcept|undefined;
  /**
   * Type of molecular weight such as exact, average (also known as. number average), weight average.
   */
  type?: fhir.ICodeableConcept|undefined;
  /**
   * Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
   */
  amount?: fhir.IQuantity|undefined;
}

/**
 * Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.
 */
export type ISubstanceSpecificationStructureIsotope = fhir.IBackboneElement & { 
  /**
   * Substance identifier for each non-natural or radioisotope.
   */
  identifier?: fhir.IIdentifier|undefined;
  /**
   * Substance name for each non-natural or radioisotope.
   */
  name?: fhir.ICodeableConcept|undefined;
  /**
   * The type of isotopic substitution present in a single substance.
   */
  substitution?: fhir.ICodeableConcept|undefined;
  /**
   * Half life - for a non-natural nuclide.
   */
  halfLife?: fhir.IQuantity|undefined;
  /**
   * The molecular weight or weight range (for proteins, polymers or nucleic acids).
   */
  molecularWeight?: fhir.ISubstanceSpecificationStructureIsotopeMolecularWeight|undefined;
}

/**
 * Molecular structural representation.
 */
export type ISubstanceSpecificationStructureRepresentation = fhir.IBackboneElement & { 
  /**
   * The type of structure (e.g. Full, Partial, Representative).
   */
  type?: fhir.ICodeableConcept|undefined;
  /**
   * The structural representation as text string in a format e.g. InChI, SMILES, MOLFILE, CDX.
   */
  representation?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.structure.representation.representation
   */
  _representation?: fhir.IFhirElement|undefined;
  /**
   * An attached file with the structural representation.
   */
  attachment?: fhir.IAttachment|undefined;
}

/**
 * Structural information.
 */
export type ISubstanceSpecificationStructure = fhir.IBackboneElement & { 
  /**
   * Stereochemistry type.
   */
  stereochemistry?: fhir.ICodeableConcept|undefined;
  /**
   * Optical activity type.
   */
  opticalActivity?: fhir.ICodeableConcept|undefined;
  /**
   * Molecular formula.
   */
  molecularFormula?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.structure.molecularFormula
   */
  _molecularFormula?: fhir.IFhirElement|undefined;
  /**
   * Specified per moiety according to the Hill system, i.e. first C, then H, then alphabetical, each moiety separated by a dot.
   */
  molecularFormulaByMoiety?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.structure.molecularFormulaByMoiety
   */
  _molecularFormulaByMoiety?: fhir.IFhirElement|undefined;
  /**
   * Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.
   */
  isotope?: fhir.ISubstanceSpecificationStructureIsotope[]|undefined;
  /**
   * The molecular weight or weight range (for proteins, polymers or nucleic acids).
   */
  molecularWeight?: fhir.ISubstanceSpecificationStructureIsotopeMolecularWeight|undefined;
  /**
   * Supporting literature.
   */
  source?: fhir.IReference[]|undefined;
  /**
   * Molecular structural representation.
   */
  representation?: fhir.ISubstanceSpecificationStructureRepresentation[]|undefined;
}

/**
 * Codes associated with the substance.
 */
export type ISubstanceSpecificationCode = fhir.IBackboneElement & { 
  /**
   * The specific code.
   */
  code?: fhir.ICodeableConcept|undefined;
  /**
   * Status of the code assignment.
   */
  status?: fhir.ICodeableConcept|undefined;
  /**
   * The date at which the code status is changed as part of the terminology maintenance.
   */
  statusDate?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.code.statusDate
   */
  _statusDate?: fhir.IFhirElement|undefined;
  /**
   * Any comment can be provided in this field, if necessary.
   */
  comment?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.code.comment
   */
  _comment?: fhir.IFhirElement|undefined;
  /**
   * Supporting literature.
   */
  source?: fhir.IReference[]|undefined;
}

/**
 * Details of the official nature of this name.
 */
export type ISubstanceSpecificationNameOfficial = fhir.IBackboneElement & { 
  /**
   * Which authority uses this official name.
   */
  authority?: fhir.ICodeableConcept|undefined;
  /**
   * The status of the official name.
   */
  status?: fhir.ICodeableConcept|undefined;
  /**
   * Date of official name change.
   */
  date?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.name.official.date
   */
  _date?: fhir.IFhirElement|undefined;
}

/**
 * Names applicable to this substance.
 */
export type ISubstanceSpecificationName = fhir.IBackboneElement & { 
  /**
   * The actual name.
   */
  name: string|null;
  /**
   * Extended properties for primitive element: SubstanceSpecification.name.name
   */
  _name?: fhir.IFhirElement|undefined;
  /**
   * Name type.
   */
  type?: fhir.ICodeableConcept|undefined;
  /**
   * The status of the name.
   */
  status?: fhir.ICodeableConcept|undefined;
  /**
   * If this is the preferred name for this substance.
   */
  preferred?: boolean|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.name.preferred
   */
  _preferred?: fhir.IFhirElement|undefined;
  /**
   * Language of the name.
   */
  language?: fhir.ICodeableConcept[]|undefined;
  /**
   * The use context of this name for example if there is a different name a drug active ingredient as opposed to a food colour additive.
   */
  domain?: fhir.ICodeableConcept[]|undefined;
  /**
   * The jurisdiction where this name applies.
   */
  jurisdiction?: fhir.ICodeableConcept[]|undefined;
  /**
   * A synonym of this name.
   */
  synonym?: fhir.ISubstanceSpecificationName[]|undefined;
  /**
   * A translation for this name.
   */
  translation?: fhir.ISubstanceSpecificationName[]|undefined;
  /**
   * Details of the official nature of this name.
   */
  official?: fhir.ISubstanceSpecificationNameOfficial[]|undefined;
  /**
   * Supporting literature.
   */
  source?: fhir.IReference[]|undefined;
}

/**
 * A link between this substance and another, with details of the relationship.
 */
export type ISubstanceSpecificationRelationship = fhir.IBackboneElement & { 
  /**
   * A pointer to another substance, as a resource or just a representational code.
   */
  substanceReference?: fhir.IReference|undefined;
  /**
   * A pointer to another substance, as a resource or just a representational code.
   */
  substanceCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * For example "salt to parent", "active moiety", "starting material".
   */
  relationship?: fhir.ICodeableConcept|undefined;
  /**
   * For example where an enzyme strongly bonds with a particular substance, this is a defining relationship for that enzyme, out of several possible substance relationships.
   */
  isDefining?: boolean|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.relationship.isDefining
   */
  _isDefining?: fhir.IFhirElement|undefined;
  /**
   * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
   */
  amountQuantity?: fhir.IQuantity|undefined;
  /**
   * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
   */
  amountRange?: fhir.IRange|undefined;
  /**
   * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
   */
  amountRatio?: fhir.IRatio|undefined;
  /**
   * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
   */
  amountString?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.relationship.amount[x]
   */
  _amountString?: fhir.IFhirElement|undefined;
  /**
   * For use when the numeric.
   */
  amountRatioLowLimit?: fhir.IRatio|undefined;
  /**
   * An operator for the amount, for example "average", "approximately", "less than".
   */
  amountType?: fhir.ICodeableConcept|undefined;
  /**
   * Supporting literature.
   */
  source?: fhir.IReference[]|undefined;
}

/**
 * The detailed description of a substance, typically at a level beyond what is used for prescribing.
 */
export type ISubstanceSpecification = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "SubstanceSpecification";
  /**
   * Identifier by which this substance is known.
   */
  identifier?: fhir.IIdentifier|undefined;
  /**
   * High level categorization, e.g. polymer or nucleic acid.
   */
  type?: fhir.ICodeableConcept|undefined;
  /**
   * Status of substance within the catalogue e.g. approved.
   */
  status?: fhir.ICodeableConcept|undefined;
  /**
   * If the substance applies to only human or veterinary use.
   */
  domain?: fhir.ICodeableConcept|undefined;
  /**
   * Textual description of the substance.
   */
  description?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.description
   */
  _description?: fhir.IFhirElement|undefined;
  /**
   * Supporting literature.
   */
  source?: fhir.IReference[]|undefined;
  /**
   * Textual comment about this record of a substance.
   */
  comment?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.comment
   */
  _comment?: fhir.IFhirElement|undefined;
  /**
   * Moiety, for structural modifications.
   */
  moiety?: fhir.ISubstanceSpecificationMoiety[]|undefined;
  /**
   * General specifications for this substance, including how it is related to other substances.
   */
  property?: fhir.ISubstanceSpecificationProperty[]|undefined;
  /**
   * General information detailing this substance.
   */
  referenceInformation?: fhir.IReference|undefined;
  /**
   * Structural information.
   */
  structure?: fhir.ISubstanceSpecificationStructure|undefined;
  /**
   * Codes associated with the substance.
   */
  code?: fhir.ISubstanceSpecificationCode[]|undefined;
  /**
   * Names applicable to this substance.
   */
  name?: fhir.ISubstanceSpecificationName[]|undefined;
  /**
   * The molecular weight or weight range (for proteins, polymers or nucleic acids).
   */
  molecularWeight?: fhir.ISubstanceSpecificationStructureIsotopeMolecularWeight[]|undefined;
  /**
   * A link between this substance and another, with details of the relationship.
   */
  relationship?: fhir.ISubstanceSpecificationRelationship[]|undefined;
  /**
   * Data items specific to nucleic acids.
   */
  nucleicAcid?: fhir.IReference|undefined;
  /**
   * Data items specific to polymers.
   */
  polymer?: fhir.IReference|undefined;
  /**
   * Data items specific to proteins.
   */
  protein?: fhir.IReference|undefined;
  /**
   * Material or taxonomic/anatomical source for the substance.
   */
  sourceMaterial?: fhir.IReference|undefined;
}

/**
 * Moiety, for structural modifications.
 */
export class SubstanceSpecificationMoiety extends fhir.BackboneElement implements ISubstanceSpecificationMoiety {
  /**
   * Role that the moiety is playing.
   */
  public role?: fhir.CodeableConcept|undefined;
  /**
   * Identifier by which this moiety substance is known.
   */
  public identifier?: fhir.Identifier|undefined;
  /**
   * Textual name for this moiety substance.
   */
  public name?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.moiety.name
   */
  public _name?: fhir.FhirElement|undefined;
  /**
   * Stereochemistry type.
   */
  public stereochemistry?: fhir.CodeableConcept|undefined;
  /**
   * Optical activity type.
   */
  public opticalActivity?: fhir.CodeableConcept|undefined;
  /**
   * Molecular formula.
   */
  public molecularFormula?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.moiety.molecularFormula
   */
  public _molecularFormula?: fhir.FhirElement|undefined;
  /**
   * Quantitative value for this moiety.
   */
  public amountQuantity?: fhir.Quantity|undefined;
  /**
   * Quantitative value for this moiety.
   */
  public amountString?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.moiety.amount[x]
   */
  public _amountString?: fhir.FhirElement|undefined;
  /**
   * Default constructor for SubstanceSpecificationMoiety - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISubstanceSpecificationMoiety> = { }) {
    super(source);
    if (source['role']) { this.role = new fhir.CodeableConcept(source.role!); }
    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier!); }
    if (source['name']) { this.name = source.name; }
    if (source['_name']) { this._name = new fhir.FhirElement(source._name!); }
    if (source['stereochemistry']) { this.stereochemistry = new fhir.CodeableConcept(source.stereochemistry!); }
    if (source['opticalActivity']) { this.opticalActivity = new fhir.CodeableConcept(source.opticalActivity!); }
    if (source['molecularFormula']) { this.molecularFormula = source.molecularFormula; }
    if (source['_molecularFormula']) { this._molecularFormula = new fhir.FhirElement(source._molecularFormula!); }
    if (source['amountQuantity']) { this.amountQuantity = new fhir.Quantity(source.amountQuantity!); }
    if (source['amountString']) { this.amountString = source.amountString; }
    if (source['_amountString']) { this._amountString = new fhir.FhirElement(source._amountString!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["role"]) { results.push(...this.role.doModelValidation()); }
    if (this["identifier"]) { results.push(...this.identifier.doModelValidation()); }
    if (this["_name"]) { results.push(...this._name.doModelValidation()); }
    if (this["stereochemistry"]) { results.push(...this.stereochemistry.doModelValidation()); }
    if (this["opticalActivity"]) { results.push(...this.opticalActivity.doModelValidation()); }
    if (this["_molecularFormula"]) { results.push(...this._molecularFormula.doModelValidation()); }
    if (this["amountQuantity"]) { results.push(...this.amountQuantity.doModelValidation()); }
    if (this["_amountString"]) { results.push(...this._amountString.doModelValidation()); }
    return results;
  }
}

/**
 * General specifications for this substance, including how it is related to other substances.
 */
export class SubstanceSpecificationProperty extends fhir.BackboneElement implements ISubstanceSpecificationProperty {
  /**
   * A category for this property, e.g. Physical, Chemical, Enzymatic.
   */
  public category?: fhir.CodeableConcept|undefined;
  /**
   * Property type e.g. viscosity, pH, isoelectric point.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * Parameters that were used in the measurement of a property (e.g. for viscosity: measured at 20C with a pH of 7.1).
   */
  public parameters?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.property.parameters
   */
  public _parameters?: fhir.FhirElement|undefined;
  /**
   * A substance upon which a defining property depends (e.g. for solubility: in water, in alcohol).
   */
  public definingSubstanceReference?: fhir.Reference|undefined;
  /**
   * A substance upon which a defining property depends (e.g. for solubility: in water, in alcohol).
   */
  public definingSubstanceCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * Quantitative value for this property.
   */
  public amountQuantity?: fhir.Quantity|undefined;
  /**
   * Quantitative value for this property.
   */
  public amountString?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.property.amount[x]
   */
  public _amountString?: fhir.FhirElement|undefined;
  /**
   * Default constructor for SubstanceSpecificationProperty - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISubstanceSpecificationProperty> = { }) {
    super(source);
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category!); }
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code!); }
    if (source['parameters']) { this.parameters = source.parameters; }
    if (source['_parameters']) { this._parameters = new fhir.FhirElement(source._parameters!); }
    if (source['definingSubstanceReference']) { this.definingSubstanceReference = new fhir.Reference(source.definingSubstanceReference!); }
    if (source['definingSubstanceCodeableConcept']) { this.definingSubstanceCodeableConcept = new fhir.CodeableConcept(source.definingSubstanceCodeableConcept!); }
    if (source['amountQuantity']) { this.amountQuantity = new fhir.Quantity(source.amountQuantity!); }
    if (source['amountString']) { this.amountString = source.amountString; }
    if (source['_amountString']) { this._amountString = new fhir.FhirElement(source._amountString!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["category"]) { results.push(...this.category.doModelValidation()); }
    if (this["code"]) { results.push(...this.code.doModelValidation()); }
    if (this["_parameters"]) { results.push(...this._parameters.doModelValidation()); }
    if (this["definingSubstanceReference"]) { results.push(...this.definingSubstanceReference.doModelValidation()); }
    if (this["definingSubstanceCodeableConcept"]) { results.push(...this.definingSubstanceCodeableConcept.doModelValidation()); }
    if (this["amountQuantity"]) { results.push(...this.amountQuantity.doModelValidation()); }
    if (this["_amountString"]) { results.push(...this._amountString.doModelValidation()); }
    return results;
  }
}

/**
 * The molecular weight or weight range (for proteins, polymers or nucleic acids).
 */
export class SubstanceSpecificationStructureIsotopeMolecularWeight extends fhir.BackboneElement implements ISubstanceSpecificationStructureIsotopeMolecularWeight {
  /**
   * The method by which the molecular weight was determined.
   */
  public method?: fhir.CodeableConcept|undefined;
  /**
   * Type of molecular weight such as exact, average (also known as. number average), weight average.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
   */
  public amount?: fhir.Quantity|undefined;
  /**
   * Default constructor for SubstanceSpecificationStructureIsotopeMolecularWeight - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISubstanceSpecificationStructureIsotopeMolecularWeight> = { }) {
    super(source);
    if (source['method']) { this.method = new fhir.CodeableConcept(source.method!); }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    if (source['amount']) { this.amount = new fhir.Quantity(source.amount!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["method"]) { results.push(...this.method.doModelValidation()); }
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (this["amount"]) { results.push(...this.amount.doModelValidation()); }
    return results;
  }
}

/**
 * Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.
 */
export class SubstanceSpecificationStructureIsotope extends fhir.BackboneElement implements ISubstanceSpecificationStructureIsotope {
  /**
   * Substance identifier for each non-natural or radioisotope.
   */
  public identifier?: fhir.Identifier|undefined;
  /**
   * Substance name for each non-natural or radioisotope.
   */
  public name?: fhir.CodeableConcept|undefined;
  /**
   * The type of isotopic substitution present in a single substance.
   */
  public substitution?: fhir.CodeableConcept|undefined;
  /**
   * Half life - for a non-natural nuclide.
   */
  public halfLife?: fhir.Quantity|undefined;
  /**
   * The molecular weight or weight range (for proteins, polymers or nucleic acids).
   */
  public molecularWeight?: fhir.SubstanceSpecificationStructureIsotopeMolecularWeight|undefined;
  /**
   * Default constructor for SubstanceSpecificationStructureIsotope - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISubstanceSpecificationStructureIsotope> = { }) {
    super(source);
    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier!); }
    if (source['name']) { this.name = new fhir.CodeableConcept(source.name!); }
    if (source['substitution']) { this.substitution = new fhir.CodeableConcept(source.substitution!); }
    if (source['halfLife']) { this.halfLife = new fhir.Quantity(source.halfLife!); }
    if (source['molecularWeight']) { this.molecularWeight = new fhir.SubstanceSpecificationStructureIsotopeMolecularWeight(source.molecularWeight!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["identifier"]) { results.push(...this.identifier.doModelValidation()); }
    if (this["name"]) { results.push(...this.name.doModelValidation()); }
    if (this["substitution"]) { results.push(...this.substitution.doModelValidation()); }
    if (this["halfLife"]) { results.push(...this.halfLife.doModelValidation()); }
    if (this["molecularWeight"]) { results.push(...this.molecularWeight.doModelValidation()); }
    return results;
  }
}

/**
 * Molecular structural representation.
 */
export class SubstanceSpecificationStructureRepresentation extends fhir.BackboneElement implements ISubstanceSpecificationStructureRepresentation {
  /**
   * The type of structure (e.g. Full, Partial, Representative).
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * The structural representation as text string in a format e.g. InChI, SMILES, MOLFILE, CDX.
   */
  public representation?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.structure.representation.representation
   */
  public _representation?: fhir.FhirElement|undefined;
  /**
   * An attached file with the structural representation.
   */
  public attachment?: fhir.Attachment|undefined;
  /**
   * Default constructor for SubstanceSpecificationStructureRepresentation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISubstanceSpecificationStructureRepresentation> = { }) {
    super(source);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    if (source['representation']) { this.representation = source.representation; }
    if (source['_representation']) { this._representation = new fhir.FhirElement(source._representation!); }
    if (source['attachment']) { this.attachment = new fhir.Attachment(source.attachment!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (this["_representation"]) { results.push(...this._representation.doModelValidation()); }
    if (this["attachment"]) { results.push(...this.attachment.doModelValidation()); }
    return results;
  }
}

/**
 * Structural information.
 */
export class SubstanceSpecificationStructure extends fhir.BackboneElement implements ISubstanceSpecificationStructure {
  /**
   * Stereochemistry type.
   */
  public stereochemistry?: fhir.CodeableConcept|undefined;
  /**
   * Optical activity type.
   */
  public opticalActivity?: fhir.CodeableConcept|undefined;
  /**
   * Molecular formula.
   */
  public molecularFormula?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.structure.molecularFormula
   */
  public _molecularFormula?: fhir.FhirElement|undefined;
  /**
   * Specified per moiety according to the Hill system, i.e. first C, then H, then alphabetical, each moiety separated by a dot.
   */
  public molecularFormulaByMoiety?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.structure.molecularFormulaByMoiety
   */
  public _molecularFormulaByMoiety?: fhir.FhirElement|undefined;
  /**
   * Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.
   */
  public isotope?: fhir.SubstanceSpecificationStructureIsotope[]|undefined;
  /**
   * The molecular weight or weight range (for proteins, polymers or nucleic acids).
   */
  public molecularWeight?: fhir.SubstanceSpecificationStructureIsotopeMolecularWeight|undefined;
  /**
   * Supporting literature.
   */
  public source?: fhir.Reference[]|undefined;
  /**
   * Molecular structural representation.
   */
  public representation?: fhir.SubstanceSpecificationStructureRepresentation[]|undefined;
  /**
   * Default constructor for SubstanceSpecificationStructure - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISubstanceSpecificationStructure> = { }) {
    super(source);
    if (source['stereochemistry']) { this.stereochemistry = new fhir.CodeableConcept(source.stereochemistry!); }
    if (source['opticalActivity']) { this.opticalActivity = new fhir.CodeableConcept(source.opticalActivity!); }
    if (source['molecularFormula']) { this.molecularFormula = source.molecularFormula; }
    if (source['_molecularFormula']) { this._molecularFormula = new fhir.FhirElement(source._molecularFormula!); }
    if (source['molecularFormulaByMoiety']) { this.molecularFormulaByMoiety = source.molecularFormulaByMoiety; }
    if (source['_molecularFormulaByMoiety']) { this._molecularFormulaByMoiety = new fhir.FhirElement(source._molecularFormulaByMoiety!); }
    if (source['isotope']) { this.isotope = source.isotope.map((x) => new fhir.SubstanceSpecificationStructureIsotope(x)); }
    if (source['molecularWeight']) { this.molecularWeight = new fhir.SubstanceSpecificationStructureIsotopeMolecularWeight(source.molecularWeight!); }
    if (source['source']) { this.source = source.source.map((x) => new fhir.Reference(x)); }
    if (source['representation']) { this.representation = source.representation.map((x) => new fhir.SubstanceSpecificationStructureRepresentation(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["stereochemistry"]) { results.push(...this.stereochemistry.doModelValidation()); }
    if (this["opticalActivity"]) { results.push(...this.opticalActivity.doModelValidation()); }
    if (this["_molecularFormula"]) { results.push(...this._molecularFormula.doModelValidation()); }
    if (this["_molecularFormulaByMoiety"]) { results.push(...this._molecularFormulaByMoiety.doModelValidation()); }
    if (this["isotope"]) { this.isotope.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["molecularWeight"]) { results.push(...this.molecularWeight.doModelValidation()); }
    if (this["source"]) { this.source.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["representation"]) { this.representation.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * Codes associated with the substance.
 */
export class SubstanceSpecificationCode extends fhir.BackboneElement implements ISubstanceSpecificationCode {
  /**
   * The specific code.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * Status of the code assignment.
   */
  public status?: fhir.CodeableConcept|undefined;
  /**
   * The date at which the code status is changed as part of the terminology maintenance.
   */
  public statusDate?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.code.statusDate
   */
  public _statusDate?: fhir.FhirElement|undefined;
  /**
   * Any comment can be provided in this field, if necessary.
   */
  public comment?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.code.comment
   */
  public _comment?: fhir.FhirElement|undefined;
  /**
   * Supporting literature.
   */
  public source?: fhir.Reference[]|undefined;
  /**
   * Default constructor for SubstanceSpecificationCode - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISubstanceSpecificationCode> = { }) {
    super(source);
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code!); }
    if (source['status']) { this.status = new fhir.CodeableConcept(source.status!); }
    if (source['statusDate']) { this.statusDate = source.statusDate; }
    if (source['_statusDate']) { this._statusDate = new fhir.FhirElement(source._statusDate!); }
    if (source['comment']) { this.comment = source.comment; }
    if (source['_comment']) { this._comment = new fhir.FhirElement(source._comment!); }
    if (source['source']) { this.source = source.source.map((x) => new fhir.Reference(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["code"]) { results.push(...this.code.doModelValidation()); }
    if (this["status"]) { results.push(...this.status.doModelValidation()); }
    if (this["_statusDate"]) { results.push(...this._statusDate.doModelValidation()); }
    if (this["_comment"]) { results.push(...this._comment.doModelValidation()); }
    if (this["source"]) { this.source.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * Details of the official nature of this name.
 */
export class SubstanceSpecificationNameOfficial extends fhir.BackboneElement implements ISubstanceSpecificationNameOfficial {
  /**
   * Which authority uses this official name.
   */
  public authority?: fhir.CodeableConcept|undefined;
  /**
   * The status of the official name.
   */
  public status?: fhir.CodeableConcept|undefined;
  /**
   * Date of official name change.
   */
  public date?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.name.official.date
   */
  public _date?: fhir.FhirElement|undefined;
  /**
   * Default constructor for SubstanceSpecificationNameOfficial - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISubstanceSpecificationNameOfficial> = { }) {
    super(source);
    if (source['authority']) { this.authority = new fhir.CodeableConcept(source.authority!); }
    if (source['status']) { this.status = new fhir.CodeableConcept(source.status!); }
    if (source['date']) { this.date = source.date; }
    if (source['_date']) { this._date = new fhir.FhirElement(source._date!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["authority"]) { results.push(...this.authority.doModelValidation()); }
    if (this["status"]) { results.push(...this.status.doModelValidation()); }
    if (this["_date"]) { results.push(...this._date.doModelValidation()); }
    return results;
  }
}

/**
 * Names applicable to this substance.
 */
export class SubstanceSpecificationName extends fhir.BackboneElement implements ISubstanceSpecificationName {
  /**
   * The actual name.
   */
  public name: string|null;
  /**
   * Extended properties for primitive element: SubstanceSpecification.name.name
   */
  public _name?: fhir.FhirElement|undefined;
  /**
   * Name type.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * The status of the name.
   */
  public status?: fhir.CodeableConcept|undefined;
  /**
   * If this is the preferred name for this substance.
   */
  public preferred?: boolean|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.name.preferred
   */
  public _preferred?: fhir.FhirElement|undefined;
  /**
   * Language of the name.
   */
  public language?: fhir.CodeableConcept[]|undefined;
  /**
   * The use context of this name for example if there is a different name a drug active ingredient as opposed to a food colour additive.
   */
  public domain?: fhir.CodeableConcept[]|undefined;
  /**
   * The jurisdiction where this name applies.
   */
  public jurisdiction?: fhir.CodeableConcept[]|undefined;
  /**
   * A synonym of this name.
   */
  public synonym?: fhir.SubstanceSpecificationName[]|undefined;
  /**
   * A translation for this name.
   */
  public translation?: fhir.SubstanceSpecificationName[]|undefined;
  /**
   * Details of the official nature of this name.
   */
  public official?: fhir.SubstanceSpecificationNameOfficial[]|undefined;
  /**
   * Supporting literature.
   */
  public source?: fhir.Reference[]|undefined;
  /**
   * Default constructor for SubstanceSpecificationName - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISubstanceSpecificationName> = { }) {
    super(source);
    if (source['name']) { this.name = source.name; }
    else { this.name = null; }
    if (source['_name']) { this._name = new fhir.FhirElement(source._name!); }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    if (source['status']) { this.status = new fhir.CodeableConcept(source.status!); }
    if (source['preferred']) { this.preferred = source.preferred; }
    if (source['_preferred']) { this._preferred = new fhir.FhirElement(source._preferred!); }
    if (source['language']) { this.language = source.language.map((x) => new fhir.CodeableConcept(x)); }
    if (source['domain']) { this.domain = source.domain.map((x) => new fhir.CodeableConcept(x)); }
    if (source['jurisdiction']) { this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x)); }
    if (source['synonym']) { this.synonym = source.synonym.map((x) => new fhir.SubstanceSpecificationName(x)); }
    if (source['translation']) { this.translation = source.translation.map((x) => new fhir.SubstanceSpecificationName(x)); }
    if (source['official']) { this.official = source.official.map((x) => new fhir.SubstanceSpecificationNameOfficial(x)); }
    if (source['source']) { this.source = source.source.map((x) => new fhir.Reference(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["name"]) { results.push(["name",'Missing required element: SubstanceSpecification.name.name']); }
    if (this["_name"]) { results.push(...this._name.doModelValidation()); }
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (this["status"]) { results.push(...this.status.doModelValidation()); }
    if (this["_preferred"]) { results.push(...this._preferred.doModelValidation()); }
    if (this["language"]) { this.language.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["domain"]) { this.domain.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["jurisdiction"]) { this.jurisdiction.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["synonym"]) { this.synonym.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["translation"]) { this.translation.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["official"]) { this.official.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["source"]) { this.source.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * A link between this substance and another, with details of the relationship.
 */
export class SubstanceSpecificationRelationship extends fhir.BackboneElement implements ISubstanceSpecificationRelationship {
  /**
   * A pointer to another substance, as a resource or just a representational code.
   */
  public substanceReference?: fhir.Reference|undefined;
  /**
   * A pointer to another substance, as a resource or just a representational code.
   */
  public substanceCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * For example "salt to parent", "active moiety", "starting material".
   */
  public relationship?: fhir.CodeableConcept|undefined;
  /**
   * For example where an enzyme strongly bonds with a particular substance, this is a defining relationship for that enzyme, out of several possible substance relationships.
   */
  public isDefining?: boolean|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.relationship.isDefining
   */
  public _isDefining?: fhir.FhirElement|undefined;
  /**
   * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
   */
  public amountQuantity?: fhir.Quantity|undefined;
  /**
   * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
   */
  public amountRange?: fhir.Range|undefined;
  /**
   * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
   */
  public amountRatio?: fhir.Ratio|undefined;
  /**
   * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
   */
  public amountString?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.relationship.amount[x]
   */
  public _amountString?: fhir.FhirElement|undefined;
  /**
   * For use when the numeric.
   */
  public amountRatioLowLimit?: fhir.Ratio|undefined;
  /**
   * An operator for the amount, for example "average", "approximately", "less than".
   */
  public amountType?: fhir.CodeableConcept|undefined;
  /**
   * Supporting literature.
   */
  public source?: fhir.Reference[]|undefined;
  /**
   * Default constructor for SubstanceSpecificationRelationship - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISubstanceSpecificationRelationship> = { }) {
    super(source);
    if (source['substanceReference']) { this.substanceReference = new fhir.Reference(source.substanceReference!); }
    if (source['substanceCodeableConcept']) { this.substanceCodeableConcept = new fhir.CodeableConcept(source.substanceCodeableConcept!); }
    if (source['relationship']) { this.relationship = new fhir.CodeableConcept(source.relationship!); }
    if (source['isDefining']) { this.isDefining = source.isDefining; }
    if (source['_isDefining']) { this._isDefining = new fhir.FhirElement(source._isDefining!); }
    if (source['amountQuantity']) { this.amountQuantity = new fhir.Quantity(source.amountQuantity!); }
    if (source['amountRange']) { this.amountRange = new fhir.Range(source.amountRange!); }
    if (source['amountRatio']) { this.amountRatio = new fhir.Ratio(source.amountRatio!); }
    if (source['amountString']) { this.amountString = source.amountString; }
    if (source['_amountString']) { this._amountString = new fhir.FhirElement(source._amountString!); }
    if (source['amountRatioLowLimit']) { this.amountRatioLowLimit = new fhir.Ratio(source.amountRatioLowLimit!); }
    if (source['amountType']) { this.amountType = new fhir.CodeableConcept(source.amountType!); }
    if (source['source']) { this.source = source.source.map((x) => new fhir.Reference(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["substanceReference"]) { results.push(...this.substanceReference.doModelValidation()); }
    if (this["substanceCodeableConcept"]) { results.push(...this.substanceCodeableConcept.doModelValidation()); }
    if (this["relationship"]) { results.push(...this.relationship.doModelValidation()); }
    if (this["_isDefining"]) { results.push(...this._isDefining.doModelValidation()); }
    if (this["amountQuantity"]) { results.push(...this.amountQuantity.doModelValidation()); }
    if (this["amountRange"]) { results.push(...this.amountRange.doModelValidation()); }
    if (this["amountRatio"]) { results.push(...this.amountRatio.doModelValidation()); }
    if (this["_amountString"]) { results.push(...this._amountString.doModelValidation()); }
    if (this["amountRatioLowLimit"]) { results.push(...this.amountRatioLowLimit.doModelValidation()); }
    if (this["amountType"]) { results.push(...this.amountType.doModelValidation()); }
    if (this["source"]) { this.source.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * The detailed description of a substance, typically at a level beyond what is used for prescribing.
 */
export class SubstanceSpecification extends fhir.DomainResource implements ISubstanceSpecification {
  /**
   * Resource Type Name
   */
  public resourceType: "SubstanceSpecification";
  /**
   * Identifier by which this substance is known.
   */
  public identifier?: fhir.Identifier|undefined;
  /**
   * High level categorization, e.g. polymer or nucleic acid.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Status of substance within the catalogue e.g. approved.
   */
  public status?: fhir.CodeableConcept|undefined;
  /**
   * If the substance applies to only human or veterinary use.
   */
  public domain?: fhir.CodeableConcept|undefined;
  /**
   * Textual description of the substance.
   */
  public description?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.description
   */
  public _description?: fhir.FhirElement|undefined;
  /**
   * Supporting literature.
   */
  public source?: fhir.Reference[]|undefined;
  /**
   * Textual comment about this record of a substance.
   */
  public comment?: string|undefined;
  /**
   * Extended properties for primitive element: SubstanceSpecification.comment
   */
  public _comment?: fhir.FhirElement|undefined;
  /**
   * Moiety, for structural modifications.
   */
  public moiety?: fhir.SubstanceSpecificationMoiety[]|undefined;
  /**
   * General specifications for this substance, including how it is related to other substances.
   */
  public property?: fhir.SubstanceSpecificationProperty[]|undefined;
  /**
   * General information detailing this substance.
   */
  public referenceInformation?: fhir.Reference|undefined;
  /**
   * Structural information.
   */
  public structure?: fhir.SubstanceSpecificationStructure|undefined;
  /**
   * Codes associated with the substance.
   */
  public code?: fhir.SubstanceSpecificationCode[]|undefined;
  /**
   * Names applicable to this substance.
   */
  public name?: fhir.SubstanceSpecificationName[]|undefined;
  /**
   * The molecular weight or weight range (for proteins, polymers or nucleic acids).
   */
  public molecularWeight?: fhir.SubstanceSpecificationStructureIsotopeMolecularWeight[]|undefined;
  /**
   * A link between this substance and another, with details of the relationship.
   */
  public relationship?: fhir.SubstanceSpecificationRelationship[]|undefined;
  /**
   * Data items specific to nucleic acids.
   */
  public nucleicAcid?: fhir.Reference|undefined;
  /**
   * Data items specific to polymers.
   */
  public polymer?: fhir.Reference|undefined;
  /**
   * Data items specific to proteins.
   */
  public protein?: fhir.Reference|undefined;
  /**
   * Material or taxonomic/anatomical source for the substance.
   */
  public sourceMaterial?: fhir.Reference|undefined;
  /**
   * Default constructor for SubstanceSpecification - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISubstanceSpecification> = { }) {
    super(source);
    this.resourceType = 'SubstanceSpecification';
    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier!); }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    if (source['status']) { this.status = new fhir.CodeableConcept(source.status!); }
    if (source['domain']) { this.domain = new fhir.CodeableConcept(source.domain!); }
    if (source['description']) { this.description = source.description; }
    if (source['_description']) { this._description = new fhir.FhirElement(source._description!); }
    if (source['source']) { this.source = source.source.map((x) => new fhir.Reference(x)); }
    if (source['comment']) { this.comment = source.comment; }
    if (source['_comment']) { this._comment = new fhir.FhirElement(source._comment!); }
    if (source['moiety']) { this.moiety = source.moiety.map((x) => new fhir.SubstanceSpecificationMoiety(x)); }
    if (source['property']) { this.property = source.property.map((x) => new fhir.SubstanceSpecificationProperty(x)); }
    if (source['referenceInformation']) { this.referenceInformation = new fhir.Reference(source.referenceInformation!); }
    if (source['structure']) { this.structure = new fhir.SubstanceSpecificationStructure(source.structure!); }
    if (source['code']) { this.code = source.code.map((x) => new fhir.SubstanceSpecificationCode(x)); }
    if (source['name']) { this.name = source.name.map((x) => new fhir.SubstanceSpecificationName(x)); }
    if (source['molecularWeight']) { this.molecularWeight = source.molecularWeight.map((x) => new fhir.SubstanceSpecificationStructureIsotopeMolecularWeight(x)); }
    if (source['relationship']) { this.relationship = source.relationship.map((x) => new fhir.SubstanceSpecificationRelationship(x)); }
    if (source['nucleicAcid']) { this.nucleicAcid = new fhir.Reference(source.nucleicAcid!); }
    if (source['polymer']) { this.polymer = new fhir.Reference(source.polymer!); }
    if (source['protein']) { this.protein = new fhir.Reference(source.protein!); }
    if (source['sourceMaterial']) { this.sourceMaterial = new fhir.Reference(source.sourceMaterial!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: SubstanceSpecification.resourceType']); }
    if (this["identifier"]) { results.push(...this.identifier.doModelValidation()); }
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (this["status"]) { results.push(...this.status.doModelValidation()); }
    if (this["domain"]) { results.push(...this.domain.doModelValidation()); }
    if (this["_description"]) { results.push(...this._description.doModelValidation()); }
    if (this["source"]) { this.source.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_comment"]) { results.push(...this._comment.doModelValidation()); }
    if (this["moiety"]) { this.moiety.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["property"]) { this.property.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["referenceInformation"]) { results.push(...this.referenceInformation.doModelValidation()); }
    if (this["structure"]) { results.push(...this.structure.doModelValidation()); }
    if (this["code"]) { this.code.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["name"]) { this.name.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["molecularWeight"]) { this.molecularWeight.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["relationship"]) { this.relationship.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["nucleicAcid"]) { results.push(...this.nucleicAcid.doModelValidation()); }
    if (this["polymer"]) { results.push(...this.polymer.doModelValidation()); }
    if (this["protein"]) { results.push(...this.protein.doModelValidation()); }
    if (this["sourceMaterial"]) { results.push(...this.sourceMaterial.doModelValidation()); }
    return results;
  }
}
