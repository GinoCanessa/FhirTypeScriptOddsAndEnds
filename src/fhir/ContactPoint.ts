// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: ContactPoint

import * as fhir from '../fhir.js'

import { ContactPointSystemValueSet, ContactPointSystemValueSetType, ContactPointSystemValueSetEnum } from '../fhirValueSets/ContactPointSystemValueSet.js'
import { ContactPointUseValueSet, ContactPointUseValueSetType, ContactPointUseValueSetEnum } from '../fhirValueSets/ContactPointUseValueSet.js'

/**
 * Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
 */
export type IContactPoint = fhir.IFhirElement & { 
  /**
   * Telecommunications form for contact point - what communications system is required to make use of the contact.
   */
  system?: ContactPointSystemValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: ContactPoint.system
   */
  _system?: fhir.IFhirElement|undefined;
  /**
   * Additional text data such as phone extension numbers, or notes about use of the contact are sometimes included in the value.
   */
  value?: string|undefined;
  /**
   * Extended properties for primitive element: ContactPoint.value
   */
  _value?: fhir.IFhirElement|undefined;
  /**
   * Applications can assume that a contact is current unless it explicitly says that it is temporary or old.
   */
  use?: ContactPointUseValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: ContactPoint.use
   */
  _use?: fhir.IFhirElement|undefined;
  /**
   * Note that rank does not necessarily follow the order in which the contacts are represented in the instance.
   */
  rank?: number|undefined;
  /**
   * Extended properties for primitive element: ContactPoint.rank
   */
  _rank?: fhir.IFhirElement|undefined;
  /**
   * Time period when the contact point was/is in use.
   */
  period?: fhir.IPeriod|undefined;
}

/**
 * Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
 */
export class ContactPoint extends fhir.FhirElement implements IContactPoint {
  /**
   * Telecommunications form for contact point - what communications system is required to make use of the contact.
   */
  public system?: ContactPointSystemValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: ContactPoint.system
   */
  public _system?: fhir.FhirElement|undefined;
  /**
   * Additional text data such as phone extension numbers, or notes about use of the contact are sometimes included in the value.
   */
  public value?: string|undefined;
  /**
   * Extended properties for primitive element: ContactPoint.value
   */
  public _value?: fhir.FhirElement|undefined;
  /**
   * Applications can assume that a contact is current unless it explicitly says that it is temporary or old.
   */
  public use?: ContactPointUseValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: ContactPoint.use
   */
  public _use?: fhir.FhirElement|undefined;
  /**
   * Note that rank does not necessarily follow the order in which the contacts are represented in the instance.
   */
  public rank?: number|undefined;
  /**
   * Extended properties for primitive element: ContactPoint.rank
   */
  public _rank?: fhir.FhirElement|undefined;
  /**
   * Time period when the contact point was/is in use.
   */
  public period?: fhir.Period|undefined;
  /**
   * Default constructor for ContactPoint - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IContactPoint> = { }) {
    super(source);
    if (source['system']) { this.system = source.system; }
    if (source['_system']) { this._system = new fhir.FhirElement(source._system!); }
    if (source['value']) { this.value = source.value; }
    if (source['_value']) { this._value = new fhir.FhirElement(source._value!); }
    if (source['use']) { this.use = source.use; }
    if (source['_use']) { this._use = new fhir.FhirElement(source._use!); }
    if (source['rank']) { this.rank = source.rank; }
    if (source['_rank']) { this._rank = new fhir.FhirElement(source._rank!); }
    if (source['period']) { this.period = new fhir.Period(source.period!); }
  }
  /**
   * Required-bound Value Set for system
   */
  public static systemRequiredValueSet():ContactPointSystemValueSetType {
    return ContactPointSystemValueSet;
  }
  /**
   * Required-bound Value Set for use
   */
  public static useRequiredValueSet():ContactPointUseValueSetType {
    return ContactPointUseValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["_system"]) { results.push(...this._system.doModelValidation()); }
    if (this["_value"]) { results.push(...this._value.doModelValidation()); }
    if (this["_use"]) { results.push(...this._use.doModelValidation()); }
    if (this["_rank"]) { results.push(...this._rank.doModelValidation()); }
    if (this["period"]) { results.push(...this.period.doModelValidation()); }
    return results;
  }
}
