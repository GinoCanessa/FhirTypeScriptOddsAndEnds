// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: ProductShelfLife

import * as fhir from '../fhir.js';

import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Valid arguments for the ProductShelfLife type.
 */
export interface ProductShelfLifeArgs extends fhir.BackboneElementArgs {
  /**
   * Unique identifier for the packaged Medicinal Product.
   */
  identifier?: fhir.IdentifierArgs|undefined;
  /**
   * This describes the shelf life, taking into account various scenarios such as shelf life of the packaged Medicinal Product itself, shelf life after transformation where necessary and shelf life after the first opening of a bottle, etc. The shelf life type shall be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.
   */
  type: fhir.CodeableConceptArgs|null;
  /**
   * The shelf life time period can be specified using a numerical value for the period of time and its unit of time measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
   */
  period: fhir.QuantityArgs|null;
  /**
   * Special precautions for storage, if any, can be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.
   */
  specialPrecautionsForStorage?: fhir.CodeableConceptArgs[]|undefined;
}

/**
 * The shelf-life and storage information for a medicinal product item or container can be described using this class.
 */
export class ProductShelfLife extends fhir.BackboneElement {
  readonly __dataType:string = 'ProductShelfLife';
  /**
   * Unique identifier for the packaged Medicinal Product.
   */
  public identifier?: fhir.Identifier|undefined;
  /**
   * This describes the shelf life, taking into account various scenarios such as shelf life of the packaged Medicinal Product itself, shelf life after transformation where necessary and shelf life after the first opening of a bottle, etc. The shelf life type shall be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.
   */
  public type: fhir.CodeableConcept|null;
  /**
   * The shelf life time period can be specified using a numerical value for the period of time and its unit of time measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
   */
  public period: fhir.Quantity|null;
  /**
   * Special precautions for storage, if any, can be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.
   */
  public specialPrecautionsForStorage?: fhir.CodeableConcept[]|undefined = [];
  /**
   * Default constructor for ProductShelfLife - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ProductShelfLifeArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier); }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    else { this.type = null; }
    if (source['period']) { this.period = new fhir.Quantity(source.period); }
    else { this.period = null; }
    if (source['specialPrecautionsForStorage']) { this.specialPrecautionsForStorage = source.specialPrecautionsForStorage.map((x) => new fhir.CodeableConcept(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["identifier"]) { outcome.issue!.push(...this.identifier.doModelValidation().issue!); }
    if (!this['type']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property type:fhir.CodeableConcept fhir: ProductShelfLife.type:CodeableConcept", }));
    }
    if (this["type"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }
    if (!this['period']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property period:fhir.Quantity fhir: ProductShelfLife.period:Quantity", }));
    }
    if (this["period"]) { outcome.issue!.push(...this.period.doModelValidation().issue!); }
    if (this["specialPrecautionsForStorage"]) { this.specialPrecautionsForStorage.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
