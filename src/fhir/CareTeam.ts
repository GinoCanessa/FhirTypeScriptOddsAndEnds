// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: CareTeam

import * as fhir from '../fhir.js'

import { ParticipantRoleValueSet, ParticipantRoleValueSetType, ParticipantRoleValueSetEnum } from '../fhirValueSets/ParticipantRoleValueSet.js'
import { CareTeamStatusValueSet, CareTeamStatusValueSetType, CareTeamStatusValueSetEnum } from '../fhirValueSets/CareTeamStatusValueSet.js'
import { ClinicalFindingsValueSet, ClinicalFindingsValueSetType, ClinicalFindingsValueSetEnum } from '../fhirValueSets/ClinicalFindingsValueSet.js'

/**
 * Identifies all people and organizations who are expected to be involved in the care team.
 */
export type ICareTeamParticipant = fhir.IBackboneElement & { 
  /**
   * Roles may sometimes be inferred by type of Practitioner.  These are relationships that hold only within the context of the care team.  General relationships should be handled as properties of the Patient resource directly.
   */
  role?: fhir.ICodeableConcept[]|undefined;
  /**
   * Patient only needs to be listed if they have a role other than "subject of care".
   * Member is optional because some participants may be known only by their role, particularly in draft plans.
   */
  member?: fhir.IReference|undefined;
  /**
   * The organization of the practitioner.
   */
  onBehalfOf?: fhir.IReference|undefined;
  /**
   * Indicates when the specific member or organization did (or is intended to) come into effect and end.
   */
  period?: fhir.IPeriod|undefined;
}

/**
 * The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care for a patient.
 */
export type ICareTeam = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "CareTeam";
  /**
   * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains the code entered-in-error that marks the care team as not currently valid.
   */
  status?: CareTeamStatusValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: CareTeam.status
   */
  _status?: fhir.IFhirElement|undefined;
  /**
   * There may be multiple axis of categorization and one team may serve multiple purposes.
   */
  category?: fhir.ICodeableConcept[]|undefined;
  /**
   * The meaning/purpose of the team is conveyed in CareTeam.category.  This element may also convey semantics of the team (e.g. "Red trauma team"), but its primary purpose is to distinguish between identical teams in a human-friendly way.  ("Team 18735" isn't as friendly.).
   */
  name?: string|undefined;
  /**
   * Extended properties for primitive element: CareTeam.name
   */
  _name?: fhir.IFhirElement|undefined;
  /**
   * Identifies the patient or group whose intended care is handled by the team.
   */
  subject?: fhir.IReference|undefined;
  /**
   * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
   */
  encounter?: fhir.IReference|undefined;
  /**
   * Indicates when the team did (or is intended to) come into effect and end.
   */
  period?: fhir.IPeriod|undefined;
  /**
   * Identifies all people and organizations who are expected to be involved in the care team.
   */
  participant?: fhir.ICareTeamParticipant[]|undefined;
  /**
   * Describes why the care team exists.
   */
  reasonCode?: fhir.ICodeableConcept[]|undefined;
  /**
   * Condition(s) that this care team addresses.
   */
  reasonReference?: fhir.IReference[]|undefined;
  /**
   * The organization responsible for the care team.
   */
  managingOrganization?: fhir.IReference[]|undefined;
  /**
   * The ContactPoint.use code of home is not appropriate to use. These contacts are not the contact details of individual care team members.
   */
  telecom?: fhir.IContactPoint[]|undefined;
  /**
   * Comments made about the CareTeam.
   */
  note?: fhir.IAnnotation[]|undefined;
}

/**
 * Identifies all people and organizations who are expected to be involved in the care team.
 */
export class CareTeamParticipant extends fhir.BackboneElement implements ICareTeamParticipant {
  /**
   * Roles may sometimes be inferred by type of Practitioner.  These are relationships that hold only within the context of the care team.  General relationships should be handled as properties of the Patient resource directly.
   */
  public role?: fhir.CodeableConcept[]|undefined;
  /**
   * Patient only needs to be listed if they have a role other than "subject of care".
   * Member is optional because some participants may be known only by their role, particularly in draft plans.
   */
  public member?: fhir.Reference|undefined;
  /**
   * The organization of the practitioner.
   */
  public onBehalfOf?: fhir.Reference|undefined;
  /**
   * Indicates when the specific member or organization did (or is intended to) come into effect and end.
   */
  public period?: fhir.Period|undefined;
  /**
   * Default constructor for CareTeamParticipant - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ICareTeamParticipant> = { }) {
    super(source);
    if (source['role']) { this.role = source.role.map((x) => new fhir.CodeableConcept(x)); }
    if (source['member']) { this.member = new fhir.Reference(source.member!); }
    if (source['onBehalfOf']) { this.onBehalfOf = new fhir.Reference(source.onBehalfOf!); }
    if (source['period']) { this.period = new fhir.Period(source.period!); }
  }
  /**
   * Example-bound Value Set for role
   */
  public static roleExampleValueSet():ParticipantRoleValueSetType {
    return ParticipantRoleValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["role"]) { this.role.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["member"]) { results.push(...this.member.doModelValidation()); }
    if (this["onBehalfOf"]) { results.push(...this.onBehalfOf.doModelValidation()); }
    if (this["period"]) { results.push(...this.period.doModelValidation()); }
    return results;
  }
}

/**
 * The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care for a patient.
 */
export class CareTeam extends fhir.DomainResource implements ICareTeam {
  /**
   * Resource Type Name
   */
  public resourceType: "CareTeam";
  /**
   * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains the code entered-in-error that marks the care team as not currently valid.
   */
  public status?: CareTeamStatusValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: CareTeam.status
   */
  public _status?: fhir.FhirElement|undefined;
  /**
   * There may be multiple axis of categorization and one team may serve multiple purposes.
   */
  public category?: fhir.CodeableConcept[]|undefined;
  /**
   * The meaning/purpose of the team is conveyed in CareTeam.category.  This element may also convey semantics of the team (e.g. "Red trauma team"), but its primary purpose is to distinguish between identical teams in a human-friendly way.  ("Team 18735" isn't as friendly.).
   */
  public name?: string|undefined;
  /**
   * Extended properties for primitive element: CareTeam.name
   */
  public _name?: fhir.FhirElement|undefined;
  /**
   * Identifies the patient or group whose intended care is handled by the team.
   */
  public subject?: fhir.Reference|undefined;
  /**
   * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
   */
  public encounter?: fhir.Reference|undefined;
  /**
   * Indicates when the team did (or is intended to) come into effect and end.
   */
  public period?: fhir.Period|undefined;
  /**
   * Identifies all people and organizations who are expected to be involved in the care team.
   */
  public participant?: fhir.CareTeamParticipant[]|undefined;
  /**
   * Describes why the care team exists.
   */
  public reasonCode?: fhir.CodeableConcept[]|undefined;
  /**
   * Condition(s) that this care team addresses.
   */
  public reasonReference?: fhir.Reference[]|undefined;
  /**
   * The organization responsible for the care team.
   */
  public managingOrganization?: fhir.Reference[]|undefined;
  /**
   * The ContactPoint.use code of home is not appropriate to use. These contacts are not the contact details of individual care team members.
   */
  public telecom?: fhir.ContactPoint[]|undefined;
  /**
   * Comments made about the CareTeam.
   */
  public note?: fhir.Annotation[]|undefined;
  /**
   * Default constructor for CareTeam - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ICareTeam> = { }) {
    super(source);
    this.resourceType = 'CareTeam';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['status']) { this.status = source.status; }
    if (source['_status']) { this._status = new fhir.FhirElement(source._status!); }
    if (source['category']) { this.category = source.category.map((x) => new fhir.CodeableConcept(x)); }
    if (source['name']) { this.name = source.name; }
    if (source['_name']) { this._name = new fhir.FhirElement(source._name!); }
    if (source['subject']) { this.subject = new fhir.Reference(source.subject!); }
    if (source['encounter']) { this.encounter = new fhir.Reference(source.encounter!); }
    if (source['period']) { this.period = new fhir.Period(source.period!); }
    if (source['participant']) { this.participant = source.participant.map((x) => new fhir.CareTeamParticipant(x)); }
    if (source['reasonCode']) { this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x)); }
    if (source['reasonReference']) { this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x)); }
    if (source['managingOrganization']) { this.managingOrganization = source.managingOrganization.map((x) => new fhir.Reference(x)); }
    if (source['telecom']) { this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x)); }
    if (source['note']) { this.note = source.note.map((x) => new fhir.Annotation(x)); }
  }
  /**
   * Required-bound Value Set for status
   */
  public static statusRequiredValueSet():CareTeamStatusValueSetType {
    return CareTeamStatusValueSet;
  }
  /**
   * Example-bound Value Set for reasonCode
   */
  public static reasonCodeExampleValueSet():ClinicalFindingsValueSetType {
    return ClinicalFindingsValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: CareTeam.resourceType']); }
    if (this["identifier"]) { this.identifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_status"]) { results.push(...this._status.doModelValidation()); }
    if (this["category"]) { this.category.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_name"]) { results.push(...this._name.doModelValidation()); }
    if (this["subject"]) { results.push(...this.subject.doModelValidation()); }
    if (this["encounter"]) { results.push(...this.encounter.doModelValidation()); }
    if (this["period"]) { results.push(...this.period.doModelValidation()); }
    if (this["participant"]) { this.participant.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["reasonCode"]) { this.reasonCode.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["reasonReference"]) { this.reasonReference.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["managingOrganization"]) { this.managingOrganization.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["telecom"]) { this.telecom.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["note"]) { this.note.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}
