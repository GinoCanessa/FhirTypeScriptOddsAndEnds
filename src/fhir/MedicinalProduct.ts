// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Coding words or phrases of the name.
 */
export type IMedicinalProductNameNamePart = fhir.IBackboneElement & {
  /**
   * A fragment of a product name.
   */
  part: string|null;
  _part?: fhir.IFhirElement|undefined;
  /**
   * Idenifying type for this part of the name (e.g. strength part).
   */
  type: fhir.ICoding|null;
}
/**
 * Country where the name applies.
 */
export type IMedicinalProductNameCountryLanguage = fhir.IBackboneElement & {
  /**
   * Country code for where this name applies.
   */
  country: fhir.ICodeableConcept|null;
  /**
   * Jurisdiction code for where this name applies.
   */
  jurisdiction?: fhir.ICodeableConcept|undefined;
  /**
   * Language code for this name.
   */
  language: fhir.ICodeableConcept|null;
}
/**
 * The product's name, including full name and possibly coded parts.
 */
export type IMedicinalProductName = fhir.IBackboneElement & {
  /**
   * Country where the name applies.
   */
  countryLanguage?: fhir.IMedicinalProductNameCountryLanguage[]|undefined;
  /**
   * Coding words or phrases of the name.
   */
  namePart?: fhir.IMedicinalProductNameNamePart[]|undefined;
  /**
   * The full product name.
   */
  productName: string|null;
  _productName?: fhir.IFhirElement|undefined;
}
/**
 * An operation applied to the product, for manufacturing or adminsitrative purpose.
 */
export type IMedicinalProductManufacturingBusinessOperation = fhir.IBackboneElement & {
  /**
   * Regulatory authorization reference number.
   */
  authorisationReferenceNumber?: fhir.IIdentifier|undefined;
  /**
   * To indicate if this proces is commercially confidential.
   */
  confidentialityIndicator?: fhir.ICodeableConcept|undefined;
  /**
   * Regulatory authorization date.
   */
  effectiveDate?: string|undefined;
  _effectiveDate?: fhir.IFhirElement|undefined;
  /**
   * The manufacturer or establishment associated with the process.
   */
  manufacturer?: fhir.IReference[]|undefined;
  /**
   * The type of manufacturing operation.
   */
  operationType?: fhir.ICodeableConcept|undefined;
  /**
   * A regulator which oversees the operation.
   */
  regulator?: fhir.IReference|undefined;
}
/**
 * Indicates if the medicinal product has an orphan designation for the treatment of a rare disease.
 */
export type IMedicinalProductSpecialDesignation = fhir.IBackboneElement & {
  /**
   * Date when the designation was granted.
   */
  date?: string|undefined;
  _date?: fhir.IFhirElement|undefined;
  /**
   * Identifier for the designation, or procedure number.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * Condition for which the medicinal use applies.
   */
  indicationCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * Condition for which the medicinal use applies.
   */
  indicationReference?: fhir.IReference|undefined;
  /**
   * The intended use of the product, e.g. prevention, treatment.
   */
  intendedUse?: fhir.ICodeableConcept|undefined;
  /**
   * Animal species for which this applies.
   */
  species?: fhir.ICodeableConcept|undefined;
  /**
   * For example granted, pending, expired or withdrawn.
   */
  status?: fhir.ICodeableConcept|undefined;
  /**
   * The type of special designation, e.g. orphan drug, minor use.
   */
  type?: fhir.ICodeableConcept|undefined;
}
/**
 * Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).
 */
export type IMedicinalProduct = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "MedicinalProduct";
  /**
   * Whether the Medicinal Product is subject to additional monitoring for regulatory reasons.
   */
  additionalMonitoringIndicator?: fhir.ICodeableConcept|undefined;
  /**
   * Supporting documentation, typically for regulatory submission.
   */
  attachedDocument?: fhir.IReference[]|undefined;
  /**
   * Clinical trials or studies that this product is involved in.
   */
  clinicalTrial?: fhir.IReference[]|undefined;
  /**
   * The dose form for a single part product, or combined form of a multiple part product.
   */
  combinedPharmaceuticalDoseForm?: fhir.ICodeableConcept|undefined;
  /**
   * A product specific contact, person (in a role), or an organization.
   */
  contact?: fhir.IReference[]|undefined;
  /**
   * Reference to another product, e.g. for linking authorised to investigational product.
   */
  crossReference?: fhir.IIdentifier[]|undefined;
  /**
   * If this medicine applies to human or veterinary uses.
   */
  domain?: fhir.ICoding|undefined;
  /**
   * Business identifier for this product. Could be an MPID.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * The legal status of supply of the medicinal product as classified by the regulator.
   */
  legalStatusOfSupply?: fhir.ICodeableConcept|undefined;
  /**
   * An operation applied to the product, for manufacturing or adminsitrative purpose.
   */
  manufacturingBusinessOperation?: fhir.IMedicinalProductManufacturingBusinessOperation[]|undefined;
  /**
   * Marketing status of the medicinal product, in contrast to marketing authorizaton.
   */
  marketingStatus?: fhir.IMarketingStatus[]|undefined;
  /**
   * A master file for to the medicinal product (e.g. Pharmacovigilance System Master File).
   */
  masterFile?: fhir.IReference[]|undefined;
  /**
   * The product's name, including full name and possibly coded parts.
   */
  name: fhir.IMedicinalProductName[]|null;
  /**
   * Package representation for the product.
   */
  packagedMedicinalProduct?: fhir.IReference[]|undefined;
  /**
   * If authorised for use in children.
   */
  paediatricUseIndicator?: fhir.ICodeableConcept|undefined;
  /**
   * Pharmaceutical aspects of product.
   */
  pharmaceuticalProduct?: fhir.IReference[]|undefined;
  /**
   * Allows the product to be classified by various systems.
   */
  productClassification?: fhir.ICodeableConcept[]|undefined;
  /**
   * Indicates if the medicinal product has an orphan designation for the treatment of a rare disease.
   */
  specialDesignation?: fhir.IMedicinalProductSpecialDesignation[]|undefined;
  /**
   * Whether the Medicinal Product is subject to special measures for regulatory reasons.
   */
  specialMeasures?: string[]|undefined;
  _specialMeasures?: fhir.IFhirElement[]|undefined;
  /**
   * Regulatory type, e.g. Investigational or Authorized.
   */
  type?: fhir.ICodeableConcept|undefined;
}
/**
 * Coding words or phrases of the name.
 */
export class MedicinalProductNameNamePart extends fhir.BackboneElement implements fhir.IMedicinalProductNameNamePart {
  /**
   * A fragment of a product name.
   */
  public part: string|null;
  public _part?: fhir.FhirElement|undefined;
  /**
   * Idenifying type for this part of the name (e.g. strength part).
   */
  public type: fhir.Coding|null;
  /**
   * Default constructor for MedicinalProductNameNamePart - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedicinalProductNameNamePart> = {}) {
    super(source);
    this.part = null;
    if (source["part"]) { this.part = source.part; }
    if (this.part === undefined) { this.part = null }
    if (source["_part"]) { this._part = new fhir.FhirElement(source._part!); }
    this.type = null;
    if (source["type"]) { this.type = new fhir.Coding(source.type!); }
    if (this.type === undefined) { this.type = null }
  }
  /**
   * Check if the current MedicinalProductNameNamePart contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["part"] === undefined) { missingElements.push("part"); }
    if (this["type"] === undefined) { missingElements.push("type"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a MedicinalProductNameNamePart from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IMedicinalProductNameNamePart):MedicinalProductNameNamePart {
    var dest:MedicinalProductNameNamePart = new MedicinalProductNameNamePart(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `MedicinalProductNameNamePart is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Country where the name applies.
 */
export class MedicinalProductNameCountryLanguage extends fhir.BackboneElement implements fhir.IMedicinalProductNameCountryLanguage {
  /**
   * Country code for where this name applies.
   */
  public country: fhir.CodeableConcept|null;
  /**
   * Jurisdiction code for where this name applies.
   */
  public jurisdiction?: fhir.CodeableConcept|undefined;
  /**
   * Language code for this name.
   */
  public language: fhir.CodeableConcept|null;
  /**
   * Default constructor for MedicinalProductNameCountryLanguage - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedicinalProductNameCountryLanguage> = {}) {
    super(source);
    this.country = null;
    if (source["country"]) { this.country = new fhir.CodeableConcept(source.country!); }
    if (this.country === undefined) { this.country = null }
    if (source["jurisdiction"]) { this.jurisdiction = new fhir.CodeableConcept(source.jurisdiction!); }
    this.language = null;
    if (source["language"]) { this.language = new fhir.CodeableConcept(source.language!); }
    if (this.language === undefined) { this.language = null }
  }
  /**
   * Check if the current MedicinalProductNameCountryLanguage contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["country"] === undefined) { missingElements.push("country"); }
    if (this["language"] === undefined) { missingElements.push("language"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a MedicinalProductNameCountryLanguage from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IMedicinalProductNameCountryLanguage):MedicinalProductNameCountryLanguage {
    var dest:MedicinalProductNameCountryLanguage = new MedicinalProductNameCountryLanguage(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `MedicinalProductNameCountryLanguage is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * The product's name, including full name and possibly coded parts.
 */
export class MedicinalProductName extends fhir.BackboneElement implements fhir.IMedicinalProductName {
  /**
   * Country where the name applies.
   */
  public countryLanguage?: fhir.MedicinalProductNameCountryLanguage[]|undefined;
  /**
   * Coding words or phrases of the name.
   */
  public namePart?: fhir.MedicinalProductNameNamePart[]|undefined;
  /**
   * The full product name.
   */
  public productName: string|null;
  public _productName?: fhir.FhirElement|undefined;
  /**
   * Default constructor for MedicinalProductName - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedicinalProductName> = {}) {
    super(source);
    if (source["countryLanguage"]) { this.countryLanguage = source.countryLanguage.map((x:Partial<fhir.IMedicinalProductNameCountryLanguage>) => new fhir.MedicinalProductNameCountryLanguage(x)); }
    if (source["namePart"]) { this.namePart = source.namePart.map((x:Partial<fhir.IMedicinalProductNameNamePart>) => new fhir.MedicinalProductNameNamePart(x)); }
    this.productName = null;
    if (source["productName"]) { this.productName = source.productName; }
    if (this.productName === undefined) { this.productName = null }
    if (source["_productName"]) { this._productName = new fhir.FhirElement(source._productName!); }
  }
  /**
   * Check if the current MedicinalProductName contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["productName"] === undefined) { missingElements.push("productName"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a MedicinalProductName from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IMedicinalProductName):MedicinalProductName {
    var dest:MedicinalProductName = new MedicinalProductName(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `MedicinalProductName is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * An operation applied to the product, for manufacturing or adminsitrative purpose.
 */
export class MedicinalProductManufacturingBusinessOperation extends fhir.BackboneElement implements fhir.IMedicinalProductManufacturingBusinessOperation {
  /**
   * Regulatory authorization reference number.
   */
  public authorisationReferenceNumber?: fhir.Identifier|undefined;
  /**
   * To indicate if this proces is commercially confidential.
   */
  public confidentialityIndicator?: fhir.CodeableConcept|undefined;
  /**
   * Regulatory authorization date.
   */
  public effectiveDate?: string|undefined;
  public _effectiveDate?: fhir.FhirElement|undefined;
  /**
   * The manufacturer or establishment associated with the process.
   */
  public manufacturer?: fhir.Reference[]|undefined;
  /**
   * The type of manufacturing operation.
   */
  public operationType?: fhir.CodeableConcept|undefined;
  /**
   * A regulator which oversees the operation.
   */
  public regulator?: fhir.Reference|undefined;
  /**
   * Default constructor for MedicinalProductManufacturingBusinessOperation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedicinalProductManufacturingBusinessOperation> = {}) {
    super(source);
    if (source["authorisationReferenceNumber"]) { this.authorisationReferenceNumber = new fhir.Identifier(source.authorisationReferenceNumber!); }
    if (source["confidentialityIndicator"]) { this.confidentialityIndicator = new fhir.CodeableConcept(source.confidentialityIndicator!); }
    if (source["effectiveDate"]) { this.effectiveDate = source.effectiveDate; }
    if (source["_effectiveDate"]) { this._effectiveDate = new fhir.FhirElement(source._effectiveDate!); }
    if (source["manufacturer"]) { this.manufacturer = source.manufacturer.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["operationType"]) { this.operationType = new fhir.CodeableConcept(source.operationType!); }
    if (source["regulator"]) { this.regulator = new fhir.Reference(source.regulator!); }
  }
  /**
   * Check if the current MedicinalProductManufacturingBusinessOperation contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a MedicinalProductManufacturingBusinessOperation from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IMedicinalProductManufacturingBusinessOperation):MedicinalProductManufacturingBusinessOperation {
    var dest:MedicinalProductManufacturingBusinessOperation = new MedicinalProductManufacturingBusinessOperation(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `MedicinalProductManufacturingBusinessOperation is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Indicates if the medicinal product has an orphan designation for the treatment of a rare disease.
 */
export class MedicinalProductSpecialDesignation extends fhir.BackboneElement implements fhir.IMedicinalProductSpecialDesignation {
  /**
   * Date when the designation was granted.
   */
  public date?: string|undefined;
  public _date?: fhir.FhirElement|undefined;
  /**
   * Identifier for the designation, or procedure number.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * Condition for which the medicinal use applies.
   */
  public indicationCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * Condition for which the medicinal use applies.
   */
  public indicationReference?: fhir.Reference|undefined;
  /**
   * The intended use of the product, e.g. prevention, treatment.
   */
  public intendedUse?: fhir.CodeableConcept|undefined;
  /**
   * Animal species for which this applies.
   */
  public species?: fhir.CodeableConcept|undefined;
  /**
   * For example granted, pending, expired or withdrawn.
   */
  public status?: fhir.CodeableConcept|undefined;
  /**
   * The type of special designation, e.g. orphan drug, minor use.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for MedicinalProductSpecialDesignation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedicinalProductSpecialDesignation> = {}) {
    super(source);
    if (source["date"]) { this.date = source.date; }
    if (source["_date"]) { this._date = new fhir.FhirElement(source._date!); }
    if (source["identifier"]) { this.identifier = source.identifier.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    if (source["indicationCodeableConcept"]) { this.indicationCodeableConcept = new fhir.CodeableConcept(source.indicationCodeableConcept!); }
    if (source["indicationReference"]) { this.indicationReference = new fhir.Reference(source.indicationReference!); }
    if (source["intendedUse"]) { this.intendedUse = new fhir.CodeableConcept(source.intendedUse!); }
    if (source["species"]) { this.species = new fhir.CodeableConcept(source.species!); }
    if (source["status"]) { this.status = new fhir.CodeableConcept(source.status!); }
    if (source["type"]) { this.type = new fhir.CodeableConcept(source.type!); }
  }
  /**
   * Check if the current MedicinalProductSpecialDesignation contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a MedicinalProductSpecialDesignation from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IMedicinalProductSpecialDesignation):MedicinalProductSpecialDesignation {
    var dest:MedicinalProductSpecialDesignation = new MedicinalProductSpecialDesignation(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `MedicinalProductSpecialDesignation is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).
 */
export class MedicinalProduct extends fhir.DomainResource implements fhir.IMedicinalProduct {
  /**
   * Resource Type Name
   */
  public override resourceType: "MedicinalProduct";
  /**
   * Whether the Medicinal Product is subject to additional monitoring for regulatory reasons.
   */
  public additionalMonitoringIndicator?: fhir.CodeableConcept|undefined;
  /**
   * Supporting documentation, typically for regulatory submission.
   */
  public attachedDocument?: fhir.Reference[]|undefined;
  /**
   * Clinical trials or studies that this product is involved in.
   */
  public clinicalTrial?: fhir.Reference[]|undefined;
  /**
   * The dose form for a single part product, or combined form of a multiple part product.
   */
  public combinedPharmaceuticalDoseForm?: fhir.CodeableConcept|undefined;
  /**
   * A product specific contact, person (in a role), or an organization.
   */
  public contact?: fhir.Reference[]|undefined;
  /**
   * Reference to another product, e.g. for linking authorised to investigational product.
   */
  public crossReference?: fhir.Identifier[]|undefined;
  /**
   * If this medicine applies to human or veterinary uses.
   */
  public domain?: fhir.Coding|undefined;
  /**
   * Business identifier for this product. Could be an MPID.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * The legal status of supply of the medicinal product as classified by the regulator.
   */
  public legalStatusOfSupply?: fhir.CodeableConcept|undefined;
  /**
   * An operation applied to the product, for manufacturing or adminsitrative purpose.
   */
  public manufacturingBusinessOperation?: fhir.MedicinalProductManufacturingBusinessOperation[]|undefined;
  /**
   * Marketing status of the medicinal product, in contrast to marketing authorizaton.
   */
  public marketingStatus?: fhir.MarketingStatus[]|undefined;
  /**
   * A master file for to the medicinal product (e.g. Pharmacovigilance System Master File).
   */
  public masterFile?: fhir.Reference[]|undefined;
  /**
   * The product's name, including full name and possibly coded parts.
   */
  public name: fhir.MedicinalProductName[]|null;
  /**
   * Package representation for the product.
   */
  public packagedMedicinalProduct?: fhir.Reference[]|undefined;
  /**
   * If authorised for use in children.
   */
  public paediatricUseIndicator?: fhir.CodeableConcept|undefined;
  /**
   * Pharmaceutical aspects of product.
   */
  public pharmaceuticalProduct?: fhir.Reference[]|undefined;
  /**
   * Allows the product to be classified by various systems.
   */
  public productClassification?: fhir.CodeableConcept[]|undefined;
  /**
   * Indicates if the medicinal product has an orphan designation for the treatment of a rare disease.
   */
  public specialDesignation?: fhir.MedicinalProductSpecialDesignation[]|undefined;
  /**
   * Whether the Medicinal Product is subject to special measures for regulatory reasons.
   */
  public specialMeasures?: string[]|undefined;
  public _specialMeasures?: fhir.FhirElement[]|undefined;
  /**
   * Regulatory type, e.g. Investigational or Authorized.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for MedicinalProduct - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedicinalProduct> = {}) {
    super(source);
    this.resourceType = 'MedicinalProduct';
    if (source["additionalMonitoringIndicator"]) { this.additionalMonitoringIndicator = new fhir.CodeableConcept(source.additionalMonitoringIndicator!); }
    if (source["attachedDocument"]) { this.attachedDocument = source.attachedDocument.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["clinicalTrial"]) { this.clinicalTrial = source.clinicalTrial.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["combinedPharmaceuticalDoseForm"]) { this.combinedPharmaceuticalDoseForm = new fhir.CodeableConcept(source.combinedPharmaceuticalDoseForm!); }
    if (source["contact"]) { this.contact = source.contact.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["crossReference"]) { this.crossReference = source.crossReference.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    if (source["domain"]) { this.domain = new fhir.Coding(source.domain!); }
    if (source["identifier"]) { this.identifier = source.identifier.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    if (source["legalStatusOfSupply"]) { this.legalStatusOfSupply = new fhir.CodeableConcept(source.legalStatusOfSupply!); }
    if (source["manufacturingBusinessOperation"]) { this.manufacturingBusinessOperation = source.manufacturingBusinessOperation.map((x:Partial<fhir.IMedicinalProductManufacturingBusinessOperation>) => new fhir.MedicinalProductManufacturingBusinessOperation(x)); }
    if (source["marketingStatus"]) { this.marketingStatus = source.marketingStatus.map((x:Partial<fhir.IMarketingStatus>) => new fhir.MarketingStatus(x)); }
    if (source["masterFile"]) { this.masterFile = source.masterFile.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    this.name = null;
    if (source["name"]) { this.name = source.name.map((x:Partial<fhir.IMedicinalProductName>) => new fhir.MedicinalProductName(x)); }
    if (this.name === undefined) { this.name = null }
    if (source["packagedMedicinalProduct"]) { this.packagedMedicinalProduct = source.packagedMedicinalProduct.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["paediatricUseIndicator"]) { this.paediatricUseIndicator = new fhir.CodeableConcept(source.paediatricUseIndicator!); }
    if (source["pharmaceuticalProduct"]) { this.pharmaceuticalProduct = source.pharmaceuticalProduct.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["productClassification"]) { this.productClassification = source.productClassification.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["specialDesignation"]) { this.specialDesignation = source.specialDesignation.map((x:Partial<fhir.IMedicinalProductSpecialDesignation>) => new fhir.MedicinalProductSpecialDesignation(x)); }
    if (source["specialMeasures"]) { this.specialMeasures = source.specialMeasures.map((x) => (x)); }
    if (source["_specialMeasures"]) { this._specialMeasures = source._specialMeasures.map((x:Partial<fhir.IFhirElement>) => new fhir.FhirElement(x)); }
    if (source["type"]) { this.type = new fhir.CodeableConcept(source.type!); }
  }
  /**
   * Check if the current MedicinalProduct contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if ((!this["name"]) || (this["name"].length === 0)) { missingElements.push("name"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a MedicinalProduct from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IMedicinalProduct):MedicinalProduct {
    var dest:MedicinalProduct = new MedicinalProduct(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `MedicinalProduct is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
