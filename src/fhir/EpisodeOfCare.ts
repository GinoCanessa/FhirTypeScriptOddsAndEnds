// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: EpisodeOfCare

import * as fhir from '../fhir.js';

import { EpisodeOfCareStatusValueSet, EpisodeOfCareStatusValueSetType,} from '../fhirValueSets/EpisodeOfCareStatusValueSet.js';
import { EpisodeOfCareStatusValueSetEnum } from '../valueSetEnums.js';
import { DiagnosisRoleValueSet, DiagnosisRoleValueSetType,} from '../fhirValueSets/DiagnosisRoleValueSet.js';
import { DiagnosisRoleValueSetEnum } from '../valueSetEnums.js';
import { EpisodeofcareTypeValueSet, EpisodeofcareTypeValueSetType,} from '../fhirValueSets/EpisodeofcareTypeValueSet.js';
import { EpisodeofcareTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Valid arguments for the EpisodeOfCareStatusHistory type.
 */
export interface EpisodeOfCareStatusHistoryArgs extends fhir.BackboneElementArgs {
  /**
   * planned | waitlist | active | onhold | finished | cancelled.
   */
  status: EpisodeOfCareStatusValueSetEnum|null;
  /**
   * The period during this EpisodeOfCare that the specific status applied.
   */
  period: fhir.PeriodArgs|null;
}

/**
 * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
 */
export class EpisodeOfCareStatusHistory extends fhir.BackboneElement {
  readonly __dataType:string = 'EpisodeOfCareStatusHistory';
  /**
   * planned | waitlist | active | onhold | finished | cancelled.
   */
  public status: EpisodeOfCareStatusValueSetEnum|null;
  /**
   * The period during this EpisodeOfCare that the specific status applied.
   */
  public period: fhir.Period|null;
  /**
   * Default constructor for EpisodeOfCareStatusHistory - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<EpisodeOfCareStatusHistoryArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['status']) { this.status = source.status; }
    else { this.status = null; }
    if (source['period']) { this.period = new fhir.Period(source.period); }
    else { this.period = null; }
  }
  /**
   * Required-bound Value Set for status
   */
  public static statusRequiredValueSet():EpisodeOfCareStatusValueSetType {
    return EpisodeOfCareStatusValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['status']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property status:EpisodeOfCareStatusValueSetEnum fhir: EpisodeOfCare.statusHistory.status:code", }));
    }
    if (!this['period']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property period:fhir.Period fhir: EpisodeOfCare.statusHistory.period:Period", }));
    }
    if (this["period"]) { outcome.issue!.push(...this.period.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the EpisodeOfCareDiagnosis type.
 */
export interface EpisodeOfCareDiagnosisArgs extends fhir.BackboneElementArgs {
  /**
   * A list of conditions/problems/diagnoses that this episode of care is intended to be providing care for.
   */
  condition: fhir.ReferenceArgs|null;
  /**
   * Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge …).
   */
  role?: fhir.CodeableConceptArgs|undefined;
  /**
   * Ranking of the diagnosis (for each role type).
   */
  rank?: fhir.FhirPositiveInt|number|undefined;
}

/**
 * The list of diagnosis relevant to this episode of care.
 */
export class EpisodeOfCareDiagnosis extends fhir.BackboneElement {
  readonly __dataType:string = 'EpisodeOfCareDiagnosis';
  /**
   * A list of conditions/problems/diagnoses that this episode of care is intended to be providing care for.
   */
  public condition: fhir.Reference|null;
  /**
   * Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge …).
   */
  public role?: fhir.CodeableConcept|undefined;
  /**
   * Ranking of the diagnosis (for each role type).
   */
  public rank?: fhir.FhirPositiveInt|undefined;
  /**
   * Default constructor for EpisodeOfCareDiagnosis - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<EpisodeOfCareDiagnosisArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['condition']) { this.condition = new fhir.Reference(source.condition); }
    else { this.condition = null; }
    if (source['role']) { this.role = new fhir.CodeableConcept(source.role); }
    if (source['rank']) { this.rank = new fhir.FhirPositiveInt({value: source.rank}); }
  }
  /**
   * Preferred-bound Value Set for role
   */
  public static rolePreferredValueSet():DiagnosisRoleValueSetType {
    return DiagnosisRoleValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['condition']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property condition:fhir.Reference fhir: EpisodeOfCare.diagnosis.condition:Reference", }));
    }
    if (this["condition"]) { outcome.issue!.push(...this.condition.doModelValidation().issue!); }
    if (this["role"]) { outcome.issue!.push(...this.role.doModelValidation().issue!); }
    if (this["rank"]) { outcome.issue!.push(...this.rank.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the EpisodeOfCare type.
 */
export interface EpisodeOfCareArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "EpisodeOfCare"|undefined;
  /**
   * The EpisodeOfCare may be known by different identifiers for different contexts of use, such as when an external agency is tracking the Episode for funding purposes.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the episode as not currently valid.
   */
  status: EpisodeOfCareStatusValueSetEnum|null;
  /**
   * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
   */
  statusHistory?: fhir.EpisodeOfCareStatusHistoryArgs[]|undefined;
  /**
   * The type can be very important in processing as this could be used in determining if the EpisodeOfCare is relevant to specific government reporting, or other types of classifications.
   */
  type?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * The list of diagnosis relevant to this episode of care.
   */
  diagnosis?: fhir.EpisodeOfCareDiagnosisArgs[]|undefined;
  /**
   * The patient who is the focus of this episode of care.
   */
  patient: fhir.ReferenceArgs|null;
  /**
   * The organization that has assumed the specific responsibilities for the specified duration.
   */
  managingOrganization?: fhir.ReferenceArgs|undefined;
  /**
   * The interval during which the managing organization assumes the defined responsibility.
   */
  period?: fhir.PeriodArgs|undefined;
  /**
   * Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.
   */
  referralRequest?: fhir.ReferenceArgs[]|undefined;
  /**
   * The practitioner that is the care manager/care coordinator for this patient.
   */
  careManager?: fhir.ReferenceArgs|undefined;
  /**
   * The list of practitioners that may be facilitating this episode of care for specific purposes.
   */
  team?: fhir.ReferenceArgs[]|undefined;
  /**
   * The billing system may choose to allocate billable items associated with the EpisodeOfCare to different referenced Accounts based on internal business rules.
   */
  account?: fhir.ReferenceArgs[]|undefined;
}

/**
 * An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
 */
export class EpisodeOfCare extends fhir.DomainResource {
  readonly __dataType:string = 'EpisodeOfCare';
  /**
   * Resource Type Name
   */
  public resourceType: "EpisodeOfCare";
  /**
   * The EpisodeOfCare may be known by different identifiers for different contexts of use, such as when an external agency is tracking the Episode for funding purposes.
   */
  public identifier?: fhir.Identifier[]|undefined = [];
  /**
   * This element is labeled as a modifier because the status contains codes that mark the episode as not currently valid.
   */
  public status: EpisodeOfCareStatusValueSetEnum|null;
  /**
   * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
   */
  public statusHistory?: fhir.EpisodeOfCareStatusHistory[]|undefined = [];
  /**
   * The type can be very important in processing as this could be used in determining if the EpisodeOfCare is relevant to specific government reporting, or other types of classifications.
   */
  public type?: fhir.CodeableConcept[]|undefined = [];
  /**
   * The list of diagnosis relevant to this episode of care.
   */
  public diagnosis?: fhir.EpisodeOfCareDiagnosis[]|undefined = [];
  /**
   * The patient who is the focus of this episode of care.
   */
  public patient: fhir.Reference|null;
  /**
   * The organization that has assumed the specific responsibilities for the specified duration.
   */
  public managingOrganization?: fhir.Reference|undefined;
  /**
   * The interval during which the managing organization assumes the defined responsibility.
   */
  public period?: fhir.Period|undefined;
  /**
   * Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.
   */
  public referralRequest?: fhir.Reference[]|undefined = [];
  /**
   * The practitioner that is the care manager/care coordinator for this patient.
   */
  public careManager?: fhir.Reference|undefined;
  /**
   * The list of practitioners that may be facilitating this episode of care for specific purposes.
   */
  public team?: fhir.Reference[]|undefined = [];
  /**
   * The billing system may choose to allocate billable items associated with the EpisodeOfCare to different referenced Accounts based on internal business rules.
   */
  public account?: fhir.Reference[]|undefined = [];
  /**
   * Default constructor for EpisodeOfCare - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<EpisodeOfCareArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'EpisodeOfCare';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['status']) { this.status = source.status; }
    else { this.status = null; }
    if (source['statusHistory']) { this.statusHistory = source.statusHistory.map((x) => new fhir.EpisodeOfCareStatusHistory(x)); }
    if (source['type']) { this.type = source.type.map((x) => new fhir.CodeableConcept(x)); }
    if (source['diagnosis']) { this.diagnosis = source.diagnosis.map((x) => new fhir.EpisodeOfCareDiagnosis(x)); }
    if (source['patient']) { this.patient = new fhir.Reference(source.patient); }
    else { this.patient = null; }
    if (source['managingOrganization']) { this.managingOrganization = new fhir.Reference(source.managingOrganization); }
    if (source['period']) { this.period = new fhir.Period(source.period); }
    if (source['referralRequest']) { this.referralRequest = source.referralRequest.map((x) => new fhir.Reference(x)); }
    if (source['careManager']) { this.careManager = new fhir.Reference(source.careManager); }
    if (source['team']) { this.team = source.team.map((x) => new fhir.Reference(x)); }
    if (source['account']) { this.account = source.account.map((x) => new fhir.Reference(x)); }
  }
  /**
   * Required-bound Value Set for status
   */
  public static statusRequiredValueSet():EpisodeOfCareStatusValueSetType {
    return EpisodeOfCareStatusValueSet;
  }
  /**
   * Example-bound Value Set for type
   */
  public static typeExampleValueSet():EpisodeofcareTypeValueSetType {
    return EpisodeofcareTypeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['resourceType']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property resourceType:'EpisodeOfCare' fhir: EpisodeOfCare.resourceType:'EpisodeOfCare'", }));
    }
    if (this["identifier"]) { this.identifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (!this['status']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property status:EpisodeOfCareStatusValueSetEnum fhir: EpisodeOfCare.status:code", }));
    }
    if (this["statusHistory"]) { this.statusHistory.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["type"]) { this.type.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["diagnosis"]) { this.diagnosis.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (!this['patient']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property patient:fhir.Reference fhir: EpisodeOfCare.patient:Reference", }));
    }
    if (this["patient"]) { outcome.issue!.push(...this.patient.doModelValidation().issue!); }
    if (this["managingOrganization"]) { outcome.issue!.push(...this.managingOrganization.doModelValidation().issue!); }
    if (this["period"]) { outcome.issue!.push(...this.period.doModelValidation().issue!); }
    if (this["referralRequest"]) { this.referralRequest.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["careManager"]) { outcome.issue!.push(...this.careManager.doModelValidation().issue!); }
    if (this["team"]) { this.team.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["account"]) { this.account.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
