// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
 */
export type IEpisodeOfCareStatusHistory = fhir.IBackboneElement & {
  /**
   * The period during this EpisodeOfCare that the specific status applied.
   */
  period: fhir.IPeriod|null;
  /**
   * planned | waitlist | active | onhold | finished | cancelled.
   */
  status: EpisodeOfCareStatusHistoryStatusEnum|null;
  _status?: fhir.IFhirElement|undefined;
}
/**
 * The list of diagnosis relevant to this episode of care.
 */
export type IEpisodeOfCareDiagnosis = fhir.IBackboneElement & {
  /**
   * A list of conditions/problems/diagnoses that this episode of care is intended to be providing care for.
   */
  condition: fhir.IReference|null;
  /**
   * Ranking of the diagnosis (for each role type).
   */
  rank?: number|undefined;
  _rank?: fhir.IFhirElement|undefined;
  /**
   * Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge …).
   */
  role?: fhir.ICodeableConcept|undefined;
}
/**
 * An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
 */
export type IEpisodeOfCare = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "EpisodeOfCare";
  /**
   * The billing system may choose to allocate billable items associated with the EpisodeOfCare to different referenced Accounts based on internal business rules.
   */
  account?: fhir.IReference[]|undefined;
  /**
   * The practitioner that is the care manager/care coordinator for this patient.
   */
  careManager?: fhir.IReference|undefined;
  /**
   * The list of diagnosis relevant to this episode of care.
   */
  diagnosis?: fhir.IEpisodeOfCareDiagnosis[]|undefined;
  /**
   * The EpisodeOfCare may be known by different identifiers for different contexts of use, such as when an external agency is tracking the Episode for funding purposes.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * The organization that has assumed the specific responsibilities for the specified duration.
   */
  managingOrganization?: fhir.IReference|undefined;
  /**
   * The patient who is the focus of this episode of care.
   */
  patient: fhir.IReference|null;
  /**
   * The interval during which the managing organization assumes the defined responsibility.
   */
  period?: fhir.IPeriod|undefined;
  /**
   * Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.
   */
  referralRequest?: fhir.IReference[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the episode as not currently valid.
   */
  status: EpisodeOfCareStatusEnum|null;
  _status?: fhir.IFhirElement|undefined;
  /**
   * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
   */
  statusHistory?: fhir.IEpisodeOfCareStatusHistory[]|undefined;
  /**
   * The list of practitioners that may be facilitating this episode of care for specific purposes.
   */
  team?: fhir.IReference[]|undefined;
  /**
   * The type can be very important in processing as this could be used in determining if the EpisodeOfCare is relevant to specific government reporting, or other types of classifications.
   */
  type?: fhir.ICodeableConcept[]|undefined;
}
/**
 * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
 */
export class EpisodeOfCareStatusHistory extends fhir.BackboneElement implements fhir.IEpisodeOfCareStatusHistory {
  /**
   * The period during this EpisodeOfCare that the specific status applied.
   */
  public period: fhir.Period|null;
  /**
   * planned | waitlist | active | onhold | finished | cancelled.
   */
  public status: EpisodeOfCareStatusHistoryStatusEnum|null;
  public _status?: fhir.FhirElement|undefined;
  /**
   * Default constructor for EpisodeOfCareStatusHistory - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IEpisodeOfCareStatusHistory> = {}) {
    super(source);
    this.period = null;
    if (source["period"]) { this.period = new fhir.Period(source.period!); }
    if (this.period === undefined) { this.period = null }
    this.status = null;
    if (source["status"]) { this.status = source.status; }
    if (this.status === undefined) { this.status = null }
    if (source["_status"]) { this._status = new fhir.FhirElement(source._status!); }
  }
  /**
   * Check if the current EpisodeOfCareStatusHistory contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["period"] === undefined) { missingElements.push("period"); }
    if (this["status"] === undefined) { missingElements.push("status"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a EpisodeOfCareStatusHistory from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IEpisodeOfCareStatusHistory):EpisodeOfCareStatusHistory {
    var dest:EpisodeOfCareStatusHistory = new EpisodeOfCareStatusHistory(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `EpisodeOfCareStatusHistory is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * The list of diagnosis relevant to this episode of care.
 */
export class EpisodeOfCareDiagnosis extends fhir.BackboneElement implements fhir.IEpisodeOfCareDiagnosis {
  /**
   * A list of conditions/problems/diagnoses that this episode of care is intended to be providing care for.
   */
  public condition: fhir.Reference|null;
  /**
   * Ranking of the diagnosis (for each role type).
   */
  public rank?: number|undefined;
  public _rank?: fhir.FhirElement|undefined;
  /**
   * Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge …).
   */
  public role?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for EpisodeOfCareDiagnosis - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IEpisodeOfCareDiagnosis> = {}) {
    super(source);
    this.condition = null;
    if (source["condition"]) { this.condition = new fhir.Reference(source.condition!); }
    if (this.condition === undefined) { this.condition = null }
    if (source["rank"]) { this.rank = source.rank; }
    if (source["_rank"]) { this._rank = new fhir.FhirElement(source._rank!); }
    if (source["role"]) { this.role = new fhir.CodeableConcept(source.role!); }
  }
  /**
   * Check if the current EpisodeOfCareDiagnosis contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["condition"] === undefined) { missingElements.push("condition"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a EpisodeOfCareDiagnosis from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IEpisodeOfCareDiagnosis):EpisodeOfCareDiagnosis {
    var dest:EpisodeOfCareDiagnosis = new EpisodeOfCareDiagnosis(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `EpisodeOfCareDiagnosis is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
 */
export class EpisodeOfCare extends fhir.DomainResource implements fhir.IEpisodeOfCare {
  /**
   * Resource Type Name
   */
  public override resourceType: "EpisodeOfCare";
  /**
   * The billing system may choose to allocate billable items associated with the EpisodeOfCare to different referenced Accounts based on internal business rules.
   */
  public account?: fhir.Reference[]|undefined;
  /**
   * The practitioner that is the care manager/care coordinator for this patient.
   */
  public careManager?: fhir.Reference|undefined;
  /**
   * The list of diagnosis relevant to this episode of care.
   */
  public diagnosis?: fhir.EpisodeOfCareDiagnosis[]|undefined;
  /**
   * The EpisodeOfCare may be known by different identifiers for different contexts of use, such as when an external agency is tracking the Episode for funding purposes.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * The organization that has assumed the specific responsibilities for the specified duration.
   */
  public managingOrganization?: fhir.Reference|undefined;
  /**
   * The patient who is the focus of this episode of care.
   */
  public patient: fhir.Reference|null;
  /**
   * The interval during which the managing organization assumes the defined responsibility.
   */
  public period?: fhir.Period|undefined;
  /**
   * Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.
   */
  public referralRequest?: fhir.Reference[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the episode as not currently valid.
   */
  public status: EpisodeOfCareStatusEnum|null;
  public _status?: fhir.FhirElement|undefined;
  /**
   * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
   */
  public statusHistory?: fhir.EpisodeOfCareStatusHistory[]|undefined;
  /**
   * The list of practitioners that may be facilitating this episode of care for specific purposes.
   */
  public team?: fhir.Reference[]|undefined;
  /**
   * The type can be very important in processing as this could be used in determining if the EpisodeOfCare is relevant to specific government reporting, or other types of classifications.
   */
  public type?: fhir.CodeableConcept[]|undefined;
  /**
   * Default constructor for EpisodeOfCare - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IEpisodeOfCare> = {}) {
    super(source);
    this.resourceType = 'EpisodeOfCare';
    if (source["account"]) { this.account = source.account.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["careManager"]) { this.careManager = new fhir.Reference(source.careManager!); }
    if (source["diagnosis"]) { this.diagnosis = source.diagnosis.map((x:Partial<fhir.IEpisodeOfCareDiagnosis>) => new fhir.EpisodeOfCareDiagnosis(x)); }
    if (source["identifier"]) { this.identifier = source.identifier.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    if (source["managingOrganization"]) { this.managingOrganization = new fhir.Reference(source.managingOrganization!); }
    this.patient = null;
    if (source["patient"]) { this.patient = new fhir.Reference(source.patient!); }
    if (this.patient === undefined) { this.patient = null }
    if (source["period"]) { this.period = new fhir.Period(source.period!); }
    if (source["referralRequest"]) { this.referralRequest = source.referralRequest.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    this.status = null;
    if (source["status"]) { this.status = source.status; }
    if (this.status === undefined) { this.status = null }
    if (source["_status"]) { this._status = new fhir.FhirElement(source._status!); }
    if (source["statusHistory"]) { this.statusHistory = source.statusHistory.map((x:Partial<fhir.IEpisodeOfCareStatusHistory>) => new fhir.EpisodeOfCareStatusHistory(x)); }
    if (source["team"]) { this.team = source.team.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["type"]) { this.type = source.type.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
  }
  /**
   * Check if the current EpisodeOfCare contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["patient"] === undefined) { missingElements.push("patient"); }
    if (this["status"] === undefined) { missingElements.push("status"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a EpisodeOfCare from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IEpisodeOfCare):EpisodeOfCare {
    var dest:EpisodeOfCare = new EpisodeOfCare(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `EpisodeOfCare is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the EpisodeOfCare.statusHistory.status field
 */
export enum EpisodeOfCareStatusHistoryStatusEnum {
  PLANNED = "planned",
  WAITLIST = "waitlist",
  ACTIVE = "active",
  ONHOLD = "onhold",
  FINISHED = "finished",
  CANCELLED = "cancelled",
  ENTERED_IN_ERROR = "entered-in-error",
}
/**
 * Code Values for the EpisodeOfCare.status field
 */
export enum EpisodeOfCareStatusEnum {
  PLANNED = "planned",
  WAITLIST = "waitlist",
  ACTIVE = "active",
  ONHOLD = "onhold",
  FINISHED = "finished",
  CANCELLED = "cancelled",
  ENTERED_IN_ERROR = "entered-in-error",
}
