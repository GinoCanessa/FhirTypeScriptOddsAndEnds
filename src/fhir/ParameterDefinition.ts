// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
 */
export type IParameterDefinition = fhir.IFhirElement & {
  /**
   * A brief discussion of what the parameter is for and how it is used by the module.
   */
  documentation?: string|undefined;
  _documentation?: fhir.IFhirElement|undefined;
  /**
   * The maximum number of times this element is permitted to appear in the request or response.
   */
  max?: string|undefined;
  _max?: fhir.IFhirElement|undefined;
  /**
   * The minimum number of times this parameter SHALL appear in the request or response.
   */
  min?: number|undefined;
  _min?: fhir.IFhirElement|undefined;
  /**
   * The name of the parameter used to allow access to the value of the parameter in evaluation contexts.
   */
  name?: string|undefined;
  _name?: fhir.IFhirElement|undefined;
  /**
   * If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.
   */
  profile?: string|undefined;
  _profile?: fhir.IFhirElement|undefined;
  /**
   * The type of the parameter.
   */
  type: string|null;
  _type?: fhir.IFhirElement|undefined;
  /**
   * Whether the parameter is input or output for the module.
   */
  use: ParameterDefinitionUseEnum|null;
  _use?: fhir.IFhirElement|undefined;
}
/**
 * The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
 */
export class ParameterDefinition extends fhir.FhirElement implements fhir.IParameterDefinition {
  /**
   * A brief discussion of what the parameter is for and how it is used by the module.
   */
  public documentation?: string|undefined;
  public _documentation?: fhir.FhirElement|undefined;
  /**
   * The maximum number of times this element is permitted to appear in the request or response.
   */
  public max?: string|undefined;
  public _max?: fhir.FhirElement|undefined;
  /**
   * The minimum number of times this parameter SHALL appear in the request or response.
   */
  public min?: number|undefined;
  public _min?: fhir.FhirElement|undefined;
  /**
   * The name of the parameter used to allow access to the value of the parameter in evaluation contexts.
   */
  public name?: string|undefined;
  public _name?: fhir.FhirElement|undefined;
  /**
   * If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.
   */
  public profile?: string|undefined;
  public _profile?: fhir.FhirElement|undefined;
  /**
   * The type of the parameter.
   */
  public type: string|null;
  public _type?: fhir.FhirElement|undefined;
  /**
   * Whether the parameter is input or output for the module.
   */
  public use: ParameterDefinitionUseEnum|null;
  public _use?: fhir.FhirElement|undefined;
  /**
   * Default constructor for ParameterDefinition - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IParameterDefinition> = {}) {
    super(source);
    if (source["documentation"]) { this.documentation = source.documentation; }
    if (source["_documentation"]) { this._documentation = new fhir.FhirElement(source._documentation!); }
    if (source["max"]) { this.max = source.max; }
    if (source["_max"]) { this._max = new fhir.FhirElement(source._max!); }
    if (source["min"]) { this.min = source.min; }
    if (source["_min"]) { this._min = new fhir.FhirElement(source._min!); }
    if (source["name"]) { this.name = source.name; }
    if (source["_name"]) { this._name = new fhir.FhirElement(source._name!); }
    if (source["profile"]) { this.profile = source.profile; }
    if (source["_profile"]) { this._profile = new fhir.FhirElement(source._profile!); }
    this.type = null;
    if (source["type"]) { this.type = source.type; }
    if (this.type === undefined) { this.type = null }
    if (source["_type"]) { this._type = new fhir.FhirElement(source._type!); }
    this.use = null;
    if (source["use"]) { this.use = source.use; }
    if (this.use === undefined) { this.use = null }
    if (source["_use"]) { this._use = new fhir.FhirElement(source._use!); }
  }
  /**
   * Check if the current ParameterDefinition contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["type"] === undefined) { missingElements.push("type"); }
    if (this["use"] === undefined) { missingElements.push("use"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ParameterDefinition from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IParameterDefinition):ParameterDefinition {
    var dest:ParameterDefinition = new ParameterDefinition(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `ParameterDefinition is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the ParameterDefinition.use field
 */
export enum ParameterDefinitionUseEnum {
  IN = "in",
  OUT = "out",
}
