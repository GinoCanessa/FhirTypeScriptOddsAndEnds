// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: ParameterDefinition

import * as fhir from '../fhir.js';

import { OperationParameterUseValueSet, OperationParameterUseValueSetType,} from '../fhirValueSets/OperationParameterUseValueSet.js';
import { OperationParameterUseValueSetEnum } from '../valueSetEnums.js';
import { AllTypesValueSet, AllTypesValueSetType,} from '../fhirValueSets/AllTypesValueSet.js';
import { AllTypesValueSetEnum } from '../valueSetEnums.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Valid arguments for the ParameterDefinition type.
 */
export interface ParameterDefinitionArgs extends fhir.FhirElementArgs {
  /**
   * The name of the parameter used to allow access to the value of the parameter in evaluation contexts.
   */
  name?: fhir.FhirCode|string|undefined;
  /**
   * Whether the parameter is input or output for the module.
   */
  use: OperationParameterUseValueSetEnum|null;
  /**
   * The minimum number of times this parameter SHALL appear in the request or response.
   */
  min?: fhir.FhirInteger|number|undefined;
  /**
   * The maximum number of times this element is permitted to appear in the request or response.
   */
  max?: fhir.FhirString|string|undefined;
  /**
   * A brief discussion of what the parameter is for and how it is used by the module.
   */
  documentation?: fhir.FhirString|string|undefined;
  /**
   * The type of the parameter.
   */
  type: fhir.FhirCode|string|undefined;
  /**
   * If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.
   */
  profile?: fhir.FhirCanonical|string|undefined;
}

/**
 * The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
 */
export class ParameterDefinition extends fhir.FhirElement {
  readonly __dataType:string = 'ParameterDefinition';
  /**
   * The name of the parameter used to allow access to the value of the parameter in evaluation contexts.
   */
  public name?: fhir.FhirCode|undefined;
  /**
   * Whether the parameter is input or output for the module.
   */
  public use: OperationParameterUseValueSetEnum|null;
  /**
   * The minimum number of times this parameter SHALL appear in the request or response.
   */
  public min?: fhir.FhirInteger|undefined;
  /**
   * The maximum number of times this element is permitted to appear in the request or response.
   */
  public max?: fhir.FhirString|undefined;
  /**
   * A brief discussion of what the parameter is for and how it is used by the module.
   */
  public documentation?: fhir.FhirString|undefined;
  /**
   * The type of the parameter.
   */
  public type: fhir.FhirCode|null;
  /**
   * If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.
   */
  public profile?: fhir.FhirCanonical|undefined;
  /**
   * Default constructor for ParameterDefinition - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ParameterDefinitionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['name']) { this.name = new fhir.FhirCode({value: source.name}); }
    if (source['use']) { this.use = source.use; }
    else { this.use = null; }
    if (source['min']) { this.min = new fhir.FhirInteger({value: source.min}); }
    if (source['max']) { this.max = new fhir.FhirString({value: source.max}); }
    if (source['documentation']) { this.documentation = new fhir.FhirString({value: source.documentation}); }
    if (source['type']) { this.type = new fhir.FhirCode({value: source.type}); }
    else { this.type = null; }
    if (source['profile']) { this.profile = new fhir.FhirCanonical({value: source.profile}); }
  }
  /**
   * Required-bound Value Set for use
   */
  public static useRequiredValueSet():OperationParameterUseValueSetType {
    return OperationParameterUseValueSet;
  }
  /**
   * Required-bound Value Set for type
   */
  public static typeRequiredValueSet():AllTypesValueSetType {
    return AllTypesValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["name"]) { outcome.issue!.push(...this.name.doModelValidation().issue!); }
    if (!this['use']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property use:OperationParameterUseValueSetEnum fhir: ParameterDefinition.use:code", }));
    }
    if (this["min"]) { outcome.issue!.push(...this.min.doModelValidation().issue!); }
    if (this["max"]) { outcome.issue!.push(...this.max.doModelValidation().issue!); }
    if (this["documentation"]) { outcome.issue!.push(...this.documentation.doModelValidation().issue!); }
    if (!this['type']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property type:fhir.FhirCode fhir: ParameterDefinition.type:code", }));
    }
    if (this["type"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }
    if (this["profile"]) { outcome.issue!.push(...this.profile.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
