// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Strength expressed in terms of a reference substance.
 */
export type IMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength = fhir.IBackboneElement & {
  /**
   * The country or countries for which the strength range applies.
   */
  country?: fhir.ICodeableConcept[]|undefined;
  /**
   * For when strength is measured at a particular point or distance.
   */
  measurementPoint?: string|undefined;
  _measurementPoint?: fhir.IFhirElement|undefined;
  /**
   * Strength expressed in terms of a reference substance.
   */
  strength: fhir.IRatio|null;
  /**
   * Strength expressed in terms of a reference substance.
   */
  strengthLowLimit?: fhir.IRatio|undefined;
  /**
   * Relevant reference substance.
   */
  substance?: fhir.ICodeableConcept|undefined;
}
/**
 * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
 */
export type IMedicinalProductIngredientSpecifiedSubstanceStrength = fhir.IBackboneElement & {
  /**
   * The strength per unitary volume (or mass).
   */
  concentration?: fhir.IRatio|undefined;
  /**
   * A lower limit for the strength per unitary volume (or mass), for when there is a range. The concentration attribute then becomes the upper limit.
   */
  concentrationLowLimit?: fhir.IRatio|undefined;
  /**
   * The country or countries for which the strength range applies.
   */
  country?: fhir.ICodeableConcept[]|undefined;
  /**
   * For when strength is measured at a particular point or distance.
   */
  measurementPoint?: string|undefined;
  _measurementPoint?: fhir.IFhirElement|undefined;
  /**
   * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item.
   */
  presentation: fhir.IRatio|null;
  /**
   * A lower limit for the quantity of substance in the unit of presentation. For use when there is a range of strengths, this is the lower limit, with the presentation attribute becoming the upper limit.
   */
  presentationLowLimit?: fhir.IRatio|undefined;
  /**
   * Strength expressed in terms of a reference substance.
   */
  referenceStrength?: fhir.IMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength[]|undefined;
}
/**
 * A specified substance that comprises this ingredient.
 */
export type IMedicinalProductIngredientSpecifiedSubstance = fhir.IBackboneElement & {
  /**
   * The specified substance.
   */
  code: fhir.ICodeableConcept|null;
  /**
   * Confidentiality level of the specified substance as the ingredient.
   */
  confidentiality?: fhir.ICodeableConcept|undefined;
  /**
   * The group of specified substance, e.g. group 1 to 4.
   */
  group: fhir.ICodeableConcept|null;
  /**
   * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
   */
  strength?: fhir.IMedicinalProductIngredientSpecifiedSubstanceStrength[]|undefined;
}
/**
 * The ingredient substance.
 */
export type IMedicinalProductIngredientSubstance = fhir.IBackboneElement & {
  /**
   * The ingredient substance.
   */
  code: fhir.ICodeableConcept|null;
  /**
   * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
   */
  strength?: fhir.IMedicinalProductIngredientSpecifiedSubstanceStrength[]|undefined;
}
/**
 * An ingredient of a manufactured item or pharmaceutical product.
 */
export type IMedicinalProductIngredient = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "MedicinalProductIngredient";
  /**
   * If the ingredient is a known or suspected allergen.
   */
  allergenicIndicator?: boolean|undefined;
  _allergenicIndicator?: fhir.IFhirElement|undefined;
  /**
   * The identifier(s) of this Ingredient that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.
   */
  identifier?: fhir.IIdentifier|undefined;
  /**
   * Manufacturer of this Ingredient.
   */
  manufacturer?: fhir.IReference[]|undefined;
  /**
   * Ingredient role e.g. Active ingredient, excipient.
   */
  role: fhir.ICodeableConcept|null;
  /**
   * A specified substance that comprises this ingredient.
   */
  specifiedSubstance?: fhir.IMedicinalProductIngredientSpecifiedSubstance[]|undefined;
  /**
   * The ingredient substance.
   */
  substance?: fhir.IMedicinalProductIngredientSubstance|undefined;
}
/**
 * Strength expressed in terms of a reference substance.
 */
export class MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength extends fhir.BackboneElement implements fhir.IMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength {
  /**
   * The country or countries for which the strength range applies.
   */
  public country?: fhir.CodeableConcept[]|undefined;
  /**
   * For when strength is measured at a particular point or distance.
   */
  public measurementPoint?: string|undefined;
  public _measurementPoint?: fhir.FhirElement|undefined;
  /**
   * Strength expressed in terms of a reference substance.
   */
  public strength: fhir.Ratio|null;
  /**
   * Strength expressed in terms of a reference substance.
   */
  public strengthLowLimit?: fhir.Ratio|undefined;
  /**
   * Relevant reference substance.
   */
  public substance?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength> = {}) {
    super(source);
    if (source["country"]) { this.country = source.country.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["measurementPoint"]) { this.measurementPoint = source.measurementPoint; }
    if (source["_measurementPoint"]) { this._measurementPoint = new fhir.FhirElement(source._measurementPoint!); }
    this.strength = null;
    if (source["strength"]) { this.strength = new fhir.Ratio(source.strength!); }
    if (this.strength === undefined) { this.strength = null }
    if (source["strengthLowLimit"]) { this.strengthLowLimit = new fhir.Ratio(source.strengthLowLimit!); }
    if (source["substance"]) { this.substance = new fhir.CodeableConcept(source.substance!); }
  }
  /**
   * Check if the current MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["strength"] === undefined) { missingElements.push("strength"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength):MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength {
    var dest:MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength = new MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
 */
export class MedicinalProductIngredientSpecifiedSubstanceStrength extends fhir.BackboneElement implements fhir.IMedicinalProductIngredientSpecifiedSubstanceStrength {
  /**
   * The strength per unitary volume (or mass).
   */
  public concentration?: fhir.Ratio|undefined;
  /**
   * A lower limit for the strength per unitary volume (or mass), for when there is a range. The concentration attribute then becomes the upper limit.
   */
  public concentrationLowLimit?: fhir.Ratio|undefined;
  /**
   * The country or countries for which the strength range applies.
   */
  public country?: fhir.CodeableConcept[]|undefined;
  /**
   * For when strength is measured at a particular point or distance.
   */
  public measurementPoint?: string|undefined;
  public _measurementPoint?: fhir.FhirElement|undefined;
  /**
   * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item.
   */
  public presentation: fhir.Ratio|null;
  /**
   * A lower limit for the quantity of substance in the unit of presentation. For use when there is a range of strengths, this is the lower limit, with the presentation attribute becoming the upper limit.
   */
  public presentationLowLimit?: fhir.Ratio|undefined;
  /**
   * Strength expressed in terms of a reference substance.
   */
  public referenceStrength?: fhir.MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength[]|undefined;
  /**
   * Default constructor for MedicinalProductIngredientSpecifiedSubstanceStrength - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedicinalProductIngredientSpecifiedSubstanceStrength> = {}) {
    super(source);
    if (source["concentration"]) { this.concentration = new fhir.Ratio(source.concentration!); }
    if (source["concentrationLowLimit"]) { this.concentrationLowLimit = new fhir.Ratio(source.concentrationLowLimit!); }
    if (source["country"]) { this.country = source.country.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["measurementPoint"]) { this.measurementPoint = source.measurementPoint; }
    if (source["_measurementPoint"]) { this._measurementPoint = new fhir.FhirElement(source._measurementPoint!); }
    this.presentation = null;
    if (source["presentation"]) { this.presentation = new fhir.Ratio(source.presentation!); }
    if (this.presentation === undefined) { this.presentation = null }
    if (source["presentationLowLimit"]) { this.presentationLowLimit = new fhir.Ratio(source.presentationLowLimit!); }
    if (source["referenceStrength"]) { this.referenceStrength = source.referenceStrength.map((x:Partial<fhir.IMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength>) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(x)); }
  }
  /**
   * Check if the current MedicinalProductIngredientSpecifiedSubstanceStrength contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["presentation"] === undefined) { missingElements.push("presentation"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a MedicinalProductIngredientSpecifiedSubstanceStrength from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IMedicinalProductIngredientSpecifiedSubstanceStrength):MedicinalProductIngredientSpecifiedSubstanceStrength {
    var dest:MedicinalProductIngredientSpecifiedSubstanceStrength = new MedicinalProductIngredientSpecifiedSubstanceStrength(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `MedicinalProductIngredientSpecifiedSubstanceStrength is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * A specified substance that comprises this ingredient.
 */
export class MedicinalProductIngredientSpecifiedSubstance extends fhir.BackboneElement implements fhir.IMedicinalProductIngredientSpecifiedSubstance {
  /**
   * The specified substance.
   */
  public code: fhir.CodeableConcept|null;
  /**
   * Confidentiality level of the specified substance as the ingredient.
   */
  public confidentiality?: fhir.CodeableConcept|undefined;
  /**
   * The group of specified substance, e.g. group 1 to 4.
   */
  public group: fhir.CodeableConcept|null;
  /**
   * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
   */
  public strength?: fhir.MedicinalProductIngredientSpecifiedSubstanceStrength[]|undefined;
  /**
   * Default constructor for MedicinalProductIngredientSpecifiedSubstance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedicinalProductIngredientSpecifiedSubstance> = {}) {
    super(source);
    this.code = null;
    if (source["code"]) { this.code = new fhir.CodeableConcept(source.code!); }
    if (this.code === undefined) { this.code = null }
    if (source["confidentiality"]) { this.confidentiality = new fhir.CodeableConcept(source.confidentiality!); }
    this.group = null;
    if (source["group"]) { this.group = new fhir.CodeableConcept(source.group!); }
    if (this.group === undefined) { this.group = null }
    if (source["strength"]) { this.strength = source.strength.map((x:Partial<fhir.IMedicinalProductIngredientSpecifiedSubstanceStrength>) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrength(x)); }
  }
  /**
   * Check if the current MedicinalProductIngredientSpecifiedSubstance contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["code"] === undefined) { missingElements.push("code"); }
    if (this["group"] === undefined) { missingElements.push("group"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a MedicinalProductIngredientSpecifiedSubstance from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IMedicinalProductIngredientSpecifiedSubstance):MedicinalProductIngredientSpecifiedSubstance {
    var dest:MedicinalProductIngredientSpecifiedSubstance = new MedicinalProductIngredientSpecifiedSubstance(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `MedicinalProductIngredientSpecifiedSubstance is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * The ingredient substance.
 */
export class MedicinalProductIngredientSubstance extends fhir.BackboneElement implements fhir.IMedicinalProductIngredientSubstance {
  /**
   * The ingredient substance.
   */
  public code: fhir.CodeableConcept|null;
  /**
   * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
   */
  public strength?: fhir.MedicinalProductIngredientSpecifiedSubstanceStrength[]|undefined;
  /**
   * Default constructor for MedicinalProductIngredientSubstance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedicinalProductIngredientSubstance> = {}) {
    super(source);
    this.code = null;
    if (source["code"]) { this.code = new fhir.CodeableConcept(source.code!); }
    if (this.code === undefined) { this.code = null }
    if (source["strength"]) { this.strength = source.strength.map((x:Partial<fhir.IMedicinalProductIngredientSpecifiedSubstanceStrength>) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrength(x)); }
  }
  /**
   * Check if the current MedicinalProductIngredientSubstance contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["code"] === undefined) { missingElements.push("code"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a MedicinalProductIngredientSubstance from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IMedicinalProductIngredientSubstance):MedicinalProductIngredientSubstance {
    var dest:MedicinalProductIngredientSubstance = new MedicinalProductIngredientSubstance(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `MedicinalProductIngredientSubstance is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * An ingredient of a manufactured item or pharmaceutical product.
 */
export class MedicinalProductIngredient extends fhir.DomainResource implements fhir.IMedicinalProductIngredient {
  /**
   * Resource Type Name
   */
  public override resourceType: "MedicinalProductIngredient";
  /**
   * If the ingredient is a known or suspected allergen.
   */
  public allergenicIndicator?: boolean|undefined;
  public _allergenicIndicator?: fhir.FhirElement|undefined;
  /**
   * The identifier(s) of this Ingredient that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.
   */
  public identifier?: fhir.Identifier|undefined;
  /**
   * Manufacturer of this Ingredient.
   */
  public manufacturer?: fhir.Reference[]|undefined;
  /**
   * Ingredient role e.g. Active ingredient, excipient.
   */
  public role: fhir.CodeableConcept|null;
  /**
   * A specified substance that comprises this ingredient.
   */
  public specifiedSubstance?: fhir.MedicinalProductIngredientSpecifiedSubstance[]|undefined;
  /**
   * The ingredient substance.
   */
  public substance?: fhir.MedicinalProductIngredientSubstance|undefined;
  /**
   * Default constructor for MedicinalProductIngredient - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedicinalProductIngredient> = {}) {
    super(source);
    this.resourceType = 'MedicinalProductIngredient';
    if (source["allergenicIndicator"]) { this.allergenicIndicator = source.allergenicIndicator; }
    if (source["_allergenicIndicator"]) { this._allergenicIndicator = new fhir.FhirElement(source._allergenicIndicator!); }
    if (source["identifier"]) { this.identifier = new fhir.Identifier(source.identifier!); }
    if (source["manufacturer"]) { this.manufacturer = source.manufacturer.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    this.role = null;
    if (source["role"]) { this.role = new fhir.CodeableConcept(source.role!); }
    if (this.role === undefined) { this.role = null }
    if (source["specifiedSubstance"]) { this.specifiedSubstance = source.specifiedSubstance.map((x:Partial<fhir.IMedicinalProductIngredientSpecifiedSubstance>) => new fhir.MedicinalProductIngredientSpecifiedSubstance(x)); }
    if (source["substance"]) { this.substance = new fhir.MedicinalProductIngredientSubstance(source.substance!); }
  }
  /**
   * Check if the current MedicinalProductIngredient contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["role"] === undefined) { missingElements.push("role"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a MedicinalProductIngredient from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IMedicinalProductIngredient):MedicinalProductIngredient {
    var dest:MedicinalProductIngredient = new MedicinalProductIngredient(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `MedicinalProductIngredient is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
