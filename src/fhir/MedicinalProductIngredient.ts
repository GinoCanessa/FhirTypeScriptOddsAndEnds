// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProductIngredient

import * as fhir from '../fhir.js'


/**
 * Strength expressed in terms of a reference substance.
 */
export type IMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength = fhir.IBackboneElement & { 
  /**
   * Relevant reference substance.
   */
  substance?: fhir.ICodeableConcept|undefined;
  /**
   * Strength expressed in terms of a reference substance.
   */
  strength: fhir.IRatio|null;
  /**
   * Strength expressed in terms of a reference substance.
   */
  strengthLowLimit?: fhir.IRatio|undefined;
  /**
   * For when strength is measured at a particular point or distance.
   */
  measurementPoint?: string|undefined;
  /**
   * Extended properties for primitive element: MedicinalProductIngredient.specifiedSubstance.strength.referenceStrength.measurementPoint
   */
  _measurementPoint?: fhir.IFhirElement|undefined;
  /**
   * The country or countries for which the strength range applies.
   */
  country?: fhir.ICodeableConcept[]|undefined;
}

/**
 * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
 */
export type IMedicinalProductIngredientSpecifiedSubstanceStrength = fhir.IBackboneElement & { 
  /**
   * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item.
   */
  presentation: fhir.IRatio|null;
  /**
   * A lower limit for the quantity of substance in the unit of presentation. For use when there is a range of strengths, this is the lower limit, with the presentation attribute becoming the upper limit.
   */
  presentationLowLimit?: fhir.IRatio|undefined;
  /**
   * The strength per unitary volume (or mass).
   */
  concentration?: fhir.IRatio|undefined;
  /**
   * A lower limit for the strength per unitary volume (or mass), for when there is a range. The concentration attribute then becomes the upper limit.
   */
  concentrationLowLimit?: fhir.IRatio|undefined;
  /**
   * For when strength is measured at a particular point or distance.
   */
  measurementPoint?: string|undefined;
  /**
   * Extended properties for primitive element: MedicinalProductIngredient.specifiedSubstance.strength.measurementPoint
   */
  _measurementPoint?: fhir.IFhirElement|undefined;
  /**
   * The country or countries for which the strength range applies.
   */
  country?: fhir.ICodeableConcept[]|undefined;
  /**
   * Strength expressed in terms of a reference substance.
   */
  referenceStrength?: fhir.IMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength[]|undefined;
}

/**
 * A specified substance that comprises this ingredient.
 */
export type IMedicinalProductIngredientSpecifiedSubstance = fhir.IBackboneElement & { 
  /**
   * The specified substance.
   */
  code: fhir.ICodeableConcept|null;
  /**
   * The group of specified substance, e.g. group 1 to 4.
   */
  group: fhir.ICodeableConcept|null;
  /**
   * Confidentiality level of the specified substance as the ingredient.
   */
  confidentiality?: fhir.ICodeableConcept|undefined;
  /**
   * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
   */
  strength?: fhir.IMedicinalProductIngredientSpecifiedSubstanceStrength[]|undefined;
}

/**
 * The ingredient substance.
 */
export type IMedicinalProductIngredientSubstance = fhir.IBackboneElement & { 
  /**
   * The ingredient substance.
   */
  code: fhir.ICodeableConcept|null;
  /**
   * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
   */
  strength?: fhir.IMedicinalProductIngredientSpecifiedSubstanceStrength[]|undefined;
}

/**
 * An ingredient of a manufactured item or pharmaceutical product.
 */
export type IMedicinalProductIngredient = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "MedicinalProductIngredient";
  /**
   * The identifier(s) of this Ingredient that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.
   */
  identifier?: fhir.IIdentifier|undefined;
  /**
   * Ingredient role e.g. Active ingredient, excipient.
   */
  role: fhir.ICodeableConcept|null;
  /**
   * If the ingredient is a known or suspected allergen.
   */
  allergenicIndicator?: boolean|undefined;
  /**
   * Extended properties for primitive element: MedicinalProductIngredient.allergenicIndicator
   */
  _allergenicIndicator?: fhir.IFhirElement|undefined;
  /**
   * Manufacturer of this Ingredient.
   */
  manufacturer?: fhir.IReference[]|undefined;
  /**
   * A specified substance that comprises this ingredient.
   */
  specifiedSubstance?: fhir.IMedicinalProductIngredientSpecifiedSubstance[]|undefined;
  /**
   * The ingredient substance.
   */
  substance?: fhir.IMedicinalProductIngredientSubstance|undefined;
}

/**
 * Strength expressed in terms of a reference substance.
 */
export class MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength extends fhir.BackboneElement implements IMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength {
  /**
   * Relevant reference substance.
   */
  public substance?: fhir.CodeableConcept|undefined;
  /**
   * Strength expressed in terms of a reference substance.
   */
  public strength: fhir.Ratio|null;
  /**
   * Strength expressed in terms of a reference substance.
   */
  public strengthLowLimit?: fhir.Ratio|undefined;
  /**
   * For when strength is measured at a particular point or distance.
   */
  public measurementPoint?: string|undefined;
  /**
   * Extended properties for primitive element: MedicinalProductIngredient.specifiedSubstance.strength.referenceStrength.measurementPoint
   */
  public _measurementPoint?: fhir.FhirElement|undefined;
  /**
   * The country or countries for which the strength range applies.
   */
  public country?: fhir.CodeableConcept[]|undefined;
  /**
   * Default constructor for MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength> = { }) {
    super(source);
    if (source['substance']) { this.substance = new fhir.CodeableConcept(source.substance!); }
    if (source['strength']) { this.strength = new fhir.Ratio(source.strength!); }
    else { this.strength = null; }
    if (source['strengthLowLimit']) { this.strengthLowLimit = new fhir.Ratio(source.strengthLowLimit!); }
    if (source['measurementPoint']) { this.measurementPoint = source.measurementPoint; }
    if (source['_measurementPoint']) { this._measurementPoint = new fhir.FhirElement(source._measurementPoint!); }
    if (source['country']) { this.country = source.country.map((x) => new fhir.CodeableConcept(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["substance"]) { results.push(...this.substance.doModelValidation()); }
    if (!this["strength"]) { results.push(["strength",'Missing required element: MedicinalProductIngredient.specifiedSubstance.strength.referenceStrength.strength']); }
    if (this["strength"]) { results.push(...this.strength.doModelValidation()); }
    if (this["strengthLowLimit"]) { results.push(...this.strengthLowLimit.doModelValidation()); }
    if (this["_measurementPoint"]) { results.push(...this._measurementPoint.doModelValidation()); }
    if (this["country"]) { this.country.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
 */
export class MedicinalProductIngredientSpecifiedSubstanceStrength extends fhir.BackboneElement implements IMedicinalProductIngredientSpecifiedSubstanceStrength {
  /**
   * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item.
   */
  public presentation: fhir.Ratio|null;
  /**
   * A lower limit for the quantity of substance in the unit of presentation. For use when there is a range of strengths, this is the lower limit, with the presentation attribute becoming the upper limit.
   */
  public presentationLowLimit?: fhir.Ratio|undefined;
  /**
   * The strength per unitary volume (or mass).
   */
  public concentration?: fhir.Ratio|undefined;
  /**
   * A lower limit for the strength per unitary volume (or mass), for when there is a range. The concentration attribute then becomes the upper limit.
   */
  public concentrationLowLimit?: fhir.Ratio|undefined;
  /**
   * For when strength is measured at a particular point or distance.
   */
  public measurementPoint?: string|undefined;
  /**
   * Extended properties for primitive element: MedicinalProductIngredient.specifiedSubstance.strength.measurementPoint
   */
  public _measurementPoint?: fhir.FhirElement|undefined;
  /**
   * The country or countries for which the strength range applies.
   */
  public country?: fhir.CodeableConcept[]|undefined;
  /**
   * Strength expressed in terms of a reference substance.
   */
  public referenceStrength?: fhir.MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength[]|undefined;
  /**
   * Default constructor for MedicinalProductIngredientSpecifiedSubstanceStrength - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IMedicinalProductIngredientSpecifiedSubstanceStrength> = { }) {
    super(source);
    if (source['presentation']) { this.presentation = new fhir.Ratio(source.presentation!); }
    else { this.presentation = null; }
    if (source['presentationLowLimit']) { this.presentationLowLimit = new fhir.Ratio(source.presentationLowLimit!); }
    if (source['concentration']) { this.concentration = new fhir.Ratio(source.concentration!); }
    if (source['concentrationLowLimit']) { this.concentrationLowLimit = new fhir.Ratio(source.concentrationLowLimit!); }
    if (source['measurementPoint']) { this.measurementPoint = source.measurementPoint; }
    if (source['_measurementPoint']) { this._measurementPoint = new fhir.FhirElement(source._measurementPoint!); }
    if (source['country']) { this.country = source.country.map((x) => new fhir.CodeableConcept(x)); }
    if (source['referenceStrength']) { this.referenceStrength = source.referenceStrength.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["presentation"]) { results.push(["presentation",'Missing required element: MedicinalProductIngredient.specifiedSubstance.strength.presentation']); }
    if (this["presentation"]) { results.push(...this.presentation.doModelValidation()); }
    if (this["presentationLowLimit"]) { results.push(...this.presentationLowLimit.doModelValidation()); }
    if (this["concentration"]) { results.push(...this.concentration.doModelValidation()); }
    if (this["concentrationLowLimit"]) { results.push(...this.concentrationLowLimit.doModelValidation()); }
    if (this["_measurementPoint"]) { results.push(...this._measurementPoint.doModelValidation()); }
    if (this["country"]) { this.country.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["referenceStrength"]) { this.referenceStrength.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * A specified substance that comprises this ingredient.
 */
export class MedicinalProductIngredientSpecifiedSubstance extends fhir.BackboneElement implements IMedicinalProductIngredientSpecifiedSubstance {
  /**
   * The specified substance.
   */
  public code: fhir.CodeableConcept|null;
  /**
   * The group of specified substance, e.g. group 1 to 4.
   */
  public group: fhir.CodeableConcept|null;
  /**
   * Confidentiality level of the specified substance as the ingredient.
   */
  public confidentiality?: fhir.CodeableConcept|undefined;
  /**
   * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
   */
  public strength?: fhir.MedicinalProductIngredientSpecifiedSubstanceStrength[]|undefined;
  /**
   * Default constructor for MedicinalProductIngredientSpecifiedSubstance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IMedicinalProductIngredientSpecifiedSubstance> = { }) {
    super(source);
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code!); }
    else { this.code = null; }
    if (source['group']) { this.group = new fhir.CodeableConcept(source.group!); }
    else { this.group = null; }
    if (source['confidentiality']) { this.confidentiality = new fhir.CodeableConcept(source.confidentiality!); }
    if (source['strength']) { this.strength = source.strength.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrength(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["code"]) { results.push(["code",'Missing required element: MedicinalProductIngredient.specifiedSubstance.code']); }
    if (this["code"]) { results.push(...this.code.doModelValidation()); }
    if (!this["group"]) { results.push(["group",'Missing required element: MedicinalProductIngredient.specifiedSubstance.group']); }
    if (this["group"]) { results.push(...this.group.doModelValidation()); }
    if (this["confidentiality"]) { results.push(...this.confidentiality.doModelValidation()); }
    if (this["strength"]) { this.strength.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * The ingredient substance.
 */
export class MedicinalProductIngredientSubstance extends fhir.BackboneElement implements IMedicinalProductIngredientSubstance {
  /**
   * The ingredient substance.
   */
  public code: fhir.CodeableConcept|null;
  /**
   * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
   */
  public strength?: fhir.MedicinalProductIngredientSpecifiedSubstanceStrength[]|undefined;
  /**
   * Default constructor for MedicinalProductIngredientSubstance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IMedicinalProductIngredientSubstance> = { }) {
    super(source);
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code!); }
    else { this.code = null; }
    if (source['strength']) { this.strength = source.strength.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrength(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["code"]) { results.push(["code",'Missing required element: MedicinalProductIngredient.substance.code']); }
    if (this["code"]) { results.push(...this.code.doModelValidation()); }
    if (this["strength"]) { this.strength.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * An ingredient of a manufactured item or pharmaceutical product.
 */
export class MedicinalProductIngredient extends fhir.DomainResource implements IMedicinalProductIngredient {
  /**
   * Resource Type Name
   */
  public resourceType: "MedicinalProductIngredient";
  /**
   * The identifier(s) of this Ingredient that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.
   */
  public identifier?: fhir.Identifier|undefined;
  /**
   * Ingredient role e.g. Active ingredient, excipient.
   */
  public role: fhir.CodeableConcept|null;
  /**
   * If the ingredient is a known or suspected allergen.
   */
  public allergenicIndicator?: boolean|undefined;
  /**
   * Extended properties for primitive element: MedicinalProductIngredient.allergenicIndicator
   */
  public _allergenicIndicator?: fhir.FhirElement|undefined;
  /**
   * Manufacturer of this Ingredient.
   */
  public manufacturer?: fhir.Reference[]|undefined;
  /**
   * A specified substance that comprises this ingredient.
   */
  public specifiedSubstance?: fhir.MedicinalProductIngredientSpecifiedSubstance[]|undefined;
  /**
   * The ingredient substance.
   */
  public substance?: fhir.MedicinalProductIngredientSubstance|undefined;
  /**
   * Default constructor for MedicinalProductIngredient - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IMedicinalProductIngredient> = { }) {
    super(source);
    this.resourceType = 'MedicinalProductIngredient';
    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier!); }
    if (source['role']) { this.role = new fhir.CodeableConcept(source.role!); }
    else { this.role = null; }
    if (source['allergenicIndicator']) { this.allergenicIndicator = source.allergenicIndicator; }
    if (source['_allergenicIndicator']) { this._allergenicIndicator = new fhir.FhirElement(source._allergenicIndicator!); }
    if (source['manufacturer']) { this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x)); }
    if (source['specifiedSubstance']) { this.specifiedSubstance = source.specifiedSubstance.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstance(x)); }
    if (source['substance']) { this.substance = new fhir.MedicinalProductIngredientSubstance(source.substance!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: MedicinalProductIngredient.resourceType']); }
    if (this["identifier"]) { results.push(...this.identifier.doModelValidation()); }
    if (!this["role"]) { results.push(["role",'Missing required element: MedicinalProductIngredient.role']); }
    if (this["role"]) { results.push(...this.role.doModelValidation()); }
    if (this["_allergenicIndicator"]) { results.push(...this._allergenicIndicator.doModelValidation()); }
    if (this["manufacturer"]) { this.manufacturer.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["specifiedSubstance"]) { this.specifiedSubstance.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["substance"]) { results.push(...this.substance.doModelValidation()); }
    return results;
  }
}
