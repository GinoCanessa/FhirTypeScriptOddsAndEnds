// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: AppointmentResponse

import * as fhir from '../fhir.js';

import { EncounterParticipantTypeValueSet, EncounterParticipantTypeValueSetType,} from '../fhirValueSets/EncounterParticipantTypeValueSet.js';
import { EncounterParticipantTypeValueSetEnum } from '../valueSetEnums.js';
import { ParticipationstatusValueSet, ParticipationstatusValueSetType,} from '../fhirValueSets/ParticipationstatusValueSet.js';
import { ParticipationstatusValueSetEnum } from '../valueSetEnums.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Valid arguments for the AppointmentResponse type.
 */
export interface AppointmentResponseArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "AppointmentResponse"|undefined;
  /**
   * This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * Appointment that this response is replying to.
   */
  appointment: fhir.ReferenceArgs|null;
  /**
   * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the start time.
   */
  start?: fhir.FhirInstant|string|undefined;
  /**
   * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the end time.
   */
  end?: fhir.FhirInstant|string|undefined;
  /**
   * The role of the participant can be used to declare what the actor will be doing in the scope of the referenced appointment.
   * If the actor is not specified, then it is expected that the actor will be filled in at a later stage of planning.
   * This value SHALL be the same as specified on the referenced Appointment so that they can be matched, and subsequently updated.
   */
  participantType?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * A Person, Location, HealthcareService, or Device that is participating in the appointment.
   */
  actor?: fhir.ReferenceArgs|undefined;
  /**
   * This element is labeled as a modifier because the status contains the code entered-in-error that marks the participant as not currently valid.
   */
  participantStatus: ParticipationstatusValueSetEnum|null;
  /**
   * This comment is particularly important when the responder is declining, tentatively accepting or requesting another time to indicate the reasons why.
   */
  comment?: fhir.FhirString|string|undefined;
}

/**
 * A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
 */
export class AppointmentResponse extends fhir.DomainResource {
  readonly __dataType:string = 'AppointmentResponse';
  /**
   * Resource Type Name
   */
  public resourceType: "AppointmentResponse";
  /**
   * This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate.
   */
  public identifier?: fhir.Identifier[]|undefined = [];
  /**
   * Appointment that this response is replying to.
   */
  public appointment: fhir.Reference|null;
  /**
   * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the start time.
   */
  public start?: fhir.FhirInstant|undefined;
  /**
   * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the end time.
   */
  public end?: fhir.FhirInstant|undefined;
  /**
   * The role of the participant can be used to declare what the actor will be doing in the scope of the referenced appointment.
   * If the actor is not specified, then it is expected that the actor will be filled in at a later stage of planning.
   * This value SHALL be the same as specified on the referenced Appointment so that they can be matched, and subsequently updated.
   */
  public participantType?: fhir.CodeableConcept[]|undefined = [];
  /**
   * A Person, Location, HealthcareService, or Device that is participating in the appointment.
   */
  public actor?: fhir.Reference|undefined;
  /**
   * This element is labeled as a modifier because the status contains the code entered-in-error that marks the participant as not currently valid.
   */
  public participantStatus: ParticipationstatusValueSetEnum|null;
  /**
   * This comment is particularly important when the responder is declining, tentatively accepting or requesting another time to indicate the reasons why.
   */
  public comment?: fhir.FhirString|undefined;
  /**
   * Default constructor for AppointmentResponse - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<AppointmentResponseArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'AppointmentResponse';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['appointment']) { this.appointment = new fhir.Reference(source.appointment); }
    else { this.appointment = null; }
    if (source['start']) { this.start = new fhir.FhirInstant({value: source.start}); }
    if (source['end']) { this.end = new fhir.FhirInstant({value: source.end}); }
    if (source['participantType']) { this.participantType = source.participantType.map((x) => new fhir.CodeableConcept(x)); }
    if (source['actor']) { this.actor = new fhir.Reference(source.actor); }
    if (source['participantStatus']) { this.participantStatus = source.participantStatus; }
    else { this.participantStatus = null; }
    if (source['comment']) { this.comment = new fhir.FhirString({value: source.comment}); }
  }
  /**
   * Extensible-bound Value Set for participantType
   */
  public static participantTypeExtensibleValueSet():EncounterParticipantTypeValueSetType {
    return EncounterParticipantTypeValueSet;
  }
  /**
   * Required-bound Value Set for participantStatus
   */
  public static participantStatusRequiredValueSet():ParticipationstatusValueSetType {
    return ParticipationstatusValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['resourceType']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property resourceType:'AppointmentResponse' fhir: AppointmentResponse.resourceType:'AppointmentResponse'", }));
    }
    if (this["identifier"]) { this.identifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (!this['appointment']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property appointment:fhir.Reference fhir: AppointmentResponse.appointment:Reference", }));
    }
    if (this["appointment"]) { outcome.issue!.push(...this.appointment.doModelValidation().issue!); }
    if (this["start"]) { outcome.issue!.push(...this.start.doModelValidation().issue!); }
    if (this["end"]) { outcome.issue!.push(...this.end.doModelValidation().issue!); }
    if (this["participantType"]) { this.participantType.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["actor"]) { outcome.issue!.push(...this.actor.doModelValidation().issue!); }
    if (!this['participantStatus']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property participantStatus:ParticipationstatusValueSetEnum fhir: AppointmentResponse.participantStatus:code", }));
    }
    if (this["comment"]) { outcome.issue!.push(...this.comment.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
