// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: AppointmentResponse

import * as fhir from '../fhir.js'

import { EncounterParticipantTypeValueSet, EncounterParticipantTypeValueSetType, EncounterParticipantTypeValueSetEnum } from '../fhirValueSets/EncounterParticipantTypeValueSet.js'
import { ParticipationstatusValueSet, ParticipationstatusValueSetType, ParticipationstatusValueSetEnum } from '../fhirValueSets/ParticipationstatusValueSet.js'

/**
 * A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
 */
export type IAppointmentResponse = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "AppointmentResponse";
  /**
   * This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * Appointment that this response is replying to.
   */
  appointment: fhir.IReference|null;
  /**
   * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the start time.
   */
  start?: string|undefined;
  /**
   * Extended properties for primitive element: AppointmentResponse.start
   */
  _start?: fhir.IFhirElement|undefined;
  /**
   * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the end time.
   */
  end?: string|undefined;
  /**
   * Extended properties for primitive element: AppointmentResponse.end
   */
  _end?: fhir.IFhirElement|undefined;
  /**
   * The role of the participant can be used to declare what the actor will be doing in the scope of the referenced appointment.
   * If the actor is not specified, then it is expected that the actor will be filled in at a later stage of planning.
   * This value SHALL be the same as specified on the referenced Appointment so that they can be matched, and subsequently updated.
   */
  participantType?: fhir.ICodeableConcept[]|undefined;
  /**
   * A Person, Location, HealthcareService, or Device that is participating in the appointment.
   */
  actor?: fhir.IReference|undefined;
  /**
   * This element is labeled as a modifier because the status contains the code entered-in-error that marks the participant as not currently valid.
   */
  participantStatus: ParticipationstatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: AppointmentResponse.participantStatus
   */
  _participantStatus?: fhir.IFhirElement|undefined;
  /**
   * This comment is particularly important when the responder is declining, tentatively accepting or requesting another time to indicate the reasons why.
   */
  comment?: string|undefined;
  /**
   * Extended properties for primitive element: AppointmentResponse.comment
   */
  _comment?: fhir.IFhirElement|undefined;
}

/**
 * A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
 */
export class AppointmentResponse extends fhir.DomainResource implements IAppointmentResponse {
  /**
   * Resource Type Name
   */
  public resourceType: "AppointmentResponse";
  /**
   * This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * Appointment that this response is replying to.
   */
  public appointment: fhir.Reference|null;
  /**
   * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the start time.
   */
  public start?: string|undefined;
  /**
   * Extended properties for primitive element: AppointmentResponse.start
   */
  public _start?: fhir.FhirElement|undefined;
  /**
   * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the end time.
   */
  public end?: string|undefined;
  /**
   * Extended properties for primitive element: AppointmentResponse.end
   */
  public _end?: fhir.FhirElement|undefined;
  /**
   * The role of the participant can be used to declare what the actor will be doing in the scope of the referenced appointment.
   * If the actor is not specified, then it is expected that the actor will be filled in at a later stage of planning.
   * This value SHALL be the same as specified on the referenced Appointment so that they can be matched, and subsequently updated.
   */
  public participantType?: fhir.CodeableConcept[]|undefined;
  /**
   * A Person, Location, HealthcareService, or Device that is participating in the appointment.
   */
  public actor?: fhir.Reference|undefined;
  /**
   * This element is labeled as a modifier because the status contains the code entered-in-error that marks the participant as not currently valid.
   */
  public participantStatus: ParticipationstatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: AppointmentResponse.participantStatus
   */
  public _participantStatus?: fhir.FhirElement|undefined;
  /**
   * This comment is particularly important when the responder is declining, tentatively accepting or requesting another time to indicate the reasons why.
   */
  public comment?: string|undefined;
  /**
   * Extended properties for primitive element: AppointmentResponse.comment
   */
  public _comment?: fhir.FhirElement|undefined;
  /**
   * Default constructor for AppointmentResponse - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IAppointmentResponse> = { }) {
    super(source);
    this.resourceType = 'AppointmentResponse';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['appointment']) { this.appointment = new fhir.Reference(source.appointment!); }
    else { this.appointment = null; }
    if (source['start']) { this.start = source.start; }
    if (source['_start']) { this._start = new fhir.FhirElement(source._start!); }
    if (source['end']) { this.end = source.end; }
    if (source['_end']) { this._end = new fhir.FhirElement(source._end!); }
    if (source['participantType']) { this.participantType = source.participantType.map((x) => new fhir.CodeableConcept(x)); }
    if (source['actor']) { this.actor = new fhir.Reference(source.actor!); }
    if (source['participantStatus']) { this.participantStatus = source.participantStatus; }
    else { this.participantStatus = null; }
    if (source['_participantStatus']) { this._participantStatus = new fhir.FhirElement(source._participantStatus!); }
    if (source['comment']) { this.comment = source.comment; }
    if (source['_comment']) { this._comment = new fhir.FhirElement(source._comment!); }
  }
  /**
   * Extensible-bound Value Set for participantType
   */
  public participantTypeExtensibleValueSet():EncounterParticipantTypeValueSetType {
    return EncounterParticipantTypeValueSet;
  }
  /**
   * Required-bound Value Set for participantStatus
   */
  public participantStatusRequiredValueSet():ParticipationstatusValueSetType {
    return ParticipationstatusValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: AppointmentResponse.resourceType']); }
    if (this["identifier"]) { this.identifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (!this["appointment"]) { results.push(["appointment",'Missing required element: AppointmentResponse.appointment']); }
    if (this["appointment"]) { results.push(...this.appointment.doModelValidation()); }
    if (this["_start"]) { results.push(...this._start.doModelValidation()); }
    if (this["_end"]) { results.push(...this._end.doModelValidation()); }
    if (this["participantType"]) { this.participantType.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["actor"]) { results.push(...this.actor.doModelValidation()); }
    if (!this["participantStatus"]) { results.push(["participantStatus",'Missing required element: AppointmentResponse.participantStatus']); }
    if (this["_participantStatus"]) { results.push(...this._participantStatus.doModelValidation()); }
    if (this["_comment"]) { results.push(...this._comment.doModelValidation()); }
    return results;
  }
}
