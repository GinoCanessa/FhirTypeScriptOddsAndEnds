// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * A resource that represents the data of a single raw artifact as digital content accessible in its native format.  A Binary resource can contain any content, whether text, image, pdf, zip archive, etc.
 */
export type IBinary = fhir.IResource & {
  /**
   * Resource Type Name
   */
  resourceType: "Binary";
  /**
   * MimeType of the binary content represented as a standard MimeType (BCP 13).
   */
  contentType: string|null;
  _contentType?: fhir.IFhirElement|undefined;
  /**
   * If the content type is itself base64 encoding, then this will be base64 encoded twice - what is created by un-base64ing the content must be the specified content type.
   */
  data?: string|undefined;
  _data?: fhir.IFhirElement|undefined;
  /**
   * Very often, a server will also know of a resource that references the binary, and can automatically apply the appropriate access rules based on that reference. However, there are some circumstances where this is not appropriate, e.g. the binary is uploaded directly to the server without any linking resource, the binary is referred to from multiple different resources, and/or the binary is content such as an application logo that has less protection than any of the resources that reference it.
   */
  securityContext?: fhir.IReference|undefined;
}
/**
 * A resource that represents the data of a single raw artifact as digital content accessible in its native format.  A Binary resource can contain any content, whether text, image, pdf, zip archive, etc.
 */
export class Binary extends fhir.Resource implements fhir.IBinary {
  /**
   * Resource Type Name
   */
  public override resourceType: "Binary";
  /**
   * MimeType of the binary content represented as a standard MimeType (BCP 13).
   */
  public contentType: string|null;
  public _contentType?: fhir.FhirElement|undefined;
  /**
   * If the content type is itself base64 encoding, then this will be base64 encoded twice - what is created by un-base64ing the content must be the specified content type.
   */
  public data?: string|undefined;
  public _data?: fhir.FhirElement|undefined;
  /**
   * Very often, a server will also know of a resource that references the binary, and can automatically apply the appropriate access rules based on that reference. However, there are some circumstances where this is not appropriate, e.g. the binary is uploaded directly to the server without any linking resource, the binary is referred to from multiple different resources, and/or the binary is content such as an application logo that has less protection than any of the resources that reference it.
   */
  public securityContext?: fhir.Reference|undefined;
  /**
   * Default constructor for Binary - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IBinary> = {}) {
    super(source);
    this.resourceType = 'Binary';
    this.contentType = null;
    if (source["contentType"]) { this.contentType = source.contentType; }
    if (this.contentType === undefined) { this.contentType = null }
    if (source["_contentType"]) { this._contentType = new fhir.FhirElement(source._contentType!); }
    if (source["data"]) { this.data = source.data; }
    if (source["_data"]) { this._data = new fhir.FhirElement(source._data!); }
    if (source["securityContext"]) { this.securityContext = new fhir.Reference(source.securityContext!); }
  }
  /**
   * Check if the current Binary contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["contentType"] === undefined) { missingElements.push("contentType"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a Binary from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IBinary):Binary {
    var dest:Binary = new Binary(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `Binary is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
