// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MeasureReport

import * as fhir from '../fhir.js'

import { MeasurePopulationValueSet, MeasurePopulationValueSetType, MeasurePopulationValueSetEnum } from '../fhirValueSets/MeasurePopulationValueSet.js'
import { MeasureReportStatusValueSet, MeasureReportStatusValueSetType, MeasureReportStatusValueSetEnum } from '../fhirValueSets/MeasureReportStatusValueSet.js'
import { MeasureReportTypeValueSet, MeasureReportTypeValueSetType, MeasureReportTypeValueSetEnum } from '../fhirValueSets/MeasureReportTypeValueSet.js'
import { MeasureImprovementNotationValueSet, MeasureImprovementNotationValueSetType, MeasureImprovementNotationValueSetEnum } from '../fhirValueSets/MeasureImprovementNotationValueSet.js'

/**
 * The populations that make up the population group, one for each type of population appropriate for the measure.
 */
export type IMeasureReportGroupPopulation = fhir.IBackboneElement & { 
  /**
   * The type of the population.
   */
  code?: fhir.ICodeableConcept|undefined;
  /**
   * The number of members of the population.
   */
  count?: number|undefined;
  /**
   * Extended properties for primitive element: MeasureReport.group.population.count
   */
  _count?: fhir.IFhirElement|undefined;
  /**
   * This element refers to a List of subject level MeasureReport resources, one for each subject in this population.
   */
  subjectResults?: fhir.IReference|undefined;
}

/**
 * A stratifier component value.
 */
export type IMeasureReportGroupStratifierStratumComponent = fhir.IBackboneElement & { 
  /**
   * The code for the stratum component value.
   */
  code: fhir.ICodeableConcept|null;
  /**
   * The stratum component value.
   */
  value: fhir.ICodeableConcept|null;
}

/**
 * The populations that make up the stratum, one for each type of population appropriate to the measure.
 */
export type IMeasureReportGroupStratifierStratumPopulation = fhir.IBackboneElement & { 
  /**
   * The type of the population.
   */
  code?: fhir.ICodeableConcept|undefined;
  /**
   * The number of members of the population in this stratum.
   */
  count?: number|undefined;
  /**
   * Extended properties for primitive element: MeasureReport.group.stratifier.stratum.population.count
   */
  _count?: fhir.IFhirElement|undefined;
  /**
   * This element refers to a List of subject level MeasureReport resources, one for each subject in this population in this stratum.
   */
  subjectResults?: fhir.IReference|undefined;
}

/**
 * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
 */
export type IMeasureReportGroupStratifierStratum = fhir.IBackboneElement & { 
  /**
   * The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
   */
  value?: fhir.ICodeableConcept|undefined;
  /**
   * A stratifier component value.
   */
  component?: fhir.IMeasureReportGroupStratifierStratumComponent[]|undefined;
  /**
   * The populations that make up the stratum, one for each type of population appropriate to the measure.
   */
  population?: fhir.IMeasureReportGroupStratifierStratumPopulation[]|undefined;
  /**
   * The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
   */
  measureScore?: fhir.IQuantity|undefined;
}

/**
 * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
 */
export type IMeasureReportGroupStratifier = fhir.IBackboneElement & { 
  /**
   * The meaning of this stratifier, as defined in the measure definition.
   */
  code?: fhir.ICodeableConcept[]|undefined;
  /**
   * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
   */
  stratum?: fhir.IMeasureReportGroupStratifierStratum[]|undefined;
}

/**
 * The results of the calculation, one for each population group in the measure.
 */
export type IMeasureReportGroup = fhir.IBackboneElement & { 
  /**
   * The meaning of the population group as defined in the measure definition.
   */
  code?: fhir.ICodeableConcept|undefined;
  /**
   * The populations that make up the population group, one for each type of population appropriate for the measure.
   */
  population?: fhir.IMeasureReportGroupPopulation[]|undefined;
  /**
   * The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
   */
  measureScore?: fhir.IQuantity|undefined;
  /**
   * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
   */
  stratifier?: fhir.IMeasureReportGroupStratifier[]|undefined;
}

/**
 * The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.
 */
export type IMeasureReport = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "MeasureReport";
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II data type - e.g. to identify this {{title}} outside of FHIR, where the logical URL is not possible to use.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: MeasureReportStatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: MeasureReport.status
   */
  _status?: fhir.IFhirElement|undefined;
  /**
   * Data-collection reports are used only to communicate data-of-interest for a measure. They do not necessarily include all the data for a particular subject or population, but they may.
   */
  type: MeasureReportTypeValueSetEnum|null;
  /**
   * Extended properties for primitive element: MeasureReport.type
   */
  _type?: fhir.IFhirElement|undefined;
  /**
   * A reference to the Measure that was calculated to produce this report.
   */
  measure: string|null;
  /**
   * Extended properties for primitive element: MeasureReport.measure
   */
  _measure?: fhir.IFhirElement|undefined;
  /**
   * Optional subject identifying the individual or individuals the report is for.
   */
  subject?: fhir.IReference|undefined;
  /**
   * The date this measure report was generated.
   */
  date?: string|undefined;
  /**
   * Extended properties for primitive element: MeasureReport.date
   */
  _date?: fhir.IFhirElement|undefined;
  /**
   * The individual, location, or organization that is reporting the data.
   */
  reporter?: fhir.IReference|undefined;
  /**
   * The reporting period for which the report was calculated.
   */
  period: fhir.IPeriod|null;
  /**
   * This element is typically defined by the measure, but reproduced here to ensure the measure score can be interpreted. The element is labeled as a modifier because it changes the interpretation of the reported measure score.
   */
  improvementNotation?: fhir.ICodeableConcept|undefined;
  /**
   * The results of the calculation, one for each population group in the measure.
   */
  group?: fhir.IMeasureReportGroup[]|undefined;
  /**
   * A reference to a Bundle containing the Resources that were used in the calculation of this measure.
   */
  evaluatedResource?: fhir.IReference[]|undefined;
}

/**
 * The populations that make up the population group, one for each type of population appropriate for the measure.
 */
export class MeasureReportGroupPopulation extends fhir.BackboneElement implements IMeasureReportGroupPopulation {
  /**
   * The type of the population.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * The number of members of the population.
   */
  public count?: number|undefined;
  /**
   * Extended properties for primitive element: MeasureReport.group.population.count
   */
  public _count?: fhir.FhirElement|undefined;
  /**
   * This element refers to a List of subject level MeasureReport resources, one for each subject in this population.
   */
  public subjectResults?: fhir.Reference|undefined;
  /**
   * Default constructor for MeasureReportGroupPopulation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IMeasureReportGroupPopulation> = { }) {
    super(source);
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code!); }
    if (source['count']) { this.count = source.count; }
    if (source['_count']) { this._count = new fhir.FhirElement(source._count!); }
    if (source['subjectResults']) { this.subjectResults = new fhir.Reference(source.subjectResults!); }
  }
  /**
   * Extensible-bound Value Set for code
   */
  public codeExtensibleValueSet():MeasurePopulationValueSetType {
    return MeasurePopulationValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["code"]) { results.push(...this.code.doModelValidation()); }
    if (this["_count"]) { results.push(...this._count.doModelValidation()); }
    if (this["subjectResults"]) { results.push(...this.subjectResults.doModelValidation()); }
    return results;
  }
}

/**
 * A stratifier component value.
 */
export class MeasureReportGroupStratifierStratumComponent extends fhir.BackboneElement implements IMeasureReportGroupStratifierStratumComponent {
  /**
   * The code for the stratum component value.
   */
  public code: fhir.CodeableConcept|null;
  /**
   * The stratum component value.
   */
  public value: fhir.CodeableConcept|null;
  /**
   * Default constructor for MeasureReportGroupStratifierStratumComponent - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IMeasureReportGroupStratifierStratumComponent> = { }) {
    super(source);
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code!); }
    else { this.code = null; }
    if (source['value']) { this.value = new fhir.CodeableConcept(source.value!); }
    else { this.value = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["code"]) { results.push(["code",'Missing required element: MeasureReport.group.stratifier.stratum.component.code']); }
    if (this["code"]) { results.push(...this.code.doModelValidation()); }
    if (!this["value"]) { results.push(["value",'Missing required element: MeasureReport.group.stratifier.stratum.component.value']); }
    if (this["value"]) { results.push(...this.value.doModelValidation()); }
    return results;
  }
}

/**
 * The populations that make up the stratum, one for each type of population appropriate to the measure.
 */
export class MeasureReportGroupStratifierStratumPopulation extends fhir.BackboneElement implements IMeasureReportGroupStratifierStratumPopulation {
  /**
   * The type of the population.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * The number of members of the population in this stratum.
   */
  public count?: number|undefined;
  /**
   * Extended properties for primitive element: MeasureReport.group.stratifier.stratum.population.count
   */
  public _count?: fhir.FhirElement|undefined;
  /**
   * This element refers to a List of subject level MeasureReport resources, one for each subject in this population in this stratum.
   */
  public subjectResults?: fhir.Reference|undefined;
  /**
   * Default constructor for MeasureReportGroupStratifierStratumPopulation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IMeasureReportGroupStratifierStratumPopulation> = { }) {
    super(source);
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code!); }
    if (source['count']) { this.count = source.count; }
    if (source['_count']) { this._count = new fhir.FhirElement(source._count!); }
    if (source['subjectResults']) { this.subjectResults = new fhir.Reference(source.subjectResults!); }
  }
  /**
   * Extensible-bound Value Set for code
   */
  public codeExtensibleValueSet():MeasurePopulationValueSetType {
    return MeasurePopulationValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["code"]) { results.push(...this.code.doModelValidation()); }
    if (this["_count"]) { results.push(...this._count.doModelValidation()); }
    if (this["subjectResults"]) { results.push(...this.subjectResults.doModelValidation()); }
    return results;
  }
}

/**
 * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
 */
export class MeasureReportGroupStratifierStratum extends fhir.BackboneElement implements IMeasureReportGroupStratifierStratum {
  /**
   * The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
   */
  public value?: fhir.CodeableConcept|undefined;
  /**
   * A stratifier component value.
   */
  public component?: fhir.MeasureReportGroupStratifierStratumComponent[]|undefined;
  /**
   * The populations that make up the stratum, one for each type of population appropriate to the measure.
   */
  public population?: fhir.MeasureReportGroupStratifierStratumPopulation[]|undefined;
  /**
   * The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
   */
  public measureScore?: fhir.Quantity|undefined;
  /**
   * Default constructor for MeasureReportGroupStratifierStratum - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IMeasureReportGroupStratifierStratum> = { }) {
    super(source);
    if (source['value']) { this.value = new fhir.CodeableConcept(source.value!); }
    if (source['component']) { this.component = source.component.map((x) => new fhir.MeasureReportGroupStratifierStratumComponent(x)); }
    if (source['population']) { this.population = source.population.map((x) => new fhir.MeasureReportGroupStratifierStratumPopulation(x)); }
    if (source['measureScore']) { this.measureScore = new fhir.Quantity(source.measureScore!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["value"]) { results.push(...this.value.doModelValidation()); }
    if (this["component"]) { this.component.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["population"]) { this.population.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["measureScore"]) { results.push(...this.measureScore.doModelValidation()); }
    return results;
  }
}

/**
 * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
 */
export class MeasureReportGroupStratifier extends fhir.BackboneElement implements IMeasureReportGroupStratifier {
  /**
   * The meaning of this stratifier, as defined in the measure definition.
   */
  public code?: fhir.CodeableConcept[]|undefined;
  /**
   * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
   */
  public stratum?: fhir.MeasureReportGroupStratifierStratum[]|undefined;
  /**
   * Default constructor for MeasureReportGroupStratifier - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IMeasureReportGroupStratifier> = { }) {
    super(source);
    if (source['code']) { this.code = source.code.map((x) => new fhir.CodeableConcept(x)); }
    if (source['stratum']) { this.stratum = source.stratum.map((x) => new fhir.MeasureReportGroupStratifierStratum(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["code"]) { this.code.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["stratum"]) { this.stratum.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * The results of the calculation, one for each population group in the measure.
 */
export class MeasureReportGroup extends fhir.BackboneElement implements IMeasureReportGroup {
  /**
   * The meaning of the population group as defined in the measure definition.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * The populations that make up the population group, one for each type of population appropriate for the measure.
   */
  public population?: fhir.MeasureReportGroupPopulation[]|undefined;
  /**
   * The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
   */
  public measureScore?: fhir.Quantity|undefined;
  /**
   * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
   */
  public stratifier?: fhir.MeasureReportGroupStratifier[]|undefined;
  /**
   * Default constructor for MeasureReportGroup - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IMeasureReportGroup> = { }) {
    super(source);
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code!); }
    if (source['population']) { this.population = source.population.map((x) => new fhir.MeasureReportGroupPopulation(x)); }
    if (source['measureScore']) { this.measureScore = new fhir.Quantity(source.measureScore!); }
    if (source['stratifier']) { this.stratifier = source.stratifier.map((x) => new fhir.MeasureReportGroupStratifier(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["code"]) { results.push(...this.code.doModelValidation()); }
    if (this["population"]) { this.population.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["measureScore"]) { results.push(...this.measureScore.doModelValidation()); }
    if (this["stratifier"]) { this.stratifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.
 */
export class MeasureReport extends fhir.DomainResource implements IMeasureReport {
  /**
   * Resource Type Name
   */
  public resourceType: "MeasureReport";
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II data type - e.g. to identify this {{title}} outside of FHIR, where the logical URL is not possible to use.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  public status: MeasureReportStatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: MeasureReport.status
   */
  public _status?: fhir.FhirElement|undefined;
  /**
   * Data-collection reports are used only to communicate data-of-interest for a measure. They do not necessarily include all the data for a particular subject or population, but they may.
   */
  public type: MeasureReportTypeValueSetEnum|null;
  /**
   * Extended properties for primitive element: MeasureReport.type
   */
  public _type?: fhir.FhirElement|undefined;
  /**
   * A reference to the Measure that was calculated to produce this report.
   */
  public measure: string|null;
  /**
   * Extended properties for primitive element: MeasureReport.measure
   */
  public _measure?: fhir.FhirElement|undefined;
  /**
   * Optional subject identifying the individual or individuals the report is for.
   */
  public subject?: fhir.Reference|undefined;
  /**
   * The date this measure report was generated.
   */
  public date?: string|undefined;
  /**
   * Extended properties for primitive element: MeasureReport.date
   */
  public _date?: fhir.FhirElement|undefined;
  /**
   * The individual, location, or organization that is reporting the data.
   */
  public reporter?: fhir.Reference|undefined;
  /**
   * The reporting period for which the report was calculated.
   */
  public period: fhir.Period|null;
  /**
   * This element is typically defined by the measure, but reproduced here to ensure the measure score can be interpreted. The element is labeled as a modifier because it changes the interpretation of the reported measure score.
   */
  public improvementNotation?: fhir.CodeableConcept|undefined;
  /**
   * The results of the calculation, one for each population group in the measure.
   */
  public group?: fhir.MeasureReportGroup[]|undefined;
  /**
   * A reference to a Bundle containing the Resources that were used in the calculation of this measure.
   */
  public evaluatedResource?: fhir.Reference[]|undefined;
  /**
   * Default constructor for MeasureReport - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IMeasureReport> = { }) {
    super(source);
    this.resourceType = 'MeasureReport';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['status']) { this.status = source.status; }
    else { this.status = null; }
    if (source['_status']) { this._status = new fhir.FhirElement(source._status!); }
    if (source['type']) { this.type = source.type; }
    else { this.type = null; }
    if (source['_type']) { this._type = new fhir.FhirElement(source._type!); }
    if (source['measure']) { this.measure = source.measure; }
    else { this.measure = null; }
    if (source['_measure']) { this._measure = new fhir.FhirElement(source._measure!); }
    if (source['subject']) { this.subject = new fhir.Reference(source.subject!); }
    if (source['date']) { this.date = source.date; }
    if (source['_date']) { this._date = new fhir.FhirElement(source._date!); }
    if (source['reporter']) { this.reporter = new fhir.Reference(source.reporter!); }
    if (source['period']) { this.period = new fhir.Period(source.period!); }
    else { this.period = null; }
    if (source['improvementNotation']) { this.improvementNotation = new fhir.CodeableConcept(source.improvementNotation!); }
    if (source['group']) { this.group = source.group.map((x) => new fhir.MeasureReportGroup(x)); }
    if (source['evaluatedResource']) { this.evaluatedResource = source.evaluatedResource.map((x) => new fhir.Reference(x)); }
  }
  /**
   * Required-bound Value Set for status
   */
  public statusRequiredValueSet():MeasureReportStatusValueSetType {
    return MeasureReportStatusValueSet;
  }
  /**
   * Required-bound Value Set for type
   */
  public typeRequiredValueSet():MeasureReportTypeValueSetType {
    return MeasureReportTypeValueSet;
  }
  /**
   * Required-bound Value Set for improvementNotation
   */
  public improvementNotationRequiredValueSet():MeasureImprovementNotationValueSetType {
    return MeasureImprovementNotationValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: MeasureReport.resourceType']); }
    if (this["identifier"]) { this.identifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (!this["status"]) { results.push(["status",'Missing required element: MeasureReport.status']); }
    if (this["_status"]) { results.push(...this._status.doModelValidation()); }
    if (!this["type"]) { results.push(["type",'Missing required element: MeasureReport.type']); }
    if (this["_type"]) { results.push(...this._type.doModelValidation()); }
    if (!this["measure"]) { results.push(["measure",'Missing required element: MeasureReport.measure']); }
    if (this["_measure"]) { results.push(...this._measure.doModelValidation()); }
    if (this["subject"]) { results.push(...this.subject.doModelValidation()); }
    if (this["_date"]) { results.push(...this._date.doModelValidation()); }
    if (this["reporter"]) { results.push(...this.reporter.doModelValidation()); }
    if (!this["period"]) { results.push(["period",'Missing required element: MeasureReport.period']); }
    if (this["period"]) { results.push(...this.period.doModelValidation()); }
    if (this["improvementNotation"]) { results.push(...this.improvementNotation.doModelValidation()); }
    if (this["group"]) { this.group.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["evaluatedResource"]) { this.evaluatedResource.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}
