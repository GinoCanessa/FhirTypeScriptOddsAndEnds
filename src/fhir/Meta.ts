// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
 */
export type IMeta = fhir.IFhirElement & {
  /**
   * This value is always populated except when the resource is first being created. The server / resource manager sets this value; what a client provides is irrelevant. This is equivalent to the HTTP Last-Modified and SHOULD have the same value on a [read](http.html#read) interaction.
   */
  lastUpdated?: string|undefined;
  _lastUpdated?: fhir.IFhirElement|undefined;
  /**
   * It is up to the server and/or other infrastructure of policy to determine whether/how these claims are verified and/or updated over time.  The list of profile URLs is a set.
   */
  profile?: string[]|undefined;
  _profile?: fhir.IFhirElement[]|undefined;
  /**
   * The security labels can be updated without changing the stated version of the resource. The list of security labels is a set. Uniqueness is based the system/code, and version and display are ignored.
   */
  security?: fhir.ICoding[]|undefined;
  /**
   * In the provenance resource, this corresponds to Provenance.entity.what[x]. The exact use of the source (and the implied Provenance.entity.role) is left to implementer discretion. Only one nominated source is allowed; for additional provenance details, a full Provenance resource should be used. 
   * This element can be used to indicate where the current master source of a resource that has a canonical URL if the resource is no longer hosted at the canonical URL.
   */
  source?: string|undefined;
  _source?: fhir.IFhirElement|undefined;
  /**
   * The tags can be updated without changing the stated version of the resource. The list of tags is a set. Uniqueness is based the system/code, and version and display are ignored.
   */
  tag?: fhir.ICoding[]|undefined;
  /**
   * The server assigns this value, and ignores what the client specifies, except in the case that the server is imposing version integrity on updates/deletes.
   */
  versionId?: string|undefined;
  _versionId?: fhir.IFhirElement|undefined;
}
/**
 * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
 */
export class Meta extends fhir.FhirElement implements fhir.IMeta {
  /**
   * This value is always populated except when the resource is first being created. The server / resource manager sets this value; what a client provides is irrelevant. This is equivalent to the HTTP Last-Modified and SHOULD have the same value on a [read](http.html#read) interaction.
   */
  public lastUpdated?: string|undefined;
  public _lastUpdated?: fhir.FhirElement|undefined;
  /**
   * It is up to the server and/or other infrastructure of policy to determine whether/how these claims are verified and/or updated over time.  The list of profile URLs is a set.
   */
  public profile?: string[]|undefined;
  public _profile?: fhir.FhirElement[]|undefined;
  /**
   * The security labels can be updated without changing the stated version of the resource. The list of security labels is a set. Uniqueness is based the system/code, and version and display are ignored.
   */
  public security?: fhir.Coding[]|undefined;
  /**
   * In the provenance resource, this corresponds to Provenance.entity.what[x]. The exact use of the source (and the implied Provenance.entity.role) is left to implementer discretion. Only one nominated source is allowed; for additional provenance details, a full Provenance resource should be used. 
   * This element can be used to indicate where the current master source of a resource that has a canonical URL if the resource is no longer hosted at the canonical URL.
   */
  public source?: string|undefined;
  public _source?: fhir.FhirElement|undefined;
  /**
   * The tags can be updated without changing the stated version of the resource. The list of tags is a set. Uniqueness is based the system/code, and version and display are ignored.
   */
  public tag?: fhir.Coding[]|undefined;
  /**
   * The server assigns this value, and ignores what the client specifies, except in the case that the server is imposing version integrity on updates/deletes.
   */
  public versionId?: string|undefined;
  public _versionId?: fhir.FhirElement|undefined;
  /**
   * Default constructor for Meta - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMeta> = {}) {
    super(source);
    if (source["lastUpdated"]) { this.lastUpdated = source.lastUpdated; }
    if (source["_lastUpdated"]) { this._lastUpdated = new fhir.FhirElement(source._lastUpdated!); }
    if (source["profile"]) { this.profile = source.profile.map((x) => (x)); }
    if (source["_profile"]) { this._profile = source._profile.map((x:Partial<fhir.IFhirElement>) => new fhir.FhirElement(x)); }
    if (source["security"]) { this.security = source.security.map((x:Partial<fhir.ICoding>) => new fhir.Coding(x)); }
    if (source["source"]) { this.source = source.source; }
    if (source["_source"]) { this._source = new fhir.FhirElement(source._source!); }
    if (source["tag"]) { this.tag = source.tag.map((x:Partial<fhir.ICoding>) => new fhir.Coding(x)); }
    if (source["versionId"]) { this.versionId = source.versionId; }
    if (source["_versionId"]) { this._versionId = new fhir.FhirElement(source._versionId!); }
  }
  /**
   * Check if the current Meta contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a Meta from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IMeta):Meta {
    var dest:Meta = new Meta(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `Meta is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
