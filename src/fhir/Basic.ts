// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification.
 */
export type IBasic = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "Basic";
  /**
   * Indicates who was responsible for creating the resource instance.
   */
  author?: fhir.IReference|undefined;
  /**
   * Because resource references will only be able to indicate 'Basic', the type of reference will need to be specified in a Profile identified as part of the resource.  Refer to the resource notes section for information on appropriate terminologies for this code.
   * This element is labeled as a modifier because it defines the meaning of the resource and cannot be ignored.
   */
  code: fhir.ICodeableConcept|null;
  /**
   * Identifies when the resource was first created.
   */
  created?: string|undefined;
  _created?: fhir.IFhirElement|undefined;
  /**
   * Identifier assigned to the resource for business purposes, outside the context of FHIR.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * Optional as not all potential resources will have subjects.  Resources associated with multiple subjects can handle this via extension.
   */
  subject?: fhir.IReference|undefined;
}
/**
 * Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification.
 */
export class Basic extends fhir.DomainResource implements fhir.IBasic {
  /**
   * Resource Type Name
   */
  public override resourceType: "Basic";
  /**
   * Indicates who was responsible for creating the resource instance.
   */
  public author?: fhir.Reference|undefined;
  /**
   * Because resource references will only be able to indicate 'Basic', the type of reference will need to be specified in a Profile identified as part of the resource.  Refer to the resource notes section for information on appropriate terminologies for this code.
   * This element is labeled as a modifier because it defines the meaning of the resource and cannot be ignored.
   */
  public code: fhir.CodeableConcept|null;
  /**
   * Identifies when the resource was first created.
   */
  public created?: string|undefined;
  public _created?: fhir.FhirElement|undefined;
  /**
   * Identifier assigned to the resource for business purposes, outside the context of FHIR.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * Optional as not all potential resources will have subjects.  Resources associated with multiple subjects can handle this via extension.
   */
  public subject?: fhir.Reference|undefined;
  /**
   * Default constructor for Basic - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IBasic> = {}) {
    super(source);
    this.resourceType = 'Basic';
    if (source["author"]) { this.author = new fhir.Reference(source.author!); }
    this.code = null;
    if (source["code"]) { this.code = new fhir.CodeableConcept(source.code!); }
    if (this.code === undefined) { this.code = null }
    if (source["created"]) { this.created = source.created; }
    if (source["_created"]) { this._created = new fhir.FhirElement(source._created!); }
    if (source["identifier"]) { this.identifier = source.identifier.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    if (source["subject"]) { this.subject = new fhir.Reference(source.subject!); }
  }
  /**
   * Check if the current Basic contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["code"] === undefined) { missingElements.push("code"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a Basic from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IBasic):Basic {
    var dest:Basic = new Basic(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `Basic is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
