// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Basic

import * as fhir from '../fhir.js';

import { BasicResourceTypeValueSet, BasicResourceTypeValueSetType,} from '../fhirValueSets/BasicResourceTypeValueSet.js';
import { BasicResourceTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Valid arguments for the Basic type.
 */
export interface BasicArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "Basic"|undefined;
  /**
   * Identifier assigned to the resource for business purposes, outside the context of FHIR.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * Because resource references will only be able to indicate 'Basic', the type of reference will need to be specified in a Profile identified as part of the resource.  Refer to the resource notes section for information on appropriate terminologies for this code.
   * This element is labeled as a modifier because it defines the meaning of the resource and cannot be ignored.
   */
  code: fhir.CodeableConceptArgs|null;
  /**
   * Optional as not all potential resources will have subjects.  Resources associated with multiple subjects can handle this via extension.
   */
  subject?: fhir.ReferenceArgs|undefined;
  /**
   * Identifies when the resource was first created.
   */
  created?: fhir.FhirDate|string|undefined;
  /**
   * Indicates who was responsible for creating the resource instance.
   */
  author?: fhir.ReferenceArgs|undefined;
}

/**
 * Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification.
 */
export class Basic extends fhir.DomainResource {
  readonly __dataType:string = 'Basic';
  /**
   * Resource Type Name
   */
  public resourceType: "Basic";
  /**
   * Identifier assigned to the resource for business purposes, outside the context of FHIR.
   */
  public identifier?: fhir.Identifier[]|undefined = [];
  /**
   * Because resource references will only be able to indicate 'Basic', the type of reference will need to be specified in a Profile identified as part of the resource.  Refer to the resource notes section for information on appropriate terminologies for this code.
   * This element is labeled as a modifier because it defines the meaning of the resource and cannot be ignored.
   */
  public code: fhir.CodeableConcept|null;
  /**
   * Optional as not all potential resources will have subjects.  Resources associated with multiple subjects can handle this via extension.
   */
  public subject?: fhir.Reference|undefined;
  /**
   * Identifies when the resource was first created.
   */
  public created?: fhir.FhirDate|undefined;
  /**
   * Indicates who was responsible for creating the resource instance.
   */
  public author?: fhir.Reference|undefined;
  /**
   * Default constructor for Basic - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<BasicArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'Basic';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }
    else { this.code = null; }
    if (source['subject']) { this.subject = new fhir.Reference(source.subject); }
    if (source['created']) { this.created = new fhir.FhirDate({value: source.created}); }
    if (source['author']) { this.author = new fhir.Reference(source.author); }
  }
  /**
   * Example-bound Value Set for code
   */
  public static codeExampleValueSet():BasicResourceTypeValueSetType {
    return BasicResourceTypeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['resourceType']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property resourceType:'Basic' fhir: Basic.resourceType:'Basic'", }));
    }
    if (this["identifier"]) { this.identifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (!this['code']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property code:fhir.CodeableConcept fhir: Basic.code:CodeableConcept", }));
    }
    if (this["code"]) { outcome.issue!.push(...this.code.doModelValidation().issue!); }
    if (this["subject"]) { outcome.issue!.push(...this.subject.doModelValidation().issue!); }
    if (this["created"]) { outcome.issue!.push(...this.created.doModelValidation().issue!); }
    if (this["author"]) { outcome.issue!.push(...this.author.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
