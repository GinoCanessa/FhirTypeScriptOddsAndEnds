// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Basic

import * as fhir from '../fhir.js'

import { BasicResourceTypeValueSet, BasicResourceTypeValueSetType, BasicResourceTypeValueSetEnum } from '../fhirValueSets/BasicResourceTypeValueSet.js'

/**
 * Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification.
 */
export type IBasic = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "Basic";
  /**
   * Identifier assigned to the resource for business purposes, outside the context of FHIR.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * Because resource references will only be able to indicate 'Basic', the type of reference will need to be specified in a Profile identified as part of the resource.  Refer to the resource notes section for information on appropriate terminologies for this code.
   * This element is labeled as a modifier because it defines the meaning of the resource and cannot be ignored.
   */
  code: fhir.ICodeableConcept|null;
  /**
   * Optional as not all potential resources will have subjects.  Resources associated with multiple subjects can handle this via extension.
   */
  subject?: fhir.IReference|undefined;
  /**
   * Identifies when the resource was first created.
   */
  created?: string|undefined;
  /**
   * Extended properties for primitive element: Basic.created
   */
  _created?: fhir.IFhirElement|undefined;
  /**
   * Indicates who was responsible for creating the resource instance.
   */
  author?: fhir.IReference|undefined;
}

/**
 * Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification.
 */
export class Basic extends fhir.DomainResource implements IBasic {
  /**
   * Resource Type Name
   */
  public resourceType: "Basic";
  /**
   * Identifier assigned to the resource for business purposes, outside the context of FHIR.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * Because resource references will only be able to indicate 'Basic', the type of reference will need to be specified in a Profile identified as part of the resource.  Refer to the resource notes section for information on appropriate terminologies for this code.
   * This element is labeled as a modifier because it defines the meaning of the resource and cannot be ignored.
   */
  public code: fhir.CodeableConcept|null;
  /**
   * Optional as not all potential resources will have subjects.  Resources associated with multiple subjects can handle this via extension.
   */
  public subject?: fhir.Reference|undefined;
  /**
   * Identifies when the resource was first created.
   */
  public created?: string|undefined;
  /**
   * Extended properties for primitive element: Basic.created
   */
  public _created?: fhir.FhirElement|undefined;
  /**
   * Indicates who was responsible for creating the resource instance.
   */
  public author?: fhir.Reference|undefined;
  /**
   * Default constructor for Basic - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IBasic> = { }) {
    super(source);
    this.resourceType = 'Basic';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code!); }
    else { this.code = null; }
    if (source['subject']) { this.subject = new fhir.Reference(source.subject!); }
    if (source['created']) { this.created = source.created; }
    if (source['_created']) { this._created = new fhir.FhirElement(source._created!); }
    if (source['author']) { this.author = new fhir.Reference(source.author!); }
  }
  /**
   * Example-bound Value Set for code
   */
  public static codeExampleValueSet():BasicResourceTypeValueSetType {
    return BasicResourceTypeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: Basic.resourceType']); }
    if (this["identifier"]) { this.identifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (!this["code"]) { results.push(["code",'Missing required element: Basic.code']); }
    if (this["code"]) { results.push(...this.code.doModelValidation()); }
    if (this["subject"]) { results.push(...this.subject.doModelValidation()); }
    if (this["_created"]) { results.push(...this._created.doModelValidation()); }
    if (this["author"]) { results.push(...this.author.doModelValidation()); }
    return results;
  }
}
