// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: EffectEvidenceSynthesis

import * as fhir from '../fhir.js';

import { ExposureStateValueSet, ExposureStateValueSetType,} from '../fhirValueSets/ExposureStateValueSet.js';
import { ExposureStateValueSetEnum } from '../valueSetEnums.js';
import { EvidenceVariantStateValueSet, EvidenceVariantStateValueSetType,} from '../fhirValueSets/EvidenceVariantStateValueSet.js';
import { EvidenceVariantStateValueSetEnum } from '../valueSetEnums.js';
import { PrecisionEstimateTypeValueSet, PrecisionEstimateTypeValueSetType,} from '../fhirValueSets/PrecisionEstimateTypeValueSet.js';
import { PrecisionEstimateTypeValueSetEnum } from '../valueSetEnums.js';
import { EffectEstimateTypeValueSet, EffectEstimateTypeValueSetType,} from '../fhirValueSets/EffectEstimateTypeValueSet.js';
import { EffectEstimateTypeValueSetEnum } from '../valueSetEnums.js';
import { UcumUnitsValueSet, UcumUnitsValueSetType,} from '../fhirValueSets/UcumUnitsValueSet.js';
import { UcumUnitsValueSetEnum } from '../valueSetEnums.js';
import { CertaintySubcomponentTypeValueSet, CertaintySubcomponentTypeValueSetType,} from '../fhirValueSets/CertaintySubcomponentTypeValueSet.js';
import { CertaintySubcomponentTypeValueSetEnum } from '../valueSetEnums.js';
import { CertaintySubcomponentRatingValueSet, CertaintySubcomponentRatingValueSetType,} from '../fhirValueSets/CertaintySubcomponentRatingValueSet.js';
import { CertaintySubcomponentRatingValueSetEnum } from '../valueSetEnums.js';
import { EvidenceQualityValueSet, EvidenceQualityValueSetType,} from '../fhirValueSets/EvidenceQualityValueSet.js';
import { EvidenceQualityValueSetEnum } from '../valueSetEnums.js';
import { PublicationStatusValueSet, PublicationStatusValueSetType,} from '../fhirValueSets/PublicationStatusValueSet.js';
import { PublicationStatusValueSetEnum } from '../valueSetEnums.js';
import { DefinitionTopicValueSet, DefinitionTopicValueSetType,} from '../fhirValueSets/DefinitionTopicValueSet.js';
import { DefinitionTopicValueSetEnum } from '../valueSetEnums.js';
import { SynthesisTypeValueSet, SynthesisTypeValueSetType,} from '../fhirValueSets/SynthesisTypeValueSet.js';
import { SynthesisTypeValueSetEnum } from '../valueSetEnums.js';
import { StudyTypeValueSet, StudyTypeValueSetType,} from '../fhirValueSets/StudyTypeValueSet.js';
import { StudyTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Valid arguments for the EffectEvidenceSynthesisSampleSize type.
 */
export interface EffectEvidenceSynthesisSampleSizeArgs extends fhir.BackboneElementArgs {
  /**
   * Human-readable summary of sample size.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * Number of studies included in this evidence synthesis.
   */
  numberOfStudies?: fhir.FhirInteger|number|undefined;
  /**
   * Number of participants included in this evidence synthesis.
   */
  numberOfParticipants?: fhir.FhirInteger|number|undefined;
}

/**
 * A description of the size of the sample involved in the synthesis.
 */
export class EffectEvidenceSynthesisSampleSize extends fhir.BackboneElement {
  readonly __dataType:string = 'EffectEvidenceSynthesisSampleSize';
  /**
   * Human-readable summary of sample size.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * Number of studies included in this evidence synthesis.
   */
  public numberOfStudies?: fhir.FhirInteger|undefined;
  /**
   * Number of participants included in this evidence synthesis.
   */
  public numberOfParticipants?: fhir.FhirInteger|undefined;
  /**
   * Default constructor for EffectEvidenceSynthesisSampleSize - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<EffectEvidenceSynthesisSampleSizeArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }
    if (source['numberOfStudies']) { this.numberOfStudies = new fhir.FhirInteger({value: source.numberOfStudies}); }
    if (source['numberOfParticipants']) { this.numberOfParticipants = new fhir.FhirInteger({value: source.numberOfParticipants}); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["description"]) { outcome.issue!.push(...this.description.doModelValidation().issue!); }
    if (this["numberOfStudies"]) { outcome.issue!.push(...this.numberOfStudies.doModelValidation().issue!); }
    if (this["numberOfParticipants"]) { outcome.issue!.push(...this.numberOfParticipants.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the EffectEvidenceSynthesisResultsByExposure type.
 */
export interface EffectEvidenceSynthesisResultsByExposureArgs extends fhir.BackboneElementArgs {
  /**
   * Human-readable summary of results by exposure state.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * Whether these results are for the exposure state or alternative exposure state.
   */
  exposureState?: ExposureStateValueSetEnum|undefined;
  /**
   * Used to define variant exposure states such as low-risk state.
   */
  variantState?: fhir.CodeableConceptArgs|undefined;
  /**
   * Reference to a RiskEvidenceSynthesis resource.
   */
  riskEvidenceSynthesis: fhir.ReferenceArgs|null;
}

/**
 * A description of the results for each exposure considered in the effect estimate.
 */
export class EffectEvidenceSynthesisResultsByExposure extends fhir.BackboneElement {
  readonly __dataType:string = 'EffectEvidenceSynthesisResultsByExposure';
  /**
   * Human-readable summary of results by exposure state.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * Whether these results are for the exposure state or alternative exposure state.
   */
  public exposureState?: ExposureStateValueSetEnum|undefined;
  /**
   * Used to define variant exposure states such as low-risk state.
   */
  public variantState?: fhir.CodeableConcept|undefined;
  /**
   * Reference to a RiskEvidenceSynthesis resource.
   */
  public riskEvidenceSynthesis: fhir.Reference|null;
  /**
   * Default constructor for EffectEvidenceSynthesisResultsByExposure - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<EffectEvidenceSynthesisResultsByExposureArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }
    if (source['exposureState']) { this.exposureState = source.exposureState; }
    if (source['variantState']) { this.variantState = new fhir.CodeableConcept(source.variantState); }
    if (source['riskEvidenceSynthesis']) { this.riskEvidenceSynthesis = new fhir.Reference(source.riskEvidenceSynthesis); }
    else { this.riskEvidenceSynthesis = null; }
  }
  /**
   * Required-bound Value Set for exposureState
   */
  public static exposureStateRequiredValueSet():ExposureStateValueSetType {
    return ExposureStateValueSet;
  }
  /**
   * Extensible-bound Value Set for variantState
   */
  public static variantStateExtensibleValueSet():EvidenceVariantStateValueSetType {
    return EvidenceVariantStateValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["description"]) { outcome.issue!.push(...this.description.doModelValidation().issue!); }
    if (this["variantState"]) { outcome.issue!.push(...this.variantState.doModelValidation().issue!); }
    if (!this['riskEvidenceSynthesis']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property riskEvidenceSynthesis:fhir.Reference fhir: EffectEvidenceSynthesis.resultsByExposure.riskEvidenceSynthesis:Reference", }));
    }
    if (this["riskEvidenceSynthesis"]) { outcome.issue!.push(...this.riskEvidenceSynthesis.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the EffectEvidenceSynthesisEffectEstimatePrecisionEstimate type.
 */
export interface EffectEvidenceSynthesisEffectEstimatePrecisionEstimateArgs extends fhir.BackboneElementArgs {
  /**
   * Examples include confidence interval and interquartile range.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * Use 95 for a 95% confidence interval.
   */
  level?: fhir.FhirDecimal|number|undefined;
  /**
   * Lower bound of confidence interval.
   */
  from?: fhir.FhirDecimal|number|undefined;
  /**
   * Upper bound of confidence interval.
   */
  to?: fhir.FhirDecimal|number|undefined;
}

/**
 * A description of the precision of the estimate for the effect.
 */
export class EffectEvidenceSynthesisEffectEstimatePrecisionEstimate extends fhir.BackboneElement {
  readonly __dataType:string = 'EffectEvidenceSynthesisEffectEstimatePrecisionEstimate';
  /**
   * Examples include confidence interval and interquartile range.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Use 95 for a 95% confidence interval.
   */
  public level?: fhir.FhirDecimal|undefined;
  /**
   * Lower bound of confidence interval.
   */
  public from?: fhir.FhirDecimal|undefined;
  /**
   * Upper bound of confidence interval.
   */
  public to?: fhir.FhirDecimal|undefined;
  /**
   * Default constructor for EffectEvidenceSynthesisEffectEstimatePrecisionEstimate - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<EffectEvidenceSynthesisEffectEstimatePrecisionEstimateArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['level']) { this.level = new fhir.FhirDecimal({value: source.level}); }
    if (source['from']) { this.from = new fhir.FhirDecimal({value: source.from}); }
    if (source['to']) { this.to = new fhir.FhirDecimal({value: source.to}); }
  }
  /**
   * Extensible-bound Value Set for type
   */
  public static typeExtensibleValueSet():PrecisionEstimateTypeValueSetType {
    return PrecisionEstimateTypeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["type"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }
    if (this["level"]) { outcome.issue!.push(...this.level.doModelValidation().issue!); }
    if (this["from"]) { outcome.issue!.push(...this.from.doModelValidation().issue!); }
    if (this["to"]) { outcome.issue!.push(...this.to.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the EffectEvidenceSynthesisEffectEstimate type.
 */
export interface EffectEvidenceSynthesisEffectEstimateArgs extends fhir.BackboneElementArgs {
  /**
   * Human-readable summary of effect estimate.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * Examples include relative risk and mean difference.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * Used to define variant exposure states such as low-risk state.
   */
  variantState?: fhir.CodeableConceptArgs|undefined;
  /**
   * The point estimate of the effect estimate.
   */
  value?: fhir.FhirDecimal|number|undefined;
  /**
   * Specifies the UCUM unit for the outcome.
   */
  unitOfMeasure?: fhir.CodeableConceptArgs|undefined;
  /**
   * A description of the precision of the estimate for the effect.
   */
  precisionEstimate?: fhir.EffectEvidenceSynthesisEffectEstimatePrecisionEstimateArgs[]|undefined;
}

/**
 * The estimated effect of the exposure variant.
 */
export class EffectEvidenceSynthesisEffectEstimate extends fhir.BackboneElement {
  readonly __dataType:string = 'EffectEvidenceSynthesisEffectEstimate';
  /**
   * Human-readable summary of effect estimate.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * Examples include relative risk and mean difference.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Used to define variant exposure states such as low-risk state.
   */
  public variantState?: fhir.CodeableConcept|undefined;
  /**
   * The point estimate of the effect estimate.
   */
  public value?: fhir.FhirDecimal|undefined;
  /**
   * Specifies the UCUM unit for the outcome.
   */
  public unitOfMeasure?: fhir.CodeableConcept|undefined;
  /**
   * A description of the precision of the estimate for the effect.
   */
  public precisionEstimate?: fhir.EffectEvidenceSynthesisEffectEstimatePrecisionEstimate[]|undefined = [];
  /**
   * Default constructor for EffectEvidenceSynthesisEffectEstimate - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<EffectEvidenceSynthesisEffectEstimateArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['variantState']) { this.variantState = new fhir.CodeableConcept(source.variantState); }
    if (source['value']) { this.value = new fhir.FhirDecimal({value: source.value}); }
    if (source['unitOfMeasure']) { this.unitOfMeasure = new fhir.CodeableConcept(source.unitOfMeasure); }
    if (source['precisionEstimate']) { this.precisionEstimate = source.precisionEstimate.map((x) => new fhir.EffectEvidenceSynthesisEffectEstimatePrecisionEstimate(x)); }
  }
  /**
   * Extensible-bound Value Set for type
   */
  public static typeExtensibleValueSet():EffectEstimateTypeValueSetType {
    return EffectEstimateTypeValueSet;
  }
  /**
   * Extensible-bound Value Set for variantState
   */
  public static variantStateExtensibleValueSet():EvidenceVariantStateValueSetType {
    return EvidenceVariantStateValueSet;
  }
  /**
   * Required-bound Value Set for unitOfMeasure
   */
  public static unitOfMeasureRequiredValueSet():UcumUnitsValueSetType {
    return UcumUnitsValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["description"]) { outcome.issue!.push(...this.description.doModelValidation().issue!); }
    if (this["type"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }
    if (this["variantState"]) { outcome.issue!.push(...this.variantState.doModelValidation().issue!); }
    if (this["value"]) { outcome.issue!.push(...this.value.doModelValidation().issue!); }
    if (this["unitOfMeasure"]) { outcome.issue!.push(...this.unitOfMeasure.doModelValidation().issue!); }
    if (this["precisionEstimate"]) { this.precisionEstimate.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the EffectEvidenceSynthesisCertaintyCertaintySubcomponent type.
 */
export interface EffectEvidenceSynthesisCertaintyCertaintySubcomponentArgs extends fhir.BackboneElementArgs {
  /**
   * Type of subcomponent of certainty rating.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * A rating of a subcomponent of rating certainty.
   */
  rating?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * A human-readable string to clarify or explain concepts about the resource.
   */
  note?: fhir.AnnotationArgs[]|undefined;
}

/**
 * A description of a component of the overall certainty.
 */
export class EffectEvidenceSynthesisCertaintyCertaintySubcomponent extends fhir.BackboneElement {
  readonly __dataType:string = 'EffectEvidenceSynthesisCertaintyCertaintySubcomponent';
  /**
   * Type of subcomponent of certainty rating.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * A rating of a subcomponent of rating certainty.
   */
  public rating?: fhir.CodeableConcept[]|undefined = [];
  /**
   * A human-readable string to clarify or explain concepts about the resource.
   */
  public note?: fhir.Annotation[]|undefined = [];
  /**
   * Default constructor for EffectEvidenceSynthesisCertaintyCertaintySubcomponent - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<EffectEvidenceSynthesisCertaintyCertaintySubcomponentArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['rating']) { this.rating = source.rating.map((x) => new fhir.CodeableConcept(x)); }
    if (source['note']) { this.note = source.note.map((x) => new fhir.Annotation(x)); }
  }
  /**
   * Extensible-bound Value Set for type
   */
  public static typeExtensibleValueSet():CertaintySubcomponentTypeValueSetType {
    return CertaintySubcomponentTypeValueSet;
  }
  /**
   * Extensible-bound Value Set for rating
   */
  public static ratingExtensibleValueSet():CertaintySubcomponentRatingValueSetType {
    return CertaintySubcomponentRatingValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["type"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }
    if (this["rating"]) { this.rating.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["note"]) { this.note.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the EffectEvidenceSynthesisCertainty type.
 */
export interface EffectEvidenceSynthesisCertaintyArgs extends fhir.BackboneElementArgs {
  /**
   * A rating of the certainty of the effect estimate.
   */
  rating?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * A human-readable string to clarify or explain concepts about the resource.
   */
  note?: fhir.AnnotationArgs[]|undefined;
  /**
   * A description of a component of the overall certainty.
   */
  certaintySubcomponent?: fhir.EffectEvidenceSynthesisCertaintyCertaintySubcomponentArgs[]|undefined;
}

/**
 * A description of the certainty of the effect estimate.
 */
export class EffectEvidenceSynthesisCertainty extends fhir.BackboneElement {
  readonly __dataType:string = 'EffectEvidenceSynthesisCertainty';
  /**
   * A rating of the certainty of the effect estimate.
   */
  public rating?: fhir.CodeableConcept[]|undefined = [];
  /**
   * A human-readable string to clarify or explain concepts about the resource.
   */
  public note?: fhir.Annotation[]|undefined = [];
  /**
   * A description of a component of the overall certainty.
   */
  public certaintySubcomponent?: fhir.EffectEvidenceSynthesisCertaintyCertaintySubcomponent[]|undefined = [];
  /**
   * Default constructor for EffectEvidenceSynthesisCertainty - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<EffectEvidenceSynthesisCertaintyArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['rating']) { this.rating = source.rating.map((x) => new fhir.CodeableConcept(x)); }
    if (source['note']) { this.note = source.note.map((x) => new fhir.Annotation(x)); }
    if (source['certaintySubcomponent']) { this.certaintySubcomponent = source.certaintySubcomponent.map((x) => new fhir.EffectEvidenceSynthesisCertaintyCertaintySubcomponent(x)); }
  }
  /**
   * Extensible-bound Value Set for rating
   */
  public static ratingExtensibleValueSet():EvidenceQualityValueSetType {
    return EvidenceQualityValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["rating"]) { this.rating.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["note"]) { this.note.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["certaintySubcomponent"]) { this.certaintySubcomponent.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the EffectEvidenceSynthesis type.
 */
export interface EffectEvidenceSynthesisArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "EffectEvidenceSynthesis"|undefined;
  /**
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: fhir.FhirUri|string|undefined;
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this effect evidence synthesis outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * There may be different effect evidence synthesis instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the effect evidence synthesis with the format [url]|[version].
   */
  version?: fhir.FhirString|string|undefined;
  /**
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: fhir.FhirString|string|undefined;
  /**
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: fhir.FhirString|string|undefined;
  /**
   * Allows filtering of effect evidence synthesiss that are appropriate for use versus not.
   */
  status: PublicationStatusValueSetEnum|null;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the effect evidence synthesis. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: fhir.FhirDateTime|string|undefined;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the effect evidence synthesis is the organization or individual primarily responsible for the maintenance and upkeep of the effect evidence synthesis. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the effect evidence synthesis. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: fhir.FhirString|string|undefined;
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: fhir.ContactDetailArgs[]|undefined;
  /**
   * This description can be used to capture details such as why the effect evidence synthesis was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the effect evidence synthesis as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the effect evidence synthesis is presumed to be the predominant language in the place the effect evidence synthesis was created).
   */
  description?: fhir.FhirMarkdown|string|undefined;
  /**
   * A human-readable string to clarify or explain concepts about the resource.
   */
  note?: fhir.AnnotationArgs[]|undefined;
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: fhir.UsageContextArgs[]|undefined;
  /**
   * It may be possible for the effect evidence synthesis to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * A copyright statement relating to the effect evidence synthesis and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the effect evidence synthesis.
   */
  copyright?: fhir.FhirMarkdown|string|undefined;
  /**
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   */
  approvalDate?: fhir.FhirDate|string|undefined;
  /**
   * If specified, this date follows the original approval date.
   */
  lastReviewDate?: fhir.FhirDate|string|undefined;
  /**
   * The effective period for a effect evidence synthesis  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
   */
  effectivePeriod?: fhir.PeriodArgs|undefined;
  /**
   * Descriptive topics related to the content of the EffectEvidenceSynthesis. Topics provide a high-level categorization grouping types of EffectEvidenceSynthesiss that can be useful for filtering and searching.
   */
  topic?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * An individiual or organization primarily involved in the creation and maintenance of the content.
   */
  author?: fhir.ContactDetailArgs[]|undefined;
  /**
   * An individual or organization primarily responsible for internal coherence of the content.
   */
  editor?: fhir.ContactDetailArgs[]|undefined;
  /**
   * An individual or organization primarily responsible for review of some aspect of the content.
   */
  reviewer?: fhir.ContactDetailArgs[]|undefined;
  /**
   * An individual or organization responsible for officially endorsing the content for use in some setting.
   */
  endorser?: fhir.ContactDetailArgs[]|undefined;
  /**
   * Each related artifact is either an attachment, or a reference to another resource, but not both.
   */
  relatedArtifact?: fhir.RelatedArtifactArgs[]|undefined;
  /**
   * Type of synthesis eg meta-analysis.
   */
  synthesisType?: fhir.CodeableConceptArgs|undefined;
  /**
   * Type of study eg randomized trial.
   */
  studyType?: fhir.CodeableConceptArgs|undefined;
  /**
   * A reference to a EvidenceVariable resource that defines the population for the research.
   */
  population: fhir.ReferenceArgs|null;
  /**
   * A reference to a EvidenceVariable resource that defines the exposure for the research.
   */
  exposure: fhir.ReferenceArgs|null;
  /**
   * A reference to a EvidenceVariable resource that defines the comparison exposure for the research.
   */
  exposureAlternative: fhir.ReferenceArgs|null;
  /**
   * A reference to a EvidenceVariable resomece that defines the outcome for the research.
   */
  outcome: fhir.ReferenceArgs|null;
  /**
   * A description of the size of the sample involved in the synthesis.
   */
  sampleSize?: fhir.EffectEvidenceSynthesisSampleSizeArgs|undefined;
  /**
   * A description of the results for each exposure considered in the effect estimate.
   */
  resultsByExposure?: fhir.EffectEvidenceSynthesisResultsByExposureArgs[]|undefined;
  /**
   * The estimated effect of the exposure variant.
   */
  effectEstimate?: fhir.EffectEvidenceSynthesisEffectEstimateArgs[]|undefined;
  /**
   * A description of the certainty of the effect estimate.
   */
  certainty?: fhir.EffectEvidenceSynthesisCertaintyArgs[]|undefined;
}

/**
 * The EffectEvidenceSynthesis resource describes the difference in an outcome between exposures states in a population where the effect estimate is derived from a combination of research studies.
 */
export class EffectEvidenceSynthesis extends fhir.DomainResource {
  readonly __dataType:string = 'EffectEvidenceSynthesis';
  /**
   * Resource Type Name
   */
  public resourceType: "EffectEvidenceSynthesis";
  /**
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  public url?: fhir.FhirUri|undefined;
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this effect evidence synthesis outside of FHIR, where it is not possible to use the logical URI.
   */
  public identifier?: fhir.Identifier[]|undefined = [];
  /**
   * There may be different effect evidence synthesis instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the effect evidence synthesis with the format [url]|[version].
   */
  public version?: fhir.FhirString|undefined;
  /**
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  public name?: fhir.FhirString|undefined;
  /**
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  public title?: fhir.FhirString|undefined;
  /**
   * Allows filtering of effect evidence synthesiss that are appropriate for use versus not.
   */
  public status: PublicationStatusValueSetEnum|null;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the effect evidence synthesis. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  public date?: fhir.FhirDateTime|undefined;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the effect evidence synthesis is the organization or individual primarily responsible for the maintenance and upkeep of the effect evidence synthesis. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the effect evidence synthesis. This item SHOULD be populated unless the information is available from context.
   */
  public publisher?: fhir.FhirString|undefined;
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  public contact?: fhir.ContactDetail[]|undefined = [];
  /**
   * This description can be used to capture details such as why the effect evidence synthesis was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the effect evidence synthesis as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the effect evidence synthesis is presumed to be the predominant language in the place the effect evidence synthesis was created).
   */
  public description?: fhir.FhirMarkdown|undefined;
  /**
   * A human-readable string to clarify or explain concepts about the resource.
   */
  public note?: fhir.Annotation[]|undefined = [];
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  public useContext?: fhir.UsageContext[]|undefined = [];
  /**
   * It may be possible for the effect evidence synthesis to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  public jurisdiction?: fhir.CodeableConcept[]|undefined = [];
  /**
   * A copyright statement relating to the effect evidence synthesis and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the effect evidence synthesis.
   */
  public copyright?: fhir.FhirMarkdown|undefined;
  /**
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   */
  public approvalDate?: fhir.FhirDate|undefined;
  /**
   * If specified, this date follows the original approval date.
   */
  public lastReviewDate?: fhir.FhirDate|undefined;
  /**
   * The effective period for a effect evidence synthesis  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
   */
  public effectivePeriod?: fhir.Period|undefined;
  /**
   * Descriptive topics related to the content of the EffectEvidenceSynthesis. Topics provide a high-level categorization grouping types of EffectEvidenceSynthesiss that can be useful for filtering and searching.
   */
  public topic?: fhir.CodeableConcept[]|undefined = [];
  /**
   * An individiual or organization primarily involved in the creation and maintenance of the content.
   */
  public author?: fhir.ContactDetail[]|undefined = [];
  /**
   * An individual or organization primarily responsible for internal coherence of the content.
   */
  public editor?: fhir.ContactDetail[]|undefined = [];
  /**
   * An individual or organization primarily responsible for review of some aspect of the content.
   */
  public reviewer?: fhir.ContactDetail[]|undefined = [];
  /**
   * An individual or organization responsible for officially endorsing the content for use in some setting.
   */
  public endorser?: fhir.ContactDetail[]|undefined = [];
  /**
   * Each related artifact is either an attachment, or a reference to another resource, but not both.
   */
  public relatedArtifact?: fhir.RelatedArtifact[]|undefined = [];
  /**
   * Type of synthesis eg meta-analysis.
   */
  public synthesisType?: fhir.CodeableConcept|undefined;
  /**
   * Type of study eg randomized trial.
   */
  public studyType?: fhir.CodeableConcept|undefined;
  /**
   * A reference to a EvidenceVariable resource that defines the population for the research.
   */
  public population: fhir.Reference|null;
  /**
   * A reference to a EvidenceVariable resource that defines the exposure for the research.
   */
  public exposure: fhir.Reference|null;
  /**
   * A reference to a EvidenceVariable resource that defines the comparison exposure for the research.
   */
  public exposureAlternative: fhir.Reference|null;
  /**
   * A reference to a EvidenceVariable resomece that defines the outcome for the research.
   */
  public outcome: fhir.Reference|null;
  /**
   * A description of the size of the sample involved in the synthesis.
   */
  public sampleSize?: fhir.EffectEvidenceSynthesisSampleSize|undefined;
  /**
   * A description of the results for each exposure considered in the effect estimate.
   */
  public resultsByExposure?: fhir.EffectEvidenceSynthesisResultsByExposure[]|undefined = [];
  /**
   * The estimated effect of the exposure variant.
   */
  public effectEstimate?: fhir.EffectEvidenceSynthesisEffectEstimate[]|undefined = [];
  /**
   * A description of the certainty of the effect estimate.
   */
  public certainty?: fhir.EffectEvidenceSynthesisCertainty[]|undefined = [];
  /**
   * Default constructor for EffectEvidenceSynthesis - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<EffectEvidenceSynthesisArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'EffectEvidenceSynthesis';
    if (source['url']) { this.url = new fhir.FhirUri({value: source.url}); }
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['version']) { this.version = new fhir.FhirString({value: source.version}); }
    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }
    if (source['title']) { this.title = new fhir.FhirString({value: source.title}); }
    if (source['status']) { this.status = source.status; }
    else { this.status = null; }
    if (source['date']) { this.date = new fhir.FhirDateTime({value: source.date}); }
    if (source['publisher']) { this.publisher = new fhir.FhirString({value: source.publisher}); }
    if (source['contact']) { this.contact = source.contact.map((x) => new fhir.ContactDetail(x)); }
    if (source['description']) { this.description = new fhir.FhirMarkdown({value: source.description}); }
    if (source['note']) { this.note = source.note.map((x) => new fhir.Annotation(x)); }
    if (source['useContext']) { this.useContext = source.useContext.map((x) => new fhir.UsageContext(x)); }
    if (source['jurisdiction']) { this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x)); }
    if (source['copyright']) { this.copyright = new fhir.FhirMarkdown({value: source.copyright}); }
    if (source['approvalDate']) { this.approvalDate = new fhir.FhirDate({value: source.approvalDate}); }
    if (source['lastReviewDate']) { this.lastReviewDate = new fhir.FhirDate({value: source.lastReviewDate}); }
    if (source['effectivePeriod']) { this.effectivePeriod = new fhir.Period(source.effectivePeriod); }
    if (source['topic']) { this.topic = source.topic.map((x) => new fhir.CodeableConcept(x)); }
    if (source['author']) { this.author = source.author.map((x) => new fhir.ContactDetail(x)); }
    if (source['editor']) { this.editor = source.editor.map((x) => new fhir.ContactDetail(x)); }
    if (source['reviewer']) { this.reviewer = source.reviewer.map((x) => new fhir.ContactDetail(x)); }
    if (source['endorser']) { this.endorser = source.endorser.map((x) => new fhir.ContactDetail(x)); }
    if (source['relatedArtifact']) { this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x)); }
    if (source['synthesisType']) { this.synthesisType = new fhir.CodeableConcept(source.synthesisType); }
    if (source['studyType']) { this.studyType = new fhir.CodeableConcept(source.studyType); }
    if (source['population']) { this.population = new fhir.Reference(source.population); }
    else { this.population = null; }
    if (source['exposure']) { this.exposure = new fhir.Reference(source.exposure); }
    else { this.exposure = null; }
    if (source['exposureAlternative']) { this.exposureAlternative = new fhir.Reference(source.exposureAlternative); }
    else { this.exposureAlternative = null; }
    if (source['outcome']) { this.outcome = new fhir.Reference(source.outcome); }
    else { this.outcome = null; }
    if (source['sampleSize']) { this.sampleSize = new fhir.EffectEvidenceSynthesisSampleSize(source.sampleSize); }
    if (source['resultsByExposure']) { this.resultsByExposure = source.resultsByExposure.map((x) => new fhir.EffectEvidenceSynthesisResultsByExposure(x)); }
    if (source['effectEstimate']) { this.effectEstimate = source.effectEstimate.map((x) => new fhir.EffectEvidenceSynthesisEffectEstimate(x)); }
    if (source['certainty']) { this.certainty = source.certainty.map((x) => new fhir.EffectEvidenceSynthesisCertainty(x)); }
  }
  /**
   * Required-bound Value Set for status
   */
  public static statusRequiredValueSet():PublicationStatusValueSetType {
    return PublicationStatusValueSet;
  }
  /**
   * Example-bound Value Set for topic
   */
  public static topicExampleValueSet():DefinitionTopicValueSetType {
    return DefinitionTopicValueSet;
  }
  /**
   * Extensible-bound Value Set for synthesisType
   */
  public static synthesisTypeExtensibleValueSet():SynthesisTypeValueSetType {
    return SynthesisTypeValueSet;
  }
  /**
   * Extensible-bound Value Set for studyType
   */
  public static studyTypeExtensibleValueSet():StudyTypeValueSetType {
    return StudyTypeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['resourceType']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property resourceType:'EffectEvidenceSynthesis' fhir: EffectEvidenceSynthesis.resourceType:'EffectEvidenceSynthesis'", }));
    }
    if (this["url"]) { outcome.issue!.push(...this.url.doModelValidation().issue!); }
    if (this["identifier"]) { this.identifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["version"]) { outcome.issue!.push(...this.version.doModelValidation().issue!); }
    if (this["name"]) { outcome.issue!.push(...this.name.doModelValidation().issue!); }
    if (this["title"]) { outcome.issue!.push(...this.title.doModelValidation().issue!); }
    if (!this['status']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property status:PublicationStatusValueSetEnum fhir: EffectEvidenceSynthesis.status:code", }));
    }
    if (this["date"]) { outcome.issue!.push(...this.date.doModelValidation().issue!); }
    if (this["publisher"]) { outcome.issue!.push(...this.publisher.doModelValidation().issue!); }
    if (this["contact"]) { this.contact.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["description"]) { outcome.issue!.push(...this.description.doModelValidation().issue!); }
    if (this["note"]) { this.note.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["useContext"]) { this.useContext.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["jurisdiction"]) { this.jurisdiction.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["copyright"]) { outcome.issue!.push(...this.copyright.doModelValidation().issue!); }
    if (this["approvalDate"]) { outcome.issue!.push(...this.approvalDate.doModelValidation().issue!); }
    if (this["lastReviewDate"]) { outcome.issue!.push(...this.lastReviewDate.doModelValidation().issue!); }
    if (this["effectivePeriod"]) { outcome.issue!.push(...this.effectivePeriod.doModelValidation().issue!); }
    if (this["topic"]) { this.topic.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["author"]) { this.author.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["editor"]) { this.editor.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["reviewer"]) { this.reviewer.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["endorser"]) { this.endorser.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["relatedArtifact"]) { this.relatedArtifact.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["synthesisType"]) { outcome.issue!.push(...this.synthesisType.doModelValidation().issue!); }
    if (this["studyType"]) { outcome.issue!.push(...this.studyType.doModelValidation().issue!); }
    if (!this['population']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property population:fhir.Reference fhir: EffectEvidenceSynthesis.population:Reference", }));
    }
    if (this["population"]) { outcome.issue!.push(...this.population.doModelValidation().issue!); }
    if (!this['exposure']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property exposure:fhir.Reference fhir: EffectEvidenceSynthesis.exposure:Reference", }));
    }
    if (this["exposure"]) { outcome.issue!.push(...this.exposure.doModelValidation().issue!); }
    if (!this['exposureAlternative']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property exposureAlternative:fhir.Reference fhir: EffectEvidenceSynthesis.exposureAlternative:Reference", }));
    }
    if (this["exposureAlternative"]) { outcome.issue!.push(...this.exposureAlternative.doModelValidation().issue!); }
    if (!this['outcome']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property outcome:fhir.Reference fhir: EffectEvidenceSynthesis.outcome:Reference", }));
    }
    if (this["outcome"]) { outcome.issue!.push(...this.outcome.doModelValidation().issue!); }
    if (this["sampleSize"]) { outcome.issue!.push(...this.sampleSize.doModelValidation().issue!); }
    if (this["resultsByExposure"]) { this.resultsByExposure.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["effectEstimate"]) { this.effectEstimate.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["certainty"]) { this.certainty.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
