// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * A description of the size of the sample involved in the synthesis.
 */
export type IEffectEvidenceSynthesisSampleSize = fhir.IBackboneElement & {
  /**
   * Human-readable summary of sample size.
   */
  description?: string|undefined;
  _description?: fhir.IFhirElement|undefined;
  /**
   * Number of participants included in this evidence synthesis.
   */
  numberOfParticipants?: number|undefined;
  _numberOfParticipants?: fhir.IFhirElement|undefined;
  /**
   * Number of studies included in this evidence synthesis.
   */
  numberOfStudies?: number|undefined;
  _numberOfStudies?: fhir.IFhirElement|undefined;
}
/**
 * A description of the results for each exposure considered in the effect estimate.
 */
export type IEffectEvidenceSynthesisResultsByExposure = fhir.IBackboneElement & {
  /**
   * Human-readable summary of results by exposure state.
   */
  description?: string|undefined;
  _description?: fhir.IFhirElement|undefined;
  /**
   * Whether these results are for the exposure state or alternative exposure state.
   */
  exposureState?: EffectEvidenceSynthesisResultsByExposureExposureStateEnum|undefined;
  _exposureState?: fhir.IFhirElement|undefined;
  /**
   * Reference to a RiskEvidenceSynthesis resource.
   */
  riskEvidenceSynthesis: fhir.IReference|null;
  /**
   * Used to define variant exposure states such as low-risk state.
   */
  variantState?: fhir.ICodeableConcept|undefined;
}
/**
 * A description of the precision of the estimate for the effect.
 */
export type IEffectEvidenceSynthesisEffectEstimatePrecisionEstimate = fhir.IBackboneElement & {
  /**
   * Lower bound of confidence interval.
   */
  from?: number|undefined;
  _from?: fhir.IFhirElement|undefined;
  /**
   * Use 95 for a 95% confidence interval.
   */
  level?: number|undefined;
  _level?: fhir.IFhirElement|undefined;
  /**
   * Upper bound of confidence interval.
   */
  to?: number|undefined;
  _to?: fhir.IFhirElement|undefined;
  /**
   * Examples include confidence interval and interquartile range.
   */
  type?: fhir.ICodeableConcept|undefined;
}
/**
 * The estimated effect of the exposure variant.
 */
export type IEffectEvidenceSynthesisEffectEstimate = fhir.IBackboneElement & {
  /**
   * Human-readable summary of effect estimate.
   */
  description?: string|undefined;
  _description?: fhir.IFhirElement|undefined;
  /**
   * A description of the precision of the estimate for the effect.
   */
  precisionEstimate?: fhir.IEffectEvidenceSynthesisEffectEstimatePrecisionEstimate[]|undefined;
  /**
   * Examples include relative risk and mean difference.
   */
  type?: fhir.ICodeableConcept|undefined;
  /**
   * Specifies the UCUM unit for the outcome.
   */
  unitOfMeasure?: fhir.ICodeableConcept|undefined;
  /**
   * The point estimate of the effect estimate.
   */
  value?: number|undefined;
  _value?: fhir.IFhirElement|undefined;
  /**
   * Used to define variant exposure states such as low-risk state.
   */
  variantState?: fhir.ICodeableConcept|undefined;
}
/**
 * A description of a component of the overall certainty.
 */
export type IEffectEvidenceSynthesisCertaintyCertaintySubcomponent = fhir.IBackboneElement & {
  /**
   * A human-readable string to clarify or explain concepts about the resource.
   */
  note?: fhir.IAnnotation[]|undefined;
  /**
   * A rating of a subcomponent of rating certainty.
   */
  rating?: fhir.ICodeableConcept[]|undefined;
  /**
   * Type of subcomponent of certainty rating.
   */
  type?: fhir.ICodeableConcept|undefined;
}
/**
 * A description of the certainty of the effect estimate.
 */
export type IEffectEvidenceSynthesisCertainty = fhir.IBackboneElement & {
  /**
   * A description of a component of the overall certainty.
   */
  certaintySubcomponent?: fhir.IEffectEvidenceSynthesisCertaintyCertaintySubcomponent[]|undefined;
  /**
   * A human-readable string to clarify or explain concepts about the resource.
   */
  note?: fhir.IAnnotation[]|undefined;
  /**
   * A rating of the certainty of the effect estimate.
   */
  rating?: fhir.ICodeableConcept[]|undefined;
}
/**
 * The EffectEvidenceSynthesis resource describes the difference in an outcome between exposures states in a population where the effect estimate is derived from a combination of research studies.
 */
export type IEffectEvidenceSynthesis = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "EffectEvidenceSynthesis";
  /**
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   */
  approvalDate?: string|undefined;
  _approvalDate?: fhir.IFhirElement|undefined;
  /**
   * An individiual or organization primarily involved in the creation and maintenance of the content.
   */
  author?: fhir.IContactDetail[]|undefined;
  /**
   * A description of the certainty of the effect estimate.
   */
  certainty?: fhir.IEffectEvidenceSynthesisCertainty[]|undefined;
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: fhir.IContactDetail[]|undefined;
  /**
   * A copyright statement relating to the effect evidence synthesis and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the effect evidence synthesis.
   */
  copyright?: string|undefined;
  _copyright?: fhir.IFhirElement|undefined;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the effect evidence synthesis. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: string|undefined;
  _date?: fhir.IFhirElement|undefined;
  /**
   * This description can be used to capture details such as why the effect evidence synthesis was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the effect evidence synthesis as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the effect evidence synthesis is presumed to be the predominant language in the place the effect evidence synthesis was created).
   */
  description?: string|undefined;
  _description?: fhir.IFhirElement|undefined;
  /**
   * An individual or organization primarily responsible for internal coherence of the content.
   */
  editor?: fhir.IContactDetail[]|undefined;
  /**
   * The estimated effect of the exposure variant.
   */
  effectEstimate?: fhir.IEffectEvidenceSynthesisEffectEstimate[]|undefined;
  /**
   * The effective period for a effect evidence synthesis  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
   */
  effectivePeriod?: fhir.IPeriod|undefined;
  /**
   * An individual or organization responsible for officially endorsing the content for use in some setting.
   */
  endorser?: fhir.IContactDetail[]|undefined;
  /**
   * A reference to a EvidenceVariable resource that defines the exposure for the research.
   */
  exposure: fhir.IReference|null;
  /**
   * A reference to a EvidenceVariable resource that defines the comparison exposure for the research.
   */
  exposureAlternative: fhir.IReference|null;
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this effect evidence synthesis outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * It may be possible for the effect evidence synthesis to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: fhir.ICodeableConcept[]|undefined;
  /**
   * If specified, this date follows the original approval date.
   */
  lastReviewDate?: string|undefined;
  _lastReviewDate?: fhir.IFhirElement|undefined;
  /**
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: string|undefined;
  _name?: fhir.IFhirElement|undefined;
  /**
   * A human-readable string to clarify or explain concepts about the resource.
   */
  note?: fhir.IAnnotation[]|undefined;
  /**
   * A reference to a EvidenceVariable resomece that defines the outcome for the research.
   */
  outcome: fhir.IReference|null;
  /**
   * A reference to a EvidenceVariable resource that defines the population for the research.
   */
  population: fhir.IReference|null;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the effect evidence synthesis is the organization or individual primarily responsible for the maintenance and upkeep of the effect evidence synthesis. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the effect evidence synthesis. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string|undefined;
  _publisher?: fhir.IFhirElement|undefined;
  /**
   * Each related artifact is either an attachment, or a reference to another resource, but not both.
   */
  relatedArtifact?: fhir.IRelatedArtifact[]|undefined;
  /**
   * A description of the results for each exposure considered in the effect estimate.
   */
  resultsByExposure?: fhir.IEffectEvidenceSynthesisResultsByExposure[]|undefined;
  /**
   * An individual or organization primarily responsible for review of some aspect of the content.
   */
  reviewer?: fhir.IContactDetail[]|undefined;
  /**
   * A description of the size of the sample involved in the synthesis.
   */
  sampleSize?: fhir.IEffectEvidenceSynthesisSampleSize|undefined;
  /**
   * Allows filtering of effect evidence synthesiss that are appropriate for use versus not.
   */
  status: EffectEvidenceSynthesisStatusEnum|null;
  _status?: fhir.IFhirElement|undefined;
  /**
   * Type of study eg randomized trial.
   */
  studyType?: fhir.ICodeableConcept|undefined;
  /**
   * Type of synthesis eg meta-analysis.
   */
  synthesisType?: fhir.ICodeableConcept|undefined;
  /**
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string|undefined;
  _title?: fhir.IFhirElement|undefined;
  /**
   * Descriptive topics related to the content of the EffectEvidenceSynthesis. Topics provide a high-level categorization grouping types of EffectEvidenceSynthesiss that can be useful for filtering and searching.
   */
  topic?: fhir.ICodeableConcept[]|undefined;
  /**
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: string|undefined;
  _url?: fhir.IFhirElement|undefined;
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: fhir.IUsageContext[]|undefined;
  /**
   * There may be different effect evidence synthesis instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the effect evidence synthesis with the format [url]|[version].
   */
  version?: string|undefined;
  _version?: fhir.IFhirElement|undefined;
}
/**
 * A description of the size of the sample involved in the synthesis.
 */
export class EffectEvidenceSynthesisSampleSize extends fhir.BackboneElement implements fhir.IEffectEvidenceSynthesisSampleSize {
  /**
   * Human-readable summary of sample size.
   */
  public description?: string|undefined;
  public _description?: fhir.FhirElement|undefined;
  /**
   * Number of participants included in this evidence synthesis.
   */
  public numberOfParticipants?: number|undefined;
  public _numberOfParticipants?: fhir.FhirElement|undefined;
  /**
   * Number of studies included in this evidence synthesis.
   */
  public numberOfStudies?: number|undefined;
  public _numberOfStudies?: fhir.FhirElement|undefined;
  /**
   * Default constructor for EffectEvidenceSynthesisSampleSize - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IEffectEvidenceSynthesisSampleSize> = {}) {
    super(source);
    if (source["description"]) { this.description = source.description; }
    if (source["_description"]) { this._description = new fhir.FhirElement(source._description!); }
    if (source["numberOfParticipants"]) { this.numberOfParticipants = source.numberOfParticipants; }
    if (source["_numberOfParticipants"]) { this._numberOfParticipants = new fhir.FhirElement(source._numberOfParticipants!); }
    if (source["numberOfStudies"]) { this.numberOfStudies = source.numberOfStudies; }
    if (source["_numberOfStudies"]) { this._numberOfStudies = new fhir.FhirElement(source._numberOfStudies!); }
  }
  /**
   * Check if the current EffectEvidenceSynthesisSampleSize contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a EffectEvidenceSynthesisSampleSize from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IEffectEvidenceSynthesisSampleSize):EffectEvidenceSynthesisSampleSize {
    var dest:EffectEvidenceSynthesisSampleSize = new EffectEvidenceSynthesisSampleSize(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `EffectEvidenceSynthesisSampleSize is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * A description of the results for each exposure considered in the effect estimate.
 */
export class EffectEvidenceSynthesisResultsByExposure extends fhir.BackboneElement implements fhir.IEffectEvidenceSynthesisResultsByExposure {
  /**
   * Human-readable summary of results by exposure state.
   */
  public description?: string|undefined;
  public _description?: fhir.FhirElement|undefined;
  /**
   * Whether these results are for the exposure state or alternative exposure state.
   */
  public exposureState?: EffectEvidenceSynthesisResultsByExposureExposureStateEnum|undefined;
  public _exposureState?: fhir.FhirElement|undefined;
  /**
   * Reference to a RiskEvidenceSynthesis resource.
   */
  public riskEvidenceSynthesis: fhir.Reference|null;
  /**
   * Used to define variant exposure states such as low-risk state.
   */
  public variantState?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for EffectEvidenceSynthesisResultsByExposure - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IEffectEvidenceSynthesisResultsByExposure> = {}) {
    super(source);
    if (source["description"]) { this.description = source.description; }
    if (source["_description"]) { this._description = new fhir.FhirElement(source._description!); }
    if (source["exposureState"]) { this.exposureState = source.exposureState; }
    if (source["_exposureState"]) { this._exposureState = new fhir.FhirElement(source._exposureState!); }
    this.riskEvidenceSynthesis = null;
    if (source["riskEvidenceSynthesis"]) { this.riskEvidenceSynthesis = new fhir.Reference(source.riskEvidenceSynthesis!); }
    if (this.riskEvidenceSynthesis === undefined) { this.riskEvidenceSynthesis = null }
    if (source["variantState"]) { this.variantState = new fhir.CodeableConcept(source.variantState!); }
  }
  /**
   * Check if the current EffectEvidenceSynthesisResultsByExposure contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["riskEvidenceSynthesis"] === undefined) { missingElements.push("riskEvidenceSynthesis"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a EffectEvidenceSynthesisResultsByExposure from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IEffectEvidenceSynthesisResultsByExposure):EffectEvidenceSynthesisResultsByExposure {
    var dest:EffectEvidenceSynthesisResultsByExposure = new EffectEvidenceSynthesisResultsByExposure(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `EffectEvidenceSynthesisResultsByExposure is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * A description of the precision of the estimate for the effect.
 */
export class EffectEvidenceSynthesisEffectEstimatePrecisionEstimate extends fhir.BackboneElement implements fhir.IEffectEvidenceSynthesisEffectEstimatePrecisionEstimate {
  /**
   * Lower bound of confidence interval.
   */
  public from?: number|undefined;
  public _from?: fhir.FhirElement|undefined;
  /**
   * Use 95 for a 95% confidence interval.
   */
  public level?: number|undefined;
  public _level?: fhir.FhirElement|undefined;
  /**
   * Upper bound of confidence interval.
   */
  public to?: number|undefined;
  public _to?: fhir.FhirElement|undefined;
  /**
   * Examples include confidence interval and interquartile range.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for EffectEvidenceSynthesisEffectEstimatePrecisionEstimate - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IEffectEvidenceSynthesisEffectEstimatePrecisionEstimate> = {}) {
    super(source);
    if (source["from"]) { this.from = source.from; }
    if (source["_from"]) { this._from = new fhir.FhirElement(source._from!); }
    if (source["level"]) { this.level = source.level; }
    if (source["_level"]) { this._level = new fhir.FhirElement(source._level!); }
    if (source["to"]) { this.to = source.to; }
    if (source["_to"]) { this._to = new fhir.FhirElement(source._to!); }
    if (source["type"]) { this.type = new fhir.CodeableConcept(source.type!); }
  }
  /**
   * Check if the current EffectEvidenceSynthesisEffectEstimatePrecisionEstimate contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a EffectEvidenceSynthesisEffectEstimatePrecisionEstimate from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IEffectEvidenceSynthesisEffectEstimatePrecisionEstimate):EffectEvidenceSynthesisEffectEstimatePrecisionEstimate {
    var dest:EffectEvidenceSynthesisEffectEstimatePrecisionEstimate = new EffectEvidenceSynthesisEffectEstimatePrecisionEstimate(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `EffectEvidenceSynthesisEffectEstimatePrecisionEstimate is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * The estimated effect of the exposure variant.
 */
export class EffectEvidenceSynthesisEffectEstimate extends fhir.BackboneElement implements fhir.IEffectEvidenceSynthesisEffectEstimate {
  /**
   * Human-readable summary of effect estimate.
   */
  public description?: string|undefined;
  public _description?: fhir.FhirElement|undefined;
  /**
   * A description of the precision of the estimate for the effect.
   */
  public precisionEstimate?: fhir.EffectEvidenceSynthesisEffectEstimatePrecisionEstimate[]|undefined;
  /**
   * Examples include relative risk and mean difference.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Specifies the UCUM unit for the outcome.
   */
  public unitOfMeasure?: fhir.CodeableConcept|undefined;
  /**
   * The point estimate of the effect estimate.
   */
  public value?: number|undefined;
  public _value?: fhir.FhirElement|undefined;
  /**
   * Used to define variant exposure states such as low-risk state.
   */
  public variantState?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for EffectEvidenceSynthesisEffectEstimate - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IEffectEvidenceSynthesisEffectEstimate> = {}) {
    super(source);
    if (source["description"]) { this.description = source.description; }
    if (source["_description"]) { this._description = new fhir.FhirElement(source._description!); }
    if (source["precisionEstimate"]) { this.precisionEstimate = source.precisionEstimate.map((x:Partial<fhir.IEffectEvidenceSynthesisEffectEstimatePrecisionEstimate>) => new fhir.EffectEvidenceSynthesisEffectEstimatePrecisionEstimate(x)); }
    if (source["type"]) { this.type = new fhir.CodeableConcept(source.type!); }
    if (source["unitOfMeasure"]) { this.unitOfMeasure = new fhir.CodeableConcept(source.unitOfMeasure!); }
    if (source["value"]) { this.value = source.value; }
    if (source["_value"]) { this._value = new fhir.FhirElement(source._value!); }
    if (source["variantState"]) { this.variantState = new fhir.CodeableConcept(source.variantState!); }
  }
  /**
   * Check if the current EffectEvidenceSynthesisEffectEstimate contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a EffectEvidenceSynthesisEffectEstimate from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IEffectEvidenceSynthesisEffectEstimate):EffectEvidenceSynthesisEffectEstimate {
    var dest:EffectEvidenceSynthesisEffectEstimate = new EffectEvidenceSynthesisEffectEstimate(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `EffectEvidenceSynthesisEffectEstimate is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * A description of a component of the overall certainty.
 */
export class EffectEvidenceSynthesisCertaintyCertaintySubcomponent extends fhir.BackboneElement implements fhir.IEffectEvidenceSynthesisCertaintyCertaintySubcomponent {
  /**
   * A human-readable string to clarify or explain concepts about the resource.
   */
  public note?: fhir.Annotation[]|undefined;
  /**
   * A rating of a subcomponent of rating certainty.
   */
  public rating?: fhir.CodeableConcept[]|undefined;
  /**
   * Type of subcomponent of certainty rating.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for EffectEvidenceSynthesisCertaintyCertaintySubcomponent - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IEffectEvidenceSynthesisCertaintyCertaintySubcomponent> = {}) {
    super(source);
    if (source["note"]) { this.note = source.note.map((x:Partial<fhir.IAnnotation>) => new fhir.Annotation(x)); }
    if (source["rating"]) { this.rating = source.rating.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["type"]) { this.type = new fhir.CodeableConcept(source.type!); }
  }
  /**
   * Check if the current EffectEvidenceSynthesisCertaintyCertaintySubcomponent contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a EffectEvidenceSynthesisCertaintyCertaintySubcomponent from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IEffectEvidenceSynthesisCertaintyCertaintySubcomponent):EffectEvidenceSynthesisCertaintyCertaintySubcomponent {
    var dest:EffectEvidenceSynthesisCertaintyCertaintySubcomponent = new EffectEvidenceSynthesisCertaintyCertaintySubcomponent(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `EffectEvidenceSynthesisCertaintyCertaintySubcomponent is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * A description of the certainty of the effect estimate.
 */
export class EffectEvidenceSynthesisCertainty extends fhir.BackboneElement implements fhir.IEffectEvidenceSynthesisCertainty {
  /**
   * A description of a component of the overall certainty.
   */
  public certaintySubcomponent?: fhir.EffectEvidenceSynthesisCertaintyCertaintySubcomponent[]|undefined;
  /**
   * A human-readable string to clarify or explain concepts about the resource.
   */
  public note?: fhir.Annotation[]|undefined;
  /**
   * A rating of the certainty of the effect estimate.
   */
  public rating?: fhir.CodeableConcept[]|undefined;
  /**
   * Default constructor for EffectEvidenceSynthesisCertainty - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IEffectEvidenceSynthesisCertainty> = {}) {
    super(source);
    if (source["certaintySubcomponent"]) { this.certaintySubcomponent = source.certaintySubcomponent.map((x:Partial<fhir.IEffectEvidenceSynthesisCertaintyCertaintySubcomponent>) => new fhir.EffectEvidenceSynthesisCertaintyCertaintySubcomponent(x)); }
    if (source["note"]) { this.note = source.note.map((x:Partial<fhir.IAnnotation>) => new fhir.Annotation(x)); }
    if (source["rating"]) { this.rating = source.rating.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
  }
  /**
   * Check if the current EffectEvidenceSynthesisCertainty contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a EffectEvidenceSynthesisCertainty from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IEffectEvidenceSynthesisCertainty):EffectEvidenceSynthesisCertainty {
    var dest:EffectEvidenceSynthesisCertainty = new EffectEvidenceSynthesisCertainty(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `EffectEvidenceSynthesisCertainty is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * The EffectEvidenceSynthesis resource describes the difference in an outcome between exposures states in a population where the effect estimate is derived from a combination of research studies.
 */
export class EffectEvidenceSynthesis extends fhir.DomainResource implements fhir.IEffectEvidenceSynthesis {
  /**
   * Resource Type Name
   */
  public override resourceType: "EffectEvidenceSynthesis";
  /**
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   */
  public approvalDate?: string|undefined;
  public _approvalDate?: fhir.FhirElement|undefined;
  /**
   * An individiual or organization primarily involved in the creation and maintenance of the content.
   */
  public author?: fhir.ContactDetail[]|undefined;
  /**
   * A description of the certainty of the effect estimate.
   */
  public certainty?: fhir.EffectEvidenceSynthesisCertainty[]|undefined;
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  public contact?: fhir.ContactDetail[]|undefined;
  /**
   * A copyright statement relating to the effect evidence synthesis and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the effect evidence synthesis.
   */
  public copyright?: string|undefined;
  public _copyright?: fhir.FhirElement|undefined;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the effect evidence synthesis. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  public date?: string|undefined;
  public _date?: fhir.FhirElement|undefined;
  /**
   * This description can be used to capture details such as why the effect evidence synthesis was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the effect evidence synthesis as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the effect evidence synthesis is presumed to be the predominant language in the place the effect evidence synthesis was created).
   */
  public description?: string|undefined;
  public _description?: fhir.FhirElement|undefined;
  /**
   * An individual or organization primarily responsible for internal coherence of the content.
   */
  public editor?: fhir.ContactDetail[]|undefined;
  /**
   * The estimated effect of the exposure variant.
   */
  public effectEstimate?: fhir.EffectEvidenceSynthesisEffectEstimate[]|undefined;
  /**
   * The effective period for a effect evidence synthesis  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
   */
  public effectivePeriod?: fhir.Period|undefined;
  /**
   * An individual or organization responsible for officially endorsing the content for use in some setting.
   */
  public endorser?: fhir.ContactDetail[]|undefined;
  /**
   * A reference to a EvidenceVariable resource that defines the exposure for the research.
   */
  public exposure: fhir.Reference|null;
  /**
   * A reference to a EvidenceVariable resource that defines the comparison exposure for the research.
   */
  public exposureAlternative: fhir.Reference|null;
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this effect evidence synthesis outside of FHIR, where it is not possible to use the logical URI.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * It may be possible for the effect evidence synthesis to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  public jurisdiction?: fhir.CodeableConcept[]|undefined;
  /**
   * If specified, this date follows the original approval date.
   */
  public lastReviewDate?: string|undefined;
  public _lastReviewDate?: fhir.FhirElement|undefined;
  /**
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  public name?: string|undefined;
  public _name?: fhir.FhirElement|undefined;
  /**
   * A human-readable string to clarify or explain concepts about the resource.
   */
  public note?: fhir.Annotation[]|undefined;
  /**
   * A reference to a EvidenceVariable resomece that defines the outcome for the research.
   */
  public outcome: fhir.Reference|null;
  /**
   * A reference to a EvidenceVariable resource that defines the population for the research.
   */
  public population: fhir.Reference|null;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the effect evidence synthesis is the organization or individual primarily responsible for the maintenance and upkeep of the effect evidence synthesis. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the effect evidence synthesis. This item SHOULD be populated unless the information is available from context.
   */
  public publisher?: string|undefined;
  public _publisher?: fhir.FhirElement|undefined;
  /**
   * Each related artifact is either an attachment, or a reference to another resource, but not both.
   */
  public relatedArtifact?: fhir.RelatedArtifact[]|undefined;
  /**
   * A description of the results for each exposure considered in the effect estimate.
   */
  public resultsByExposure?: fhir.EffectEvidenceSynthesisResultsByExposure[]|undefined;
  /**
   * An individual or organization primarily responsible for review of some aspect of the content.
   */
  public reviewer?: fhir.ContactDetail[]|undefined;
  /**
   * A description of the size of the sample involved in the synthesis.
   */
  public sampleSize?: fhir.EffectEvidenceSynthesisSampleSize|undefined;
  /**
   * Allows filtering of effect evidence synthesiss that are appropriate for use versus not.
   */
  public status: EffectEvidenceSynthesisStatusEnum|null;
  public _status?: fhir.FhirElement|undefined;
  /**
   * Type of study eg randomized trial.
   */
  public studyType?: fhir.CodeableConcept|undefined;
  /**
   * Type of synthesis eg meta-analysis.
   */
  public synthesisType?: fhir.CodeableConcept|undefined;
  /**
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  public title?: string|undefined;
  public _title?: fhir.FhirElement|undefined;
  /**
   * Descriptive topics related to the content of the EffectEvidenceSynthesis. Topics provide a high-level categorization grouping types of EffectEvidenceSynthesiss that can be useful for filtering and searching.
   */
  public topic?: fhir.CodeableConcept[]|undefined;
  /**
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  public url?: string|undefined;
  public _url?: fhir.FhirElement|undefined;
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  public useContext?: fhir.UsageContext[]|undefined;
  /**
   * There may be different effect evidence synthesis instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the effect evidence synthesis with the format [url]|[version].
   */
  public version?: string|undefined;
  public _version?: fhir.FhirElement|undefined;
  /**
   * Default constructor for EffectEvidenceSynthesis - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IEffectEvidenceSynthesis> = {}) {
    super(source);
    this.resourceType = 'EffectEvidenceSynthesis';
    if (source["approvalDate"]) { this.approvalDate = source.approvalDate; }
    if (source["_approvalDate"]) { this._approvalDate = new fhir.FhirElement(source._approvalDate!); }
    if (source["author"]) { this.author = source.author.map((x:Partial<fhir.IContactDetail>) => new fhir.ContactDetail(x)); }
    if (source["certainty"]) { this.certainty = source.certainty.map((x:Partial<fhir.IEffectEvidenceSynthesisCertainty>) => new fhir.EffectEvidenceSynthesisCertainty(x)); }
    if (source["contact"]) { this.contact = source.contact.map((x:Partial<fhir.IContactDetail>) => new fhir.ContactDetail(x)); }
    if (source["copyright"]) { this.copyright = source.copyright; }
    if (source["_copyright"]) { this._copyright = new fhir.FhirElement(source._copyright!); }
    if (source["date"]) { this.date = source.date; }
    if (source["_date"]) { this._date = new fhir.FhirElement(source._date!); }
    if (source["description"]) { this.description = source.description; }
    if (source["_description"]) { this._description = new fhir.FhirElement(source._description!); }
    if (source["editor"]) { this.editor = source.editor.map((x:Partial<fhir.IContactDetail>) => new fhir.ContactDetail(x)); }
    if (source["effectEstimate"]) { this.effectEstimate = source.effectEstimate.map((x:Partial<fhir.IEffectEvidenceSynthesisEffectEstimate>) => new fhir.EffectEvidenceSynthesisEffectEstimate(x)); }
    if (source["effectivePeriod"]) { this.effectivePeriod = new fhir.Period(source.effectivePeriod!); }
    if (source["endorser"]) { this.endorser = source.endorser.map((x:Partial<fhir.IContactDetail>) => new fhir.ContactDetail(x)); }
    this.exposure = null;
    if (source["exposure"]) { this.exposure = new fhir.Reference(source.exposure!); }
    if (this.exposure === undefined) { this.exposure = null }
    this.exposureAlternative = null;
    if (source["exposureAlternative"]) { this.exposureAlternative = new fhir.Reference(source.exposureAlternative!); }
    if (this.exposureAlternative === undefined) { this.exposureAlternative = null }
    if (source["identifier"]) { this.identifier = source.identifier.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    if (source["jurisdiction"]) { this.jurisdiction = source.jurisdiction.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["lastReviewDate"]) { this.lastReviewDate = source.lastReviewDate; }
    if (source["_lastReviewDate"]) { this._lastReviewDate = new fhir.FhirElement(source._lastReviewDate!); }
    if (source["name"]) { this.name = source.name; }
    if (source["_name"]) { this._name = new fhir.FhirElement(source._name!); }
    if (source["note"]) { this.note = source.note.map((x:Partial<fhir.IAnnotation>) => new fhir.Annotation(x)); }
    this.outcome = null;
    if (source["outcome"]) { this.outcome = new fhir.Reference(source.outcome!); }
    if (this.outcome === undefined) { this.outcome = null }
    this.population = null;
    if (source["population"]) { this.population = new fhir.Reference(source.population!); }
    if (this.population === undefined) { this.population = null }
    if (source["publisher"]) { this.publisher = source.publisher; }
    if (source["_publisher"]) { this._publisher = new fhir.FhirElement(source._publisher!); }
    if (source["relatedArtifact"]) { this.relatedArtifact = source.relatedArtifact.map((x:Partial<fhir.IRelatedArtifact>) => new fhir.RelatedArtifact(x)); }
    if (source["resultsByExposure"]) { this.resultsByExposure = source.resultsByExposure.map((x:Partial<fhir.IEffectEvidenceSynthesisResultsByExposure>) => new fhir.EffectEvidenceSynthesisResultsByExposure(x)); }
    if (source["reviewer"]) { this.reviewer = source.reviewer.map((x:Partial<fhir.IContactDetail>) => new fhir.ContactDetail(x)); }
    if (source["sampleSize"]) { this.sampleSize = new fhir.EffectEvidenceSynthesisSampleSize(source.sampleSize!); }
    this.status = null;
    if (source["status"]) { this.status = source.status; }
    if (this.status === undefined) { this.status = null }
    if (source["_status"]) { this._status = new fhir.FhirElement(source._status!); }
    if (source["studyType"]) { this.studyType = new fhir.CodeableConcept(source.studyType!); }
    if (source["synthesisType"]) { this.synthesisType = new fhir.CodeableConcept(source.synthesisType!); }
    if (source["title"]) { this.title = source.title; }
    if (source["_title"]) { this._title = new fhir.FhirElement(source._title!); }
    if (source["topic"]) { this.topic = source.topic.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["url"]) { this.url = source.url; }
    if (source["_url"]) { this._url = new fhir.FhirElement(source._url!); }
    if (source["useContext"]) { this.useContext = source.useContext.map((x:Partial<fhir.IUsageContext>) => new fhir.UsageContext(x)); }
    if (source["version"]) { this.version = source.version; }
    if (source["_version"]) { this._version = new fhir.FhirElement(source._version!); }
  }
  /**
   * Check if the current EffectEvidenceSynthesis contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["exposure"] === undefined) { missingElements.push("exposure"); }
    if (this["exposureAlternative"] === undefined) { missingElements.push("exposureAlternative"); }
    if (this["outcome"] === undefined) { missingElements.push("outcome"); }
    if (this["population"] === undefined) { missingElements.push("population"); }
    if (this["status"] === undefined) { missingElements.push("status"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a EffectEvidenceSynthesis from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IEffectEvidenceSynthesis):EffectEvidenceSynthesis {
    var dest:EffectEvidenceSynthesis = new EffectEvidenceSynthesis(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `EffectEvidenceSynthesis is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the EffectEvidenceSynthesis.resultsByExposure.exposureState field
 */
export enum EffectEvidenceSynthesisResultsByExposureExposureStateEnum {
  EXPOSURE = "exposure",
  EXPOSURE_ALTERNATIVE = "exposure-alternative",
}
/**
 * Code Values for the EffectEvidenceSynthesis.status field
 */
export enum EffectEvidenceSynthesisStatusEnum {
  DRAFT = "draft",
  ACTIVE = "active",
  RETIRED = "retired",
  UNKNOWN = "unknown",
}
