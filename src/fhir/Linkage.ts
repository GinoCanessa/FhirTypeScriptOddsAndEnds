// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Linkage

import * as fhir from '../fhir.js'

import { LinkageTypeValueSet, LinkageTypeValueSetType, LinkageTypeValueSetEnum } from '../fhirValueSets/LinkageTypeValueSet.js'

/**
 * Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
 */
export type ILinkageItem = fhir.IBackboneElement & { 
  /**
   * Distinguishes which item is "source of truth" (if any) and which items are no longer considered to be current representations.
   */
  type: LinkageTypeValueSetEnum|null;
  /**
   * Extended properties for primitive element: Linkage.item.type
   */
  _type?: fhir.IFhirElement|undefined;
  /**
   * The resource instance being linked as part of the group.
   */
  resource: fhir.IReference|null;
}

/**
 * Identifies two or more records (resource instances) that refer to the same real-world "occurrence".
 */
export type ILinkage = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "Linkage";
  /**
   * If false, any asserted linkages should not be considered current/relevant/applicable.
   */
  active?: boolean|undefined;
  /**
   * Extended properties for primitive element: Linkage.active
   */
  _active?: fhir.IFhirElement|undefined;
  /**
   * Identifies the user or organization responsible for asserting the linkages as well as the user or organization who establishes the context in which the nature of each linkage is evaluated.
   */
  author?: fhir.IReference|undefined;
  /**
   * Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
   */
  item: fhir.ILinkageItem[]|null;
}

/**
 * Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
 */
export class LinkageItem extends fhir.BackboneElement implements ILinkageItem {
  /**
   * Distinguishes which item is "source of truth" (if any) and which items are no longer considered to be current representations.
   */
  public type: LinkageTypeValueSetEnum|null;
  /**
   * Extended properties for primitive element: Linkage.item.type
   */
  public _type?: fhir.FhirElement|undefined;
  /**
   * The resource instance being linked as part of the group.
   */
  public resource: fhir.Reference|null;
  /**
   * Default constructor for LinkageItem - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ILinkageItem> = { }) {
    super(source);
    if (source['type']) { this.type = source.type; }
    else { this.type = null; }
    if (source['_type']) { this._type = new fhir.FhirElement(source._type!); }
    if (source['resource']) { this.resource = new fhir.Reference(source.resource!); }
    else { this.resource = null; }
  }
  /**
   * Required-bound Value Set for type
   */
  public static typeRequiredValueSet():LinkageTypeValueSetType {
    return LinkageTypeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["type"]) { results.push(["type",'Missing required element: Linkage.item.type']); }
    if (this["_type"]) { results.push(...this._type.doModelValidation()); }
    if (!this["resource"]) { results.push(["resource",'Missing required element: Linkage.item.resource']); }
    if (this["resource"]) { results.push(...this.resource.doModelValidation()); }
    return results;
  }
}

/**
 * Identifies two or more records (resource instances) that refer to the same real-world "occurrence".
 */
export class Linkage extends fhir.DomainResource implements ILinkage {
  /**
   * Resource Type Name
   */
  public resourceType: "Linkage";
  /**
   * If false, any asserted linkages should not be considered current/relevant/applicable.
   */
  public active?: boolean|undefined;
  /**
   * Extended properties for primitive element: Linkage.active
   */
  public _active?: fhir.FhirElement|undefined;
  /**
   * Identifies the user or organization responsible for asserting the linkages as well as the user or organization who establishes the context in which the nature of each linkage is evaluated.
   */
  public author?: fhir.Reference|undefined;
  /**
   * Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
   */
  public item: fhir.LinkageItem[]|null;
  /**
   * Default constructor for Linkage - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ILinkage> = { }) {
    super(source);
    this.resourceType = 'Linkage';
    if (source['active']) { this.active = source.active; }
    if (source['_active']) { this._active = new fhir.FhirElement(source._active!); }
    if (source['author']) { this.author = new fhir.Reference(source.author!); }
    if (source['item']) { this.item = source.item.map((x) => new fhir.LinkageItem(x)); }
    else { this.item = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: Linkage.resourceType']); }
    if (this["_active"]) { results.push(...this._active.doModelValidation()); }
    if (this["author"]) { results.push(...this.author.doModelValidation()); }
    if ((!this["item"]) || (this["item"].length === 0)) { results.push(["item",'Missing required element: Linkage.item']); }
    if (this["item"]) { this.item.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}
