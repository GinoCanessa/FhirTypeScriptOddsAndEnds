// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
 */
export type ILinkageItem = fhir.IBackboneElement & {
  /**
   * The resource instance being linked as part of the group.
   */
  resource: fhir.IReference|null;
  /**
   * Distinguishes which item is "source of truth" (if any) and which items are no longer considered to be current representations.
   */
  type: LinkageItemTypeEnum|null;
  _type?: fhir.IFhirElement|undefined;
}
/**
 * Identifies two or more records (resource instances) that refer to the same real-world "occurrence".
 */
export type ILinkage = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "Linkage";
  /**
   * If false, any asserted linkages should not be considered current/relevant/applicable.
   */
  active?: boolean|undefined;
  _active?: fhir.IFhirElement|undefined;
  /**
   * Identifies the user or organization responsible for asserting the linkages as well as the user or organization who establishes the context in which the nature of each linkage is evaluated.
   */
  author?: fhir.IReference|undefined;
  /**
   * Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
   */
  item: fhir.ILinkageItem[]|null;
}
/**
 * Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
 */
export class LinkageItem extends fhir.BackboneElement implements fhir.ILinkageItem {
  /**
   * The resource instance being linked as part of the group.
   */
  public resource: fhir.Reference|null;
  /**
   * Distinguishes which item is "source of truth" (if any) and which items are no longer considered to be current representations.
   */
  public type: LinkageItemTypeEnum|null;
  public _type?: fhir.FhirElement|undefined;
  /**
   * Default constructor for LinkageItem - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.ILinkageItem> = {}) {
    super(source);
    this.resource = null;
    if (source["resource"]) { this.resource = new fhir.Reference(source.resource!); }
    if (this.resource === undefined) { this.resource = null }
    this.type = null;
    if (source["type"]) { this.type = source.type; }
    if (this.type === undefined) { this.type = null }
    if (source["_type"]) { this._type = new fhir.FhirElement(source._type!); }
  }
  /**
   * Check if the current LinkageItem contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["resource"] === undefined) { missingElements.push("resource"); }
    if (this["type"] === undefined) { missingElements.push("type"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a LinkageItem from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.ILinkageItem):LinkageItem {
    var dest:LinkageItem = new LinkageItem(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `LinkageItem is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Identifies two or more records (resource instances) that refer to the same real-world "occurrence".
 */
export class Linkage extends fhir.DomainResource implements fhir.ILinkage {
  /**
   * Resource Type Name
   */
  public override resourceType: "Linkage";
  /**
   * If false, any asserted linkages should not be considered current/relevant/applicable.
   */
  public active?: boolean|undefined;
  public _active?: fhir.FhirElement|undefined;
  /**
   * Identifies the user or organization responsible for asserting the linkages as well as the user or organization who establishes the context in which the nature of each linkage is evaluated.
   */
  public author?: fhir.Reference|undefined;
  /**
   * Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
   */
  public item: fhir.LinkageItem[]|null;
  /**
   * Default constructor for Linkage - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.ILinkage> = {}) {
    super(source);
    this.resourceType = 'Linkage';
    if (source["active"]) { this.active = source.active; }
    if (source["_active"]) { this._active = new fhir.FhirElement(source._active!); }
    if (source["author"]) { this.author = new fhir.Reference(source.author!); }
    this.item = null;
    if (source["item"]) { this.item = source.item.map((x:Partial<fhir.ILinkageItem>) => new fhir.LinkageItem(x)); }
    if (this.item === undefined) { this.item = null }
  }
  /**
   * Check if the current Linkage contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if ((!this["item"]) || (this["item"].length === 0)) { missingElements.push("item"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a Linkage from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.ILinkage):Linkage {
    var dest:Linkage = new Linkage(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `Linkage is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the Linkage.item.type field
 */
export enum LinkageItemTypeEnum {
  SOURCE = "source",
  ALTERNATE = "alternate",
  HISTORICAL = "historical",
}
