// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Claim

import * as fhir from '../fhir.js'

import { RelatedClaimRelationshipValueSet, RelatedClaimRelationshipValueSetType, RelatedClaimRelationshipValueSetEnum } from '../fhirValueSets/RelatedClaimRelationshipValueSet.js'
import { PayeetypeValueSet, PayeetypeValueSetType, PayeetypeValueSetEnum } from '../fhirValueSets/PayeetypeValueSet.js'
import { ClaimCareteamroleValueSet, ClaimCareteamroleValueSetType, ClaimCareteamroleValueSetEnum } from '../fhirValueSets/ClaimCareteamroleValueSet.js'
import { ProviderQualificationValueSet, ProviderQualificationValueSetType, ProviderQualificationValueSetEnum } from '../fhirValueSets/ProviderQualificationValueSet.js'
import { ClaimInformationcategoryValueSet, ClaimInformationcategoryValueSetType, ClaimInformationcategoryValueSetEnum } from '../fhirValueSets/ClaimInformationcategoryValueSet.js'
import { ClaimExceptionValueSet, ClaimExceptionValueSetType, ClaimExceptionValueSetEnum } from '../fhirValueSets/ClaimExceptionValueSet.js'
import { MissingToothReasonValueSet, MissingToothReasonValueSetType, MissingToothReasonValueSetEnum } from '../fhirValueSets/MissingToothReasonValueSet.js'
import { ExDiagnosistypeValueSet, ExDiagnosistypeValueSetType, ExDiagnosistypeValueSetEnum } from '../fhirValueSets/ExDiagnosistypeValueSet.js'
import { ExDiagnosisOnAdmissionValueSet, ExDiagnosisOnAdmissionValueSetType, ExDiagnosisOnAdmissionValueSetEnum } from '../fhirValueSets/ExDiagnosisOnAdmissionValueSet.js'
import { ExDiagnosisrelatedgroupValueSet, ExDiagnosisrelatedgroupValueSetType, ExDiagnosisrelatedgroupValueSetEnum } from '../fhirValueSets/ExDiagnosisrelatedgroupValueSet.js'
import { ExProcedureTypeValueSet, ExProcedureTypeValueSetType, ExProcedureTypeValueSetEnum } from '../fhirValueSets/ExProcedureTypeValueSet.js'
import { Icd10ProceduresValueSet, Icd10ProceduresValueSetType, Icd10ProceduresValueSetEnum } from '../fhirValueSets/Icd10ProceduresValueSet.js'
import { V3ActIncidentCodeValueSet, V3ActIncidentCodeValueSetType, V3ActIncidentCodeValueSetEnum } from '../fhirValueSets/V3ActIncidentCodeValueSet.js'
import { ExRevenueCenterValueSet, ExRevenueCenterValueSetType, ExRevenueCenterValueSetEnum } from '../fhirValueSets/ExRevenueCenterValueSet.js'
import { ExBenefitcategoryValueSet, ExBenefitcategoryValueSetType, ExBenefitcategoryValueSetEnum } from '../fhirValueSets/ExBenefitcategoryValueSet.js'
import { ServiceUsclsValueSet, ServiceUsclsValueSetType, ServiceUsclsValueSetEnum } from '../fhirValueSets/ServiceUsclsValueSet.js'
import { ClaimModifiersValueSet, ClaimModifiersValueSetType, ClaimModifiersValueSetEnum } from '../fhirValueSets/ClaimModifiersValueSet.js'
import { ExProgramCodeValueSet, ExProgramCodeValueSetType, ExProgramCodeValueSetEnum } from '../fhirValueSets/ExProgramCodeValueSet.js'
import { ServicePlaceValueSet, ServicePlaceValueSetType, ServicePlaceValueSetEnum } from '../fhirValueSets/ServicePlaceValueSet.js'
import { ToothValueSet, ToothValueSetType, ToothValueSetEnum } from '../fhirValueSets/ToothValueSet.js'
import { SurfaceValueSet, SurfaceValueSetType, SurfaceValueSetEnum } from '../fhirValueSets/SurfaceValueSet.js'
import { FmStatusValueSet, FmStatusValueSetType, FmStatusValueSetEnum } from '../fhirValueSets/FmStatusValueSet.js'
import { ClaimTypeValueSet, ClaimTypeValueSetType, ClaimTypeValueSetEnum } from '../fhirValueSets/ClaimTypeValueSet.js'
import { ClaimSubtypeValueSet, ClaimSubtypeValueSetType, ClaimSubtypeValueSetEnum } from '../fhirValueSets/ClaimSubtypeValueSet.js'
import { ClaimUseValueSet, ClaimUseValueSetType, ClaimUseValueSetEnum } from '../fhirValueSets/ClaimUseValueSet.js'
import { ProcessPriorityValueSet, ProcessPriorityValueSetType, ProcessPriorityValueSetEnum } from '../fhirValueSets/ProcessPriorityValueSet.js'
import { FundsreserveValueSet, FundsreserveValueSetType, FundsreserveValueSetEnum } from '../fhirValueSets/FundsreserveValueSet.js'

/**
 * For example,  for the original treatment and follow-up exams.
 */
export type IClaimRelated = fhir.IBackboneElement & { 
  /**
   * Reference to a related claim.
   */
  claim?: fhir.IReference|undefined;
  /**
   * For example, prior claim or umbrella.
   */
  relationship?: fhir.ICodeableConcept|undefined;
  /**
   * For example, Property/Casualty insurer claim # or Workers Compensation case # .
   */
  reference?: fhir.IIdentifier|undefined;
}

/**
 * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and choose to pay the subscriber instead.
 */
export type IClaimPayee = fhir.IBackboneElement & { 
  /**
   * Type of Party to be reimbursed: subscriber, provider, other.
   */
  type: fhir.ICodeableConcept|null;
  /**
   * Not required if the payee is 'subscriber' or 'provider'.
   */
  party?: fhir.IReference|undefined;
}

/**
 * The members of the team who provided the products and services.
 */
export type IClaimCareTeam = fhir.IBackboneElement & { 
  /**
   * A number to uniquely identify care team entries.
   */
  sequence: number|null;
  /**
   * Extended properties for primitive element: Claim.careTeam.sequence
   */
  _sequence?: fhir.IFhirElement|undefined;
  /**
   * Member of the team who provided the product or service.
   */
  provider: fhir.IReference|null;
  /**
   * Responsible might not be required when there is only a single provider listed.
   */
  responsible?: boolean|undefined;
  /**
   * Extended properties for primitive element: Claim.careTeam.responsible
   */
  _responsible?: fhir.IFhirElement|undefined;
  /**
   * Role might not be required when there is only a single provider listed.
   */
  role?: fhir.ICodeableConcept|undefined;
  /**
   * The qualification of the practitioner which is applicable for this service.
   */
  qualification?: fhir.ICodeableConcept|undefined;
}

/**
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
export type IClaimSupportingInfo = fhir.IBackboneElement & { 
  /**
   * A number to uniquely identify supporting information entries.
   */
  sequence: number|null;
  /**
   * Extended properties for primitive element: Claim.supportingInfo.sequence
   */
  _sequence?: fhir.IFhirElement|undefined;
  /**
   * This may contain a category for the local bill type codes.
   */
  category: fhir.ICodeableConcept|null;
  /**
   * System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought.
   */
  code?: fhir.ICodeableConcept|undefined;
  /**
   * The date when or period to which this information refers.
   */
  timingDate?: string|undefined;
  /**
   * Extended properties for primitive element: Claim.supportingInfo.timing[x]
   */
  _timingDate?: fhir.IFhirElement|undefined;
  /**
   * The date when or period to which this information refers.
   */
  timingPeriod?: fhir.IPeriod|undefined;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueBoolean?: boolean|undefined;
  /**
   * Extended properties for primitive element: Claim.supportingInfo.value[x]
   */
  _valueBoolean?: fhir.IFhirElement|undefined;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueString?: string|undefined;
  /**
   * Extended properties for primitive element: Claim.supportingInfo.value[x]
   */
  _valueString?: fhir.IFhirElement|undefined;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueQuantity?: fhir.IQuantity|undefined;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueAttachment?: fhir.IAttachment|undefined;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueReference?: fhir.IReference|undefined;
  /**
   * For example: the reason for the additional stay, or why a tooth is  missing.
   */
  reason?: fhir.ICodeableConcept|undefined;
}

/**
 * Information about diagnoses relevant to the claim items.
 */
export type IClaimDiagnosis = fhir.IBackboneElement & { 
  /**
   * Diagnosis are presented in list order to their expected importance: primary, secondary, etc.
   */
  sequence: number|null;
  /**
   * Extended properties for primitive element: Claim.diagnosis.sequence
   */
  _sequence?: fhir.IFhirElement|undefined;
  /**
   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
   */
  diagnosisCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
   */
  diagnosisReference?: fhir.IReference|undefined;
  /**
   * For example: admitting, primary, secondary, discharge.
   */
  type?: fhir.ICodeableConcept[]|undefined;
  /**
   * Indication of whether the diagnosis was present on admission to a facility.
   */
  onAdmission?: fhir.ICodeableConcept|undefined;
  /**
   * For example DRG (Diagnosis Related Group) or a bundled billing code. A patient may have a diagnosis of a Myocardial Infarction and a DRG for HeartAttack would be assigned. The Claim item (and possible subsequent claims) would refer to the DRG for those line items that were for services related to the heart attack event.
   */
  packageCode?: fhir.ICodeableConcept|undefined;
}

/**
 * Procedures performed on the patient relevant to the billing items with the claim.
 */
export type IClaimProcedure = fhir.IBackboneElement & { 
  /**
   * A number to uniquely identify procedure entries.
   */
  sequence: number|null;
  /**
   * Extended properties for primitive element: Claim.procedure.sequence
   */
  _sequence?: fhir.IFhirElement|undefined;
  /**
   * For example: primary, secondary.
   */
  type?: fhir.ICodeableConcept[]|undefined;
  /**
   * Date and optionally time the procedure was performed.
   */
  date?: string|undefined;
  /**
   * Extended properties for primitive element: Claim.procedure.date
   */
  _date?: fhir.IFhirElement|undefined;
  /**
   * The code or reference to a Procedure resource which identifies the clinical intervention performed.
   */
  procedureCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * The code or reference to a Procedure resource which identifies the clinical intervention performed.
   */
  procedureReference?: fhir.IReference|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: fhir.IReference[]|undefined;
}

/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export type IClaimInsurance = fhir.IBackboneElement & { 
  /**
   * A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.
   */
  sequence: number|null;
  /**
   * Extended properties for primitive element: Claim.insurance.sequence
   */
  _sequence?: fhir.IFhirElement|undefined;
  /**
   * A patient may (will) have multiple insurance policies which provide reimbursement for healthcare services and products. For example a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for adjudicating this claim. Other claims would be created to request adjudication against the other listed policies.
   */
  focal: boolean|null;
  /**
   * Extended properties for primitive element: Claim.insurance.focal
   */
  _focal?: fhir.IFhirElement|undefined;
  /**
   * Only required in jurisdictions where insurers, rather than the provider, are required to send claims to  insurers that appear after them in the list. This element is not required when 'subrogation=true'.
   */
  identifier?: fhir.IIdentifier|undefined;
  /**
   * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
   */
  coverage: fhir.IReference|null;
  /**
   * A business agreement number established between the provider and the insurer for special business processing purposes.
   */
  businessArrangement?: string|undefined;
  /**
   * Extended properties for primitive element: Claim.insurance.businessArrangement
   */
  _businessArrangement?: fhir.IFhirElement|undefined;
  /**
   * This value is an alphanumeric string that may be provided over the phone, via text, via paper, or within a ClaimResponse resource and is not a FHIR Identifier.
   */
  preAuthRef?: string[]|undefined;
  /**
   * Extended properties for primitive element: Claim.insurance.preAuthRef
   */
  _preAuthRef?: fhir.IFhirElement[]|undefined;
  /**
   * Must not be specified when 'focal=true' for this insurance.
   */
  claimResponse?: fhir.IReference|undefined;
}

/**
 * Details of an accident which resulted in injuries which required the products and services listed in the claim.
 */
export type IClaimAccident = fhir.IBackboneElement & { 
  /**
   * The date of the accident has to precede the dates of the products and services but within a reasonable timeframe.
   */
  date: string|null;
  /**
   * Extended properties for primitive element: Claim.accident.date
   */
  _date?: fhir.IFhirElement|undefined;
  /**
   * The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.
   */
  type?: fhir.ICodeableConcept|undefined;
  /**
   * The physical location of the accident event.
   */
  locationAddress?: fhir.IAddress|undefined;
  /**
   * The physical location of the accident event.
   */
  locationReference?: fhir.IReference|undefined;
}

/**
 * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
export type IClaimItemDetailSubDetail = fhir.IBackboneElement & { 
  /**
   * A number to uniquely identify item entries.
   */
  sequence: number|null;
  /**
   * Extended properties for primitive element: Claim.item.detail.subDetail.sequence
   */
  _sequence?: fhir.IFhirElement|undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: fhir.ICodeableConcept|undefined;
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category?: fhir.ICodeableConcept|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService: fhir.ICodeableConcept|null;
  /**
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: fhir.ICodeableConcept[]|undefined;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  programCode?: fhir.ICodeableConcept[]|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: fhir.IQuantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: fhir.IMoney|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: number|undefined;
  /**
   * Extended properties for primitive element: Claim.item.detail.subDetail.factor
   */
  _factor?: fhir.IFhirElement|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: fhir.IMoney|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: fhir.IReference[]|undefined;
}

/**
 * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
export type IClaimItemDetail = fhir.IBackboneElement & { 
  /**
   * A number to uniquely identify item entries.
   */
  sequence: number|null;
  /**
   * Extended properties for primitive element: Claim.item.detail.sequence
   */
  _sequence?: fhir.IFhirElement|undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: fhir.ICodeableConcept|undefined;
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category?: fhir.ICodeableConcept|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService: fhir.ICodeableConcept|null;
  /**
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: fhir.ICodeableConcept[]|undefined;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  programCode?: fhir.ICodeableConcept[]|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: fhir.IQuantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: fhir.IMoney|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: number|undefined;
  /**
   * Extended properties for primitive element: Claim.item.detail.factor
   */
  _factor?: fhir.IFhirElement|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: fhir.IMoney|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: fhir.IReference[]|undefined;
  /**
   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  subDetail?: fhir.IClaimItemDetailSubDetail[]|undefined;
}

/**
 * A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
 */
export type IClaimItem = fhir.IBackboneElement & { 
  /**
   * A number to uniquely identify item entries.
   */
  sequence: number|null;
  /**
   * Extended properties for primitive element: Claim.item.sequence
   */
  _sequence?: fhir.IFhirElement|undefined;
  /**
   * CareTeam members related to this service or product.
   */
  careTeamSequence?: number[]|undefined;
  /**
   * Extended properties for primitive element: Claim.item.careTeamSequence
   */
  _careTeamSequence?: fhir.IFhirElement[]|undefined;
  /**
   * Diagnosis applicable for this service or product.
   */
  diagnosisSequence?: number[]|undefined;
  /**
   * Extended properties for primitive element: Claim.item.diagnosisSequence
   */
  _diagnosisSequence?: fhir.IFhirElement[]|undefined;
  /**
   * Procedures applicable for this service or product.
   */
  procedureSequence?: number[]|undefined;
  /**
   * Extended properties for primitive element: Claim.item.procedureSequence
   */
  _procedureSequence?: fhir.IFhirElement[]|undefined;
  /**
   * Exceptions, special conditions and supporting information applicable for this service or product.
   */
  informationSequence?: number[]|undefined;
  /**
   * Extended properties for primitive element: Claim.item.informationSequence
   */
  _informationSequence?: fhir.IFhirElement[]|undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: fhir.ICodeableConcept|undefined;
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category?: fhir.ICodeableConcept|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService: fhir.ICodeableConcept|null;
  /**
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
   */
  modifier?: fhir.ICodeableConcept[]|undefined;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  programCode?: fhir.ICodeableConcept[]|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  servicedDate?: string|undefined;
  /**
   * Extended properties for primitive element: Claim.item.serviced[x]
   */
  _servicedDate?: fhir.IFhirElement|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  servicedPeriod?: fhir.IPeriod|undefined;
  /**
   * Where the product or service was provided.
   */
  locationCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * Where the product or service was provided.
   */
  locationAddress?: fhir.IAddress|undefined;
  /**
   * Where the product or service was provided.
   */
  locationReference?: fhir.IReference|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: fhir.IQuantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: fhir.IMoney|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: number|undefined;
  /**
   * Extended properties for primitive element: Claim.item.factor
   */
  _factor?: fhir.IFhirElement|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: fhir.IMoney|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: fhir.IReference[]|undefined;
  /**
   * For example: Providing a tooth code, allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
   */
  bodySite?: fhir.ICodeableConcept|undefined;
  /**
   * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
   */
  subSite?: fhir.ICodeableConcept[]|undefined;
  /**
   * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
   */
  encounter?: fhir.IReference[]|undefined;
  /**
   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  detail?: fhir.IClaimItemDetail[]|undefined;
}

/**
 * A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
 */
export type IClaim = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "Claim";
  /**
   * A unique identifier assigned to this claim.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: FmStatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: Claim.status
   */
  _status?: fhir.IFhirElement|undefined;
  /**
   * The majority of jurisdictions use: oral, pharmacy, vision, professional and institutional, or variants on those terms, as the general styles of claims. The valueset is extensible to accommodate other jurisdictional requirements.
   */
  type: fhir.ICodeableConcept|null;
  /**
   * This may contain the local bill type codes, for example the US UB-04 bill type code or the CMS bill type.
   */
  subType?: fhir.ICodeableConcept|undefined;
  /**
   * A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.
   */
  use: ClaimUseValueSetEnum|null;
  /**
   * Extended properties for primitive element: Claim.use
   */
  _use?: fhir.IFhirElement|undefined;
  /**
   * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual or forecast reimbursement is sought.
   */
  patient: fhir.IReference|null;
  /**
   * Typically this would be today or in the past for a claim, and today or in the future for preauthorizations and predeterminations. Typically line item dates of service should fall within the billing period if one is specified.
   */
  billablePeriod?: fhir.IPeriod|undefined;
  /**
   * This field is independent of the date of creation of the resource as it may reflect the creation date of a source document prior to digitization. Typically for claims all services must be completed as of this date.
   */
  created: string|null;
  /**
   * Extended properties for primitive element: Claim.created
   */
  _created?: fhir.IFhirElement|undefined;
  /**
   * Individual who created the claim, predetermination or preauthorization.
   */
  enterer?: fhir.IReference|undefined;
  /**
   * The Insurer who is target of the request.
   */
  insurer?: fhir.IReference|undefined;
  /**
   * Typically this field would be 1..1 where this party is responsible for the claim but not necessarily professionally responsible for the provision of the individual products and services listed below.
   */
  provider: fhir.IReference|null;
  /**
   * If a claim processor is unable to complete the processing as per the priority then they should generate and error and not process the request.
   */
  priority: fhir.ICodeableConcept|null;
  /**
   * This field is only used for preauthorizations.
   */
  fundsReserve?: fhir.ICodeableConcept|undefined;
  /**
   * For example,  for the original treatment and follow-up exams.
   */
  related?: fhir.IClaimRelated[]|undefined;
  /**
   * Prescription to support the dispensing of pharmacy, device or vision products.
   */
  prescription?: fhir.IReference|undefined;
  /**
   * For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefore issues a new prescription for an alternate medication which has the same therapeutic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'.
   */
  originalPrescription?: fhir.IReference|undefined;
  /**
   * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and choose to pay the subscriber instead.
   */
  payee?: fhir.IClaimPayee|undefined;
  /**
   * The referral resource which lists the date, practitioner, reason and other supporting information.
   */
  referral?: fhir.IReference|undefined;
  /**
   * Facility where the services were provided.
   */
  facility?: fhir.IReference|undefined;
  /**
   * The members of the team who provided the products and services.
   */
  careTeam?: fhir.IClaimCareTeam[]|undefined;
  /**
   * Often there are multiple jurisdiction specific valuesets which are required.
   */
  supportingInfo?: fhir.IClaimSupportingInfo[]|undefined;
  /**
   * Information about diagnoses relevant to the claim items.
   */
  diagnosis?: fhir.IClaimDiagnosis[]|undefined;
  /**
   * Procedures performed on the patient relevant to the billing items with the claim.
   */
  procedure?: fhir.IClaimProcedure[]|undefined;
  /**
   * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
   */
  insurance: fhir.IClaimInsurance[]|null;
  /**
   * Details of an accident which resulted in injuries which required the products and services listed in the claim.
   */
  accident?: fhir.IClaimAccident|undefined;
  /**
   * A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
   */
  item?: fhir.IClaimItem[]|undefined;
  /**
   * The total value of the all the items in the claim.
   */
  total?: fhir.IMoney|undefined;
}

/**
 * For example,  for the original treatment and follow-up exams.
 */
export class ClaimRelated extends fhir.BackboneElement implements IClaimRelated {
  /**
   * Reference to a related claim.
   */
  public claim?: fhir.Reference|undefined;
  /**
   * For example, prior claim or umbrella.
   */
  public relationship?: fhir.CodeableConcept|undefined;
  /**
   * For example, Property/Casualty insurer claim # or Workers Compensation case # .
   */
  public reference?: fhir.Identifier|undefined;
  /**
   * Default constructor for ClaimRelated - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IClaimRelated> = { }) {
    super(source);
    if (source['claim']) { this.claim = new fhir.Reference(source.claim!); }
    if (source['relationship']) { this.relationship = new fhir.CodeableConcept(source.relationship!); }
    if (source['reference']) { this.reference = new fhir.Identifier(source.reference!); }
  }
  /**
   * Example-bound Value Set for relationship
   */
  public relationshipExampleValueSet():RelatedClaimRelationshipValueSetType {
    return RelatedClaimRelationshipValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["claim"]) { results.push(...this.claim.doModelValidation()); }
    if (this["relationship"]) { results.push(...this.relationship.doModelValidation()); }
    if (this["reference"]) { results.push(...this.reference.doModelValidation()); }
    return results;
  }
}

/**
 * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and choose to pay the subscriber instead.
 */
export class ClaimPayee extends fhir.BackboneElement implements IClaimPayee {
  /**
   * Type of Party to be reimbursed: subscriber, provider, other.
   */
  public type: fhir.CodeableConcept|null;
  /**
   * Not required if the payee is 'subscriber' or 'provider'.
   */
  public party?: fhir.Reference|undefined;
  /**
   * Default constructor for ClaimPayee - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IClaimPayee> = { }) {
    super(source);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    else { this.type = null; }
    if (source['party']) { this.party = new fhir.Reference(source.party!); }
  }
  /**
   * Example-bound Value Set for type
   */
  public typeExampleValueSet():PayeetypeValueSetType {
    return PayeetypeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["type"]) { results.push(["type",'Missing required element: Claim.payee.type']); }
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (this["party"]) { results.push(...this.party.doModelValidation()); }
    return results;
  }
}

/**
 * The members of the team who provided the products and services.
 */
export class ClaimCareTeam extends fhir.BackboneElement implements IClaimCareTeam {
  /**
   * A number to uniquely identify care team entries.
   */
  public sequence: number|null;
  /**
   * Extended properties for primitive element: Claim.careTeam.sequence
   */
  public _sequence?: fhir.FhirElement|undefined;
  /**
   * Member of the team who provided the product or service.
   */
  public provider: fhir.Reference|null;
  /**
   * Responsible might not be required when there is only a single provider listed.
   */
  public responsible?: boolean|undefined;
  /**
   * Extended properties for primitive element: Claim.careTeam.responsible
   */
  public _responsible?: fhir.FhirElement|undefined;
  /**
   * Role might not be required when there is only a single provider listed.
   */
  public role?: fhir.CodeableConcept|undefined;
  /**
   * The qualification of the practitioner which is applicable for this service.
   */
  public qualification?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for ClaimCareTeam - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IClaimCareTeam> = { }) {
    super(source);
    if (source['sequence']) { this.sequence = source.sequence; }
    else { this.sequence = null; }
    if (source['_sequence']) { this._sequence = new fhir.FhirElement(source._sequence!); }
    if (source['provider']) { this.provider = new fhir.Reference(source.provider!); }
    else { this.provider = null; }
    if (source['responsible']) { this.responsible = source.responsible; }
    if (source['_responsible']) { this._responsible = new fhir.FhirElement(source._responsible!); }
    if (source['role']) { this.role = new fhir.CodeableConcept(source.role!); }
    if (source['qualification']) { this.qualification = new fhir.CodeableConcept(source.qualification!); }
  }
  /**
   * Example-bound Value Set for role
   */
  public roleExampleValueSet():ClaimCareteamroleValueSetType {
    return ClaimCareteamroleValueSet;
  }
  /**
   * Example-bound Value Set for qualification
   */
  public qualificationExampleValueSet():ProviderQualificationValueSetType {
    return ProviderQualificationValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["sequence"]) { results.push(["sequence",'Missing required element: Claim.careTeam.sequence']); }
    if (this["_sequence"]) { results.push(...this._sequence.doModelValidation()); }
    if (!this["provider"]) { results.push(["provider",'Missing required element: Claim.careTeam.provider']); }
    if (this["provider"]) { results.push(...this.provider.doModelValidation()); }
    if (this["_responsible"]) { results.push(...this._responsible.doModelValidation()); }
    if (this["role"]) { results.push(...this.role.doModelValidation()); }
    if (this["qualification"]) { results.push(...this.qualification.doModelValidation()); }
    return results;
  }
}

/**
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
export class ClaimSupportingInfo extends fhir.BackboneElement implements IClaimSupportingInfo {
  /**
   * A number to uniquely identify supporting information entries.
   */
  public sequence: number|null;
  /**
   * Extended properties for primitive element: Claim.supportingInfo.sequence
   */
  public _sequence?: fhir.FhirElement|undefined;
  /**
   * This may contain a category for the local bill type codes.
   */
  public category: fhir.CodeableConcept|null;
  /**
   * System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * The date when or period to which this information refers.
   */
  public timingDate?: string|undefined;
  /**
   * Extended properties for primitive element: Claim.supportingInfo.timing[x]
   */
  public _timingDate?: fhir.FhirElement|undefined;
  /**
   * The date when or period to which this information refers.
   */
  public timingPeriod?: fhir.Period|undefined;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  public valueBoolean?: boolean|undefined;
  /**
   * Extended properties for primitive element: Claim.supportingInfo.value[x]
   */
  public _valueBoolean?: fhir.FhirElement|undefined;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  public valueString?: string|undefined;
  /**
   * Extended properties for primitive element: Claim.supportingInfo.value[x]
   */
  public _valueString?: fhir.FhirElement|undefined;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  public valueQuantity?: fhir.Quantity|undefined;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  public valueAttachment?: fhir.Attachment|undefined;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  public valueReference?: fhir.Reference|undefined;
  /**
   * For example: the reason for the additional stay, or why a tooth is  missing.
   */
  public reason?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for ClaimSupportingInfo - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IClaimSupportingInfo> = { }) {
    super(source);
    if (source['sequence']) { this.sequence = source.sequence; }
    else { this.sequence = null; }
    if (source['_sequence']) { this._sequence = new fhir.FhirElement(source._sequence!); }
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category!); }
    else { this.category = null; }
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code!); }
    if (source['timingDate']) { this.timingDate = source.timingDate; }
    if (source['_timingDate']) { this._timingDate = new fhir.FhirElement(source._timingDate!); }
    if (source['timingPeriod']) { this.timingPeriod = new fhir.Period(source.timingPeriod!); }
    if (source['valueBoolean']) { this.valueBoolean = source.valueBoolean; }
    if (source['_valueBoolean']) { this._valueBoolean = new fhir.FhirElement(source._valueBoolean!); }
    if (source['valueString']) { this.valueString = source.valueString; }
    if (source['_valueString']) { this._valueString = new fhir.FhirElement(source._valueString!); }
    if (source['valueQuantity']) { this.valueQuantity = new fhir.Quantity(source.valueQuantity!); }
    if (source['valueAttachment']) { this.valueAttachment = new fhir.Attachment(source.valueAttachment!); }
    if (source['valueReference']) { this.valueReference = new fhir.Reference(source.valueReference!); }
    if (source['reason']) { this.reason = new fhir.CodeableConcept(source.reason!); }
  }
  /**
   * Example-bound Value Set for category
   */
  public categoryExampleValueSet():ClaimInformationcategoryValueSetType {
    return ClaimInformationcategoryValueSet;
  }
  /**
   * Example-bound Value Set for code
   */
  public codeExampleValueSet():ClaimExceptionValueSetType {
    return ClaimExceptionValueSet;
  }
  /**
   * Example-bound Value Set for reason
   */
  public reasonExampleValueSet():MissingToothReasonValueSetType {
    return MissingToothReasonValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["sequence"]) { results.push(["sequence",'Missing required element: Claim.supportingInfo.sequence']); }
    if (this["_sequence"]) { results.push(...this._sequence.doModelValidation()); }
    if (!this["category"]) { results.push(["category",'Missing required element: Claim.supportingInfo.category']); }
    if (this["category"]) { results.push(...this.category.doModelValidation()); }
    if (this["code"]) { results.push(...this.code.doModelValidation()); }
    if (this["_timingDate"]) { results.push(...this._timingDate.doModelValidation()); }
    if (this["timingPeriod"]) { results.push(...this.timingPeriod.doModelValidation()); }
    if (this["_valueBoolean"]) { results.push(...this._valueBoolean.doModelValidation()); }
    if (this["_valueString"]) { results.push(...this._valueString.doModelValidation()); }
    if (this["valueQuantity"]) { results.push(...this.valueQuantity.doModelValidation()); }
    if (this["valueAttachment"]) { results.push(...this.valueAttachment.doModelValidation()); }
    if (this["valueReference"]) { results.push(...this.valueReference.doModelValidation()); }
    if (this["reason"]) { results.push(...this.reason.doModelValidation()); }
    return results;
  }
}

/**
 * Information about diagnoses relevant to the claim items.
 */
export class ClaimDiagnosis extends fhir.BackboneElement implements IClaimDiagnosis {
  /**
   * Diagnosis are presented in list order to their expected importance: primary, secondary, etc.
   */
  public sequence: number|null;
  /**
   * Extended properties for primitive element: Claim.diagnosis.sequence
   */
  public _sequence?: fhir.FhirElement|undefined;
  /**
   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
   */
  public diagnosisCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
   */
  public diagnosisReference?: fhir.Reference|undefined;
  /**
   * For example: admitting, primary, secondary, discharge.
   */
  public type?: fhir.CodeableConcept[]|undefined;
  /**
   * Indication of whether the diagnosis was present on admission to a facility.
   */
  public onAdmission?: fhir.CodeableConcept|undefined;
  /**
   * For example DRG (Diagnosis Related Group) or a bundled billing code. A patient may have a diagnosis of a Myocardial Infarction and a DRG for HeartAttack would be assigned. The Claim item (and possible subsequent claims) would refer to the DRG for those line items that were for services related to the heart attack event.
   */
  public packageCode?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for ClaimDiagnosis - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IClaimDiagnosis> = { }) {
    super(source);
    if (source['sequence']) { this.sequence = source.sequence; }
    else { this.sequence = null; }
    if (source['_sequence']) { this._sequence = new fhir.FhirElement(source._sequence!); }
    if (source['diagnosisCodeableConcept']) { this.diagnosisCodeableConcept = new fhir.CodeableConcept(source.diagnosisCodeableConcept!); }
    if (source['diagnosisReference']) { this.diagnosisReference = new fhir.Reference(source.diagnosisReference!); }
    if (source['type']) { this.type = source.type.map((x) => new fhir.CodeableConcept(x)); }
    if (source['onAdmission']) { this.onAdmission = new fhir.CodeableConcept(source.onAdmission!); }
    if (source['packageCode']) { this.packageCode = new fhir.CodeableConcept(source.packageCode!); }
  }
  /**
   * Example-bound Value Set for type
   */
  public typeExampleValueSet():ExDiagnosistypeValueSetType {
    return ExDiagnosistypeValueSet;
  }
  /**
   * Example-bound Value Set for onAdmission
   */
  public onAdmissionExampleValueSet():ExDiagnosisOnAdmissionValueSetType {
    return ExDiagnosisOnAdmissionValueSet;
  }
  /**
   * Example-bound Value Set for packageCode
   */
  public packageCodeExampleValueSet():ExDiagnosisrelatedgroupValueSetType {
    return ExDiagnosisrelatedgroupValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["sequence"]) { results.push(["sequence",'Missing required element: Claim.diagnosis.sequence']); }
    if (this["_sequence"]) { results.push(...this._sequence.doModelValidation()); }
    if (this["diagnosisCodeableConcept"]) { results.push(...this.diagnosisCodeableConcept.doModelValidation()); }
    if (this["diagnosisReference"]) { results.push(...this.diagnosisReference.doModelValidation()); }
    if (this["type"]) { this.type.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["onAdmission"]) { results.push(...this.onAdmission.doModelValidation()); }
    if (this["packageCode"]) { results.push(...this.packageCode.doModelValidation()); }
    return results;
  }
}

/**
 * Procedures performed on the patient relevant to the billing items with the claim.
 */
export class ClaimProcedure extends fhir.BackboneElement implements IClaimProcedure {
  /**
   * A number to uniquely identify procedure entries.
   */
  public sequence: number|null;
  /**
   * Extended properties for primitive element: Claim.procedure.sequence
   */
  public _sequence?: fhir.FhirElement|undefined;
  /**
   * For example: primary, secondary.
   */
  public type?: fhir.CodeableConcept[]|undefined;
  /**
   * Date and optionally time the procedure was performed.
   */
  public date?: string|undefined;
  /**
   * Extended properties for primitive element: Claim.procedure.date
   */
  public _date?: fhir.FhirElement|undefined;
  /**
   * The code or reference to a Procedure resource which identifies the clinical intervention performed.
   */
  public procedureCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * The code or reference to a Procedure resource which identifies the clinical intervention performed.
   */
  public procedureReference?: fhir.Reference|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  public udi?: fhir.Reference[]|undefined;
  /**
   * Default constructor for ClaimProcedure - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IClaimProcedure> = { }) {
    super(source);
    if (source['sequence']) { this.sequence = source.sequence; }
    else { this.sequence = null; }
    if (source['_sequence']) { this._sequence = new fhir.FhirElement(source._sequence!); }
    if (source['type']) { this.type = source.type.map((x) => new fhir.CodeableConcept(x)); }
    if (source['date']) { this.date = source.date; }
    if (source['_date']) { this._date = new fhir.FhirElement(source._date!); }
    if (source['procedureCodeableConcept']) { this.procedureCodeableConcept = new fhir.CodeableConcept(source.procedureCodeableConcept!); }
    if (source['procedureReference']) { this.procedureReference = new fhir.Reference(source.procedureReference!); }
    if (source['udi']) { this.udi = source.udi.map((x) => new fhir.Reference(x)); }
  }
  /**
   * Example-bound Value Set for type
   */
  public typeExampleValueSet():ExProcedureTypeValueSetType {
    return ExProcedureTypeValueSet;
  }
  /**
   * Example-bound Value Set for procedureCodeableConcept
   */
  public procedureCodeableConceptExampleValueSet():Icd10ProceduresValueSetType {
    return Icd10ProceduresValueSet;
  }
  /**
   * Example-bound Value Set for procedureReference
   */
  public procedureReferenceExampleValueSet():Icd10ProceduresValueSetType {
    return Icd10ProceduresValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["sequence"]) { results.push(["sequence",'Missing required element: Claim.procedure.sequence']); }
    if (this["_sequence"]) { results.push(...this._sequence.doModelValidation()); }
    if (this["type"]) { this.type.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_date"]) { results.push(...this._date.doModelValidation()); }
    if (this["procedureCodeableConcept"]) { results.push(...this.procedureCodeableConcept.doModelValidation()); }
    if (this["procedureReference"]) { results.push(...this.procedureReference.doModelValidation()); }
    if (this["udi"]) { this.udi.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export class ClaimInsurance extends fhir.BackboneElement implements IClaimInsurance {
  /**
   * A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.
   */
  public sequence: number|null;
  /**
   * Extended properties for primitive element: Claim.insurance.sequence
   */
  public _sequence?: fhir.FhirElement|undefined;
  /**
   * A patient may (will) have multiple insurance policies which provide reimbursement for healthcare services and products. For example a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for adjudicating this claim. Other claims would be created to request adjudication against the other listed policies.
   */
  public focal: boolean|null;
  /**
   * Extended properties for primitive element: Claim.insurance.focal
   */
  public _focal?: fhir.FhirElement|undefined;
  /**
   * Only required in jurisdictions where insurers, rather than the provider, are required to send claims to  insurers that appear after them in the list. This element is not required when 'subrogation=true'.
   */
  public identifier?: fhir.Identifier|undefined;
  /**
   * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
   */
  public coverage: fhir.Reference|null;
  /**
   * A business agreement number established between the provider and the insurer for special business processing purposes.
   */
  public businessArrangement?: string|undefined;
  /**
   * Extended properties for primitive element: Claim.insurance.businessArrangement
   */
  public _businessArrangement?: fhir.FhirElement|undefined;
  /**
   * This value is an alphanumeric string that may be provided over the phone, via text, via paper, or within a ClaimResponse resource and is not a FHIR Identifier.
   */
  public preAuthRef?: string[]|undefined;
  /**
   * Extended properties for primitive element: Claim.insurance.preAuthRef
   */
  public _preAuthRef?: fhir.FhirElement[]|undefined;
  /**
   * Must not be specified when 'focal=true' for this insurance.
   */
  public claimResponse?: fhir.Reference|undefined;
  /**
   * Default constructor for ClaimInsurance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IClaimInsurance> = { }) {
    super(source);
    if (source['sequence']) { this.sequence = source.sequence; }
    else { this.sequence = null; }
    if (source['_sequence']) { this._sequence = new fhir.FhirElement(source._sequence!); }
    if (source['focal']) { this.focal = source.focal; }
    else { this.focal = null; }
    if (source['_focal']) { this._focal = new fhir.FhirElement(source._focal!); }
    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier!); }
    if (source['coverage']) { this.coverage = new fhir.Reference(source.coverage!); }
    else { this.coverage = null; }
    if (source['businessArrangement']) { this.businessArrangement = source.businessArrangement; }
    if (source['_businessArrangement']) { this._businessArrangement = new fhir.FhirElement(source._businessArrangement!); }
    if (source['preAuthRef']) { this.preAuthRef = source.preAuthRef.map((x) => (x)); }
    if (source['_preAuthRef']) { this._preAuthRef = source._preAuthRef.map((x) => new fhir.FhirElement(x)); }
    if (source['claimResponse']) { this.claimResponse = new fhir.Reference(source.claimResponse!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["sequence"]) { results.push(["sequence",'Missing required element: Claim.insurance.sequence']); }
    if (this["_sequence"]) { results.push(...this._sequence.doModelValidation()); }
    if (!this["focal"]) { results.push(["focal",'Missing required element: Claim.insurance.focal']); }
    if (this["_focal"]) { results.push(...this._focal.doModelValidation()); }
    if (this["identifier"]) { results.push(...this.identifier.doModelValidation()); }
    if (!this["coverage"]) { results.push(["coverage",'Missing required element: Claim.insurance.coverage']); }
    if (this["coverage"]) { results.push(...this.coverage.doModelValidation()); }
    if (this["_businessArrangement"]) { results.push(...this._businessArrangement.doModelValidation()); }
    if (this["_preAuthRef"]) { this._preAuthRef.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["claimResponse"]) { results.push(...this.claimResponse.doModelValidation()); }
    return results;
  }
}

/**
 * Details of an accident which resulted in injuries which required the products and services listed in the claim.
 */
export class ClaimAccident extends fhir.BackboneElement implements IClaimAccident {
  /**
   * The date of the accident has to precede the dates of the products and services but within a reasonable timeframe.
   */
  public date: string|null;
  /**
   * Extended properties for primitive element: Claim.accident.date
   */
  public _date?: fhir.FhirElement|undefined;
  /**
   * The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * The physical location of the accident event.
   */
  public locationAddress?: fhir.Address|undefined;
  /**
   * The physical location of the accident event.
   */
  public locationReference?: fhir.Reference|undefined;
  /**
   * Default constructor for ClaimAccident - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IClaimAccident> = { }) {
    super(source);
    if (source['date']) { this.date = source.date; }
    else { this.date = null; }
    if (source['_date']) { this._date = new fhir.FhirElement(source._date!); }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    if (source['locationAddress']) { this.locationAddress = new fhir.Address(source.locationAddress!); }
    if (source['locationReference']) { this.locationReference = new fhir.Reference(source.locationReference!); }
  }
  /**
   * Extensible-bound Value Set for type
   */
  public typeExtensibleValueSet():V3ActIncidentCodeValueSetType {
    return V3ActIncidentCodeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["date"]) { results.push(["date",'Missing required element: Claim.accident.date']); }
    if (this["_date"]) { results.push(...this._date.doModelValidation()); }
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (this["locationAddress"]) { results.push(...this.locationAddress.doModelValidation()); }
    if (this["locationReference"]) { results.push(...this.locationReference.doModelValidation()); }
    return results;
  }
}

/**
 * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
export class ClaimItemDetailSubDetail extends fhir.BackboneElement implements IClaimItemDetailSubDetail {
  /**
   * A number to uniquely identify item entries.
   */
  public sequence: number|null;
  /**
   * Extended properties for primitive element: Claim.item.detail.subDetail.sequence
   */
  public _sequence?: fhir.FhirElement|undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  public revenue?: fhir.CodeableConcept|undefined;
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  public category?: fhir.CodeableConcept|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  public productOrService: fhir.CodeableConcept|null;
  /**
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  public modifier?: fhir.CodeableConcept[]|undefined;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  public programCode?: fhir.CodeableConcept[]|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  public unitPrice?: fhir.Money|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  public factor?: number|undefined;
  /**
   * Extended properties for primitive element: Claim.item.detail.subDetail.factor
   */
  public _factor?: fhir.FhirElement|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  public net?: fhir.Money|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  public udi?: fhir.Reference[]|undefined;
  /**
   * Default constructor for ClaimItemDetailSubDetail - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IClaimItemDetailSubDetail> = { }) {
    super(source);
    if (source['sequence']) { this.sequence = source.sequence; }
    else { this.sequence = null; }
    if (source['_sequence']) { this._sequence = new fhir.FhirElement(source._sequence!); }
    if (source['revenue']) { this.revenue = new fhir.CodeableConcept(source.revenue!); }
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category!); }
    if (source['productOrService']) { this.productOrService = new fhir.CodeableConcept(source.productOrService!); }
    else { this.productOrService = null; }
    if (source['modifier']) { this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x)); }
    if (source['programCode']) { this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x)); }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity!); }
    if (source['unitPrice']) { this.unitPrice = new fhir.Money(source.unitPrice!); }
    if (source['factor']) { this.factor = source.factor; }
    if (source['_factor']) { this._factor = new fhir.FhirElement(source._factor!); }
    if (source['net']) { this.net = new fhir.Money(source.net!); }
    if (source['udi']) { this.udi = source.udi.map((x) => new fhir.Reference(x)); }
  }
  /**
   * Example-bound Value Set for revenue
   */
  public revenueExampleValueSet():ExRevenueCenterValueSetType {
    return ExRevenueCenterValueSet;
  }
  /**
   * Example-bound Value Set for category
   */
  public categoryExampleValueSet():ExBenefitcategoryValueSetType {
    return ExBenefitcategoryValueSet;
  }
  /**
   * Example-bound Value Set for productOrService
   */
  public productOrServiceExampleValueSet():ServiceUsclsValueSetType {
    return ServiceUsclsValueSet;
  }
  /**
   * Example-bound Value Set for modifier
   */
  public modifierExampleValueSet():ClaimModifiersValueSetType {
    return ClaimModifiersValueSet;
  }
  /**
   * Example-bound Value Set for programCode
   */
  public programCodeExampleValueSet():ExProgramCodeValueSetType {
    return ExProgramCodeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["sequence"]) { results.push(["sequence",'Missing required element: Claim.item.detail.subDetail.sequence']); }
    if (this["_sequence"]) { results.push(...this._sequence.doModelValidation()); }
    if (this["revenue"]) { results.push(...this.revenue.doModelValidation()); }
    if (this["category"]) { results.push(...this.category.doModelValidation()); }
    if (!this["productOrService"]) { results.push(["productOrService",'Missing required element: Claim.item.detail.subDetail.productOrService']); }
    if (this["productOrService"]) { results.push(...this.productOrService.doModelValidation()); }
    if (this["modifier"]) { this.modifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["programCode"]) { this.programCode.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["quantity"]) { results.push(...this.quantity.doModelValidation()); }
    if (this["unitPrice"]) { results.push(...this.unitPrice.doModelValidation()); }
    if (this["_factor"]) { results.push(...this._factor.doModelValidation()); }
    if (this["net"]) { results.push(...this.net.doModelValidation()); }
    if (this["udi"]) { this.udi.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
export class ClaimItemDetail extends fhir.BackboneElement implements IClaimItemDetail {
  /**
   * A number to uniquely identify item entries.
   */
  public sequence: number|null;
  /**
   * Extended properties for primitive element: Claim.item.detail.sequence
   */
  public _sequence?: fhir.FhirElement|undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  public revenue?: fhir.CodeableConcept|undefined;
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  public category?: fhir.CodeableConcept|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  public productOrService: fhir.CodeableConcept|null;
  /**
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  public modifier?: fhir.CodeableConcept[]|undefined;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  public programCode?: fhir.CodeableConcept[]|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  public unitPrice?: fhir.Money|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  public factor?: number|undefined;
  /**
   * Extended properties for primitive element: Claim.item.detail.factor
   */
  public _factor?: fhir.FhirElement|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  public net?: fhir.Money|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  public udi?: fhir.Reference[]|undefined;
  /**
   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  public subDetail?: fhir.ClaimItemDetailSubDetail[]|undefined;
  /**
   * Default constructor for ClaimItemDetail - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IClaimItemDetail> = { }) {
    super(source);
    if (source['sequence']) { this.sequence = source.sequence; }
    else { this.sequence = null; }
    if (source['_sequence']) { this._sequence = new fhir.FhirElement(source._sequence!); }
    if (source['revenue']) { this.revenue = new fhir.CodeableConcept(source.revenue!); }
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category!); }
    if (source['productOrService']) { this.productOrService = new fhir.CodeableConcept(source.productOrService!); }
    else { this.productOrService = null; }
    if (source['modifier']) { this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x)); }
    if (source['programCode']) { this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x)); }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity!); }
    if (source['unitPrice']) { this.unitPrice = new fhir.Money(source.unitPrice!); }
    if (source['factor']) { this.factor = source.factor; }
    if (source['_factor']) { this._factor = new fhir.FhirElement(source._factor!); }
    if (source['net']) { this.net = new fhir.Money(source.net!); }
    if (source['udi']) { this.udi = source.udi.map((x) => new fhir.Reference(x)); }
    if (source['subDetail']) { this.subDetail = source.subDetail.map((x) => new fhir.ClaimItemDetailSubDetail(x)); }
  }
  /**
   * Example-bound Value Set for revenue
   */
  public revenueExampleValueSet():ExRevenueCenterValueSetType {
    return ExRevenueCenterValueSet;
  }
  /**
   * Example-bound Value Set for category
   */
  public categoryExampleValueSet():ExBenefitcategoryValueSetType {
    return ExBenefitcategoryValueSet;
  }
  /**
   * Example-bound Value Set for productOrService
   */
  public productOrServiceExampleValueSet():ServiceUsclsValueSetType {
    return ServiceUsclsValueSet;
  }
  /**
   * Example-bound Value Set for modifier
   */
  public modifierExampleValueSet():ClaimModifiersValueSetType {
    return ClaimModifiersValueSet;
  }
  /**
   * Example-bound Value Set for programCode
   */
  public programCodeExampleValueSet():ExProgramCodeValueSetType {
    return ExProgramCodeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["sequence"]) { results.push(["sequence",'Missing required element: Claim.item.detail.sequence']); }
    if (this["_sequence"]) { results.push(...this._sequence.doModelValidation()); }
    if (this["revenue"]) { results.push(...this.revenue.doModelValidation()); }
    if (this["category"]) { results.push(...this.category.doModelValidation()); }
    if (!this["productOrService"]) { results.push(["productOrService",'Missing required element: Claim.item.detail.productOrService']); }
    if (this["productOrService"]) { results.push(...this.productOrService.doModelValidation()); }
    if (this["modifier"]) { this.modifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["programCode"]) { this.programCode.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["quantity"]) { results.push(...this.quantity.doModelValidation()); }
    if (this["unitPrice"]) { results.push(...this.unitPrice.doModelValidation()); }
    if (this["_factor"]) { results.push(...this._factor.doModelValidation()); }
    if (this["net"]) { results.push(...this.net.doModelValidation()); }
    if (this["udi"]) { this.udi.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["subDetail"]) { this.subDetail.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
 */
export class ClaimItem extends fhir.BackboneElement implements IClaimItem {
  /**
   * A number to uniquely identify item entries.
   */
  public sequence: number|null;
  /**
   * Extended properties for primitive element: Claim.item.sequence
   */
  public _sequence?: fhir.FhirElement|undefined;
  /**
   * CareTeam members related to this service or product.
   */
  public careTeamSequence?: number[]|undefined;
  /**
   * Extended properties for primitive element: Claim.item.careTeamSequence
   */
  public _careTeamSequence?: fhir.FhirElement[]|undefined;
  /**
   * Diagnosis applicable for this service or product.
   */
  public diagnosisSequence?: number[]|undefined;
  /**
   * Extended properties for primitive element: Claim.item.diagnosisSequence
   */
  public _diagnosisSequence?: fhir.FhirElement[]|undefined;
  /**
   * Procedures applicable for this service or product.
   */
  public procedureSequence?: number[]|undefined;
  /**
   * Extended properties for primitive element: Claim.item.procedureSequence
   */
  public _procedureSequence?: fhir.FhirElement[]|undefined;
  /**
   * Exceptions, special conditions and supporting information applicable for this service or product.
   */
  public informationSequence?: number[]|undefined;
  /**
   * Extended properties for primitive element: Claim.item.informationSequence
   */
  public _informationSequence?: fhir.FhirElement[]|undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  public revenue?: fhir.CodeableConcept|undefined;
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  public category?: fhir.CodeableConcept|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  public productOrService: fhir.CodeableConcept|null;
  /**
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
   */
  public modifier?: fhir.CodeableConcept[]|undefined;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  public programCode?: fhir.CodeableConcept[]|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  public servicedDate?: string|undefined;
  /**
   * Extended properties for primitive element: Claim.item.serviced[x]
   */
  public _servicedDate?: fhir.FhirElement|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  public servicedPeriod?: fhir.Period|undefined;
  /**
   * Where the product or service was provided.
   */
  public locationCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * Where the product or service was provided.
   */
  public locationAddress?: fhir.Address|undefined;
  /**
   * Where the product or service was provided.
   */
  public locationReference?: fhir.Reference|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  public unitPrice?: fhir.Money|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  public factor?: number|undefined;
  /**
   * Extended properties for primitive element: Claim.item.factor
   */
  public _factor?: fhir.FhirElement|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  public net?: fhir.Money|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  public udi?: fhir.Reference[]|undefined;
  /**
   * For example: Providing a tooth code, allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
   */
  public bodySite?: fhir.CodeableConcept|undefined;
  /**
   * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
   */
  public subSite?: fhir.CodeableConcept[]|undefined;
  /**
   * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
   */
  public encounter?: fhir.Reference[]|undefined;
  /**
   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  public detail?: fhir.ClaimItemDetail[]|undefined;
  /**
   * Default constructor for ClaimItem - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IClaimItem> = { }) {
    super(source);
    if (source['sequence']) { this.sequence = source.sequence; }
    else { this.sequence = null; }
    if (source['_sequence']) { this._sequence = new fhir.FhirElement(source._sequence!); }
    if (source['careTeamSequence']) { this.careTeamSequence = source.careTeamSequence.map((x) => (x)); }
    if (source['_careTeamSequence']) { this._careTeamSequence = source._careTeamSequence.map((x) => new fhir.FhirElement(x)); }
    if (source['diagnosisSequence']) { this.diagnosisSequence = source.diagnosisSequence.map((x) => (x)); }
    if (source['_diagnosisSequence']) { this._diagnosisSequence = source._diagnosisSequence.map((x) => new fhir.FhirElement(x)); }
    if (source['procedureSequence']) { this.procedureSequence = source.procedureSequence.map((x) => (x)); }
    if (source['_procedureSequence']) { this._procedureSequence = source._procedureSequence.map((x) => new fhir.FhirElement(x)); }
    if (source['informationSequence']) { this.informationSequence = source.informationSequence.map((x) => (x)); }
    if (source['_informationSequence']) { this._informationSequence = source._informationSequence.map((x) => new fhir.FhirElement(x)); }
    if (source['revenue']) { this.revenue = new fhir.CodeableConcept(source.revenue!); }
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category!); }
    if (source['productOrService']) { this.productOrService = new fhir.CodeableConcept(source.productOrService!); }
    else { this.productOrService = null; }
    if (source['modifier']) { this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x)); }
    if (source['programCode']) { this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x)); }
    if (source['servicedDate']) { this.servicedDate = source.servicedDate; }
    if (source['_servicedDate']) { this._servicedDate = new fhir.FhirElement(source._servicedDate!); }
    if (source['servicedPeriod']) { this.servicedPeriod = new fhir.Period(source.servicedPeriod!); }
    if (source['locationCodeableConcept']) { this.locationCodeableConcept = new fhir.CodeableConcept(source.locationCodeableConcept!); }
    if (source['locationAddress']) { this.locationAddress = new fhir.Address(source.locationAddress!); }
    if (source['locationReference']) { this.locationReference = new fhir.Reference(source.locationReference!); }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity!); }
    if (source['unitPrice']) { this.unitPrice = new fhir.Money(source.unitPrice!); }
    if (source['factor']) { this.factor = source.factor; }
    if (source['_factor']) { this._factor = new fhir.FhirElement(source._factor!); }
    if (source['net']) { this.net = new fhir.Money(source.net!); }
    if (source['udi']) { this.udi = source.udi.map((x) => new fhir.Reference(x)); }
    if (source['bodySite']) { this.bodySite = new fhir.CodeableConcept(source.bodySite!); }
    if (source['subSite']) { this.subSite = source.subSite.map((x) => new fhir.CodeableConcept(x)); }
    if (source['encounter']) { this.encounter = source.encounter.map((x) => new fhir.Reference(x)); }
    if (source['detail']) { this.detail = source.detail.map((x) => new fhir.ClaimItemDetail(x)); }
  }
  /**
   * Example-bound Value Set for revenue
   */
  public revenueExampleValueSet():ExRevenueCenterValueSetType {
    return ExRevenueCenterValueSet;
  }
  /**
   * Example-bound Value Set for category
   */
  public categoryExampleValueSet():ExBenefitcategoryValueSetType {
    return ExBenefitcategoryValueSet;
  }
  /**
   * Example-bound Value Set for productOrService
   */
  public productOrServiceExampleValueSet():ServiceUsclsValueSetType {
    return ServiceUsclsValueSet;
  }
  /**
   * Example-bound Value Set for modifier
   */
  public modifierExampleValueSet():ClaimModifiersValueSetType {
    return ClaimModifiersValueSet;
  }
  /**
   * Example-bound Value Set for programCode
   */
  public programCodeExampleValueSet():ExProgramCodeValueSetType {
    return ExProgramCodeValueSet;
  }
  /**
   * Example-bound Value Set for locationCodeableConcept
   */
  public locationCodeableConceptExampleValueSet():ServicePlaceValueSetType {
    return ServicePlaceValueSet;
  }
  /**
   * Example-bound Value Set for locationAddress
   */
  public locationAddressExampleValueSet():ServicePlaceValueSetType {
    return ServicePlaceValueSet;
  }
  /**
   * Example-bound Value Set for locationReference
   */
  public locationReferenceExampleValueSet():ServicePlaceValueSetType {
    return ServicePlaceValueSet;
  }
  /**
   * Example-bound Value Set for bodySite
   */
  public bodySiteExampleValueSet():ToothValueSetType {
    return ToothValueSet;
  }
  /**
   * Example-bound Value Set for subSite
   */
  public subSiteExampleValueSet():SurfaceValueSetType {
    return SurfaceValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["sequence"]) { results.push(["sequence",'Missing required element: Claim.item.sequence']); }
    if (this["_sequence"]) { results.push(...this._sequence.doModelValidation()); }
    if (this["_careTeamSequence"]) { this._careTeamSequence.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_diagnosisSequence"]) { this._diagnosisSequence.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_procedureSequence"]) { this._procedureSequence.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_informationSequence"]) { this._informationSequence.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["revenue"]) { results.push(...this.revenue.doModelValidation()); }
    if (this["category"]) { results.push(...this.category.doModelValidation()); }
    if (!this["productOrService"]) { results.push(["productOrService",'Missing required element: Claim.item.productOrService']); }
    if (this["productOrService"]) { results.push(...this.productOrService.doModelValidation()); }
    if (this["modifier"]) { this.modifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["programCode"]) { this.programCode.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_servicedDate"]) { results.push(...this._servicedDate.doModelValidation()); }
    if (this["servicedPeriod"]) { results.push(...this.servicedPeriod.doModelValidation()); }
    if (this["locationCodeableConcept"]) { results.push(...this.locationCodeableConcept.doModelValidation()); }
    if (this["locationAddress"]) { results.push(...this.locationAddress.doModelValidation()); }
    if (this["locationReference"]) { results.push(...this.locationReference.doModelValidation()); }
    if (this["quantity"]) { results.push(...this.quantity.doModelValidation()); }
    if (this["unitPrice"]) { results.push(...this.unitPrice.doModelValidation()); }
    if (this["_factor"]) { results.push(...this._factor.doModelValidation()); }
    if (this["net"]) { results.push(...this.net.doModelValidation()); }
    if (this["udi"]) { this.udi.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["bodySite"]) { results.push(...this.bodySite.doModelValidation()); }
    if (this["subSite"]) { this.subSite.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["encounter"]) { this.encounter.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["detail"]) { this.detail.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
 */
export class Claim extends fhir.DomainResource implements IClaim {
  /**
   * Resource Type Name
   */
  public resourceType: "Claim";
  /**
   * A unique identifier assigned to this claim.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  public status: FmStatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: Claim.status
   */
  public _status?: fhir.FhirElement|undefined;
  /**
   * The majority of jurisdictions use: oral, pharmacy, vision, professional and institutional, or variants on those terms, as the general styles of claims. The valueset is extensible to accommodate other jurisdictional requirements.
   */
  public type: fhir.CodeableConcept|null;
  /**
   * This may contain the local bill type codes, for example the US UB-04 bill type code or the CMS bill type.
   */
  public subType?: fhir.CodeableConcept|undefined;
  /**
   * A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.
   */
  public use: ClaimUseValueSetEnum|null;
  /**
   * Extended properties for primitive element: Claim.use
   */
  public _use?: fhir.FhirElement|undefined;
  /**
   * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual or forecast reimbursement is sought.
   */
  public patient: fhir.Reference|null;
  /**
   * Typically this would be today or in the past for a claim, and today or in the future for preauthorizations and predeterminations. Typically line item dates of service should fall within the billing period if one is specified.
   */
  public billablePeriod?: fhir.Period|undefined;
  /**
   * This field is independent of the date of creation of the resource as it may reflect the creation date of a source document prior to digitization. Typically for claims all services must be completed as of this date.
   */
  public created: string|null;
  /**
   * Extended properties for primitive element: Claim.created
   */
  public _created?: fhir.FhirElement|undefined;
  /**
   * Individual who created the claim, predetermination or preauthorization.
   */
  public enterer?: fhir.Reference|undefined;
  /**
   * The Insurer who is target of the request.
   */
  public insurer?: fhir.Reference|undefined;
  /**
   * Typically this field would be 1..1 where this party is responsible for the claim but not necessarily professionally responsible for the provision of the individual products and services listed below.
   */
  public provider: fhir.Reference|null;
  /**
   * If a claim processor is unable to complete the processing as per the priority then they should generate and error and not process the request.
   */
  public priority: fhir.CodeableConcept|null;
  /**
   * This field is only used for preauthorizations.
   */
  public fundsReserve?: fhir.CodeableConcept|undefined;
  /**
   * For example,  for the original treatment and follow-up exams.
   */
  public related?: fhir.ClaimRelated[]|undefined;
  /**
   * Prescription to support the dispensing of pharmacy, device or vision products.
   */
  public prescription?: fhir.Reference|undefined;
  /**
   * For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefore issues a new prescription for an alternate medication which has the same therapeutic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'.
   */
  public originalPrescription?: fhir.Reference|undefined;
  /**
   * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and choose to pay the subscriber instead.
   */
  public payee?: fhir.ClaimPayee|undefined;
  /**
   * The referral resource which lists the date, practitioner, reason and other supporting information.
   */
  public referral?: fhir.Reference|undefined;
  /**
   * Facility where the services were provided.
   */
  public facility?: fhir.Reference|undefined;
  /**
   * The members of the team who provided the products and services.
   */
  public careTeam?: fhir.ClaimCareTeam[]|undefined;
  /**
   * Often there are multiple jurisdiction specific valuesets which are required.
   */
  public supportingInfo?: fhir.ClaimSupportingInfo[]|undefined;
  /**
   * Information about diagnoses relevant to the claim items.
   */
  public diagnosis?: fhir.ClaimDiagnosis[]|undefined;
  /**
   * Procedures performed on the patient relevant to the billing items with the claim.
   */
  public procedure?: fhir.ClaimProcedure[]|undefined;
  /**
   * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
   */
  public insurance: fhir.ClaimInsurance[]|null;
  /**
   * Details of an accident which resulted in injuries which required the products and services listed in the claim.
   */
  public accident?: fhir.ClaimAccident|undefined;
  /**
   * A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
   */
  public item?: fhir.ClaimItem[]|undefined;
  /**
   * The total value of the all the items in the claim.
   */
  public total?: fhir.Money|undefined;
  /**
   * Default constructor for Claim - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IClaim> = { }) {
    super(source);
    this.resourceType = 'Claim';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['status']) { this.status = source.status; }
    else { this.status = null; }
    if (source['_status']) { this._status = new fhir.FhirElement(source._status!); }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    else { this.type = null; }
    if (source['subType']) { this.subType = new fhir.CodeableConcept(source.subType!); }
    if (source['use']) { this.use = source.use; }
    else { this.use = null; }
    if (source['_use']) { this._use = new fhir.FhirElement(source._use!); }
    if (source['patient']) { this.patient = new fhir.Reference(source.patient!); }
    else { this.patient = null; }
    if (source['billablePeriod']) { this.billablePeriod = new fhir.Period(source.billablePeriod!); }
    if (source['created']) { this.created = source.created; }
    else { this.created = null; }
    if (source['_created']) { this._created = new fhir.FhirElement(source._created!); }
    if (source['enterer']) { this.enterer = new fhir.Reference(source.enterer!); }
    if (source['insurer']) { this.insurer = new fhir.Reference(source.insurer!); }
    if (source['provider']) { this.provider = new fhir.Reference(source.provider!); }
    else { this.provider = null; }
    if (source['priority']) { this.priority = new fhir.CodeableConcept(source.priority!); }
    else { this.priority = null; }
    if (source['fundsReserve']) { this.fundsReserve = new fhir.CodeableConcept(source.fundsReserve!); }
    if (source['related']) { this.related = source.related.map((x) => new fhir.ClaimRelated(x)); }
    if (source['prescription']) { this.prescription = new fhir.Reference(source.prescription!); }
    if (source['originalPrescription']) { this.originalPrescription = new fhir.Reference(source.originalPrescription!); }
    if (source['payee']) { this.payee = new fhir.ClaimPayee(source.payee!); }
    if (source['referral']) { this.referral = new fhir.Reference(source.referral!); }
    if (source['facility']) { this.facility = new fhir.Reference(source.facility!); }
    if (source['careTeam']) { this.careTeam = source.careTeam.map((x) => new fhir.ClaimCareTeam(x)); }
    if (source['supportingInfo']) { this.supportingInfo = source.supportingInfo.map((x) => new fhir.ClaimSupportingInfo(x)); }
    if (source['diagnosis']) { this.diagnosis = source.diagnosis.map((x) => new fhir.ClaimDiagnosis(x)); }
    if (source['procedure']) { this.procedure = source.procedure.map((x) => new fhir.ClaimProcedure(x)); }
    if (source['insurance']) { this.insurance = source.insurance.map((x) => new fhir.ClaimInsurance(x)); }
    else { this.insurance = null; }
    if (source['accident']) { this.accident = new fhir.ClaimAccident(source.accident!); }
    if (source['item']) { this.item = source.item.map((x) => new fhir.ClaimItem(x)); }
    if (source['total']) { this.total = new fhir.Money(source.total!); }
  }
  /**
   * Required-bound Value Set for status
   */
  public statusRequiredValueSet():FmStatusValueSetType {
    return FmStatusValueSet;
  }
  /**
   * Extensible-bound Value Set for type
   */
  public typeExtensibleValueSet():ClaimTypeValueSetType {
    return ClaimTypeValueSet;
  }
  /**
   * Example-bound Value Set for subType
   */
  public subTypeExampleValueSet():ClaimSubtypeValueSetType {
    return ClaimSubtypeValueSet;
  }
  /**
   * Required-bound Value Set for use
   */
  public useRequiredValueSet():ClaimUseValueSetType {
    return ClaimUseValueSet;
  }
  /**
   * Example-bound Value Set for priority
   */
  public priorityExampleValueSet():ProcessPriorityValueSetType {
    return ProcessPriorityValueSet;
  }
  /**
   * Example-bound Value Set for fundsReserve
   */
  public fundsReserveExampleValueSet():FundsreserveValueSetType {
    return FundsreserveValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: Claim.resourceType']); }
    if (this["identifier"]) { this.identifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (!this["status"]) { results.push(["status",'Missing required element: Claim.status']); }
    if (this["_status"]) { results.push(...this._status.doModelValidation()); }
    if (!this["type"]) { results.push(["type",'Missing required element: Claim.type']); }
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (this["subType"]) { results.push(...this.subType.doModelValidation()); }
    if (!this["use"]) { results.push(["use",'Missing required element: Claim.use']); }
    if (this["_use"]) { results.push(...this._use.doModelValidation()); }
    if (!this["patient"]) { results.push(["patient",'Missing required element: Claim.patient']); }
    if (this["patient"]) { results.push(...this.patient.doModelValidation()); }
    if (this["billablePeriod"]) { results.push(...this.billablePeriod.doModelValidation()); }
    if (!this["created"]) { results.push(["created",'Missing required element: Claim.created']); }
    if (this["_created"]) { results.push(...this._created.doModelValidation()); }
    if (this["enterer"]) { results.push(...this.enterer.doModelValidation()); }
    if (this["insurer"]) { results.push(...this.insurer.doModelValidation()); }
    if (!this["provider"]) { results.push(["provider",'Missing required element: Claim.provider']); }
    if (this["provider"]) { results.push(...this.provider.doModelValidation()); }
    if (!this["priority"]) { results.push(["priority",'Missing required element: Claim.priority']); }
    if (this["priority"]) { results.push(...this.priority.doModelValidation()); }
    if (this["fundsReserve"]) { results.push(...this.fundsReserve.doModelValidation()); }
    if (this["related"]) { this.related.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["prescription"]) { results.push(...this.prescription.doModelValidation()); }
    if (this["originalPrescription"]) { results.push(...this.originalPrescription.doModelValidation()); }
    if (this["payee"]) { results.push(...this.payee.doModelValidation()); }
    if (this["referral"]) { results.push(...this.referral.doModelValidation()); }
    if (this["facility"]) { results.push(...this.facility.doModelValidation()); }
    if (this["careTeam"]) { this.careTeam.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["supportingInfo"]) { this.supportingInfo.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["diagnosis"]) { this.diagnosis.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["procedure"]) { this.procedure.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if ((!this["insurance"]) || (this["insurance"].length === 0)) { results.push(["insurance",'Missing required element: Claim.insurance']); }
    if (this["insurance"]) { this.insurance.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["accident"]) { results.push(...this.accident.doModelValidation()); }
    if (this["item"]) { this.item.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["total"]) { results.push(...this.total.doModelValidation()); }
    return results;
  }
}
