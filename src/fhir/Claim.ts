// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * For example,  for the original treatment and follow-up exams.
 */
export type IClaimRelated = fhir.IBackboneElement & {
  /**
   * Reference to a related claim.
   */
  claim?: fhir.IReference|undefined;
  /**
   * For example, Property/Casualty insurer claim # or Workers Compensation case # .
   */
  reference?: fhir.IIdentifier|undefined;
  /**
   * For example, prior claim or umbrella.
   */
  relationship?: fhir.ICodeableConcept|undefined;
}
/**
 * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and choose to pay the subscriber instead.
 */
export type IClaimPayee = fhir.IBackboneElement & {
  /**
   * Not required if the payee is 'subscriber' or 'provider'.
   */
  party?: fhir.IReference|undefined;
  /**
   * Type of Party to be reimbursed: subscriber, provider, other.
   */
  type: fhir.ICodeableConcept|null;
}
/**
 * The members of the team who provided the products and services.
 */
export type IClaimCareTeam = fhir.IBackboneElement & {
  /**
   * Member of the team who provided the product or service.
   */
  provider: fhir.IReference|null;
  /**
   * The qualification of the practitioner which is applicable for this service.
   */
  qualification?: fhir.ICodeableConcept|undefined;
  /**
   * Responsible might not be required when there is only a single provider listed.
   */
  responsible?: boolean|undefined;
  _responsible?: fhir.IFhirElement|undefined;
  /**
   * Role might not be required when there is only a single provider listed.
   */
  role?: fhir.ICodeableConcept|undefined;
  /**
   * A number to uniquely identify care team entries.
   */
  sequence: number|null;
  _sequence?: fhir.IFhirElement|undefined;
}
/**
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
export type IClaimSupportingInfo = fhir.IBackboneElement & {
  /**
   * This may contain a category for the local bill type codes.
   */
  category: fhir.ICodeableConcept|null;
  /**
   * System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought.
   */
  code?: fhir.ICodeableConcept|undefined;
  /**
   * For example: the reason for the additional stay, or why a tooth is  missing.
   */
  reason?: fhir.ICodeableConcept|undefined;
  /**
   * A number to uniquely identify supporting information entries.
   */
  sequence: number|null;
  _sequence?: fhir.IFhirElement|undefined;
  /**
   * The date when or period to which this information refers.
   */
  timingDate?: string|undefined;
  _timingDate?: fhir.IFhirElement|undefined;
  /**
   * The date when or period to which this information refers.
   */
  timingPeriod?: fhir.IPeriod|undefined;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueBoolean?: boolean|undefined;
  _valueBoolean?: fhir.IFhirElement|undefined;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueString?: string|undefined;
  _valueString?: fhir.IFhirElement|undefined;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueQuantity?: fhir.IQuantity|undefined;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueAttachment?: fhir.IAttachment|undefined;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueReference?: fhir.IReference|undefined;
}
/**
 * Information about diagnoses relevant to the claim items.
 */
export type IClaimDiagnosis = fhir.IBackboneElement & {
  /**
   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
   */
  diagnosisCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
   */
  diagnosisReference?: fhir.IReference|undefined;
  /**
   * Indication of whether the diagnosis was present on admission to a facility.
   */
  onAdmission?: fhir.ICodeableConcept|undefined;
  /**
   * For example DRG (Diagnosis Related Group) or a bundled billing code. A patient may have a diagnosis of a Myocardial Infarction and a DRG for HeartAttack would be assigned. The Claim item (and possible subsequent claims) would refer to the DRG for those line items that were for services related to the heart attack event.
   */
  packageCode?: fhir.ICodeableConcept|undefined;
  /**
   * Diagnosis are presented in list order to their expected importance: primary, secondary, etc.
   */
  sequence: number|null;
  _sequence?: fhir.IFhirElement|undefined;
  /**
   * For example: admitting, primary, secondary, discharge.
   */
  type?: fhir.ICodeableConcept[]|undefined;
}
/**
 * Procedures performed on the patient relevant to the billing items with the claim.
 */
export type IClaimProcedure = fhir.IBackboneElement & {
  /**
   * Date and optionally time the procedure was performed.
   */
  date?: string|undefined;
  _date?: fhir.IFhirElement|undefined;
  /**
   * The code or reference to a Procedure resource which identifies the clinical intervention performed.
   */
  procedureCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * The code or reference to a Procedure resource which identifies the clinical intervention performed.
   */
  procedureReference?: fhir.IReference|undefined;
  /**
   * A number to uniquely identify procedure entries.
   */
  sequence: number|null;
  _sequence?: fhir.IFhirElement|undefined;
  /**
   * For example: primary, secondary.
   */
  type?: fhir.ICodeableConcept[]|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: fhir.IReference[]|undefined;
}
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export type IClaimInsurance = fhir.IBackboneElement & {
  /**
   * A business agreement number established between the provider and the insurer for special business processing purposes.
   */
  businessArrangement?: string|undefined;
  _businessArrangement?: fhir.IFhirElement|undefined;
  /**
   * Must not be specified when 'focal=true' for this insurance.
   */
  claimResponse?: fhir.IReference|undefined;
  /**
   * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
   */
  coverage: fhir.IReference|null;
  /**
   * A patient may (will) have multiple insurance policies which provide reimbursement for healthcare services and products. For example a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for adjudicating this claim. Other claims would be created to request adjudication against the other listed policies.
   */
  focal: boolean|null;
  _focal?: fhir.IFhirElement|undefined;
  /**
   * Only required in jurisdictions where insurers, rather than the provider, are required to send claims to  insurers that appear after them in the list. This element is not required when 'subrogation=true'.
   */
  identifier?: fhir.IIdentifier|undefined;
  /**
   * This value is an alphanumeric string that may be provided over the phone, via text, via paper, or within a ClaimResponse resource and is not a FHIR Identifier.
   */
  preAuthRef?: string[]|undefined;
  _preAuthRef?: fhir.IFhirElement[]|undefined;
  /**
   * A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.
   */
  sequence: number|null;
  _sequence?: fhir.IFhirElement|undefined;
}
/**
 * Details of an accident which resulted in injuries which required the products and services listed in the claim.
 */
export type IClaimAccident = fhir.IBackboneElement & {
  /**
   * The date of the accident has to precede the dates of the products and services but within a reasonable timeframe.
   */
  date: string|null;
  _date?: fhir.IFhirElement|undefined;
  /**
   * The physical location of the accident event.
   */
  locationAddress?: fhir.IAddress|undefined;
  /**
   * The physical location of the accident event.
   */
  locationReference?: fhir.IReference|undefined;
  /**
   * The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.
   */
  type?: fhir.ICodeableConcept|undefined;
}
/**
 * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
export type IClaimItemDetailSubDetail = fhir.IBackboneElement & {
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category?: fhir.ICodeableConcept|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: number|undefined;
  _factor?: fhir.IFhirElement|undefined;
  /**
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: fhir.ICodeableConcept[]|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: fhir.IMoney|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService: fhir.ICodeableConcept|null;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  programCode?: fhir.ICodeableConcept[]|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: fhir.IQuantity|undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: fhir.ICodeableConcept|undefined;
  /**
   * A number to uniquely identify item entries.
   */
  sequence: number|null;
  _sequence?: fhir.IFhirElement|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: fhir.IReference[]|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: fhir.IMoney|undefined;
}
/**
 * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
export type IClaimItemDetail = fhir.IBackboneElement & {
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category?: fhir.ICodeableConcept|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: number|undefined;
  _factor?: fhir.IFhirElement|undefined;
  /**
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: fhir.ICodeableConcept[]|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: fhir.IMoney|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService: fhir.ICodeableConcept|null;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  programCode?: fhir.ICodeableConcept[]|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: fhir.IQuantity|undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: fhir.ICodeableConcept|undefined;
  /**
   * A number to uniquely identify item entries.
   */
  sequence: number|null;
  _sequence?: fhir.IFhirElement|undefined;
  /**
   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  subDetail?: fhir.IClaimItemDetailSubDetail[]|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: fhir.IReference[]|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: fhir.IMoney|undefined;
}
/**
 * A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
 */
export type IClaimItem = fhir.IBackboneElement & {
  /**
   * For example: Providing a tooth code, allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
   */
  bodySite?: fhir.ICodeableConcept|undefined;
  /**
   * CareTeam members related to this service or product.
   */
  careTeamSequence?: number[]|undefined;
  _careTeamSequence?: fhir.IFhirElement[]|undefined;
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category?: fhir.ICodeableConcept|undefined;
  /**
   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  detail?: fhir.IClaimItemDetail[]|undefined;
  /**
   * Diagnosis applicable for this service or product.
   */
  diagnosisSequence?: number[]|undefined;
  _diagnosisSequence?: fhir.IFhirElement[]|undefined;
  /**
   * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
   */
  encounter?: fhir.IReference[]|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: number|undefined;
  _factor?: fhir.IFhirElement|undefined;
  /**
   * Exceptions, special conditions and supporting information applicable for this service or product.
   */
  informationSequence?: number[]|undefined;
  _informationSequence?: fhir.IFhirElement[]|undefined;
  /**
   * Where the product or service was provided.
   */
  locationCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * Where the product or service was provided.
   */
  locationAddress?: fhir.IAddress|undefined;
  /**
   * Where the product or service was provided.
   */
  locationReference?: fhir.IReference|undefined;
  /**
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
   */
  modifier?: fhir.ICodeableConcept[]|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: fhir.IMoney|undefined;
  /**
   * Procedures applicable for this service or product.
   */
  procedureSequence?: number[]|undefined;
  _procedureSequence?: fhir.IFhirElement[]|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService: fhir.ICodeableConcept|null;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  programCode?: fhir.ICodeableConcept[]|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: fhir.IQuantity|undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: fhir.ICodeableConcept|undefined;
  /**
   * A number to uniquely identify item entries.
   */
  sequence: number|null;
  _sequence?: fhir.IFhirElement|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  servicedDate?: string|undefined;
  _servicedDate?: fhir.IFhirElement|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  servicedPeriod?: fhir.IPeriod|undefined;
  /**
   * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
   */
  subSite?: fhir.ICodeableConcept[]|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: fhir.IReference[]|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: fhir.IMoney|undefined;
}
/**
 * A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
 */
export type IClaim = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "Claim";
  /**
   * Details of an accident which resulted in injuries which required the products and services listed in the claim.
   */
  accident?: fhir.IClaimAccident|undefined;
  /**
   * Typically this would be today or in the past for a claim, and today or in the future for preauthorizations and predeterminations. Typically line item dates of service should fall within the billing period if one is specified.
   */
  billablePeriod?: fhir.IPeriod|undefined;
  /**
   * The members of the team who provided the products and services.
   */
  careTeam?: fhir.IClaimCareTeam[]|undefined;
  /**
   * This field is independent of the date of creation of the resource as it may reflect the creation date of a source document prior to digitization. Typically for claims all services must be completed as of this date.
   */
  created: string|null;
  _created?: fhir.IFhirElement|undefined;
  /**
   * Information about diagnoses relevant to the claim items.
   */
  diagnosis?: fhir.IClaimDiagnosis[]|undefined;
  /**
   * Individual who created the claim, predetermination or preauthorization.
   */
  enterer?: fhir.IReference|undefined;
  /**
   * Facility where the services were provided.
   */
  facility?: fhir.IReference|undefined;
  /**
   * This field is only used for preauthorizations.
   */
  fundsReserve?: fhir.ICodeableConcept|undefined;
  /**
   * A unique identifier assigned to this claim.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
   */
  insurance: fhir.IClaimInsurance[]|null;
  /**
   * The Insurer who is target of the request.
   */
  insurer?: fhir.IReference|undefined;
  /**
   * A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
   */
  item?: fhir.IClaimItem[]|undefined;
  /**
   * For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefore issues a new prescription for an alternate medication which has the same therapeutic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'.
   */
  originalPrescription?: fhir.IReference|undefined;
  /**
   * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual or forecast reimbursement is sought.
   */
  patient: fhir.IReference|null;
  /**
   * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and choose to pay the subscriber instead.
   */
  payee?: fhir.IClaimPayee|undefined;
  /**
   * Prescription to support the dispensing of pharmacy, device or vision products.
   */
  prescription?: fhir.IReference|undefined;
  /**
   * If a claim processor is unable to complete the processing as per the priority then they should generate and error and not process the request.
   */
  priority: fhir.ICodeableConcept|null;
  /**
   * Procedures performed on the patient relevant to the billing items with the claim.
   */
  procedure?: fhir.IClaimProcedure[]|undefined;
  /**
   * Typically this field would be 1..1 where this party is responsible for the claim but not necessarily professionally responsible for the provision of the individual products and services listed below.
   */
  provider: fhir.IReference|null;
  /**
   * The referral resource which lists the date, practitioner, reason and other supporting information.
   */
  referral?: fhir.IReference|undefined;
  /**
   * For example,  for the original treatment and follow-up exams.
   */
  related?: fhir.IClaimRelated[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ClaimStatusEnum|null;
  _status?: fhir.IFhirElement|undefined;
  /**
   * This may contain the local bill type codes, for example the US UB-04 bill type code or the CMS bill type.
   */
  subType?: fhir.ICodeableConcept|undefined;
  /**
   * Often there are multiple jurisdiction specific valuesets which are required.
   */
  supportingInfo?: fhir.IClaimSupportingInfo[]|undefined;
  /**
   * The total value of the all the items in the claim.
   */
  total?: fhir.IMoney|undefined;
  /**
   * The majority of jurisdictions use: oral, pharmacy, vision, professional and institutional, or variants on those terms, as the general styles of claims. The valueset is extensible to accommodate other jurisdictional requirements.
   */
  type: fhir.ICodeableConcept|null;
  /**
   * A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.
   */
  use: ClaimUseEnum|null;
  _use?: fhir.IFhirElement|undefined;
}
/**
 * For example,  for the original treatment and follow-up exams.
 */
export class ClaimRelated extends fhir.BackboneElement implements fhir.IClaimRelated {
  /**
   * Reference to a related claim.
   */
  public claim?: fhir.Reference|undefined;
  /**
   * For example, Property/Casualty insurer claim # or Workers Compensation case # .
   */
  public reference?: fhir.Identifier|undefined;
  /**
   * For example, prior claim or umbrella.
   */
  public relationship?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for ClaimRelated - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IClaimRelated> = {}) {
    super(source);
    if (source["claim"]) { this.claim = new fhir.Reference(source.claim!); }
    if (source["reference"]) { this.reference = new fhir.Identifier(source.reference!); }
    if (source["relationship"]) { this.relationship = new fhir.CodeableConcept(source.relationship!); }
  }
  /**
   * Check if the current ClaimRelated contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ClaimRelated from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IClaimRelated):ClaimRelated {
    var dest:ClaimRelated = new ClaimRelated(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `ClaimRelated is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and choose to pay the subscriber instead.
 */
export class ClaimPayee extends fhir.BackboneElement implements fhir.IClaimPayee {
  /**
   * Not required if the payee is 'subscriber' or 'provider'.
   */
  public party?: fhir.Reference|undefined;
  /**
   * Type of Party to be reimbursed: subscriber, provider, other.
   */
  public type: fhir.CodeableConcept|null;
  /**
   * Default constructor for ClaimPayee - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IClaimPayee> = {}) {
    super(source);
    if (source["party"]) { this.party = new fhir.Reference(source.party!); }
    this.type = null;
    if (source["type"]) { this.type = new fhir.CodeableConcept(source.type!); }
    if (this.type === undefined) { this.type = null }
  }
  /**
   * Check if the current ClaimPayee contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["type"] === undefined) { missingElements.push("type"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ClaimPayee from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IClaimPayee):ClaimPayee {
    var dest:ClaimPayee = new ClaimPayee(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `ClaimPayee is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * The members of the team who provided the products and services.
 */
export class ClaimCareTeam extends fhir.BackboneElement implements fhir.IClaimCareTeam {
  /**
   * Member of the team who provided the product or service.
   */
  public provider: fhir.Reference|null;
  /**
   * The qualification of the practitioner which is applicable for this service.
   */
  public qualification?: fhir.CodeableConcept|undefined;
  /**
   * Responsible might not be required when there is only a single provider listed.
   */
  public responsible?: boolean|undefined;
  public _responsible?: fhir.FhirElement|undefined;
  /**
   * Role might not be required when there is only a single provider listed.
   */
  public role?: fhir.CodeableConcept|undefined;
  /**
   * A number to uniquely identify care team entries.
   */
  public sequence: number|null;
  public _sequence?: fhir.FhirElement|undefined;
  /**
   * Default constructor for ClaimCareTeam - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IClaimCareTeam> = {}) {
    super(source);
    this.provider = null;
    if (source["provider"]) { this.provider = new fhir.Reference(source.provider!); }
    if (this.provider === undefined) { this.provider = null }
    if (source["qualification"]) { this.qualification = new fhir.CodeableConcept(source.qualification!); }
    if (source["responsible"]) { this.responsible = source.responsible; }
    if (source["_responsible"]) { this._responsible = new fhir.FhirElement(source._responsible!); }
    if (source["role"]) { this.role = new fhir.CodeableConcept(source.role!); }
    this.sequence = null;
    if (source["sequence"]) { this.sequence = source.sequence; }
    if (this.sequence === undefined) { this.sequence = null }
    if (source["_sequence"]) { this._sequence = new fhir.FhirElement(source._sequence!); }
  }
  /**
   * Check if the current ClaimCareTeam contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["provider"] === undefined) { missingElements.push("provider"); }
    if (this["sequence"] === undefined) { missingElements.push("sequence"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ClaimCareTeam from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IClaimCareTeam):ClaimCareTeam {
    var dest:ClaimCareTeam = new ClaimCareTeam(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `ClaimCareTeam is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
export class ClaimSupportingInfo extends fhir.BackboneElement implements fhir.IClaimSupportingInfo {
  /**
   * This may contain a category for the local bill type codes.
   */
  public category: fhir.CodeableConcept|null;
  /**
   * System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * For example: the reason for the additional stay, or why a tooth is  missing.
   */
  public reason?: fhir.CodeableConcept|undefined;
  /**
   * A number to uniquely identify supporting information entries.
   */
  public sequence: number|null;
  public _sequence?: fhir.FhirElement|undefined;
  /**
   * The date when or period to which this information refers.
   */
  public timingDate?: string|undefined;
  public _timingDate?: fhir.FhirElement|undefined;
  /**
   * The date when or period to which this information refers.
   */
  public timingPeriod?: fhir.Period|undefined;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  public valueBoolean?: boolean|undefined;
  public _valueBoolean?: fhir.FhirElement|undefined;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  public valueString?: string|undefined;
  public _valueString?: fhir.FhirElement|undefined;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  public valueQuantity?: fhir.Quantity|undefined;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  public valueAttachment?: fhir.Attachment|undefined;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  public valueReference?: fhir.Reference|undefined;
  /**
   * Default constructor for ClaimSupportingInfo - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IClaimSupportingInfo> = {}) {
    super(source);
    this.category = null;
    if (source["category"]) { this.category = new fhir.CodeableConcept(source.category!); }
    if (this.category === undefined) { this.category = null }
    if (source["code"]) { this.code = new fhir.CodeableConcept(source.code!); }
    if (source["reason"]) { this.reason = new fhir.CodeableConcept(source.reason!); }
    this.sequence = null;
    if (source["sequence"]) { this.sequence = source.sequence; }
    if (this.sequence === undefined) { this.sequence = null }
    if (source["_sequence"]) { this._sequence = new fhir.FhirElement(source._sequence!); }
    if (source["timingDate"]) { this.timingDate = source.timingDate; }
    if (source["_timingDate"]) { this._timingDate = new fhir.FhirElement(source._timingDate!); }
    if (source["timingPeriod"]) { this.timingPeriod = new fhir.Period(source.timingPeriod!); }
    if (source["valueBoolean"]) { this.valueBoolean = source.valueBoolean; }
    if (source["_valueBoolean"]) { this._valueBoolean = new fhir.FhirElement(source._valueBoolean!); }
    if (source["valueString"]) { this.valueString = source.valueString; }
    if (source["_valueString"]) { this._valueString = new fhir.FhirElement(source._valueString!); }
    if (source["valueQuantity"]) { this.valueQuantity = new fhir.Quantity(source.valueQuantity!); }
    if (source["valueAttachment"]) { this.valueAttachment = new fhir.Attachment(source.valueAttachment!); }
    if (source["valueReference"]) { this.valueReference = new fhir.Reference(source.valueReference!); }
  }
  /**
   * Check if the current ClaimSupportingInfo contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["category"] === undefined) { missingElements.push("category"); }
    if (this["sequence"] === undefined) { missingElements.push("sequence"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ClaimSupportingInfo from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IClaimSupportingInfo):ClaimSupportingInfo {
    var dest:ClaimSupportingInfo = new ClaimSupportingInfo(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `ClaimSupportingInfo is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Information about diagnoses relevant to the claim items.
 */
export class ClaimDiagnosis extends fhir.BackboneElement implements fhir.IClaimDiagnosis {
  /**
   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
   */
  public diagnosisCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
   */
  public diagnosisReference?: fhir.Reference|undefined;
  /**
   * Indication of whether the diagnosis was present on admission to a facility.
   */
  public onAdmission?: fhir.CodeableConcept|undefined;
  /**
   * For example DRG (Diagnosis Related Group) or a bundled billing code. A patient may have a diagnosis of a Myocardial Infarction and a DRG for HeartAttack would be assigned. The Claim item (and possible subsequent claims) would refer to the DRG for those line items that were for services related to the heart attack event.
   */
  public packageCode?: fhir.CodeableConcept|undefined;
  /**
   * Diagnosis are presented in list order to their expected importance: primary, secondary, etc.
   */
  public sequence: number|null;
  public _sequence?: fhir.FhirElement|undefined;
  /**
   * For example: admitting, primary, secondary, discharge.
   */
  public type?: fhir.CodeableConcept[]|undefined;
  /**
   * Default constructor for ClaimDiagnosis - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IClaimDiagnosis> = {}) {
    super(source);
    if (source["diagnosisCodeableConcept"]) { this.diagnosisCodeableConcept = new fhir.CodeableConcept(source.diagnosisCodeableConcept!); }
    if (source["diagnosisReference"]) { this.diagnosisReference = new fhir.Reference(source.diagnosisReference!); }
    if (source["onAdmission"]) { this.onAdmission = new fhir.CodeableConcept(source.onAdmission!); }
    if (source["packageCode"]) { this.packageCode = new fhir.CodeableConcept(source.packageCode!); }
    this.sequence = null;
    if (source["sequence"]) { this.sequence = source.sequence; }
    if (this.sequence === undefined) { this.sequence = null }
    if (source["_sequence"]) { this._sequence = new fhir.FhirElement(source._sequence!); }
    if (source["type"]) { this.type = source.type.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
  }
  /**
   * Check if the current ClaimDiagnosis contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["sequence"] === undefined) { missingElements.push("sequence"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ClaimDiagnosis from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IClaimDiagnosis):ClaimDiagnosis {
    var dest:ClaimDiagnosis = new ClaimDiagnosis(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `ClaimDiagnosis is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Procedures performed on the patient relevant to the billing items with the claim.
 */
export class ClaimProcedure extends fhir.BackboneElement implements fhir.IClaimProcedure {
  /**
   * Date and optionally time the procedure was performed.
   */
  public date?: string|undefined;
  public _date?: fhir.FhirElement|undefined;
  /**
   * The code or reference to a Procedure resource which identifies the clinical intervention performed.
   */
  public procedureCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * The code or reference to a Procedure resource which identifies the clinical intervention performed.
   */
  public procedureReference?: fhir.Reference|undefined;
  /**
   * A number to uniquely identify procedure entries.
   */
  public sequence: number|null;
  public _sequence?: fhir.FhirElement|undefined;
  /**
   * For example: primary, secondary.
   */
  public type?: fhir.CodeableConcept[]|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  public udi?: fhir.Reference[]|undefined;
  /**
   * Default constructor for ClaimProcedure - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IClaimProcedure> = {}) {
    super(source);
    if (source["date"]) { this.date = source.date; }
    if (source["_date"]) { this._date = new fhir.FhirElement(source._date!); }
    if (source["procedureCodeableConcept"]) { this.procedureCodeableConcept = new fhir.CodeableConcept(source.procedureCodeableConcept!); }
    if (source["procedureReference"]) { this.procedureReference = new fhir.Reference(source.procedureReference!); }
    this.sequence = null;
    if (source["sequence"]) { this.sequence = source.sequence; }
    if (this.sequence === undefined) { this.sequence = null }
    if (source["_sequence"]) { this._sequence = new fhir.FhirElement(source._sequence!); }
    if (source["type"]) { this.type = source.type.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["udi"]) { this.udi = source.udi.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
  }
  /**
   * Check if the current ClaimProcedure contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["sequence"] === undefined) { missingElements.push("sequence"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ClaimProcedure from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IClaimProcedure):ClaimProcedure {
    var dest:ClaimProcedure = new ClaimProcedure(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `ClaimProcedure is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export class ClaimInsurance extends fhir.BackboneElement implements fhir.IClaimInsurance {
  /**
   * A business agreement number established between the provider and the insurer for special business processing purposes.
   */
  public businessArrangement?: string|undefined;
  public _businessArrangement?: fhir.FhirElement|undefined;
  /**
   * Must not be specified when 'focal=true' for this insurance.
   */
  public claimResponse?: fhir.Reference|undefined;
  /**
   * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
   */
  public coverage: fhir.Reference|null;
  /**
   * A patient may (will) have multiple insurance policies which provide reimbursement for healthcare services and products. For example a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for adjudicating this claim. Other claims would be created to request adjudication against the other listed policies.
   */
  public focal: boolean|null;
  public _focal?: fhir.FhirElement|undefined;
  /**
   * Only required in jurisdictions where insurers, rather than the provider, are required to send claims to  insurers that appear after them in the list. This element is not required when 'subrogation=true'.
   */
  public identifier?: fhir.Identifier|undefined;
  /**
   * This value is an alphanumeric string that may be provided over the phone, via text, via paper, or within a ClaimResponse resource and is not a FHIR Identifier.
   */
  public preAuthRef?: string[]|undefined;
  public _preAuthRef?: fhir.FhirElement[]|undefined;
  /**
   * A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.
   */
  public sequence: number|null;
  public _sequence?: fhir.FhirElement|undefined;
  /**
   * Default constructor for ClaimInsurance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IClaimInsurance> = {}) {
    super(source);
    if (source["businessArrangement"]) { this.businessArrangement = source.businessArrangement; }
    if (source["_businessArrangement"]) { this._businessArrangement = new fhir.FhirElement(source._businessArrangement!); }
    if (source["claimResponse"]) { this.claimResponse = new fhir.Reference(source.claimResponse!); }
    this.coverage = null;
    if (source["coverage"]) { this.coverage = new fhir.Reference(source.coverage!); }
    if (this.coverage === undefined) { this.coverage = null }
    this.focal = null;
    if (source["focal"]) { this.focal = source.focal; }
    if (this.focal === undefined) { this.focal = null }
    if (source["_focal"]) { this._focal = new fhir.FhirElement(source._focal!); }
    if (source["identifier"]) { this.identifier = new fhir.Identifier(source.identifier!); }
    if (source["preAuthRef"]) { this.preAuthRef = source.preAuthRef.map((x) => (x)); }
    if (source["_preAuthRef"]) { this._preAuthRef = source._preAuthRef.map((x:Partial<fhir.IFhirElement>) => new fhir.FhirElement(x)); }
    this.sequence = null;
    if (source["sequence"]) { this.sequence = source.sequence; }
    if (this.sequence === undefined) { this.sequence = null }
    if (source["_sequence"]) { this._sequence = new fhir.FhirElement(source._sequence!); }
  }
  /**
   * Check if the current ClaimInsurance contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["coverage"] === undefined) { missingElements.push("coverage"); }
    if (this["focal"] === undefined) { missingElements.push("focal"); }
    if (this["sequence"] === undefined) { missingElements.push("sequence"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ClaimInsurance from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IClaimInsurance):ClaimInsurance {
    var dest:ClaimInsurance = new ClaimInsurance(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `ClaimInsurance is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Details of an accident which resulted in injuries which required the products and services listed in the claim.
 */
export class ClaimAccident extends fhir.BackboneElement implements fhir.IClaimAccident {
  /**
   * The date of the accident has to precede the dates of the products and services but within a reasonable timeframe.
   */
  public date: string|null;
  public _date?: fhir.FhirElement|undefined;
  /**
   * The physical location of the accident event.
   */
  public locationAddress?: fhir.Address|undefined;
  /**
   * The physical location of the accident event.
   */
  public locationReference?: fhir.Reference|undefined;
  /**
   * The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for ClaimAccident - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IClaimAccident> = {}) {
    super(source);
    this.date = null;
    if (source["date"]) { this.date = source.date; }
    if (this.date === undefined) { this.date = null }
    if (source["_date"]) { this._date = new fhir.FhirElement(source._date!); }
    if (source["locationAddress"]) { this.locationAddress = new fhir.Address(source.locationAddress!); }
    if (source["locationReference"]) { this.locationReference = new fhir.Reference(source.locationReference!); }
    if (source["type"]) { this.type = new fhir.CodeableConcept(source.type!); }
  }
  /**
   * Check if the current ClaimAccident contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["date"] === undefined) { missingElements.push("date"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ClaimAccident from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IClaimAccident):ClaimAccident {
    var dest:ClaimAccident = new ClaimAccident(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `ClaimAccident is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
export class ClaimItemDetailSubDetail extends fhir.BackboneElement implements fhir.IClaimItemDetailSubDetail {
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  public category?: fhir.CodeableConcept|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  public factor?: number|undefined;
  public _factor?: fhir.FhirElement|undefined;
  /**
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  public modifier?: fhir.CodeableConcept[]|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  public net?: fhir.Money|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  public productOrService: fhir.CodeableConcept|null;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  public programCode?: fhir.CodeableConcept[]|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  public revenue?: fhir.CodeableConcept|undefined;
  /**
   * A number to uniquely identify item entries.
   */
  public sequence: number|null;
  public _sequence?: fhir.FhirElement|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  public udi?: fhir.Reference[]|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  public unitPrice?: fhir.Money|undefined;
  /**
   * Default constructor for ClaimItemDetailSubDetail - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IClaimItemDetailSubDetail> = {}) {
    super(source);
    if (source["category"]) { this.category = new fhir.CodeableConcept(source.category!); }
    if (source["factor"]) { this.factor = source.factor; }
    if (source["_factor"]) { this._factor = new fhir.FhirElement(source._factor!); }
    if (source["modifier"]) { this.modifier = source.modifier.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["net"]) { this.net = new fhir.Money(source.net!); }
    this.productOrService = null;
    if (source["productOrService"]) { this.productOrService = new fhir.CodeableConcept(source.productOrService!); }
    if (this.productOrService === undefined) { this.productOrService = null }
    if (source["programCode"]) { this.programCode = source.programCode.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["quantity"]) { this.quantity = new fhir.Quantity(source.quantity!); }
    if (source["revenue"]) { this.revenue = new fhir.CodeableConcept(source.revenue!); }
    this.sequence = null;
    if (source["sequence"]) { this.sequence = source.sequence; }
    if (this.sequence === undefined) { this.sequence = null }
    if (source["_sequence"]) { this._sequence = new fhir.FhirElement(source._sequence!); }
    if (source["udi"]) { this.udi = source.udi.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["unitPrice"]) { this.unitPrice = new fhir.Money(source.unitPrice!); }
  }
  /**
   * Check if the current ClaimItemDetailSubDetail contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["productOrService"] === undefined) { missingElements.push("productOrService"); }
    if (this["sequence"] === undefined) { missingElements.push("sequence"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ClaimItemDetailSubDetail from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IClaimItemDetailSubDetail):ClaimItemDetailSubDetail {
    var dest:ClaimItemDetailSubDetail = new ClaimItemDetailSubDetail(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `ClaimItemDetailSubDetail is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
export class ClaimItemDetail extends fhir.BackboneElement implements fhir.IClaimItemDetail {
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  public category?: fhir.CodeableConcept|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  public factor?: number|undefined;
  public _factor?: fhir.FhirElement|undefined;
  /**
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  public modifier?: fhir.CodeableConcept[]|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  public net?: fhir.Money|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  public productOrService: fhir.CodeableConcept|null;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  public programCode?: fhir.CodeableConcept[]|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  public revenue?: fhir.CodeableConcept|undefined;
  /**
   * A number to uniquely identify item entries.
   */
  public sequence: number|null;
  public _sequence?: fhir.FhirElement|undefined;
  /**
   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  public subDetail?: fhir.ClaimItemDetailSubDetail[]|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  public udi?: fhir.Reference[]|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  public unitPrice?: fhir.Money|undefined;
  /**
   * Default constructor for ClaimItemDetail - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IClaimItemDetail> = {}) {
    super(source);
    if (source["category"]) { this.category = new fhir.CodeableConcept(source.category!); }
    if (source["factor"]) { this.factor = source.factor; }
    if (source["_factor"]) { this._factor = new fhir.FhirElement(source._factor!); }
    if (source["modifier"]) { this.modifier = source.modifier.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["net"]) { this.net = new fhir.Money(source.net!); }
    this.productOrService = null;
    if (source["productOrService"]) { this.productOrService = new fhir.CodeableConcept(source.productOrService!); }
    if (this.productOrService === undefined) { this.productOrService = null }
    if (source["programCode"]) { this.programCode = source.programCode.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["quantity"]) { this.quantity = new fhir.Quantity(source.quantity!); }
    if (source["revenue"]) { this.revenue = new fhir.CodeableConcept(source.revenue!); }
    this.sequence = null;
    if (source["sequence"]) { this.sequence = source.sequence; }
    if (this.sequence === undefined) { this.sequence = null }
    if (source["_sequence"]) { this._sequence = new fhir.FhirElement(source._sequence!); }
    if (source["subDetail"]) { this.subDetail = source.subDetail.map((x:Partial<fhir.IClaimItemDetailSubDetail>) => new fhir.ClaimItemDetailSubDetail(x)); }
    if (source["udi"]) { this.udi = source.udi.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["unitPrice"]) { this.unitPrice = new fhir.Money(source.unitPrice!); }
  }
  /**
   * Check if the current ClaimItemDetail contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["productOrService"] === undefined) { missingElements.push("productOrService"); }
    if (this["sequence"] === undefined) { missingElements.push("sequence"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ClaimItemDetail from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IClaimItemDetail):ClaimItemDetail {
    var dest:ClaimItemDetail = new ClaimItemDetail(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `ClaimItemDetail is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
 */
export class ClaimItem extends fhir.BackboneElement implements fhir.IClaimItem {
  /**
   * For example: Providing a tooth code, allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
   */
  public bodySite?: fhir.CodeableConcept|undefined;
  /**
   * CareTeam members related to this service or product.
   */
  public careTeamSequence?: number[]|undefined;
  public _careTeamSequence?: fhir.FhirElement[]|undefined;
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  public category?: fhir.CodeableConcept|undefined;
  /**
   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  public detail?: fhir.ClaimItemDetail[]|undefined;
  /**
   * Diagnosis applicable for this service or product.
   */
  public diagnosisSequence?: number[]|undefined;
  public _diagnosisSequence?: fhir.FhirElement[]|undefined;
  /**
   * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
   */
  public encounter?: fhir.Reference[]|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  public factor?: number|undefined;
  public _factor?: fhir.FhirElement|undefined;
  /**
   * Exceptions, special conditions and supporting information applicable for this service or product.
   */
  public informationSequence?: number[]|undefined;
  public _informationSequence?: fhir.FhirElement[]|undefined;
  /**
   * Where the product or service was provided.
   */
  public locationCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * Where the product or service was provided.
   */
  public locationAddress?: fhir.Address|undefined;
  /**
   * Where the product or service was provided.
   */
  public locationReference?: fhir.Reference|undefined;
  /**
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
   */
  public modifier?: fhir.CodeableConcept[]|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  public net?: fhir.Money|undefined;
  /**
   * Procedures applicable for this service or product.
   */
  public procedureSequence?: number[]|undefined;
  public _procedureSequence?: fhir.FhirElement[]|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  public productOrService: fhir.CodeableConcept|null;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  public programCode?: fhir.CodeableConcept[]|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  public revenue?: fhir.CodeableConcept|undefined;
  /**
   * A number to uniquely identify item entries.
   */
  public sequence: number|null;
  public _sequence?: fhir.FhirElement|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  public servicedDate?: string|undefined;
  public _servicedDate?: fhir.FhirElement|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  public servicedPeriod?: fhir.Period|undefined;
  /**
   * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
   */
  public subSite?: fhir.CodeableConcept[]|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  public udi?: fhir.Reference[]|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  public unitPrice?: fhir.Money|undefined;
  /**
   * Default constructor for ClaimItem - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IClaimItem> = {}) {
    super(source);
    if (source["bodySite"]) { this.bodySite = new fhir.CodeableConcept(source.bodySite!); }
    if (source["careTeamSequence"]) { this.careTeamSequence = source.careTeamSequence.map((x) => (x)); }
    if (source["_careTeamSequence"]) { this._careTeamSequence = source._careTeamSequence.map((x:Partial<fhir.IFhirElement>) => new fhir.FhirElement(x)); }
    if (source["category"]) { this.category = new fhir.CodeableConcept(source.category!); }
    if (source["detail"]) { this.detail = source.detail.map((x:Partial<fhir.IClaimItemDetail>) => new fhir.ClaimItemDetail(x)); }
    if (source["diagnosisSequence"]) { this.diagnosisSequence = source.diagnosisSequence.map((x) => (x)); }
    if (source["_diagnosisSequence"]) { this._diagnosisSequence = source._diagnosisSequence.map((x:Partial<fhir.IFhirElement>) => new fhir.FhirElement(x)); }
    if (source["encounter"]) { this.encounter = source.encounter.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["factor"]) { this.factor = source.factor; }
    if (source["_factor"]) { this._factor = new fhir.FhirElement(source._factor!); }
    if (source["informationSequence"]) { this.informationSequence = source.informationSequence.map((x) => (x)); }
    if (source["_informationSequence"]) { this._informationSequence = source._informationSequence.map((x:Partial<fhir.IFhirElement>) => new fhir.FhirElement(x)); }
    if (source["locationCodeableConcept"]) { this.locationCodeableConcept = new fhir.CodeableConcept(source.locationCodeableConcept!); }
    if (source["locationAddress"]) { this.locationAddress = new fhir.Address(source.locationAddress!); }
    if (source["locationReference"]) { this.locationReference = new fhir.Reference(source.locationReference!); }
    if (source["modifier"]) { this.modifier = source.modifier.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["net"]) { this.net = new fhir.Money(source.net!); }
    if (source["procedureSequence"]) { this.procedureSequence = source.procedureSequence.map((x) => (x)); }
    if (source["_procedureSequence"]) { this._procedureSequence = source._procedureSequence.map((x:Partial<fhir.IFhirElement>) => new fhir.FhirElement(x)); }
    this.productOrService = null;
    if (source["productOrService"]) { this.productOrService = new fhir.CodeableConcept(source.productOrService!); }
    if (this.productOrService === undefined) { this.productOrService = null }
    if (source["programCode"]) { this.programCode = source.programCode.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["quantity"]) { this.quantity = new fhir.Quantity(source.quantity!); }
    if (source["revenue"]) { this.revenue = new fhir.CodeableConcept(source.revenue!); }
    this.sequence = null;
    if (source["sequence"]) { this.sequence = source.sequence; }
    if (this.sequence === undefined) { this.sequence = null }
    if (source["_sequence"]) { this._sequence = new fhir.FhirElement(source._sequence!); }
    if (source["servicedDate"]) { this.servicedDate = source.servicedDate; }
    if (source["_servicedDate"]) { this._servicedDate = new fhir.FhirElement(source._servicedDate!); }
    if (source["servicedPeriod"]) { this.servicedPeriod = new fhir.Period(source.servicedPeriod!); }
    if (source["subSite"]) { this.subSite = source.subSite.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["udi"]) { this.udi = source.udi.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["unitPrice"]) { this.unitPrice = new fhir.Money(source.unitPrice!); }
  }
  /**
   * Check if the current ClaimItem contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["productOrService"] === undefined) { missingElements.push("productOrService"); }
    if (this["sequence"] === undefined) { missingElements.push("sequence"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ClaimItem from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IClaimItem):ClaimItem {
    var dest:ClaimItem = new ClaimItem(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `ClaimItem is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
 */
export class Claim extends fhir.DomainResource implements fhir.IClaim {
  /**
   * Resource Type Name
   */
  public override resourceType: "Claim";
  /**
   * Details of an accident which resulted in injuries which required the products and services listed in the claim.
   */
  public accident?: fhir.ClaimAccident|undefined;
  /**
   * Typically this would be today or in the past for a claim, and today or in the future for preauthorizations and predeterminations. Typically line item dates of service should fall within the billing period if one is specified.
   */
  public billablePeriod?: fhir.Period|undefined;
  /**
   * The members of the team who provided the products and services.
   */
  public careTeam?: fhir.ClaimCareTeam[]|undefined;
  /**
   * This field is independent of the date of creation of the resource as it may reflect the creation date of a source document prior to digitization. Typically for claims all services must be completed as of this date.
   */
  public created: string|null;
  public _created?: fhir.FhirElement|undefined;
  /**
   * Information about diagnoses relevant to the claim items.
   */
  public diagnosis?: fhir.ClaimDiagnosis[]|undefined;
  /**
   * Individual who created the claim, predetermination or preauthorization.
   */
  public enterer?: fhir.Reference|undefined;
  /**
   * Facility where the services were provided.
   */
  public facility?: fhir.Reference|undefined;
  /**
   * This field is only used for preauthorizations.
   */
  public fundsReserve?: fhir.CodeableConcept|undefined;
  /**
   * A unique identifier assigned to this claim.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
   */
  public insurance: fhir.ClaimInsurance[]|null;
  /**
   * The Insurer who is target of the request.
   */
  public insurer?: fhir.Reference|undefined;
  /**
   * A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
   */
  public item?: fhir.ClaimItem[]|undefined;
  /**
   * For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefore issues a new prescription for an alternate medication which has the same therapeutic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'.
   */
  public originalPrescription?: fhir.Reference|undefined;
  /**
   * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual or forecast reimbursement is sought.
   */
  public patient: fhir.Reference|null;
  /**
   * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and choose to pay the subscriber instead.
   */
  public payee?: fhir.ClaimPayee|undefined;
  /**
   * Prescription to support the dispensing of pharmacy, device or vision products.
   */
  public prescription?: fhir.Reference|undefined;
  /**
   * If a claim processor is unable to complete the processing as per the priority then they should generate and error and not process the request.
   */
  public priority: fhir.CodeableConcept|null;
  /**
   * Procedures performed on the patient relevant to the billing items with the claim.
   */
  public procedure?: fhir.ClaimProcedure[]|undefined;
  /**
   * Typically this field would be 1..1 where this party is responsible for the claim but not necessarily professionally responsible for the provision of the individual products and services listed below.
   */
  public provider: fhir.Reference|null;
  /**
   * The referral resource which lists the date, practitioner, reason and other supporting information.
   */
  public referral?: fhir.Reference|undefined;
  /**
   * For example,  for the original treatment and follow-up exams.
   */
  public related?: fhir.ClaimRelated[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  public status: ClaimStatusEnum|null;
  public _status?: fhir.FhirElement|undefined;
  /**
   * This may contain the local bill type codes, for example the US UB-04 bill type code or the CMS bill type.
   */
  public subType?: fhir.CodeableConcept|undefined;
  /**
   * Often there are multiple jurisdiction specific valuesets which are required.
   */
  public supportingInfo?: fhir.ClaimSupportingInfo[]|undefined;
  /**
   * The total value of the all the items in the claim.
   */
  public total?: fhir.Money|undefined;
  /**
   * The majority of jurisdictions use: oral, pharmacy, vision, professional and institutional, or variants on those terms, as the general styles of claims. The valueset is extensible to accommodate other jurisdictional requirements.
   */
  public type: fhir.CodeableConcept|null;
  /**
   * A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.
   */
  public use: ClaimUseEnum|null;
  public _use?: fhir.FhirElement|undefined;
  /**
   * Default constructor for Claim - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IClaim> = {}) {
    super(source);
    this.resourceType = 'Claim';
    if (source["accident"]) { this.accident = new fhir.ClaimAccident(source.accident!); }
    if (source["billablePeriod"]) { this.billablePeriod = new fhir.Period(source.billablePeriod!); }
    if (source["careTeam"]) { this.careTeam = source.careTeam.map((x:Partial<fhir.IClaimCareTeam>) => new fhir.ClaimCareTeam(x)); }
    this.created = null;
    if (source["created"]) { this.created = source.created; }
    if (this.created === undefined) { this.created = null }
    if (source["_created"]) { this._created = new fhir.FhirElement(source._created!); }
    if (source["diagnosis"]) { this.diagnosis = source.diagnosis.map((x:Partial<fhir.IClaimDiagnosis>) => new fhir.ClaimDiagnosis(x)); }
    if (source["enterer"]) { this.enterer = new fhir.Reference(source.enterer!); }
    if (source["facility"]) { this.facility = new fhir.Reference(source.facility!); }
    if (source["fundsReserve"]) { this.fundsReserve = new fhir.CodeableConcept(source.fundsReserve!); }
    if (source["identifier"]) { this.identifier = source.identifier.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    this.insurance = null;
    if (source["insurance"]) { this.insurance = source.insurance.map((x:Partial<fhir.IClaimInsurance>) => new fhir.ClaimInsurance(x)); }
    if (this.insurance === undefined) { this.insurance = null }
    if (source["insurer"]) { this.insurer = new fhir.Reference(source.insurer!); }
    if (source["item"]) { this.item = source.item.map((x:Partial<fhir.IClaimItem>) => new fhir.ClaimItem(x)); }
    if (source["originalPrescription"]) { this.originalPrescription = new fhir.Reference(source.originalPrescription!); }
    this.patient = null;
    if (source["patient"]) { this.patient = new fhir.Reference(source.patient!); }
    if (this.patient === undefined) { this.patient = null }
    if (source["payee"]) { this.payee = new fhir.ClaimPayee(source.payee!); }
    if (source["prescription"]) { this.prescription = new fhir.Reference(source.prescription!); }
    this.priority = null;
    if (source["priority"]) { this.priority = new fhir.CodeableConcept(source.priority!); }
    if (this.priority === undefined) { this.priority = null }
    if (source["procedure"]) { this.procedure = source.procedure.map((x:Partial<fhir.IClaimProcedure>) => new fhir.ClaimProcedure(x)); }
    this.provider = null;
    if (source["provider"]) { this.provider = new fhir.Reference(source.provider!); }
    if (this.provider === undefined) { this.provider = null }
    if (source["referral"]) { this.referral = new fhir.Reference(source.referral!); }
    if (source["related"]) { this.related = source.related.map((x:Partial<fhir.IClaimRelated>) => new fhir.ClaimRelated(x)); }
    this.status = null;
    if (source["status"]) { this.status = source.status; }
    if (this.status === undefined) { this.status = null }
    if (source["_status"]) { this._status = new fhir.FhirElement(source._status!); }
    if (source["subType"]) { this.subType = new fhir.CodeableConcept(source.subType!); }
    if (source["supportingInfo"]) { this.supportingInfo = source.supportingInfo.map((x:Partial<fhir.IClaimSupportingInfo>) => new fhir.ClaimSupportingInfo(x)); }
    if (source["total"]) { this.total = new fhir.Money(source.total!); }
    this.type = null;
    if (source["type"]) { this.type = new fhir.CodeableConcept(source.type!); }
    if (this.type === undefined) { this.type = null }
    this.use = null;
    if (source["use"]) { this.use = source.use; }
    if (this.use === undefined) { this.use = null }
    if (source["_use"]) { this._use = new fhir.FhirElement(source._use!); }
  }
  /**
   * Check if the current Claim contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["created"] === undefined) { missingElements.push("created"); }
    if ((!this["insurance"]) || (this["insurance"].length === 0)) { missingElements.push("insurance"); }
    if (this["patient"] === undefined) { missingElements.push("patient"); }
    if (this["priority"] === undefined) { missingElements.push("priority"); }
    if (this["provider"] === undefined) { missingElements.push("provider"); }
    if (this["status"] === undefined) { missingElements.push("status"); }
    if (this["type"] === undefined) { missingElements.push("type"); }
    if (this["use"] === undefined) { missingElements.push("use"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a Claim from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IClaim):Claim {
    var dest:Claim = new Claim(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `Claim is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the Claim.status field
 */
export enum ClaimStatusEnum {
  ACTIVE = "active",
  CANCELLED = "cancelled",
  DRAFT = "draft",
  ENTERED_IN_ERROR = "entered-in-error",
}
/**
 * Code Values for the Claim.use field
 */
export enum ClaimUseEnum {
  CLAIM = "claim",
  PREAUTHORIZATION = "preauthorization",
  PREDETERMINATION = "predetermination",
}
