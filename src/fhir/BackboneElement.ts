// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
  // Restricted to: Patient|Encounter|Observation
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Base definition for all elements that are defined inside a resource - but not those in a data type.
 */
export interface IBackboneElement extends fhir.IFhirElement {
  /**
   * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
   */
  modifierExtension?: fhir.IExtension[]|undefined;
}
/**
 * Base definition for all elements that are defined inside a resource - but not those in a data type.
 */
export class BackboneElement extends fhir.FhirElement implements fhir.IBackboneElement {
  /**
   * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
   */
  public modifierExtension?: fhir.Extension[]|undefined;
  /**
   * Default constructor for BackboneElement - initializes required elements to null.
   */
  constructor() {
    super();
  }
  /**
   * Factory function to create a BackboneElement from an object that MAY NOT contain all required elements.
   */
  static override FactoryCreate(source:Partial<fhir.IBackboneElement>):BackboneElement {
    var dest:Partial<BackboneElement> = super.FactoryCreate(source) as Partial<BackboneElement>;
    if (source["modifierExtension"] !== undefined) { dest.modifierExtension = source.modifierExtension.map((x:Partial<fhir.IExtension>) => fhir.Extension.FactoryCreate(x)); }
    return dest as BackboneElement;
  }
  /**
   * Check if the current BackboneElement contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a BackboneElement from an object that MUST contain all required elements.
   */
  static override FactoryCreateStrict(source:fhir.IBackboneElement):BackboneElement {
    var dest:BackboneElement = this.FactoryCreate(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `BackboneElement is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
}
