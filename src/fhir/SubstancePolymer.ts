// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Todo.
 */
export type ISubstancePolymerMonomerSetStartingMaterial = fhir.IBackboneElement & {
  /**
   * Todo.
   */
  amount?: fhir.ISubstanceAmount|undefined;
  /**
   * Todo.
   */
  isDefining?: boolean|undefined;
  _isDefining?: fhir.IFhirElement|undefined;
  /**
   * Todo.
   */
  material?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  type?: fhir.ICodeableConcept|undefined;
}
/**
 * Todo.
 */
export type ISubstancePolymerMonomerSet = fhir.IBackboneElement & {
  /**
   * Todo.
   */
  ratioType?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  startingMaterial?: fhir.ISubstancePolymerMonomerSetStartingMaterial[]|undefined;
}
/**
 * Todo.
 */
export type ISubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation = fhir.IBackboneElement & {
  /**
   * Todo.
   */
  amount?: fhir.ISubstanceAmount|undefined;
  /**
   * Todo.
   */
  degree?: fhir.ICodeableConcept|undefined;
}
/**
 * Todo.
 */
export type ISubstancePolymerRepeatRepeatUnitStructuralRepresentation = fhir.IBackboneElement & {
  /**
   * Todo.
   */
  attachment?: fhir.IAttachment|undefined;
  /**
   * Todo.
   */
  representation?: string|undefined;
  _representation?: fhir.IFhirElement|undefined;
  /**
   * Todo.
   */
  type?: fhir.ICodeableConcept|undefined;
}
/**
 * Todo.
 */
export type ISubstancePolymerRepeatRepeatUnit = fhir.IBackboneElement & {
  /**
   * Todo.
   */
  amount?: fhir.ISubstanceAmount|undefined;
  /**
   * Todo.
   */
  degreeOfPolymerisation?: fhir.ISubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation[]|undefined;
  /**
   * Todo.
   */
  orientationOfPolymerisation?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  repeatUnit?: string|undefined;
  _repeatUnit?: fhir.IFhirElement|undefined;
  /**
   * Todo.
   */
  structuralRepresentation?: fhir.ISubstancePolymerRepeatRepeatUnitStructuralRepresentation[]|undefined;
}
/**
 * Todo.
 */
export type ISubstancePolymerRepeat = fhir.IBackboneElement & {
  /**
   * Todo.
   */
  averageMolecularFormula?: string|undefined;
  _averageMolecularFormula?: fhir.IFhirElement|undefined;
  /**
   * Todo.
   */
  numberOfUnits?: number|undefined;
  _numberOfUnits?: fhir.IFhirElement|undefined;
  /**
   * Todo.
   */
  repeatUnit?: fhir.ISubstancePolymerRepeatRepeatUnit[]|undefined;
  /**
   * Todo.
   */
  repeatUnitAmountType?: fhir.ICodeableConcept|undefined;
}
/**
 * Todo.
 */
export type ISubstancePolymer = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "SubstancePolymer";
  /**
   * Todo.
   */
  class?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  copolymerConnectivity?: fhir.ICodeableConcept[]|undefined;
  /**
   * Todo.
   */
  geometry?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  modification?: string[]|undefined;
  _modification?: fhir.IFhirElement[]|undefined;
  /**
   * Todo.
   */
  monomerSet?: fhir.ISubstancePolymerMonomerSet[]|undefined;
  /**
   * Todo.
   */
  repeat?: fhir.ISubstancePolymerRepeat[]|undefined;
}
/**
 * Todo.
 */
export class SubstancePolymerMonomerSetStartingMaterial extends fhir.BackboneElement implements fhir.ISubstancePolymerMonomerSetStartingMaterial {
  /**
   * Todo.
   */
  public amount?: fhir.SubstanceAmount|undefined;
  /**
   * Todo.
   */
  public isDefining?: boolean|undefined;
  public _isDefining?: fhir.FhirElement|undefined;
  /**
   * Todo.
   */
  public material?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for SubstancePolymerMonomerSetStartingMaterial - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.ISubstancePolymerMonomerSetStartingMaterial> = {}) {
    super(source);
    if (source["amount"]) { this.amount = new fhir.SubstanceAmount(source.amount!); }
    if (source["isDefining"]) { this.isDefining = source.isDefining; }
    if (source["_isDefining"]) { this._isDefining = new fhir.FhirElement(source._isDefining!); }
    if (source["material"]) { this.material = new fhir.CodeableConcept(source.material!); }
    if (source["type"]) { this.type = new fhir.CodeableConcept(source.type!); }
  }
  /**
   * Check if the current SubstancePolymerMonomerSetStartingMaterial contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a SubstancePolymerMonomerSetStartingMaterial from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.ISubstancePolymerMonomerSetStartingMaterial):SubstancePolymerMonomerSetStartingMaterial {
    var dest:SubstancePolymerMonomerSetStartingMaterial = new SubstancePolymerMonomerSetStartingMaterial(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `SubstancePolymerMonomerSetStartingMaterial is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Todo.
 */
export class SubstancePolymerMonomerSet extends fhir.BackboneElement implements fhir.ISubstancePolymerMonomerSet {
  /**
   * Todo.
   */
  public ratioType?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public startingMaterial?: fhir.SubstancePolymerMonomerSetStartingMaterial[]|undefined;
  /**
   * Default constructor for SubstancePolymerMonomerSet - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.ISubstancePolymerMonomerSet> = {}) {
    super(source);
    if (source["ratioType"]) { this.ratioType = new fhir.CodeableConcept(source.ratioType!); }
    if (source["startingMaterial"]) { this.startingMaterial = source.startingMaterial.map((x:Partial<fhir.ISubstancePolymerMonomerSetStartingMaterial>) => new fhir.SubstancePolymerMonomerSetStartingMaterial(x)); }
  }
  /**
   * Check if the current SubstancePolymerMonomerSet contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a SubstancePolymerMonomerSet from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.ISubstancePolymerMonomerSet):SubstancePolymerMonomerSet {
    var dest:SubstancePolymerMonomerSet = new SubstancePolymerMonomerSet(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `SubstancePolymerMonomerSet is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Todo.
 */
export class SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation extends fhir.BackboneElement implements fhir.ISubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation {
  /**
   * Todo.
   */
  public amount?: fhir.SubstanceAmount|undefined;
  /**
   * Todo.
   */
  public degree?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.ISubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation> = {}) {
    super(source);
    if (source["amount"]) { this.amount = new fhir.SubstanceAmount(source.amount!); }
    if (source["degree"]) { this.degree = new fhir.CodeableConcept(source.degree!); }
  }
  /**
   * Check if the current SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.ISubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation):SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation {
    var dest:SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation = new SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Todo.
 */
export class SubstancePolymerRepeatRepeatUnitStructuralRepresentation extends fhir.BackboneElement implements fhir.ISubstancePolymerRepeatRepeatUnitStructuralRepresentation {
  /**
   * Todo.
   */
  public attachment?: fhir.Attachment|undefined;
  /**
   * Todo.
   */
  public representation?: string|undefined;
  public _representation?: fhir.FhirElement|undefined;
  /**
   * Todo.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for SubstancePolymerRepeatRepeatUnitStructuralRepresentation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.ISubstancePolymerRepeatRepeatUnitStructuralRepresentation> = {}) {
    super(source);
    if (source["attachment"]) { this.attachment = new fhir.Attachment(source.attachment!); }
    if (source["representation"]) { this.representation = source.representation; }
    if (source["_representation"]) { this._representation = new fhir.FhirElement(source._representation!); }
    if (source["type"]) { this.type = new fhir.CodeableConcept(source.type!); }
  }
  /**
   * Check if the current SubstancePolymerRepeatRepeatUnitStructuralRepresentation contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a SubstancePolymerRepeatRepeatUnitStructuralRepresentation from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.ISubstancePolymerRepeatRepeatUnitStructuralRepresentation):SubstancePolymerRepeatRepeatUnitStructuralRepresentation {
    var dest:SubstancePolymerRepeatRepeatUnitStructuralRepresentation = new SubstancePolymerRepeatRepeatUnitStructuralRepresentation(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `SubstancePolymerRepeatRepeatUnitStructuralRepresentation is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Todo.
 */
export class SubstancePolymerRepeatRepeatUnit extends fhir.BackboneElement implements fhir.ISubstancePolymerRepeatRepeatUnit {
  /**
   * Todo.
   */
  public amount?: fhir.SubstanceAmount|undefined;
  /**
   * Todo.
   */
  public degreeOfPolymerisation?: fhir.SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation[]|undefined;
  /**
   * Todo.
   */
  public orientationOfPolymerisation?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public repeatUnit?: string|undefined;
  public _repeatUnit?: fhir.FhirElement|undefined;
  /**
   * Todo.
   */
  public structuralRepresentation?: fhir.SubstancePolymerRepeatRepeatUnitStructuralRepresentation[]|undefined;
  /**
   * Default constructor for SubstancePolymerRepeatRepeatUnit - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.ISubstancePolymerRepeatRepeatUnit> = {}) {
    super(source);
    if (source["amount"]) { this.amount = new fhir.SubstanceAmount(source.amount!); }
    if (source["degreeOfPolymerisation"]) { this.degreeOfPolymerisation = source.degreeOfPolymerisation.map((x:Partial<fhir.ISubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation>) => new fhir.SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(x)); }
    if (source["orientationOfPolymerisation"]) { this.orientationOfPolymerisation = new fhir.CodeableConcept(source.orientationOfPolymerisation!); }
    if (source["repeatUnit"]) { this.repeatUnit = source.repeatUnit; }
    if (source["_repeatUnit"]) { this._repeatUnit = new fhir.FhirElement(source._repeatUnit!); }
    if (source["structuralRepresentation"]) { this.structuralRepresentation = source.structuralRepresentation.map((x:Partial<fhir.ISubstancePolymerRepeatRepeatUnitStructuralRepresentation>) => new fhir.SubstancePolymerRepeatRepeatUnitStructuralRepresentation(x)); }
  }
  /**
   * Check if the current SubstancePolymerRepeatRepeatUnit contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a SubstancePolymerRepeatRepeatUnit from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.ISubstancePolymerRepeatRepeatUnit):SubstancePolymerRepeatRepeatUnit {
    var dest:SubstancePolymerRepeatRepeatUnit = new SubstancePolymerRepeatRepeatUnit(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `SubstancePolymerRepeatRepeatUnit is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Todo.
 */
export class SubstancePolymerRepeat extends fhir.BackboneElement implements fhir.ISubstancePolymerRepeat {
  /**
   * Todo.
   */
  public averageMolecularFormula?: string|undefined;
  public _averageMolecularFormula?: fhir.FhirElement|undefined;
  /**
   * Todo.
   */
  public numberOfUnits?: number|undefined;
  public _numberOfUnits?: fhir.FhirElement|undefined;
  /**
   * Todo.
   */
  public repeatUnit?: fhir.SubstancePolymerRepeatRepeatUnit[]|undefined;
  /**
   * Todo.
   */
  public repeatUnitAmountType?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for SubstancePolymerRepeat - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.ISubstancePolymerRepeat> = {}) {
    super(source);
    if (source["averageMolecularFormula"]) { this.averageMolecularFormula = source.averageMolecularFormula; }
    if (source["_averageMolecularFormula"]) { this._averageMolecularFormula = new fhir.FhirElement(source._averageMolecularFormula!); }
    if (source["numberOfUnits"]) { this.numberOfUnits = source.numberOfUnits; }
    if (source["_numberOfUnits"]) { this._numberOfUnits = new fhir.FhirElement(source._numberOfUnits!); }
    if (source["repeatUnit"]) { this.repeatUnit = source.repeatUnit.map((x:Partial<fhir.ISubstancePolymerRepeatRepeatUnit>) => new fhir.SubstancePolymerRepeatRepeatUnit(x)); }
    if (source["repeatUnitAmountType"]) { this.repeatUnitAmountType = new fhir.CodeableConcept(source.repeatUnitAmountType!); }
  }
  /**
   * Check if the current SubstancePolymerRepeat contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a SubstancePolymerRepeat from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.ISubstancePolymerRepeat):SubstancePolymerRepeat {
    var dest:SubstancePolymerRepeat = new SubstancePolymerRepeat(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `SubstancePolymerRepeat is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Todo.
 */
export class SubstancePolymer extends fhir.DomainResource implements fhir.ISubstancePolymer {
  /**
   * Resource Type Name
   */
  public override resourceType: "SubstancePolymer";
  /**
   * Todo.
   */
  public class?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public copolymerConnectivity?: fhir.CodeableConcept[]|undefined;
  /**
   * Todo.
   */
  public geometry?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public modification?: string[]|undefined;
  public _modification?: fhir.FhirElement[]|undefined;
  /**
   * Todo.
   */
  public monomerSet?: fhir.SubstancePolymerMonomerSet[]|undefined;
  /**
   * Todo.
   */
  public repeat?: fhir.SubstancePolymerRepeat[]|undefined;
  /**
   * Default constructor for SubstancePolymer - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.ISubstancePolymer> = {}) {
    super(source);
    this.resourceType = 'SubstancePolymer';
    if (source["class"]) { this.class = new fhir.CodeableConcept(source.class!); }
    if (source["copolymerConnectivity"]) { this.copolymerConnectivity = source.copolymerConnectivity.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["geometry"]) { this.geometry = new fhir.CodeableConcept(source.geometry!); }
    if (source["modification"]) { this.modification = source.modification.map((x) => (x)); }
    if (source["_modification"]) { this._modification = source._modification.map((x:Partial<fhir.IFhirElement>) => new fhir.FhirElement(x)); }
    if (source["monomerSet"]) { this.monomerSet = source.monomerSet.map((x:Partial<fhir.ISubstancePolymerMonomerSet>) => new fhir.SubstancePolymerMonomerSet(x)); }
    if (source["repeat"]) { this.repeat = source.repeat.map((x:Partial<fhir.ISubstancePolymerRepeat>) => new fhir.SubstancePolymerRepeat(x)); }
  }
  /**
   * Check if the current SubstancePolymer contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a SubstancePolymer from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.ISubstancePolymer):SubstancePolymer {
    var dest:SubstancePolymer = new SubstancePolymer(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `SubstancePolymer is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
