// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SubstancePolymer

import * as fhir from '../fhir.js'


/**
 * Todo.
 */
export type ISubstancePolymerMonomerSetStartingMaterial = fhir.IBackboneElement & { 
  /**
   * Todo.
   */
  material?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  type?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  isDefining?: boolean|undefined;
  /**
   * Extended properties for primitive element: SubstancePolymer.monomerSet.startingMaterial.isDefining
   */
  _isDefining?: fhir.IFhirElement|undefined;
  /**
   * Todo.
   */
  amount?: fhir.ISubstanceAmount|undefined;
}

/**
 * Todo.
 */
export type ISubstancePolymerMonomerSet = fhir.IBackboneElement & { 
  /**
   * Todo.
   */
  ratioType?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  startingMaterial?: fhir.ISubstancePolymerMonomerSetStartingMaterial[]|undefined;
}

/**
 * Todo.
 */
export type ISubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation = fhir.IBackboneElement & { 
  /**
   * Todo.
   */
  degree?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  amount?: fhir.ISubstanceAmount|undefined;
}

/**
 * Todo.
 */
export type ISubstancePolymerRepeatRepeatUnitStructuralRepresentation = fhir.IBackboneElement & { 
  /**
   * Todo.
   */
  type?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  representation?: string|undefined;
  /**
   * Extended properties for primitive element: SubstancePolymer.repeat.repeatUnit.structuralRepresentation.representation
   */
  _representation?: fhir.IFhirElement|undefined;
  /**
   * Todo.
   */
  attachment?: fhir.IAttachment|undefined;
}

/**
 * Todo.
 */
export type ISubstancePolymerRepeatRepeatUnit = fhir.IBackboneElement & { 
  /**
   * Todo.
   */
  orientationOfPolymerisation?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  repeatUnit?: string|undefined;
  /**
   * Extended properties for primitive element: SubstancePolymer.repeat.repeatUnit.repeatUnit
   */
  _repeatUnit?: fhir.IFhirElement|undefined;
  /**
   * Todo.
   */
  amount?: fhir.ISubstanceAmount|undefined;
  /**
   * Todo.
   */
  degreeOfPolymerisation?: fhir.ISubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation[]|undefined;
  /**
   * Todo.
   */
  structuralRepresentation?: fhir.ISubstancePolymerRepeatRepeatUnitStructuralRepresentation[]|undefined;
}

/**
 * Todo.
 */
export type ISubstancePolymerRepeat = fhir.IBackboneElement & { 
  /**
   * Todo.
   */
  numberOfUnits?: number|undefined;
  /**
   * Extended properties for primitive element: SubstancePolymer.repeat.numberOfUnits
   */
  _numberOfUnits?: fhir.IFhirElement|undefined;
  /**
   * Todo.
   */
  averageMolecularFormula?: string|undefined;
  /**
   * Extended properties for primitive element: SubstancePolymer.repeat.averageMolecularFormula
   */
  _averageMolecularFormula?: fhir.IFhirElement|undefined;
  /**
   * Todo.
   */
  repeatUnitAmountType?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  repeatUnit?: fhir.ISubstancePolymerRepeatRepeatUnit[]|undefined;
}

/**
 * Todo.
 */
export type ISubstancePolymer = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "SubstancePolymer";
  /**
   * Todo.
   */
  class?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  geometry?: fhir.ICodeableConcept|undefined;
  /**
   * Todo.
   */
  copolymerConnectivity?: fhir.ICodeableConcept[]|undefined;
  /**
   * Todo.
   */
  modification?: string[]|undefined;
  /**
   * Extended properties for primitive element: SubstancePolymer.modification
   */
  _modification?: fhir.IFhirElement[]|undefined;
  /**
   * Todo.
   */
  monomerSet?: fhir.ISubstancePolymerMonomerSet[]|undefined;
  /**
   * Todo.
   */
  repeat?: fhir.ISubstancePolymerRepeat[]|undefined;
}

/**
 * Todo.
 */
export class SubstancePolymerMonomerSetStartingMaterial extends fhir.BackboneElement implements ISubstancePolymerMonomerSetStartingMaterial {
  /**
   * Todo.
   */
  public material?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public isDefining?: boolean|undefined;
  /**
   * Extended properties for primitive element: SubstancePolymer.monomerSet.startingMaterial.isDefining
   */
  public _isDefining?: fhir.FhirElement|undefined;
  /**
   * Todo.
   */
  public amount?: fhir.SubstanceAmount|undefined;
  /**
   * Default constructor for SubstancePolymerMonomerSetStartingMaterial - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISubstancePolymerMonomerSetStartingMaterial> = { }) {
    super(source);
    if (source['material']) { this.material = new fhir.CodeableConcept(source.material!); }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    if (source['isDefining']) { this.isDefining = source.isDefining; }
    if (source['_isDefining']) { this._isDefining = new fhir.FhirElement(source._isDefining!); }
    if (source['amount']) { this.amount = new fhir.SubstanceAmount(source.amount!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["material"]) { results.push(...this.material.doModelValidation()); }
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (this["_isDefining"]) { results.push(...this._isDefining.doModelValidation()); }
    if (this["amount"]) { results.push(...this.amount.doModelValidation()); }
    return results;
  }
}

/**
 * Todo.
 */
export class SubstancePolymerMonomerSet extends fhir.BackboneElement implements ISubstancePolymerMonomerSet {
  /**
   * Todo.
   */
  public ratioType?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public startingMaterial?: fhir.SubstancePolymerMonomerSetStartingMaterial[]|undefined;
  /**
   * Default constructor for SubstancePolymerMonomerSet - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISubstancePolymerMonomerSet> = { }) {
    super(source);
    if (source['ratioType']) { this.ratioType = new fhir.CodeableConcept(source.ratioType!); }
    if (source['startingMaterial']) { this.startingMaterial = source.startingMaterial.map((x) => new fhir.SubstancePolymerMonomerSetStartingMaterial(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["ratioType"]) { results.push(...this.ratioType.doModelValidation()); }
    if (this["startingMaterial"]) { this.startingMaterial.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * Todo.
 */
export class SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation extends fhir.BackboneElement implements ISubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation {
  /**
   * Todo.
   */
  public degree?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public amount?: fhir.SubstanceAmount|undefined;
  /**
   * Default constructor for SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation> = { }) {
    super(source);
    if (source['degree']) { this.degree = new fhir.CodeableConcept(source.degree!); }
    if (source['amount']) { this.amount = new fhir.SubstanceAmount(source.amount!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["degree"]) { results.push(...this.degree.doModelValidation()); }
    if (this["amount"]) { results.push(...this.amount.doModelValidation()); }
    return results;
  }
}

/**
 * Todo.
 */
export class SubstancePolymerRepeatRepeatUnitStructuralRepresentation extends fhir.BackboneElement implements ISubstancePolymerRepeatRepeatUnitStructuralRepresentation {
  /**
   * Todo.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public representation?: string|undefined;
  /**
   * Extended properties for primitive element: SubstancePolymer.repeat.repeatUnit.structuralRepresentation.representation
   */
  public _representation?: fhir.FhirElement|undefined;
  /**
   * Todo.
   */
  public attachment?: fhir.Attachment|undefined;
  /**
   * Default constructor for SubstancePolymerRepeatRepeatUnitStructuralRepresentation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISubstancePolymerRepeatRepeatUnitStructuralRepresentation> = { }) {
    super(source);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    if (source['representation']) { this.representation = source.representation; }
    if (source['_representation']) { this._representation = new fhir.FhirElement(source._representation!); }
    if (source['attachment']) { this.attachment = new fhir.Attachment(source.attachment!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (this["_representation"]) { results.push(...this._representation.doModelValidation()); }
    if (this["attachment"]) { results.push(...this.attachment.doModelValidation()); }
    return results;
  }
}

/**
 * Todo.
 */
export class SubstancePolymerRepeatRepeatUnit extends fhir.BackboneElement implements ISubstancePolymerRepeatRepeatUnit {
  /**
   * Todo.
   */
  public orientationOfPolymerisation?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public repeatUnit?: string|undefined;
  /**
   * Extended properties for primitive element: SubstancePolymer.repeat.repeatUnit.repeatUnit
   */
  public _repeatUnit?: fhir.FhirElement|undefined;
  /**
   * Todo.
   */
  public amount?: fhir.SubstanceAmount|undefined;
  /**
   * Todo.
   */
  public degreeOfPolymerisation?: fhir.SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation[]|undefined;
  /**
   * Todo.
   */
  public structuralRepresentation?: fhir.SubstancePolymerRepeatRepeatUnitStructuralRepresentation[]|undefined;
  /**
   * Default constructor for SubstancePolymerRepeatRepeatUnit - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISubstancePolymerRepeatRepeatUnit> = { }) {
    super(source);
    if (source['orientationOfPolymerisation']) { this.orientationOfPolymerisation = new fhir.CodeableConcept(source.orientationOfPolymerisation!); }
    if (source['repeatUnit']) { this.repeatUnit = source.repeatUnit; }
    if (source['_repeatUnit']) { this._repeatUnit = new fhir.FhirElement(source._repeatUnit!); }
    if (source['amount']) { this.amount = new fhir.SubstanceAmount(source.amount!); }
    if (source['degreeOfPolymerisation']) { this.degreeOfPolymerisation = source.degreeOfPolymerisation.map((x) => new fhir.SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(x)); }
    if (source['structuralRepresentation']) { this.structuralRepresentation = source.structuralRepresentation.map((x) => new fhir.SubstancePolymerRepeatRepeatUnitStructuralRepresentation(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["orientationOfPolymerisation"]) { results.push(...this.orientationOfPolymerisation.doModelValidation()); }
    if (this["_repeatUnit"]) { results.push(...this._repeatUnit.doModelValidation()); }
    if (this["amount"]) { results.push(...this.amount.doModelValidation()); }
    if (this["degreeOfPolymerisation"]) { this.degreeOfPolymerisation.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["structuralRepresentation"]) { this.structuralRepresentation.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * Todo.
 */
export class SubstancePolymerRepeat extends fhir.BackboneElement implements ISubstancePolymerRepeat {
  /**
   * Todo.
   */
  public numberOfUnits?: number|undefined;
  /**
   * Extended properties for primitive element: SubstancePolymer.repeat.numberOfUnits
   */
  public _numberOfUnits?: fhir.FhirElement|undefined;
  /**
   * Todo.
   */
  public averageMolecularFormula?: string|undefined;
  /**
   * Extended properties for primitive element: SubstancePolymer.repeat.averageMolecularFormula
   */
  public _averageMolecularFormula?: fhir.FhirElement|undefined;
  /**
   * Todo.
   */
  public repeatUnitAmountType?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public repeatUnit?: fhir.SubstancePolymerRepeatRepeatUnit[]|undefined;
  /**
   * Default constructor for SubstancePolymerRepeat - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISubstancePolymerRepeat> = { }) {
    super(source);
    if (source['numberOfUnits']) { this.numberOfUnits = source.numberOfUnits; }
    if (source['_numberOfUnits']) { this._numberOfUnits = new fhir.FhirElement(source._numberOfUnits!); }
    if (source['averageMolecularFormula']) { this.averageMolecularFormula = source.averageMolecularFormula; }
    if (source['_averageMolecularFormula']) { this._averageMolecularFormula = new fhir.FhirElement(source._averageMolecularFormula!); }
    if (source['repeatUnitAmountType']) { this.repeatUnitAmountType = new fhir.CodeableConcept(source.repeatUnitAmountType!); }
    if (source['repeatUnit']) { this.repeatUnit = source.repeatUnit.map((x) => new fhir.SubstancePolymerRepeatRepeatUnit(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["_numberOfUnits"]) { results.push(...this._numberOfUnits.doModelValidation()); }
    if (this["_averageMolecularFormula"]) { results.push(...this._averageMolecularFormula.doModelValidation()); }
    if (this["repeatUnitAmountType"]) { results.push(...this.repeatUnitAmountType.doModelValidation()); }
    if (this["repeatUnit"]) { this.repeatUnit.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * Todo.
 */
export class SubstancePolymer extends fhir.DomainResource implements ISubstancePolymer {
  /**
   * Resource Type Name
   */
  public resourceType: "SubstancePolymer";
  /**
   * Todo.
   */
  public class?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public geometry?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public copolymerConnectivity?: fhir.CodeableConcept[]|undefined;
  /**
   * Todo.
   */
  public modification?: string[]|undefined;
  /**
   * Extended properties for primitive element: SubstancePolymer.modification
   */
  public _modification?: fhir.FhirElement[]|undefined;
  /**
   * Todo.
   */
  public monomerSet?: fhir.SubstancePolymerMonomerSet[]|undefined;
  /**
   * Todo.
   */
  public repeat?: fhir.SubstancePolymerRepeat[]|undefined;
  /**
   * Default constructor for SubstancePolymer - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISubstancePolymer> = { }) {
    super(source);
    this.resourceType = 'SubstancePolymer';
    if (source['class']) { this.class = new fhir.CodeableConcept(source.class!); }
    if (source['geometry']) { this.geometry = new fhir.CodeableConcept(source.geometry!); }
    if (source['copolymerConnectivity']) { this.copolymerConnectivity = source.copolymerConnectivity.map((x) => new fhir.CodeableConcept(x)); }
    if (source['modification']) { this.modification = source.modification.map((x) => (x)); }
    if (source['_modification']) { this._modification = source._modification.map((x) => new fhir.FhirElement(x)); }
    if (source['monomerSet']) { this.monomerSet = source.monomerSet.map((x) => new fhir.SubstancePolymerMonomerSet(x)); }
    if (source['repeat']) { this.repeat = source.repeat.map((x) => new fhir.SubstancePolymerRepeat(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: SubstancePolymer.resourceType']); }
    if (this["class"]) { results.push(...this.class.doModelValidation()); }
    if (this["geometry"]) { results.push(...this.geometry.doModelValidation()); }
    if (this["copolymerConnectivity"]) { this.copolymerConnectivity.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_modification"]) { this._modification.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["monomerSet"]) { this.monomerSet.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["repeat"]) { this.repeat.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}
