// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SubstancePolymer

import * as fhir from '../fhir.js';

import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Valid arguments for the SubstancePolymerMonomerSetStartingMaterial type.
 */
export interface SubstancePolymerMonomerSetStartingMaterialArgs extends fhir.BackboneElementArgs {
  /**
   * Todo.
   */
  material?: fhir.CodeableConceptArgs|undefined;
  /**
   * Todo.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * Todo.
   */
  isDefining?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Todo.
   */
  amount?: fhir.SubstanceAmountArgs|undefined;
}

/**
 * Todo.
 */
export class SubstancePolymerMonomerSetStartingMaterial extends fhir.BackboneElement {
  readonly __dataType:string = 'SubstancePolymerMonomerSetStartingMaterial';
  /**
   * Todo.
   */
  public material?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public isDefining?: fhir.FhirBoolean|undefined;
  /**
   * Todo.
   */
  public amount?: fhir.SubstanceAmount|undefined;
  /**
   * Default constructor for SubstancePolymerMonomerSetStartingMaterial - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<SubstancePolymerMonomerSetStartingMaterialArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['material']) { this.material = new fhir.CodeableConcept(source.material); }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['isDefining']) { this.isDefining = new fhir.FhirBoolean({value: source.isDefining}); }
    if (source['amount']) { this.amount = new fhir.SubstanceAmount(source.amount); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["material"]) { outcome.issue!.push(...this.material.doModelValidation().issue!); }
    if (this["type"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }
    if (this["isDefining"]) { outcome.issue!.push(...this.isDefining.doModelValidation().issue!); }
    if (this["amount"]) { outcome.issue!.push(...this.amount.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the SubstancePolymerMonomerSet type.
 */
export interface SubstancePolymerMonomerSetArgs extends fhir.BackboneElementArgs {
  /**
   * Todo.
   */
  ratioType?: fhir.CodeableConceptArgs|undefined;
  /**
   * Todo.
   */
  startingMaterial?: fhir.SubstancePolymerMonomerSetStartingMaterialArgs[]|undefined;
}

/**
 * Todo.
 */
export class SubstancePolymerMonomerSet extends fhir.BackboneElement {
  readonly __dataType:string = 'SubstancePolymerMonomerSet';
  /**
   * Todo.
   */
  public ratioType?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public startingMaterial?: fhir.SubstancePolymerMonomerSetStartingMaterial[]|undefined = [];
  /**
   * Default constructor for SubstancePolymerMonomerSet - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<SubstancePolymerMonomerSetArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['ratioType']) { this.ratioType = new fhir.CodeableConcept(source.ratioType); }
    if (source['startingMaterial']) { this.startingMaterial = source.startingMaterial.map((x) => new fhir.SubstancePolymerMonomerSetStartingMaterial(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["ratioType"]) { outcome.issue!.push(...this.ratioType.doModelValidation().issue!); }
    if (this["startingMaterial"]) { this.startingMaterial.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation type.
 */
export interface SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisationArgs extends fhir.BackboneElementArgs {
  /**
   * Todo.
   */
  degree?: fhir.CodeableConceptArgs|undefined;
  /**
   * Todo.
   */
  amount?: fhir.SubstanceAmountArgs|undefined;
}

/**
 * Todo.
 */
export class SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation extends fhir.BackboneElement {
  readonly __dataType:string = 'SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation';
  /**
   * Todo.
   */
  public degree?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public amount?: fhir.SubstanceAmount|undefined;
  /**
   * Default constructor for SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['degree']) { this.degree = new fhir.CodeableConcept(source.degree); }
    if (source['amount']) { this.amount = new fhir.SubstanceAmount(source.amount); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["degree"]) { outcome.issue!.push(...this.degree.doModelValidation().issue!); }
    if (this["amount"]) { outcome.issue!.push(...this.amount.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the SubstancePolymerRepeatRepeatUnitStructuralRepresentation type.
 */
export interface SubstancePolymerRepeatRepeatUnitStructuralRepresentationArgs extends fhir.BackboneElementArgs {
  /**
   * Todo.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * Todo.
   */
  representation?: fhir.FhirString|string|undefined;
  /**
   * Todo.
   */
  attachment?: fhir.AttachmentArgs|undefined;
}

/**
 * Todo.
 */
export class SubstancePolymerRepeatRepeatUnitStructuralRepresentation extends fhir.BackboneElement {
  readonly __dataType:string = 'SubstancePolymerRepeatRepeatUnitStructuralRepresentation';
  /**
   * Todo.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public representation?: fhir.FhirString|undefined;
  /**
   * Todo.
   */
  public attachment?: fhir.Attachment|undefined;
  /**
   * Default constructor for SubstancePolymerRepeatRepeatUnitStructuralRepresentation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<SubstancePolymerRepeatRepeatUnitStructuralRepresentationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['representation']) { this.representation = new fhir.FhirString({value: source.representation}); }
    if (source['attachment']) { this.attachment = new fhir.Attachment(source.attachment); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["type"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }
    if (this["representation"]) { outcome.issue!.push(...this.representation.doModelValidation().issue!); }
    if (this["attachment"]) { outcome.issue!.push(...this.attachment.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the SubstancePolymerRepeatRepeatUnit type.
 */
export interface SubstancePolymerRepeatRepeatUnitArgs extends fhir.BackboneElementArgs {
  /**
   * Todo.
   */
  orientationOfPolymerisation?: fhir.CodeableConceptArgs|undefined;
  /**
   * Todo.
   */
  repeatUnit?: fhir.FhirString|string|undefined;
  /**
   * Todo.
   */
  amount?: fhir.SubstanceAmountArgs|undefined;
  /**
   * Todo.
   */
  degreeOfPolymerisation?: fhir.SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisationArgs[]|undefined;
  /**
   * Todo.
   */
  structuralRepresentation?: fhir.SubstancePolymerRepeatRepeatUnitStructuralRepresentationArgs[]|undefined;
}

/**
 * Todo.
 */
export class SubstancePolymerRepeatRepeatUnit extends fhir.BackboneElement {
  readonly __dataType:string = 'SubstancePolymerRepeatRepeatUnit';
  /**
   * Todo.
   */
  public orientationOfPolymerisation?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public repeatUnit?: fhir.FhirString|undefined;
  /**
   * Todo.
   */
  public amount?: fhir.SubstanceAmount|undefined;
  /**
   * Todo.
   */
  public degreeOfPolymerisation?: fhir.SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation[]|undefined = [];
  /**
   * Todo.
   */
  public structuralRepresentation?: fhir.SubstancePolymerRepeatRepeatUnitStructuralRepresentation[]|undefined = [];
  /**
   * Default constructor for SubstancePolymerRepeatRepeatUnit - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<SubstancePolymerRepeatRepeatUnitArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['orientationOfPolymerisation']) { this.orientationOfPolymerisation = new fhir.CodeableConcept(source.orientationOfPolymerisation); }
    if (source['repeatUnit']) { this.repeatUnit = new fhir.FhirString({value: source.repeatUnit}); }
    if (source['amount']) { this.amount = new fhir.SubstanceAmount(source.amount); }
    if (source['degreeOfPolymerisation']) { this.degreeOfPolymerisation = source.degreeOfPolymerisation.map((x) => new fhir.SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(x)); }
    if (source['structuralRepresentation']) { this.structuralRepresentation = source.structuralRepresentation.map((x) => new fhir.SubstancePolymerRepeatRepeatUnitStructuralRepresentation(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["orientationOfPolymerisation"]) { outcome.issue!.push(...this.orientationOfPolymerisation.doModelValidation().issue!); }
    if (this["repeatUnit"]) { outcome.issue!.push(...this.repeatUnit.doModelValidation().issue!); }
    if (this["amount"]) { outcome.issue!.push(...this.amount.doModelValidation().issue!); }
    if (this["degreeOfPolymerisation"]) { this.degreeOfPolymerisation.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["structuralRepresentation"]) { this.structuralRepresentation.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the SubstancePolymerRepeat type.
 */
export interface SubstancePolymerRepeatArgs extends fhir.BackboneElementArgs {
  /**
   * Todo.
   */
  numberOfUnits?: fhir.FhirInteger|number|undefined;
  /**
   * Todo.
   */
  averageMolecularFormula?: fhir.FhirString|string|undefined;
  /**
   * Todo.
   */
  repeatUnitAmountType?: fhir.CodeableConceptArgs|undefined;
  /**
   * Todo.
   */
  repeatUnit?: fhir.SubstancePolymerRepeatRepeatUnitArgs[]|undefined;
}

/**
 * Todo.
 */
export class SubstancePolymerRepeat extends fhir.BackboneElement {
  readonly __dataType:string = 'SubstancePolymerRepeat';
  /**
   * Todo.
   */
  public numberOfUnits?: fhir.FhirInteger|undefined;
  /**
   * Todo.
   */
  public averageMolecularFormula?: fhir.FhirString|undefined;
  /**
   * Todo.
   */
  public repeatUnitAmountType?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public repeatUnit?: fhir.SubstancePolymerRepeatRepeatUnit[]|undefined = [];
  /**
   * Default constructor for SubstancePolymerRepeat - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<SubstancePolymerRepeatArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['numberOfUnits']) { this.numberOfUnits = new fhir.FhirInteger({value: source.numberOfUnits}); }
    if (source['averageMolecularFormula']) { this.averageMolecularFormula = new fhir.FhirString({value: source.averageMolecularFormula}); }
    if (source['repeatUnitAmountType']) { this.repeatUnitAmountType = new fhir.CodeableConcept(source.repeatUnitAmountType); }
    if (source['repeatUnit']) { this.repeatUnit = source.repeatUnit.map((x) => new fhir.SubstancePolymerRepeatRepeatUnit(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["numberOfUnits"]) { outcome.issue!.push(...this.numberOfUnits.doModelValidation().issue!); }
    if (this["averageMolecularFormula"]) { outcome.issue!.push(...this.averageMolecularFormula.doModelValidation().issue!); }
    if (this["repeatUnitAmountType"]) { outcome.issue!.push(...this.repeatUnitAmountType.doModelValidation().issue!); }
    if (this["repeatUnit"]) { this.repeatUnit.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the SubstancePolymer type.
 */
export interface SubstancePolymerArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "SubstancePolymer"|undefined;
  /**
   * Todo.
   */
  class?: fhir.CodeableConceptArgs|undefined;
  /**
   * Todo.
   */
  geometry?: fhir.CodeableConceptArgs|undefined;
  /**
   * Todo.
   */
  copolymerConnectivity?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * Todo.
   */
  modification?: fhir.FhirString[]|string[]|undefined;
  /**
   * Todo.
   */
  monomerSet?: fhir.SubstancePolymerMonomerSetArgs[]|undefined;
  /**
   * Todo.
   */
  repeat?: fhir.SubstancePolymerRepeatArgs[]|undefined;
}

/**
 * Todo.
 */
export class SubstancePolymer extends fhir.DomainResource {
  readonly __dataType:string = 'SubstancePolymer';
  /**
   * Resource Type Name
   */
  public resourceType: "SubstancePolymer";
  /**
   * Todo.
   */
  public class?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public geometry?: fhir.CodeableConcept|undefined;
  /**
   * Todo.
   */
  public copolymerConnectivity?: fhir.CodeableConcept[]|undefined = [];
  /**
   * Todo.
   */
  public modification?: fhir.FhirString[]|undefined = [];
  /**
   * Todo.
   */
  public monomerSet?: fhir.SubstancePolymerMonomerSet[]|undefined = [];
  /**
   * Todo.
   */
  public repeat?: fhir.SubstancePolymerRepeat[]|undefined = [];
  /**
   * Default constructor for SubstancePolymer - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<SubstancePolymerArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'SubstancePolymer';
    if (source['class']) { this.class = new fhir.CodeableConcept(source.class); }
    if (source['geometry']) { this.geometry = new fhir.CodeableConcept(source.geometry); }
    if (source['copolymerConnectivity']) { this.copolymerConnectivity = source.copolymerConnectivity.map((x) => new fhir.CodeableConcept(x)); }
    if (source['modification']) { this.modification = source.modification.map((x) => new fhir.FhirString({value: x})); }
    if (source['monomerSet']) { this.monomerSet = source.monomerSet.map((x) => new fhir.SubstancePolymerMonomerSet(x)); }
    if (source['repeat']) { this.repeat = source.repeat.map((x) => new fhir.SubstancePolymerRepeat(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['resourceType']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property resourceType:'SubstancePolymer' fhir: SubstancePolymer.resourceType:'SubstancePolymer'", }));
    }
    if (this["class"]) { outcome.issue!.push(...this.class.doModelValidation().issue!); }
    if (this["geometry"]) { outcome.issue!.push(...this.geometry.doModelValidation().issue!); }
    if (this["copolymerConnectivity"]) { this.copolymerConnectivity.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["modification"]) { this.modification.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["monomerSet"]) { this.monomerSet.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["repeat"]) { this.repeat.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
