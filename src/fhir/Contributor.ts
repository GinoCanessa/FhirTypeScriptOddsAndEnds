// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.
 */
export type IContributor = fhir.IFhirElement & {
  /**
   * Contact details to assist a user in finding and communicating with the contributor.
   */
  contact?: fhir.IContactDetail[]|undefined;
  /**
   * The name of the individual or organization responsible for the contribution.
   */
  name: string|null;
  _name?: fhir.IFhirElement|undefined;
  /**
   * The type of contributor.
   */
  type: ContributorTypeEnum|null;
  _type?: fhir.IFhirElement|undefined;
}
/**
 * A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.
 */
export class Contributor extends fhir.FhirElement implements fhir.IContributor {
  /**
   * Contact details to assist a user in finding and communicating with the contributor.
   */
  public contact?: fhir.ContactDetail[]|undefined;
  /**
   * The name of the individual or organization responsible for the contribution.
   */
  public name: string|null;
  public _name?: fhir.FhirElement|undefined;
  /**
   * The type of contributor.
   */
  public type: ContributorTypeEnum|null;
  public _type?: fhir.FhirElement|undefined;
  /**
   * Default constructor for Contributor - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IContributor> = {}) {
    super(source);
    if (source["contact"]) { this.contact = source.contact.map((x:Partial<fhir.IContactDetail>) => new fhir.ContactDetail(x)); }
    this.name = null;
    if (source["name"]) { this.name = source.name; }
    if (this.name === undefined) { this.name = null }
    if (source["_name"]) { this._name = new fhir.FhirElement(source._name!); }
    this.type = null;
    if (source["type"]) { this.type = source.type; }
    if (this.type === undefined) { this.type = null }
    if (source["_type"]) { this._type = new fhir.FhirElement(source._type!); }
  }
  /**
   * Check if the current Contributor contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["name"] === undefined) { missingElements.push("name"); }
    if (this["type"] === undefined) { missingElements.push("type"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a Contributor from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IContributor):Contributor {
    var dest:Contributor = new Contributor(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `Contributor is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the Contributor.type field
 */
export enum ContributorTypeEnum {
  AUTHOR = "author",
  EDITOR = "editor",
  REVIEWER = "reviewer",
  ENDORSER = "endorser",
}
