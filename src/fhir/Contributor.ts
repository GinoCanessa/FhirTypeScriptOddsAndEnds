// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Contributor

import * as fhir from '../fhir.js'

import { ContributorTypeValueSet, ContributorTypeValueSetType, ContributorTypeValueSetEnum } from '../fhirValueSets/ContributorTypeValueSet.js'

/**
 * A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.
 */
export type IContributor = fhir.IFhirElement & { 
  /**
   * The type of contributor.
   */
  type: ContributorTypeValueSetEnum|null;
  /**
   * Extended properties for primitive element: Contributor.type
   */
  _type?: fhir.IFhirElement|undefined;
  /**
   * The name of the individual or organization responsible for the contribution.
   */
  name: string|null;
  /**
   * Extended properties for primitive element: Contributor.name
   */
  _name?: fhir.IFhirElement|undefined;
  /**
   * Contact details to assist a user in finding and communicating with the contributor.
   */
  contact?: fhir.IContactDetail[]|undefined;
}

/**
 * A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.
 */
export class Contributor extends fhir.FhirElement implements IContributor {
  /**
   * The type of contributor.
   */
  public type: ContributorTypeValueSetEnum|null;
  /**
   * Extended properties for primitive element: Contributor.type
   */
  public _type?: fhir.FhirElement|undefined;
  /**
   * The name of the individual or organization responsible for the contribution.
   */
  public name: string|null;
  /**
   * Extended properties for primitive element: Contributor.name
   */
  public _name?: fhir.FhirElement|undefined;
  /**
   * Contact details to assist a user in finding and communicating with the contributor.
   */
  public contact?: fhir.ContactDetail[]|undefined;
  /**
   * Default constructor for Contributor - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IContributor> = { }) {
    super(source);
    if (source['type']) { this.type = source.type; }
    else { this.type = null; }
    if (source['_type']) { this._type = new fhir.FhirElement(source._type!); }
    if (source['name']) { this.name = source.name; }
    else { this.name = null; }
    if (source['_name']) { this._name = new fhir.FhirElement(source._name!); }
    if (source['contact']) { this.contact = source.contact.map((x) => new fhir.ContactDetail(x)); }
  }
  /**
   * Required-bound Value Set for type
   */
  public static typeRequiredValueSet():ContributorTypeValueSetType {
    return ContributorTypeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["type"]) { results.push(["type",'Missing required element: Contributor.type']); }
    if (this["_type"]) { results.push(...this._type.doModelValidation()); }
    if (!this["name"]) { results.push(["name",'Missing required element: Contributor.name']); }
    if (this["_name"]) { results.push(...this._name.doModelValidation()); }
    if (this["contact"]) { this.contact.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}
