// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
 */
export type IDeviceDefinitionUdiDeviceIdentifier = fhir.IBackboneElement & {
  /**
   * The identifier that is to be associated with every Device that references this DeviceDefintiion for the issuer and jurisdication porvided in the DeviceDefinition.udiDeviceIdentifier.
   */
  deviceIdentifier: string|null;
  _deviceIdentifier?: fhir.IFhirElement|undefined;
  /**
   * The organization that assigns the identifier algorithm.
   */
  issuer: string|null;
  _issuer?: fhir.IFhirElement|undefined;
  /**
   * The jurisdiction to which the deviceIdentifier applies.
   */
  jurisdiction: string|null;
  _jurisdiction?: fhir.IFhirElement|undefined;
}
/**
 * A name given to the device to identify it.
 */
export type IDeviceDefinitionDeviceName = fhir.IBackboneElement & {
  /**
   * The name of the device.
   */
  name: string|null;
  _name?: fhir.IFhirElement|undefined;
  /**
   * The type of deviceName.
   * UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName.
   */
  type: DeviceDefinitionDeviceNameTypeEnum|null;
  _type?: fhir.IFhirElement|undefined;
}
/**
 * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
 */
export type IDeviceDefinitionSpecialization = fhir.IBackboneElement & {
  /**
   * The standard that is used to operate and communicate.
   */
  systemType: string|null;
  _systemType?: fhir.IFhirElement|undefined;
  /**
   * The version of the standard that is used to operate and communicate.
   */
  version?: string|undefined;
  _version?: fhir.IFhirElement|undefined;
}
/**
 * Device capabilities.
 */
export type IDeviceDefinitionCapability = fhir.IBackboneElement & {
  /**
   * Description of capability.
   */
  description?: fhir.ICodeableConcept[]|undefined;
  /**
   * Type of capability.
   */
  type: fhir.ICodeableConcept|null;
}
/**
 * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
 */
export type IDeviceDefinitionProperty = fhir.IBackboneElement & {
  /**
   * Code that specifies the property DeviceDefinitionPropetyCode (Extensible).
   */
  type: fhir.ICodeableConcept|null;
  /**
   * Property value as a code, e.g., NTP4 (synced to NTP).
   */
  valueCode?: fhir.ICodeableConcept[]|undefined;
  /**
   * Property value as a quantity.
   */
  valueQuantity?: fhir.IQuantity[]|undefined;
}
/**
 * A substance used to create the material(s) of which the device is made.
 */
export type IDeviceDefinitionMaterial = fhir.IBackboneElement & {
  /**
   * Whether the substance is a known or suspected allergen.
   */
  allergenicIndicator?: boolean|undefined;
  _allergenicIndicator?: fhir.IFhirElement|undefined;
  /**
   * Indicates an alternative material of the device.
   */
  alternate?: boolean|undefined;
  _alternate?: fhir.IFhirElement|undefined;
  /**
   * The substance.
   */
  substance: fhir.ICodeableConcept|null;
}
/**
 * The characteristics, operational status and capabilities of a medical-related component of a medical device.
 */
export type IDeviceDefinition = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "DeviceDefinition";
  /**
   * Device capabilities.
   */
  capability?: fhir.IDeviceDefinitionCapability[]|undefined;
  /**
   * used for troubleshooting etc.
   */
  contact?: fhir.IContactPoint[]|undefined;
  /**
   * A name given to the device to identify it.
   */
  deviceName?: fhir.IDeviceDefinitionDeviceName[]|undefined;
  /**
   * Unique instance identifiers assigned to a device by the software, manufacturers, other organizations or owners. For example: handle ID.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * Language code for the human-readable text strings produced by the device (all supported).
   */
  languageCode?: fhir.ICodeableConcept[]|undefined;
  /**
   * A name of the manufacturer.
   */
  manufacturerString?: string|undefined;
  _manufacturerString?: fhir.IFhirElement|undefined;
  /**
   * A name of the manufacturer.
   */
  manufacturerReference?: fhir.IReference|undefined;
  /**
   * A substance used to create the material(s) of which the device is made.
   */
  material?: fhir.IDeviceDefinitionMaterial[]|undefined;
  /**
   * The model number for the device.
   */
  modelNumber?: string|undefined;
  _modelNumber?: fhir.IFhirElement|undefined;
  /**
   * Descriptive information, usage information or implantation information that is not captured in an existing element.
   */
  note?: fhir.IAnnotation[]|undefined;
  /**
   * Access to on-line information about the device.
   */
  onlineInformation?: string|undefined;
  _onlineInformation?: fhir.IFhirElement|undefined;
  /**
   * An organization that is responsible for the provision and ongoing maintenance of the device.
   */
  owner?: fhir.IReference|undefined;
  /**
   * The parent device it can be part of.
   */
  parentDevice?: fhir.IReference|undefined;
  /**
   * Dimensions, color etc.
   */
  physicalCharacteristics?: fhir.IProdCharacteristic|undefined;
  /**
   * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
   */
  property?: fhir.IDeviceDefinitionProperty[]|undefined;
  /**
   * The quantity of the device present in the packaging (e.g. the number of devices present in a pack, or the number of devices in the same package of the medicinal product).
   */
  quantity?: fhir.IQuantity|undefined;
  /**
   * Safety characteristics of the device.
   */
  safety?: fhir.ICodeableConcept[]|undefined;
  /**
   * Shelf Life and storage information.
   */
  shelfLifeStorage?: fhir.IProductShelfLife[]|undefined;
  /**
   * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
   */
  specialization?: fhir.IDeviceDefinitionSpecialization[]|undefined;
  /**
   * What kind of device or device system this is.
   */
  type?: fhir.ICodeableConcept|undefined;
  /**
   * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
   */
  udiDeviceIdentifier?: fhir.IDeviceDefinitionUdiDeviceIdentifier[]|undefined;
  /**
   * If the device is running a FHIR server, the network address should  be the Base URL from which a conformance statement may be retrieved.
   */
  url?: string|undefined;
  _url?: fhir.IFhirElement|undefined;
  /**
   * The available versions of the device, e.g., software versions.
   */
  version?: string[]|undefined;
  _version?: fhir.IFhirElement[]|undefined;
}
/**
 * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
 */
export class DeviceDefinitionUdiDeviceIdentifier extends fhir.BackboneElement implements fhir.IDeviceDefinitionUdiDeviceIdentifier {
  /**
   * The identifier that is to be associated with every Device that references this DeviceDefintiion for the issuer and jurisdication porvided in the DeviceDefinition.udiDeviceIdentifier.
   */
  public deviceIdentifier: string|null;
  public _deviceIdentifier?: fhir.FhirElement|undefined;
  /**
   * The organization that assigns the identifier algorithm.
   */
  public issuer: string|null;
  public _issuer?: fhir.FhirElement|undefined;
  /**
   * The jurisdiction to which the deviceIdentifier applies.
   */
  public jurisdiction: string|null;
  public _jurisdiction?: fhir.FhirElement|undefined;
  /**
   * Default constructor for DeviceDefinitionUdiDeviceIdentifier - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IDeviceDefinitionUdiDeviceIdentifier> = {}) {
    super(source);
    this.deviceIdentifier = null;
    if (source["deviceIdentifier"]) { this.deviceIdentifier = source.deviceIdentifier; }
    if (this.deviceIdentifier === undefined) { this.deviceIdentifier = null }
    if (source["_deviceIdentifier"]) { this._deviceIdentifier = new fhir.FhirElement(source._deviceIdentifier!); }
    this.issuer = null;
    if (source["issuer"]) { this.issuer = source.issuer; }
    if (this.issuer === undefined) { this.issuer = null }
    if (source["_issuer"]) { this._issuer = new fhir.FhirElement(source._issuer!); }
    this.jurisdiction = null;
    if (source["jurisdiction"]) { this.jurisdiction = source.jurisdiction; }
    if (this.jurisdiction === undefined) { this.jurisdiction = null }
    if (source["_jurisdiction"]) { this._jurisdiction = new fhir.FhirElement(source._jurisdiction!); }
  }
  /**
   * Check if the current DeviceDefinitionUdiDeviceIdentifier contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["deviceIdentifier"] === undefined) { missingElements.push("deviceIdentifier"); }
    if (this["issuer"] === undefined) { missingElements.push("issuer"); }
    if (this["jurisdiction"] === undefined) { missingElements.push("jurisdiction"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a DeviceDefinitionUdiDeviceIdentifier from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IDeviceDefinitionUdiDeviceIdentifier):DeviceDefinitionUdiDeviceIdentifier {
    var dest:DeviceDefinitionUdiDeviceIdentifier = new DeviceDefinitionUdiDeviceIdentifier(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `DeviceDefinitionUdiDeviceIdentifier is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * A name given to the device to identify it.
 */
export class DeviceDefinitionDeviceName extends fhir.BackboneElement implements fhir.IDeviceDefinitionDeviceName {
  /**
   * The name of the device.
   */
  public name: string|null;
  public _name?: fhir.FhirElement|undefined;
  /**
   * The type of deviceName.
   * UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName.
   */
  public type: DeviceDefinitionDeviceNameTypeEnum|null;
  public _type?: fhir.FhirElement|undefined;
  /**
   * Default constructor for DeviceDefinitionDeviceName - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IDeviceDefinitionDeviceName> = {}) {
    super(source);
    this.name = null;
    if (source["name"]) { this.name = source.name; }
    if (this.name === undefined) { this.name = null }
    if (source["_name"]) { this._name = new fhir.FhirElement(source._name!); }
    this.type = null;
    if (source["type"]) { this.type = source.type; }
    if (this.type === undefined) { this.type = null }
    if (source["_type"]) { this._type = new fhir.FhirElement(source._type!); }
  }
  /**
   * Check if the current DeviceDefinitionDeviceName contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["name"] === undefined) { missingElements.push("name"); }
    if (this["type"] === undefined) { missingElements.push("type"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a DeviceDefinitionDeviceName from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IDeviceDefinitionDeviceName):DeviceDefinitionDeviceName {
    var dest:DeviceDefinitionDeviceName = new DeviceDefinitionDeviceName(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `DeviceDefinitionDeviceName is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
 */
export class DeviceDefinitionSpecialization extends fhir.BackboneElement implements fhir.IDeviceDefinitionSpecialization {
  /**
   * The standard that is used to operate and communicate.
   */
  public systemType: string|null;
  public _systemType?: fhir.FhirElement|undefined;
  /**
   * The version of the standard that is used to operate and communicate.
   */
  public version?: string|undefined;
  public _version?: fhir.FhirElement|undefined;
  /**
   * Default constructor for DeviceDefinitionSpecialization - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IDeviceDefinitionSpecialization> = {}) {
    super(source);
    this.systemType = null;
    if (source["systemType"]) { this.systemType = source.systemType; }
    if (this.systemType === undefined) { this.systemType = null }
    if (source["_systemType"]) { this._systemType = new fhir.FhirElement(source._systemType!); }
    if (source["version"]) { this.version = source.version; }
    if (source["_version"]) { this._version = new fhir.FhirElement(source._version!); }
  }
  /**
   * Check if the current DeviceDefinitionSpecialization contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["systemType"] === undefined) { missingElements.push("systemType"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a DeviceDefinitionSpecialization from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IDeviceDefinitionSpecialization):DeviceDefinitionSpecialization {
    var dest:DeviceDefinitionSpecialization = new DeviceDefinitionSpecialization(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `DeviceDefinitionSpecialization is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Device capabilities.
 */
export class DeviceDefinitionCapability extends fhir.BackboneElement implements fhir.IDeviceDefinitionCapability {
  /**
   * Description of capability.
   */
  public description?: fhir.CodeableConcept[]|undefined;
  /**
   * Type of capability.
   */
  public type: fhir.CodeableConcept|null;
  /**
   * Default constructor for DeviceDefinitionCapability - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IDeviceDefinitionCapability> = {}) {
    super(source);
    if (source["description"]) { this.description = source.description.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    this.type = null;
    if (source["type"]) { this.type = new fhir.CodeableConcept(source.type!); }
    if (this.type === undefined) { this.type = null }
  }
  /**
   * Check if the current DeviceDefinitionCapability contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["type"] === undefined) { missingElements.push("type"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a DeviceDefinitionCapability from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IDeviceDefinitionCapability):DeviceDefinitionCapability {
    var dest:DeviceDefinitionCapability = new DeviceDefinitionCapability(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `DeviceDefinitionCapability is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
 */
export class DeviceDefinitionProperty extends fhir.BackboneElement implements fhir.IDeviceDefinitionProperty {
  /**
   * Code that specifies the property DeviceDefinitionPropetyCode (Extensible).
   */
  public type: fhir.CodeableConcept|null;
  /**
   * Property value as a code, e.g., NTP4 (synced to NTP).
   */
  public valueCode?: fhir.CodeableConcept[]|undefined;
  /**
   * Property value as a quantity.
   */
  public valueQuantity?: fhir.Quantity[]|undefined;
  /**
   * Default constructor for DeviceDefinitionProperty - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IDeviceDefinitionProperty> = {}) {
    super(source);
    this.type = null;
    if (source["type"]) { this.type = new fhir.CodeableConcept(source.type!); }
    if (this.type === undefined) { this.type = null }
    if (source["valueCode"]) { this.valueCode = source.valueCode.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["valueQuantity"]) { this.valueQuantity = source.valueQuantity.map((x:Partial<fhir.IQuantity>) => new fhir.Quantity(x)); }
  }
  /**
   * Check if the current DeviceDefinitionProperty contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["type"] === undefined) { missingElements.push("type"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a DeviceDefinitionProperty from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IDeviceDefinitionProperty):DeviceDefinitionProperty {
    var dest:DeviceDefinitionProperty = new DeviceDefinitionProperty(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `DeviceDefinitionProperty is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * A substance used to create the material(s) of which the device is made.
 */
export class DeviceDefinitionMaterial extends fhir.BackboneElement implements fhir.IDeviceDefinitionMaterial {
  /**
   * Whether the substance is a known or suspected allergen.
   */
  public allergenicIndicator?: boolean|undefined;
  public _allergenicIndicator?: fhir.FhirElement|undefined;
  /**
   * Indicates an alternative material of the device.
   */
  public alternate?: boolean|undefined;
  public _alternate?: fhir.FhirElement|undefined;
  /**
   * The substance.
   */
  public substance: fhir.CodeableConcept|null;
  /**
   * Default constructor for DeviceDefinitionMaterial - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IDeviceDefinitionMaterial> = {}) {
    super(source);
    if (source["allergenicIndicator"]) { this.allergenicIndicator = source.allergenicIndicator; }
    if (source["_allergenicIndicator"]) { this._allergenicIndicator = new fhir.FhirElement(source._allergenicIndicator!); }
    if (source["alternate"]) { this.alternate = source.alternate; }
    if (source["_alternate"]) { this._alternate = new fhir.FhirElement(source._alternate!); }
    this.substance = null;
    if (source["substance"]) { this.substance = new fhir.CodeableConcept(source.substance!); }
    if (this.substance === undefined) { this.substance = null }
  }
  /**
   * Check if the current DeviceDefinitionMaterial contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["substance"] === undefined) { missingElements.push("substance"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a DeviceDefinitionMaterial from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IDeviceDefinitionMaterial):DeviceDefinitionMaterial {
    var dest:DeviceDefinitionMaterial = new DeviceDefinitionMaterial(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `DeviceDefinitionMaterial is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * The characteristics, operational status and capabilities of a medical-related component of a medical device.
 */
export class DeviceDefinition extends fhir.DomainResource implements fhir.IDeviceDefinition {
  /**
   * Resource Type Name
   */
  public override resourceType: "DeviceDefinition";
  /**
   * Device capabilities.
   */
  public capability?: fhir.DeviceDefinitionCapability[]|undefined;
  /**
   * used for troubleshooting etc.
   */
  public contact?: fhir.ContactPoint[]|undefined;
  /**
   * A name given to the device to identify it.
   */
  public deviceName?: fhir.DeviceDefinitionDeviceName[]|undefined;
  /**
   * Unique instance identifiers assigned to a device by the software, manufacturers, other organizations or owners. For example: handle ID.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * Language code for the human-readable text strings produced by the device (all supported).
   */
  public languageCode?: fhir.CodeableConcept[]|undefined;
  /**
   * A name of the manufacturer.
   */
  public manufacturerString?: string|undefined;
  public _manufacturerString?: fhir.FhirElement|undefined;
  /**
   * A name of the manufacturer.
   */
  public manufacturerReference?: fhir.Reference|undefined;
  /**
   * A substance used to create the material(s) of which the device is made.
   */
  public material?: fhir.DeviceDefinitionMaterial[]|undefined;
  /**
   * The model number for the device.
   */
  public modelNumber?: string|undefined;
  public _modelNumber?: fhir.FhirElement|undefined;
  /**
   * Descriptive information, usage information or implantation information that is not captured in an existing element.
   */
  public note?: fhir.Annotation[]|undefined;
  /**
   * Access to on-line information about the device.
   */
  public onlineInformation?: string|undefined;
  public _onlineInformation?: fhir.FhirElement|undefined;
  /**
   * An organization that is responsible for the provision and ongoing maintenance of the device.
   */
  public owner?: fhir.Reference|undefined;
  /**
   * The parent device it can be part of.
   */
  public parentDevice?: fhir.Reference|undefined;
  /**
   * Dimensions, color etc.
   */
  public physicalCharacteristics?: fhir.ProdCharacteristic|undefined;
  /**
   * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
   */
  public property?: fhir.DeviceDefinitionProperty[]|undefined;
  /**
   * The quantity of the device present in the packaging (e.g. the number of devices present in a pack, or the number of devices in the same package of the medicinal product).
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * Safety characteristics of the device.
   */
  public safety?: fhir.CodeableConcept[]|undefined;
  /**
   * Shelf Life and storage information.
   */
  public shelfLifeStorage?: fhir.ProductShelfLife[]|undefined;
  /**
   * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
   */
  public specialization?: fhir.DeviceDefinitionSpecialization[]|undefined;
  /**
   * What kind of device or device system this is.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
   */
  public udiDeviceIdentifier?: fhir.DeviceDefinitionUdiDeviceIdentifier[]|undefined;
  /**
   * If the device is running a FHIR server, the network address should  be the Base URL from which a conformance statement may be retrieved.
   */
  public url?: string|undefined;
  public _url?: fhir.FhirElement|undefined;
  /**
   * The available versions of the device, e.g., software versions.
   */
  public version?: string[]|undefined;
  public _version?: fhir.FhirElement[]|undefined;
  /**
   * Default constructor for DeviceDefinition - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IDeviceDefinition> = {}) {
    super(source);
    this.resourceType = 'DeviceDefinition';
    if (source["capability"]) { this.capability = source.capability.map((x:Partial<fhir.IDeviceDefinitionCapability>) => new fhir.DeviceDefinitionCapability(x)); }
    if (source["contact"]) { this.contact = source.contact.map((x:Partial<fhir.IContactPoint>) => new fhir.ContactPoint(x)); }
    if (source["deviceName"]) { this.deviceName = source.deviceName.map((x:Partial<fhir.IDeviceDefinitionDeviceName>) => new fhir.DeviceDefinitionDeviceName(x)); }
    if (source["identifier"]) { this.identifier = source.identifier.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    if (source["languageCode"]) { this.languageCode = source.languageCode.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["manufacturerString"]) { this.manufacturerString = source.manufacturerString; }
    if (source["_manufacturerString"]) { this._manufacturerString = new fhir.FhirElement(source._manufacturerString!); }
    if (source["manufacturerReference"]) { this.manufacturerReference = new fhir.Reference(source.manufacturerReference!); }
    if (source["material"]) { this.material = source.material.map((x:Partial<fhir.IDeviceDefinitionMaterial>) => new fhir.DeviceDefinitionMaterial(x)); }
    if (source["modelNumber"]) { this.modelNumber = source.modelNumber; }
    if (source["_modelNumber"]) { this._modelNumber = new fhir.FhirElement(source._modelNumber!); }
    if (source["note"]) { this.note = source.note.map((x:Partial<fhir.IAnnotation>) => new fhir.Annotation(x)); }
    if (source["onlineInformation"]) { this.onlineInformation = source.onlineInformation; }
    if (source["_onlineInformation"]) { this._onlineInformation = new fhir.FhirElement(source._onlineInformation!); }
    if (source["owner"]) { this.owner = new fhir.Reference(source.owner!); }
    if (source["parentDevice"]) { this.parentDevice = new fhir.Reference(source.parentDevice!); }
    if (source["physicalCharacteristics"]) { this.physicalCharacteristics = new fhir.ProdCharacteristic(source.physicalCharacteristics!); }
    if (source["property"]) { this.property = source.property.map((x:Partial<fhir.IDeviceDefinitionProperty>) => new fhir.DeviceDefinitionProperty(x)); }
    if (source["quantity"]) { this.quantity = new fhir.Quantity(source.quantity!); }
    if (source["safety"]) { this.safety = source.safety.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["shelfLifeStorage"]) { this.shelfLifeStorage = source.shelfLifeStorage.map((x:Partial<fhir.IProductShelfLife>) => new fhir.ProductShelfLife(x)); }
    if (source["specialization"]) { this.specialization = source.specialization.map((x:Partial<fhir.IDeviceDefinitionSpecialization>) => new fhir.DeviceDefinitionSpecialization(x)); }
    if (source["type"]) { this.type = new fhir.CodeableConcept(source.type!); }
    if (source["udiDeviceIdentifier"]) { this.udiDeviceIdentifier = source.udiDeviceIdentifier.map((x:Partial<fhir.IDeviceDefinitionUdiDeviceIdentifier>) => new fhir.DeviceDefinitionUdiDeviceIdentifier(x)); }
    if (source["url"]) { this.url = source.url; }
    if (source["_url"]) { this._url = new fhir.FhirElement(source._url!); }
    if (source["version"]) { this.version = source.version.map((x) => (x)); }
    if (source["_version"]) { this._version = source._version.map((x:Partial<fhir.IFhirElement>) => new fhir.FhirElement(x)); }
  }
  /**
   * Check if the current DeviceDefinition contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a DeviceDefinition from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IDeviceDefinition):DeviceDefinition {
    var dest:DeviceDefinition = new DeviceDefinition(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `DeviceDefinition is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the DeviceDefinition.deviceName.type field
 */
export enum DeviceDefinitionDeviceNameTypeEnum {
  UDI_LABEL_NAME = "udi-label-name",
  USER_FRIENDLY_NAME = "user-friendly-name",
  PATIENT_REPORTED_NAME = "patient-reported-name",
  MANUFACTURER_NAME = "manufacturer-name",
  MODEL_NAME = "model-name",
  OTHER = "other",
}
