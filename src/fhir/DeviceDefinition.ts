// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: DeviceDefinition

import * as fhir from '../fhir.js'

import { DeviceNametypeValueSet, DeviceNametypeValueSetType, DeviceNametypeValueSetEnum } from '../fhirValueSets/DeviceNametypeValueSet.js'
import { DeviceKindValueSet, DeviceKindValueSetType, DeviceKindValueSetEnum } from '../fhirValueSets/DeviceKindValueSet.js'

/**
 * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
 */
export type IDeviceDefinitionUdiDeviceIdentifier = fhir.IBackboneElement & { 
  /**
   * The identifier that is to be associated with every Device that references this DeviceDefintiion for the issuer and jurisdication porvided in the DeviceDefinition.udiDeviceIdentifier.
   */
  deviceIdentifier: string|null;
  /**
   * Extended properties for primitive element: DeviceDefinition.udiDeviceIdentifier.deviceIdentifier
   */
  _deviceIdentifier?: fhir.IFhirElement|undefined;
  /**
   * The organization that assigns the identifier algorithm.
   */
  issuer: string|null;
  /**
   * Extended properties for primitive element: DeviceDefinition.udiDeviceIdentifier.issuer
   */
  _issuer?: fhir.IFhirElement|undefined;
  /**
   * The jurisdiction to which the deviceIdentifier applies.
   */
  jurisdiction: string|null;
  /**
   * Extended properties for primitive element: DeviceDefinition.udiDeviceIdentifier.jurisdiction
   */
  _jurisdiction?: fhir.IFhirElement|undefined;
}

/**
 * A name given to the device to identify it.
 */
export type IDeviceDefinitionDeviceName = fhir.IBackboneElement & { 
  /**
   * The name of the device.
   */
  name: string|null;
  /**
   * Extended properties for primitive element: DeviceDefinition.deviceName.name
   */
  _name?: fhir.IFhirElement|undefined;
  /**
   * The type of deviceName.
   * UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName.
   */
  type: DeviceNametypeValueSetEnum|null;
  /**
   * Extended properties for primitive element: DeviceDefinition.deviceName.type
   */
  _type?: fhir.IFhirElement|undefined;
}

/**
 * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
 */
export type IDeviceDefinitionSpecialization = fhir.IBackboneElement & { 
  /**
   * The standard that is used to operate and communicate.
   */
  systemType: string|null;
  /**
   * Extended properties for primitive element: DeviceDefinition.specialization.systemType
   */
  _systemType?: fhir.IFhirElement|undefined;
  /**
   * The version of the standard that is used to operate and communicate.
   */
  version?: string|undefined;
  /**
   * Extended properties for primitive element: DeviceDefinition.specialization.version
   */
  _version?: fhir.IFhirElement|undefined;
}

/**
 * Device capabilities.
 */
export type IDeviceDefinitionCapability = fhir.IBackboneElement & { 
  /**
   * Type of capability.
   */
  type: fhir.ICodeableConcept|null;
  /**
   * Description of capability.
   */
  description?: fhir.ICodeableConcept[]|undefined;
}

/**
 * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
 */
export type IDeviceDefinitionProperty = fhir.IBackboneElement & { 
  /**
   * Code that specifies the property DeviceDefinitionPropetyCode (Extensible).
   */
  type: fhir.ICodeableConcept|null;
  /**
   * Property value as a quantity.
   */
  valueQuantity?: fhir.IQuantity[]|undefined;
  /**
   * Property value as a code, e.g., NTP4 (synced to NTP).
   */
  valueCode?: fhir.ICodeableConcept[]|undefined;
}

/**
 * A substance used to create the material(s) of which the device is made.
 */
export type IDeviceDefinitionMaterial = fhir.IBackboneElement & { 
  /**
   * The substance.
   */
  substance: fhir.ICodeableConcept|null;
  /**
   * Indicates an alternative material of the device.
   */
  alternate?: boolean|undefined;
  /**
   * Extended properties for primitive element: DeviceDefinition.material.alternate
   */
  _alternate?: fhir.IFhirElement|undefined;
  /**
   * Whether the substance is a known or suspected allergen.
   */
  allergenicIndicator?: boolean|undefined;
  /**
   * Extended properties for primitive element: DeviceDefinition.material.allergenicIndicator
   */
  _allergenicIndicator?: fhir.IFhirElement|undefined;
}

/**
 * The characteristics, operational status and capabilities of a medical-related component of a medical device.
 */
export type IDeviceDefinition = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "DeviceDefinition";
  /**
   * Unique instance identifiers assigned to a device by the software, manufacturers, other organizations or owners. For example: handle ID.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
   */
  udiDeviceIdentifier?: fhir.IDeviceDefinitionUdiDeviceIdentifier[]|undefined;
  /**
   * A name of the manufacturer.
   */
  manufacturerString?: string|undefined;
  /**
   * Extended properties for primitive element: DeviceDefinition.manufacturer[x]
   */
  _manufacturerString?: fhir.IFhirElement|undefined;
  /**
   * A name of the manufacturer.
   */
  manufacturerReference?: fhir.IReference|undefined;
  /**
   * A name given to the device to identify it.
   */
  deviceName?: fhir.IDeviceDefinitionDeviceName[]|undefined;
  /**
   * The model number for the device.
   */
  modelNumber?: string|undefined;
  /**
   * Extended properties for primitive element: DeviceDefinition.modelNumber
   */
  _modelNumber?: fhir.IFhirElement|undefined;
  /**
   * What kind of device or device system this is.
   */
  type?: fhir.ICodeableConcept|undefined;
  /**
   * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
   */
  specialization?: fhir.IDeviceDefinitionSpecialization[]|undefined;
  /**
   * The available versions of the device, e.g., software versions.
   */
  version?: string[]|undefined;
  /**
   * Extended properties for primitive element: DeviceDefinition.version
   */
  _version?: fhir.IFhirElement[]|undefined;
  /**
   * Safety characteristics of the device.
   */
  safety?: fhir.ICodeableConcept[]|undefined;
  /**
   * Shelf Life and storage information.
   */
  shelfLifeStorage?: fhir.IProductShelfLife[]|undefined;
  /**
   * Dimensions, color etc.
   */
  physicalCharacteristics?: fhir.IProdCharacteristic|undefined;
  /**
   * Language code for the human-readable text strings produced by the device (all supported).
   */
  languageCode?: fhir.ICodeableConcept[]|undefined;
  /**
   * Device capabilities.
   */
  capability?: fhir.IDeviceDefinitionCapability[]|undefined;
  /**
   * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
   */
  property?: fhir.IDeviceDefinitionProperty[]|undefined;
  /**
   * An organization that is responsible for the provision and ongoing maintenance of the device.
   */
  owner?: fhir.IReference|undefined;
  /**
   * used for troubleshooting etc.
   */
  contact?: fhir.IContactPoint[]|undefined;
  /**
   * If the device is running a FHIR server, the network address should  be the Base URL from which a conformance statement may be retrieved.
   */
  url?: string|undefined;
  /**
   * Extended properties for primitive element: DeviceDefinition.url
   */
  _url?: fhir.IFhirElement|undefined;
  /**
   * Access to on-line information about the device.
   */
  onlineInformation?: string|undefined;
  /**
   * Extended properties for primitive element: DeviceDefinition.onlineInformation
   */
  _onlineInformation?: fhir.IFhirElement|undefined;
  /**
   * Descriptive information, usage information or implantation information that is not captured in an existing element.
   */
  note?: fhir.IAnnotation[]|undefined;
  /**
   * The quantity of the device present in the packaging (e.g. the number of devices present in a pack, or the number of devices in the same package of the medicinal product).
   */
  quantity?: fhir.IQuantity|undefined;
  /**
   * The parent device it can be part of.
   */
  parentDevice?: fhir.IReference|undefined;
  /**
   * A substance used to create the material(s) of which the device is made.
   */
  material?: fhir.IDeviceDefinitionMaterial[]|undefined;
}

/**
 * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
 */
export class DeviceDefinitionUdiDeviceIdentifier extends fhir.BackboneElement implements IDeviceDefinitionUdiDeviceIdentifier {
  /**
   * The identifier that is to be associated with every Device that references this DeviceDefintiion for the issuer and jurisdication porvided in the DeviceDefinition.udiDeviceIdentifier.
   */
  public deviceIdentifier: string|null;
  /**
   * Extended properties for primitive element: DeviceDefinition.udiDeviceIdentifier.deviceIdentifier
   */
  public _deviceIdentifier?: fhir.FhirElement|undefined;
  /**
   * The organization that assigns the identifier algorithm.
   */
  public issuer: string|null;
  /**
   * Extended properties for primitive element: DeviceDefinition.udiDeviceIdentifier.issuer
   */
  public _issuer?: fhir.FhirElement|undefined;
  /**
   * The jurisdiction to which the deviceIdentifier applies.
   */
  public jurisdiction: string|null;
  /**
   * Extended properties for primitive element: DeviceDefinition.udiDeviceIdentifier.jurisdiction
   */
  public _jurisdiction?: fhir.FhirElement|undefined;
  /**
   * Default constructor for DeviceDefinitionUdiDeviceIdentifier - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IDeviceDefinitionUdiDeviceIdentifier> = { }) {
    super(source);
    if (source['deviceIdentifier']) { this.deviceIdentifier = source.deviceIdentifier; }
    else { this.deviceIdentifier = null; }
    if (source['_deviceIdentifier']) { this._deviceIdentifier = new fhir.FhirElement(source._deviceIdentifier!); }
    if (source['issuer']) { this.issuer = source.issuer; }
    else { this.issuer = null; }
    if (source['_issuer']) { this._issuer = new fhir.FhirElement(source._issuer!); }
    if (source['jurisdiction']) { this.jurisdiction = source.jurisdiction; }
    else { this.jurisdiction = null; }
    if (source['_jurisdiction']) { this._jurisdiction = new fhir.FhirElement(source._jurisdiction!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["deviceIdentifier"]) { results.push(["deviceIdentifier",'Missing required element: DeviceDefinition.udiDeviceIdentifier.deviceIdentifier']); }
    if (this["_deviceIdentifier"]) { results.push(...this._deviceIdentifier.doModelValidation()); }
    if (!this["issuer"]) { results.push(["issuer",'Missing required element: DeviceDefinition.udiDeviceIdentifier.issuer']); }
    if (this["_issuer"]) { results.push(...this._issuer.doModelValidation()); }
    if (!this["jurisdiction"]) { results.push(["jurisdiction",'Missing required element: DeviceDefinition.udiDeviceIdentifier.jurisdiction']); }
    if (this["_jurisdiction"]) { results.push(...this._jurisdiction.doModelValidation()); }
    return results;
  }
}

/**
 * A name given to the device to identify it.
 */
export class DeviceDefinitionDeviceName extends fhir.BackboneElement implements IDeviceDefinitionDeviceName {
  /**
   * The name of the device.
   */
  public name: string|null;
  /**
   * Extended properties for primitive element: DeviceDefinition.deviceName.name
   */
  public _name?: fhir.FhirElement|undefined;
  /**
   * The type of deviceName.
   * UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName.
   */
  public type: DeviceNametypeValueSetEnum|null;
  /**
   * Extended properties for primitive element: DeviceDefinition.deviceName.type
   */
  public _type?: fhir.FhirElement|undefined;
  /**
   * Default constructor for DeviceDefinitionDeviceName - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IDeviceDefinitionDeviceName> = { }) {
    super(source);
    if (source['name']) { this.name = source.name; }
    else { this.name = null; }
    if (source['_name']) { this._name = new fhir.FhirElement(source._name!); }
    if (source['type']) { this.type = source.type; }
    else { this.type = null; }
    if (source['_type']) { this._type = new fhir.FhirElement(source._type!); }
  }
  /**
   * Required-bound Value Set for type
   */
  public typeRequiredValueSet():DeviceNametypeValueSetType {
    return DeviceNametypeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["name"]) { results.push(["name",'Missing required element: DeviceDefinition.deviceName.name']); }
    if (this["_name"]) { results.push(...this._name.doModelValidation()); }
    if (!this["type"]) { results.push(["type",'Missing required element: DeviceDefinition.deviceName.type']); }
    if (this["_type"]) { results.push(...this._type.doModelValidation()); }
    return results;
  }
}

/**
 * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
 */
export class DeviceDefinitionSpecialization extends fhir.BackboneElement implements IDeviceDefinitionSpecialization {
  /**
   * The standard that is used to operate and communicate.
   */
  public systemType: string|null;
  /**
   * Extended properties for primitive element: DeviceDefinition.specialization.systemType
   */
  public _systemType?: fhir.FhirElement|undefined;
  /**
   * The version of the standard that is used to operate and communicate.
   */
  public version?: string|undefined;
  /**
   * Extended properties for primitive element: DeviceDefinition.specialization.version
   */
  public _version?: fhir.FhirElement|undefined;
  /**
   * Default constructor for DeviceDefinitionSpecialization - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IDeviceDefinitionSpecialization> = { }) {
    super(source);
    if (source['systemType']) { this.systemType = source.systemType; }
    else { this.systemType = null; }
    if (source['_systemType']) { this._systemType = new fhir.FhirElement(source._systemType!); }
    if (source['version']) { this.version = source.version; }
    if (source['_version']) { this._version = new fhir.FhirElement(source._version!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["systemType"]) { results.push(["systemType",'Missing required element: DeviceDefinition.specialization.systemType']); }
    if (this["_systemType"]) { results.push(...this._systemType.doModelValidation()); }
    if (this["_version"]) { results.push(...this._version.doModelValidation()); }
    return results;
  }
}

/**
 * Device capabilities.
 */
export class DeviceDefinitionCapability extends fhir.BackboneElement implements IDeviceDefinitionCapability {
  /**
   * Type of capability.
   */
  public type: fhir.CodeableConcept|null;
  /**
   * Description of capability.
   */
  public description?: fhir.CodeableConcept[]|undefined;
  /**
   * Default constructor for DeviceDefinitionCapability - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IDeviceDefinitionCapability> = { }) {
    super(source);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    else { this.type = null; }
    if (source['description']) { this.description = source.description.map((x) => new fhir.CodeableConcept(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["type"]) { results.push(["type",'Missing required element: DeviceDefinition.capability.type']); }
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (this["description"]) { this.description.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
 */
export class DeviceDefinitionProperty extends fhir.BackboneElement implements IDeviceDefinitionProperty {
  /**
   * Code that specifies the property DeviceDefinitionPropetyCode (Extensible).
   */
  public type: fhir.CodeableConcept|null;
  /**
   * Property value as a quantity.
   */
  public valueQuantity?: fhir.Quantity[]|undefined;
  /**
   * Property value as a code, e.g., NTP4 (synced to NTP).
   */
  public valueCode?: fhir.CodeableConcept[]|undefined;
  /**
   * Default constructor for DeviceDefinitionProperty - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IDeviceDefinitionProperty> = { }) {
    super(source);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    else { this.type = null; }
    if (source['valueQuantity']) { this.valueQuantity = source.valueQuantity.map((x) => new fhir.Quantity(x)); }
    if (source['valueCode']) { this.valueCode = source.valueCode.map((x) => new fhir.CodeableConcept(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["type"]) { results.push(["type",'Missing required element: DeviceDefinition.property.type']); }
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (this["valueQuantity"]) { this.valueQuantity.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["valueCode"]) { this.valueCode.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}

/**
 * A substance used to create the material(s) of which the device is made.
 */
export class DeviceDefinitionMaterial extends fhir.BackboneElement implements IDeviceDefinitionMaterial {
  /**
   * The substance.
   */
  public substance: fhir.CodeableConcept|null;
  /**
   * Indicates an alternative material of the device.
   */
  public alternate?: boolean|undefined;
  /**
   * Extended properties for primitive element: DeviceDefinition.material.alternate
   */
  public _alternate?: fhir.FhirElement|undefined;
  /**
   * Whether the substance is a known or suspected allergen.
   */
  public allergenicIndicator?: boolean|undefined;
  /**
   * Extended properties for primitive element: DeviceDefinition.material.allergenicIndicator
   */
  public _allergenicIndicator?: fhir.FhirElement|undefined;
  /**
   * Default constructor for DeviceDefinitionMaterial - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IDeviceDefinitionMaterial> = { }) {
    super(source);
    if (source['substance']) { this.substance = new fhir.CodeableConcept(source.substance!); }
    else { this.substance = null; }
    if (source['alternate']) { this.alternate = source.alternate; }
    if (source['_alternate']) { this._alternate = new fhir.FhirElement(source._alternate!); }
    if (source['allergenicIndicator']) { this.allergenicIndicator = source.allergenicIndicator; }
    if (source['_allergenicIndicator']) { this._allergenicIndicator = new fhir.FhirElement(source._allergenicIndicator!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["substance"]) { results.push(["substance",'Missing required element: DeviceDefinition.material.substance']); }
    if (this["substance"]) { results.push(...this.substance.doModelValidation()); }
    if (this["_alternate"]) { results.push(...this._alternate.doModelValidation()); }
    if (this["_allergenicIndicator"]) { results.push(...this._allergenicIndicator.doModelValidation()); }
    return results;
  }
}

/**
 * The characteristics, operational status and capabilities of a medical-related component of a medical device.
 */
export class DeviceDefinition extends fhir.DomainResource implements IDeviceDefinition {
  /**
   * Resource Type Name
   */
  public resourceType: "DeviceDefinition";
  /**
   * Unique instance identifiers assigned to a device by the software, manufacturers, other organizations or owners. For example: handle ID.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
   */
  public udiDeviceIdentifier?: fhir.DeviceDefinitionUdiDeviceIdentifier[]|undefined;
  /**
   * A name of the manufacturer.
   */
  public manufacturerString?: string|undefined;
  /**
   * Extended properties for primitive element: DeviceDefinition.manufacturer[x]
   */
  public _manufacturerString?: fhir.FhirElement|undefined;
  /**
   * A name of the manufacturer.
   */
  public manufacturerReference?: fhir.Reference|undefined;
  /**
   * A name given to the device to identify it.
   */
  public deviceName?: fhir.DeviceDefinitionDeviceName[]|undefined;
  /**
   * The model number for the device.
   */
  public modelNumber?: string|undefined;
  /**
   * Extended properties for primitive element: DeviceDefinition.modelNumber
   */
  public _modelNumber?: fhir.FhirElement|undefined;
  /**
   * What kind of device or device system this is.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
   */
  public specialization?: fhir.DeviceDefinitionSpecialization[]|undefined;
  /**
   * The available versions of the device, e.g., software versions.
   */
  public version?: string[]|undefined;
  /**
   * Extended properties for primitive element: DeviceDefinition.version
   */
  public _version?: fhir.FhirElement[]|undefined;
  /**
   * Safety characteristics of the device.
   */
  public safety?: fhir.CodeableConcept[]|undefined;
  /**
   * Shelf Life and storage information.
   */
  public shelfLifeStorage?: fhir.ProductShelfLife[]|undefined;
  /**
   * Dimensions, color etc.
   */
  public physicalCharacteristics?: fhir.ProdCharacteristic|undefined;
  /**
   * Language code for the human-readable text strings produced by the device (all supported).
   */
  public languageCode?: fhir.CodeableConcept[]|undefined;
  /**
   * Device capabilities.
   */
  public capability?: fhir.DeviceDefinitionCapability[]|undefined;
  /**
   * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
   */
  public property?: fhir.DeviceDefinitionProperty[]|undefined;
  /**
   * An organization that is responsible for the provision and ongoing maintenance of the device.
   */
  public owner?: fhir.Reference|undefined;
  /**
   * used for troubleshooting etc.
   */
  public contact?: fhir.ContactPoint[]|undefined;
  /**
   * If the device is running a FHIR server, the network address should  be the Base URL from which a conformance statement may be retrieved.
   */
  public url?: string|undefined;
  /**
   * Extended properties for primitive element: DeviceDefinition.url
   */
  public _url?: fhir.FhirElement|undefined;
  /**
   * Access to on-line information about the device.
   */
  public onlineInformation?: string|undefined;
  /**
   * Extended properties for primitive element: DeviceDefinition.onlineInformation
   */
  public _onlineInformation?: fhir.FhirElement|undefined;
  /**
   * Descriptive information, usage information or implantation information that is not captured in an existing element.
   */
  public note?: fhir.Annotation[]|undefined;
  /**
   * The quantity of the device present in the packaging (e.g. the number of devices present in a pack, or the number of devices in the same package of the medicinal product).
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * The parent device it can be part of.
   */
  public parentDevice?: fhir.Reference|undefined;
  /**
   * A substance used to create the material(s) of which the device is made.
   */
  public material?: fhir.DeviceDefinitionMaterial[]|undefined;
  /**
   * Default constructor for DeviceDefinition - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IDeviceDefinition> = { }) {
    super(source);
    this.resourceType = 'DeviceDefinition';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['udiDeviceIdentifier']) { this.udiDeviceIdentifier = source.udiDeviceIdentifier.map((x) => new fhir.DeviceDefinitionUdiDeviceIdentifier(x)); }
    if (source['manufacturerString']) { this.manufacturerString = source.manufacturerString; }
    if (source['_manufacturerString']) { this._manufacturerString = new fhir.FhirElement(source._manufacturerString!); }
    if (source['manufacturerReference']) { this.manufacturerReference = new fhir.Reference(source.manufacturerReference!); }
    if (source['deviceName']) { this.deviceName = source.deviceName.map((x) => new fhir.DeviceDefinitionDeviceName(x)); }
    if (source['modelNumber']) { this.modelNumber = source.modelNumber; }
    if (source['_modelNumber']) { this._modelNumber = new fhir.FhirElement(source._modelNumber!); }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type!); }
    if (source['specialization']) { this.specialization = source.specialization.map((x) => new fhir.DeviceDefinitionSpecialization(x)); }
    if (source['version']) { this.version = source.version.map((x) => (x)); }
    if (source['_version']) { this._version = source._version.map((x) => new fhir.FhirElement(x)); }
    if (source['safety']) { this.safety = source.safety.map((x) => new fhir.CodeableConcept(x)); }
    if (source['shelfLifeStorage']) { this.shelfLifeStorage = source.shelfLifeStorage.map((x) => new fhir.ProductShelfLife(x)); }
    if (source['physicalCharacteristics']) { this.physicalCharacteristics = new fhir.ProdCharacteristic(source.physicalCharacteristics!); }
    if (source['languageCode']) { this.languageCode = source.languageCode.map((x) => new fhir.CodeableConcept(x)); }
    if (source['capability']) { this.capability = source.capability.map((x) => new fhir.DeviceDefinitionCapability(x)); }
    if (source['property']) { this.property = source.property.map((x) => new fhir.DeviceDefinitionProperty(x)); }
    if (source['owner']) { this.owner = new fhir.Reference(source.owner!); }
    if (source['contact']) { this.contact = source.contact.map((x) => new fhir.ContactPoint(x)); }
    if (source['url']) { this.url = source.url; }
    if (source['_url']) { this._url = new fhir.FhirElement(source._url!); }
    if (source['onlineInformation']) { this.onlineInformation = source.onlineInformation; }
    if (source['_onlineInformation']) { this._onlineInformation = new fhir.FhirElement(source._onlineInformation!); }
    if (source['note']) { this.note = source.note.map((x) => new fhir.Annotation(x)); }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity!); }
    if (source['parentDevice']) { this.parentDevice = new fhir.Reference(source.parentDevice!); }
    if (source['material']) { this.material = source.material.map((x) => new fhir.DeviceDefinitionMaterial(x)); }
  }
  /**
   * Example-bound Value Set for type
   */
  public typeExampleValueSet():DeviceKindValueSetType {
    return DeviceKindValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: DeviceDefinition.resourceType']); }
    if (this["identifier"]) { this.identifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["udiDeviceIdentifier"]) { this.udiDeviceIdentifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_manufacturerString"]) { results.push(...this._manufacturerString.doModelValidation()); }
    if (this["manufacturerReference"]) { results.push(...this.manufacturerReference.doModelValidation()); }
    if (this["deviceName"]) { this.deviceName.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_modelNumber"]) { results.push(...this._modelNumber.doModelValidation()); }
    if (this["type"]) { results.push(...this.type.doModelValidation()); }
    if (this["specialization"]) { this.specialization.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_version"]) { this._version.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["safety"]) { this.safety.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["shelfLifeStorage"]) { this.shelfLifeStorage.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["physicalCharacteristics"]) { results.push(...this.physicalCharacteristics.doModelValidation()); }
    if (this["languageCode"]) { this.languageCode.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["capability"]) { this.capability.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["property"]) { this.property.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["owner"]) { results.push(...this.owner.doModelValidation()); }
    if (this["contact"]) { this.contact.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_url"]) { results.push(...this._url.doModelValidation()); }
    if (this["_onlineInformation"]) { results.push(...this._onlineInformation.doModelValidation()); }
    if (this["note"]) { this.note.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["quantity"]) { results.push(...this.quantity.doModelValidation()); }
    if (this["parentDevice"]) { results.push(...this.parentDevice.doModelValidation()); }
    if (this["material"]) { this.material.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}
