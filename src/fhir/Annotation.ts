// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Annotation

import * as fhir from '../fhir.js';

import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Valid arguments for the Annotation type.
 */
export interface AnnotationArgs extends fhir.FhirElementArgs {
  /**
   * Organization is used when there's no need for specific attribution as to who made the comment.
   */
  author?: fhir.Reference|fhir.FhirString|undefined;
  /**
   * Organization is used when there's no need for specific attribution as to who made the comment.
   */
  authorReference?: fhir.ReferenceArgs|undefined;
  /**
   * Organization is used when there's no need for specific attribution as to who made the comment.
   */
  authorString?: fhir.FhirString|string|undefined;
  /**
   * Indicates when this particular annotation was made.
   */
  time?: fhir.FhirDateTime|string|undefined;
  /**
   * The text of the annotation in markdown format.
   */
  text: fhir.FhirMarkdown|string|undefined;
}

/**
 * A  text note which also  contains information about who made the statement and when.
 */
export class Annotation extends fhir.FhirElement {
  readonly __dataType:string = 'Annotation';
  /**
   * Organization is used when there's no need for specific attribution as to who made the comment.
   */
  public author?: (fhir.Reference|fhir.FhirString)|undefined;
  readonly __authorIsChoice:true = true;
  /**
   * Indicates when this particular annotation was made.
   */
  public time?: fhir.FhirDateTime|undefined;
  /**
   * The text of the annotation in markdown format.
   */
  public text: fhir.FhirMarkdown|null;
  /**
   * Default constructor for Annotation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<AnnotationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['author']) { this.author = source.author; }
    else if (source['authorReference']) { this.author = new fhir.Reference(source.authorReference); }
    else if (source['authorString']) { this.author = new fhir.FhirString({value: source.authorString}); }
    if (source['time']) { this.time = new fhir.FhirDateTime({value: source.time}); }
    if (source['text']) { this.text = new fhir.FhirMarkdown({value: source.text}); }
    else { this.text = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["time"]) { outcome.issue!.push(...this.time.doModelValidation().issue!); }
    if (!this['text']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property text:fhir.FhirMarkdown fhir: Annotation.text:markdown", }));
    }
    if (this["text"]) { outcome.issue!.push(...this.text.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
