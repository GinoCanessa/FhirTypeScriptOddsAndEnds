// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Annotation

import * as fhir from '../fhir.js'


/**
 * A  text note which also  contains information about who made the statement and when.
 */
export type IAnnotation = fhir.IFhirElement & { 
  /**
   * Organization is used when there's no need for specific attribution as to who made the comment.
   */
  authorReference?: fhir.IReference|undefined;
  /**
   * Organization is used when there's no need for specific attribution as to who made the comment.
   */
  authorString?: string|undefined;
  /**
   * Extended properties for primitive element: Annotation.author[x]
   */
  _authorString?: fhir.IFhirElement|undefined;
  /**
   * Indicates when this particular annotation was made.
   */
  time?: string|undefined;
  /**
   * Extended properties for primitive element: Annotation.time
   */
  _time?: fhir.IFhirElement|undefined;
  /**
   * The text of the annotation in markdown format.
   */
  text: string|null;
  /**
   * Extended properties for primitive element: Annotation.text
   */
  _text?: fhir.IFhirElement|undefined;
}

/**
 * A  text note which also  contains information about who made the statement and when.
 */
export class Annotation extends fhir.FhirElement implements IAnnotation {
  /**
   * Organization is used when there's no need for specific attribution as to who made the comment.
   */
  public authorReference?: fhir.Reference|undefined;
  /**
   * Organization is used when there's no need for specific attribution as to who made the comment.
   */
  public authorString?: string|undefined;
  /**
   * Extended properties for primitive element: Annotation.author[x]
   */
  public _authorString?: fhir.FhirElement|undefined;
  /**
   * Indicates when this particular annotation was made.
   */
  public time?: string|undefined;
  /**
   * Extended properties for primitive element: Annotation.time
   */
  public _time?: fhir.FhirElement|undefined;
  /**
   * The text of the annotation in markdown format.
   */
  public text: string|null;
  /**
   * Extended properties for primitive element: Annotation.text
   */
  public _text?: fhir.FhirElement|undefined;
  /**
   * Default constructor for Annotation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IAnnotation> = { }) {
    super(source);
    if (source['authorReference']) { this.authorReference = new fhir.Reference(source.authorReference!); }
    if (source['authorString']) { this.authorString = source.authorString; }
    if (source['_authorString']) { this._authorString = new fhir.FhirElement(source._authorString!); }
    if (source['time']) { this.time = source.time; }
    if (source['_time']) { this._time = new fhir.FhirElement(source._time!); }
    if (source['text']) { this.text = source.text; }
    else { this.text = null; }
    if (source['_text']) { this._text = new fhir.FhirElement(source._text!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["authorReference"]) { results.push(...this.authorReference.doModelValidation()); }
    if (this["_authorString"]) { results.push(...this._authorString.doModelValidation()); }
    if (this["_time"]) { results.push(...this._time.doModelValidation()); }
    if (!this["text"]) { results.push(["text",'Missing required element: Annotation.text']); }
    if (this["_text"]) { results.push(...this._text.doModelValidation()); }
    return results;
  }
}
