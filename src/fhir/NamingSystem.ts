// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Multiple identifiers may exist, either due to duplicate registration, regional rules, needs of different communication technologies, etc.
 */
export type INamingSystemUniqueId = fhir.IBackboneElement & {
  /**
   * e.g. "must be used in Germany" or "was initially published in error with this value".
   */
  comment?: string|undefined;
  _comment?: fhir.IFhirElement|undefined;
  /**
   * Within a registry, a given identifier should only be "active" for a single namespace at a time.  (Ideally, an identifier should only ever be associated with a single namespace across all time).
   */
  period?: fhir.IPeriod|undefined;
  /**
   * Indicates whether this identifier is the "preferred" identifier of this type.
   */
  preferred?: boolean|undefined;
  _preferred?: fhir.IFhirElement|undefined;
  /**
   * Different identifier types may be used in different types of communications (OIDs for v3, URIs for FHIR, etc.).  Other includes RUIDs from v3, standard v2 code name strings, etc.
   */
  type: NamingSystemUniqueIdTypeEnum|null;
  _type?: fhir.IFhirElement|undefined;
  /**
   * If the value is a URI intended for use as FHIR system identifier, the URI should not contain "\" or "?" or "," since this makes escaping very difficult.
   */
  value: string|null;
  _value?: fhir.IFhirElement|undefined;
}
/**
 * A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types.
 */
export type INamingSystem = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "NamingSystem";
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: fhir.IContactDetail[]|undefined;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the naming system. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date: string|null;
  _date?: fhir.IFhirElement|undefined;
  /**
   * This description can be used to capture details such as why the naming system was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the naming system as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the naming system is presumed to be the predominant language in the place the naming system was created).
   */
  description?: string|undefined;
  _description?: fhir.IFhirElement|undefined;
  /**
   * It may be possible for the naming system to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: fhir.ICodeableConcept[]|undefined;
  /**
   * Indicates the purpose for the naming system - what kinds of things does it make unique?
   */
  kind: NamingSystemKindEnum|null;
  _kind?: fhir.IFhirElement|undefined;
  /**
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.The"symbolic name" for an OID would be captured as an extension.
   */
  name: string|null;
  _name?: fhir.IFhirElement|undefined;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the naming system is the organization or individual primarily responsible for the maintenance and upkeep of the naming system. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the naming system. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string|undefined;
  _publisher?: fhir.IFhirElement|undefined;
  /**
   * This is the primary organization.  Responsibility for some aspects of a namespace may be delegated.
   */
  responsible?: string|undefined;
  _responsible?: fhir.IFhirElement|undefined;
  /**
   * Allows filtering of naming systems that are appropriate for use versus not.
   */
  status: NamingSystemStatusEnum|null;
  _status?: fhir.IFhirElement|undefined;
  /**
   * This will most commonly be used for identifier namespaces, but categories could potentially be useful for code systems and authorities as well.
   */
  type?: fhir.ICodeableConcept|undefined;
  /**
   * Multiple identifiers may exist, either due to duplicate registration, regional rules, needs of different communication technologies, etc.
   */
  uniqueId: fhir.INamingSystemUniqueId[]|null;
  /**
   * Provides guidance on the use of the namespace, including the handling of formatting characters, use of upper vs. lower case, etc.
   */
  usage?: string|undefined;
  _usage?: fhir.IFhirElement|undefined;
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: fhir.IUsageContext[]|undefined;
}
/**
 * Multiple identifiers may exist, either due to duplicate registration, regional rules, needs of different communication technologies, etc.
 */
export class NamingSystemUniqueId extends fhir.BackboneElement implements fhir.INamingSystemUniqueId {
  /**
   * e.g. "must be used in Germany" or "was initially published in error with this value".
   */
  public comment?: string|undefined;
  public _comment?: fhir.FhirElement|undefined;
  /**
   * Within a registry, a given identifier should only be "active" for a single namespace at a time.  (Ideally, an identifier should only ever be associated with a single namespace across all time).
   */
  public period?: fhir.Period|undefined;
  /**
   * Indicates whether this identifier is the "preferred" identifier of this type.
   */
  public preferred?: boolean|undefined;
  public _preferred?: fhir.FhirElement|undefined;
  /**
   * Different identifier types may be used in different types of communications (OIDs for v3, URIs for FHIR, etc.).  Other includes RUIDs from v3, standard v2 code name strings, etc.
   */
  public type: NamingSystemUniqueIdTypeEnum|null;
  public _type?: fhir.FhirElement|undefined;
  /**
   * If the value is a URI intended for use as FHIR system identifier, the URI should not contain "\" or "?" or "," since this makes escaping very difficult.
   */
  public value: string|null;
  public _value?: fhir.FhirElement|undefined;
  /**
   * Default constructor for NamingSystemUniqueId - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.INamingSystemUniqueId> = {}) {
    super(source);
    if (source["comment"]) { this.comment = source.comment; }
    if (source["_comment"]) { this._comment = new fhir.FhirElement(source._comment!); }
    if (source["period"]) { this.period = new fhir.Period(source.period!); }
    if (source["preferred"]) { this.preferred = source.preferred; }
    if (source["_preferred"]) { this._preferred = new fhir.FhirElement(source._preferred!); }
    this.type = null;
    if (source["type"]) { this.type = source.type; }
    if (this.type === undefined) { this.type = null }
    if (source["_type"]) { this._type = new fhir.FhirElement(source._type!); }
    this.value = null;
    if (source["value"]) { this.value = source.value; }
    if (this.value === undefined) { this.value = null }
    if (source["_value"]) { this._value = new fhir.FhirElement(source._value!); }
  }
  /**
   * Check if the current NamingSystemUniqueId contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["type"] === undefined) { missingElements.push("type"); }
    if (this["value"] === undefined) { missingElements.push("value"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a NamingSystemUniqueId from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.INamingSystemUniqueId):NamingSystemUniqueId {
    var dest:NamingSystemUniqueId = new NamingSystemUniqueId(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `NamingSystemUniqueId is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types.
 */
export class NamingSystem extends fhir.DomainResource implements fhir.INamingSystem {
  /**
   * Resource Type Name
   */
  public override resourceType: "NamingSystem";
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  public contact?: fhir.ContactDetail[]|undefined;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the naming system. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  public date: string|null;
  public _date?: fhir.FhirElement|undefined;
  /**
   * This description can be used to capture details such as why the naming system was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the naming system as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the naming system is presumed to be the predominant language in the place the naming system was created).
   */
  public description?: string|undefined;
  public _description?: fhir.FhirElement|undefined;
  /**
   * It may be possible for the naming system to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  public jurisdiction?: fhir.CodeableConcept[]|undefined;
  /**
   * Indicates the purpose for the naming system - what kinds of things does it make unique?
   */
  public kind: NamingSystemKindEnum|null;
  public _kind?: fhir.FhirElement|undefined;
  /**
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.The"symbolic name" for an OID would be captured as an extension.
   */
  public name: string|null;
  public _name?: fhir.FhirElement|undefined;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the naming system is the organization or individual primarily responsible for the maintenance and upkeep of the naming system. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the naming system. This item SHOULD be populated unless the information is available from context.
   */
  public publisher?: string|undefined;
  public _publisher?: fhir.FhirElement|undefined;
  /**
   * This is the primary organization.  Responsibility for some aspects of a namespace may be delegated.
   */
  public responsible?: string|undefined;
  public _responsible?: fhir.FhirElement|undefined;
  /**
   * Allows filtering of naming systems that are appropriate for use versus not.
   */
  public status: NamingSystemStatusEnum|null;
  public _status?: fhir.FhirElement|undefined;
  /**
   * This will most commonly be used for identifier namespaces, but categories could potentially be useful for code systems and authorities as well.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Multiple identifiers may exist, either due to duplicate registration, regional rules, needs of different communication technologies, etc.
   */
  public uniqueId: fhir.NamingSystemUniqueId[]|null;
  /**
   * Provides guidance on the use of the namespace, including the handling of formatting characters, use of upper vs. lower case, etc.
   */
  public usage?: string|undefined;
  public _usage?: fhir.FhirElement|undefined;
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  public useContext?: fhir.UsageContext[]|undefined;
  /**
   * Default constructor for NamingSystem - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.INamingSystem> = {}) {
    super(source);
    this.resourceType = 'NamingSystem';
    if (source["contact"]) { this.contact = source.contact.map((x:Partial<fhir.IContactDetail>) => new fhir.ContactDetail(x)); }
    this.date = null;
    if (source["date"]) { this.date = source.date; }
    if (this.date === undefined) { this.date = null }
    if (source["_date"]) { this._date = new fhir.FhirElement(source._date!); }
    if (source["description"]) { this.description = source.description; }
    if (source["_description"]) { this._description = new fhir.FhirElement(source._description!); }
    if (source["jurisdiction"]) { this.jurisdiction = source.jurisdiction.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    this.kind = null;
    if (source["kind"]) { this.kind = source.kind; }
    if (this.kind === undefined) { this.kind = null }
    if (source["_kind"]) { this._kind = new fhir.FhirElement(source._kind!); }
    this.name = null;
    if (source["name"]) { this.name = source.name; }
    if (this.name === undefined) { this.name = null }
    if (source["_name"]) { this._name = new fhir.FhirElement(source._name!); }
    if (source["publisher"]) { this.publisher = source.publisher; }
    if (source["_publisher"]) { this._publisher = new fhir.FhirElement(source._publisher!); }
    if (source["responsible"]) { this.responsible = source.responsible; }
    if (source["_responsible"]) { this._responsible = new fhir.FhirElement(source._responsible!); }
    this.status = null;
    if (source["status"]) { this.status = source.status; }
    if (this.status === undefined) { this.status = null }
    if (source["_status"]) { this._status = new fhir.FhirElement(source._status!); }
    if (source["type"]) { this.type = new fhir.CodeableConcept(source.type!); }
    this.uniqueId = null;
    if (source["uniqueId"]) { this.uniqueId = source.uniqueId.map((x:Partial<fhir.INamingSystemUniqueId>) => new fhir.NamingSystemUniqueId(x)); }
    if (this.uniqueId === undefined) { this.uniqueId = null }
    if (source["usage"]) { this.usage = source.usage; }
    if (source["_usage"]) { this._usage = new fhir.FhirElement(source._usage!); }
    if (source["useContext"]) { this.useContext = source.useContext.map((x:Partial<fhir.IUsageContext>) => new fhir.UsageContext(x)); }
  }
  /**
   * Check if the current NamingSystem contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["date"] === undefined) { missingElements.push("date"); }
    if (this["kind"] === undefined) { missingElements.push("kind"); }
    if (this["name"] === undefined) { missingElements.push("name"); }
    if (this["status"] === undefined) { missingElements.push("status"); }
    if ((!this["uniqueId"]) || (this["uniqueId"].length === 0)) { missingElements.push("uniqueId"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a NamingSystem from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.INamingSystem):NamingSystem {
    var dest:NamingSystem = new NamingSystem(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `NamingSystem is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the NamingSystem.uniqueId.type field
 */
export enum NamingSystemUniqueIdTypeEnum {
  OID = "oid",
  UUID = "uuid",
  URI = "uri",
  OTHER = "other",
}
/**
 * Code Values for the NamingSystem.kind field
 */
export enum NamingSystemKindEnum {
  CODESYSTEM = "codesystem",
  IDENTIFIER = "identifier",
  ROOT = "root",
}
/**
 * Code Values for the NamingSystem.status field
 */
export enum NamingSystemStatusEnum {
  DRAFT = "draft",
  ACTIVE = "active",
  RETIRED = "retired",
  UNKNOWN = "unknown",
}
