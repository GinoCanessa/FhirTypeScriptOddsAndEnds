// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SupplyDelivery

import * as fhir from '../fhir.js';

import { SupplydeliveryStatusValueSet, SupplydeliveryStatusValueSetType,} from '../fhirValueSets/SupplydeliveryStatusValueSet.js';
import { SupplydeliveryStatusValueSetEnum } from '../valueSetEnums.js';
import { SupplydeliveryTypeValueSet, SupplydeliveryTypeValueSetType,} from '../fhirValueSets/SupplydeliveryTypeValueSet.js';
import { SupplydeliveryTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Valid arguments for the SupplyDeliverySuppliedItem type.
 */
export interface SupplyDeliverySuppliedItemArgs extends fhir.BackboneElementArgs {
  /**
   * The amount of supply that has been dispensed. Includes unit of measure.
   */
  quantity?: fhir.QuantityArgs|undefined;
  /**
   * Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
   */
  item?: fhir.CodeableConcept|fhir.Reference|undefined;
  /**
   * Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
   */
  itemCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
   */
  itemReference?: fhir.ReferenceArgs|undefined;
}

/**
 * The item that is being delivered or has been supplied.
 */
export class SupplyDeliverySuppliedItem extends fhir.BackboneElement {
  readonly __dataType:string = 'SupplyDeliverySuppliedItem';
  /**
   * The amount of supply that has been dispensed. Includes unit of measure.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
   */
  public item?: (fhir.CodeableConcept|fhir.Reference)|undefined;
  readonly __itemIsChoice:true = true;
  /**
   * Default constructor for SupplyDeliverySuppliedItem - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<SupplyDeliverySuppliedItemArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity); }
    if (source['item']) { this.item = source.item; }
    else if (source['itemCodeableConcept']) { this.item = new fhir.CodeableConcept(source.itemCodeableConcept); }
    else if (source['itemReference']) { this.item = new fhir.Reference(source.itemReference); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["quantity"]) { outcome.issue!.push(...this.quantity.doModelValidation().issue!); }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
/**
 * Valid arguments for the SupplyDelivery type.
 */
export interface SupplyDeliveryArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "SupplyDelivery"|undefined;
  /**
   * This identifier is typically assigned by the dispenser, and may be used to reference the delivery when exchanging information about it with other systems.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * A plan, proposal or order that is fulfilled in whole or in part by this event.
   */
  basedOn?: fhir.ReferenceArgs[]|undefined;
  /**
   * Not to be used to link an event to an Encounter - use Event.context for that.
   * [The allowed reference resources may be adjusted as appropriate for the event resource].
   */
  partOf?: fhir.ReferenceArgs[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status?: SupplydeliveryStatusValueSetEnum|undefined;
  /**
   * A link to a resource representing the person whom the delivered item is for.
   */
  patient?: fhir.ReferenceArgs|undefined;
  /**
   * Indicates the type of dispensing event that is performed. Examples include: Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * The item that is being delivered or has been supplied.
   */
  suppliedItem?: fhir.SupplyDeliverySuppliedItemArgs|undefined;
  /**
   * [The list of types may be constrained as appropriate for the type of event].
   */
  occurrence?: fhir.FhirDateTime|fhir.Period|fhir.Timing|undefined;
  /**
   * [The list of types may be constrained as appropriate for the type of event].
   */
  occurrenceDateTime?: fhir.FhirDateTime|string|undefined;
  /**
   * [The list of types may be constrained as appropriate for the type of event].
   */
  occurrencePeriod?: fhir.PeriodArgs|undefined;
  /**
   * [The list of types may be constrained as appropriate for the type of event].
   */
  occurrenceTiming?: fhir.TimingArgs|undefined;
  /**
   * The individual responsible for dispensing the medication, supplier or device.
   */
  supplier?: fhir.ReferenceArgs|undefined;
  /**
   * Identification of the facility/location where the Supply was shipped to, as part of the dispense event.
   */
  destination?: fhir.ReferenceArgs|undefined;
  /**
   * Identifies the person who picked up the Supply.
   */
  receiver?: fhir.ReferenceArgs[]|undefined;
}

/**
 * Record of delivery of what is supplied.
 */
export class SupplyDelivery extends fhir.DomainResource {
  readonly __dataType:string = 'SupplyDelivery';
  /**
   * Resource Type Name
   */
  public resourceType: "SupplyDelivery";
  /**
   * This identifier is typically assigned by the dispenser, and may be used to reference the delivery when exchanging information about it with other systems.
   */
  public identifier?: fhir.Identifier[]|undefined = [];
  /**
   * A plan, proposal or order that is fulfilled in whole or in part by this event.
   */
  public basedOn?: fhir.Reference[]|undefined = [];
  /**
   * Not to be used to link an event to an Encounter - use Event.context for that.
   * [The allowed reference resources may be adjusted as appropriate for the event resource].
   */
  public partOf?: fhir.Reference[]|undefined = [];
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  public status?: SupplydeliveryStatusValueSetEnum|undefined;
  /**
   * A link to a resource representing the person whom the delivered item is for.
   */
  public patient?: fhir.Reference|undefined;
  /**
   * Indicates the type of dispensing event that is performed. Examples include: Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * The item that is being delivered or has been supplied.
   */
  public suppliedItem?: fhir.SupplyDeliverySuppliedItem|undefined;
  /**
   * [The list of types may be constrained as appropriate for the type of event].
   */
  public occurrence?: (fhir.FhirDateTime|fhir.Period|fhir.Timing)|undefined;
  readonly __occurrenceIsChoice:true = true;
  /**
   * The individual responsible for dispensing the medication, supplier or device.
   */
  public supplier?: fhir.Reference|undefined;
  /**
   * Identification of the facility/location where the Supply was shipped to, as part of the dispense event.
   */
  public destination?: fhir.Reference|undefined;
  /**
   * Identifies the person who picked up the Supply.
   */
  public receiver?: fhir.Reference[]|undefined = [];
  /**
   * Default constructor for SupplyDelivery - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<SupplyDeliveryArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'SupplyDelivery';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['basedOn']) { this.basedOn = source.basedOn.map((x) => new fhir.Reference(x)); }
    if (source['partOf']) { this.partOf = source.partOf.map((x) => new fhir.Reference(x)); }
    if (source['status']) { this.status = source.status; }
    if (source['patient']) { this.patient = new fhir.Reference(source.patient); }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['suppliedItem']) { this.suppliedItem = new fhir.SupplyDeliverySuppliedItem(source.suppliedItem); }
    if (source['occurrence']) { this.occurrence = source.occurrence; }
    else if (source['occurrenceDateTime']) { this.occurrence = new fhir.FhirDateTime({value: source.occurrenceDateTime}); }
    else if (source['occurrencePeriod']) { this.occurrence = new fhir.Period(source.occurrencePeriod); }
    else if (source['occurrenceTiming']) { this.occurrence = new fhir.Timing(source.occurrenceTiming); }
    if (source['supplier']) { this.supplier = new fhir.Reference(source.supplier); }
    if (source['destination']) { this.destination = new fhir.Reference(source.destination); }
    if (source['receiver']) { this.receiver = source.receiver.map((x) => new fhir.Reference(x)); }
  }
  /**
   * Required-bound Value Set for status
   */
  public static statusRequiredValueSet():SupplydeliveryStatusValueSetType {
    return SupplydeliveryStatusValueSet;
  }
  /**
   * Required-bound Value Set for type
   */
  public static typeRequiredValueSet():SupplydeliveryTypeValueSetType {
    return SupplydeliveryTypeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['resourceType']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing,  diagnostics: "Missing required property resourceType:'SupplyDelivery' fhir: SupplyDelivery.resourceType:'SupplyDelivery'", }));
    }
    if (this["identifier"]) { this.identifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["basedOn"]) { this.basedOn.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["partOf"]) { this.partOf.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["patient"]) { outcome.issue!.push(...this.patient.doModelValidation().issue!); }
    if (this["type"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }
    if (this["suppliedItem"]) { outcome.issue!.push(...this.suppliedItem.doModelValidation().issue!); }
    if (this["supplier"]) { outcome.issue!.push(...this.supplier.doModelValidation().issue!); }
    if (this["destination"]) { outcome.issue!.push(...this.destination.doModelValidation().issue!); }
    if (this["receiver"]) { this.receiver.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
  /**
   * Function to strip invalid element values for serialization.
   */
  public toJSON() {
    return fhir.fhirToJson(this);
  }
}
