// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * The item that is being delivered or has been supplied.
 */
export type ISupplyDeliverySuppliedItem = fhir.IBackboneElement & {
  /**
   * Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
   */
  itemCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
   */
  itemReference?: fhir.IReference|undefined;
  /**
   * The amount of supply that has been dispensed. Includes unit of measure.
   */
  quantity?: fhir.IQuantity|undefined;
}
/**
 * Record of delivery of what is supplied.
 */
export type ISupplyDelivery = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "SupplyDelivery";
  /**
   * A plan, proposal or order that is fulfilled in whole or in part by this event.
   */
  basedOn?: fhir.IReference[]|undefined;
  /**
   * Identification of the facility/location where the Supply was shipped to, as part of the dispense event.
   */
  destination?: fhir.IReference|undefined;
  /**
   * This identifier is typically assigned by the dispenser, and may be used to reference the delivery when exchanging information about it with other systems.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * [The list of types may be constrained as appropriate for the type of event].
   */
  occurrenceDateTime?: string|undefined;
  _occurrenceDateTime?: fhir.IFhirElement|undefined;
  /**
   * [The list of types may be constrained as appropriate for the type of event].
   */
  occurrencePeriod?: fhir.IPeriod|undefined;
  /**
   * [The list of types may be constrained as appropriate for the type of event].
   */
  occurrenceTiming?: fhir.ITiming|undefined;
  /**
   * Not to be used to link an event to an Encounter - use Event.context for that.
   * [The allowed reference resources may be adjusted as appropriate for the event resource].
   */
  partOf?: fhir.IReference[]|undefined;
  /**
   * A link to a resource representing the person whom the delivered item is for.
   */
  patient?: fhir.IReference|undefined;
  /**
   * Identifies the person who picked up the Supply.
   */
  receiver?: fhir.IReference[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status?: SupplyDeliveryStatusEnum|undefined;
  _status?: fhir.IFhirElement|undefined;
  /**
   * The item that is being delivered or has been supplied.
   */
  suppliedItem?: fhir.ISupplyDeliverySuppliedItem|undefined;
  /**
   * The individual responsible for dispensing the medication, supplier or device.
   */
  supplier?: fhir.IReference|undefined;
  /**
   * Indicates the type of dispensing event that is performed. Examples include: Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
   */
  type?: fhir.ICodeableConcept|undefined;
}
/**
 * The item that is being delivered or has been supplied.
 */
export class SupplyDeliverySuppliedItem extends fhir.BackboneElement implements fhir.ISupplyDeliverySuppliedItem {
  /**
   * Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
   */
  public itemCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
   */
  public itemReference?: fhir.Reference|undefined;
  /**
   * The amount of supply that has been dispensed. Includes unit of measure.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * Default constructor for SupplyDeliverySuppliedItem - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.ISupplyDeliverySuppliedItem> = {}) {
    super(source);
    if (source["itemCodeableConcept"]) { this.itemCodeableConcept = new fhir.CodeableConcept(source.itemCodeableConcept!); }
    if (source["itemReference"]) { this.itemReference = new fhir.Reference(source.itemReference!); }
    if (source["quantity"]) { this.quantity = new fhir.Quantity(source.quantity!); }
  }
  /**
   * Check if the current SupplyDeliverySuppliedItem contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a SupplyDeliverySuppliedItem from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.ISupplyDeliverySuppliedItem):SupplyDeliverySuppliedItem {
    var dest:SupplyDeliverySuppliedItem = new SupplyDeliverySuppliedItem(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `SupplyDeliverySuppliedItem is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Record of delivery of what is supplied.
 */
export class SupplyDelivery extends fhir.DomainResource implements fhir.ISupplyDelivery {
  /**
   * Resource Type Name
   */
  public override resourceType: "SupplyDelivery";
  /**
   * A plan, proposal or order that is fulfilled in whole or in part by this event.
   */
  public basedOn?: fhir.Reference[]|undefined;
  /**
   * Identification of the facility/location where the Supply was shipped to, as part of the dispense event.
   */
  public destination?: fhir.Reference|undefined;
  /**
   * This identifier is typically assigned by the dispenser, and may be used to reference the delivery when exchanging information about it with other systems.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * [The list of types may be constrained as appropriate for the type of event].
   */
  public occurrenceDateTime?: string|undefined;
  public _occurrenceDateTime?: fhir.FhirElement|undefined;
  /**
   * [The list of types may be constrained as appropriate for the type of event].
   */
  public occurrencePeriod?: fhir.Period|undefined;
  /**
   * [The list of types may be constrained as appropriate for the type of event].
   */
  public occurrenceTiming?: fhir.Timing|undefined;
  /**
   * Not to be used to link an event to an Encounter - use Event.context for that.
   * [The allowed reference resources may be adjusted as appropriate for the event resource].
   */
  public partOf?: fhir.Reference[]|undefined;
  /**
   * A link to a resource representing the person whom the delivered item is for.
   */
  public patient?: fhir.Reference|undefined;
  /**
   * Identifies the person who picked up the Supply.
   */
  public receiver?: fhir.Reference[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  public status?: SupplyDeliveryStatusEnum|undefined;
  public _status?: fhir.FhirElement|undefined;
  /**
   * The item that is being delivered or has been supplied.
   */
  public suppliedItem?: fhir.SupplyDeliverySuppliedItem|undefined;
  /**
   * The individual responsible for dispensing the medication, supplier or device.
   */
  public supplier?: fhir.Reference|undefined;
  /**
   * Indicates the type of dispensing event that is performed. Examples include: Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for SupplyDelivery - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.ISupplyDelivery> = {}) {
    super(source);
    this.resourceType = 'SupplyDelivery';
    if (source["basedOn"]) { this.basedOn = source.basedOn.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["destination"]) { this.destination = new fhir.Reference(source.destination!); }
    if (source["identifier"]) { this.identifier = source.identifier.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    if (source["occurrenceDateTime"]) { this.occurrenceDateTime = source.occurrenceDateTime; }
    if (source["_occurrenceDateTime"]) { this._occurrenceDateTime = new fhir.FhirElement(source._occurrenceDateTime!); }
    if (source["occurrencePeriod"]) { this.occurrencePeriod = new fhir.Period(source.occurrencePeriod!); }
    if (source["occurrenceTiming"]) { this.occurrenceTiming = new fhir.Timing(source.occurrenceTiming!); }
    if (source["partOf"]) { this.partOf = source.partOf.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["patient"]) { this.patient = new fhir.Reference(source.patient!); }
    if (source["receiver"]) { this.receiver = source.receiver.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["status"]) { this.status = source.status; }
    if (source["_status"]) { this._status = new fhir.FhirElement(source._status!); }
    if (source["suppliedItem"]) { this.suppliedItem = new fhir.SupplyDeliverySuppliedItem(source.suppliedItem!); }
    if (source["supplier"]) { this.supplier = new fhir.Reference(source.supplier!); }
    if (source["type"]) { this.type = new fhir.CodeableConcept(source.type!); }
  }
  /**
   * Check if the current SupplyDelivery contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a SupplyDelivery from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.ISupplyDelivery):SupplyDelivery {
    var dest:SupplyDelivery = new SupplyDelivery(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `SupplyDelivery is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the SupplyDelivery.status field
 */
export enum SupplyDeliveryStatusEnum {
  IN_PROGRESS = "in-progress",
  COMPLETED = "completed",
  ABANDONED = "abandoned",
  ENTERED_IN_ERROR = "entered-in-error",
}
