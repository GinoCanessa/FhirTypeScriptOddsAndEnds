// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Range

import * as fhir from '../fhir.js'


/**
 * A set of ordered Quantities defined by a low and high limit.
 */
export type IRange = fhir.IFhirElement & { 
  /**
   * If the low element is missing, the low boundary is not known.
   */
  low?: fhir.IQuantity|undefined;
  /**
   * If the high element is missing, the high boundary is not known.
   */
  high?: fhir.IQuantity|undefined;
}

/**
 * A set of ordered Quantities defined by a low and high limit.
 */
export class Range extends fhir.FhirElement implements IRange {
  /**
   * If the low element is missing, the low boundary is not known.
   */
  public low?: fhir.Quantity|undefined;
  /**
   * If the high element is missing, the high boundary is not known.
   */
  public high?: fhir.Quantity|undefined;
  /**
   * Default constructor for Range - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IRange> = { }) {
    super(source);
    if (source['low']) { this.low = new fhir.Quantity(source.low!); }
    if (source['high']) { this.high = new fhir.Quantity(source.high!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["low"]) { results.push(...this.low.doModelValidation()); }
    if (this["high"]) { results.push(...this.high.doModelValidation()); }
    return results;
  }
}
