// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
  // Restricted to: Patient|Encounter|Observation
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * A set of ordered Quantities defined by a low and high limit.
 */
export interface IRange extends fhir.IFhirElement {
  /**
   * If the high element is missing, the high boundary is not known.
   */
  high?: fhir.IQuantity|undefined;
  /**
   * If the low element is missing, the low boundary is not known.
   */
  low?: fhir.IQuantity|undefined;
}
/**
 * A set of ordered Quantities defined by a low and high limit.
 */
export class Range extends fhir.FhirElement implements fhir.IRange {
  /**
   * If the high element is missing, the high boundary is not known.
   */
  public high?: fhir.Quantity|undefined;
  /**
   * If the low element is missing, the low boundary is not known.
   */
  public low?: fhir.Quantity|undefined;
  /**
   * Default constructor for Range - initializes required elements to null.
   */
  constructor() {
    super();
  }
  /**
   * Factory function to create a Range from an object that MAY NOT contain all required elements.
   */
  static override FactoryCreate(source:Partial<fhir.IRange>):Range {
    var dest:Partial<Range> = super.FactoryCreate(source) as Partial<Range>;
    if (source["high"] !== undefined) { dest.high = fhir.Quantity.FactoryCreate(source.high!); }
    if (source["low"] !== undefined) { dest.low = fhir.Quantity.FactoryCreate(source.low!); }
    return dest as Range;
  }
  /**
   * Check if the current Range contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a Range from an object that MUST contain all required elements.
   */
  static override FactoryCreateStrict(source:fhir.IRange):Range {
    var dest:Range = this.FactoryCreate(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) {
    throw `Range is missing elements: ${missingElements.join(", ")}`
     }
    return dest;
  }
}
