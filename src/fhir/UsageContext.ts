// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).
 */
export type IUsageContext = fhir.IFhirElement & {
  /**
   * A code that identifies the type of context being specified by this usage context.
   */
  code: fhir.ICoding|null;
  /**
   * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
   */
  valueCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
   */
  valueQuantity?: fhir.IQuantity|undefined;
  /**
   * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
   */
  valueRange?: fhir.IRange|undefined;
  /**
   * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
   */
  valueReference?: fhir.IReference|undefined;
}
/**
 * Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).
 */
export class UsageContext extends fhir.FhirElement implements fhir.IUsageContext {
  /**
   * A code that identifies the type of context being specified by this usage context.
   */
  public code: fhir.Coding|null;
  /**
   * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
   */
  public valueCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
   */
  public valueQuantity?: fhir.Quantity|undefined;
  /**
   * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
   */
  public valueRange?: fhir.Range|undefined;
  /**
   * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
   */
  public valueReference?: fhir.Reference|undefined;
  /**
   * Default constructor for UsageContext - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IUsageContext> = {}) {
    super(source);
    this.code = null;
    if (source["code"]) { this.code = new fhir.Coding(source.code!); }
    if (this.code === undefined) { this.code = null }
    if (source["valueCodeableConcept"]) { this.valueCodeableConcept = new fhir.CodeableConcept(source.valueCodeableConcept!); }
    if (source["valueQuantity"]) { this.valueQuantity = new fhir.Quantity(source.valueQuantity!); }
    if (source["valueRange"]) { this.valueRange = new fhir.Range(source.valueRange!); }
    if (source["valueReference"]) { this.valueReference = new fhir.Reference(source.valueReference!); }
  }
  /**
   * Check if the current UsageContext contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["code"] === undefined) { missingElements.push("code"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a UsageContext from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IUsageContext):UsageContext {
    var dest:UsageContext = new UsageContext(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `UsageContext is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
