// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: EnrollmentResponse

import * as fhir from '../fhir.js'

import { FmStatusValueSet, FmStatusValueSetType, FmStatusValueSetEnum } from '../fhirValueSets/FmStatusValueSet.js'
import { RemittanceOutcomeValueSet, RemittanceOutcomeValueSetType, RemittanceOutcomeValueSetEnum } from '../fhirValueSets/RemittanceOutcomeValueSet.js'

/**
 * This resource provides enrollment and plan details from the processing of an EnrollmentRequest resource.
 */
export type IEnrollmentResponse = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "EnrollmentResponse";
  /**
   * The Response business identifier.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the response as not currently valid.
   */
  status?: FmStatusValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: EnrollmentResponse.status
   */
  _status?: fhir.IFhirElement|undefined;
  /**
   * Original request resource reference.
   */
  request?: fhir.IReference|undefined;
  /**
   * Processing status: error, complete.
   */
  outcome?: RemittanceOutcomeValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: EnrollmentResponse.outcome
   */
  _outcome?: fhir.IFhirElement|undefined;
  /**
   * A description of the status of the adjudication.
   */
  disposition?: string|undefined;
  /**
   * Extended properties for primitive element: EnrollmentResponse.disposition
   */
  _disposition?: fhir.IFhirElement|undefined;
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  created?: string|undefined;
  /**
   * Extended properties for primitive element: EnrollmentResponse.created
   */
  _created?: fhir.IFhirElement|undefined;
  /**
   * The Insurer who produced this adjudicated response.
   */
  organization?: fhir.IReference|undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  requestProvider?: fhir.IReference|undefined;
}

/**
 * This resource provides enrollment and plan details from the processing of an EnrollmentRequest resource.
 */
export class EnrollmentResponse extends fhir.DomainResource implements IEnrollmentResponse {
  /**
   * Resource Type Name
   */
  public resourceType: "EnrollmentResponse";
  /**
   * The Response business identifier.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the response as not currently valid.
   */
  public status?: FmStatusValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: EnrollmentResponse.status
   */
  public _status?: fhir.FhirElement|undefined;
  /**
   * Original request resource reference.
   */
  public request?: fhir.Reference|undefined;
  /**
   * Processing status: error, complete.
   */
  public outcome?: RemittanceOutcomeValueSetEnum|undefined;
  /**
   * Extended properties for primitive element: EnrollmentResponse.outcome
   */
  public _outcome?: fhir.FhirElement|undefined;
  /**
   * A description of the status of the adjudication.
   */
  public disposition?: string|undefined;
  /**
   * Extended properties for primitive element: EnrollmentResponse.disposition
   */
  public _disposition?: fhir.FhirElement|undefined;
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  public created?: string|undefined;
  /**
   * Extended properties for primitive element: EnrollmentResponse.created
   */
  public _created?: fhir.FhirElement|undefined;
  /**
   * The Insurer who produced this adjudicated response.
   */
  public organization?: fhir.Reference|undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  public requestProvider?: fhir.Reference|undefined;
  /**
   * Default constructor for EnrollmentResponse - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IEnrollmentResponse> = { }) {
    super(source);
    this.resourceType = 'EnrollmentResponse';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['status']) { this.status = source.status; }
    if (source['_status']) { this._status = new fhir.FhirElement(source._status!); }
    if (source['request']) { this.request = new fhir.Reference(source.request!); }
    if (source['outcome']) { this.outcome = source.outcome; }
    if (source['_outcome']) { this._outcome = new fhir.FhirElement(source._outcome!); }
    if (source['disposition']) { this.disposition = source.disposition; }
    if (source['_disposition']) { this._disposition = new fhir.FhirElement(source._disposition!); }
    if (source['created']) { this.created = source.created; }
    if (source['_created']) { this._created = new fhir.FhirElement(source._created!); }
    if (source['organization']) { this.organization = new fhir.Reference(source.organization!); }
    if (source['requestProvider']) { this.requestProvider = new fhir.Reference(source.requestProvider!); }
  }
  /**
   * Required-bound Value Set for status
   */
  public statusRequiredValueSet():FmStatusValueSetType {
    return FmStatusValueSet;
  }
  /**
   * Required-bound Value Set for outcome
   */
  public outcomeRequiredValueSet():RemittanceOutcomeValueSetType {
    return RemittanceOutcomeValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: EnrollmentResponse.resourceType']); }
    if (this["identifier"]) { this.identifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_status"]) { results.push(...this._status.doModelValidation()); }
    if (this["request"]) { results.push(...this.request.doModelValidation()); }
    if (this["_outcome"]) { results.push(...this._outcome.doModelValidation()); }
    if (this["_disposition"]) { results.push(...this._disposition.doModelValidation()); }
    if (this["_created"]) { results.push(...this._created.doModelValidation()); }
    if (this["organization"]) { results.push(...this.organization.doModelValidation()); }
    if (this["requestProvider"]) { results.push(...this.requestProvider.doModelValidation()); }
    return results;
  }
}
