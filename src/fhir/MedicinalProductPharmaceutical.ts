// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Characteristics e.g. a products onset of action.
 */
export type IMedicinalProductPharmaceuticalCharacteristics = fhir.IBackboneElement & {
  /**
   * A coded characteristic.
   */
  code: fhir.ICodeableConcept|null;
  /**
   * The status of characteristic e.g. assigned or pending.
   */
  status?: fhir.ICodeableConcept|undefined;
}
/**
 * A species specific time during which consumption of animal product is not appropriate.
 */
export type IMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod = fhir.IBackboneElement & {
  /**
   * Extra information about the withdrawal period.
   */
  supportingInformation?: string|undefined;
  _supportingInformation?: fhir.IFhirElement|undefined;
  /**
   * Coded expression for the type of tissue for which the withdrawal period applues, e.g. meat, milk.
   */
  tissue: fhir.ICodeableConcept|null;
  /**
   * A value for the time.
   */
  value: fhir.IQuantity|null;
}
/**
 * A species for which this route applies.
 */
export type IMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies = fhir.IBackboneElement & {
  /**
   * Coded expression for the species.
   */
  code: fhir.ICodeableConcept|null;
  /**
   * A species specific time during which consumption of animal product is not appropriate.
   */
  withdrawalPeriod?: fhir.IMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod[]|undefined;
}
/**
 * The path by which the pharmaceutical product is taken into or makes contact with the body.
 */
export type IMedicinalProductPharmaceuticalRouteOfAdministration = fhir.IBackboneElement & {
  /**
   * Coded expression for the route.
   */
  code: fhir.ICodeableConcept|null;
  /**
   * The first dose (dose quantity) administered in humans can be specified, for a product under investigation, using a numerical value and its unit of measurement.
   */
  firstDose?: fhir.IQuantity|undefined;
  /**
   * The maximum dose per day (maximum dose quantity to be administered in any one 24-h period) that can be administered as per the protocol referenced in the clinical trial authorisation.
   */
  maxDosePerDay?: fhir.IQuantity|undefined;
  /**
   * The maximum dose per treatment period that can be administered as per the protocol referenced in the clinical trial authorisation.
   */
  maxDosePerTreatmentPeriod?: fhir.IRatio|undefined;
  /**
   * The maximum single dose that can be administered as per the protocol of a clinical trial can be specified using a numerical value and its unit of measurement.
   */
  maxSingleDose?: fhir.IQuantity|undefined;
  /**
   * The maximum treatment period during which an Investigational Medicinal Product can be administered as per the protocol referenced in the clinical trial authorisation.
   */
  maxTreatmentPeriod?: fhir.IDuration|undefined;
  /**
   * A species for which this route applies.
   */
  targetSpecies?: fhir.IMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies[]|undefined;
}
/**
 * A pharmaceutical product described in terms of its composition and dose form.
 */
export type IMedicinalProductPharmaceutical = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "MedicinalProductPharmaceutical";
  /**
   * The administrable dose form, after necessary reconstitution.
   */
  administrableDoseForm: fhir.ICodeableConcept|null;
  /**
   * Characteristics e.g. a products onset of action.
   */
  characteristics?: fhir.IMedicinalProductPharmaceuticalCharacteristics[]|undefined;
  /**
   * Accompanying device.
   */
  device?: fhir.IReference[]|undefined;
  /**
   * An identifier for the pharmaceutical medicinal product.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * Ingredient.
   */
  ingredient?: fhir.IReference[]|undefined;
  /**
   * The path by which the pharmaceutical product is taken into or makes contact with the body.
   */
  routeOfAdministration: fhir.IMedicinalProductPharmaceuticalRouteOfAdministration[]|null;
  /**
   * Todo.
   */
  unitOfPresentation?: fhir.ICodeableConcept|undefined;
}
/**
 * Characteristics e.g. a products onset of action.
 */
export class MedicinalProductPharmaceuticalCharacteristics extends fhir.BackboneElement implements fhir.IMedicinalProductPharmaceuticalCharacteristics {
  /**
   * A coded characteristic.
   */
  public code: fhir.CodeableConcept|null;
  /**
   * The status of characteristic e.g. assigned or pending.
   */
  public status?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for MedicinalProductPharmaceuticalCharacteristics - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedicinalProductPharmaceuticalCharacteristics> = {}) {
    super(source);
    this.code = null;
    if (source["code"]) { this.code = new fhir.CodeableConcept(source.code!); }
    if (this.code === undefined) { this.code = null }
    if (source["status"]) { this.status = new fhir.CodeableConcept(source.status!); }
  }
  /**
   * Check if the current MedicinalProductPharmaceuticalCharacteristics contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["code"] === undefined) { missingElements.push("code"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a MedicinalProductPharmaceuticalCharacteristics from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IMedicinalProductPharmaceuticalCharacteristics):MedicinalProductPharmaceuticalCharacteristics {
    var dest:MedicinalProductPharmaceuticalCharacteristics = new MedicinalProductPharmaceuticalCharacteristics(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `MedicinalProductPharmaceuticalCharacteristics is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * A species specific time during which consumption of animal product is not appropriate.
 */
export class MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod extends fhir.BackboneElement implements fhir.IMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod {
  /**
   * Extra information about the withdrawal period.
   */
  public supportingInformation?: string|undefined;
  public _supportingInformation?: fhir.FhirElement|undefined;
  /**
   * Coded expression for the type of tissue for which the withdrawal period applues, e.g. meat, milk.
   */
  public tissue: fhir.CodeableConcept|null;
  /**
   * A value for the time.
   */
  public value: fhir.Quantity|null;
  /**
   * Default constructor for MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod> = {}) {
    super(source);
    if (source["supportingInformation"]) { this.supportingInformation = source.supportingInformation; }
    if (source["_supportingInformation"]) { this._supportingInformation = new fhir.FhirElement(source._supportingInformation!); }
    this.tissue = null;
    if (source["tissue"]) { this.tissue = new fhir.CodeableConcept(source.tissue!); }
    if (this.tissue === undefined) { this.tissue = null }
    this.value = null;
    if (source["value"]) { this.value = new fhir.Quantity(source.value!); }
    if (this.value === undefined) { this.value = null }
  }
  /**
   * Check if the current MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["tissue"] === undefined) { missingElements.push("tissue"); }
    if (this["value"] === undefined) { missingElements.push("value"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod):MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod {
    var dest:MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod = new MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * A species for which this route applies.
 */
export class MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies extends fhir.BackboneElement implements fhir.IMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies {
  /**
   * Coded expression for the species.
   */
  public code: fhir.CodeableConcept|null;
  /**
   * A species specific time during which consumption of animal product is not appropriate.
   */
  public withdrawalPeriod?: fhir.MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod[]|undefined;
  /**
   * Default constructor for MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies> = {}) {
    super(source);
    this.code = null;
    if (source["code"]) { this.code = new fhir.CodeableConcept(source.code!); }
    if (this.code === undefined) { this.code = null }
    if (source["withdrawalPeriod"]) { this.withdrawalPeriod = source.withdrawalPeriod.map((x:Partial<fhir.IMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod>) => new fhir.MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod(x)); }
  }
  /**
   * Check if the current MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["code"] === undefined) { missingElements.push("code"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies):MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies {
    var dest:MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies = new MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * The path by which the pharmaceutical product is taken into or makes contact with the body.
 */
export class MedicinalProductPharmaceuticalRouteOfAdministration extends fhir.BackboneElement implements fhir.IMedicinalProductPharmaceuticalRouteOfAdministration {
  /**
   * Coded expression for the route.
   */
  public code: fhir.CodeableConcept|null;
  /**
   * The first dose (dose quantity) administered in humans can be specified, for a product under investigation, using a numerical value and its unit of measurement.
   */
  public firstDose?: fhir.Quantity|undefined;
  /**
   * The maximum dose per day (maximum dose quantity to be administered in any one 24-h period) that can be administered as per the protocol referenced in the clinical trial authorisation.
   */
  public maxDosePerDay?: fhir.Quantity|undefined;
  /**
   * The maximum dose per treatment period that can be administered as per the protocol referenced in the clinical trial authorisation.
   */
  public maxDosePerTreatmentPeriod?: fhir.Ratio|undefined;
  /**
   * The maximum single dose that can be administered as per the protocol of a clinical trial can be specified using a numerical value and its unit of measurement.
   */
  public maxSingleDose?: fhir.Quantity|undefined;
  /**
   * The maximum treatment period during which an Investigational Medicinal Product can be administered as per the protocol referenced in the clinical trial authorisation.
   */
  public maxTreatmentPeriod?: fhir.Duration|undefined;
  /**
   * A species for which this route applies.
   */
  public targetSpecies?: fhir.MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies[]|undefined;
  /**
   * Default constructor for MedicinalProductPharmaceuticalRouteOfAdministration - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedicinalProductPharmaceuticalRouteOfAdministration> = {}) {
    super(source);
    this.code = null;
    if (source["code"]) { this.code = new fhir.CodeableConcept(source.code!); }
    if (this.code === undefined) { this.code = null }
    if (source["firstDose"]) { this.firstDose = new fhir.Quantity(source.firstDose!); }
    if (source["maxDosePerDay"]) { this.maxDosePerDay = new fhir.Quantity(source.maxDosePerDay!); }
    if (source["maxDosePerTreatmentPeriod"]) { this.maxDosePerTreatmentPeriod = new fhir.Ratio(source.maxDosePerTreatmentPeriod!); }
    if (source["maxSingleDose"]) { this.maxSingleDose = new fhir.Quantity(source.maxSingleDose!); }
    if (source["maxTreatmentPeriod"]) { this.maxTreatmentPeriod = new fhir.Duration(source.maxTreatmentPeriod!); }
    if (source["targetSpecies"]) { this.targetSpecies = source.targetSpecies.map((x:Partial<fhir.IMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies>) => new fhir.MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies(x)); }
  }
  /**
   * Check if the current MedicinalProductPharmaceuticalRouteOfAdministration contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["code"] === undefined) { missingElements.push("code"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a MedicinalProductPharmaceuticalRouteOfAdministration from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IMedicinalProductPharmaceuticalRouteOfAdministration):MedicinalProductPharmaceuticalRouteOfAdministration {
    var dest:MedicinalProductPharmaceuticalRouteOfAdministration = new MedicinalProductPharmaceuticalRouteOfAdministration(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `MedicinalProductPharmaceuticalRouteOfAdministration is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * A pharmaceutical product described in terms of its composition and dose form.
 */
export class MedicinalProductPharmaceutical extends fhir.DomainResource implements fhir.IMedicinalProductPharmaceutical {
  /**
   * Resource Type Name
   */
  public override resourceType: "MedicinalProductPharmaceutical";
  /**
   * The administrable dose form, after necessary reconstitution.
   */
  public administrableDoseForm: fhir.CodeableConcept|null;
  /**
   * Characteristics e.g. a products onset of action.
   */
  public characteristics?: fhir.MedicinalProductPharmaceuticalCharacteristics[]|undefined;
  /**
   * Accompanying device.
   */
  public device?: fhir.Reference[]|undefined;
  /**
   * An identifier for the pharmaceutical medicinal product.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * Ingredient.
   */
  public ingredient?: fhir.Reference[]|undefined;
  /**
   * The path by which the pharmaceutical product is taken into or makes contact with the body.
   */
  public routeOfAdministration: fhir.MedicinalProductPharmaceuticalRouteOfAdministration[]|null;
  /**
   * Todo.
   */
  public unitOfPresentation?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for MedicinalProductPharmaceutical - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedicinalProductPharmaceutical> = {}) {
    super(source);
    this.resourceType = 'MedicinalProductPharmaceutical';
    this.administrableDoseForm = null;
    if (source["administrableDoseForm"]) { this.administrableDoseForm = new fhir.CodeableConcept(source.administrableDoseForm!); }
    if (this.administrableDoseForm === undefined) { this.administrableDoseForm = null }
    if (source["characteristics"]) { this.characteristics = source.characteristics.map((x:Partial<fhir.IMedicinalProductPharmaceuticalCharacteristics>) => new fhir.MedicinalProductPharmaceuticalCharacteristics(x)); }
    if (source["device"]) { this.device = source.device.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["identifier"]) { this.identifier = source.identifier.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    if (source["ingredient"]) { this.ingredient = source.ingredient.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    this.routeOfAdministration = null;
    if (source["routeOfAdministration"]) { this.routeOfAdministration = source.routeOfAdministration.map((x:Partial<fhir.IMedicinalProductPharmaceuticalRouteOfAdministration>) => new fhir.MedicinalProductPharmaceuticalRouteOfAdministration(x)); }
    if (this.routeOfAdministration === undefined) { this.routeOfAdministration = null }
    if (source["unitOfPresentation"]) { this.unitOfPresentation = new fhir.CodeableConcept(source.unitOfPresentation!); }
  }
  /**
   * Check if the current MedicinalProductPharmaceutical contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["administrableDoseForm"] === undefined) { missingElements.push("administrableDoseForm"); }
    if ((!this["routeOfAdministration"]) || (this["routeOfAdministration"].length === 0)) { missingElements.push("routeOfAdministration"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a MedicinalProductPharmaceutical from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IMedicinalProductPharmaceutical):MedicinalProductPharmaceutical {
    var dest:MedicinalProductPharmaceutical = new MedicinalProductPharmaceutical(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `MedicinalProductPharmaceutical is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
