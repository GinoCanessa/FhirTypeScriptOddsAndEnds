// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Slot

import * as fhir from '../fhir.js'

import { ServiceCategoryValueSet, ServiceCategoryValueSetType, ServiceCategoryValueSetEnum } from '../fhirValueSets/ServiceCategoryValueSet.js'
import { ServiceTypeValueSet, ServiceTypeValueSetType, ServiceTypeValueSetEnum } from '../fhirValueSets/ServiceTypeValueSet.js'
import { C80PracticeCodesValueSet, C80PracticeCodesValueSetType, C80PracticeCodesValueSetEnum } from '../fhirValueSets/C80PracticeCodesValueSet.js'
import { V20276ValueSet, V20276ValueSetType, V20276ValueSetEnum } from '../fhirValueSets/V20276ValueSet.js'
import { SlotstatusValueSet, SlotstatusValueSetType, SlotstatusValueSetEnum } from '../fhirValueSets/SlotstatusValueSet.js'

/**
 * A slot of time on a schedule that may be available for booking appointments.
 */
export type ISlot = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "Slot";
  /**
   * External Ids for this item.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * A broad categorization of the service that is to be performed during this appointment.
   */
  serviceCategory?: fhir.ICodeableConcept[]|undefined;
  /**
   * The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the availability resource.
   */
  serviceType?: fhir.ICodeableConcept[]|undefined;
  /**
   * The specialty of a practitioner that would be required to perform the service requested in this appointment.
   */
  specialty?: fhir.ICodeableConcept[]|undefined;
  /**
   * The style of appointment or patient that may be booked in the slot (not service type).
   */
  appointmentType?: fhir.ICodeableConcept|undefined;
  /**
   * The schedule resource that this slot defines an interval of status information.
   */
  schedule: fhir.IReference|null;
  /**
   * busy | free | busy-unavailable | busy-tentative | entered-in-error.
   */
  status: SlotstatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: Slot.status
   */
  _status?: fhir.IFhirElement|undefined;
  /**
   * Date/Time that the slot is to begin.
   */
  start: string|null;
  /**
   * Extended properties for primitive element: Slot.start
   */
  _start?: fhir.IFhirElement|undefined;
  /**
   * Date/Time that the slot is to conclude.
   */
  end: string|null;
  /**
   * Extended properties for primitive element: Slot.end
   */
  _end?: fhir.IFhirElement|undefined;
  /**
   * This slot has already been overbooked, appointments are unlikely to be accepted for this time.
   */
  overbooked?: boolean|undefined;
  /**
   * Extended properties for primitive element: Slot.overbooked
   */
  _overbooked?: fhir.IFhirElement|undefined;
  /**
   * Comments on the slot to describe any extended information. Such as custom constraints on the slot.
   */
  comment?: string|undefined;
  /**
   * Extended properties for primitive element: Slot.comment
   */
  _comment?: fhir.IFhirElement|undefined;
}

/**
 * A slot of time on a schedule that may be available for booking appointments.
 */
export class Slot extends fhir.DomainResource implements ISlot {
  /**
   * Resource Type Name
   */
  public resourceType: "Slot";
  /**
   * External Ids for this item.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * A broad categorization of the service that is to be performed during this appointment.
   */
  public serviceCategory?: fhir.CodeableConcept[]|undefined;
  /**
   * The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the availability resource.
   */
  public serviceType?: fhir.CodeableConcept[]|undefined;
  /**
   * The specialty of a practitioner that would be required to perform the service requested in this appointment.
   */
  public specialty?: fhir.CodeableConcept[]|undefined;
  /**
   * The style of appointment or patient that may be booked in the slot (not service type).
   */
  public appointmentType?: fhir.CodeableConcept|undefined;
  /**
   * The schedule resource that this slot defines an interval of status information.
   */
  public schedule: fhir.Reference|null;
  /**
   * busy | free | busy-unavailable | busy-tentative | entered-in-error.
   */
  public status: SlotstatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: Slot.status
   */
  public _status?: fhir.FhirElement|undefined;
  /**
   * Date/Time that the slot is to begin.
   */
  public start: string|null;
  /**
   * Extended properties for primitive element: Slot.start
   */
  public _start?: fhir.FhirElement|undefined;
  /**
   * Date/Time that the slot is to conclude.
   */
  public end: string|null;
  /**
   * Extended properties for primitive element: Slot.end
   */
  public _end?: fhir.FhirElement|undefined;
  /**
   * This slot has already been overbooked, appointments are unlikely to be accepted for this time.
   */
  public overbooked?: boolean|undefined;
  /**
   * Extended properties for primitive element: Slot.overbooked
   */
  public _overbooked?: fhir.FhirElement|undefined;
  /**
   * Comments on the slot to describe any extended information. Such as custom constraints on the slot.
   */
  public comment?: string|undefined;
  /**
   * Extended properties for primitive element: Slot.comment
   */
  public _comment?: fhir.FhirElement|undefined;
  /**
   * Default constructor for Slot - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ISlot> = { }) {
    super(source);
    this.resourceType = 'Slot';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['serviceCategory']) { this.serviceCategory = source.serviceCategory.map((x) => new fhir.CodeableConcept(x)); }
    if (source['serviceType']) { this.serviceType = source.serviceType.map((x) => new fhir.CodeableConcept(x)); }
    if (source['specialty']) { this.specialty = source.specialty.map((x) => new fhir.CodeableConcept(x)); }
    if (source['appointmentType']) { this.appointmentType = new fhir.CodeableConcept(source.appointmentType!); }
    if (source['schedule']) { this.schedule = new fhir.Reference(source.schedule!); }
    else { this.schedule = null; }
    if (source['status']) { this.status = source.status; }
    else { this.status = null; }
    if (source['_status']) { this._status = new fhir.FhirElement(source._status!); }
    if (source['start']) { this.start = source.start; }
    else { this.start = null; }
    if (source['_start']) { this._start = new fhir.FhirElement(source._start!); }
    if (source['end']) { this.end = source.end; }
    else { this.end = null; }
    if (source['_end']) { this._end = new fhir.FhirElement(source._end!); }
    if (source['overbooked']) { this.overbooked = source.overbooked; }
    if (source['_overbooked']) { this._overbooked = new fhir.FhirElement(source._overbooked!); }
    if (source['comment']) { this.comment = source.comment; }
    if (source['_comment']) { this._comment = new fhir.FhirElement(source._comment!); }
  }
  /**
   * Example-bound Value Set for serviceCategory
   */
  public static serviceCategoryExampleValueSet():ServiceCategoryValueSetType {
    return ServiceCategoryValueSet;
  }
  /**
   * Example-bound Value Set for serviceType
   */
  public static serviceTypeExampleValueSet():ServiceTypeValueSetType {
    return ServiceTypeValueSet;
  }
  /**
   * Preferred-bound Value Set for specialty
   */
  public static specialtyPreferredValueSet():C80PracticeCodesValueSetType {
    return C80PracticeCodesValueSet;
  }
  /**
   * Preferred-bound Value Set for appointmentType
   */
  public static appointmentTypePreferredValueSet():V20276ValueSetType {
    return V20276ValueSet;
  }
  /**
   * Required-bound Value Set for status
   */
  public static statusRequiredValueSet():SlotstatusValueSetType {
    return SlotstatusValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: Slot.resourceType']); }
    if (this["identifier"]) { this.identifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["serviceCategory"]) { this.serviceCategory.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["serviceType"]) { this.serviceType.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["specialty"]) { this.specialty.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["appointmentType"]) { results.push(...this.appointmentType.doModelValidation()); }
    if (!this["schedule"]) { results.push(["schedule",'Missing required element: Slot.schedule']); }
    if (this["schedule"]) { results.push(...this.schedule.doModelValidation()); }
    if (!this["status"]) { results.push(["status",'Missing required element: Slot.status']); }
    if (this["_status"]) { results.push(...this._status.doModelValidation()); }
    if (!this["start"]) { results.push(["start",'Missing required element: Slot.start']); }
    if (this["_start"]) { results.push(...this._start.doModelValidation()); }
    if (!this["end"]) { results.push(["end",'Missing required element: Slot.end']); }
    if (this["_end"]) { results.push(...this._end.doModelValidation()); }
    if (this["_overbooked"]) { results.push(...this._overbooked.doModelValidation()); }
    if (this["_comment"]) { results.push(...this._comment.doModelValidation()); }
    return results;
  }
}
