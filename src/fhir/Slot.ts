// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * A slot of time on a schedule that may be available for booking appointments.
 */
export type ISlot = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "Slot";
  /**
   * The style of appointment or patient that may be booked in the slot (not service type).
   */
  appointmentType?: fhir.ICodeableConcept|undefined;
  /**
   * Comments on the slot to describe any extended information. Such as custom constraints on the slot.
   */
  comment?: string|undefined;
  _comment?: fhir.IFhirElement|undefined;
  /**
   * Date/Time that the slot is to conclude.
   */
  end: string|null;
  _end?: fhir.IFhirElement|undefined;
  /**
   * External Ids for this item.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * This slot has already been overbooked, appointments are unlikely to be accepted for this time.
   */
  overbooked?: boolean|undefined;
  _overbooked?: fhir.IFhirElement|undefined;
  /**
   * The schedule resource that this slot defines an interval of status information.
   */
  schedule: fhir.IReference|null;
  /**
   * A broad categorization of the service that is to be performed during this appointment.
   */
  serviceCategory?: fhir.ICodeableConcept[]|undefined;
  /**
   * The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the availability resource.
   */
  serviceType?: fhir.ICodeableConcept[]|undefined;
  /**
   * The specialty of a practitioner that would be required to perform the service requested in this appointment.
   */
  specialty?: fhir.ICodeableConcept[]|undefined;
  /**
   * Date/Time that the slot is to begin.
   */
  start: string|null;
  _start?: fhir.IFhirElement|undefined;
  /**
   * busy | free | busy-unavailable | busy-tentative | entered-in-error.
   */
  status: SlotStatusEnum|null;
  _status?: fhir.IFhirElement|undefined;
}
/**
 * A slot of time on a schedule that may be available for booking appointments.
 */
export class Slot extends fhir.DomainResource implements fhir.ISlot {
  /**
   * Resource Type Name
   */
  public override resourceType: "Slot";
  /**
   * The style of appointment or patient that may be booked in the slot (not service type).
   */
  public appointmentType?: fhir.CodeableConcept|undefined;
  /**
   * Comments on the slot to describe any extended information. Such as custom constraints on the slot.
   */
  public comment?: string|undefined;
  public _comment?: fhir.FhirElement|undefined;
  /**
   * Date/Time that the slot is to conclude.
   */
  public end: string|null;
  public _end?: fhir.FhirElement|undefined;
  /**
   * External Ids for this item.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * This slot has already been overbooked, appointments are unlikely to be accepted for this time.
   */
  public overbooked?: boolean|undefined;
  public _overbooked?: fhir.FhirElement|undefined;
  /**
   * The schedule resource that this slot defines an interval of status information.
   */
  public schedule: fhir.Reference|null;
  /**
   * A broad categorization of the service that is to be performed during this appointment.
   */
  public serviceCategory?: fhir.CodeableConcept[]|undefined;
  /**
   * The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the availability resource.
   */
  public serviceType?: fhir.CodeableConcept[]|undefined;
  /**
   * The specialty of a practitioner that would be required to perform the service requested in this appointment.
   */
  public specialty?: fhir.CodeableConcept[]|undefined;
  /**
   * Date/Time that the slot is to begin.
   */
  public start: string|null;
  public _start?: fhir.FhirElement|undefined;
  /**
   * busy | free | busy-unavailable | busy-tentative | entered-in-error.
   */
  public status: SlotStatusEnum|null;
  public _status?: fhir.FhirElement|undefined;
  /**
   * Default constructor for Slot - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.ISlot> = {}) {
    super(source);
    this.resourceType = 'Slot';
    if (source["appointmentType"]) { this.appointmentType = new fhir.CodeableConcept(source.appointmentType!); }
    if (source["comment"]) { this.comment = source.comment; }
    if (source["_comment"]) { this._comment = new fhir.FhirElement(source._comment!); }
    this.end = null;
    if (source["end"]) { this.end = source.end; }
    if (this.end === undefined) { this.end = null }
    if (source["_end"]) { this._end = new fhir.FhirElement(source._end!); }
    if (source["identifier"]) { this.identifier = source.identifier.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    if (source["overbooked"]) { this.overbooked = source.overbooked; }
    if (source["_overbooked"]) { this._overbooked = new fhir.FhirElement(source._overbooked!); }
    this.schedule = null;
    if (source["schedule"]) { this.schedule = new fhir.Reference(source.schedule!); }
    if (this.schedule === undefined) { this.schedule = null }
    if (source["serviceCategory"]) { this.serviceCategory = source.serviceCategory.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["serviceType"]) { this.serviceType = source.serviceType.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["specialty"]) { this.specialty = source.specialty.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    this.start = null;
    if (source["start"]) { this.start = source.start; }
    if (this.start === undefined) { this.start = null }
    if (source["_start"]) { this._start = new fhir.FhirElement(source._start!); }
    this.status = null;
    if (source["status"]) { this.status = source.status; }
    if (this.status === undefined) { this.status = null }
    if (source["_status"]) { this._status = new fhir.FhirElement(source._status!); }
  }
  /**
   * Check if the current Slot contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["end"] === undefined) { missingElements.push("end"); }
    if (this["schedule"] === undefined) { missingElements.push("schedule"); }
    if (this["start"] === undefined) { missingElements.push("start"); }
    if (this["status"] === undefined) { missingElements.push("status"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a Slot from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.ISlot):Slot {
    var dest:Slot = new Slot(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `Slot is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the Slot.status field
 */
export enum SlotStatusEnum {
  BUSY = "busy",
  FREE = "free",
  BUSY_UNAVAILABLE = "busy-unavailable",
  BUSY_TENTATIVE = "busy-tentative",
  ENTERED_IN_ERROR = "entered-in-error",
}
