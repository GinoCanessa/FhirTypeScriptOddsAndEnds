// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProductContraindication

import * as fhir from '../fhir.js'


/**
 * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
 */
export type IMedicinalProductContraindicationOtherTherapy = fhir.IBackboneElement & { 
  /**
   * The type of relationship between the medicinal product indication or contraindication and another therapy.
   */
  therapyRelationshipType: fhir.ICodeableConcept|null;
  /**
   * Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication.
   */
  medicationCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication.
   */
  medicationReference?: fhir.IReference|undefined;
}

/**
 * The clinical particulars - indications, contraindications etc. of a medicinal product, including for regulatory purposes.
 */
export type IMedicinalProductContraindication = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "MedicinalProductContraindication";
  /**
   * The medication for which this is an indication.
   */
  subject?: fhir.IReference[]|undefined;
  /**
   * The disease, symptom or procedure for the contraindication.
   */
  disease?: fhir.ICodeableConcept|undefined;
  /**
   * The status of the disease or symptom for the contraindication.
   */
  diseaseStatus?: fhir.ICodeableConcept|undefined;
  /**
   * A comorbidity (concurrent condition) or coinfection.
   */
  comorbidity?: fhir.ICodeableConcept[]|undefined;
  /**
   * Information about the use of the medicinal product in relation to other therapies as part of the indication.
   */
  therapeuticIndication?: fhir.IReference[]|undefined;
  /**
   * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
   */
  otherTherapy?: fhir.IMedicinalProductContraindicationOtherTherapy[]|undefined;
  /**
   * The population group to which this applies.
   */
  population?: fhir.IPopulation[]|undefined;
}

/**
 * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
 */
export class MedicinalProductContraindicationOtherTherapy extends fhir.BackboneElement implements IMedicinalProductContraindicationOtherTherapy {
  /**
   * The type of relationship between the medicinal product indication or contraindication and another therapy.
   */
  public therapyRelationshipType: fhir.CodeableConcept|null;
  /**
   * Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication.
   */
  public medicationCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication.
   */
  public medicationReference?: fhir.Reference|undefined;
  /**
   * Default constructor for MedicinalProductContraindicationOtherTherapy - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IMedicinalProductContraindicationOtherTherapy> = { }) {
    super(source);
    if (source['therapyRelationshipType']) { this.therapyRelationshipType = new fhir.CodeableConcept(source.therapyRelationshipType!); }
    else { this.therapyRelationshipType = null; }
    if (source['medicationCodeableConcept']) { this.medicationCodeableConcept = new fhir.CodeableConcept(source.medicationCodeableConcept!); }
    if (source['medicationReference']) { this.medicationReference = new fhir.Reference(source.medicationReference!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["therapyRelationshipType"]) { results.push(["therapyRelationshipType",'Missing required element: MedicinalProductContraindication.otherTherapy.therapyRelationshipType']); }
    if (this["therapyRelationshipType"]) { results.push(...this.therapyRelationshipType.doModelValidation()); }
    if (this["medicationCodeableConcept"]) { results.push(...this.medicationCodeableConcept.doModelValidation()); }
    if (this["medicationReference"]) { results.push(...this.medicationReference.doModelValidation()); }
    return results;
  }
}

/**
 * The clinical particulars - indications, contraindications etc. of a medicinal product, including for regulatory purposes.
 */
export class MedicinalProductContraindication extends fhir.DomainResource implements IMedicinalProductContraindication {
  /**
   * Resource Type Name
   */
  public resourceType: "MedicinalProductContraindication";
  /**
   * The medication for which this is an indication.
   */
  public subject?: fhir.Reference[]|undefined;
  /**
   * The disease, symptom or procedure for the contraindication.
   */
  public disease?: fhir.CodeableConcept|undefined;
  /**
   * The status of the disease or symptom for the contraindication.
   */
  public diseaseStatus?: fhir.CodeableConcept|undefined;
  /**
   * A comorbidity (concurrent condition) or coinfection.
   */
  public comorbidity?: fhir.CodeableConcept[]|undefined;
  /**
   * Information about the use of the medicinal product in relation to other therapies as part of the indication.
   */
  public therapeuticIndication?: fhir.Reference[]|undefined;
  /**
   * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
   */
  public otherTherapy?: fhir.MedicinalProductContraindicationOtherTherapy[]|undefined;
  /**
   * The population group to which this applies.
   */
  public population?: fhir.Population[]|undefined;
  /**
   * Default constructor for MedicinalProductContraindication - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IMedicinalProductContraindication> = { }) {
    super(source);
    this.resourceType = 'MedicinalProductContraindication';
    if (source['subject']) { this.subject = source.subject.map((x) => new fhir.Reference(x)); }
    if (source['disease']) { this.disease = new fhir.CodeableConcept(source.disease!); }
    if (source['diseaseStatus']) { this.diseaseStatus = new fhir.CodeableConcept(source.diseaseStatus!); }
    if (source['comorbidity']) { this.comorbidity = source.comorbidity.map((x) => new fhir.CodeableConcept(x)); }
    if (source['therapeuticIndication']) { this.therapeuticIndication = source.therapeuticIndication.map((x) => new fhir.Reference(x)); }
    if (source['otherTherapy']) { this.otherTherapy = source.otherTherapy.map((x) => new fhir.MedicinalProductContraindicationOtherTherapy(x)); }
    if (source['population']) { this.population = source.population.map((x) => new fhir.Population(x)); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: MedicinalProductContraindication.resourceType']); }
    if (this["subject"]) { this.subject.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["disease"]) { results.push(...this.disease.doModelValidation()); }
    if (this["diseaseStatus"]) { results.push(...this.diseaseStatus.doModelValidation()); }
    if (this["comorbidity"]) { this.comorbidity.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["therapeuticIndication"]) { this.therapeuticIndication.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["otherTherapy"]) { this.otherTherapy.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["population"]) { this.population.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}
