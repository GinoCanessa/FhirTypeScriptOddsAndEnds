// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
 */
export type IMedicinalProductContraindicationOtherTherapy = fhir.IBackboneElement & {
  /**
   * Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication.
   */
  medicationCodeableConcept?: fhir.ICodeableConcept|undefined;
  /**
   * Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication.
   */
  medicationReference?: fhir.IReference|undefined;
  /**
   * The type of relationship between the medicinal product indication or contraindication and another therapy.
   */
  therapyRelationshipType: fhir.ICodeableConcept|null;
}
/**
 * The clinical particulars - indications, contraindications etc. of a medicinal product, including for regulatory purposes.
 */
export type IMedicinalProductContraindication = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "MedicinalProductContraindication";
  /**
   * A comorbidity (concurrent condition) or coinfection.
   */
  comorbidity?: fhir.ICodeableConcept[]|undefined;
  /**
   * The disease, symptom or procedure for the contraindication.
   */
  disease?: fhir.ICodeableConcept|undefined;
  /**
   * The status of the disease or symptom for the contraindication.
   */
  diseaseStatus?: fhir.ICodeableConcept|undefined;
  /**
   * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
   */
  otherTherapy?: fhir.IMedicinalProductContraindicationOtherTherapy[]|undefined;
  /**
   * The population group to which this applies.
   */
  population?: fhir.IPopulation[]|undefined;
  /**
   * The medication for which this is an indication.
   */
  subject?: fhir.IReference[]|undefined;
  /**
   * Information about the use of the medicinal product in relation to other therapies as part of the indication.
   */
  therapeuticIndication?: fhir.IReference[]|undefined;
}
/**
 * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
 */
export class MedicinalProductContraindicationOtherTherapy extends fhir.BackboneElement implements fhir.IMedicinalProductContraindicationOtherTherapy {
  /**
   * Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication.
   */
  public medicationCodeableConcept?: fhir.CodeableConcept|undefined;
  /**
   * Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication.
   */
  public medicationReference?: fhir.Reference|undefined;
  /**
   * The type of relationship between the medicinal product indication or contraindication and another therapy.
   */
  public therapyRelationshipType: fhir.CodeableConcept|null;
  /**
   * Default constructor for MedicinalProductContraindicationOtherTherapy - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedicinalProductContraindicationOtherTherapy> = {}) {
    super(source);
    if (source["medicationCodeableConcept"]) { this.medicationCodeableConcept = new fhir.CodeableConcept(source.medicationCodeableConcept!); }
    if (source["medicationReference"]) { this.medicationReference = new fhir.Reference(source.medicationReference!); }
    this.therapyRelationshipType = null;
    if (source["therapyRelationshipType"]) { this.therapyRelationshipType = new fhir.CodeableConcept(source.therapyRelationshipType!); }
    if (this.therapyRelationshipType === undefined) { this.therapyRelationshipType = null }
  }
  /**
   * Check if the current MedicinalProductContraindicationOtherTherapy contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["therapyRelationshipType"] === undefined) { missingElements.push("therapyRelationshipType"); }
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a MedicinalProductContraindicationOtherTherapy from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IMedicinalProductContraindicationOtherTherapy):MedicinalProductContraindicationOtherTherapy {
    var dest:MedicinalProductContraindicationOtherTherapy = new MedicinalProductContraindicationOtherTherapy(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `MedicinalProductContraindicationOtherTherapy is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * The clinical particulars - indications, contraindications etc. of a medicinal product, including for regulatory purposes.
 */
export class MedicinalProductContraindication extends fhir.DomainResource implements fhir.IMedicinalProductContraindication {
  /**
   * Resource Type Name
   */
  public override resourceType: "MedicinalProductContraindication";
  /**
   * A comorbidity (concurrent condition) or coinfection.
   */
  public comorbidity?: fhir.CodeableConcept[]|undefined;
  /**
   * The disease, symptom or procedure for the contraindication.
   */
  public disease?: fhir.CodeableConcept|undefined;
  /**
   * The status of the disease or symptom for the contraindication.
   */
  public diseaseStatus?: fhir.CodeableConcept|undefined;
  /**
   * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
   */
  public otherTherapy?: fhir.MedicinalProductContraindicationOtherTherapy[]|undefined;
  /**
   * The population group to which this applies.
   */
  public population?: fhir.Population[]|undefined;
  /**
   * The medication for which this is an indication.
   */
  public subject?: fhir.Reference[]|undefined;
  /**
   * Information about the use of the medicinal product in relation to other therapies as part of the indication.
   */
  public therapeuticIndication?: fhir.Reference[]|undefined;
  /**
   * Default constructor for MedicinalProductContraindication - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IMedicinalProductContraindication> = {}) {
    super(source);
    this.resourceType = 'MedicinalProductContraindication';
    if (source["comorbidity"]) { this.comorbidity = source.comorbidity.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["disease"]) { this.disease = new fhir.CodeableConcept(source.disease!); }
    if (source["diseaseStatus"]) { this.diseaseStatus = new fhir.CodeableConcept(source.diseaseStatus!); }
    if (source["otherTherapy"]) { this.otherTherapy = source.otherTherapy.map((x:Partial<fhir.IMedicinalProductContraindicationOtherTherapy>) => new fhir.MedicinalProductContraindicationOtherTherapy(x)); }
    if (source["population"]) { this.population = source.population.map((x:Partial<fhir.IPopulation>) => new fhir.Population(x)); }
    if (source["subject"]) { this.subject = source.subject.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["therapeuticIndication"]) { this.therapeuticIndication = source.therapeuticIndication.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
  }
  /**
   * Check if the current MedicinalProductContraindication contains all required elements.
   */
  override CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.CheckRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a MedicinalProductContraindication from an object that MUST contain all required elements.
   */
  static override FromStrict(source:fhir.IMedicinalProductContraindication):MedicinalProductContraindication {
    var dest:MedicinalProductContraindication = new MedicinalProductContraindication(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `MedicinalProductContraindication is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
