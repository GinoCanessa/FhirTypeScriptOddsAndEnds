// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Base definition for all elements in a resource.
 */
export type IFhirElement = {
  /**
   * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
   */
  extension?: fhir.IExtension[]|undefined;
  /**
   * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
   */
  id?: string|undefined;
  _id?: fhir.IFhirElement|undefined;
}
/**
 * Base definition for all elements in a resource.
 */
export class FhirElement implements fhir.IFhirElement {
  /**
   * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
   */
  public extension?: fhir.Extension[]|undefined;
  /**
   * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
   */
  public id?: string|undefined;
  public _id?: fhir.FhirElement|undefined;
  /**
   * Default constructor for FhirElement - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IFhirElement> = {}) {
    if (source["extension"]) { this.extension = source.extension.map((x:Partial<fhir.IExtension>) => new fhir.Extension(x)); }
    if (source["id"]) { this.id = source.id; }
    if (source["_id"]) { this._id = new fhir.FhirElement(source._id!); }
  }
  /**
   * Check if the current FhirElement contains all required elements.
   */
  CheckRequiredElements():string[] {
    var missingElements:string[] = [];
    return missingElements;
  }
  /**
   * Factory function to create a FhirElement from an object that MUST contain all required elements.
   */
  static FromStrict(source:fhir.IFhirElement):FhirElement {
    var dest:FhirElement = new FhirElement(source);
    var missingElements:string[] = dest.CheckRequiredElements();
    if (missingElements.length !== 0) { throw `FhirElement is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
