// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir'
/**
 * Indicates who performed the immunization event.
 */
export type IImmunizationPerformer = fhir.IBackboneElement & {
  /**
   * When the individual practitioner who performed the action is known, it is best to send.
   */
  actor: fhir.IReference|null;
  /**
   * Describes the type of performance (e.g. ordering provider, administering provider, etc.).
   */
  function?: fhir.ICodeableConcept|undefined;
}
/**
 * Educational material presented to the patient (or guardian) at the time of vaccine administration.
 */
export type IImmunizationEducation = fhir.IBackboneElement & {
  /**
   * Identifier of the material presented to the patient.
   */
  documentType?: string|undefined;
  _documentType?: fhir.IFhirElement|undefined;
  /**
   * Date the educational material was given to the patient.
   */
  presentationDate?: string|undefined;
  _presentationDate?: fhir.IFhirElement|undefined;
  /**
   * Date the educational material was published.
   */
  publicationDate?: string|undefined;
  _publicationDate?: fhir.IFhirElement|undefined;
  /**
   * Reference pointer to the educational material given to the patient if the information was on line.
   */
  reference?: string|undefined;
  _reference?: fhir.IFhirElement|undefined;
}
/**
 * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
 */
export type IImmunizationReaction = fhir.IBackboneElement & {
  /**
   * Date of reaction to the immunization.
   */
  date?: string|undefined;
  _date?: fhir.IFhirElement|undefined;
  /**
   * Details of the reaction.
   */
  detail?: fhir.IReference|undefined;
  /**
   * Self-reported indicator.
   */
  reported?: boolean|undefined;
  _reported?: fhir.IFhirElement|undefined;
}
/**
 * The protocol (set of recommendations) being followed by the provider who administered the dose.
 */
export type IImmunizationProtocolApplied = fhir.IBackboneElement & {
  /**
   * Indicates the authority who published the protocol (e.g. ACIP) that is being followed.
   */
  authority?: fhir.IReference|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  doseNumberPositiveInt?: number|undefined;
  _doseNumberPositiveInt?: fhir.IFhirElement|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  doseNumberString?: string|undefined;
  _doseNumberString?: fhir.IFhirElement|undefined;
  /**
   * One possible path to achieve presumed immunity against a disease - within the context of an authority.
   */
  series?: string|undefined;
  _series?: fhir.IFhirElement|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  seriesDosesPositiveInt?: number|undefined;
  _seriesDosesPositiveInt?: fhir.IFhirElement|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  seriesDosesString?: string|undefined;
  _seriesDosesString?: fhir.IFhirElement|undefined;
  /**
   * The vaccine preventable disease the dose is being administered against.
   */
  targetDisease?: fhir.ICodeableConcept[]|undefined;
}
/**
 * Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
 */
export type IImmunization = fhir.IDomainResource & {
  /**
   * Resource Type Name
   */
  resourceType: "Immunization";
  /**
   * The quantity of vaccine product that was administered.
   */
  doseQuantity?: fhir.IQuantity|undefined;
  /**
   * Educational material presented to the patient (or guardian) at the time of vaccine administration.
   */
  education?: fhir.IImmunizationEducation[]|undefined;
  /**
   * The visit or admission or other contact between patient and health care provider the immunization was performed as part of.
   */
  encounter?: fhir.IReference|undefined;
  /**
   * Date vaccine batch expires.
   */
  expirationDate?: string|undefined;
  _expirationDate?: fhir.IFhirElement|undefined;
  /**
   * Indicates the source of the vaccine actually administered. This may be different than the patient eligibility (e.g. the patient may be eligible for a publically purchased vaccine but due to inventory issues, vaccine purchased with private funds was actually administered).
   */
  fundingSource?: fhir.ICodeableConcept|undefined;
  /**
   * A unique identifier assigned to this immunization record.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * Typically, the recognition of the dose being sub-potent is retrospective, after the administration (ex. notification of a manufacturer recall after administration). However, in the case of a partial administration (the patient moves unexpectedly and only some of the dose is actually administered), subpotency may be recognized immediately, but it is still important to record the event.
   */
  isSubpotent?: boolean|undefined;
  _isSubpotent?: fhir.IFhirElement|undefined;
  /**
   * The service delivery location where the vaccine administration occurred.
   */
  location?: fhir.IReference|undefined;
  /**
   * Lot number of the  vaccine product.
   */
  lotNumber?: string|undefined;
  _lotNumber?: fhir.IFhirElement|undefined;
  /**
   * Name of vaccine manufacturer.
   */
  manufacturer?: fhir.IReference|undefined;
  /**
   * Extra information about the immunization that is not conveyed by the other attributes.
   */
  note?: fhir.IAnnotation[]|undefined;
  /**
   * When immunizations are given a specific date and time should always be known.   When immunizations are patient reported, a specific date might not be known.  Although partial dates are allowed, an adult patient might not be able to recall the year a childhood immunization was given. An exact date is always preferable, but the use of the String data type is acceptable when an exact date is not known. A small number of vaccines (e.g. live oral typhoid vaccine) are given as a series of patient self-administered dose over a span of time. In cases like this, often, only the first dose (typically a provider supervised dose) is recorded with the occurrence indicating the date/time of the first dose.
   */
  occurrenceDateTime?: string|undefined;
  _occurrenceDateTime?: fhir.IFhirElement|undefined;
  /**
   * When immunizations are given a specific date and time should always be known.   When immunizations are patient reported, a specific date might not be known.  Although partial dates are allowed, an adult patient might not be able to recall the year a childhood immunization was given. An exact date is always preferable, but the use of the String data type is acceptable when an exact date is not known. A small number of vaccines (e.g. live oral typhoid vaccine) are given as a series of patient self-administered dose over a span of time. In cases like this, often, only the first dose (typically a provider supervised dose) is recorded with the occurrence indicating the date/time of the first dose.
   */
  occurrenceString?: string|undefined;
  _occurrenceString?: fhir.IFhirElement|undefined;
  /**
   * The patient who either received or did not receive the immunization.
   */
  patient: fhir.IReference|null;
  /**
   * Indicates who performed the immunization event.
   */
  performer?: fhir.IImmunizationPerformer[]|undefined;
  /**
   * Reflects the “reliability” of the content.
   */
  primarySource?: boolean|undefined;
  _primarySource?: fhir.IFhirElement|undefined;
  /**
   * Indicates a patient's eligibility for a funding program.
   */
  programEligibility?: fhir.ICodeableConcept[]|undefined;
  /**
   * The protocol (set of recommendations) being followed by the provider who administered the dose.
   */
  protocolApplied?: fhir.IImmunizationProtocolApplied[]|undefined;
  /**
   * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
   */
  reaction?: fhir.IImmunizationReaction[]|undefined;
  /**
   * Reasons why the vaccine was administered.
   */
  reasonCode?: fhir.ICodeableConcept[]|undefined;
  /**
   * Condition, Observation or DiagnosticReport that supports why the immunization was administered.
   */
  reasonReference?: fhir.IReference[]|undefined;
  /**
   * The date the occurrence of the immunization was first captured in the record - potentially significantly after the occurrence of the event.
   */
  recorded?: string|undefined;
  _recorded?: fhir.IFhirElement|undefined;
  /**
   * Should not be populated if primarySource = True, not required even if primarySource = False.
   */
  reportOrigin?: fhir.ICodeableConcept|undefined;
  /**
   * The path by which the vaccine product is taken into the body.
   */
  route?: fhir.ICodeableConcept|undefined;
  /**
   * Body site where vaccine was administered.
   */
  site?: fhir.ICodeableConcept|undefined;
  /**
   * Will generally be set to show that the immunization has been completed or not done.  This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ImmunizationStatusEnum|null;
  _status?: fhir.IFhirElement|undefined;
  /**
   * This is generally only used for the status of "not-done". The reason for performing the immunization event is captured in reasonCode, not here.
   */
  statusReason?: fhir.ICodeableConcept|undefined;
  /**
   * Reason why a dose is considered to be subpotent.
   */
  subpotentReason?: fhir.ICodeableConcept[]|undefined;
  /**
   * Vaccine that was administered or was to be administered.
   */
  vaccineCode: fhir.ICodeableConcept|null;
}
/**
 * Indicates who performed the immunization event.
 */
export class ImmunizationPerformer extends fhir.BackboneElement implements fhir.IImmunizationPerformer {
  /**
   * When the individual practitioner who performed the action is known, it is best to send.
   */
  public actor: fhir.Reference|null;
  /**
   * Describes the type of performance (e.g. ordering provider, administering provider, etc.).
   */
  public function?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for ImmunizationPerformer - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IImmunizationPerformer> = {}) {
    super(source);
    this.actor = null;
    if (source["actor"]) { this.actor = new fhir.Reference(source.actor!); }
    if (this.actor === undefined) { this.actor = null }
    if (source["function"]) { this.function = new fhir.CodeableConcept(source.function!); }
  }
  /**
   * Check if the current ImmunizationPerformer contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["actor"] === undefined) { missingElements.push("actor"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ImmunizationPerformer from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IImmunizationPerformer):ImmunizationPerformer {
    var dest:ImmunizationPerformer = new ImmunizationPerformer(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `ImmunizationPerformer is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Educational material presented to the patient (or guardian) at the time of vaccine administration.
 */
export class ImmunizationEducation extends fhir.BackboneElement implements fhir.IImmunizationEducation {
  /**
   * Identifier of the material presented to the patient.
   */
  public documentType?: string|undefined;
  public _documentType?: fhir.FhirElement|undefined;
  /**
   * Date the educational material was given to the patient.
   */
  public presentationDate?: string|undefined;
  public _presentationDate?: fhir.FhirElement|undefined;
  /**
   * Date the educational material was published.
   */
  public publicationDate?: string|undefined;
  public _publicationDate?: fhir.FhirElement|undefined;
  /**
   * Reference pointer to the educational material given to the patient if the information was on line.
   */
  public reference?: string|undefined;
  public _reference?: fhir.FhirElement|undefined;
  /**
   * Default constructor for ImmunizationEducation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IImmunizationEducation> = {}) {
    super(source);
    if (source["documentType"]) { this.documentType = source.documentType; }
    if (source["_documentType"]) { this._documentType = new fhir.FhirElement(source._documentType!); }
    if (source["presentationDate"]) { this.presentationDate = source.presentationDate; }
    if (source["_presentationDate"]) { this._presentationDate = new fhir.FhirElement(source._presentationDate!); }
    if (source["publicationDate"]) { this.publicationDate = source.publicationDate; }
    if (source["_publicationDate"]) { this._publicationDate = new fhir.FhirElement(source._publicationDate!); }
    if (source["reference"]) { this.reference = source.reference; }
    if (source["_reference"]) { this._reference = new fhir.FhirElement(source._reference!); }
  }
  /**
   * Check if the current ImmunizationEducation contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ImmunizationEducation from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IImmunizationEducation):ImmunizationEducation {
    var dest:ImmunizationEducation = new ImmunizationEducation(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `ImmunizationEducation is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
 */
export class ImmunizationReaction extends fhir.BackboneElement implements fhir.IImmunizationReaction {
  /**
   * Date of reaction to the immunization.
   */
  public date?: string|undefined;
  public _date?: fhir.FhirElement|undefined;
  /**
   * Details of the reaction.
   */
  public detail?: fhir.Reference|undefined;
  /**
   * Self-reported indicator.
   */
  public reported?: boolean|undefined;
  public _reported?: fhir.FhirElement|undefined;
  /**
   * Default constructor for ImmunizationReaction - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IImmunizationReaction> = {}) {
    super(source);
    if (source["date"]) { this.date = source.date; }
    if (source["_date"]) { this._date = new fhir.FhirElement(source._date!); }
    if (source["detail"]) { this.detail = new fhir.Reference(source.detail!); }
    if (source["reported"]) { this.reported = source.reported; }
    if (source["_reported"]) { this._reported = new fhir.FhirElement(source._reported!); }
  }
  /**
   * Check if the current ImmunizationReaction contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ImmunizationReaction from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IImmunizationReaction):ImmunizationReaction {
    var dest:ImmunizationReaction = new ImmunizationReaction(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `ImmunizationReaction is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * The protocol (set of recommendations) being followed by the provider who administered the dose.
 */
export class ImmunizationProtocolApplied extends fhir.BackboneElement implements fhir.IImmunizationProtocolApplied {
  /**
   * Indicates the authority who published the protocol (e.g. ACIP) that is being followed.
   */
  public authority?: fhir.Reference|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  public doseNumberPositiveInt?: number|undefined;
  public _doseNumberPositiveInt?: fhir.FhirElement|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  public doseNumberString?: string|undefined;
  public _doseNumberString?: fhir.FhirElement|undefined;
  /**
   * One possible path to achieve presumed immunity against a disease - within the context of an authority.
   */
  public series?: string|undefined;
  public _series?: fhir.FhirElement|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  public seriesDosesPositiveInt?: number|undefined;
  public _seriesDosesPositiveInt?: fhir.FhirElement|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  public seriesDosesString?: string|undefined;
  public _seriesDosesString?: fhir.FhirElement|undefined;
  /**
   * The vaccine preventable disease the dose is being administered against.
   */
  public targetDisease?: fhir.CodeableConcept[]|undefined;
  /**
   * Default constructor for ImmunizationProtocolApplied - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IImmunizationProtocolApplied> = {}) {
    super(source);
    if (source["authority"]) { this.authority = new fhir.Reference(source.authority!); }
    if (source["doseNumberPositiveInt"]) { this.doseNumberPositiveInt = source.doseNumberPositiveInt; }
    if (source["_doseNumberPositiveInt"]) { this._doseNumberPositiveInt = new fhir.FhirElement(source._doseNumberPositiveInt!); }
    if (source["doseNumberString"]) { this.doseNumberString = source.doseNumberString; }
    if (source["_doseNumberString"]) { this._doseNumberString = new fhir.FhirElement(source._doseNumberString!); }
    if (source["series"]) { this.series = source.series; }
    if (source["_series"]) { this._series = new fhir.FhirElement(source._series!); }
    if (source["seriesDosesPositiveInt"]) { this.seriesDosesPositiveInt = source.seriesDosesPositiveInt; }
    if (source["_seriesDosesPositiveInt"]) { this._seriesDosesPositiveInt = new fhir.FhirElement(source._seriesDosesPositiveInt!); }
    if (source["seriesDosesString"]) { this.seriesDosesString = source.seriesDosesString; }
    if (source["_seriesDosesString"]) { this._seriesDosesString = new fhir.FhirElement(source._seriesDosesString!); }
    if (source["targetDisease"]) { this.targetDisease = source.targetDisease.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
  }
  /**
   * Check if the current ImmunizationProtocolApplied contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a ImmunizationProtocolApplied from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IImmunizationProtocolApplied):ImmunizationProtocolApplied {
    var dest:ImmunizationProtocolApplied = new ImmunizationProtocolApplied(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `ImmunizationProtocolApplied is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
 */
export class Immunization extends fhir.DomainResource implements fhir.IImmunization {
  /**
   * Resource Type Name
   */
  public override resourceType: "Immunization";
  /**
   * The quantity of vaccine product that was administered.
   */
  public doseQuantity?: fhir.Quantity|undefined;
  /**
   * Educational material presented to the patient (or guardian) at the time of vaccine administration.
   */
  public education?: fhir.ImmunizationEducation[]|undefined;
  /**
   * The visit or admission or other contact between patient and health care provider the immunization was performed as part of.
   */
  public encounter?: fhir.Reference|undefined;
  /**
   * Date vaccine batch expires.
   */
  public expirationDate?: string|undefined;
  public _expirationDate?: fhir.FhirElement|undefined;
  /**
   * Indicates the source of the vaccine actually administered. This may be different than the patient eligibility (e.g. the patient may be eligible for a publically purchased vaccine but due to inventory issues, vaccine purchased with private funds was actually administered).
   */
  public fundingSource?: fhir.CodeableConcept|undefined;
  /**
   * A unique identifier assigned to this immunization record.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * Typically, the recognition of the dose being sub-potent is retrospective, after the administration (ex. notification of a manufacturer recall after administration). However, in the case of a partial administration (the patient moves unexpectedly and only some of the dose is actually administered), subpotency may be recognized immediately, but it is still important to record the event.
   */
  public isSubpotent?: boolean|undefined;
  public _isSubpotent?: fhir.FhirElement|undefined;
  /**
   * The service delivery location where the vaccine administration occurred.
   */
  public location?: fhir.Reference|undefined;
  /**
   * Lot number of the  vaccine product.
   */
  public lotNumber?: string|undefined;
  public _lotNumber?: fhir.FhirElement|undefined;
  /**
   * Name of vaccine manufacturer.
   */
  public manufacturer?: fhir.Reference|undefined;
  /**
   * Extra information about the immunization that is not conveyed by the other attributes.
   */
  public note?: fhir.Annotation[]|undefined;
  /**
   * When immunizations are given a specific date and time should always be known.   When immunizations are patient reported, a specific date might not be known.  Although partial dates are allowed, an adult patient might not be able to recall the year a childhood immunization was given. An exact date is always preferable, but the use of the String data type is acceptable when an exact date is not known. A small number of vaccines (e.g. live oral typhoid vaccine) are given as a series of patient self-administered dose over a span of time. In cases like this, often, only the first dose (typically a provider supervised dose) is recorded with the occurrence indicating the date/time of the first dose.
   */
  public occurrenceDateTime?: string|undefined;
  public _occurrenceDateTime?: fhir.FhirElement|undefined;
  /**
   * When immunizations are given a specific date and time should always be known.   When immunizations are patient reported, a specific date might not be known.  Although partial dates are allowed, an adult patient might not be able to recall the year a childhood immunization was given. An exact date is always preferable, but the use of the String data type is acceptable when an exact date is not known. A small number of vaccines (e.g. live oral typhoid vaccine) are given as a series of patient self-administered dose over a span of time. In cases like this, often, only the first dose (typically a provider supervised dose) is recorded with the occurrence indicating the date/time of the first dose.
   */
  public occurrenceString?: string|undefined;
  public _occurrenceString?: fhir.FhirElement|undefined;
  /**
   * The patient who either received or did not receive the immunization.
   */
  public patient: fhir.Reference|null;
  /**
   * Indicates who performed the immunization event.
   */
  public performer?: fhir.ImmunizationPerformer[]|undefined;
  /**
   * Reflects the “reliability” of the content.
   */
  public primarySource?: boolean|undefined;
  public _primarySource?: fhir.FhirElement|undefined;
  /**
   * Indicates a patient's eligibility for a funding program.
   */
  public programEligibility?: fhir.CodeableConcept[]|undefined;
  /**
   * The protocol (set of recommendations) being followed by the provider who administered the dose.
   */
  public protocolApplied?: fhir.ImmunizationProtocolApplied[]|undefined;
  /**
   * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
   */
  public reaction?: fhir.ImmunizationReaction[]|undefined;
  /**
   * Reasons why the vaccine was administered.
   */
  public reasonCode?: fhir.CodeableConcept[]|undefined;
  /**
   * Condition, Observation or DiagnosticReport that supports why the immunization was administered.
   */
  public reasonReference?: fhir.Reference[]|undefined;
  /**
   * The date the occurrence of the immunization was first captured in the record - potentially significantly after the occurrence of the event.
   */
  public recorded?: string|undefined;
  public _recorded?: fhir.FhirElement|undefined;
  /**
   * Should not be populated if primarySource = True, not required even if primarySource = False.
   */
  public reportOrigin?: fhir.CodeableConcept|undefined;
  /**
   * The path by which the vaccine product is taken into the body.
   */
  public route?: fhir.CodeableConcept|undefined;
  /**
   * Body site where vaccine was administered.
   */
  public site?: fhir.CodeableConcept|undefined;
  /**
   * Will generally be set to show that the immunization has been completed or not done.  This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  public status: ImmunizationStatusEnum|null;
  public _status?: fhir.FhirElement|undefined;
  /**
   * This is generally only used for the status of "not-done". The reason for performing the immunization event is captured in reasonCode, not here.
   */
  public statusReason?: fhir.CodeableConcept|undefined;
  /**
   * Reason why a dose is considered to be subpotent.
   */
  public subpotentReason?: fhir.CodeableConcept[]|undefined;
  /**
   * Vaccine that was administered or was to be administered.
   */
  public vaccineCode: fhir.CodeableConcept|null;
  /**
   * Default constructor for Immunization - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<fhir.IImmunization> = {}) {
    super(source);
    this.resourceType = 'Immunization';
    if (source["doseQuantity"]) { this.doseQuantity = new fhir.Quantity(source.doseQuantity!); }
    if (source["education"]) { this.education = source.education.map((x:Partial<fhir.IImmunizationEducation>) => new fhir.ImmunizationEducation(x)); }
    if (source["encounter"]) { this.encounter = new fhir.Reference(source.encounter!); }
    if (source["expirationDate"]) { this.expirationDate = source.expirationDate; }
    if (source["_expirationDate"]) { this._expirationDate = new fhir.FhirElement(source._expirationDate!); }
    if (source["fundingSource"]) { this.fundingSource = new fhir.CodeableConcept(source.fundingSource!); }
    if (source["identifier"]) { this.identifier = source.identifier.map((x:Partial<fhir.IIdentifier>) => new fhir.Identifier(x)); }
    if (source["isSubpotent"]) { this.isSubpotent = source.isSubpotent; }
    if (source["_isSubpotent"]) { this._isSubpotent = new fhir.FhirElement(source._isSubpotent!); }
    if (source["location"]) { this.location = new fhir.Reference(source.location!); }
    if (source["lotNumber"]) { this.lotNumber = source.lotNumber; }
    if (source["_lotNumber"]) { this._lotNumber = new fhir.FhirElement(source._lotNumber!); }
    if (source["manufacturer"]) { this.manufacturer = new fhir.Reference(source.manufacturer!); }
    if (source["note"]) { this.note = source.note.map((x:Partial<fhir.IAnnotation>) => new fhir.Annotation(x)); }
    if (source["occurrenceDateTime"]) { this.occurrenceDateTime = source.occurrenceDateTime; }
    if (source["_occurrenceDateTime"]) { this._occurrenceDateTime = new fhir.FhirElement(source._occurrenceDateTime!); }
    if (source["occurrenceString"]) { this.occurrenceString = source.occurrenceString; }
    if (source["_occurrenceString"]) { this._occurrenceString = new fhir.FhirElement(source._occurrenceString!); }
    this.patient = null;
    if (source["patient"]) { this.patient = new fhir.Reference(source.patient!); }
    if (this.patient === undefined) { this.patient = null }
    if (source["performer"]) { this.performer = source.performer.map((x:Partial<fhir.IImmunizationPerformer>) => new fhir.ImmunizationPerformer(x)); }
    if (source["primarySource"]) { this.primarySource = source.primarySource; }
    if (source["_primarySource"]) { this._primarySource = new fhir.FhirElement(source._primarySource!); }
    if (source["programEligibility"]) { this.programEligibility = source.programEligibility.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["protocolApplied"]) { this.protocolApplied = source.protocolApplied.map((x:Partial<fhir.IImmunizationProtocolApplied>) => new fhir.ImmunizationProtocolApplied(x)); }
    if (source["reaction"]) { this.reaction = source.reaction.map((x:Partial<fhir.IImmunizationReaction>) => new fhir.ImmunizationReaction(x)); }
    if (source["reasonCode"]) { this.reasonCode = source.reasonCode.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    if (source["reasonReference"]) { this.reasonReference = source.reasonReference.map((x:Partial<fhir.IReference>) => new fhir.Reference(x)); }
    if (source["recorded"]) { this.recorded = source.recorded; }
    if (source["_recorded"]) { this._recorded = new fhir.FhirElement(source._recorded!); }
    if (source["reportOrigin"]) { this.reportOrigin = new fhir.CodeableConcept(source.reportOrigin!); }
    if (source["route"]) { this.route = new fhir.CodeableConcept(source.route!); }
    if (source["site"]) { this.site = new fhir.CodeableConcept(source.site!); }
    this.status = null;
    if (source["status"]) { this.status = source.status; }
    if (this.status === undefined) { this.status = null }
    if (source["_status"]) { this._status = new fhir.FhirElement(source._status!); }
    if (source["statusReason"]) { this.statusReason = new fhir.CodeableConcept(source.statusReason!); }
    if (source["subpotentReason"]) { this.subpotentReason = source.subpotentReason.map((x:Partial<fhir.ICodeableConcept>) => new fhir.CodeableConcept(x)); }
    this.vaccineCode = null;
    if (source["vaccineCode"]) { this.vaccineCode = new fhir.CodeableConcept(source.vaccineCode!); }
    if (this.vaccineCode === undefined) { this.vaccineCode = null }
  }
  /**
   * Check if the current Immunization contains all required elements.
   */
  override checkRequiredElements():string[] {
    var missingElements:string[] = [];
    if (this["patient"] === undefined) { missingElements.push("patient"); }
    if (this["status"] === undefined) { missingElements.push("status"); }
    if (this["vaccineCode"] === undefined) { missingElements.push("vaccineCode"); }
    var parentMissing:string[] = super.checkRequiredElements();
    missingElements.push(...parentMissing);
    return missingElements;
  }
  /**
   * Factory function to create a Immunization from an object that MUST contain all required elements.
   */
  static override fromStrict(source:fhir.IImmunization):Immunization {
    var dest:Immunization = new Immunization(source);
    var missingElements:string[] = dest.checkRequiredElements();
    if (missingElements.length !== 0) { throw `Immunization is missing elements: ${missingElements.join(", ")}` }
    return dest;
  }
}
/**
 * Code Values for the Immunization.status field
 */
export enum ImmunizationStatusEnum {
  COMPLETED = "completed",
  ENTERED_IN_ERROR = "entered-in-error",
  NOT_DONE = "not-done",
}
