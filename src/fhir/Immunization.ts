// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Immunization

import * as fhir from '../fhir.js'

import { ImmunizationFunctionValueSet, ImmunizationFunctionValueSetType, ImmunizationFunctionValueSetEnum } from '../fhirValueSets/ImmunizationFunctionValueSet.js'
import { ImmunizationTargetDiseaseValueSet, ImmunizationTargetDiseaseValueSetType, ImmunizationTargetDiseaseValueSetEnum } from '../fhirValueSets/ImmunizationTargetDiseaseValueSet.js'
import { ImmunizationStatusValueSet, ImmunizationStatusValueSetType, ImmunizationStatusValueSetEnum } from '../fhirValueSets/ImmunizationStatusValueSet.js'
import { ImmunizationStatusReasonValueSet, ImmunizationStatusReasonValueSetType, ImmunizationStatusReasonValueSetEnum } from '../fhirValueSets/ImmunizationStatusReasonValueSet.js'
import { VaccineCodeValueSet, VaccineCodeValueSetType, VaccineCodeValueSetEnum } from '../fhirValueSets/VaccineCodeValueSet.js'
import { ImmunizationOriginValueSet, ImmunizationOriginValueSetType, ImmunizationOriginValueSetEnum } from '../fhirValueSets/ImmunizationOriginValueSet.js'
import { ImmunizationSiteValueSet, ImmunizationSiteValueSetType, ImmunizationSiteValueSetEnum } from '../fhirValueSets/ImmunizationSiteValueSet.js'
import { ImmunizationRouteValueSet, ImmunizationRouteValueSetType, ImmunizationRouteValueSetEnum } from '../fhirValueSets/ImmunizationRouteValueSet.js'
import { ImmunizationReasonValueSet, ImmunizationReasonValueSetType, ImmunizationReasonValueSetEnum } from '../fhirValueSets/ImmunizationReasonValueSet.js'
import { ImmunizationSubpotentReasonValueSet, ImmunizationSubpotentReasonValueSetType, ImmunizationSubpotentReasonValueSetEnum } from '../fhirValueSets/ImmunizationSubpotentReasonValueSet.js'
import { ImmunizationProgramEligibilityValueSet, ImmunizationProgramEligibilityValueSetType, ImmunizationProgramEligibilityValueSetEnum } from '../fhirValueSets/ImmunizationProgramEligibilityValueSet.js'
import { ImmunizationFundingSourceValueSet, ImmunizationFundingSourceValueSetType, ImmunizationFundingSourceValueSetEnum } from '../fhirValueSets/ImmunizationFundingSourceValueSet.js'

/**
 * Indicates who performed the immunization event.
 */
export type IImmunizationPerformer = fhir.IBackboneElement & { 
  /**
   * Describes the type of performance (e.g. ordering provider, administering provider, etc.).
   */
  function?: fhir.ICodeableConcept|undefined;
  /**
   * When the individual practitioner who performed the action is known, it is best to send.
   */
  actor: fhir.IReference|null;
}

/**
 * Educational material presented to the patient (or guardian) at the time of vaccine administration.
 */
export type IImmunizationEducation = fhir.IBackboneElement & { 
  /**
   * Identifier of the material presented to the patient.
   */
  documentType?: string|undefined;
  /**
   * Extended properties for primitive element: Immunization.education.documentType
   */
  _documentType?: fhir.IFhirElement|undefined;
  /**
   * Reference pointer to the educational material given to the patient if the information was on line.
   */
  reference?: string|undefined;
  /**
   * Extended properties for primitive element: Immunization.education.reference
   */
  _reference?: fhir.IFhirElement|undefined;
  /**
   * Date the educational material was published.
   */
  publicationDate?: string|undefined;
  /**
   * Extended properties for primitive element: Immunization.education.publicationDate
   */
  _publicationDate?: fhir.IFhirElement|undefined;
  /**
   * Date the educational material was given to the patient.
   */
  presentationDate?: string|undefined;
  /**
   * Extended properties for primitive element: Immunization.education.presentationDate
   */
  _presentationDate?: fhir.IFhirElement|undefined;
}

/**
 * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
 */
export type IImmunizationReaction = fhir.IBackboneElement & { 
  /**
   * Date of reaction to the immunization.
   */
  date?: string|undefined;
  /**
   * Extended properties for primitive element: Immunization.reaction.date
   */
  _date?: fhir.IFhirElement|undefined;
  /**
   * Details of the reaction.
   */
  detail?: fhir.IReference|undefined;
  /**
   * Self-reported indicator.
   */
  reported?: boolean|undefined;
  /**
   * Extended properties for primitive element: Immunization.reaction.reported
   */
  _reported?: fhir.IFhirElement|undefined;
}

/**
 * The protocol (set of recommendations) being followed by the provider who administered the dose.
 */
export type IImmunizationProtocolApplied = fhir.IBackboneElement & { 
  /**
   * One possible path to achieve presumed immunity against a disease - within the context of an authority.
   */
  series?: string|undefined;
  /**
   * Extended properties for primitive element: Immunization.protocolApplied.series
   */
  _series?: fhir.IFhirElement|undefined;
  /**
   * Indicates the authority who published the protocol (e.g. ACIP) that is being followed.
   */
  authority?: fhir.IReference|undefined;
  /**
   * The vaccine preventable disease the dose is being administered against.
   */
  targetDisease?: fhir.ICodeableConcept[]|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  doseNumberPositiveInt?: number|undefined;
  /**
   * Extended properties for primitive element: Immunization.protocolApplied.doseNumber[x]
   */
  _doseNumberPositiveInt?: fhir.IFhirElement|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  doseNumberString?: string|undefined;
  /**
   * Extended properties for primitive element: Immunization.protocolApplied.doseNumber[x]
   */
  _doseNumberString?: fhir.IFhirElement|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  seriesDosesPositiveInt?: number|undefined;
  /**
   * Extended properties for primitive element: Immunization.protocolApplied.seriesDoses[x]
   */
  _seriesDosesPositiveInt?: fhir.IFhirElement|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  seriesDosesString?: string|undefined;
  /**
   * Extended properties for primitive element: Immunization.protocolApplied.seriesDoses[x]
   */
  _seriesDosesString?: fhir.IFhirElement|undefined;
}

/**
 * Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
 */
export type IImmunization = fhir.IDomainResource & { 
  /**
   * Resource Type Name
   */
  resourceType: "Immunization";
  /**
   * A unique identifier assigned to this immunization record.
   */
  identifier?: fhir.IIdentifier[]|undefined;
  /**
   * Will generally be set to show that the immunization has been completed or not done.  This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ImmunizationStatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: Immunization.status
   */
  _status?: fhir.IFhirElement|undefined;
  /**
   * This is generally only used for the status of "not-done". The reason for performing the immunization event is captured in reasonCode, not here.
   */
  statusReason?: fhir.ICodeableConcept|undefined;
  /**
   * Vaccine that was administered or was to be administered.
   */
  vaccineCode: fhir.ICodeableConcept|null;
  /**
   * The patient who either received or did not receive the immunization.
   */
  patient: fhir.IReference|null;
  /**
   * The visit or admission or other contact between patient and health care provider the immunization was performed as part of.
   */
  encounter?: fhir.IReference|undefined;
  /**
   * When immunizations are given a specific date and time should always be known.   When immunizations are patient reported, a specific date might not be known.  Although partial dates are allowed, an adult patient might not be able to recall the year a childhood immunization was given. An exact date is always preferable, but the use of the String data type is acceptable when an exact date is not known. A small number of vaccines (e.g. live oral typhoid vaccine) are given as a series of patient self-administered dose over a span of time. In cases like this, often, only the first dose (typically a provider supervised dose) is recorded with the occurrence indicating the date/time of the first dose.
   */
  occurrenceDateTime?: string|undefined;
  /**
   * Extended properties for primitive element: Immunization.occurrence[x]
   */
  _occurrenceDateTime?: fhir.IFhirElement|undefined;
  /**
   * When immunizations are given a specific date and time should always be known.   When immunizations are patient reported, a specific date might not be known.  Although partial dates are allowed, an adult patient might not be able to recall the year a childhood immunization was given. An exact date is always preferable, but the use of the String data type is acceptable when an exact date is not known. A small number of vaccines (e.g. live oral typhoid vaccine) are given as a series of patient self-administered dose over a span of time. In cases like this, often, only the first dose (typically a provider supervised dose) is recorded with the occurrence indicating the date/time of the first dose.
   */
  occurrenceString?: string|undefined;
  /**
   * Extended properties for primitive element: Immunization.occurrence[x]
   */
  _occurrenceString?: fhir.IFhirElement|undefined;
  /**
   * The date the occurrence of the immunization was first captured in the record - potentially significantly after the occurrence of the event.
   */
  recorded?: string|undefined;
  /**
   * Extended properties for primitive element: Immunization.recorded
   */
  _recorded?: fhir.IFhirElement|undefined;
  /**
   * Reflects the “reliability” of the content.
   */
  primarySource?: boolean|undefined;
  /**
   * Extended properties for primitive element: Immunization.primarySource
   */
  _primarySource?: fhir.IFhirElement|undefined;
  /**
   * Should not be populated if primarySource = True, not required even if primarySource = False.
   */
  reportOrigin?: fhir.ICodeableConcept|undefined;
  /**
   * The service delivery location where the vaccine administration occurred.
   */
  location?: fhir.IReference|undefined;
  /**
   * Name of vaccine manufacturer.
   */
  manufacturer?: fhir.IReference|undefined;
  /**
   * Lot number of the  vaccine product.
   */
  lotNumber?: string|undefined;
  /**
   * Extended properties for primitive element: Immunization.lotNumber
   */
  _lotNumber?: fhir.IFhirElement|undefined;
  /**
   * Date vaccine batch expires.
   */
  expirationDate?: string|undefined;
  /**
   * Extended properties for primitive element: Immunization.expirationDate
   */
  _expirationDate?: fhir.IFhirElement|undefined;
  /**
   * Body site where vaccine was administered.
   */
  site?: fhir.ICodeableConcept|undefined;
  /**
   * The path by which the vaccine product is taken into the body.
   */
  route?: fhir.ICodeableConcept|undefined;
  /**
   * The quantity of vaccine product that was administered.
   */
  doseQuantity?: fhir.IQuantity|undefined;
  /**
   * Indicates who performed the immunization event.
   */
  performer?: fhir.IImmunizationPerformer[]|undefined;
  /**
   * Extra information about the immunization that is not conveyed by the other attributes.
   */
  note?: fhir.IAnnotation[]|undefined;
  /**
   * Reasons why the vaccine was administered.
   */
  reasonCode?: fhir.ICodeableConcept[]|undefined;
  /**
   * Condition, Observation or DiagnosticReport that supports why the immunization was administered.
   */
  reasonReference?: fhir.IReference[]|undefined;
  /**
   * Typically, the recognition of the dose being sub-potent is retrospective, after the administration (ex. notification of a manufacturer recall after administration). However, in the case of a partial administration (the patient moves unexpectedly and only some of the dose is actually administered), subpotency may be recognized immediately, but it is still important to record the event.
   */
  isSubpotent?: boolean|undefined;
  /**
   * Extended properties for primitive element: Immunization.isSubpotent
   */
  _isSubpotent?: fhir.IFhirElement|undefined;
  /**
   * Reason why a dose is considered to be subpotent.
   */
  subpotentReason?: fhir.ICodeableConcept[]|undefined;
  /**
   * Educational material presented to the patient (or guardian) at the time of vaccine administration.
   */
  education?: fhir.IImmunizationEducation[]|undefined;
  /**
   * Indicates a patient's eligibility for a funding program.
   */
  programEligibility?: fhir.ICodeableConcept[]|undefined;
  /**
   * Indicates the source of the vaccine actually administered. This may be different than the patient eligibility (e.g. the patient may be eligible for a publically purchased vaccine but due to inventory issues, vaccine purchased with private funds was actually administered).
   */
  fundingSource?: fhir.ICodeableConcept|undefined;
  /**
   * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
   */
  reaction?: fhir.IImmunizationReaction[]|undefined;
  /**
   * The protocol (set of recommendations) being followed by the provider who administered the dose.
   */
  protocolApplied?: fhir.IImmunizationProtocolApplied[]|undefined;
}

/**
 * Indicates who performed the immunization event.
 */
export class ImmunizationPerformer extends fhir.BackboneElement implements IImmunizationPerformer {
  /**
   * Describes the type of performance (e.g. ordering provider, administering provider, etc.).
   */
  public function?: fhir.CodeableConcept|undefined;
  /**
   * When the individual practitioner who performed the action is known, it is best to send.
   */
  public actor: fhir.Reference|null;
  /**
   * Default constructor for ImmunizationPerformer - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IImmunizationPerformer> = { }) {
    super(source);
    if (source['function']) { this.function = new fhir.CodeableConcept(source.function!); }
    if (source['actor']) { this.actor = new fhir.Reference(source.actor!); }
    else { this.actor = null; }
  }
  /**
   * Extensible-bound Value Set for function
   */
  public functionExtensibleValueSet():ImmunizationFunctionValueSetType {
    return ImmunizationFunctionValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["function"]) { results.push(...this.function.doModelValidation()); }
    if (!this["actor"]) { results.push(["actor",'Missing required element: Immunization.performer.actor']); }
    if (this["actor"]) { results.push(...this.actor.doModelValidation()); }
    return results;
  }
}

/**
 * Educational material presented to the patient (or guardian) at the time of vaccine administration.
 */
export class ImmunizationEducation extends fhir.BackboneElement implements IImmunizationEducation {
  /**
   * Identifier of the material presented to the patient.
   */
  public documentType?: string|undefined;
  /**
   * Extended properties for primitive element: Immunization.education.documentType
   */
  public _documentType?: fhir.FhirElement|undefined;
  /**
   * Reference pointer to the educational material given to the patient if the information was on line.
   */
  public reference?: string|undefined;
  /**
   * Extended properties for primitive element: Immunization.education.reference
   */
  public _reference?: fhir.FhirElement|undefined;
  /**
   * Date the educational material was published.
   */
  public publicationDate?: string|undefined;
  /**
   * Extended properties for primitive element: Immunization.education.publicationDate
   */
  public _publicationDate?: fhir.FhirElement|undefined;
  /**
   * Date the educational material was given to the patient.
   */
  public presentationDate?: string|undefined;
  /**
   * Extended properties for primitive element: Immunization.education.presentationDate
   */
  public _presentationDate?: fhir.FhirElement|undefined;
  /**
   * Default constructor for ImmunizationEducation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IImmunizationEducation> = { }) {
    super(source);
    if (source['documentType']) { this.documentType = source.documentType; }
    if (source['_documentType']) { this._documentType = new fhir.FhirElement(source._documentType!); }
    if (source['reference']) { this.reference = source.reference; }
    if (source['_reference']) { this._reference = new fhir.FhirElement(source._reference!); }
    if (source['publicationDate']) { this.publicationDate = source.publicationDate; }
    if (source['_publicationDate']) { this._publicationDate = new fhir.FhirElement(source._publicationDate!); }
    if (source['presentationDate']) { this.presentationDate = source.presentationDate; }
    if (source['_presentationDate']) { this._presentationDate = new fhir.FhirElement(source._presentationDate!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["_documentType"]) { results.push(...this._documentType.doModelValidation()); }
    if (this["_reference"]) { results.push(...this._reference.doModelValidation()); }
    if (this["_publicationDate"]) { results.push(...this._publicationDate.doModelValidation()); }
    if (this["_presentationDate"]) { results.push(...this._presentationDate.doModelValidation()); }
    return results;
  }
}

/**
 * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
 */
export class ImmunizationReaction extends fhir.BackboneElement implements IImmunizationReaction {
  /**
   * Date of reaction to the immunization.
   */
  public date?: string|undefined;
  /**
   * Extended properties for primitive element: Immunization.reaction.date
   */
  public _date?: fhir.FhirElement|undefined;
  /**
   * Details of the reaction.
   */
  public detail?: fhir.Reference|undefined;
  /**
   * Self-reported indicator.
   */
  public reported?: boolean|undefined;
  /**
   * Extended properties for primitive element: Immunization.reaction.reported
   */
  public _reported?: fhir.FhirElement|undefined;
  /**
   * Default constructor for ImmunizationReaction - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IImmunizationReaction> = { }) {
    super(source);
    if (source['date']) { this.date = source.date; }
    if (source['_date']) { this._date = new fhir.FhirElement(source._date!); }
    if (source['detail']) { this.detail = new fhir.Reference(source.detail!); }
    if (source['reported']) { this.reported = source.reported; }
    if (source['_reported']) { this._reported = new fhir.FhirElement(source._reported!); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["_date"]) { results.push(...this._date.doModelValidation()); }
    if (this["detail"]) { results.push(...this.detail.doModelValidation()); }
    if (this["_reported"]) { results.push(...this._reported.doModelValidation()); }
    return results;
  }
}

/**
 * The protocol (set of recommendations) being followed by the provider who administered the dose.
 */
export class ImmunizationProtocolApplied extends fhir.BackboneElement implements IImmunizationProtocolApplied {
  /**
   * One possible path to achieve presumed immunity against a disease - within the context of an authority.
   */
  public series?: string|undefined;
  /**
   * Extended properties for primitive element: Immunization.protocolApplied.series
   */
  public _series?: fhir.FhirElement|undefined;
  /**
   * Indicates the authority who published the protocol (e.g. ACIP) that is being followed.
   */
  public authority?: fhir.Reference|undefined;
  /**
   * The vaccine preventable disease the dose is being administered against.
   */
  public targetDisease?: fhir.CodeableConcept[]|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  public doseNumberPositiveInt?: number|undefined;
  /**
   * Extended properties for primitive element: Immunization.protocolApplied.doseNumber[x]
   */
  public _doseNumberPositiveInt?: fhir.FhirElement|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  public doseNumberString?: string|undefined;
  /**
   * Extended properties for primitive element: Immunization.protocolApplied.doseNumber[x]
   */
  public _doseNumberString?: fhir.FhirElement|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  public seriesDosesPositiveInt?: number|undefined;
  /**
   * Extended properties for primitive element: Immunization.protocolApplied.seriesDoses[x]
   */
  public _seriesDosesPositiveInt?: fhir.FhirElement|undefined;
  /**
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  public seriesDosesString?: string|undefined;
  /**
   * Extended properties for primitive element: Immunization.protocolApplied.seriesDoses[x]
   */
  public _seriesDosesString?: fhir.FhirElement|undefined;
  /**
   * Default constructor for ImmunizationProtocolApplied - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IImmunizationProtocolApplied> = { }) {
    super(source);
    if (source['series']) { this.series = source.series; }
    if (source['_series']) { this._series = new fhir.FhirElement(source._series!); }
    if (source['authority']) { this.authority = new fhir.Reference(source.authority!); }
    if (source['targetDisease']) { this.targetDisease = source.targetDisease.map((x) => new fhir.CodeableConcept(x)); }
    if (source['doseNumberPositiveInt']) { this.doseNumberPositiveInt = source.doseNumberPositiveInt; }
    if (source['_doseNumberPositiveInt']) { this._doseNumberPositiveInt = new fhir.FhirElement(source._doseNumberPositiveInt!); }
    if (source['doseNumberString']) { this.doseNumberString = source.doseNumberString; }
    if (source['_doseNumberString']) { this._doseNumberString = new fhir.FhirElement(source._doseNumberString!); }
    if (source['seriesDosesPositiveInt']) { this.seriesDosesPositiveInt = source.seriesDosesPositiveInt; }
    if (source['_seriesDosesPositiveInt']) { this._seriesDosesPositiveInt = new fhir.FhirElement(source._seriesDosesPositiveInt!); }
    if (source['seriesDosesString']) { this.seriesDosesString = source.seriesDosesString; }
    if (source['_seriesDosesString']) { this._seriesDosesString = new fhir.FhirElement(source._seriesDosesString!); }
  }
  /**
   * Example-bound Value Set for targetDisease
   */
  public targetDiseaseExampleValueSet():ImmunizationTargetDiseaseValueSetType {
    return ImmunizationTargetDiseaseValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (this["_series"]) { results.push(...this._series.doModelValidation()); }
    if (this["authority"]) { results.push(...this.authority.doModelValidation()); }
    if (this["targetDisease"]) { this.targetDisease.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_doseNumberPositiveInt"]) { results.push(...this._doseNumberPositiveInt.doModelValidation()); }
    if (this["_doseNumberString"]) { results.push(...this._doseNumberString.doModelValidation()); }
    if (this["_seriesDosesPositiveInt"]) { results.push(...this._seriesDosesPositiveInt.doModelValidation()); }
    if (this["_seriesDosesString"]) { results.push(...this._seriesDosesString.doModelValidation()); }
    return results;
  }
}

/**
 * Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
 */
export class Immunization extends fhir.DomainResource implements IImmunization {
  /**
   * Resource Type Name
   */
  public resourceType: "Immunization";
  /**
   * A unique identifier assigned to this immunization record.
   */
  public identifier?: fhir.Identifier[]|undefined;
  /**
   * Will generally be set to show that the immunization has been completed or not done.  This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  public status: ImmunizationStatusValueSetEnum|null;
  /**
   * Extended properties for primitive element: Immunization.status
   */
  public _status?: fhir.FhirElement|undefined;
  /**
   * This is generally only used for the status of "not-done". The reason for performing the immunization event is captured in reasonCode, not here.
   */
  public statusReason?: fhir.CodeableConcept|undefined;
  /**
   * Vaccine that was administered or was to be administered.
   */
  public vaccineCode: fhir.CodeableConcept|null;
  /**
   * The patient who either received or did not receive the immunization.
   */
  public patient: fhir.Reference|null;
  /**
   * The visit or admission or other contact between patient and health care provider the immunization was performed as part of.
   */
  public encounter?: fhir.Reference|undefined;
  /**
   * When immunizations are given a specific date and time should always be known.   When immunizations are patient reported, a specific date might not be known.  Although partial dates are allowed, an adult patient might not be able to recall the year a childhood immunization was given. An exact date is always preferable, but the use of the String data type is acceptable when an exact date is not known. A small number of vaccines (e.g. live oral typhoid vaccine) are given as a series of patient self-administered dose over a span of time. In cases like this, often, only the first dose (typically a provider supervised dose) is recorded with the occurrence indicating the date/time of the first dose.
   */
  public occurrenceDateTime?: string|undefined;
  /**
   * Extended properties for primitive element: Immunization.occurrence[x]
   */
  public _occurrenceDateTime?: fhir.FhirElement|undefined;
  /**
   * When immunizations are given a specific date and time should always be known.   When immunizations are patient reported, a specific date might not be known.  Although partial dates are allowed, an adult patient might not be able to recall the year a childhood immunization was given. An exact date is always preferable, but the use of the String data type is acceptable when an exact date is not known. A small number of vaccines (e.g. live oral typhoid vaccine) are given as a series of patient self-administered dose over a span of time. In cases like this, often, only the first dose (typically a provider supervised dose) is recorded with the occurrence indicating the date/time of the first dose.
   */
  public occurrenceString?: string|undefined;
  /**
   * Extended properties for primitive element: Immunization.occurrence[x]
   */
  public _occurrenceString?: fhir.FhirElement|undefined;
  /**
   * The date the occurrence of the immunization was first captured in the record - potentially significantly after the occurrence of the event.
   */
  public recorded?: string|undefined;
  /**
   * Extended properties for primitive element: Immunization.recorded
   */
  public _recorded?: fhir.FhirElement|undefined;
  /**
   * Reflects the “reliability” of the content.
   */
  public primarySource?: boolean|undefined;
  /**
   * Extended properties for primitive element: Immunization.primarySource
   */
  public _primarySource?: fhir.FhirElement|undefined;
  /**
   * Should not be populated if primarySource = True, not required even if primarySource = False.
   */
  public reportOrigin?: fhir.CodeableConcept|undefined;
  /**
   * The service delivery location where the vaccine administration occurred.
   */
  public location?: fhir.Reference|undefined;
  /**
   * Name of vaccine manufacturer.
   */
  public manufacturer?: fhir.Reference|undefined;
  /**
   * Lot number of the  vaccine product.
   */
  public lotNumber?: string|undefined;
  /**
   * Extended properties for primitive element: Immunization.lotNumber
   */
  public _lotNumber?: fhir.FhirElement|undefined;
  /**
   * Date vaccine batch expires.
   */
  public expirationDate?: string|undefined;
  /**
   * Extended properties for primitive element: Immunization.expirationDate
   */
  public _expirationDate?: fhir.FhirElement|undefined;
  /**
   * Body site where vaccine was administered.
   */
  public site?: fhir.CodeableConcept|undefined;
  /**
   * The path by which the vaccine product is taken into the body.
   */
  public route?: fhir.CodeableConcept|undefined;
  /**
   * The quantity of vaccine product that was administered.
   */
  public doseQuantity?: fhir.Quantity|undefined;
  /**
   * Indicates who performed the immunization event.
   */
  public performer?: fhir.ImmunizationPerformer[]|undefined;
  /**
   * Extra information about the immunization that is not conveyed by the other attributes.
   */
  public note?: fhir.Annotation[]|undefined;
  /**
   * Reasons why the vaccine was administered.
   */
  public reasonCode?: fhir.CodeableConcept[]|undefined;
  /**
   * Condition, Observation or DiagnosticReport that supports why the immunization was administered.
   */
  public reasonReference?: fhir.Reference[]|undefined;
  /**
   * Typically, the recognition of the dose being sub-potent is retrospective, after the administration (ex. notification of a manufacturer recall after administration). However, in the case of a partial administration (the patient moves unexpectedly and only some of the dose is actually administered), subpotency may be recognized immediately, but it is still important to record the event.
   */
  public isSubpotent?: boolean|undefined;
  /**
   * Extended properties for primitive element: Immunization.isSubpotent
   */
  public _isSubpotent?: fhir.FhirElement|undefined;
  /**
   * Reason why a dose is considered to be subpotent.
   */
  public subpotentReason?: fhir.CodeableConcept[]|undefined;
  /**
   * Educational material presented to the patient (or guardian) at the time of vaccine administration.
   */
  public education?: fhir.ImmunizationEducation[]|undefined;
  /**
   * Indicates a patient's eligibility for a funding program.
   */
  public programEligibility?: fhir.CodeableConcept[]|undefined;
  /**
   * Indicates the source of the vaccine actually administered. This may be different than the patient eligibility (e.g. the patient may be eligible for a publically purchased vaccine but due to inventory issues, vaccine purchased with private funds was actually administered).
   */
  public fundingSource?: fhir.CodeableConcept|undefined;
  /**
   * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
   */
  public reaction?: fhir.ImmunizationReaction[]|undefined;
  /**
   * The protocol (set of recommendations) being followed by the provider who administered the dose.
   */
  public protocolApplied?: fhir.ImmunizationProtocolApplied[]|undefined;
  /**
   * Default constructor for Immunization - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IImmunization> = { }) {
    super(source);
    this.resourceType = 'Immunization';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    if (source['status']) { this.status = source.status; }
    else { this.status = null; }
    if (source['_status']) { this._status = new fhir.FhirElement(source._status!); }
    if (source['statusReason']) { this.statusReason = new fhir.CodeableConcept(source.statusReason!); }
    if (source['vaccineCode']) { this.vaccineCode = new fhir.CodeableConcept(source.vaccineCode!); }
    else { this.vaccineCode = null; }
    if (source['patient']) { this.patient = new fhir.Reference(source.patient!); }
    else { this.patient = null; }
    if (source['encounter']) { this.encounter = new fhir.Reference(source.encounter!); }
    if (source['occurrenceDateTime']) { this.occurrenceDateTime = source.occurrenceDateTime; }
    if (source['_occurrenceDateTime']) { this._occurrenceDateTime = new fhir.FhirElement(source._occurrenceDateTime!); }
    if (source['occurrenceString']) { this.occurrenceString = source.occurrenceString; }
    if (source['_occurrenceString']) { this._occurrenceString = new fhir.FhirElement(source._occurrenceString!); }
    if (source['recorded']) { this.recorded = source.recorded; }
    if (source['_recorded']) { this._recorded = new fhir.FhirElement(source._recorded!); }
    if (source['primarySource']) { this.primarySource = source.primarySource; }
    if (source['_primarySource']) { this._primarySource = new fhir.FhirElement(source._primarySource!); }
    if (source['reportOrigin']) { this.reportOrigin = new fhir.CodeableConcept(source.reportOrigin!); }
    if (source['location']) { this.location = new fhir.Reference(source.location!); }
    if (source['manufacturer']) { this.manufacturer = new fhir.Reference(source.manufacturer!); }
    if (source['lotNumber']) { this.lotNumber = source.lotNumber; }
    if (source['_lotNumber']) { this._lotNumber = new fhir.FhirElement(source._lotNumber!); }
    if (source['expirationDate']) { this.expirationDate = source.expirationDate; }
    if (source['_expirationDate']) { this._expirationDate = new fhir.FhirElement(source._expirationDate!); }
    if (source['site']) { this.site = new fhir.CodeableConcept(source.site!); }
    if (source['route']) { this.route = new fhir.CodeableConcept(source.route!); }
    if (source['doseQuantity']) { this.doseQuantity = new fhir.Quantity(source.doseQuantity!); }
    if (source['performer']) { this.performer = source.performer.map((x) => new fhir.ImmunizationPerformer(x)); }
    if (source['note']) { this.note = source.note.map((x) => new fhir.Annotation(x)); }
    if (source['reasonCode']) { this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x)); }
    if (source['reasonReference']) { this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x)); }
    if (source['isSubpotent']) { this.isSubpotent = source.isSubpotent; }
    if (source['_isSubpotent']) { this._isSubpotent = new fhir.FhirElement(source._isSubpotent!); }
    if (source['subpotentReason']) { this.subpotentReason = source.subpotentReason.map((x) => new fhir.CodeableConcept(x)); }
    if (source['education']) { this.education = source.education.map((x) => new fhir.ImmunizationEducation(x)); }
    if (source['programEligibility']) { this.programEligibility = source.programEligibility.map((x) => new fhir.CodeableConcept(x)); }
    if (source['fundingSource']) { this.fundingSource = new fhir.CodeableConcept(source.fundingSource!); }
    if (source['reaction']) { this.reaction = source.reaction.map((x) => new fhir.ImmunizationReaction(x)); }
    if (source['protocolApplied']) { this.protocolApplied = source.protocolApplied.map((x) => new fhir.ImmunizationProtocolApplied(x)); }
  }
  /**
   * Required-bound Value Set for status
   */
  public statusRequiredValueSet():ImmunizationStatusValueSetType {
    return ImmunizationStatusValueSet;
  }
  /**
   * Example-bound Value Set for statusReason
   */
  public statusReasonExampleValueSet():ImmunizationStatusReasonValueSetType {
    return ImmunizationStatusReasonValueSet;
  }
  /**
   * Example-bound Value Set for vaccineCode
   */
  public vaccineCodeExampleValueSet():VaccineCodeValueSetType {
    return VaccineCodeValueSet;
  }
  /**
   * Example-bound Value Set for reportOrigin
   */
  public reportOriginExampleValueSet():ImmunizationOriginValueSetType {
    return ImmunizationOriginValueSet;
  }
  /**
   * Example-bound Value Set for site
   */
  public siteExampleValueSet():ImmunizationSiteValueSetType {
    return ImmunizationSiteValueSet;
  }
  /**
   * Example-bound Value Set for route
   */
  public routeExampleValueSet():ImmunizationRouteValueSetType {
    return ImmunizationRouteValueSet;
  }
  /**
   * Example-bound Value Set for reasonCode
   */
  public reasonCodeExampleValueSet():ImmunizationReasonValueSetType {
    return ImmunizationReasonValueSet;
  }
  /**
   * Example-bound Value Set for subpotentReason
   */
  public subpotentReasonExampleValueSet():ImmunizationSubpotentReasonValueSetType {
    return ImmunizationSubpotentReasonValueSet;
  }
  /**
   * Example-bound Value Set for programEligibility
   */
  public programEligibilityExampleValueSet():ImmunizationProgramEligibilityValueSetType {
    return ImmunizationProgramEligibilityValueSet;
  }
  /**
   * Example-bound Value Set for fundingSource
   */
  public fundingSourceExampleValueSet():ImmunizationFundingSourceValueSetType {
    return ImmunizationFundingSourceValueSet;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():[string,string][] {
    var results:[string,string][] = super.doModelValidation();
    if (!this["resourceType"]) { results.push(["resourceType",'Missing required element: Immunization.resourceType']); }
    if (this["identifier"]) { this.identifier.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (!this["status"]) { results.push(["status",'Missing required element: Immunization.status']); }
    if (this["_status"]) { results.push(...this._status.doModelValidation()); }
    if (this["statusReason"]) { results.push(...this.statusReason.doModelValidation()); }
    if (!this["vaccineCode"]) { results.push(["vaccineCode",'Missing required element: Immunization.vaccineCode']); }
    if (this["vaccineCode"]) { results.push(...this.vaccineCode.doModelValidation()); }
    if (!this["patient"]) { results.push(["patient",'Missing required element: Immunization.patient']); }
    if (this["patient"]) { results.push(...this.patient.doModelValidation()); }
    if (this["encounter"]) { results.push(...this.encounter.doModelValidation()); }
    if (this["_occurrenceDateTime"]) { results.push(...this._occurrenceDateTime.doModelValidation()); }
    if (this["_occurrenceString"]) { results.push(...this._occurrenceString.doModelValidation()); }
    if (this["_recorded"]) { results.push(...this._recorded.doModelValidation()); }
    if (this["_primarySource"]) { results.push(...this._primarySource.doModelValidation()); }
    if (this["reportOrigin"]) { results.push(...this.reportOrigin.doModelValidation()); }
    if (this["location"]) { results.push(...this.location.doModelValidation()); }
    if (this["manufacturer"]) { results.push(...this.manufacturer.doModelValidation()); }
    if (this["_lotNumber"]) { results.push(...this._lotNumber.doModelValidation()); }
    if (this["_expirationDate"]) { results.push(...this._expirationDate.doModelValidation()); }
    if (this["site"]) { results.push(...this.site.doModelValidation()); }
    if (this["route"]) { results.push(...this.route.doModelValidation()); }
    if (this["doseQuantity"]) { results.push(...this.doseQuantity.doModelValidation()); }
    if (this["performer"]) { this.performer.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["note"]) { this.note.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["reasonCode"]) { this.reasonCode.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["reasonReference"]) { this.reasonReference.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["_isSubpotent"]) { results.push(...this._isSubpotent.doModelValidation()); }
    if (this["subpotentReason"]) { this.subpotentReason.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["education"]) { this.education.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["programEligibility"]) { this.programEligibility.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["fundingSource"]) { results.push(...this.fundingSource.doModelValidation()); }
    if (this["reaction"]) { this.reaction.forEach((x) => { results.push(...x.doModelValidation()); }) }
    if (this["protocolApplied"]) { this.protocolApplied.forEach((x) => { results.push(...x.doModelValidation()); }) }
    return results;
  }
}
