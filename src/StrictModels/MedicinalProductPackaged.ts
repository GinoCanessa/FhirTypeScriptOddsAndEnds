// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels'
import * as fhirInterfaces from '../strictinterfaces'
/**
 * Batch numbering.
 */
export class MedicinalProductPackagedBatchIdentifier extends fhirModels.BackboneElement implements fhirInterfaces.IMedicinalProductPackagedBatchIdentifier {
  /**
   * A number appearing on the immediate packaging (and not the outer packaging).
   */
  immediatePackaging?: fhirModels.Identifier|undefined;
  /**
   * A number appearing on the outer packaging of a specific batch.
   */
  outerPackaging: fhirModels.Identifier;
  /**
   * Default constructor for MedicinalProductPackagedBatchIdentifier from an object that MAY NOT contain all required elements.
   */
  constructor(source:fhirInterfaces.IMedicinalProductPackagedBatchIdentifier) {
    super(source);
    if (source["immediatePackaging"] !== undefined) {
      this.immediatePackaging = new fhirModels.Identifier(source.immediatePackaging);
    }
    {
      this.outerPackaging = new fhirModels.Identifier(source.outerPackaging);
    }
  }
}
/**
 * A packaging item, as a contained for medicine, possibly with other packaging items within.
 */
export class MedicinalProductPackagedPackageItem extends fhirModels.BackboneElement implements fhirInterfaces.IMedicinalProductPackagedPackageItem {
  /**
   * A possible alternate material for the packaging.
   */
  alternateMaterial?: fhirModels.CodeableConcept[]|undefined;
  /**
   * A device accompanying a medicinal product.
   */
  device?: fhirModels.Reference[]|undefined;
  /**
   * Including possibly Data Carrier Identifier.
   */
  identifier?: fhirModels.Identifier[]|undefined;
  /**
   * The manufactured item as contained in the packaged medicinal product.
   */
  manufacturedItem?: fhirModels.Reference[]|undefined;
  /**
   * Manufacturer of this Package Item.
   */
  manufacturer?: fhirModels.Reference[]|undefined;
  /**
   * Material type of the package item.
   */
  material?: fhirModels.CodeableConcept[]|undefined;
  /**
   * Other codeable characteristics.
   */
  otherCharacteristics?: fhirModels.CodeableConcept[]|undefined;
  /**
   * Allows containers within containers.
   */
  packageItem?: fhirModels.MedicinalProductPackagedPackageItem[]|undefined;
  /**
   * Dimensions, color etc.
   */
  physicalCharacteristics?: fhirModels.ProdCharacteristic|undefined;
  /**
   * The quantity of this package in the medicinal product, at the current level of packaging. The outermost is always 1.
   */
  quantity: fhirModels.Quantity;
  /**
   * Shelf Life and storage information.
   */
  shelfLifeStorage?: fhirModels.ProductShelfLife[]|undefined;
  /**
   * The physical type of the container of the medicine.
   */
  type: fhirModels.CodeableConcept;
  /**
   * Default constructor for MedicinalProductPackagedPackageItem from an object that MAY NOT contain all required elements.
   */
  constructor(source:fhirInterfaces.IMedicinalProductPackagedPackageItem) {
    super(source);
    if (source["alternateMaterial"] !== undefined) {
      this.alternateMaterial = source.alternateMaterial.map((x) => new fhirModels.CodeableConcept(x));
    }
    if (source["device"] !== undefined) {
      this.device = source.device.map((x) => new fhirModels.Reference(x));
    }
    if (source["identifier"] !== undefined) {
      this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
    }
    if (source["manufacturedItem"] !== undefined) {
      this.manufacturedItem = source.manufacturedItem.map((x) => new fhirModels.Reference(x));
    }
    if (source["manufacturer"] !== undefined) {
      this.manufacturer = source.manufacturer.map((x) => new fhirModels.Reference(x));
    }
    if (source["material"] !== undefined) {
      this.material = source.material.map((x) => new fhirModels.CodeableConcept(x));
    }
    if (source["otherCharacteristics"] !== undefined) {
      this.otherCharacteristics = source.otherCharacteristics.map((x) => new fhirModels.CodeableConcept(x));
    }
    if (source["packageItem"] !== undefined) {
      this.packageItem = source.packageItem.map((x) => new fhirModels.MedicinalProductPackagedPackageItem(x));
    }
    if (source["physicalCharacteristics"] !== undefined) {
      this.physicalCharacteristics = new fhirModels.ProdCharacteristic(source.physicalCharacteristics);
    }
    {
      this.quantity = new fhirModels.Quantity(source.quantity);
    }
    if (source["shelfLifeStorage"] !== undefined) {
      this.shelfLifeStorage = source.shelfLifeStorage.map((x) => new fhirModels.ProductShelfLife(x));
    }
    {
      this.type = new fhirModels.CodeableConcept(source.type);
    }
  }
}
/**
 * A medicinal product in a container or package.
 */
export class MedicinalProductPackaged extends fhirModels.DomainResource implements fhirInterfaces.IMedicinalProductPackaged {
  /**
   * Resource Type Name
   */
  readonly resourceType = "MedicinalProductPackaged";
  /**
   * Batch numbering.
   */
  batchIdentifier?: fhirModels.MedicinalProductPackagedBatchIdentifier[]|undefined;
  /**
   * Textual description.
   */
  description?: string|undefined;
  _description?: fhirModels.Element|undefined;
  /**
   * Unique identifier.
   */
  identifier?: fhirModels.Identifier[]|undefined;
  /**
   * The legal status of supply of the medicinal product as classified by the regulator.
   */
  legalStatusOfSupply?: fhirModels.CodeableConcept|undefined;
  /**
   * Manufacturer of this Package Item.
   */
  manufacturer?: fhirModels.Reference[]|undefined;
  /**
   * Manufacturer of this Package Item.
   */
  marketingAuthorization?: fhirModels.Reference|undefined;
  /**
   * Marketing information.
   */
  marketingStatus?: fhirModels.MarketingStatus[]|undefined;
  /**
   * A packaging item, as a contained for medicine, possibly with other packaging items within.
   */
  packageItem: fhirModels.MedicinalProductPackagedPackageItem[];
  /**
   * The product with this is a pack for.
   */
  subject?: fhirModels.Reference[]|undefined;
  /**
   * Default constructor for MedicinalProductPackaged from an object that MAY NOT contain all required elements.
   */
  constructor(source:fhirInterfaces.IMedicinalProductPackaged) {
    super(source);
    if ((source['resourceType'] !== "MedicinalProductPackaged") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a MedicinalProductPackaged'; }
    if (source["batchIdentifier"] !== undefined) {
      this.batchIdentifier = source.batchIdentifier.map((x) => new fhirModels.MedicinalProductPackagedBatchIdentifier(x));
    }
    if (source["description"] !== undefined) {
      this.description = source.description;
    }
    if (source["_description"] !== undefined) {
      this._description = new fhirModels.Element(source._description);
    }
    if (source["identifier"] !== undefined) {
      this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
    }
    if (source["legalStatusOfSupply"] !== undefined) {
      this.legalStatusOfSupply = new fhirModels.CodeableConcept(source.legalStatusOfSupply);
    }
    if (source["manufacturer"] !== undefined) {
      this.manufacturer = source.manufacturer.map((x) => new fhirModels.Reference(x));
    }
    if (source["marketingAuthorization"] !== undefined) {
      this.marketingAuthorization = new fhirModels.Reference(source.marketingAuthorization);
    }
    if (source["marketingStatus"] !== undefined) {
      this.marketingStatus = source.marketingStatus.map((x) => new fhirModels.MarketingStatus(x));
    }
    {
      this.packageItem = source.packageItem.map((x) => new fhirModels.MedicinalProductPackagedPackageItem(x));
    }
    if (source["subject"] !== undefined) {
      this.subject = source.subject.map((x) => new fhirModels.Reference(x));
    }
  }
}
