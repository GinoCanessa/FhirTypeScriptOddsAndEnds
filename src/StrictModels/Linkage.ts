// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhirModels from '../strictmodels'
import * as fhirInterfaces from '../strictinterfaces'
/**
 * Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
 */
export class LinkageItem extends fhirModels.BackboneElement implements fhirInterfaces.ILinkageItem {
  /**
   * The resource instance being linked as part of the group.
   */
  resource: fhirModels.Reference;
  /**
   * Distinguishes which item is "source of truth" (if any) and which items are no longer considered to be current representations.
   */
  type: LinkageItemTypeEnum;
  _type?: fhirModels.Element|undefined;
  /**
   * Default constructor for LinkageItem from an object that MAY NOT contain all required elements.
   */
  constructor(source:fhirInterfaces.ILinkageItem) {
    super(source);
    {
      this.resource = new fhirModels.Reference(source.resource);
    }
    {
      this.type = source.type;
    }
    if (source["_type"] !== undefined) {
      this._type = new fhirModels.Element(source._type);
    }
  }
}
/**
 * Code Values for the Linkage.item.type field
 */
export enum LinkageItemTypeEnum {
  SOURCE = "source",
  ALTERNATE = "alternate",
  HISTORICAL = "historical",
}
/**
 * Identifies two or more records (resource instances) that refer to the same real-world "occurrence".
 */
export class Linkage extends fhirModels.DomainResource implements fhirInterfaces.ILinkage {
  /**
   * Resource Type Name
   */
  readonly resourceType = "Linkage";
  /**
   * If false, any asserted linkages should not be considered current/relevant/applicable.
   */
  active?: boolean|undefined;
  _active?: fhirModels.Element|undefined;
  /**
   * Identifies the user or organization responsible for asserting the linkages as well as the user or organization who establishes the context in which the nature of each linkage is evaluated.
   */
  author?: fhirModels.Reference|undefined;
  /**
   * Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
   */
  item: fhirModels.LinkageItem[];
  /**
   * Default constructor for Linkage from an object that MAY NOT contain all required elements.
   */
  constructor(source:fhirInterfaces.ILinkage) {
    super(source);
    if ((source['resourceType'] !== "Linkage") || (source['resourceType'] !== undefined)) { throw 'Invalid resourceType for a Linkage'; }
    if (source["active"] !== undefined) {
      this.active = source.active;
    }
    if (source["_active"] !== undefined) {
      this._active = new fhirModels.Element(source._active);
    }
    if (source["author"] !== undefined) {
      this.author = new fhirModels.Reference(source.author);
    }
    {
      this.item = source.item.map((x) => new fhirModels.LinkageItem(x));
    }
  }
}
