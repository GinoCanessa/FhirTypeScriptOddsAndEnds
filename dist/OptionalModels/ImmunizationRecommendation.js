"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImmunizationRecommendation = exports.ImmunizationRecommendationRecommendation = exports.ImmunizationRecommendationRecommendationDateCriterion = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
 */
class ImmunizationRecommendationRecommendationDateCriterion extends fhirModels.BackboneElement {
    /**
     * Default constructor for ImmunizationRecommendationRecommendationDateCriterion from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["value"] !== undefined) {
            this.value = source.value;
        }
        if (source["_value"] !== undefined) {
            this._value = new fhirModels.Element(source._value);
        }
    }
    /**
     * Factory function to create a ImmunizationRecommendationRecommendationDateCriterion from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ImmunizationRecommendationRecommendationDateCriterion(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ImmunizationRecommendationRecommendationDateCriterion is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ImmunizationRecommendationRecommendationDateCriterion contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        if (this["value"] === undefined) {
            missingElements.push("value");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ImmunizationRecommendationRecommendationDateCriterion = ImmunizationRecommendationRecommendationDateCriterion;
/**
 * Vaccine administration recommendations.
 */
class ImmunizationRecommendationRecommendation extends fhirModels.BackboneElement {
    /**
     * Default constructor for ImmunizationRecommendationRecommendation from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["contraindicatedVaccineCode"] !== undefined) {
            this.contraindicatedVaccineCode = source.contraindicatedVaccineCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["dateCriterion"] !== undefined) {
            this.dateCriterion = source.dateCriterion.map((x) => new fhirModels.ImmunizationRecommendationRecommendationDateCriterion(x));
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["doseNumberPositiveInt"] !== undefined) {
            this.doseNumberPositiveInt = source.doseNumberPositiveInt;
        }
        if (source["_doseNumberPositiveInt"] !== undefined) {
            this._doseNumberPositiveInt = new fhirModels.Element(source._doseNumberPositiveInt);
        }
        if (source["doseNumberString"] !== undefined) {
            this.doseNumberString = source.doseNumberString;
        }
        if (source["_doseNumberString"] !== undefined) {
            this._doseNumberString = new fhirModels.Element(source._doseNumberString);
        }
        if (source["forecastReason"] !== undefined) {
            this.forecastReason = source.forecastReason.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["forecastStatus"] !== undefined) {
            this.forecastStatus = new fhirModels.CodeableConcept(source.forecastStatus);
        }
        if (source["series"] !== undefined) {
            this.series = source.series;
        }
        if (source["_series"] !== undefined) {
            this._series = new fhirModels.Element(source._series);
        }
        if (source["seriesDosesPositiveInt"] !== undefined) {
            this.seriesDosesPositiveInt = source.seriesDosesPositiveInt;
        }
        if (source["_seriesDosesPositiveInt"] !== undefined) {
            this._seriesDosesPositiveInt = new fhirModels.Element(source._seriesDosesPositiveInt);
        }
        if (source["seriesDosesString"] !== undefined) {
            this.seriesDosesString = source.seriesDosesString;
        }
        if (source["_seriesDosesString"] !== undefined) {
            this._seriesDosesString = new fhirModels.Element(source._seriesDosesString);
        }
        if (source["supportingImmunization"] !== undefined) {
            this.supportingImmunization = source.supportingImmunization.map((x) => new fhirModels.Reference(x));
        }
        if (source["supportingPatientInformation"] !== undefined) {
            this.supportingPatientInformation = source.supportingPatientInformation.map((x) => new fhirModels.Reference(x));
        }
        if (source["targetDisease"] !== undefined) {
            this.targetDisease = new fhirModels.CodeableConcept(source.targetDisease);
        }
        if (source["vaccineCode"] !== undefined) {
            this.vaccineCode = source.vaccineCode.map((x) => new fhirModels.CodeableConcept(x));
        }
    }
    /**
     * Factory function to create a ImmunizationRecommendationRecommendation from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ImmunizationRecommendationRecommendation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ImmunizationRecommendationRecommendation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ImmunizationRecommendationRecommendation contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["forecastStatus"] === undefined) {
            missingElements.push("forecastStatus");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ImmunizationRecommendationRecommendation = ImmunizationRecommendationRecommendation;
/**
 * A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification.
 */
class ImmunizationRecommendation extends fhirModels.DomainResource {
    /**
     * Default constructor for ImmunizationRecommendation from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "ImmunizationRecommendation";
        if ((source['resourceType'] !== "ImmunizationRecommendation") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a ImmunizationRecommendation';
        }
        if (source["authority"] !== undefined) {
            this.authority = new fhirModels.Reference(source.authority);
        }
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["patient"] !== undefined) {
            this.patient = new fhirModels.Reference(source.patient);
        }
        if (source["recommendation"] !== undefined) {
            this.recommendation = source.recommendation.map((x) => new fhirModels.ImmunizationRecommendationRecommendation(x));
        }
    }
    /**
     * Factory function to create a ImmunizationRecommendation from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ImmunizationRecommendation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ImmunizationRecommendation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ImmunizationRecommendation contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["date"] === undefined) {
            missingElements.push("date");
        }
        if (this["patient"] === undefined) {
            missingElements.push("patient");
        }
        if ((this["recommendation"] === undefined) || (this["recommendation"].length === 0)) {
            missingElements.push("recommendation");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ImmunizationRecommendation = ImmunizationRecommendation;
//# sourceMappingURL=ImmunizationRecommendation.js.map