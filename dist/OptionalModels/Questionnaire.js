"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuestionnaireStatusEnum = exports.Questionnaire = exports.QuestionnaireItemTypeEnum = exports.QuestionnaireItemEnableBehaviorEnum = exports.QuestionnaireItem = exports.QuestionnaireItemInitial = exports.QuestionnaireItemAnswerOption = exports.QuestionnaireItemEnableWhenOperatorEnum = exports.QuestionnaireItemEnableWhen = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * If multiple repetitions of this extension are present, the item should be enabled when the condition for *any* of the repetitions is true.  I.e. treat "enableWhen"s as being joined by an "or" clause.  This element is a modifier because if enableWhen is present for an item, "required" is ignored unless one of the enableWhen conditions is met. When an item is disabled, all of its descendants are disabled, regardless of what their own enableWhen logic might evaluate to.
 */
class QuestionnaireItemEnableWhen extends fhirModels.BackboneElement {
    /**
     * Default constructor for QuestionnaireItemEnableWhen from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["answerBoolean"] !== undefined) {
            this.answerBoolean = source.answerBoolean;
        }
        if (source["_answerBoolean"] !== undefined) {
            this._answerBoolean = new fhirModels.Element(source._answerBoolean);
        }
        if (source["answerDecimal"] !== undefined) {
            this.answerDecimal = source.answerDecimal;
        }
        if (source["_answerDecimal"] !== undefined) {
            this._answerDecimal = new fhirModels.Element(source._answerDecimal);
        }
        if (source["answerInteger"] !== undefined) {
            this.answerInteger = source.answerInteger;
        }
        if (source["_answerInteger"] !== undefined) {
            this._answerInteger = new fhirModels.Element(source._answerInteger);
        }
        if (source["answerDate"] !== undefined) {
            this.answerDate = source.answerDate;
        }
        if (source["_answerDate"] !== undefined) {
            this._answerDate = new fhirModels.Element(source._answerDate);
        }
        if (source["answerDateTime"] !== undefined) {
            this.answerDateTime = source.answerDateTime;
        }
        if (source["_answerDateTime"] !== undefined) {
            this._answerDateTime = new fhirModels.Element(source._answerDateTime);
        }
        if (source["answerTime"] !== undefined) {
            this.answerTime = source.answerTime;
        }
        if (source["_answerTime"] !== undefined) {
            this._answerTime = new fhirModels.Element(source._answerTime);
        }
        if (source["answerString"] !== undefined) {
            this.answerString = source.answerString;
        }
        if (source["_answerString"] !== undefined) {
            this._answerString = new fhirModels.Element(source._answerString);
        }
        if (source["answerCoding"] !== undefined) {
            this.answerCoding = new fhirModels.Coding(source.answerCoding);
        }
        if (source["answerQuantity"] !== undefined) {
            this.answerQuantity = new fhirModels.Quantity(source.answerQuantity);
        }
        if (source["answerReference"] !== undefined) {
            this.answerReference = new fhirModels.Reference(source.answerReference);
        }
        if (source["operator"] !== undefined) {
            this.operator = source.operator;
        }
        if (source["_operator"] !== undefined) {
            this._operator = new fhirModels.Element(source._operator);
        }
        if (source["question"] !== undefined) {
            this.question = source.question;
        }
        if (source["_question"] !== undefined) {
            this._question = new fhirModels.Element(source._question);
        }
    }
    /**
     * Factory function to create a QuestionnaireItemEnableWhen from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new QuestionnaireItemEnableWhen(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `QuestionnaireItemEnableWhen is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current QuestionnaireItemEnableWhen contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["operator"] === undefined) {
            missingElements.push("operator");
        }
        if (this["question"] === undefined) {
            missingElements.push("question");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.QuestionnaireItemEnableWhen = QuestionnaireItemEnableWhen;
/**
 * Code Values for the Questionnaire.item.enableWhen.operator field
 */
var QuestionnaireItemEnableWhenOperatorEnum;
(function (QuestionnaireItemEnableWhenOperatorEnum) {
    QuestionnaireItemEnableWhenOperatorEnum["EXISTS"] = "exists";
    QuestionnaireItemEnableWhenOperatorEnum["EQUALS"] = "=";
    QuestionnaireItemEnableWhenOperatorEnum["NOT_EQUALS"] = "!=";
    QuestionnaireItemEnableWhenOperatorEnum["GREATER_THAN"] = ">";
    QuestionnaireItemEnableWhenOperatorEnum["LESS_THAN"] = "<";
    QuestionnaireItemEnableWhenOperatorEnum["GREATER_THAN_OR_EQUALS"] = ">=";
    QuestionnaireItemEnableWhenOperatorEnum["LESS_THAN_OR_EQUALS"] = "<=";
})(QuestionnaireItemEnableWhenOperatorEnum = exports.QuestionnaireItemEnableWhenOperatorEnum || (exports.QuestionnaireItemEnableWhenOperatorEnum = {}));
/**
 * This element can be used when the value set machinery of answerValueSet is deemed too cumbersome or when there's a need to capture possible answers that are not codes.
 */
class QuestionnaireItemAnswerOption extends fhirModels.BackboneElement {
    /**
     * Default constructor for QuestionnaireItemAnswerOption from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["initialSelected"] !== undefined) {
            this.initialSelected = source.initialSelected;
        }
        if (source["_initialSelected"] !== undefined) {
            this._initialSelected = new fhirModels.Element(source._initialSelected);
        }
        if (source["valueInteger"] !== undefined) {
            this.valueInteger = source.valueInteger;
        }
        if (source["_valueInteger"] !== undefined) {
            this._valueInteger = new fhirModels.Element(source._valueInteger);
        }
        if (source["valueDate"] !== undefined) {
            this.valueDate = source.valueDate;
        }
        if (source["_valueDate"] !== undefined) {
            this._valueDate = new fhirModels.Element(source._valueDate);
        }
        if (source["valueTime"] !== undefined) {
            this.valueTime = source.valueTime;
        }
        if (source["_valueTime"] !== undefined) {
            this._valueTime = new fhirModels.Element(source._valueTime);
        }
        if (source["valueString"] !== undefined) {
            this.valueString = source.valueString;
        }
        if (source["_valueString"] !== undefined) {
            this._valueString = new fhirModels.Element(source._valueString);
        }
        if (source["valueCoding"] !== undefined) {
            this.valueCoding = new fhirModels.Coding(source.valueCoding);
        }
        if (source["valueReference"] !== undefined) {
            this.valueReference = new fhirModels.Reference(source.valueReference);
        }
    }
    /**
     * Factory function to create a QuestionnaireItemAnswerOption from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new QuestionnaireItemAnswerOption(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `QuestionnaireItemAnswerOption is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current QuestionnaireItemAnswerOption contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.QuestionnaireItemAnswerOption = QuestionnaireItemAnswerOption;
/**
 * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that initial values can influence results.  The data type of initial[x] must agree with the item.type, and only repeating items can have more then one initial value.
 */
class QuestionnaireItemInitial extends fhirModels.BackboneElement {
    /**
     * Default constructor for QuestionnaireItemInitial from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["valueBoolean"] !== undefined) {
            this.valueBoolean = source.valueBoolean;
        }
        if (source["_valueBoolean"] !== undefined) {
            this._valueBoolean = new fhirModels.Element(source._valueBoolean);
        }
        if (source["valueDecimal"] !== undefined) {
            this.valueDecimal = source.valueDecimal;
        }
        if (source["_valueDecimal"] !== undefined) {
            this._valueDecimal = new fhirModels.Element(source._valueDecimal);
        }
        if (source["valueInteger"] !== undefined) {
            this.valueInteger = source.valueInteger;
        }
        if (source["_valueInteger"] !== undefined) {
            this._valueInteger = new fhirModels.Element(source._valueInteger);
        }
        if (source["valueDate"] !== undefined) {
            this.valueDate = source.valueDate;
        }
        if (source["_valueDate"] !== undefined) {
            this._valueDate = new fhirModels.Element(source._valueDate);
        }
        if (source["valueDateTime"] !== undefined) {
            this.valueDateTime = source.valueDateTime;
        }
        if (source["_valueDateTime"] !== undefined) {
            this._valueDateTime = new fhirModels.Element(source._valueDateTime);
        }
        if (source["valueTime"] !== undefined) {
            this.valueTime = source.valueTime;
        }
        if (source["_valueTime"] !== undefined) {
            this._valueTime = new fhirModels.Element(source._valueTime);
        }
        if (source["valueString"] !== undefined) {
            this.valueString = source.valueString;
        }
        if (source["_valueString"] !== undefined) {
            this._valueString = new fhirModels.Element(source._valueString);
        }
        if (source["valueUri"] !== undefined) {
            this.valueUri = source.valueUri;
        }
        if (source["_valueUri"] !== undefined) {
            this._valueUri = new fhirModels.Element(source._valueUri);
        }
        if (source["valueAttachment"] !== undefined) {
            this.valueAttachment = new fhirModels.Attachment(source.valueAttachment);
        }
        if (source["valueCoding"] !== undefined) {
            this.valueCoding = new fhirModels.Coding(source.valueCoding);
        }
        if (source["valueQuantity"] !== undefined) {
            this.valueQuantity = new fhirModels.Quantity(source.valueQuantity);
        }
        if (source["valueReference"] !== undefined) {
            this.valueReference = new fhirModels.Reference(source.valueReference);
        }
    }
    /**
     * Factory function to create a QuestionnaireItemInitial from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new QuestionnaireItemInitial(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `QuestionnaireItemInitial is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current QuestionnaireItemInitial contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.QuestionnaireItemInitial = QuestionnaireItemInitial;
/**
 * The content of the questionnaire is constructed from an ordered, hierarchical collection of items.
 */
class QuestionnaireItem extends fhirModels.BackboneElement {
    /**
     * Default constructor for QuestionnaireItem from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["answerOption"] !== undefined) {
            this.answerOption = source.answerOption.map((x) => new fhirModels.QuestionnaireItemAnswerOption(x));
        }
        if (source["answerValueSet"] !== undefined) {
            this.answerValueSet = source.answerValueSet;
        }
        if (source["_answerValueSet"] !== undefined) {
            this._answerValueSet = new fhirModels.Element(source._answerValueSet);
        }
        if (source["code"] !== undefined) {
            this.code = source.code.map((x) => new fhirModels.Coding(x));
        }
        if (source["definition"] !== undefined) {
            this.definition = source.definition;
        }
        if (source["_definition"] !== undefined) {
            this._definition = new fhirModels.Element(source._definition);
        }
        if (source["enableBehavior"] !== undefined) {
            this.enableBehavior = source.enableBehavior;
        }
        if (source["_enableBehavior"] !== undefined) {
            this._enableBehavior = new fhirModels.Element(source._enableBehavior);
        }
        if (source["enableWhen"] !== undefined) {
            this.enableWhen = source.enableWhen.map((x) => new fhirModels.QuestionnaireItemEnableWhen(x));
        }
        if (source["initial"] !== undefined) {
            this.initial = source.initial.map((x) => new fhirModels.QuestionnaireItemInitial(x));
        }
        if (source["item"] !== undefined) {
            this.item = source.item.map((x) => new fhirModels.QuestionnaireItem(x));
        }
        if (source["linkId"] !== undefined) {
            this.linkId = source.linkId;
        }
        if (source["_linkId"] !== undefined) {
            this._linkId = new fhirModels.Element(source._linkId);
        }
        if (source["maxLength"] !== undefined) {
            this.maxLength = source.maxLength;
        }
        if (source["_maxLength"] !== undefined) {
            this._maxLength = new fhirModels.Element(source._maxLength);
        }
        if (source["prefix"] !== undefined) {
            this.prefix = source.prefix;
        }
        if (source["_prefix"] !== undefined) {
            this._prefix = new fhirModels.Element(source._prefix);
        }
        if (source["readOnly"] !== undefined) {
            this.readOnly = source.readOnly;
        }
        if (source["_readOnly"] !== undefined) {
            this._readOnly = new fhirModels.Element(source._readOnly);
        }
        if (source["repeats"] !== undefined) {
            this.repeats = source.repeats;
        }
        if (source["_repeats"] !== undefined) {
            this._repeats = new fhirModels.Element(source._repeats);
        }
        if (source["required"] !== undefined) {
            this.required = source.required;
        }
        if (source["_required"] !== undefined) {
            this._required = new fhirModels.Element(source._required);
        }
        if (source["text"] !== undefined) {
            this.text = source.text;
        }
        if (source["_text"] !== undefined) {
            this._text = new fhirModels.Element(source._text);
        }
        if (source["type"] !== undefined) {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
    }
    /**
     * Factory function to create a QuestionnaireItem from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new QuestionnaireItem(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `QuestionnaireItem is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current QuestionnaireItem contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["linkId"] === undefined) {
            missingElements.push("linkId");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.QuestionnaireItem = QuestionnaireItem;
/**
 * Code Values for the Questionnaire.item.enableBehavior field
 */
var QuestionnaireItemEnableBehaviorEnum;
(function (QuestionnaireItemEnableBehaviorEnum) {
    QuestionnaireItemEnableBehaviorEnum["ALL"] = "all";
    QuestionnaireItemEnableBehaviorEnum["ANY"] = "any";
})(QuestionnaireItemEnableBehaviorEnum = exports.QuestionnaireItemEnableBehaviorEnum || (exports.QuestionnaireItemEnableBehaviorEnum = {}));
/**
 * Code Values for the Questionnaire.item.type field
 */
var QuestionnaireItemTypeEnum;
(function (QuestionnaireItemTypeEnum) {
    QuestionnaireItemTypeEnum["GROUP"] = "group";
    QuestionnaireItemTypeEnum["DISPLAY"] = "display";
    QuestionnaireItemTypeEnum["QUESTION"] = "question";
    QuestionnaireItemTypeEnum["BOOLEAN"] = "boolean";
    QuestionnaireItemTypeEnum["DECIMAL"] = "decimal";
    QuestionnaireItemTypeEnum["INTEGER"] = "integer";
    QuestionnaireItemTypeEnum["DATE"] = "date";
    QuestionnaireItemTypeEnum["DATETIME"] = "dateTime";
    QuestionnaireItemTypeEnum["TIME"] = "time";
    QuestionnaireItemTypeEnum["STRING"] = "string";
    QuestionnaireItemTypeEnum["TEXT"] = "text";
    QuestionnaireItemTypeEnum["URL"] = "url";
    QuestionnaireItemTypeEnum["CHOICE"] = "choice";
    QuestionnaireItemTypeEnum["OPEN_CHOICE"] = "open-choice";
    QuestionnaireItemTypeEnum["ATTACHMENT"] = "attachment";
    QuestionnaireItemTypeEnum["REFERENCE"] = "reference";
    QuestionnaireItemTypeEnum["QUANTITY"] = "quantity";
})(QuestionnaireItemTypeEnum = exports.QuestionnaireItemTypeEnum || (exports.QuestionnaireItemTypeEnum = {}));
/**
 * A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.
 */
class Questionnaire extends fhirModels.DomainResource {
    /**
     * Default constructor for Questionnaire from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "Questionnaire";
        if ((source['resourceType'] !== "Questionnaire") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Questionnaire';
        }
        if (source["approvalDate"] !== undefined) {
            this.approvalDate = source.approvalDate;
        }
        if (source["_approvalDate"] !== undefined) {
            this._approvalDate = new fhirModels.Element(source._approvalDate);
        }
        if (source["code"] !== undefined) {
            this.code = source.code.map((x) => new fhirModels.Coding(x));
        }
        if (source["contact"] !== undefined) {
            this.contact = source.contact.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["copyright"] !== undefined) {
            this.copyright = source.copyright;
        }
        if (source["_copyright"] !== undefined) {
            this._copyright = new fhirModels.Element(source._copyright);
        }
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["derivedFrom"] !== undefined) {
            this.derivedFrom = source.derivedFrom.map((x) => (x));
        }
        if (source["_derivedFrom"] !== undefined) {
            this._derivedFrom = source._derivedFrom.map((x) => new fhirModels.Element(x));
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["effectivePeriod"] !== undefined) {
            this.effectivePeriod = new fhirModels.Period(source.effectivePeriod);
        }
        if (source["experimental"] !== undefined) {
            this.experimental = source.experimental;
        }
        if (source["_experimental"] !== undefined) {
            this._experimental = new fhirModels.Element(source._experimental);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["item"] !== undefined) {
            this.item = source.item.map((x) => new fhirModels.QuestionnaireItem(x));
        }
        if (source["jurisdiction"] !== undefined) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["lastReviewDate"] !== undefined) {
            this.lastReviewDate = source.lastReviewDate;
        }
        if (source["_lastReviewDate"] !== undefined) {
            this._lastReviewDate = new fhirModels.Element(source._lastReviewDate);
        }
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["publisher"] !== undefined) {
            this.publisher = source.publisher;
        }
        if (source["_publisher"] !== undefined) {
            this._publisher = new fhirModels.Element(source._publisher);
        }
        if (source["purpose"] !== undefined) {
            this.purpose = source.purpose;
        }
        if (source["_purpose"] !== undefined) {
            this._purpose = new fhirModels.Element(source._purpose);
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["subjectType"] !== undefined) {
            this.subjectType = source.subjectType.map((x) => (x));
        }
        if (source["_subjectType"] !== undefined) {
            this._subjectType = source._subjectType.map((x) => new fhirModels.Element(x));
        }
        if (source["title"] !== undefined) {
            this.title = source.title;
        }
        if (source["_title"] !== undefined) {
            this._title = new fhirModels.Element(source._title);
        }
        if (source["url"] !== undefined) {
            this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            this._url = new fhirModels.Element(source._url);
        }
        if (source["useContext"] !== undefined) {
            this.useContext = source.useContext.map((x) => new fhirModels.UsageContext(x));
        }
        if (source["version"] !== undefined) {
            this.version = source.version;
        }
        if (source["_version"] !== undefined) {
            this._version = new fhirModels.Element(source._version);
        }
    }
    /**
     * Factory function to create a Questionnaire from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new Questionnaire(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Questionnaire is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current Questionnaire contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.Questionnaire = Questionnaire;
/**
 * Code Values for the Questionnaire.status field
 */
var QuestionnaireStatusEnum;
(function (QuestionnaireStatusEnum) {
    QuestionnaireStatusEnum["DRAFT"] = "draft";
    QuestionnaireStatusEnum["ACTIVE"] = "active";
    QuestionnaireStatusEnum["RETIRED"] = "retired";
    QuestionnaireStatusEnum["UNKNOWN"] = "unknown";
})(QuestionnaireStatusEnum = exports.QuestionnaireStatusEnum || (exports.QuestionnaireStatusEnum = {}));
//# sourceMappingURL=Questionnaire.js.map