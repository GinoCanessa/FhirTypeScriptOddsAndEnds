"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CareTeamStatusEnum = exports.CareTeam = exports.CareTeamParticipant = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * Identifies all people and organizations who are expected to be involved in the care team.
 */
class CareTeamParticipant extends fhirModels.BackboneElement {
    /**
     * Default constructor for CareTeamParticipant from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["member"] !== undefined) {
            this.member = new fhirModels.Reference(source.member);
        }
        if (source["onBehalfOf"] !== undefined) {
            this.onBehalfOf = new fhirModels.Reference(source.onBehalfOf);
        }
        if (source["period"] !== undefined) {
            this.period = new fhirModels.Period(source.period);
        }
        if (source["role"] !== undefined) {
            this.role = source.role.map((x) => new fhirModels.CodeableConcept(x));
        }
    }
    /**
     * Factory function to create a CareTeamParticipant from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new CareTeamParticipant(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `CareTeamParticipant is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current CareTeamParticipant contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.CareTeamParticipant = CareTeamParticipant;
/**
 * The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care for a patient.
 */
class CareTeam extends fhirModels.DomainResource {
    /**
     * Default constructor for CareTeam from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "CareTeam";
        if ((source['resourceType'] !== "CareTeam") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a CareTeam';
        }
        if (source["category"] !== undefined) {
            this.category = source.category.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["encounter"] !== undefined) {
            this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["managingOrganization"] !== undefined) {
            this.managingOrganization = source.managingOrganization.map((x) => new fhirModels.Reference(x));
        }
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["participant"] !== undefined) {
            this.participant = source.participant.map((x) => new fhirModels.CareTeamParticipant(x));
        }
        if (source["period"] !== undefined) {
            this.period = new fhirModels.Period(source.period);
        }
        if (source["reasonCode"] !== undefined) {
            this.reasonCode = source.reasonCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["reasonReference"] !== undefined) {
            this.reasonReference = source.reasonReference.map((x) => new fhirModels.Reference(x));
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["subject"] !== undefined) {
            this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["telecom"] !== undefined) {
            this.telecom = source.telecom.map((x) => new fhirModels.ContactPoint(x));
        }
    }
    /**
     * Factory function to create a CareTeam from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new CareTeam(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `CareTeam is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current CareTeam contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.CareTeam = CareTeam;
/**
 * Code Values for the CareTeam.status field
 */
var CareTeamStatusEnum;
(function (CareTeamStatusEnum) {
    CareTeamStatusEnum["PROPOSED"] = "proposed";
    CareTeamStatusEnum["ACTIVE"] = "active";
    CareTeamStatusEnum["SUSPENDED"] = "suspended";
    CareTeamStatusEnum["INACTIVE"] = "inactive";
    CareTeamStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(CareTeamStatusEnum = exports.CareTeamStatusEnum || (exports.CareTeamStatusEnum = {}));
//# sourceMappingURL=CareTeam.js.map