"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExampleScenarioStatusEnum = exports.ExampleScenario = exports.ExampleScenarioProcess = exports.ExampleScenarioProcessStep = exports.ExampleScenarioProcessStepAlternative = exports.ExampleScenarioProcessStepOperation = exports.ExampleScenarioInstance = exports.ExampleScenarioInstanceContainedInstance = exports.ExampleScenarioInstanceVersion = exports.ExampleScenarioActorTypeEnum = exports.ExampleScenarioActor = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * Actor participating in the resource.
 */
class ExampleScenarioActor extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExampleScenarioActor from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["actorId"] !== undefined) {
            this.actorId = source.actorId;
        }
        if (source["_actorId"] !== undefined) {
            this._actorId = new fhirModels.Element(source._actorId);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["type"] !== undefined) {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
    }
    /**
     * Factory function to create a ExampleScenarioActor from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ExampleScenarioActor(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExampleScenarioActor is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ExampleScenarioActor contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["actorId"] === undefined) {
            missingElements.push("actorId");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ExampleScenarioActor = ExampleScenarioActor;
/**
 * Code Values for the ExampleScenario.actor.type field
 */
var ExampleScenarioActorTypeEnum;
(function (ExampleScenarioActorTypeEnum) {
    ExampleScenarioActorTypeEnum["PERSON"] = "person";
    ExampleScenarioActorTypeEnum["ENTITY"] = "entity";
})(ExampleScenarioActorTypeEnum = exports.ExampleScenarioActorTypeEnum || (exports.ExampleScenarioActorTypeEnum = {}));
/**
 * A specific version of the resource.
 */
class ExampleScenarioInstanceVersion extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExampleScenarioInstanceVersion from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["versionId"] !== undefined) {
            this.versionId = source.versionId;
        }
        if (source["_versionId"] !== undefined) {
            this._versionId = new fhirModels.Element(source._versionId);
        }
    }
    /**
     * Factory function to create a ExampleScenarioInstanceVersion from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ExampleScenarioInstanceVersion(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExampleScenarioInstanceVersion is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ExampleScenarioInstanceVersion contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["description"] === undefined) {
            missingElements.push("description");
        }
        if (this["versionId"] === undefined) {
            missingElements.push("versionId");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ExampleScenarioInstanceVersion = ExampleScenarioInstanceVersion;
/**
 * Resources contained in the instance (e.g. the observations contained in a bundle).
 */
class ExampleScenarioInstanceContainedInstance extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExampleScenarioInstanceContainedInstance from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["resourceId"] !== undefined) {
            this.resourceId = source.resourceId;
        }
        if (source["_resourceId"] !== undefined) {
            this._resourceId = new fhirModels.Element(source._resourceId);
        }
        if (source["versionId"] !== undefined) {
            this.versionId = source.versionId;
        }
        if (source["_versionId"] !== undefined) {
            this._versionId = new fhirModels.Element(source._versionId);
        }
    }
    /**
     * Factory function to create a ExampleScenarioInstanceContainedInstance from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ExampleScenarioInstanceContainedInstance(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExampleScenarioInstanceContainedInstance is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ExampleScenarioInstanceContainedInstance contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["resourceId"] === undefined) {
            missingElements.push("resourceId");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ExampleScenarioInstanceContainedInstance = ExampleScenarioInstanceContainedInstance;
/**
 * Each resource and each version that is present in the workflow.
 */
class ExampleScenarioInstance extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExampleScenarioInstance from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["containedInstance"] !== undefined) {
            this.containedInstance = source.containedInstance.map((x) => new fhirModels.ExampleScenarioInstanceContainedInstance(x));
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["resourceId"] !== undefined) {
            this.resourceId = source.resourceId;
        }
        if (source["_resourceId"] !== undefined) {
            this._resourceId = new fhirModels.Element(source._resourceId);
        }
        if (source["resourceType"] !== undefined) {
            this.resourceType = source.resourceType;
        }
        if (source["_resourceType"] !== undefined) {
            this._resourceType = new fhirModels.Element(source._resourceType);
        }
        if (source["version"] !== undefined) {
            this.version = source.version.map((x) => new fhirModels.ExampleScenarioInstanceVersion(x));
        }
    }
    /**
     * Factory function to create a ExampleScenarioInstance from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ExampleScenarioInstance(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExampleScenarioInstance is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ExampleScenarioInstance contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["resourceId"] === undefined) {
            missingElements.push("resourceId");
        }
        if (this["resourceType"] === undefined) {
            missingElements.push("resourceType");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ExampleScenarioInstance = ExampleScenarioInstance;
/**
 * Each interaction or action.
 */
class ExampleScenarioProcessStepOperation extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExampleScenarioProcessStepOperation from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["initiator"] !== undefined) {
            this.initiator = source.initiator;
        }
        if (source["_initiator"] !== undefined) {
            this._initiator = new fhirModels.Element(source._initiator);
        }
        if (source["initiatorActive"] !== undefined) {
            this.initiatorActive = source.initiatorActive;
        }
        if (source["_initiatorActive"] !== undefined) {
            this._initiatorActive = new fhirModels.Element(source._initiatorActive);
        }
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["number"] !== undefined) {
            this.number = source.number;
        }
        if (source["_number"] !== undefined) {
            this._number = new fhirModels.Element(source._number);
        }
        if (source["receiver"] !== undefined) {
            this.receiver = source.receiver;
        }
        if (source["_receiver"] !== undefined) {
            this._receiver = new fhirModels.Element(source._receiver);
        }
        if (source["receiverActive"] !== undefined) {
            this.receiverActive = source.receiverActive;
        }
        if (source["_receiverActive"] !== undefined) {
            this._receiverActive = new fhirModels.Element(source._receiverActive);
        }
        if (source["request"] !== undefined) {
            this.request = new fhirModels.ExampleScenarioInstanceContainedInstance(source.request);
        }
        if (source["response"] !== undefined) {
            this.response = new fhirModels.ExampleScenarioInstanceContainedInstance(source.response);
        }
        if (source["type"] !== undefined) {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
    }
    /**
     * Factory function to create a ExampleScenarioProcessStepOperation from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ExampleScenarioProcessStepOperation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExampleScenarioProcessStepOperation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ExampleScenarioProcessStepOperation contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["number"] === undefined) {
            missingElements.push("number");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ExampleScenarioProcessStepOperation = ExampleScenarioProcessStepOperation;
/**
 * Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.
 */
class ExampleScenarioProcessStepAlternative extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExampleScenarioProcessStepAlternative from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["step"] !== undefined) {
            this.step = source.step.map((x) => new fhirModels.ExampleScenarioProcessStep(x));
        }
        if (source["title"] !== undefined) {
            this.title = source.title;
        }
        if (source["_title"] !== undefined) {
            this._title = new fhirModels.Element(source._title);
        }
    }
    /**
     * Factory function to create a ExampleScenarioProcessStepAlternative from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ExampleScenarioProcessStepAlternative(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExampleScenarioProcessStepAlternative is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ExampleScenarioProcessStepAlternative contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["title"] === undefined) {
            missingElements.push("title");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ExampleScenarioProcessStepAlternative = ExampleScenarioProcessStepAlternative;
/**
 * Each step of the process.
 */
class ExampleScenarioProcessStep extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExampleScenarioProcessStep from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["alternative"] !== undefined) {
            this.alternative = source.alternative.map((x) => new fhirModels.ExampleScenarioProcessStepAlternative(x));
        }
        if (source["operation"] !== undefined) {
            this.operation = new fhirModels.ExampleScenarioProcessStepOperation(source.operation);
        }
        if (source["pause"] !== undefined) {
            this.pause = source.pause;
        }
        if (source["_pause"] !== undefined) {
            this._pause = new fhirModels.Element(source._pause);
        }
        if (source["process"] !== undefined) {
            this.process = source.process.map((x) => new fhirModels.ExampleScenarioProcess(x));
        }
    }
    /**
     * Factory function to create a ExampleScenarioProcessStep from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ExampleScenarioProcessStep(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExampleScenarioProcessStep is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ExampleScenarioProcessStep contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ExampleScenarioProcessStep = ExampleScenarioProcessStep;
/**
 * Each major process - a group of operations.
 */
class ExampleScenarioProcess extends fhirModels.BackboneElement {
    /**
     * Default constructor for ExampleScenarioProcess from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["postConditions"] !== undefined) {
            this.postConditions = source.postConditions;
        }
        if (source["_postConditions"] !== undefined) {
            this._postConditions = new fhirModels.Element(source._postConditions);
        }
        if (source["preConditions"] !== undefined) {
            this.preConditions = source.preConditions;
        }
        if (source["_preConditions"] !== undefined) {
            this._preConditions = new fhirModels.Element(source._preConditions);
        }
        if (source["step"] !== undefined) {
            this.step = source.step.map((x) => new fhirModels.ExampleScenarioProcessStep(x));
        }
        if (source["title"] !== undefined) {
            this.title = source.title;
        }
        if (source["_title"] !== undefined) {
            this._title = new fhirModels.Element(source._title);
        }
    }
    /**
     * Factory function to create a ExampleScenarioProcess from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ExampleScenarioProcess(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExampleScenarioProcess is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ExampleScenarioProcess contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["title"] === undefined) {
            missingElements.push("title");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ExampleScenarioProcess = ExampleScenarioProcess;
/**
 * Example of workflow instance.
 */
class ExampleScenario extends fhirModels.DomainResource {
    /**
     * Default constructor for ExampleScenario from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "ExampleScenario";
        if ((source['resourceType'] !== "ExampleScenario") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a ExampleScenario';
        }
        if (source["actor"] !== undefined) {
            this.actor = source.actor.map((x) => new fhirModels.ExampleScenarioActor(x));
        }
        if (source["contact"] !== undefined) {
            this.contact = source.contact.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["copyright"] !== undefined) {
            this.copyright = source.copyright;
        }
        if (source["_copyright"] !== undefined) {
            this._copyright = new fhirModels.Element(source._copyright);
        }
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["experimental"] !== undefined) {
            this.experimental = source.experimental;
        }
        if (source["_experimental"] !== undefined) {
            this._experimental = new fhirModels.Element(source._experimental);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["instance"] !== undefined) {
            this.instance = source.instance.map((x) => new fhirModels.ExampleScenarioInstance(x));
        }
        if (source["jurisdiction"] !== undefined) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["process"] !== undefined) {
            this.process = source.process.map((x) => new fhirModels.ExampleScenarioProcess(x));
        }
        if (source["publisher"] !== undefined) {
            this.publisher = source.publisher;
        }
        if (source["_publisher"] !== undefined) {
            this._publisher = new fhirModels.Element(source._publisher);
        }
        if (source["purpose"] !== undefined) {
            this.purpose = source.purpose;
        }
        if (source["_purpose"] !== undefined) {
            this._purpose = new fhirModels.Element(source._purpose);
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["url"] !== undefined) {
            this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            this._url = new fhirModels.Element(source._url);
        }
        if (source["useContext"] !== undefined) {
            this.useContext = source.useContext.map((x) => new fhirModels.UsageContext(x));
        }
        if (source["version"] !== undefined) {
            this.version = source.version;
        }
        if (source["_version"] !== undefined) {
            this._version = new fhirModels.Element(source._version);
        }
        if (source["workflow"] !== undefined) {
            this.workflow = source.workflow.map((x) => (x));
        }
        if (source["_workflow"] !== undefined) {
            this._workflow = source._workflow.map((x) => new fhirModels.Element(x));
        }
    }
    /**
     * Factory function to create a ExampleScenario from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ExampleScenario(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExampleScenario is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ExampleScenario contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ExampleScenario = ExampleScenario;
/**
 * Code Values for the ExampleScenario.status field
 */
var ExampleScenarioStatusEnum;
(function (ExampleScenarioStatusEnum) {
    ExampleScenarioStatusEnum["DRAFT"] = "draft";
    ExampleScenarioStatusEnum["ACTIVE"] = "active";
    ExampleScenarioStatusEnum["RETIRED"] = "retired";
    ExampleScenarioStatusEnum["UNKNOWN"] = "unknown";
})(ExampleScenarioStatusEnum = exports.ExampleScenarioStatusEnum || (exports.ExampleScenarioStatusEnum = {}));
//# sourceMappingURL=ExampleScenario.js.map