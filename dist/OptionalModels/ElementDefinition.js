"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElementDefinitionRepresentationEnum = exports.ElementDefinition = exports.ElementDefinitionMapping = exports.ElementDefinitionBindingStrengthEnum = exports.ElementDefinitionBinding = exports.ElementDefinitionConstraintSeverityEnum = exports.ElementDefinitionConstraint = exports.ElementDefinitionExample = exports.ElementDefinitionTypeVersioningEnum = exports.ElementDefinitionTypeAggregationEnum = exports.ElementDefinitionType = exports.ElementDefinitionBase = exports.ElementDefinitionSlicingRulesEnum = exports.ElementDefinitionSlicing = exports.ElementDefinitionSlicingDiscriminatorTypeEnum = exports.ElementDefinitionSlicingDiscriminator = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * If there is no discriminator, the content is hard to process, so this should be avoided.
 */
class ElementDefinitionSlicingDiscriminator extends fhirModels.Element {
    /**
     * Default constructor for ElementDefinitionSlicingDiscriminator from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["path"] !== undefined) {
            this.path = source.path;
        }
        if (source["_path"] !== undefined) {
            this._path = new fhirModels.Element(source._path);
        }
        if (source["type"] !== undefined) {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
    }
    /**
     * Factory function to create a ElementDefinitionSlicingDiscriminator from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ElementDefinitionSlicingDiscriminator(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ElementDefinitionSlicingDiscriminator is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ElementDefinitionSlicingDiscriminator contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["path"] === undefined) {
            missingElements.push("path");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ElementDefinitionSlicingDiscriminator = ElementDefinitionSlicingDiscriminator;
/**
 * Code Values for the ElementDefinition.slicing.discriminator.type field
 */
var ElementDefinitionSlicingDiscriminatorTypeEnum;
(function (ElementDefinitionSlicingDiscriminatorTypeEnum) {
    ElementDefinitionSlicingDiscriminatorTypeEnum["VALUE"] = "value";
    ElementDefinitionSlicingDiscriminatorTypeEnum["EXISTS"] = "exists";
    ElementDefinitionSlicingDiscriminatorTypeEnum["PATTERN"] = "pattern";
    ElementDefinitionSlicingDiscriminatorTypeEnum["TYPE"] = "type";
    ElementDefinitionSlicingDiscriminatorTypeEnum["PROFILE"] = "profile";
})(ElementDefinitionSlicingDiscriminatorTypeEnum = exports.ElementDefinitionSlicingDiscriminatorTypeEnum || (exports.ElementDefinitionSlicingDiscriminatorTypeEnum = {}));
/**
 * The first element in the sequence, the one that carries the slicing, is the definition that applies to all the slices. This is based on the unconstrained element, but can apply any constraints as appropriate. This may include the common constraints on the children of the element.
 */
class ElementDefinitionSlicing extends fhirModels.Element {
    /**
     * Default constructor for ElementDefinitionSlicing from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["discriminator"] !== undefined) {
            this.discriminator = source.discriminator.map((x) => new fhirModels.ElementDefinitionSlicingDiscriminator(x));
        }
        if (source["ordered"] !== undefined) {
            this.ordered = source.ordered;
        }
        if (source["_ordered"] !== undefined) {
            this._ordered = new fhirModels.Element(source._ordered);
        }
        if (source["rules"] !== undefined) {
            this.rules = source.rules;
        }
        if (source["_rules"] !== undefined) {
            this._rules = new fhirModels.Element(source._rules);
        }
    }
    /**
     * Factory function to create a ElementDefinitionSlicing from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ElementDefinitionSlicing(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ElementDefinitionSlicing is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ElementDefinitionSlicing contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["rules"] === undefined) {
            missingElements.push("rules");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ElementDefinitionSlicing = ElementDefinitionSlicing;
/**
 * Code Values for the ElementDefinition.slicing.rules field
 */
var ElementDefinitionSlicingRulesEnum;
(function (ElementDefinitionSlicingRulesEnum) {
    ElementDefinitionSlicingRulesEnum["CLOSED"] = "closed";
    ElementDefinitionSlicingRulesEnum["OPEN"] = "open";
    ElementDefinitionSlicingRulesEnum["OPENATEND"] = "openAtEnd";
})(ElementDefinitionSlicingRulesEnum = exports.ElementDefinitionSlicingRulesEnum || (exports.ElementDefinitionSlicingRulesEnum = {}));
/**
 * The base information does not carry any information that could not be determined from the path and related profiles, but making this determination requires both that the related profiles are available, and that the algorithm to determine them be available. For tooling simplicity, the base information must always be populated in element definitions in snap shots, even if it is the same.
 */
class ElementDefinitionBase extends fhirModels.Element {
    /**
     * Default constructor for ElementDefinitionBase from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["max"] !== undefined) {
            this.max = source.max;
        }
        if (source["_max"] !== undefined) {
            this._max = new fhirModels.Element(source._max);
        }
        if (source["min"] !== undefined) {
            this.min = source.min;
        }
        if (source["_min"] !== undefined) {
            this._min = new fhirModels.Element(source._min);
        }
        if (source["path"] !== undefined) {
            this.path = source.path;
        }
        if (source["_path"] !== undefined) {
            this._path = new fhirModels.Element(source._path);
        }
    }
    /**
     * Factory function to create a ElementDefinitionBase from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ElementDefinitionBase(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ElementDefinitionBase is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ElementDefinitionBase contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["max"] === undefined) {
            missingElements.push("max");
        }
        if (this["min"] === undefined) {
            missingElements.push("min");
        }
        if (this["path"] === undefined) {
            missingElements.push("path");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ElementDefinitionBase = ElementDefinitionBase;
/**
 * The Type of the element can be left blank in a differential constraint, in which case the type is inherited from the resource. Abstract types are not permitted to appear as a type when multiple types are listed.  (I.e. Abstract types cannot be part of a choice).
 */
class ElementDefinitionType extends fhirModels.Element {
    /**
     * Default constructor for ElementDefinitionType from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["aggregation"] !== undefined) {
            this.aggregation = source.aggregation.map((x) => (x));
        }
        if (source["_aggregation"] !== undefined) {
            this._aggregation = source._aggregation.map((x) => new fhirModels.Element(x));
        }
        if (source["code"] !== undefined) {
            this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            this._code = new fhirModels.Element(source._code);
        }
        if (source["profile"] !== undefined) {
            this.profile = source.profile.map((x) => (x));
        }
        if (source["_profile"] !== undefined) {
            this._profile = source._profile.map((x) => new fhirModels.Element(x));
        }
        if (source["targetProfile"] !== undefined) {
            this.targetProfile = source.targetProfile.map((x) => (x));
        }
        if (source["_targetProfile"] !== undefined) {
            this._targetProfile = source._targetProfile.map((x) => new fhirModels.Element(x));
        }
        if (source["versioning"] !== undefined) {
            this.versioning = source.versioning;
        }
        if (source["_versioning"] !== undefined) {
            this._versioning = new fhirModels.Element(source._versioning);
        }
    }
    /**
     * Factory function to create a ElementDefinitionType from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ElementDefinitionType(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ElementDefinitionType is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ElementDefinitionType contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ElementDefinitionType = ElementDefinitionType;
/**
 * Code Values for the ElementDefinition.type.aggregation field
 */
var ElementDefinitionTypeAggregationEnum;
(function (ElementDefinitionTypeAggregationEnum) {
    ElementDefinitionTypeAggregationEnum["CONTAINED"] = "contained";
    ElementDefinitionTypeAggregationEnum["REFERENCED"] = "referenced";
    ElementDefinitionTypeAggregationEnum["BUNDLED"] = "bundled";
})(ElementDefinitionTypeAggregationEnum = exports.ElementDefinitionTypeAggregationEnum || (exports.ElementDefinitionTypeAggregationEnum = {}));
/**
 * Code Values for the ElementDefinition.type.versioning field
 */
var ElementDefinitionTypeVersioningEnum;
(function (ElementDefinitionTypeVersioningEnum) {
    ElementDefinitionTypeVersioningEnum["EITHER"] = "either";
    ElementDefinitionTypeVersioningEnum["INDEPENDENT"] = "independent";
    ElementDefinitionTypeVersioningEnum["SPECIFIC"] = "specific";
})(ElementDefinitionTypeVersioningEnum = exports.ElementDefinitionTypeVersioningEnum || (exports.ElementDefinitionTypeVersioningEnum = {}));
/**
 * Examples will most commonly be present for data where it's not implicitly obvious from either the data type or value set what the values might be.  (I.e. Example values for dates or quantities would generally be unnecessary.)  If the example value is fully populated, the publication tool can generate an instance automatically.
 */
class ElementDefinitionExample extends fhirModels.Element {
    /**
     * Default constructor for ElementDefinitionExample from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["label"] !== undefined) {
            this.label = source.label;
        }
        if (source["_label"] !== undefined) {
            this._label = new fhirModels.Element(source._label);
        }
        if (source["valueBase64Binary"] !== undefined) {
            this.valueBase64Binary = source.valueBase64Binary;
        }
        if (source["_valueBase64Binary"] !== undefined) {
            this._valueBase64Binary = new fhirModels.Element(source._valueBase64Binary);
        }
        if (source["valueBoolean"] !== undefined) {
            this.valueBoolean = source.valueBoolean;
        }
        if (source["_valueBoolean"] !== undefined) {
            this._valueBoolean = new fhirModels.Element(source._valueBoolean);
        }
        if (source["valueCanonical"] !== undefined) {
            this.valueCanonical = source.valueCanonical;
        }
        if (source["_valueCanonical"] !== undefined) {
            this._valueCanonical = new fhirModels.Element(source._valueCanonical);
        }
        if (source["valueCode"] !== undefined) {
            this.valueCode = source.valueCode;
        }
        if (source["_valueCode"] !== undefined) {
            this._valueCode = new fhirModels.Element(source._valueCode);
        }
        if (source["valueDate"] !== undefined) {
            this.valueDate = source.valueDate;
        }
        if (source["_valueDate"] !== undefined) {
            this._valueDate = new fhirModels.Element(source._valueDate);
        }
        if (source["valueDateTime"] !== undefined) {
            this.valueDateTime = source.valueDateTime;
        }
        if (source["_valueDateTime"] !== undefined) {
            this._valueDateTime = new fhirModels.Element(source._valueDateTime);
        }
        if (source["valueDecimal"] !== undefined) {
            this.valueDecimal = source.valueDecimal;
        }
        if (source["_valueDecimal"] !== undefined) {
            this._valueDecimal = new fhirModels.Element(source._valueDecimal);
        }
        if (source["valueId"] !== undefined) {
            this.valueId = source.valueId;
        }
        if (source["_valueId"] !== undefined) {
            this._valueId = new fhirModels.Element(source._valueId);
        }
        if (source["valueInstant"] !== undefined) {
            this.valueInstant = source.valueInstant;
        }
        if (source["_valueInstant"] !== undefined) {
            this._valueInstant = new fhirModels.Element(source._valueInstant);
        }
        if (source["valueInteger"] !== undefined) {
            this.valueInteger = source.valueInteger;
        }
        if (source["_valueInteger"] !== undefined) {
            this._valueInteger = new fhirModels.Element(source._valueInteger);
        }
        if (source["valueMarkdown"] !== undefined) {
            this.valueMarkdown = source.valueMarkdown;
        }
        if (source["_valueMarkdown"] !== undefined) {
            this._valueMarkdown = new fhirModels.Element(source._valueMarkdown);
        }
        if (source["valueOid"] !== undefined) {
            this.valueOid = source.valueOid;
        }
        if (source["_valueOid"] !== undefined) {
            this._valueOid = new fhirModels.Element(source._valueOid);
        }
        if (source["valuePositiveInt"] !== undefined) {
            this.valuePositiveInt = source.valuePositiveInt;
        }
        if (source["_valuePositiveInt"] !== undefined) {
            this._valuePositiveInt = new fhirModels.Element(source._valuePositiveInt);
        }
        if (source["valueString"] !== undefined) {
            this.valueString = source.valueString;
        }
        if (source["_valueString"] !== undefined) {
            this._valueString = new fhirModels.Element(source._valueString);
        }
        if (source["valueTime"] !== undefined) {
            this.valueTime = source.valueTime;
        }
        if (source["_valueTime"] !== undefined) {
            this._valueTime = new fhirModels.Element(source._valueTime);
        }
        if (source["valueUnsignedInt"] !== undefined) {
            this.valueUnsignedInt = source.valueUnsignedInt;
        }
        if (source["_valueUnsignedInt"] !== undefined) {
            this._valueUnsignedInt = new fhirModels.Element(source._valueUnsignedInt);
        }
        if (source["valueUri"] !== undefined) {
            this.valueUri = source.valueUri;
        }
        if (source["_valueUri"] !== undefined) {
            this._valueUri = new fhirModels.Element(source._valueUri);
        }
        if (source["valueUrl"] !== undefined) {
            this.valueUrl = source.valueUrl;
        }
        if (source["_valueUrl"] !== undefined) {
            this._valueUrl = new fhirModels.Element(source._valueUrl);
        }
        if (source["valueUuid"] !== undefined) {
            this.valueUuid = source.valueUuid;
        }
        if (source["_valueUuid"] !== undefined) {
            this._valueUuid = new fhirModels.Element(source._valueUuid);
        }
        if (source["valueAddress"] !== undefined) {
            this.valueAddress = new fhirModels.Address(source.valueAddress);
        }
        if (source["valueAge"] !== undefined) {
            this.valueAge = new fhirModels.Age(source.valueAge);
        }
        if (source["valueAnnotation"] !== undefined) {
            this.valueAnnotation = new fhirModels.Annotation(source.valueAnnotation);
        }
        if (source["valueAttachment"] !== undefined) {
            this.valueAttachment = new fhirModels.Attachment(source.valueAttachment);
        }
        if (source["valueCodeableConcept"] !== undefined) {
            this.valueCodeableConcept = new fhirModels.CodeableConcept(source.valueCodeableConcept);
        }
        if (source["valueCoding"] !== undefined) {
            this.valueCoding = new fhirModels.Coding(source.valueCoding);
        }
        if (source["valueContactPoint"] !== undefined) {
            this.valueContactPoint = new fhirModels.ContactPoint(source.valueContactPoint);
        }
        if (source["valueCount"] !== undefined) {
            this.valueCount = new fhirModels.Count(source.valueCount);
        }
        if (source["valueDistance"] !== undefined) {
            this.valueDistance = new fhirModels.Distance(source.valueDistance);
        }
        if (source["valueDuration"] !== undefined) {
            this.valueDuration = new fhirModels.Duration(source.valueDuration);
        }
        if (source["valueHumanName"] !== undefined) {
            this.valueHumanName = new fhirModels.HumanName(source.valueHumanName);
        }
        if (source["valueIdentifier"] !== undefined) {
            this.valueIdentifier = new fhirModels.Identifier(source.valueIdentifier);
        }
        if (source["valueMoney"] !== undefined) {
            this.valueMoney = new fhirModels.Money(source.valueMoney);
        }
        if (source["valuePeriod"] !== undefined) {
            this.valuePeriod = new fhirModels.Period(source.valuePeriod);
        }
        if (source["valueQuantity"] !== undefined) {
            this.valueQuantity = new fhirModels.Quantity(source.valueQuantity);
        }
        if (source["valueRange"] !== undefined) {
            this.valueRange = new fhirModels.Range(source.valueRange);
        }
        if (source["valueRatio"] !== undefined) {
            this.valueRatio = new fhirModels.Ratio(source.valueRatio);
        }
        if (source["valueReference"] !== undefined) {
            this.valueReference = new fhirModels.Reference(source.valueReference);
        }
        if (source["valueSampledData"] !== undefined) {
            this.valueSampledData = new fhirModels.SampledData(source.valueSampledData);
        }
        if (source["valueSignature"] !== undefined) {
            this.valueSignature = new fhirModels.Signature(source.valueSignature);
        }
        if (source["valueTiming"] !== undefined) {
            this.valueTiming = new fhirModels.Timing(source.valueTiming);
        }
        if (source["valueContactDetail"] !== undefined) {
            this.valueContactDetail = new fhirModels.ContactDetail(source.valueContactDetail);
        }
        if (source["valueContributor"] !== undefined) {
            this.valueContributor = new fhirModels.Contributor(source.valueContributor);
        }
        if (source["valueDataRequirement"] !== undefined) {
            this.valueDataRequirement = new fhirModels.DataRequirement(source.valueDataRequirement);
        }
        if (source["valueExpression"] !== undefined) {
            this.valueExpression = new fhirModels.Expression(source.valueExpression);
        }
        if (source["valueParameterDefinition"] !== undefined) {
            this.valueParameterDefinition = new fhirModels.ParameterDefinition(source.valueParameterDefinition);
        }
        if (source["valueRelatedArtifact"] !== undefined) {
            this.valueRelatedArtifact = new fhirModels.RelatedArtifact(source.valueRelatedArtifact);
        }
        if (source["valueTriggerDefinition"] !== undefined) {
            this.valueTriggerDefinition = new fhirModels.TriggerDefinition(source.valueTriggerDefinition);
        }
        if (source["valueUsageContext"] !== undefined) {
            this.valueUsageContext = new fhirModels.UsageContext(source.valueUsageContext);
        }
        if (source["valueDosage"] !== undefined) {
            this.valueDosage = new fhirModels.Dosage(source.valueDosage);
        }
        if (source["valueMeta"] !== undefined) {
            this.valueMeta = new fhirModels.Meta(source.valueMeta);
        }
    }
    /**
     * Factory function to create a ElementDefinitionExample from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ElementDefinitionExample(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ElementDefinitionExample is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ElementDefinitionExample contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["label"] === undefined) {
            missingElements.push("label");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ElementDefinitionExample = ElementDefinitionExample;
/**
 * Constraints should be declared on the "context" element - the lowest element in the hierarchy that is common to all nodes referenced by the constraint.
 */
class ElementDefinitionConstraint extends fhirModels.Element {
    /**
     * Default constructor for ElementDefinitionConstraint from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["expression"] !== undefined) {
            this.expression = source.expression;
        }
        if (source["_expression"] !== undefined) {
            this._expression = new fhirModels.Element(source._expression);
        }
        if (source["human"] !== undefined) {
            this.human = source.human;
        }
        if (source["_human"] !== undefined) {
            this._human = new fhirModels.Element(source._human);
        }
        if (source["key"] !== undefined) {
            this.key = source.key;
        }
        if (source["_key"] !== undefined) {
            this._key = new fhirModels.Element(source._key);
        }
        if (source["requirements"] !== undefined) {
            this.requirements = source.requirements;
        }
        if (source["_requirements"] !== undefined) {
            this._requirements = new fhirModels.Element(source._requirements);
        }
        if (source["severity"] !== undefined) {
            this.severity = source.severity;
        }
        if (source["_severity"] !== undefined) {
            this._severity = new fhirModels.Element(source._severity);
        }
        if (source["source"] !== undefined) {
            this.source = source.source;
        }
        if (source["_source"] !== undefined) {
            this._source = new fhirModels.Element(source._source);
        }
        if (source["xpath"] !== undefined) {
            this.xpath = source.xpath;
        }
        if (source["_xpath"] !== undefined) {
            this._xpath = new fhirModels.Element(source._xpath);
        }
    }
    /**
     * Factory function to create a ElementDefinitionConstraint from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ElementDefinitionConstraint(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ElementDefinitionConstraint is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ElementDefinitionConstraint contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["human"] === undefined) {
            missingElements.push("human");
        }
        if (this["key"] === undefined) {
            missingElements.push("key");
        }
        if (this["severity"] === undefined) {
            missingElements.push("severity");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ElementDefinitionConstraint = ElementDefinitionConstraint;
/**
 * Code Values for the ElementDefinition.constraint.severity field
 */
var ElementDefinitionConstraintSeverityEnum;
(function (ElementDefinitionConstraintSeverityEnum) {
    ElementDefinitionConstraintSeverityEnum["ERROR"] = "error";
    ElementDefinitionConstraintSeverityEnum["WARNING"] = "warning";
})(ElementDefinitionConstraintSeverityEnum = exports.ElementDefinitionConstraintSeverityEnum || (exports.ElementDefinitionConstraintSeverityEnum = {}));
/**
 * For a CodeableConcept, when no codes are allowed - only text, use a binding of strength "required" with a description explaining that no coded values are allowed and what sort of information to put in the "text" element.
 */
class ElementDefinitionBinding extends fhirModels.Element {
    /**
     * Default constructor for ElementDefinitionBinding from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["strength"] !== undefined) {
            this.strength = source.strength;
        }
        if (source["_strength"] !== undefined) {
            this._strength = new fhirModels.Element(source._strength);
        }
        if (source["valueSet"] !== undefined) {
            this.valueSet = source.valueSet;
        }
        if (source["_valueSet"] !== undefined) {
            this._valueSet = new fhirModels.Element(source._valueSet);
        }
    }
    /**
     * Factory function to create a ElementDefinitionBinding from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ElementDefinitionBinding(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ElementDefinitionBinding is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ElementDefinitionBinding contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["strength"] === undefined) {
            missingElements.push("strength");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ElementDefinitionBinding = ElementDefinitionBinding;
/**
 * Code Values for the ElementDefinition.binding.strength field
 */
var ElementDefinitionBindingStrengthEnum;
(function (ElementDefinitionBindingStrengthEnum) {
    ElementDefinitionBindingStrengthEnum["REQUIRED"] = "required";
    ElementDefinitionBindingStrengthEnum["EXTENSIBLE"] = "extensible";
    ElementDefinitionBindingStrengthEnum["PREFERRED"] = "preferred";
    ElementDefinitionBindingStrengthEnum["EXAMPLE"] = "example";
})(ElementDefinitionBindingStrengthEnum = exports.ElementDefinitionBindingStrengthEnum || (exports.ElementDefinitionBindingStrengthEnum = {}));
/**
 * Mappings are not necessarily specific enough for safe translation.
 */
class ElementDefinitionMapping extends fhirModels.Element {
    /**
     * Default constructor for ElementDefinitionMapping from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["comment"] !== undefined) {
            this.comment = source.comment;
        }
        if (source["_comment"] !== undefined) {
            this._comment = new fhirModels.Element(source._comment);
        }
        if (source["identity"] !== undefined) {
            this.identity = source.identity;
        }
        if (source["_identity"] !== undefined) {
            this._identity = new fhirModels.Element(source._identity);
        }
        if (source["language"] !== undefined) {
            this.language = source.language;
        }
        if (source["_language"] !== undefined) {
            this._language = new fhirModels.Element(source._language);
        }
        if (source["map"] !== undefined) {
            this.map = source.map;
        }
        if (source["_map"] !== undefined) {
            this._map = new fhirModels.Element(source._map);
        }
    }
    /**
     * Factory function to create a ElementDefinitionMapping from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ElementDefinitionMapping(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ElementDefinitionMapping is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ElementDefinitionMapping contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["identity"] === undefined) {
            missingElements.push("identity");
        }
        if (this["map"] === undefined) {
            missingElements.push("map");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ElementDefinitionMapping = ElementDefinitionMapping;
/**
 * Captures constraints on each element within the resource, profile, or extension.
 */
class ElementDefinition extends fhirModels.BackboneElement {
    /**
     * Default constructor for ElementDefinition from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["alias"] !== undefined) {
            this.alias = source.alias.map((x) => (x));
        }
        if (source["_alias"] !== undefined) {
            this._alias = source._alias.map((x) => new fhirModels.Element(x));
        }
        if (source["base"] !== undefined) {
            this.base = new fhirModels.ElementDefinitionBase(source.base);
        }
        if (source["binding"] !== undefined) {
            this.binding = new fhirModels.ElementDefinitionBinding(source.binding);
        }
        if (source["code"] !== undefined) {
            this.code = source.code.map((x) => new fhirModels.Coding(x));
        }
        if (source["comment"] !== undefined) {
            this.comment = source.comment;
        }
        if (source["_comment"] !== undefined) {
            this._comment = new fhirModels.Element(source._comment);
        }
        if (source["condition"] !== undefined) {
            this.condition = source.condition.map((x) => (x));
        }
        if (source["_condition"] !== undefined) {
            this._condition = source._condition.map((x) => new fhirModels.Element(x));
        }
        if (source["constraint"] !== undefined) {
            this.constraint = source.constraint.map((x) => new fhirModels.ElementDefinitionConstraint(x));
        }
        if (source["contentReference"] !== undefined) {
            this.contentReference = source.contentReference;
        }
        if (source["_contentReference"] !== undefined) {
            this._contentReference = new fhirModels.Element(source._contentReference);
        }
        if (source["defaultValueBase64Binary"] !== undefined) {
            this.defaultValueBase64Binary = source.defaultValueBase64Binary;
        }
        if (source["_defaultValueBase64Binary"] !== undefined) {
            this._defaultValueBase64Binary = new fhirModels.Element(source._defaultValueBase64Binary);
        }
        if (source["defaultValueBoolean"] !== undefined) {
            this.defaultValueBoolean = source.defaultValueBoolean;
        }
        if (source["_defaultValueBoolean"] !== undefined) {
            this._defaultValueBoolean = new fhirModels.Element(source._defaultValueBoolean);
        }
        if (source["defaultValueCanonical"] !== undefined) {
            this.defaultValueCanonical = source.defaultValueCanonical;
        }
        if (source["_defaultValueCanonical"] !== undefined) {
            this._defaultValueCanonical = new fhirModels.Element(source._defaultValueCanonical);
        }
        if (source["defaultValueCode"] !== undefined) {
            this.defaultValueCode = source.defaultValueCode;
        }
        if (source["_defaultValueCode"] !== undefined) {
            this._defaultValueCode = new fhirModels.Element(source._defaultValueCode);
        }
        if (source["defaultValueDate"] !== undefined) {
            this.defaultValueDate = source.defaultValueDate;
        }
        if (source["_defaultValueDate"] !== undefined) {
            this._defaultValueDate = new fhirModels.Element(source._defaultValueDate);
        }
        if (source["defaultValueDateTime"] !== undefined) {
            this.defaultValueDateTime = source.defaultValueDateTime;
        }
        if (source["_defaultValueDateTime"] !== undefined) {
            this._defaultValueDateTime = new fhirModels.Element(source._defaultValueDateTime);
        }
        if (source["defaultValueDecimal"] !== undefined) {
            this.defaultValueDecimal = source.defaultValueDecimal;
        }
        if (source["_defaultValueDecimal"] !== undefined) {
            this._defaultValueDecimal = new fhirModels.Element(source._defaultValueDecimal);
        }
        if (source["defaultValueId"] !== undefined) {
            this.defaultValueId = source.defaultValueId;
        }
        if (source["_defaultValueId"] !== undefined) {
            this._defaultValueId = new fhirModels.Element(source._defaultValueId);
        }
        if (source["defaultValueInstant"] !== undefined) {
            this.defaultValueInstant = source.defaultValueInstant;
        }
        if (source["_defaultValueInstant"] !== undefined) {
            this._defaultValueInstant = new fhirModels.Element(source._defaultValueInstant);
        }
        if (source["defaultValueInteger"] !== undefined) {
            this.defaultValueInteger = source.defaultValueInteger;
        }
        if (source["_defaultValueInteger"] !== undefined) {
            this._defaultValueInteger = new fhirModels.Element(source._defaultValueInteger);
        }
        if (source["defaultValueMarkdown"] !== undefined) {
            this.defaultValueMarkdown = source.defaultValueMarkdown;
        }
        if (source["_defaultValueMarkdown"] !== undefined) {
            this._defaultValueMarkdown = new fhirModels.Element(source._defaultValueMarkdown);
        }
        if (source["defaultValueOid"] !== undefined) {
            this.defaultValueOid = source.defaultValueOid;
        }
        if (source["_defaultValueOid"] !== undefined) {
            this._defaultValueOid = new fhirModels.Element(source._defaultValueOid);
        }
        if (source["defaultValuePositiveInt"] !== undefined) {
            this.defaultValuePositiveInt = source.defaultValuePositiveInt;
        }
        if (source["_defaultValuePositiveInt"] !== undefined) {
            this._defaultValuePositiveInt = new fhirModels.Element(source._defaultValuePositiveInt);
        }
        if (source["defaultValueString"] !== undefined) {
            this.defaultValueString = source.defaultValueString;
        }
        if (source["_defaultValueString"] !== undefined) {
            this._defaultValueString = new fhirModels.Element(source._defaultValueString);
        }
        if (source["defaultValueTime"] !== undefined) {
            this.defaultValueTime = source.defaultValueTime;
        }
        if (source["_defaultValueTime"] !== undefined) {
            this._defaultValueTime = new fhirModels.Element(source._defaultValueTime);
        }
        if (source["defaultValueUnsignedInt"] !== undefined) {
            this.defaultValueUnsignedInt = source.defaultValueUnsignedInt;
        }
        if (source["_defaultValueUnsignedInt"] !== undefined) {
            this._defaultValueUnsignedInt = new fhirModels.Element(source._defaultValueUnsignedInt);
        }
        if (source["defaultValueUri"] !== undefined) {
            this.defaultValueUri = source.defaultValueUri;
        }
        if (source["_defaultValueUri"] !== undefined) {
            this._defaultValueUri = new fhirModels.Element(source._defaultValueUri);
        }
        if (source["defaultValueUrl"] !== undefined) {
            this.defaultValueUrl = source.defaultValueUrl;
        }
        if (source["_defaultValueUrl"] !== undefined) {
            this._defaultValueUrl = new fhirModels.Element(source._defaultValueUrl);
        }
        if (source["defaultValueUuid"] !== undefined) {
            this.defaultValueUuid = source.defaultValueUuid;
        }
        if (source["_defaultValueUuid"] !== undefined) {
            this._defaultValueUuid = new fhirModels.Element(source._defaultValueUuid);
        }
        if (source["defaultValueAddress"] !== undefined) {
            this.defaultValueAddress = new fhirModels.Address(source.defaultValueAddress);
        }
        if (source["defaultValueAge"] !== undefined) {
            this.defaultValueAge = new fhirModels.Age(source.defaultValueAge);
        }
        if (source["defaultValueAnnotation"] !== undefined) {
            this.defaultValueAnnotation = new fhirModels.Annotation(source.defaultValueAnnotation);
        }
        if (source["defaultValueAttachment"] !== undefined) {
            this.defaultValueAttachment = new fhirModels.Attachment(source.defaultValueAttachment);
        }
        if (source["defaultValueCodeableConcept"] !== undefined) {
            this.defaultValueCodeableConcept = new fhirModels.CodeableConcept(source.defaultValueCodeableConcept);
        }
        if (source["defaultValueCoding"] !== undefined) {
            this.defaultValueCoding = new fhirModels.Coding(source.defaultValueCoding);
        }
        if (source["defaultValueContactPoint"] !== undefined) {
            this.defaultValueContactPoint = new fhirModels.ContactPoint(source.defaultValueContactPoint);
        }
        if (source["defaultValueCount"] !== undefined) {
            this.defaultValueCount = new fhirModels.Count(source.defaultValueCount);
        }
        if (source["defaultValueDistance"] !== undefined) {
            this.defaultValueDistance = new fhirModels.Distance(source.defaultValueDistance);
        }
        if (source["defaultValueDuration"] !== undefined) {
            this.defaultValueDuration = new fhirModels.Duration(source.defaultValueDuration);
        }
        if (source["defaultValueHumanName"] !== undefined) {
            this.defaultValueHumanName = new fhirModels.HumanName(source.defaultValueHumanName);
        }
        if (source["defaultValueIdentifier"] !== undefined) {
            this.defaultValueIdentifier = new fhirModels.Identifier(source.defaultValueIdentifier);
        }
        if (source["defaultValueMoney"] !== undefined) {
            this.defaultValueMoney = new fhirModels.Money(source.defaultValueMoney);
        }
        if (source["defaultValuePeriod"] !== undefined) {
            this.defaultValuePeriod = new fhirModels.Period(source.defaultValuePeriod);
        }
        if (source["defaultValueQuantity"] !== undefined) {
            this.defaultValueQuantity = new fhirModels.Quantity(source.defaultValueQuantity);
        }
        if (source["defaultValueRange"] !== undefined) {
            this.defaultValueRange = new fhirModels.Range(source.defaultValueRange);
        }
        if (source["defaultValueRatio"] !== undefined) {
            this.defaultValueRatio = new fhirModels.Ratio(source.defaultValueRatio);
        }
        if (source["defaultValueReference"] !== undefined) {
            this.defaultValueReference = new fhirModels.Reference(source.defaultValueReference);
        }
        if (source["defaultValueSampledData"] !== undefined) {
            this.defaultValueSampledData = new fhirModels.SampledData(source.defaultValueSampledData);
        }
        if (source["defaultValueSignature"] !== undefined) {
            this.defaultValueSignature = new fhirModels.Signature(source.defaultValueSignature);
        }
        if (source["defaultValueTiming"] !== undefined) {
            this.defaultValueTiming = new fhirModels.Timing(source.defaultValueTiming);
        }
        if (source["defaultValueContactDetail"] !== undefined) {
            this.defaultValueContactDetail = new fhirModels.ContactDetail(source.defaultValueContactDetail);
        }
        if (source["defaultValueContributor"] !== undefined) {
            this.defaultValueContributor = new fhirModels.Contributor(source.defaultValueContributor);
        }
        if (source["defaultValueDataRequirement"] !== undefined) {
            this.defaultValueDataRequirement = new fhirModels.DataRequirement(source.defaultValueDataRequirement);
        }
        if (source["defaultValueExpression"] !== undefined) {
            this.defaultValueExpression = new fhirModels.Expression(source.defaultValueExpression);
        }
        if (source["defaultValueParameterDefinition"] !== undefined) {
            this.defaultValueParameterDefinition = new fhirModels.ParameterDefinition(source.defaultValueParameterDefinition);
        }
        if (source["defaultValueRelatedArtifact"] !== undefined) {
            this.defaultValueRelatedArtifact = new fhirModels.RelatedArtifact(source.defaultValueRelatedArtifact);
        }
        if (source["defaultValueTriggerDefinition"] !== undefined) {
            this.defaultValueTriggerDefinition = new fhirModels.TriggerDefinition(source.defaultValueTriggerDefinition);
        }
        if (source["defaultValueUsageContext"] !== undefined) {
            this.defaultValueUsageContext = new fhirModels.UsageContext(source.defaultValueUsageContext);
        }
        if (source["defaultValueDosage"] !== undefined) {
            this.defaultValueDosage = new fhirModels.Dosage(source.defaultValueDosage);
        }
        if (source["defaultValueMeta"] !== undefined) {
            this.defaultValueMeta = new fhirModels.Meta(source.defaultValueMeta);
        }
        if (source["definition"] !== undefined) {
            this.definition = source.definition;
        }
        if (source["_definition"] !== undefined) {
            this._definition = new fhirModels.Element(source._definition);
        }
        if (source["example"] !== undefined) {
            this.example = source.example.map((x) => new fhirModels.ElementDefinitionExample(x));
        }
        if (source["fixedBase64Binary"] !== undefined) {
            this.fixedBase64Binary = source.fixedBase64Binary;
        }
        if (source["_fixedBase64Binary"] !== undefined) {
            this._fixedBase64Binary = new fhirModels.Element(source._fixedBase64Binary);
        }
        if (source["fixedBoolean"] !== undefined) {
            this.fixedBoolean = source.fixedBoolean;
        }
        if (source["_fixedBoolean"] !== undefined) {
            this._fixedBoolean = new fhirModels.Element(source._fixedBoolean);
        }
        if (source["fixedCanonical"] !== undefined) {
            this.fixedCanonical = source.fixedCanonical;
        }
        if (source["_fixedCanonical"] !== undefined) {
            this._fixedCanonical = new fhirModels.Element(source._fixedCanonical);
        }
        if (source["fixedCode"] !== undefined) {
            this.fixedCode = source.fixedCode;
        }
        if (source["_fixedCode"] !== undefined) {
            this._fixedCode = new fhirModels.Element(source._fixedCode);
        }
        if (source["fixedDate"] !== undefined) {
            this.fixedDate = source.fixedDate;
        }
        if (source["_fixedDate"] !== undefined) {
            this._fixedDate = new fhirModels.Element(source._fixedDate);
        }
        if (source["fixedDateTime"] !== undefined) {
            this.fixedDateTime = source.fixedDateTime;
        }
        if (source["_fixedDateTime"] !== undefined) {
            this._fixedDateTime = new fhirModels.Element(source._fixedDateTime);
        }
        if (source["fixedDecimal"] !== undefined) {
            this.fixedDecimal = source.fixedDecimal;
        }
        if (source["_fixedDecimal"] !== undefined) {
            this._fixedDecimal = new fhirModels.Element(source._fixedDecimal);
        }
        if (source["fixedId"] !== undefined) {
            this.fixedId = source.fixedId;
        }
        if (source["_fixedId"] !== undefined) {
            this._fixedId = new fhirModels.Element(source._fixedId);
        }
        if (source["fixedInstant"] !== undefined) {
            this.fixedInstant = source.fixedInstant;
        }
        if (source["_fixedInstant"] !== undefined) {
            this._fixedInstant = new fhirModels.Element(source._fixedInstant);
        }
        if (source["fixedInteger"] !== undefined) {
            this.fixedInteger = source.fixedInteger;
        }
        if (source["_fixedInteger"] !== undefined) {
            this._fixedInteger = new fhirModels.Element(source._fixedInteger);
        }
        if (source["fixedMarkdown"] !== undefined) {
            this.fixedMarkdown = source.fixedMarkdown;
        }
        if (source["_fixedMarkdown"] !== undefined) {
            this._fixedMarkdown = new fhirModels.Element(source._fixedMarkdown);
        }
        if (source["fixedOid"] !== undefined) {
            this.fixedOid = source.fixedOid;
        }
        if (source["_fixedOid"] !== undefined) {
            this._fixedOid = new fhirModels.Element(source._fixedOid);
        }
        if (source["fixedPositiveInt"] !== undefined) {
            this.fixedPositiveInt = source.fixedPositiveInt;
        }
        if (source["_fixedPositiveInt"] !== undefined) {
            this._fixedPositiveInt = new fhirModels.Element(source._fixedPositiveInt);
        }
        if (source["fixedString"] !== undefined) {
            this.fixedString = source.fixedString;
        }
        if (source["_fixedString"] !== undefined) {
            this._fixedString = new fhirModels.Element(source._fixedString);
        }
        if (source["fixedTime"] !== undefined) {
            this.fixedTime = source.fixedTime;
        }
        if (source["_fixedTime"] !== undefined) {
            this._fixedTime = new fhirModels.Element(source._fixedTime);
        }
        if (source["fixedUnsignedInt"] !== undefined) {
            this.fixedUnsignedInt = source.fixedUnsignedInt;
        }
        if (source["_fixedUnsignedInt"] !== undefined) {
            this._fixedUnsignedInt = new fhirModels.Element(source._fixedUnsignedInt);
        }
        if (source["fixedUri"] !== undefined) {
            this.fixedUri = source.fixedUri;
        }
        if (source["_fixedUri"] !== undefined) {
            this._fixedUri = new fhirModels.Element(source._fixedUri);
        }
        if (source["fixedUrl"] !== undefined) {
            this.fixedUrl = source.fixedUrl;
        }
        if (source["_fixedUrl"] !== undefined) {
            this._fixedUrl = new fhirModels.Element(source._fixedUrl);
        }
        if (source["fixedUuid"] !== undefined) {
            this.fixedUuid = source.fixedUuid;
        }
        if (source["_fixedUuid"] !== undefined) {
            this._fixedUuid = new fhirModels.Element(source._fixedUuid);
        }
        if (source["fixedAddress"] !== undefined) {
            this.fixedAddress = new fhirModels.Address(source.fixedAddress);
        }
        if (source["fixedAge"] !== undefined) {
            this.fixedAge = new fhirModels.Age(source.fixedAge);
        }
        if (source["fixedAnnotation"] !== undefined) {
            this.fixedAnnotation = new fhirModels.Annotation(source.fixedAnnotation);
        }
        if (source["fixedAttachment"] !== undefined) {
            this.fixedAttachment = new fhirModels.Attachment(source.fixedAttachment);
        }
        if (source["fixedCodeableConcept"] !== undefined) {
            this.fixedCodeableConcept = new fhirModels.CodeableConcept(source.fixedCodeableConcept);
        }
        if (source["fixedCoding"] !== undefined) {
            this.fixedCoding = new fhirModels.Coding(source.fixedCoding);
        }
        if (source["fixedContactPoint"] !== undefined) {
            this.fixedContactPoint = new fhirModels.ContactPoint(source.fixedContactPoint);
        }
        if (source["fixedCount"] !== undefined) {
            this.fixedCount = new fhirModels.Count(source.fixedCount);
        }
        if (source["fixedDistance"] !== undefined) {
            this.fixedDistance = new fhirModels.Distance(source.fixedDistance);
        }
        if (source["fixedDuration"] !== undefined) {
            this.fixedDuration = new fhirModels.Duration(source.fixedDuration);
        }
        if (source["fixedHumanName"] !== undefined) {
            this.fixedHumanName = new fhirModels.HumanName(source.fixedHumanName);
        }
        if (source["fixedIdentifier"] !== undefined) {
            this.fixedIdentifier = new fhirModels.Identifier(source.fixedIdentifier);
        }
        if (source["fixedMoney"] !== undefined) {
            this.fixedMoney = new fhirModels.Money(source.fixedMoney);
        }
        if (source["fixedPeriod"] !== undefined) {
            this.fixedPeriod = new fhirModels.Period(source.fixedPeriod);
        }
        if (source["fixedQuantity"] !== undefined) {
            this.fixedQuantity = new fhirModels.Quantity(source.fixedQuantity);
        }
        if (source["fixedRange"] !== undefined) {
            this.fixedRange = new fhirModels.Range(source.fixedRange);
        }
        if (source["fixedRatio"] !== undefined) {
            this.fixedRatio = new fhirModels.Ratio(source.fixedRatio);
        }
        if (source["fixedReference"] !== undefined) {
            this.fixedReference = new fhirModels.Reference(source.fixedReference);
        }
        if (source["fixedSampledData"] !== undefined) {
            this.fixedSampledData = new fhirModels.SampledData(source.fixedSampledData);
        }
        if (source["fixedSignature"] !== undefined) {
            this.fixedSignature = new fhirModels.Signature(source.fixedSignature);
        }
        if (source["fixedTiming"] !== undefined) {
            this.fixedTiming = new fhirModels.Timing(source.fixedTiming);
        }
        if (source["fixedContactDetail"] !== undefined) {
            this.fixedContactDetail = new fhirModels.ContactDetail(source.fixedContactDetail);
        }
        if (source["fixedContributor"] !== undefined) {
            this.fixedContributor = new fhirModels.Contributor(source.fixedContributor);
        }
        if (source["fixedDataRequirement"] !== undefined) {
            this.fixedDataRequirement = new fhirModels.DataRequirement(source.fixedDataRequirement);
        }
        if (source["fixedExpression"] !== undefined) {
            this.fixedExpression = new fhirModels.Expression(source.fixedExpression);
        }
        if (source["fixedParameterDefinition"] !== undefined) {
            this.fixedParameterDefinition = new fhirModels.ParameterDefinition(source.fixedParameterDefinition);
        }
        if (source["fixedRelatedArtifact"] !== undefined) {
            this.fixedRelatedArtifact = new fhirModels.RelatedArtifact(source.fixedRelatedArtifact);
        }
        if (source["fixedTriggerDefinition"] !== undefined) {
            this.fixedTriggerDefinition = new fhirModels.TriggerDefinition(source.fixedTriggerDefinition);
        }
        if (source["fixedUsageContext"] !== undefined) {
            this.fixedUsageContext = new fhirModels.UsageContext(source.fixedUsageContext);
        }
        if (source["fixedDosage"] !== undefined) {
            this.fixedDosage = new fhirModels.Dosage(source.fixedDosage);
        }
        if (source["fixedMeta"] !== undefined) {
            this.fixedMeta = new fhirModels.Meta(source.fixedMeta);
        }
        if (source["isModifier"] !== undefined) {
            this.isModifier = source.isModifier;
        }
        if (source["_isModifier"] !== undefined) {
            this._isModifier = new fhirModels.Element(source._isModifier);
        }
        if (source["isModifierReason"] !== undefined) {
            this.isModifierReason = source.isModifierReason;
        }
        if (source["_isModifierReason"] !== undefined) {
            this._isModifierReason = new fhirModels.Element(source._isModifierReason);
        }
        if (source["isSummary"] !== undefined) {
            this.isSummary = source.isSummary;
        }
        if (source["_isSummary"] !== undefined) {
            this._isSummary = new fhirModels.Element(source._isSummary);
        }
        if (source["label"] !== undefined) {
            this.label = source.label;
        }
        if (source["_label"] !== undefined) {
            this._label = new fhirModels.Element(source._label);
        }
        if (source["mapping"] !== undefined) {
            this.mapping = source.mapping.map((x) => new fhirModels.ElementDefinitionMapping(x));
        }
        if (source["max"] !== undefined) {
            this.max = source.max;
        }
        if (source["_max"] !== undefined) {
            this._max = new fhirModels.Element(source._max);
        }
        if (source["maxLength"] !== undefined) {
            this.maxLength = source.maxLength;
        }
        if (source["_maxLength"] !== undefined) {
            this._maxLength = new fhirModels.Element(source._maxLength);
        }
        if (source["maxValueDate"] !== undefined) {
            this.maxValueDate = source.maxValueDate;
        }
        if (source["_maxValueDate"] !== undefined) {
            this._maxValueDate = new fhirModels.Element(source._maxValueDate);
        }
        if (source["maxValueDateTime"] !== undefined) {
            this.maxValueDateTime = source.maxValueDateTime;
        }
        if (source["_maxValueDateTime"] !== undefined) {
            this._maxValueDateTime = new fhirModels.Element(source._maxValueDateTime);
        }
        if (source["maxValueInstant"] !== undefined) {
            this.maxValueInstant = source.maxValueInstant;
        }
        if (source["_maxValueInstant"] !== undefined) {
            this._maxValueInstant = new fhirModels.Element(source._maxValueInstant);
        }
        if (source["maxValueTime"] !== undefined) {
            this.maxValueTime = source.maxValueTime;
        }
        if (source["_maxValueTime"] !== undefined) {
            this._maxValueTime = new fhirModels.Element(source._maxValueTime);
        }
        if (source["maxValueDecimal"] !== undefined) {
            this.maxValueDecimal = source.maxValueDecimal;
        }
        if (source["_maxValueDecimal"] !== undefined) {
            this._maxValueDecimal = new fhirModels.Element(source._maxValueDecimal);
        }
        if (source["maxValueInteger"] !== undefined) {
            this.maxValueInteger = source.maxValueInteger;
        }
        if (source["_maxValueInteger"] !== undefined) {
            this._maxValueInteger = new fhirModels.Element(source._maxValueInteger);
        }
        if (source["maxValuePositiveInt"] !== undefined) {
            this.maxValuePositiveInt = source.maxValuePositiveInt;
        }
        if (source["_maxValuePositiveInt"] !== undefined) {
            this._maxValuePositiveInt = new fhirModels.Element(source._maxValuePositiveInt);
        }
        if (source["maxValueUnsignedInt"] !== undefined) {
            this.maxValueUnsignedInt = source.maxValueUnsignedInt;
        }
        if (source["_maxValueUnsignedInt"] !== undefined) {
            this._maxValueUnsignedInt = new fhirModels.Element(source._maxValueUnsignedInt);
        }
        if (source["maxValueQuantity"] !== undefined) {
            this.maxValueQuantity = new fhirModels.Quantity(source.maxValueQuantity);
        }
        if (source["meaningWhenMissing"] !== undefined) {
            this.meaningWhenMissing = source.meaningWhenMissing;
        }
        if (source["_meaningWhenMissing"] !== undefined) {
            this._meaningWhenMissing = new fhirModels.Element(source._meaningWhenMissing);
        }
        if (source["min"] !== undefined) {
            this.min = source.min;
        }
        if (source["_min"] !== undefined) {
            this._min = new fhirModels.Element(source._min);
        }
        if (source["minValueDate"] !== undefined) {
            this.minValueDate = source.minValueDate;
        }
        if (source["_minValueDate"] !== undefined) {
            this._minValueDate = new fhirModels.Element(source._minValueDate);
        }
        if (source["minValueDateTime"] !== undefined) {
            this.minValueDateTime = source.minValueDateTime;
        }
        if (source["_minValueDateTime"] !== undefined) {
            this._minValueDateTime = new fhirModels.Element(source._minValueDateTime);
        }
        if (source["minValueInstant"] !== undefined) {
            this.minValueInstant = source.minValueInstant;
        }
        if (source["_minValueInstant"] !== undefined) {
            this._minValueInstant = new fhirModels.Element(source._minValueInstant);
        }
        if (source["minValueTime"] !== undefined) {
            this.minValueTime = source.minValueTime;
        }
        if (source["_minValueTime"] !== undefined) {
            this._minValueTime = new fhirModels.Element(source._minValueTime);
        }
        if (source["minValueDecimal"] !== undefined) {
            this.minValueDecimal = source.minValueDecimal;
        }
        if (source["_minValueDecimal"] !== undefined) {
            this._minValueDecimal = new fhirModels.Element(source._minValueDecimal);
        }
        if (source["minValueInteger"] !== undefined) {
            this.minValueInteger = source.minValueInteger;
        }
        if (source["_minValueInteger"] !== undefined) {
            this._minValueInteger = new fhirModels.Element(source._minValueInteger);
        }
        if (source["minValuePositiveInt"] !== undefined) {
            this.minValuePositiveInt = source.minValuePositiveInt;
        }
        if (source["_minValuePositiveInt"] !== undefined) {
            this._minValuePositiveInt = new fhirModels.Element(source._minValuePositiveInt);
        }
        if (source["minValueUnsignedInt"] !== undefined) {
            this.minValueUnsignedInt = source.minValueUnsignedInt;
        }
        if (source["_minValueUnsignedInt"] !== undefined) {
            this._minValueUnsignedInt = new fhirModels.Element(source._minValueUnsignedInt);
        }
        if (source["minValueQuantity"] !== undefined) {
            this.minValueQuantity = new fhirModels.Quantity(source.minValueQuantity);
        }
        if (source["mustSupport"] !== undefined) {
            this.mustSupport = source.mustSupport;
        }
        if (source["_mustSupport"] !== undefined) {
            this._mustSupport = new fhirModels.Element(source._mustSupport);
        }
        if (source["orderMeaning"] !== undefined) {
            this.orderMeaning = source.orderMeaning;
        }
        if (source["_orderMeaning"] !== undefined) {
            this._orderMeaning = new fhirModels.Element(source._orderMeaning);
        }
        if (source["path"] !== undefined) {
            this.path = source.path;
        }
        if (source["_path"] !== undefined) {
            this._path = new fhirModels.Element(source._path);
        }
        if (source["patternBase64Binary"] !== undefined) {
            this.patternBase64Binary = source.patternBase64Binary;
        }
        if (source["_patternBase64Binary"] !== undefined) {
            this._patternBase64Binary = new fhirModels.Element(source._patternBase64Binary);
        }
        if (source["patternBoolean"] !== undefined) {
            this.patternBoolean = source.patternBoolean;
        }
        if (source["_patternBoolean"] !== undefined) {
            this._patternBoolean = new fhirModels.Element(source._patternBoolean);
        }
        if (source["patternCanonical"] !== undefined) {
            this.patternCanonical = source.patternCanonical;
        }
        if (source["_patternCanonical"] !== undefined) {
            this._patternCanonical = new fhirModels.Element(source._patternCanonical);
        }
        if (source["patternCode"] !== undefined) {
            this.patternCode = source.patternCode;
        }
        if (source["_patternCode"] !== undefined) {
            this._patternCode = new fhirModels.Element(source._patternCode);
        }
        if (source["patternDate"] !== undefined) {
            this.patternDate = source.patternDate;
        }
        if (source["_patternDate"] !== undefined) {
            this._patternDate = new fhirModels.Element(source._patternDate);
        }
        if (source["patternDateTime"] !== undefined) {
            this.patternDateTime = source.patternDateTime;
        }
        if (source["_patternDateTime"] !== undefined) {
            this._patternDateTime = new fhirModels.Element(source._patternDateTime);
        }
        if (source["patternDecimal"] !== undefined) {
            this.patternDecimal = source.patternDecimal;
        }
        if (source["_patternDecimal"] !== undefined) {
            this._patternDecimal = new fhirModels.Element(source._patternDecimal);
        }
        if (source["patternId"] !== undefined) {
            this.patternId = source.patternId;
        }
        if (source["_patternId"] !== undefined) {
            this._patternId = new fhirModels.Element(source._patternId);
        }
        if (source["patternInstant"] !== undefined) {
            this.patternInstant = source.patternInstant;
        }
        if (source["_patternInstant"] !== undefined) {
            this._patternInstant = new fhirModels.Element(source._patternInstant);
        }
        if (source["patternInteger"] !== undefined) {
            this.patternInteger = source.patternInteger;
        }
        if (source["_patternInteger"] !== undefined) {
            this._patternInteger = new fhirModels.Element(source._patternInteger);
        }
        if (source["patternMarkdown"] !== undefined) {
            this.patternMarkdown = source.patternMarkdown;
        }
        if (source["_patternMarkdown"] !== undefined) {
            this._patternMarkdown = new fhirModels.Element(source._patternMarkdown);
        }
        if (source["patternOid"] !== undefined) {
            this.patternOid = source.patternOid;
        }
        if (source["_patternOid"] !== undefined) {
            this._patternOid = new fhirModels.Element(source._patternOid);
        }
        if (source["patternPositiveInt"] !== undefined) {
            this.patternPositiveInt = source.patternPositiveInt;
        }
        if (source["_patternPositiveInt"] !== undefined) {
            this._patternPositiveInt = new fhirModels.Element(source._patternPositiveInt);
        }
        if (source["patternString"] !== undefined) {
            this.patternString = source.patternString;
        }
        if (source["_patternString"] !== undefined) {
            this._patternString = new fhirModels.Element(source._patternString);
        }
        if (source["patternTime"] !== undefined) {
            this.patternTime = source.patternTime;
        }
        if (source["_patternTime"] !== undefined) {
            this._patternTime = new fhirModels.Element(source._patternTime);
        }
        if (source["patternUnsignedInt"] !== undefined) {
            this.patternUnsignedInt = source.patternUnsignedInt;
        }
        if (source["_patternUnsignedInt"] !== undefined) {
            this._patternUnsignedInt = new fhirModels.Element(source._patternUnsignedInt);
        }
        if (source["patternUri"] !== undefined) {
            this.patternUri = source.patternUri;
        }
        if (source["_patternUri"] !== undefined) {
            this._patternUri = new fhirModels.Element(source._patternUri);
        }
        if (source["patternUrl"] !== undefined) {
            this.patternUrl = source.patternUrl;
        }
        if (source["_patternUrl"] !== undefined) {
            this._patternUrl = new fhirModels.Element(source._patternUrl);
        }
        if (source["patternUuid"] !== undefined) {
            this.patternUuid = source.patternUuid;
        }
        if (source["_patternUuid"] !== undefined) {
            this._patternUuid = new fhirModels.Element(source._patternUuid);
        }
        if (source["patternAddress"] !== undefined) {
            this.patternAddress = new fhirModels.Address(source.patternAddress);
        }
        if (source["patternAge"] !== undefined) {
            this.patternAge = new fhirModels.Age(source.patternAge);
        }
        if (source["patternAnnotation"] !== undefined) {
            this.patternAnnotation = new fhirModels.Annotation(source.patternAnnotation);
        }
        if (source["patternAttachment"] !== undefined) {
            this.patternAttachment = new fhirModels.Attachment(source.patternAttachment);
        }
        if (source["patternCodeableConcept"] !== undefined) {
            this.patternCodeableConcept = new fhirModels.CodeableConcept(source.patternCodeableConcept);
        }
        if (source["patternCoding"] !== undefined) {
            this.patternCoding = new fhirModels.Coding(source.patternCoding);
        }
        if (source["patternContactPoint"] !== undefined) {
            this.patternContactPoint = new fhirModels.ContactPoint(source.patternContactPoint);
        }
        if (source["patternCount"] !== undefined) {
            this.patternCount = new fhirModels.Count(source.patternCount);
        }
        if (source["patternDistance"] !== undefined) {
            this.patternDistance = new fhirModels.Distance(source.patternDistance);
        }
        if (source["patternDuration"] !== undefined) {
            this.patternDuration = new fhirModels.Duration(source.patternDuration);
        }
        if (source["patternHumanName"] !== undefined) {
            this.patternHumanName = new fhirModels.HumanName(source.patternHumanName);
        }
        if (source["patternIdentifier"] !== undefined) {
            this.patternIdentifier = new fhirModels.Identifier(source.patternIdentifier);
        }
        if (source["patternMoney"] !== undefined) {
            this.patternMoney = new fhirModels.Money(source.patternMoney);
        }
        if (source["patternPeriod"] !== undefined) {
            this.patternPeriod = new fhirModels.Period(source.patternPeriod);
        }
        if (source["patternQuantity"] !== undefined) {
            this.patternQuantity = new fhirModels.Quantity(source.patternQuantity);
        }
        if (source["patternRange"] !== undefined) {
            this.patternRange = new fhirModels.Range(source.patternRange);
        }
        if (source["patternRatio"] !== undefined) {
            this.patternRatio = new fhirModels.Ratio(source.patternRatio);
        }
        if (source["patternReference"] !== undefined) {
            this.patternReference = new fhirModels.Reference(source.patternReference);
        }
        if (source["patternSampledData"] !== undefined) {
            this.patternSampledData = new fhirModels.SampledData(source.patternSampledData);
        }
        if (source["patternSignature"] !== undefined) {
            this.patternSignature = new fhirModels.Signature(source.patternSignature);
        }
        if (source["patternTiming"] !== undefined) {
            this.patternTiming = new fhirModels.Timing(source.patternTiming);
        }
        if (source["patternContactDetail"] !== undefined) {
            this.patternContactDetail = new fhirModels.ContactDetail(source.patternContactDetail);
        }
        if (source["patternContributor"] !== undefined) {
            this.patternContributor = new fhirModels.Contributor(source.patternContributor);
        }
        if (source["patternDataRequirement"] !== undefined) {
            this.patternDataRequirement = new fhirModels.DataRequirement(source.patternDataRequirement);
        }
        if (source["patternExpression"] !== undefined) {
            this.patternExpression = new fhirModels.Expression(source.patternExpression);
        }
        if (source["patternParameterDefinition"] !== undefined) {
            this.patternParameterDefinition = new fhirModels.ParameterDefinition(source.patternParameterDefinition);
        }
        if (source["patternRelatedArtifact"] !== undefined) {
            this.patternRelatedArtifact = new fhirModels.RelatedArtifact(source.patternRelatedArtifact);
        }
        if (source["patternTriggerDefinition"] !== undefined) {
            this.patternTriggerDefinition = new fhirModels.TriggerDefinition(source.patternTriggerDefinition);
        }
        if (source["patternUsageContext"] !== undefined) {
            this.patternUsageContext = new fhirModels.UsageContext(source.patternUsageContext);
        }
        if (source["patternDosage"] !== undefined) {
            this.patternDosage = new fhirModels.Dosage(source.patternDosage);
        }
        if (source["patternMeta"] !== undefined) {
            this.patternMeta = new fhirModels.Meta(source.patternMeta);
        }
        if (source["representation"] !== undefined) {
            this.representation = source.representation.map((x) => (x));
        }
        if (source["_representation"] !== undefined) {
            this._representation = source._representation.map((x) => new fhirModels.Element(x));
        }
        if (source["requirements"] !== undefined) {
            this.requirements = source.requirements;
        }
        if (source["_requirements"] !== undefined) {
            this._requirements = new fhirModels.Element(source._requirements);
        }
        if (source["short"] !== undefined) {
            this.short = source.short;
        }
        if (source["_short"] !== undefined) {
            this._short = new fhirModels.Element(source._short);
        }
        if (source["sliceIsConstraining"] !== undefined) {
            this.sliceIsConstraining = source.sliceIsConstraining;
        }
        if (source["_sliceIsConstraining"] !== undefined) {
            this._sliceIsConstraining = new fhirModels.Element(source._sliceIsConstraining);
        }
        if (source["sliceName"] !== undefined) {
            this.sliceName = source.sliceName;
        }
        if (source["_sliceName"] !== undefined) {
            this._sliceName = new fhirModels.Element(source._sliceName);
        }
        if (source["slicing"] !== undefined) {
            this.slicing = new fhirModels.ElementDefinitionSlicing(source.slicing);
        }
        if (source["type"] !== undefined) {
            this.type = source.type.map((x) => new fhirModels.ElementDefinitionType(x));
        }
    }
    /**
     * Factory function to create a ElementDefinition from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ElementDefinition(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ElementDefinition is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ElementDefinition contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["path"] === undefined) {
            missingElements.push("path");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ElementDefinition = ElementDefinition;
/**
 * Code Values for the ElementDefinition.representation field
 */
var ElementDefinitionRepresentationEnum;
(function (ElementDefinitionRepresentationEnum) {
    ElementDefinitionRepresentationEnum["XMLATTR"] = "xmlAttr";
    ElementDefinitionRepresentationEnum["XMLTEXT"] = "xmlText";
    ElementDefinitionRepresentationEnum["TYPEATTR"] = "typeAttr";
    ElementDefinitionRepresentationEnum["CDATEXT"] = "cdaText";
    ElementDefinitionRepresentationEnum["XHTML"] = "xhtml";
})(ElementDefinitionRepresentationEnum = exports.ElementDefinitionRepresentationEnum || (exports.ElementDefinitionRepresentationEnum = {}));
//# sourceMappingURL=ElementDefinition.js.map