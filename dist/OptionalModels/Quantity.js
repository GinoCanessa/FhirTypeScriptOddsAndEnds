"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuantityComparatorEnum = exports.Quantity = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
 */
class Quantity extends fhirModels.Element {
    /**
     * Default constructor for Quantity from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            this._code = new fhirModels.Element(source._code);
        }
        if (source["comparator"] !== undefined) {
            this.comparator = source.comparator;
        }
        if (source["_comparator"] !== undefined) {
            this._comparator = new fhirModels.Element(source._comparator);
        }
        if (source["system"] !== undefined) {
            this.system = source.system;
        }
        if (source["_system"] !== undefined) {
            this._system = new fhirModels.Element(source._system);
        }
        if (source["unit"] !== undefined) {
            this.unit = source.unit;
        }
        if (source["_unit"] !== undefined) {
            this._unit = new fhirModels.Element(source._unit);
        }
        if (source["value"] !== undefined) {
            this.value = source.value;
        }
        if (source["_value"] !== undefined) {
            this._value = new fhirModels.Element(source._value);
        }
    }
    /**
     * Factory function to create a Quantity from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new Quantity(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Quantity is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current Quantity contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.Quantity = Quantity;
/**
 * Code Values for the Quantity.comparator field
 */
var QuantityComparatorEnum;
(function (QuantityComparatorEnum) {
    QuantityComparatorEnum["LESS_THAN"] = "<";
    QuantityComparatorEnum["LESS_THAN_OR_EQUALS"] = "<=";
    QuantityComparatorEnum["GREATER_THAN_OR_EQUALS"] = ">=";
    QuantityComparatorEnum["GREATER_THAN"] = ">";
})(QuantityComparatorEnum = exports.QuantityComparatorEnum || (exports.QuantityComparatorEnum = {}));
//# sourceMappingURL=Quantity.js.map