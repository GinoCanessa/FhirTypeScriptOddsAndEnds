"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HumanNameUseEnum = exports.HumanName = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * A human's name with the ability to identify parts and usage.
 */
class HumanName extends fhirModels.Element {
    /**
     * Default constructor for HumanName from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["family"] !== undefined) {
            this.family = source.family;
        }
        if (source["_family"] !== undefined) {
            this._family = new fhirModels.Element(source._family);
        }
        if (source["given"] !== undefined) {
            this.given = source.given.map((x) => (x));
        }
        if (source["_given"] !== undefined) {
            this._given = source._given.map((x) => new fhirModels.Element(x));
        }
        if (source["period"] !== undefined) {
            this.period = new fhirModels.Period(source.period);
        }
        if (source["prefix"] !== undefined) {
            this.prefix = source.prefix.map((x) => (x));
        }
        if (source["_prefix"] !== undefined) {
            this._prefix = source._prefix.map((x) => new fhirModels.Element(x));
        }
        if (source["suffix"] !== undefined) {
            this.suffix = source.suffix.map((x) => (x));
        }
        if (source["_suffix"] !== undefined) {
            this._suffix = source._suffix.map((x) => new fhirModels.Element(x));
        }
        if (source["text"] !== undefined) {
            this.text = source.text;
        }
        if (source["_text"] !== undefined) {
            this._text = new fhirModels.Element(source._text);
        }
        if (source["use"] !== undefined) {
            this.use = source.use;
        }
        if (source["_use"] !== undefined) {
            this._use = new fhirModels.Element(source._use);
        }
    }
    /**
     * Factory function to create a HumanName from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new HumanName(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `HumanName is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current HumanName contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Convert a HumanName into a displayable string
     */
    toDisplay(familyFirst = true, includeAnnotations = false) {
        if ((this.text) && (this.text.length > 0)) {
            return this.text;
        }
        var val = '';
        if (familyFirst) {
            if (this.family) {
                val = this.family;
            }
            if (this.given) {
                val += (val.length > 0 ? ', ' : '') + this.given.join(' ');
            }
            if (includeAnnotations) {
                if (this.suffix) {
                    val += (val.length > 0 ? ', ' : '') + this.suffix.join(', ');
                }
                if (this.prefix) {
                    val += (val.length > 0 ? ', ' : '') + this.prefix.join(', ');
                }
            }
            return val;
        }
        if ((includeAnnotations) && (this.prefix)) {
            val += this.prefix.join(', ');
        }
        if (this.given) {
            val = (val.length > 0 ? ' ' : '') + this.given.join(' ');
        }
        if (this.family) {
            val += (val.length > 0 ? ' ' : '') + this.family;
        }
        if ((includeAnnotations) && (this.suffix)) {
            val += (val.length > 0 ? ', ' : '') + this.suffix.join(', ');
        }
        return val;
    }
}
exports.HumanName = HumanName;
/**
 * Code Values for the HumanName.use field
 */
var HumanNameUseEnum;
(function (HumanNameUseEnum) {
    HumanNameUseEnum["USUAL"] = "usual";
    HumanNameUseEnum["OFFICIAL"] = "official";
    HumanNameUseEnum["TEMP"] = "temp";
    HumanNameUseEnum["NICKNAME"] = "nickname";
    HumanNameUseEnum["ANONYMOUS"] = "anonymous";
    HumanNameUseEnum["OLD"] = "old";
    HumanNameUseEnum["MAIDEN"] = "maiden";
})(HumanNameUseEnum = exports.HumanNameUseEnum || (exports.HumanNameUseEnum = {}));
//# sourceMappingURL=HumanName.js.map