"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommunicationStatusEnum = exports.CommunicationPriorityEnum = exports.Communication = exports.CommunicationPayload = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * Text, attachment(s), or resource(s) that was communicated to the recipient.
 */
class CommunicationPayload extends fhirModels.BackboneElement {
    /**
     * Default constructor for CommunicationPayload from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["contentString"] !== undefined) {
            this.contentString = source.contentString;
        }
        if (source["_contentString"] !== undefined) {
            this._contentString = new fhirModels.Element(source._contentString);
        }
        if (source["contentAttachment"] !== undefined) {
            this.contentAttachment = new fhirModels.Attachment(source.contentAttachment);
        }
        if (source["contentReference"] !== undefined) {
            this.contentReference = new fhirModels.Reference(source.contentReference);
        }
    }
    /**
     * Factory function to create a CommunicationPayload from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new CommunicationPayload(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `CommunicationPayload is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current CommunicationPayload contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.CommunicationPayload = CommunicationPayload;
/**
 * An occurrence of information being transmitted; e.g. an alert that was sent to a responsible provider, a public health agency that was notified about a reportable condition.
 */
class Communication extends fhirModels.DomainResource {
    /**
     * Default constructor for Communication from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "Communication";
        if ((source['resourceType'] !== "Communication") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Communication';
        }
        if (source["about"] !== undefined) {
            this.about = source.about.map((x) => new fhirModels.Reference(x));
        }
        if (source["basedOn"] !== undefined) {
            this.basedOn = source.basedOn.map((x) => new fhirModels.Reference(x));
        }
        if (source["category"] !== undefined) {
            this.category = source.category.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["encounter"] !== undefined) {
            this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["inResponseTo"] !== undefined) {
            this.inResponseTo = source.inResponseTo.map((x) => new fhirModels.Reference(x));
        }
        if (source["instantiatesCanonical"] !== undefined) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => (x));
        }
        if (source["_instantiatesCanonical"] !== undefined) {
            this._instantiatesCanonical = source._instantiatesCanonical.map((x) => new fhirModels.Element(x));
        }
        if (source["instantiatesUri"] !== undefined) {
            this.instantiatesUri = source.instantiatesUri.map((x) => (x));
        }
        if (source["_instantiatesUri"] !== undefined) {
            this._instantiatesUri = source._instantiatesUri.map((x) => new fhirModels.Element(x));
        }
        if (source["medium"] !== undefined) {
            this.medium = source.medium.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["partOf"] !== undefined) {
            this.partOf = source.partOf.map((x) => new fhirModels.Reference(x));
        }
        if (source["payload"] !== undefined) {
            this.payload = source.payload.map((x) => new fhirModels.CommunicationPayload(x));
        }
        if (source["priority"] !== undefined) {
            this.priority = source.priority;
        }
        if (source["_priority"] !== undefined) {
            this._priority = new fhirModels.Element(source._priority);
        }
        if (source["reasonCode"] !== undefined) {
            this.reasonCode = source.reasonCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["reasonReference"] !== undefined) {
            this.reasonReference = source.reasonReference.map((x) => new fhirModels.Reference(x));
        }
        if (source["received"] !== undefined) {
            this.received = source.received;
        }
        if (source["_received"] !== undefined) {
            this._received = new fhirModels.Element(source._received);
        }
        if (source["recipient"] !== undefined) {
            this.recipient = source.recipient.map((x) => new fhirModels.Reference(x));
        }
        if (source["sender"] !== undefined) {
            this.sender = new fhirModels.Reference(source.sender);
        }
        if (source["sent"] !== undefined) {
            this.sent = source.sent;
        }
        if (source["_sent"] !== undefined) {
            this._sent = new fhirModels.Element(source._sent);
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["statusReason"] !== undefined) {
            this.statusReason = new fhirModels.CodeableConcept(source.statusReason);
        }
        if (source["subject"] !== undefined) {
            this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["topic"] !== undefined) {
            this.topic = new fhirModels.CodeableConcept(source.topic);
        }
    }
    /**
     * Factory function to create a Communication from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new Communication(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Communication is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current Communication contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.Communication = Communication;
/**
 * Code Values for the Communication.priority field
 */
var CommunicationPriorityEnum;
(function (CommunicationPriorityEnum) {
    CommunicationPriorityEnum["ROUTINE"] = "routine";
    CommunicationPriorityEnum["URGENT"] = "urgent";
    CommunicationPriorityEnum["ASAP"] = "asap";
    CommunicationPriorityEnum["STAT"] = "stat";
})(CommunicationPriorityEnum = exports.CommunicationPriorityEnum || (exports.CommunicationPriorityEnum = {}));
/**
 * Code Values for the Communication.status field
 */
var CommunicationStatusEnum;
(function (CommunicationStatusEnum) {
    CommunicationStatusEnum["PREPARATION"] = "preparation";
    CommunicationStatusEnum["IN_PROGRESS"] = "in-progress";
    CommunicationStatusEnum["NOT_DONE"] = "not-done";
    CommunicationStatusEnum["ON_HOLD"] = "on-hold";
    CommunicationStatusEnum["STOPPED"] = "stopped";
    CommunicationStatusEnum["COMPLETED"] = "completed";
    CommunicationStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    CommunicationStatusEnum["UNKNOWN"] = "unknown";
})(CommunicationStatusEnum = exports.CommunicationStatusEnum || (exports.CommunicationStatusEnum = {}));
//# sourceMappingURL=Communication.js.map