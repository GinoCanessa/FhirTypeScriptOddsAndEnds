"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClaimUseEnum = exports.ClaimStatusEnum = exports.Claim = exports.ClaimItem = exports.ClaimItemDetail = exports.ClaimItemDetailSubDetail = exports.ClaimAccident = exports.ClaimInsurance = exports.ClaimProcedure = exports.ClaimDiagnosis = exports.ClaimSupportingInfo = exports.ClaimCareTeam = exports.ClaimPayee = exports.ClaimRelated = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * For example,  for the original treatment and follow-up exams.
 */
class ClaimRelated extends fhirModels.BackboneElement {
    /**
     * Default constructor for ClaimRelated from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["claim"] !== undefined) {
            this.claim = new fhirModels.Reference(source.claim);
        }
        if (source["reference"] !== undefined) {
            this.reference = new fhirModels.Identifier(source.reference);
        }
        if (source["relationship"] !== undefined) {
            this.relationship = new fhirModels.CodeableConcept(source.relationship);
        }
    }
    /**
     * Factory function to create a ClaimRelated from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ClaimRelated(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimRelated is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ClaimRelated contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ClaimRelated = ClaimRelated;
/**
 * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and choose to pay the subscriber instead.
 */
class ClaimPayee extends fhirModels.BackboneElement {
    /**
     * Default constructor for ClaimPayee from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["party"] !== undefined) {
            this.party = new fhirModels.Reference(source.party);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
    /**
     * Factory function to create a ClaimPayee from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ClaimPayee(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimPayee is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ClaimPayee contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ClaimPayee = ClaimPayee;
/**
 * The members of the team who provided the products and services.
 */
class ClaimCareTeam extends fhirModels.BackboneElement {
    /**
     * Default constructor for ClaimCareTeam from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["provider"] !== undefined) {
            this.provider = new fhirModels.Reference(source.provider);
        }
        if (source["qualification"] !== undefined) {
            this.qualification = new fhirModels.CodeableConcept(source.qualification);
        }
        if (source["responsible"] !== undefined) {
            this.responsible = source.responsible;
        }
        if (source["_responsible"] !== undefined) {
            this._responsible = new fhirModels.Element(source._responsible);
        }
        if (source["role"] !== undefined) {
            this.role = new fhirModels.CodeableConcept(source.role);
        }
        if (source["sequence"] !== undefined) {
            this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            this._sequence = new fhirModels.Element(source._sequence);
        }
    }
    /**
     * Factory function to create a ClaimCareTeam from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ClaimCareTeam(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimCareTeam is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ClaimCareTeam contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["provider"] === undefined) {
            missingElements.push("provider");
        }
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ClaimCareTeam = ClaimCareTeam;
/**
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
class ClaimSupportingInfo extends fhirModels.BackboneElement {
    /**
     * Default constructor for ClaimSupportingInfo from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["category"] !== undefined) {
            this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["reason"] !== undefined) {
            this.reason = new fhirModels.CodeableConcept(source.reason);
        }
        if (source["sequence"] !== undefined) {
            this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            this._sequence = new fhirModels.Element(source._sequence);
        }
        if (source["timingDate"] !== undefined) {
            this.timingDate = source.timingDate;
        }
        if (source["_timingDate"] !== undefined) {
            this._timingDate = new fhirModels.Element(source._timingDate);
        }
        if (source["timingPeriod"] !== undefined) {
            this.timingPeriod = new fhirModels.Period(source.timingPeriod);
        }
        if (source["valueBoolean"] !== undefined) {
            this.valueBoolean = source.valueBoolean;
        }
        if (source["_valueBoolean"] !== undefined) {
            this._valueBoolean = new fhirModels.Element(source._valueBoolean);
        }
        if (source["valueString"] !== undefined) {
            this.valueString = source.valueString;
        }
        if (source["_valueString"] !== undefined) {
            this._valueString = new fhirModels.Element(source._valueString);
        }
        if (source["valueQuantity"] !== undefined) {
            this.valueQuantity = new fhirModels.Quantity(source.valueQuantity);
        }
        if (source["valueAttachment"] !== undefined) {
            this.valueAttachment = new fhirModels.Attachment(source.valueAttachment);
        }
        if (source["valueReference"] !== undefined) {
            this.valueReference = new fhirModels.Reference(source.valueReference);
        }
    }
    /**
     * Factory function to create a ClaimSupportingInfo from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ClaimSupportingInfo(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimSupportingInfo is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ClaimSupportingInfo contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["category"] === undefined) {
            missingElements.push("category");
        }
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ClaimSupportingInfo = ClaimSupportingInfo;
/**
 * Information about diagnoses relevant to the claim items.
 */
class ClaimDiagnosis extends fhirModels.BackboneElement {
    /**
     * Default constructor for ClaimDiagnosis from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["diagnosisCodeableConcept"] !== undefined) {
            this.diagnosisCodeableConcept = new fhirModels.CodeableConcept(source.diagnosisCodeableConcept);
        }
        if (source["diagnosisReference"] !== undefined) {
            this.diagnosisReference = new fhirModels.Reference(source.diagnosisReference);
        }
        if (source["onAdmission"] !== undefined) {
            this.onAdmission = new fhirModels.CodeableConcept(source.onAdmission);
        }
        if (source["packageCode"] !== undefined) {
            this.packageCode = new fhirModels.CodeableConcept(source.packageCode);
        }
        if (source["sequence"] !== undefined) {
            this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            this._sequence = new fhirModels.Element(source._sequence);
        }
        if (source["type"] !== undefined) {
            this.type = source.type.map((x) => new fhirModels.CodeableConcept(x));
        }
    }
    /**
     * Factory function to create a ClaimDiagnosis from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ClaimDiagnosis(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimDiagnosis is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ClaimDiagnosis contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ClaimDiagnosis = ClaimDiagnosis;
/**
 * Procedures performed on the patient relevant to the billing items with the claim.
 */
class ClaimProcedure extends fhirModels.BackboneElement {
    /**
     * Default constructor for ClaimProcedure from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["procedureCodeableConcept"] !== undefined) {
            this.procedureCodeableConcept = new fhirModels.CodeableConcept(source.procedureCodeableConcept);
        }
        if (source["procedureReference"] !== undefined) {
            this.procedureReference = new fhirModels.Reference(source.procedureReference);
        }
        if (source["sequence"] !== undefined) {
            this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            this._sequence = new fhirModels.Element(source._sequence);
        }
        if (source["type"] !== undefined) {
            this.type = source.type.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["udi"] !== undefined) {
            this.udi = source.udi.map((x) => new fhirModels.Reference(x));
        }
    }
    /**
     * Factory function to create a ClaimProcedure from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ClaimProcedure(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimProcedure is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ClaimProcedure contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ClaimProcedure = ClaimProcedure;
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
class ClaimInsurance extends fhirModels.BackboneElement {
    /**
     * Default constructor for ClaimInsurance from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["businessArrangement"] !== undefined) {
            this.businessArrangement = source.businessArrangement;
        }
        if (source["_businessArrangement"] !== undefined) {
            this._businessArrangement = new fhirModels.Element(source._businessArrangement);
        }
        if (source["claimResponse"] !== undefined) {
            this.claimResponse = new fhirModels.Reference(source.claimResponse);
        }
        if (source["coverage"] !== undefined) {
            this.coverage = new fhirModels.Reference(source.coverage);
        }
        if (source["focal"] !== undefined) {
            this.focal = source.focal;
        }
        if (source["_focal"] !== undefined) {
            this._focal = new fhirModels.Element(source._focal);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = new fhirModels.Identifier(source.identifier);
        }
        if (source["preAuthRef"] !== undefined) {
            this.preAuthRef = source.preAuthRef.map((x) => (x));
        }
        if (source["_preAuthRef"] !== undefined) {
            this._preAuthRef = source._preAuthRef.map((x) => new fhirModels.Element(x));
        }
        if (source["sequence"] !== undefined) {
            this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            this._sequence = new fhirModels.Element(source._sequence);
        }
    }
    /**
     * Factory function to create a ClaimInsurance from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ClaimInsurance(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimInsurance is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ClaimInsurance contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["coverage"] === undefined) {
            missingElements.push("coverage");
        }
        if (this["focal"] === undefined) {
            missingElements.push("focal");
        }
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ClaimInsurance = ClaimInsurance;
/**
 * Details of an accident which resulted in injuries which required the products and services listed in the claim.
 */
class ClaimAccident extends fhirModels.BackboneElement {
    /**
     * Default constructor for ClaimAccident from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["locationAddress"] !== undefined) {
            this.locationAddress = new fhirModels.Address(source.locationAddress);
        }
        if (source["locationReference"] !== undefined) {
            this.locationReference = new fhirModels.Reference(source.locationReference);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
    /**
     * Factory function to create a ClaimAccident from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ClaimAccident(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimAccident is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ClaimAccident contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["date"] === undefined) {
            missingElements.push("date");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ClaimAccident = ClaimAccident;
/**
 * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
class ClaimItemDetailSubDetail extends fhirModels.BackboneElement {
    /**
     * Default constructor for ClaimItemDetailSubDetail from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["category"] !== undefined) {
            this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["factor"] !== undefined) {
            this.factor = source.factor;
        }
        if (source["_factor"] !== undefined) {
            this._factor = new fhirModels.Element(source._factor);
        }
        if (source["modifier"] !== undefined) {
            this.modifier = source.modifier.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["net"] !== undefined) {
            this.net = new fhirModels.Money(source.net);
        }
        if (source["productOrService"] !== undefined) {
            this.productOrService = new fhirModels.CodeableConcept(source.productOrService);
        }
        if (source["programCode"] !== undefined) {
            this.programCode = source.programCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["quantity"] !== undefined) {
            this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["revenue"] !== undefined) {
            this.revenue = new fhirModels.CodeableConcept(source.revenue);
        }
        if (source["sequence"] !== undefined) {
            this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            this._sequence = new fhirModels.Element(source._sequence);
        }
        if (source["udi"] !== undefined) {
            this.udi = source.udi.map((x) => new fhirModels.Reference(x));
        }
        if (source["unitPrice"] !== undefined) {
            this.unitPrice = new fhirModels.Money(source.unitPrice);
        }
    }
    /**
     * Factory function to create a ClaimItemDetailSubDetail from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ClaimItemDetailSubDetail(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimItemDetailSubDetail is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ClaimItemDetailSubDetail contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["productOrService"] === undefined) {
            missingElements.push("productOrService");
        }
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ClaimItemDetailSubDetail = ClaimItemDetailSubDetail;
/**
 * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
class ClaimItemDetail extends fhirModels.BackboneElement {
    /**
     * Default constructor for ClaimItemDetail from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["category"] !== undefined) {
            this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["factor"] !== undefined) {
            this.factor = source.factor;
        }
        if (source["_factor"] !== undefined) {
            this._factor = new fhirModels.Element(source._factor);
        }
        if (source["modifier"] !== undefined) {
            this.modifier = source.modifier.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["net"] !== undefined) {
            this.net = new fhirModels.Money(source.net);
        }
        if (source["productOrService"] !== undefined) {
            this.productOrService = new fhirModels.CodeableConcept(source.productOrService);
        }
        if (source["programCode"] !== undefined) {
            this.programCode = source.programCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["quantity"] !== undefined) {
            this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["revenue"] !== undefined) {
            this.revenue = new fhirModels.CodeableConcept(source.revenue);
        }
        if (source["sequence"] !== undefined) {
            this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            this._sequence = new fhirModels.Element(source._sequence);
        }
        if (source["subDetail"] !== undefined) {
            this.subDetail = source.subDetail.map((x) => new fhirModels.ClaimItemDetailSubDetail(x));
        }
        if (source["udi"] !== undefined) {
            this.udi = source.udi.map((x) => new fhirModels.Reference(x));
        }
        if (source["unitPrice"] !== undefined) {
            this.unitPrice = new fhirModels.Money(source.unitPrice);
        }
    }
    /**
     * Factory function to create a ClaimItemDetail from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ClaimItemDetail(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimItemDetail is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ClaimItemDetail contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["productOrService"] === undefined) {
            missingElements.push("productOrService");
        }
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ClaimItemDetail = ClaimItemDetail;
/**
 * A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
 */
class ClaimItem extends fhirModels.BackboneElement {
    /**
     * Default constructor for ClaimItem from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["bodySite"] !== undefined) {
            this.bodySite = new fhirModels.CodeableConcept(source.bodySite);
        }
        if (source["careTeamSequence"] !== undefined) {
            this.careTeamSequence = source.careTeamSequence.map((x) => (x));
        }
        if (source["_careTeamSequence"] !== undefined) {
            this._careTeamSequence = source._careTeamSequence.map((x) => new fhirModels.Element(x));
        }
        if (source["category"] !== undefined) {
            this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["detail"] !== undefined) {
            this.detail = source.detail.map((x) => new fhirModels.ClaimItemDetail(x));
        }
        if (source["diagnosisSequence"] !== undefined) {
            this.diagnosisSequence = source.diagnosisSequence.map((x) => (x));
        }
        if (source["_diagnosisSequence"] !== undefined) {
            this._diagnosisSequence = source._diagnosisSequence.map((x) => new fhirModels.Element(x));
        }
        if (source["encounter"] !== undefined) {
            this.encounter = source.encounter.map((x) => new fhirModels.Reference(x));
        }
        if (source["factor"] !== undefined) {
            this.factor = source.factor;
        }
        if (source["_factor"] !== undefined) {
            this._factor = new fhirModels.Element(source._factor);
        }
        if (source["informationSequence"] !== undefined) {
            this.informationSequence = source.informationSequence.map((x) => (x));
        }
        if (source["_informationSequence"] !== undefined) {
            this._informationSequence = source._informationSequence.map((x) => new fhirModels.Element(x));
        }
        if (source["locationCodeableConcept"] !== undefined) {
            this.locationCodeableConcept = new fhirModels.CodeableConcept(source.locationCodeableConcept);
        }
        if (source["locationAddress"] !== undefined) {
            this.locationAddress = new fhirModels.Address(source.locationAddress);
        }
        if (source["locationReference"] !== undefined) {
            this.locationReference = new fhirModels.Reference(source.locationReference);
        }
        if (source["modifier"] !== undefined) {
            this.modifier = source.modifier.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["net"] !== undefined) {
            this.net = new fhirModels.Money(source.net);
        }
        if (source["procedureSequence"] !== undefined) {
            this.procedureSequence = source.procedureSequence.map((x) => (x));
        }
        if (source["_procedureSequence"] !== undefined) {
            this._procedureSequence = source._procedureSequence.map((x) => new fhirModels.Element(x));
        }
        if (source["productOrService"] !== undefined) {
            this.productOrService = new fhirModels.CodeableConcept(source.productOrService);
        }
        if (source["programCode"] !== undefined) {
            this.programCode = source.programCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["quantity"] !== undefined) {
            this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["revenue"] !== undefined) {
            this.revenue = new fhirModels.CodeableConcept(source.revenue);
        }
        if (source["sequence"] !== undefined) {
            this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            this._sequence = new fhirModels.Element(source._sequence);
        }
        if (source["servicedDate"] !== undefined) {
            this.servicedDate = source.servicedDate;
        }
        if (source["_servicedDate"] !== undefined) {
            this._servicedDate = new fhirModels.Element(source._servicedDate);
        }
        if (source["servicedPeriod"] !== undefined) {
            this.servicedPeriod = new fhirModels.Period(source.servicedPeriod);
        }
        if (source["subSite"] !== undefined) {
            this.subSite = source.subSite.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["udi"] !== undefined) {
            this.udi = source.udi.map((x) => new fhirModels.Reference(x));
        }
        if (source["unitPrice"] !== undefined) {
            this.unitPrice = new fhirModels.Money(source.unitPrice);
        }
    }
    /**
     * Factory function to create a ClaimItem from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new ClaimItem(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimItem is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current ClaimItem contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["productOrService"] === undefined) {
            missingElements.push("productOrService");
        }
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.ClaimItem = ClaimItem;
/**
 * A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
 */
class Claim extends fhirModels.DomainResource {
    /**
     * Default constructor for Claim from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "Claim";
        if ((source['resourceType'] !== "Claim") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Claim';
        }
        if (source["accident"] !== undefined) {
            this.accident = new fhirModels.ClaimAccident(source.accident);
        }
        if (source["billablePeriod"] !== undefined) {
            this.billablePeriod = new fhirModels.Period(source.billablePeriod);
        }
        if (source["careTeam"] !== undefined) {
            this.careTeam = source.careTeam.map((x) => new fhirModels.ClaimCareTeam(x));
        }
        if (source["created"] !== undefined) {
            this.created = source.created;
        }
        if (source["_created"] !== undefined) {
            this._created = new fhirModels.Element(source._created);
        }
        if (source["diagnosis"] !== undefined) {
            this.diagnosis = source.diagnosis.map((x) => new fhirModels.ClaimDiagnosis(x));
        }
        if (source["enterer"] !== undefined) {
            this.enterer = new fhirModels.Reference(source.enterer);
        }
        if (source["facility"] !== undefined) {
            this.facility = new fhirModels.Reference(source.facility);
        }
        if (source["fundsReserve"] !== undefined) {
            this.fundsReserve = new fhirModels.CodeableConcept(source.fundsReserve);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["insurance"] !== undefined) {
            this.insurance = source.insurance.map((x) => new fhirModels.ClaimInsurance(x));
        }
        if (source["insurer"] !== undefined) {
            this.insurer = new fhirModels.Reference(source.insurer);
        }
        if (source["item"] !== undefined) {
            this.item = source.item.map((x) => new fhirModels.ClaimItem(x));
        }
        if (source["originalPrescription"] !== undefined) {
            this.originalPrescription = new fhirModels.Reference(source.originalPrescription);
        }
        if (source["patient"] !== undefined) {
            this.patient = new fhirModels.Reference(source.patient);
        }
        if (source["payee"] !== undefined) {
            this.payee = new fhirModels.ClaimPayee(source.payee);
        }
        if (source["prescription"] !== undefined) {
            this.prescription = new fhirModels.Reference(source.prescription);
        }
        if (source["priority"] !== undefined) {
            this.priority = new fhirModels.CodeableConcept(source.priority);
        }
        if (source["procedure"] !== undefined) {
            this.procedure = source.procedure.map((x) => new fhirModels.ClaimProcedure(x));
        }
        if (source["provider"] !== undefined) {
            this.provider = new fhirModels.Reference(source.provider);
        }
        if (source["referral"] !== undefined) {
            this.referral = new fhirModels.Reference(source.referral);
        }
        if (source["related"] !== undefined) {
            this.related = source.related.map((x) => new fhirModels.ClaimRelated(x));
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["subType"] !== undefined) {
            this.subType = new fhirModels.CodeableConcept(source.subType);
        }
        if (source["supportingInfo"] !== undefined) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhirModels.ClaimSupportingInfo(x));
        }
        if (source["total"] !== undefined) {
            this.total = new fhirModels.Money(source.total);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["use"] !== undefined) {
            this.use = source.use;
        }
        if (source["_use"] !== undefined) {
            this._use = new fhirModels.Element(source._use);
        }
    }
    /**
     * Factory function to create a Claim from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new Claim(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Claim is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current Claim contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["created"] === undefined) {
            missingElements.push("created");
        }
        if ((this["insurance"] === undefined) || (this["insurance"].length === 0)) {
            missingElements.push("insurance");
        }
        if (this["patient"] === undefined) {
            missingElements.push("patient");
        }
        if (this["priority"] === undefined) {
            missingElements.push("priority");
        }
        if (this["provider"] === undefined) {
            missingElements.push("provider");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        if (this["use"] === undefined) {
            missingElements.push("use");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.Claim = Claim;
/**
 * Code Values for the Claim.status field
 */
var ClaimStatusEnum;
(function (ClaimStatusEnum) {
    ClaimStatusEnum["ACTIVE"] = "active";
    ClaimStatusEnum["CANCELLED"] = "cancelled";
    ClaimStatusEnum["DRAFT"] = "draft";
    ClaimStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(ClaimStatusEnum = exports.ClaimStatusEnum || (exports.ClaimStatusEnum = {}));
/**
 * Code Values for the Claim.use field
 */
var ClaimUseEnum;
(function (ClaimUseEnum) {
    ClaimUseEnum["CLAIM"] = "claim";
    ClaimUseEnum["PREAUTHORIZATION"] = "preauthorization";
    ClaimUseEnum["PREDETERMINATION"] = "predetermination";
})(ClaimUseEnum = exports.ClaimUseEnum || (exports.ClaimUseEnum = {}));
//# sourceMappingURL=Claim.js.map