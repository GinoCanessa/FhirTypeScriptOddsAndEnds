"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeviceUseStatementStatusEnum = exports.DeviceUseStatement = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * A record of a device being used by a patient where the record is the result of a report from the patient or another clinician.
 */
class DeviceUseStatement extends fhirModels.DomainResource {
    /**
     * Default constructor for DeviceUseStatement from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "DeviceUseStatement";
        if ((source['resourceType'] !== "DeviceUseStatement") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a DeviceUseStatement';
        }
        if (source["basedOn"] !== undefined) {
            this.basedOn = source.basedOn.map((x) => new fhirModels.Reference(x));
        }
        if (source["bodySite"] !== undefined) {
            this.bodySite = new fhirModels.CodeableConcept(source.bodySite);
        }
        if (source["derivedFrom"] !== undefined) {
            this.derivedFrom = source.derivedFrom.map((x) => new fhirModels.Reference(x));
        }
        if (source["device"] !== undefined) {
            this.device = new fhirModels.Reference(source.device);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["reasonCode"] !== undefined) {
            this.reasonCode = source.reasonCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["reasonReference"] !== undefined) {
            this.reasonReference = source.reasonReference.map((x) => new fhirModels.Reference(x));
        }
        if (source["recordedOn"] !== undefined) {
            this.recordedOn = source.recordedOn;
        }
        if (source["_recordedOn"] !== undefined) {
            this._recordedOn = new fhirModels.Element(source._recordedOn);
        }
        if (source["source"] !== undefined) {
            this.source = new fhirModels.Reference(source.source);
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["subject"] !== undefined) {
            this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["timingTiming"] !== undefined) {
            this.timingTiming = new fhirModels.Timing(source.timingTiming);
        }
        if (source["timingPeriod"] !== undefined) {
            this.timingPeriod = new fhirModels.Period(source.timingPeriod);
        }
        if (source["timingDateTime"] !== undefined) {
            this.timingDateTime = source.timingDateTime;
        }
        if (source["_timingDateTime"] !== undefined) {
            this._timingDateTime = new fhirModels.Element(source._timingDateTime);
        }
    }
    /**
     * Factory function to create a DeviceUseStatement from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new DeviceUseStatement(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `DeviceUseStatement is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current DeviceUseStatement contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["device"] === undefined) {
            missingElements.push("device");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["subject"] === undefined) {
            missingElements.push("subject");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.DeviceUseStatement = DeviceUseStatement;
/**
 * Code Values for the DeviceUseStatement.status field
 */
var DeviceUseStatementStatusEnum;
(function (DeviceUseStatementStatusEnum) {
    DeviceUseStatementStatusEnum["ACTIVE"] = "active";
    DeviceUseStatementStatusEnum["COMPLETED"] = "completed";
    DeviceUseStatementStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    DeviceUseStatementStatusEnum["INTENDED"] = "intended";
    DeviceUseStatementStatusEnum["STOPPED"] = "stopped";
    DeviceUseStatementStatusEnum["ON_HOLD"] = "on-hold";
})(DeviceUseStatementStatusEnum = exports.DeviceUseStatementStatusEnum || (exports.DeviceUseStatementStatusEnum = {}));
//# sourceMappingURL=DeviceUseStatement.js.map