"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NamingSystemStatusEnum = exports.NamingSystemKindEnum = exports.NamingSystem = exports.NamingSystemUniqueIdTypeEnum = exports.NamingSystemUniqueId = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * Multiple identifiers may exist, either due to duplicate registration, regional rules, needs of different communication technologies, etc.
 */
class NamingSystemUniqueId extends fhirModels.BackboneElement {
    /**
     * Default constructor for NamingSystemUniqueId from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["comment"] !== undefined) {
            this.comment = source.comment;
        }
        if (source["_comment"] !== undefined) {
            this._comment = new fhirModels.Element(source._comment);
        }
        if (source["period"] !== undefined) {
            this.period = new fhirModels.Period(source.period);
        }
        if (source["preferred"] !== undefined) {
            this.preferred = source.preferred;
        }
        if (source["_preferred"] !== undefined) {
            this._preferred = new fhirModels.Element(source._preferred);
        }
        if (source["type"] !== undefined) {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
        if (source["value"] !== undefined) {
            this.value = source.value;
        }
        if (source["_value"] !== undefined) {
            this._value = new fhirModels.Element(source._value);
        }
    }
    /**
     * Factory function to create a NamingSystemUniqueId from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new NamingSystemUniqueId(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `NamingSystemUniqueId is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current NamingSystemUniqueId contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        if (this["value"] === undefined) {
            missingElements.push("value");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.NamingSystemUniqueId = NamingSystemUniqueId;
/**
 * Code Values for the NamingSystem.uniqueId.type field
 */
var NamingSystemUniqueIdTypeEnum;
(function (NamingSystemUniqueIdTypeEnum) {
    NamingSystemUniqueIdTypeEnum["OID"] = "oid";
    NamingSystemUniqueIdTypeEnum["UUID"] = "uuid";
    NamingSystemUniqueIdTypeEnum["URI"] = "uri";
    NamingSystemUniqueIdTypeEnum["OTHER"] = "other";
})(NamingSystemUniqueIdTypeEnum = exports.NamingSystemUniqueIdTypeEnum || (exports.NamingSystemUniqueIdTypeEnum = {}));
/**
 * A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types.
 */
class NamingSystem extends fhirModels.DomainResource {
    /**
     * Default constructor for NamingSystem from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "NamingSystem";
        if ((source['resourceType'] !== "NamingSystem") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a NamingSystem';
        }
        if (source["contact"] !== undefined) {
            this.contact = source.contact.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["jurisdiction"] !== undefined) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["kind"] !== undefined) {
            this.kind = source.kind;
        }
        if (source["_kind"] !== undefined) {
            this._kind = new fhirModels.Element(source._kind);
        }
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["publisher"] !== undefined) {
            this.publisher = source.publisher;
        }
        if (source["_publisher"] !== undefined) {
            this._publisher = new fhirModels.Element(source._publisher);
        }
        if (source["responsible"] !== undefined) {
            this.responsible = source.responsible;
        }
        if (source["_responsible"] !== undefined) {
            this._responsible = new fhirModels.Element(source._responsible);
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["uniqueId"] !== undefined) {
            this.uniqueId = source.uniqueId.map((x) => new fhirModels.NamingSystemUniqueId(x));
        }
        if (source["usage"] !== undefined) {
            this.usage = source.usage;
        }
        if (source["_usage"] !== undefined) {
            this._usage = new fhirModels.Element(source._usage);
        }
        if (source["useContext"] !== undefined) {
            this.useContext = source.useContext.map((x) => new fhirModels.UsageContext(x));
        }
    }
    /**
     * Factory function to create a NamingSystem from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new NamingSystem(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `NamingSystem is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current NamingSystem contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["date"] === undefined) {
            missingElements.push("date");
        }
        if (this["kind"] === undefined) {
            missingElements.push("kind");
        }
        if (this["name"] === undefined) {
            missingElements.push("name");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if ((this["uniqueId"] === undefined) || (this["uniqueId"].length === 0)) {
            missingElements.push("uniqueId");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.NamingSystem = NamingSystem;
/**
 * Code Values for the NamingSystem.kind field
 */
var NamingSystemKindEnum;
(function (NamingSystemKindEnum) {
    NamingSystemKindEnum["CODESYSTEM"] = "codesystem";
    NamingSystemKindEnum["IDENTIFIER"] = "identifier";
    NamingSystemKindEnum["ROOT"] = "root";
})(NamingSystemKindEnum = exports.NamingSystemKindEnum || (exports.NamingSystemKindEnum = {}));
/**
 * Code Values for the NamingSystem.status field
 */
var NamingSystemStatusEnum;
(function (NamingSystemStatusEnum) {
    NamingSystemStatusEnum["DRAFT"] = "draft";
    NamingSystemStatusEnum["ACTIVE"] = "active";
    NamingSystemStatusEnum["RETIRED"] = "retired";
    NamingSystemStatusEnum["UNKNOWN"] = "unknown";
})(NamingSystemStatusEnum = exports.NamingSystemStatusEnum || (exports.NamingSystemStatusEnum = {}));
//# sourceMappingURL=NamingSystem.js.map