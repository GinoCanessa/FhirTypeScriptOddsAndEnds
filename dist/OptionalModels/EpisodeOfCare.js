"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EpisodeOfCareStatusEnum = exports.EpisodeOfCare = exports.EpisodeOfCareDiagnosis = exports.EpisodeOfCareStatusHistoryStatusEnum = exports.EpisodeOfCareStatusHistory = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
 */
class EpisodeOfCareStatusHistory extends fhirModels.BackboneElement {
    /**
     * Default constructor for EpisodeOfCareStatusHistory from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["period"] !== undefined) {
            this.period = new fhirModels.Period(source.period);
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
    }
    /**
     * Factory function to create a EpisodeOfCareStatusHistory from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new EpisodeOfCareStatusHistory(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `EpisodeOfCareStatusHistory is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current EpisodeOfCareStatusHistory contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["period"] === undefined) {
            missingElements.push("period");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.EpisodeOfCareStatusHistory = EpisodeOfCareStatusHistory;
/**
 * Code Values for the EpisodeOfCare.statusHistory.status field
 */
var EpisodeOfCareStatusHistoryStatusEnum;
(function (EpisodeOfCareStatusHistoryStatusEnum) {
    EpisodeOfCareStatusHistoryStatusEnum["PLANNED"] = "planned";
    EpisodeOfCareStatusHistoryStatusEnum["WAITLIST"] = "waitlist";
    EpisodeOfCareStatusHistoryStatusEnum["ACTIVE"] = "active";
    EpisodeOfCareStatusHistoryStatusEnum["ONHOLD"] = "onhold";
    EpisodeOfCareStatusHistoryStatusEnum["FINISHED"] = "finished";
    EpisodeOfCareStatusHistoryStatusEnum["CANCELLED"] = "cancelled";
    EpisodeOfCareStatusHistoryStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(EpisodeOfCareStatusHistoryStatusEnum = exports.EpisodeOfCareStatusHistoryStatusEnum || (exports.EpisodeOfCareStatusHistoryStatusEnum = {}));
/**
 * The list of diagnosis relevant to this episode of care.
 */
class EpisodeOfCareDiagnosis extends fhirModels.BackboneElement {
    /**
     * Default constructor for EpisodeOfCareDiagnosis from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["condition"] !== undefined) {
            this.condition = new fhirModels.Reference(source.condition);
        }
        if (source["rank"] !== undefined) {
            this.rank = source.rank;
        }
        if (source["_rank"] !== undefined) {
            this._rank = new fhirModels.Element(source._rank);
        }
        if (source["role"] !== undefined) {
            this.role = new fhirModels.CodeableConcept(source.role);
        }
    }
    /**
     * Factory function to create a EpisodeOfCareDiagnosis from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new EpisodeOfCareDiagnosis(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `EpisodeOfCareDiagnosis is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current EpisodeOfCareDiagnosis contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["condition"] === undefined) {
            missingElements.push("condition");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.EpisodeOfCareDiagnosis = EpisodeOfCareDiagnosis;
/**
 * An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
 */
class EpisodeOfCare extends fhirModels.DomainResource {
    /**
     * Default constructor for EpisodeOfCare from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "EpisodeOfCare";
        if ((source['resourceType'] !== "EpisodeOfCare") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a EpisodeOfCare';
        }
        if (source["account"] !== undefined) {
            this.account = source.account.map((x) => new fhirModels.Reference(x));
        }
        if (source["careManager"] !== undefined) {
            this.careManager = new fhirModels.Reference(source.careManager);
        }
        if (source["diagnosis"] !== undefined) {
            this.diagnosis = source.diagnosis.map((x) => new fhirModels.EpisodeOfCareDiagnosis(x));
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["managingOrganization"] !== undefined) {
            this.managingOrganization = new fhirModels.Reference(source.managingOrganization);
        }
        if (source["patient"] !== undefined) {
            this.patient = new fhirModels.Reference(source.patient);
        }
        if (source["period"] !== undefined) {
            this.period = new fhirModels.Period(source.period);
        }
        if (source["referralRequest"] !== undefined) {
            this.referralRequest = source.referralRequest.map((x) => new fhirModels.Reference(x));
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["statusHistory"] !== undefined) {
            this.statusHistory = source.statusHistory.map((x) => new fhirModels.EpisodeOfCareStatusHistory(x));
        }
        if (source["team"] !== undefined) {
            this.team = source.team.map((x) => new fhirModels.Reference(x));
        }
        if (source["type"] !== undefined) {
            this.type = source.type.map((x) => new fhirModels.CodeableConcept(x));
        }
    }
    /**
     * Factory function to create a EpisodeOfCare from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new EpisodeOfCare(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `EpisodeOfCare is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current EpisodeOfCare contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["patient"] === undefined) {
            missingElements.push("patient");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.EpisodeOfCare = EpisodeOfCare;
/**
 * Code Values for the EpisodeOfCare.status field
 */
var EpisodeOfCareStatusEnum;
(function (EpisodeOfCareStatusEnum) {
    EpisodeOfCareStatusEnum["PLANNED"] = "planned";
    EpisodeOfCareStatusEnum["WAITLIST"] = "waitlist";
    EpisodeOfCareStatusEnum["ACTIVE"] = "active";
    EpisodeOfCareStatusEnum["ONHOLD"] = "onhold";
    EpisodeOfCareStatusEnum["FINISHED"] = "finished";
    EpisodeOfCareStatusEnum["CANCELLED"] = "cancelled";
    EpisodeOfCareStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(EpisodeOfCareStatusEnum = exports.EpisodeOfCareStatusEnum || (exports.EpisodeOfCareStatusEnum = {}));
//# sourceMappingURL=EpisodeOfCare.js.map