"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MedicationRequestStatusEnum = exports.MedicationRequestPriorityEnum = exports.MedicationRequestIntentEnum = exports.MedicationRequest = exports.MedicationRequestSubstitution = exports.MedicationRequestDispenseRequest = exports.MedicationRequestDispenseRequestInitialFill = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * If populating this element, either the quantity or the duration must be included.
 */
class MedicationRequestDispenseRequestInitialFill extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicationRequestDispenseRequestInitialFill from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["duration"] !== undefined) {
            this.duration = new fhirModels.Duration(source.duration);
        }
        if (source["quantity"] !== undefined) {
            this.quantity = new fhirModels.Quantity(source.quantity);
        }
    }
    /**
     * Factory function to create a MedicationRequestDispenseRequestInitialFill from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MedicationRequestDispenseRequestInitialFill(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationRequestDispenseRequestInitialFill is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MedicationRequestDispenseRequestInitialFill contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MedicationRequestDispenseRequestInitialFill = MedicationRequestDispenseRequestInitialFill;
/**
 * Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
 */
class MedicationRequestDispenseRequest extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicationRequestDispenseRequest from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["dispenseInterval"] !== undefined) {
            this.dispenseInterval = new fhirModels.Duration(source.dispenseInterval);
        }
        if (source["expectedSupplyDuration"] !== undefined) {
            this.expectedSupplyDuration = new fhirModels.Duration(source.expectedSupplyDuration);
        }
        if (source["initialFill"] !== undefined) {
            this.initialFill = new fhirModels.MedicationRequestDispenseRequestInitialFill(source.initialFill);
        }
        if (source["numberOfRepeatsAllowed"] !== undefined) {
            this.numberOfRepeatsAllowed = source.numberOfRepeatsAllowed;
        }
        if (source["_numberOfRepeatsAllowed"] !== undefined) {
            this._numberOfRepeatsAllowed = new fhirModels.Element(source._numberOfRepeatsAllowed);
        }
        if (source["performer"] !== undefined) {
            this.performer = new fhirModels.Reference(source.performer);
        }
        if (source["quantity"] !== undefined) {
            this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["validityPeriod"] !== undefined) {
            this.validityPeriod = new fhirModels.Period(source.validityPeriod);
        }
    }
    /**
     * Factory function to create a MedicationRequestDispenseRequest from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MedicationRequestDispenseRequest(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationRequestDispenseRequest is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MedicationRequestDispenseRequest contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MedicationRequestDispenseRequest = MedicationRequestDispenseRequest;
/**
 * Indicates whether or not substitution can or should be part of the dispense. In some cases, substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
 */
class MedicationRequestSubstitution extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicationRequestSubstitution from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["allowedBoolean"] !== undefined) {
            this.allowedBoolean = source.allowedBoolean;
        }
        if (source["_allowedBoolean"] !== undefined) {
            this._allowedBoolean = new fhirModels.Element(source._allowedBoolean);
        }
        if (source["allowedCodeableConcept"] !== undefined) {
            this.allowedCodeableConcept = new fhirModels.CodeableConcept(source.allowedCodeableConcept);
        }
        if (source["reason"] !== undefined) {
            this.reason = new fhirModels.CodeableConcept(source.reason);
        }
    }
    /**
     * Factory function to create a MedicationRequestSubstitution from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MedicationRequestSubstitution(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationRequestSubstitution is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MedicationRequestSubstitution contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MedicationRequestSubstitution = MedicationRequestSubstitution;
/**
 * An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
 */
class MedicationRequest extends fhirModels.DomainResource {
    /**
     * Default constructor for MedicationRequest from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "MedicationRequest";
        if ((source['resourceType'] !== "MedicationRequest") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a MedicationRequest';
        }
        if (source["authoredOn"] !== undefined) {
            this.authoredOn = source.authoredOn;
        }
        if (source["_authoredOn"] !== undefined) {
            this._authoredOn = new fhirModels.Element(source._authoredOn);
        }
        if (source["basedOn"] !== undefined) {
            this.basedOn = source.basedOn.map((x) => new fhirModels.Reference(x));
        }
        if (source["category"] !== undefined) {
            this.category = source.category.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["courseOfTherapyType"] !== undefined) {
            this.courseOfTherapyType = new fhirModels.CodeableConcept(source.courseOfTherapyType);
        }
        if (source["detectedIssue"] !== undefined) {
            this.detectedIssue = source.detectedIssue.map((x) => new fhirModels.Reference(x));
        }
        if (source["dispenseRequest"] !== undefined) {
            this.dispenseRequest = new fhirModels.MedicationRequestDispenseRequest(source.dispenseRequest);
        }
        if (source["doNotPerform"] !== undefined) {
            this.doNotPerform = source.doNotPerform;
        }
        if (source["_doNotPerform"] !== undefined) {
            this._doNotPerform = new fhirModels.Element(source._doNotPerform);
        }
        if (source["dosageInstruction"] !== undefined) {
            this.dosageInstruction = source.dosageInstruction.map((x) => new fhirModels.Dosage(x));
        }
        if (source["encounter"] !== undefined) {
            this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["eventHistory"] !== undefined) {
            this.eventHistory = source.eventHistory.map((x) => new fhirModels.Reference(x));
        }
        if (source["groupIdentifier"] !== undefined) {
            this.groupIdentifier = new fhirModels.Identifier(source.groupIdentifier);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["instantiatesCanonical"] !== undefined) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => (x));
        }
        if (source["_instantiatesCanonical"] !== undefined) {
            this._instantiatesCanonical = source._instantiatesCanonical.map((x) => new fhirModels.Element(x));
        }
        if (source["instantiatesUri"] !== undefined) {
            this.instantiatesUri = source.instantiatesUri.map((x) => (x));
        }
        if (source["_instantiatesUri"] !== undefined) {
            this._instantiatesUri = source._instantiatesUri.map((x) => new fhirModels.Element(x));
        }
        if (source["insurance"] !== undefined) {
            this.insurance = source.insurance.map((x) => new fhirModels.Reference(x));
        }
        if (source["intent"] !== undefined) {
            this.intent = source.intent;
        }
        if (source["_intent"] !== undefined) {
            this._intent = new fhirModels.Element(source._intent);
        }
        if (source["medicationCodeableConcept"] !== undefined) {
            this.medicationCodeableConcept = new fhirModels.CodeableConcept(source.medicationCodeableConcept);
        }
        if (source["medicationReference"] !== undefined) {
            this.medicationReference = new fhirModels.Reference(source.medicationReference);
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["performer"] !== undefined) {
            this.performer = new fhirModels.Reference(source.performer);
        }
        if (source["performerType"] !== undefined) {
            this.performerType = new fhirModels.CodeableConcept(source.performerType);
        }
        if (source["priority"] !== undefined) {
            this.priority = source.priority;
        }
        if (source["_priority"] !== undefined) {
            this._priority = new fhirModels.Element(source._priority);
        }
        if (source["priorPrescription"] !== undefined) {
            this.priorPrescription = new fhirModels.Reference(source.priorPrescription);
        }
        if (source["reasonCode"] !== undefined) {
            this.reasonCode = source.reasonCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["reasonReference"] !== undefined) {
            this.reasonReference = source.reasonReference.map((x) => new fhirModels.Reference(x));
        }
        if (source["recorder"] !== undefined) {
            this.recorder = new fhirModels.Reference(source.recorder);
        }
        if (source["reportedBoolean"] !== undefined) {
            this.reportedBoolean = source.reportedBoolean;
        }
        if (source["_reportedBoolean"] !== undefined) {
            this._reportedBoolean = new fhirModels.Element(source._reportedBoolean);
        }
        if (source["reportedReference"] !== undefined) {
            this.reportedReference = new fhirModels.Reference(source.reportedReference);
        }
        if (source["requester"] !== undefined) {
            this.requester = new fhirModels.Reference(source.requester);
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["statusReason"] !== undefined) {
            this.statusReason = new fhirModels.CodeableConcept(source.statusReason);
        }
        if (source["subject"] !== undefined) {
            this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["substitution"] !== undefined) {
            this.substitution = new fhirModels.MedicationRequestSubstitution(source.substitution);
        }
        if (source["supportingInformation"] !== undefined) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhirModels.Reference(x));
        }
    }
    /**
     * Factory function to create a MedicationRequest from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MedicationRequest(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationRequest is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MedicationRequest contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["intent"] === undefined) {
            missingElements.push("intent");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["subject"] === undefined) {
            missingElements.push("subject");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MedicationRequest = MedicationRequest;
/**
 * Code Values for the MedicationRequest.intent field
 */
var MedicationRequestIntentEnum;
(function (MedicationRequestIntentEnum) {
    MedicationRequestIntentEnum["PROPOSAL"] = "proposal";
    MedicationRequestIntentEnum["PLAN"] = "plan";
    MedicationRequestIntentEnum["ORDER"] = "order";
    MedicationRequestIntentEnum["ORIGINAL_ORDER"] = "original-order";
    MedicationRequestIntentEnum["REFLEX_ORDER"] = "reflex-order";
    MedicationRequestIntentEnum["FILLER_ORDER"] = "filler-order";
    MedicationRequestIntentEnum["INSTANCE_ORDER"] = "instance-order";
    MedicationRequestIntentEnum["OPTION"] = "option";
})(MedicationRequestIntentEnum = exports.MedicationRequestIntentEnum || (exports.MedicationRequestIntentEnum = {}));
/**
 * Code Values for the MedicationRequest.priority field
 */
var MedicationRequestPriorityEnum;
(function (MedicationRequestPriorityEnum) {
    MedicationRequestPriorityEnum["ROUTINE"] = "routine";
    MedicationRequestPriorityEnum["URGENT"] = "urgent";
    MedicationRequestPriorityEnum["ASAP"] = "asap";
    MedicationRequestPriorityEnum["STAT"] = "stat";
})(MedicationRequestPriorityEnum = exports.MedicationRequestPriorityEnum || (exports.MedicationRequestPriorityEnum = {}));
/**
 * Code Values for the MedicationRequest.status field
 */
var MedicationRequestStatusEnum;
(function (MedicationRequestStatusEnum) {
    MedicationRequestStatusEnum["ACTIVE"] = "active";
    MedicationRequestStatusEnum["ON_HOLD"] = "on-hold";
    MedicationRequestStatusEnum["CANCELLED"] = "cancelled";
    MedicationRequestStatusEnum["COMPLETED"] = "completed";
    MedicationRequestStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    MedicationRequestStatusEnum["STOPPED"] = "stopped";
    MedicationRequestStatusEnum["DRAFT"] = "draft";
    MedicationRequestStatusEnum["UNKNOWN"] = "unknown";
})(MedicationRequestStatusEnum = exports.MedicationRequestStatusEnum || (exports.MedicationRequestStatusEnum = {}));
//# sourceMappingURL=MedicationRequest.js.map