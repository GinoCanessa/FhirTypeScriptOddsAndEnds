"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubstanceProtein = exports.SubstanceProteinSubunit = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * This subclause refers to the description of each subunit constituting the SubstanceProtein. A subunit is a linear sequence of amino acids linked through peptide bonds. The Subunit information shall be provided when the finished SubstanceProtein is a complex of multiple sequences; subunits are not used to delineate domains within a single sequence. Subunits are listed in order of decreasing length; sequences of the same length will be ordered by decreasing molecular weight; subunits that have identical sequences will be repeated multiple times.
 */
class SubstanceProteinSubunit extends fhirModels.BackboneElement {
    /**
     * Default constructor for SubstanceProteinSubunit from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["cTerminalModification"] !== undefined) {
            this.cTerminalModification = source.cTerminalModification;
        }
        if (source["_cTerminalModification"] !== undefined) {
            this._cTerminalModification = new fhirModels.Element(source._cTerminalModification);
        }
        if (source["cTerminalModificationId"] !== undefined) {
            this.cTerminalModificationId = new fhirModels.Identifier(source.cTerminalModificationId);
        }
        if (source["length"] !== undefined) {
            this.length = source.length;
        }
        if (source["_length"] !== undefined) {
            this._length = new fhirModels.Element(source._length);
        }
        if (source["nTerminalModification"] !== undefined) {
            this.nTerminalModification = source.nTerminalModification;
        }
        if (source["_nTerminalModification"] !== undefined) {
            this._nTerminalModification = new fhirModels.Element(source._nTerminalModification);
        }
        if (source["nTerminalModificationId"] !== undefined) {
            this.nTerminalModificationId = new fhirModels.Identifier(source.nTerminalModificationId);
        }
        if (source["sequence"] !== undefined) {
            this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            this._sequence = new fhirModels.Element(source._sequence);
        }
        if (source["sequenceAttachment"] !== undefined) {
            this.sequenceAttachment = new fhirModels.Attachment(source.sequenceAttachment);
        }
        if (source["subunit"] !== undefined) {
            this.subunit = source.subunit;
        }
        if (source["_subunit"] !== undefined) {
            this._subunit = new fhirModels.Element(source._subunit);
        }
    }
    /**
     * Factory function to create a SubstanceProteinSubunit from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new SubstanceProteinSubunit(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstanceProteinSubunit is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current SubstanceProteinSubunit contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.SubstanceProteinSubunit = SubstanceProteinSubunit;
/**
 * A SubstanceProtein is defined as a single unit of a linear amino acid sequence, or a combination of subunits that are either covalently linked or have a defined invariant stoichiometric relationship. This includes all synthetic, recombinant and purified SubstanceProteins of defined sequence, whether the use is therapeutic or prophylactic. This set of elements will be used to describe albumins, coagulation factors, cytokines, growth factors, peptide/SubstanceProtein hormones, enzymes, toxins, toxoids, recombinant vaccines, and immunomodulators.
 */
class SubstanceProtein extends fhirModels.DomainResource {
    /**
     * Default constructor for SubstanceProtein from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "SubstanceProtein";
        if ((source['resourceType'] !== "SubstanceProtein") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a SubstanceProtein';
        }
        if (source["disulfideLinkage"] !== undefined) {
            this.disulfideLinkage = source.disulfideLinkage.map((x) => (x));
        }
        if (source["_disulfideLinkage"] !== undefined) {
            this._disulfideLinkage = source._disulfideLinkage.map((x) => new fhirModels.Element(x));
        }
        if (source["numberOfSubunits"] !== undefined) {
            this.numberOfSubunits = source.numberOfSubunits;
        }
        if (source["_numberOfSubunits"] !== undefined) {
            this._numberOfSubunits = new fhirModels.Element(source._numberOfSubunits);
        }
        if (source["sequenceType"] !== undefined) {
            this.sequenceType = new fhirModels.CodeableConcept(source.sequenceType);
        }
        if (source["subunit"] !== undefined) {
            this.subunit = source.subunit.map((x) => new fhirModels.SubstanceProteinSubunit(x));
        }
    }
    /**
     * Factory function to create a SubstanceProtein from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new SubstanceProtein(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstanceProtein is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current SubstanceProtein contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.SubstanceProtein = SubstanceProtein;
//# sourceMappingURL=SubstanceProtein.js.map