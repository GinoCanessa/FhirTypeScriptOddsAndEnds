"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageHeader = exports.MessageHeaderResponseCodeEnum = exports.MessageHeaderResponse = exports.MessageHeaderSource = exports.MessageHeaderDestination = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * There SHOULD be at least one destination, but in some circumstances, the source system is unaware of any particular destination system.
 */
class MessageHeaderDestination extends fhirModels.BackboneElement {
    /**
     * Default constructor for MessageHeaderDestination from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["endpoint"] !== undefined) {
            this.endpoint = source.endpoint;
        }
        if (source["_endpoint"] !== undefined) {
            this._endpoint = new fhirModels.Element(source._endpoint);
        }
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["receiver"] !== undefined) {
            this.receiver = new fhirModels.Reference(source.receiver);
        }
        if (source["target"] !== undefined) {
            this.target = new fhirModels.Reference(source.target);
        }
    }
    /**
     * Factory function to create a MessageHeaderDestination from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MessageHeaderDestination(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MessageHeaderDestination is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MessageHeaderDestination contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["endpoint"] === undefined) {
            missingElements.push("endpoint");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MessageHeaderDestination = MessageHeaderDestination;
/**
 * The source application from which this message originated.
 */
class MessageHeaderSource extends fhirModels.BackboneElement {
    /**
     * Default constructor for MessageHeaderSource from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["contact"] !== undefined) {
            this.contact = new fhirModels.ContactPoint(source.contact);
        }
        if (source["endpoint"] !== undefined) {
            this.endpoint = source.endpoint;
        }
        if (source["_endpoint"] !== undefined) {
            this._endpoint = new fhirModels.Element(source._endpoint);
        }
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["software"] !== undefined) {
            this.software = source.software;
        }
        if (source["_software"] !== undefined) {
            this._software = new fhirModels.Element(source._software);
        }
        if (source["version"] !== undefined) {
            this.version = source.version;
        }
        if (source["_version"] !== undefined) {
            this._version = new fhirModels.Element(source._version);
        }
    }
    /**
     * Factory function to create a MessageHeaderSource from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MessageHeaderSource(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MessageHeaderSource is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MessageHeaderSource contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["endpoint"] === undefined) {
            missingElements.push("endpoint");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MessageHeaderSource = MessageHeaderSource;
/**
 * Information about the message that this message is a response to.  Only present if this message is a response.
 */
class MessageHeaderResponse extends fhirModels.BackboneElement {
    /**
     * Default constructor for MessageHeaderResponse from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            this._code = new fhirModels.Element(source._code);
        }
        if (source["details"] !== undefined) {
            this.details = new fhirModels.Reference(source.details);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier;
        }
        if (source["_identifier"] !== undefined) {
            this._identifier = new fhirModels.Element(source._identifier);
        }
    }
    /**
     * Factory function to create a MessageHeaderResponse from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MessageHeaderResponse(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MessageHeaderResponse is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MessageHeaderResponse contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        if (this["identifier"] === undefined) {
            missingElements.push("identifier");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MessageHeaderResponse = MessageHeaderResponse;
/**
 * Code Values for the MessageHeader.response.code field
 */
var MessageHeaderResponseCodeEnum;
(function (MessageHeaderResponseCodeEnum) {
    MessageHeaderResponseCodeEnum["OK"] = "ok";
    MessageHeaderResponseCodeEnum["TRANSIENT_ERROR"] = "transient-error";
    MessageHeaderResponseCodeEnum["FATAL_ERROR"] = "fatal-error";
})(MessageHeaderResponseCodeEnum = exports.MessageHeaderResponseCodeEnum || (exports.MessageHeaderResponseCodeEnum = {}));
/**
 * The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
 */
class MessageHeader extends fhirModels.DomainResource {
    /**
     * Default constructor for MessageHeader from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "MessageHeader";
        if ((source['resourceType'] !== "MessageHeader") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a MessageHeader';
        }
        if (source["author"] !== undefined) {
            this.author = new fhirModels.Reference(source.author);
        }
        if (source["definition"] !== undefined) {
            this.definition = source.definition;
        }
        if (source["_definition"] !== undefined) {
            this._definition = new fhirModels.Element(source._definition);
        }
        if (source["destination"] !== undefined) {
            this.destination = source.destination.map((x) => new fhirModels.MessageHeaderDestination(x));
        }
        if (source["enterer"] !== undefined) {
            this.enterer = new fhirModels.Reference(source.enterer);
        }
        if (source["eventCoding"] !== undefined) {
            this.eventCoding = new fhirModels.Coding(source.eventCoding);
        }
        if (source["eventUri"] !== undefined) {
            this.eventUri = source.eventUri;
        }
        if (source["_eventUri"] !== undefined) {
            this._eventUri = new fhirModels.Element(source._eventUri);
        }
        if (source["focus"] !== undefined) {
            this.focus = source.focus.map((x) => new fhirModels.Reference(x));
        }
        if (source["reason"] !== undefined) {
            this.reason = new fhirModels.CodeableConcept(source.reason);
        }
        if (source["response"] !== undefined) {
            this.response = new fhirModels.MessageHeaderResponse(source.response);
        }
        if (source["responsible"] !== undefined) {
            this.responsible = new fhirModels.Reference(source.responsible);
        }
        if (source["sender"] !== undefined) {
            this.sender = new fhirModels.Reference(source.sender);
        }
        if (source["source"] !== undefined) {
            this.source = new fhirModels.MessageHeaderSource(source.source);
        }
    }
    /**
     * Factory function to create a MessageHeader from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MessageHeader(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MessageHeader is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MessageHeader contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["source"] === undefined) {
            missingElements.push("source");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MessageHeader = MessageHeader;
//# sourceMappingURL=MessageHeader.js.map