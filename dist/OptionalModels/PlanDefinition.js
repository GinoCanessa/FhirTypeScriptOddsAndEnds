"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlanDefinitionStatusEnum = exports.PlanDefinition = exports.PlanDefinitionActionSelectionBehaviorEnum = exports.PlanDefinitionActionRequiredBehaviorEnum = exports.PlanDefinitionActionPriorityEnum = exports.PlanDefinitionActionPrecheckBehaviorEnum = exports.PlanDefinitionActionGroupingBehaviorEnum = exports.PlanDefinitionActionCardinalityBehaviorEnum = exports.PlanDefinitionAction = exports.PlanDefinitionActionDynamicValue = exports.PlanDefinitionActionParticipantTypeEnum = exports.PlanDefinitionActionParticipant = exports.PlanDefinitionActionRelatedActionRelationshipEnum = exports.PlanDefinitionActionRelatedAction = exports.PlanDefinitionActionConditionKindEnum = exports.PlanDefinitionActionCondition = exports.PlanDefinitionGoal = exports.PlanDefinitionGoalTarget = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * Indicates what should be done and within what timeframe.
 */
class PlanDefinitionGoalTarget extends fhirModels.BackboneElement {
    /**
     * Default constructor for PlanDefinitionGoalTarget from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["detailQuantity"] !== undefined) {
            this.detailQuantity = new fhirModels.Quantity(source.detailQuantity);
        }
        if (source["detailRange"] !== undefined) {
            this.detailRange = new fhirModels.Range(source.detailRange);
        }
        if (source["detailCodeableConcept"] !== undefined) {
            this.detailCodeableConcept = new fhirModels.CodeableConcept(source.detailCodeableConcept);
        }
        if (source["due"] !== undefined) {
            this.due = new fhirModels.Duration(source.due);
        }
        if (source["measure"] !== undefined) {
            this.measure = new fhirModels.CodeableConcept(source.measure);
        }
    }
    /**
     * Factory function to create a PlanDefinitionGoalTarget from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new PlanDefinitionGoalTarget(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `PlanDefinitionGoalTarget is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current PlanDefinitionGoalTarget contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.PlanDefinitionGoalTarget = PlanDefinitionGoalTarget;
/**
 * Goals that describe what the activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
 */
class PlanDefinitionGoal extends fhirModels.BackboneElement {
    /**
     * Default constructor for PlanDefinitionGoal from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["addresses"] !== undefined) {
            this.addresses = source.addresses.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["category"] !== undefined) {
            this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["description"] !== undefined) {
            this.description = new fhirModels.CodeableConcept(source.description);
        }
        if (source["documentation"] !== undefined) {
            this.documentation = source.documentation.map((x) => new fhirModels.RelatedArtifact(x));
        }
        if (source["priority"] !== undefined) {
            this.priority = new fhirModels.CodeableConcept(source.priority);
        }
        if (source["start"] !== undefined) {
            this.start = new fhirModels.CodeableConcept(source.start);
        }
        if (source["target"] !== undefined) {
            this.target = source.target.map((x) => new fhirModels.PlanDefinitionGoalTarget(x));
        }
    }
    /**
     * Factory function to create a PlanDefinitionGoal from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new PlanDefinitionGoal(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `PlanDefinitionGoal is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current PlanDefinitionGoal contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["description"] === undefined) {
            missingElements.push("description");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.PlanDefinitionGoal = PlanDefinitionGoal;
/**
 * When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all the conditions are true.
 */
class PlanDefinitionActionCondition extends fhirModels.BackboneElement {
    /**
     * Default constructor for PlanDefinitionActionCondition from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["expression"] !== undefined) {
            this.expression = new fhirModels.Expression(source.expression);
        }
        if (source["kind"] !== undefined) {
            this.kind = source.kind;
        }
        if (source["_kind"] !== undefined) {
            this._kind = new fhirModels.Element(source._kind);
        }
    }
    /**
     * Factory function to create a PlanDefinitionActionCondition from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new PlanDefinitionActionCondition(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `PlanDefinitionActionCondition is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current PlanDefinitionActionCondition contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["kind"] === undefined) {
            missingElements.push("kind");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.PlanDefinitionActionCondition = PlanDefinitionActionCondition;
/**
 * Code Values for the PlanDefinition.action.condition.kind field
 */
var PlanDefinitionActionConditionKindEnum;
(function (PlanDefinitionActionConditionKindEnum) {
    PlanDefinitionActionConditionKindEnum["APPLICABILITY"] = "applicability";
    PlanDefinitionActionConditionKindEnum["START"] = "start";
    PlanDefinitionActionConditionKindEnum["STOP"] = "stop";
})(PlanDefinitionActionConditionKindEnum = exports.PlanDefinitionActionConditionKindEnum || (exports.PlanDefinitionActionConditionKindEnum = {}));
/**
 * When an action depends on multiple actions, the meaning is that all actions are dependencies, rather than that any of the actions are a dependency.
 */
class PlanDefinitionActionRelatedAction extends fhirModels.BackboneElement {
    /**
     * Default constructor for PlanDefinitionActionRelatedAction from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["actionId"] !== undefined) {
            this.actionId = source.actionId;
        }
        if (source["_actionId"] !== undefined) {
            this._actionId = new fhirModels.Element(source._actionId);
        }
        if (source["offsetDuration"] !== undefined) {
            this.offsetDuration = new fhirModels.Duration(source.offsetDuration);
        }
        if (source["offsetRange"] !== undefined) {
            this.offsetRange = new fhirModels.Range(source.offsetRange);
        }
        if (source["relationship"] !== undefined) {
            this.relationship = source.relationship;
        }
        if (source["_relationship"] !== undefined) {
            this._relationship = new fhirModels.Element(source._relationship);
        }
    }
    /**
     * Factory function to create a PlanDefinitionActionRelatedAction from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new PlanDefinitionActionRelatedAction(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `PlanDefinitionActionRelatedAction is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current PlanDefinitionActionRelatedAction contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["actionId"] === undefined) {
            missingElements.push("actionId");
        }
        if (this["relationship"] === undefined) {
            missingElements.push("relationship");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.PlanDefinitionActionRelatedAction = PlanDefinitionActionRelatedAction;
/**
 * Code Values for the PlanDefinition.action.relatedAction.relationship field
 */
var PlanDefinitionActionRelatedActionRelationshipEnum;
(function (PlanDefinitionActionRelatedActionRelationshipEnum) {
    PlanDefinitionActionRelatedActionRelationshipEnum["BEFORE_START"] = "before-start";
    PlanDefinitionActionRelatedActionRelationshipEnum["BEFORE"] = "before";
    PlanDefinitionActionRelatedActionRelationshipEnum["BEFORE_END"] = "before-end";
    PlanDefinitionActionRelatedActionRelationshipEnum["CONCURRENT_WITH_START"] = "concurrent-with-start";
    PlanDefinitionActionRelatedActionRelationshipEnum["CONCURRENT"] = "concurrent";
    PlanDefinitionActionRelatedActionRelationshipEnum["CONCURRENT_WITH_END"] = "concurrent-with-end";
    PlanDefinitionActionRelatedActionRelationshipEnum["AFTER_START"] = "after-start";
    PlanDefinitionActionRelatedActionRelationshipEnum["AFTER"] = "after";
    PlanDefinitionActionRelatedActionRelationshipEnum["AFTER_END"] = "after-end";
})(PlanDefinitionActionRelatedActionRelationshipEnum = exports.PlanDefinitionActionRelatedActionRelationshipEnum || (exports.PlanDefinitionActionRelatedActionRelationshipEnum = {}));
/**
 * Indicates who should participate in performing the action described.
 */
class PlanDefinitionActionParticipant extends fhirModels.BackboneElement {
    /**
     * Default constructor for PlanDefinitionActionParticipant from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["role"] !== undefined) {
            this.role = new fhirModels.CodeableConcept(source.role);
        }
        if (source["type"] !== undefined) {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
    }
    /**
     * Factory function to create a PlanDefinitionActionParticipant from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new PlanDefinitionActionParticipant(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `PlanDefinitionActionParticipant is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current PlanDefinitionActionParticipant contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.PlanDefinitionActionParticipant = PlanDefinitionActionParticipant;
/**
 * Code Values for the PlanDefinition.action.participant.type field
 */
var PlanDefinitionActionParticipantTypeEnum;
(function (PlanDefinitionActionParticipantTypeEnum) {
    PlanDefinitionActionParticipantTypeEnum["PATIENT"] = "patient";
    PlanDefinitionActionParticipantTypeEnum["PRACTITIONER"] = "practitioner";
    PlanDefinitionActionParticipantTypeEnum["RELATED_PERSON"] = "related-person";
    PlanDefinitionActionParticipantTypeEnum["DEVICE"] = "device";
})(PlanDefinitionActionParticipantTypeEnum = exports.PlanDefinitionActionParticipantTypeEnum || (exports.PlanDefinitionActionParticipantTypeEnum = {}));
/**
 * Dynamic values are applied in the order in which they are defined in the PlanDefinition resource. Note that when dynamic values are also specified by a referenced ActivityDefinition, the dynamicValues from the ActivityDefinition are applied first, followed by the dynamicValues specified here. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
 */
class PlanDefinitionActionDynamicValue extends fhirModels.BackboneElement {
    /**
     * Default constructor for PlanDefinitionActionDynamicValue from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["expression"] !== undefined) {
            this.expression = new fhirModels.Expression(source.expression);
        }
        if (source["path"] !== undefined) {
            this.path = source.path;
        }
        if (source["_path"] !== undefined) {
            this._path = new fhirModels.Element(source._path);
        }
    }
    /**
     * Factory function to create a PlanDefinitionActionDynamicValue from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new PlanDefinitionActionDynamicValue(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `PlanDefinitionActionDynamicValue is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current PlanDefinitionActionDynamicValue contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.PlanDefinitionActionDynamicValue = PlanDefinitionActionDynamicValue;
/**
 * Note that there is overlap between many of the elements defined here and the ActivityDefinition resource. When an ActivityDefinition is referenced (using the definition element), the overlapping elements in the plan override the content of the referenced ActivityDefinition unless otherwise documented in the specific elements. See the PlanDefinition resource for more detailed information.
 */
class PlanDefinitionAction extends fhirModels.BackboneElement {
    /**
     * Default constructor for PlanDefinitionAction from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["action"] !== undefined) {
            this.action = source.action.map((x) => new fhirModels.PlanDefinitionAction(x));
        }
        if (source["cardinalityBehavior"] !== undefined) {
            this.cardinalityBehavior = source.cardinalityBehavior;
        }
        if (source["_cardinalityBehavior"] !== undefined) {
            this._cardinalityBehavior = new fhirModels.Element(source._cardinalityBehavior);
        }
        if (source["code"] !== undefined) {
            this.code = source.code.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["condition"] !== undefined) {
            this.condition = source.condition.map((x) => new fhirModels.PlanDefinitionActionCondition(x));
        }
        if (source["definitionCanonical"] !== undefined) {
            this.definitionCanonical = source.definitionCanonical;
        }
        if (source["_definitionCanonical"] !== undefined) {
            this._definitionCanonical = new fhirModels.Element(source._definitionCanonical);
        }
        if (source["definitionUri"] !== undefined) {
            this.definitionUri = source.definitionUri;
        }
        if (source["_definitionUri"] !== undefined) {
            this._definitionUri = new fhirModels.Element(source._definitionUri);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["documentation"] !== undefined) {
            this.documentation = source.documentation.map((x) => new fhirModels.RelatedArtifact(x));
        }
        if (source["dynamicValue"] !== undefined) {
            this.dynamicValue = source.dynamicValue.map((x) => new fhirModels.PlanDefinitionActionDynamicValue(x));
        }
        if (source["goalId"] !== undefined) {
            this.goalId = source.goalId.map((x) => (x));
        }
        if (source["_goalId"] !== undefined) {
            this._goalId = source._goalId.map((x) => new fhirModels.Element(x));
        }
        if (source["groupingBehavior"] !== undefined) {
            this.groupingBehavior = source.groupingBehavior;
        }
        if (source["_groupingBehavior"] !== undefined) {
            this._groupingBehavior = new fhirModels.Element(source._groupingBehavior);
        }
        if (source["input"] !== undefined) {
            this.input = source.input.map((x) => new fhirModels.DataRequirement(x));
        }
        if (source["output"] !== undefined) {
            this.output = source.output.map((x) => new fhirModels.DataRequirement(x));
        }
        if (source["participant"] !== undefined) {
            this.participant = source.participant.map((x) => new fhirModels.PlanDefinitionActionParticipant(x));
        }
        if (source["precheckBehavior"] !== undefined) {
            this.precheckBehavior = source.precheckBehavior;
        }
        if (source["_precheckBehavior"] !== undefined) {
            this._precheckBehavior = new fhirModels.Element(source._precheckBehavior);
        }
        if (source["prefix"] !== undefined) {
            this.prefix = source.prefix;
        }
        if (source["_prefix"] !== undefined) {
            this._prefix = new fhirModels.Element(source._prefix);
        }
        if (source["priority"] !== undefined) {
            this.priority = source.priority;
        }
        if (source["_priority"] !== undefined) {
            this._priority = new fhirModels.Element(source._priority);
        }
        if (source["reason"] !== undefined) {
            this.reason = source.reason.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["relatedAction"] !== undefined) {
            this.relatedAction = source.relatedAction.map((x) => new fhirModels.PlanDefinitionActionRelatedAction(x));
        }
        if (source["requiredBehavior"] !== undefined) {
            this.requiredBehavior = source.requiredBehavior;
        }
        if (source["_requiredBehavior"] !== undefined) {
            this._requiredBehavior = new fhirModels.Element(source._requiredBehavior);
        }
        if (source["selectionBehavior"] !== undefined) {
            this.selectionBehavior = source.selectionBehavior;
        }
        if (source["_selectionBehavior"] !== undefined) {
            this._selectionBehavior = new fhirModels.Element(source._selectionBehavior);
        }
        if (source["subjectCodeableConcept"] !== undefined) {
            this.subjectCodeableConcept = new fhirModels.CodeableConcept(source.subjectCodeableConcept);
        }
        if (source["subjectReference"] !== undefined) {
            this.subjectReference = new fhirModels.Reference(source.subjectReference);
        }
        if (source["textEquivalent"] !== undefined) {
            this.textEquivalent = source.textEquivalent;
        }
        if (source["_textEquivalent"] !== undefined) {
            this._textEquivalent = new fhirModels.Element(source._textEquivalent);
        }
        if (source["timingDateTime"] !== undefined) {
            this.timingDateTime = source.timingDateTime;
        }
        if (source["_timingDateTime"] !== undefined) {
            this._timingDateTime = new fhirModels.Element(source._timingDateTime);
        }
        if (source["timingAge"] !== undefined) {
            this.timingAge = new fhirModels.Age(source.timingAge);
        }
        if (source["timingPeriod"] !== undefined) {
            this.timingPeriod = new fhirModels.Period(source.timingPeriod);
        }
        if (source["timingDuration"] !== undefined) {
            this.timingDuration = new fhirModels.Duration(source.timingDuration);
        }
        if (source["timingRange"] !== undefined) {
            this.timingRange = new fhirModels.Range(source.timingRange);
        }
        if (source["timingTiming"] !== undefined) {
            this.timingTiming = new fhirModels.Timing(source.timingTiming);
        }
        if (source["title"] !== undefined) {
            this.title = source.title;
        }
        if (source["_title"] !== undefined) {
            this._title = new fhirModels.Element(source._title);
        }
        if (source["transform"] !== undefined) {
            this.transform = source.transform;
        }
        if (source["_transform"] !== undefined) {
            this._transform = new fhirModels.Element(source._transform);
        }
        if (source["trigger"] !== undefined) {
            this.trigger = source.trigger.map((x) => new fhirModels.TriggerDefinition(x));
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
    /**
     * Factory function to create a PlanDefinitionAction from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new PlanDefinitionAction(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `PlanDefinitionAction is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current PlanDefinitionAction contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.PlanDefinitionAction = PlanDefinitionAction;
/**
 * Code Values for the PlanDefinition.action.cardinalityBehavior field
 */
var PlanDefinitionActionCardinalityBehaviorEnum;
(function (PlanDefinitionActionCardinalityBehaviorEnum) {
    PlanDefinitionActionCardinalityBehaviorEnum["SINGLE"] = "single";
    PlanDefinitionActionCardinalityBehaviorEnum["MULTIPLE"] = "multiple";
})(PlanDefinitionActionCardinalityBehaviorEnum = exports.PlanDefinitionActionCardinalityBehaviorEnum || (exports.PlanDefinitionActionCardinalityBehaviorEnum = {}));
/**
 * Code Values for the PlanDefinition.action.groupingBehavior field
 */
var PlanDefinitionActionGroupingBehaviorEnum;
(function (PlanDefinitionActionGroupingBehaviorEnum) {
    PlanDefinitionActionGroupingBehaviorEnum["VISUAL_GROUP"] = "visual-group";
    PlanDefinitionActionGroupingBehaviorEnum["LOGICAL_GROUP"] = "logical-group";
    PlanDefinitionActionGroupingBehaviorEnum["SENTENCE_GROUP"] = "sentence-group";
})(PlanDefinitionActionGroupingBehaviorEnum = exports.PlanDefinitionActionGroupingBehaviorEnum || (exports.PlanDefinitionActionGroupingBehaviorEnum = {}));
/**
 * Code Values for the PlanDefinition.action.precheckBehavior field
 */
var PlanDefinitionActionPrecheckBehaviorEnum;
(function (PlanDefinitionActionPrecheckBehaviorEnum) {
    PlanDefinitionActionPrecheckBehaviorEnum["YES"] = "yes";
    PlanDefinitionActionPrecheckBehaviorEnum["NO"] = "no";
})(PlanDefinitionActionPrecheckBehaviorEnum = exports.PlanDefinitionActionPrecheckBehaviorEnum || (exports.PlanDefinitionActionPrecheckBehaviorEnum = {}));
/**
 * Code Values for the PlanDefinition.action.priority field
 */
var PlanDefinitionActionPriorityEnum;
(function (PlanDefinitionActionPriorityEnum) {
    PlanDefinitionActionPriorityEnum["ROUTINE"] = "routine";
    PlanDefinitionActionPriorityEnum["URGENT"] = "urgent";
    PlanDefinitionActionPriorityEnum["ASAP"] = "asap";
    PlanDefinitionActionPriorityEnum["STAT"] = "stat";
})(PlanDefinitionActionPriorityEnum = exports.PlanDefinitionActionPriorityEnum || (exports.PlanDefinitionActionPriorityEnum = {}));
/**
 * Code Values for the PlanDefinition.action.requiredBehavior field
 */
var PlanDefinitionActionRequiredBehaviorEnum;
(function (PlanDefinitionActionRequiredBehaviorEnum) {
    PlanDefinitionActionRequiredBehaviorEnum["MUST"] = "must";
    PlanDefinitionActionRequiredBehaviorEnum["COULD"] = "could";
    PlanDefinitionActionRequiredBehaviorEnum["MUST_UNLESS_DOCUMENTED"] = "must-unless-documented";
})(PlanDefinitionActionRequiredBehaviorEnum = exports.PlanDefinitionActionRequiredBehaviorEnum || (exports.PlanDefinitionActionRequiredBehaviorEnum = {}));
/**
 * Code Values for the PlanDefinition.action.selectionBehavior field
 */
var PlanDefinitionActionSelectionBehaviorEnum;
(function (PlanDefinitionActionSelectionBehaviorEnum) {
    PlanDefinitionActionSelectionBehaviorEnum["ANY"] = "any";
    PlanDefinitionActionSelectionBehaviorEnum["ALL"] = "all";
    PlanDefinitionActionSelectionBehaviorEnum["ALL_OR_NONE"] = "all-or-none";
    PlanDefinitionActionSelectionBehaviorEnum["EXACTLY_ONE"] = "exactly-one";
    PlanDefinitionActionSelectionBehaviorEnum["AT_MOST_ONE"] = "at-most-one";
    PlanDefinitionActionSelectionBehaviorEnum["ONE_OR_MORE"] = "one-or-more";
})(PlanDefinitionActionSelectionBehaviorEnum = exports.PlanDefinitionActionSelectionBehaviorEnum || (exports.PlanDefinitionActionSelectionBehaviorEnum = {}));
/**
 * This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.
 */
class PlanDefinition extends fhirModels.DomainResource {
    /**
     * Default constructor for PlanDefinition from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "PlanDefinition";
        if ((source['resourceType'] !== "PlanDefinition") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a PlanDefinition';
        }
        if (source["action"] !== undefined) {
            this.action = source.action.map((x) => new fhirModels.PlanDefinitionAction(x));
        }
        if (source["approvalDate"] !== undefined) {
            this.approvalDate = source.approvalDate;
        }
        if (source["_approvalDate"] !== undefined) {
            this._approvalDate = new fhirModels.Element(source._approvalDate);
        }
        if (source["author"] !== undefined) {
            this.author = source.author.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["contact"] !== undefined) {
            this.contact = source.contact.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["copyright"] !== undefined) {
            this.copyright = source.copyright;
        }
        if (source["_copyright"] !== undefined) {
            this._copyright = new fhirModels.Element(source._copyright);
        }
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["editor"] !== undefined) {
            this.editor = source.editor.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["effectivePeriod"] !== undefined) {
            this.effectivePeriod = new fhirModels.Period(source.effectivePeriod);
        }
        if (source["endorser"] !== undefined) {
            this.endorser = source.endorser.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["experimental"] !== undefined) {
            this.experimental = source.experimental;
        }
        if (source["_experimental"] !== undefined) {
            this._experimental = new fhirModels.Element(source._experimental);
        }
        if (source["goal"] !== undefined) {
            this.goal = source.goal.map((x) => new fhirModels.PlanDefinitionGoal(x));
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["jurisdiction"] !== undefined) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["lastReviewDate"] !== undefined) {
            this.lastReviewDate = source.lastReviewDate;
        }
        if (source["_lastReviewDate"] !== undefined) {
            this._lastReviewDate = new fhirModels.Element(source._lastReviewDate);
        }
        if (source["library"] !== undefined) {
            this.library = source.library.map((x) => (x));
        }
        if (source["_library"] !== undefined) {
            this._library = source._library.map((x) => new fhirModels.Element(x));
        }
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["publisher"] !== undefined) {
            this.publisher = source.publisher;
        }
        if (source["_publisher"] !== undefined) {
            this._publisher = new fhirModels.Element(source._publisher);
        }
        if (source["purpose"] !== undefined) {
            this.purpose = source.purpose;
        }
        if (source["_purpose"] !== undefined) {
            this._purpose = new fhirModels.Element(source._purpose);
        }
        if (source["relatedArtifact"] !== undefined) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhirModels.RelatedArtifact(x));
        }
        if (source["reviewer"] !== undefined) {
            this.reviewer = source.reviewer.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["subjectCodeableConcept"] !== undefined) {
            this.subjectCodeableConcept = new fhirModels.CodeableConcept(source.subjectCodeableConcept);
        }
        if (source["subjectReference"] !== undefined) {
            this.subjectReference = new fhirModels.Reference(source.subjectReference);
        }
        if (source["subtitle"] !== undefined) {
            this.subtitle = source.subtitle;
        }
        if (source["_subtitle"] !== undefined) {
            this._subtitle = new fhirModels.Element(source._subtitle);
        }
        if (source["title"] !== undefined) {
            this.title = source.title;
        }
        if (source["_title"] !== undefined) {
            this._title = new fhirModels.Element(source._title);
        }
        if (source["topic"] !== undefined) {
            this.topic = source.topic.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["url"] !== undefined) {
            this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            this._url = new fhirModels.Element(source._url);
        }
        if (source["usage"] !== undefined) {
            this.usage = source.usage;
        }
        if (source["_usage"] !== undefined) {
            this._usage = new fhirModels.Element(source._usage);
        }
        if (source["useContext"] !== undefined) {
            this.useContext = source.useContext.map((x) => new fhirModels.UsageContext(x));
        }
        if (source["version"] !== undefined) {
            this.version = source.version;
        }
        if (source["_version"] !== undefined) {
            this._version = new fhirModels.Element(source._version);
        }
    }
    /**
     * Factory function to create a PlanDefinition from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new PlanDefinition(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `PlanDefinition is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current PlanDefinition contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.PlanDefinition = PlanDefinition;
/**
 * Code Values for the PlanDefinition.status field
 */
var PlanDefinitionStatusEnum;
(function (PlanDefinitionStatusEnum) {
    PlanDefinitionStatusEnum["DRAFT"] = "draft";
    PlanDefinitionStatusEnum["ACTIVE"] = "active";
    PlanDefinitionStatusEnum["RETIRED"] = "retired";
    PlanDefinitionStatusEnum["UNKNOWN"] = "unknown";
})(PlanDefinitionStatusEnum = exports.PlanDefinitionStatusEnum || (exports.PlanDefinitionStatusEnum = {}));
//# sourceMappingURL=PlanDefinition.js.map