"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BiologicallyDerivedProductStatusEnum = exports.BiologicallyDerivedProductProductCategoryEnum = exports.BiologicallyDerivedProduct = exports.BiologicallyDerivedProductStorageScaleEnum = exports.BiologicallyDerivedProductStorage = exports.BiologicallyDerivedProductManipulation = exports.BiologicallyDerivedProductProcessing = exports.BiologicallyDerivedProductCollection = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * How this product was collected.
 */
class BiologicallyDerivedProductCollection extends fhirModels.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductCollection from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["collectedDateTime"] !== undefined) {
            this.collectedDateTime = source.collectedDateTime;
        }
        if (source["_collectedDateTime"] !== undefined) {
            this._collectedDateTime = new fhirModels.Element(source._collectedDateTime);
        }
        if (source["collectedPeriod"] !== undefined) {
            this.collectedPeriod = new fhirModels.Period(source.collectedPeriod);
        }
        if (source["collector"] !== undefined) {
            this.collector = new fhirModels.Reference(source.collector);
        }
        if (source["source"] !== undefined) {
            this.source = new fhirModels.Reference(source.source);
        }
    }
    /**
     * Factory function to create a BiologicallyDerivedProductCollection from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new BiologicallyDerivedProductCollection(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `BiologicallyDerivedProductCollection is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current BiologicallyDerivedProductCollection contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.BiologicallyDerivedProductCollection = BiologicallyDerivedProductCollection;
/**
 * Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
 */
class BiologicallyDerivedProductProcessing extends fhirModels.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductProcessing from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["additive"] !== undefined) {
            this.additive = new fhirModels.Reference(source.additive);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["procedure"] !== undefined) {
            this.procedure = new fhirModels.CodeableConcept(source.procedure);
        }
        if (source["timeDateTime"] !== undefined) {
            this.timeDateTime = source.timeDateTime;
        }
        if (source["_timeDateTime"] !== undefined) {
            this._timeDateTime = new fhirModels.Element(source._timeDateTime);
        }
        if (source["timePeriod"] !== undefined) {
            this.timePeriod = new fhirModels.Period(source.timePeriod);
        }
    }
    /**
     * Factory function to create a BiologicallyDerivedProductProcessing from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new BiologicallyDerivedProductProcessing(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `BiologicallyDerivedProductProcessing is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current BiologicallyDerivedProductProcessing contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.BiologicallyDerivedProductProcessing = BiologicallyDerivedProductProcessing;
/**
 * Any manipulation of product post-collection that is intended to alter the product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
 */
class BiologicallyDerivedProductManipulation extends fhirModels.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductManipulation from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["timeDateTime"] !== undefined) {
            this.timeDateTime = source.timeDateTime;
        }
        if (source["_timeDateTime"] !== undefined) {
            this._timeDateTime = new fhirModels.Element(source._timeDateTime);
        }
        if (source["timePeriod"] !== undefined) {
            this.timePeriod = new fhirModels.Period(source.timePeriod);
        }
    }
    /**
     * Factory function to create a BiologicallyDerivedProductManipulation from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new BiologicallyDerivedProductManipulation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `BiologicallyDerivedProductManipulation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current BiologicallyDerivedProductManipulation contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.BiologicallyDerivedProductManipulation = BiologicallyDerivedProductManipulation;
/**
 * Product storage.
 */
class BiologicallyDerivedProductStorage extends fhirModels.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductStorage from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["duration"] !== undefined) {
            this.duration = new fhirModels.Period(source.duration);
        }
        if (source["scale"] !== undefined) {
            this.scale = source.scale;
        }
        if (source["_scale"] !== undefined) {
            this._scale = new fhirModels.Element(source._scale);
        }
        if (source["temperature"] !== undefined) {
            this.temperature = source.temperature;
        }
        if (source["_temperature"] !== undefined) {
            this._temperature = new fhirModels.Element(source._temperature);
        }
    }
    /**
     * Factory function to create a BiologicallyDerivedProductStorage from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new BiologicallyDerivedProductStorage(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `BiologicallyDerivedProductStorage is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current BiologicallyDerivedProductStorage contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.BiologicallyDerivedProductStorage = BiologicallyDerivedProductStorage;
/**
 * Code Values for the BiologicallyDerivedProduct.storage.scale field
 */
var BiologicallyDerivedProductStorageScaleEnum;
(function (BiologicallyDerivedProductStorageScaleEnum) {
    BiologicallyDerivedProductStorageScaleEnum["FARENHEIT"] = "farenheit";
    BiologicallyDerivedProductStorageScaleEnum["CELSIUS"] = "celsius";
    BiologicallyDerivedProductStorageScaleEnum["KELVIN"] = "kelvin";
})(BiologicallyDerivedProductStorageScaleEnum = exports.BiologicallyDerivedProductStorageScaleEnum || (exports.BiologicallyDerivedProductStorageScaleEnum = {}));
/**
 * A material substance originating from a biological entity intended to be transplanted or infused
 * into another (possibly the same) biological entity.
 */
class BiologicallyDerivedProduct extends fhirModels.DomainResource {
    /**
     * Default constructor for BiologicallyDerivedProduct from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "BiologicallyDerivedProduct";
        if ((source['resourceType'] !== "BiologicallyDerivedProduct") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a BiologicallyDerivedProduct';
        }
        if (source["collection"] !== undefined) {
            this.collection = new fhirModels.BiologicallyDerivedProductCollection(source.collection);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["manipulation"] !== undefined) {
            this.manipulation = new fhirModels.BiologicallyDerivedProductManipulation(source.manipulation);
        }
        if (source["parent"] !== undefined) {
            this.parent = source.parent.map((x) => new fhirModels.Reference(x));
        }
        if (source["processing"] !== undefined) {
            this.processing = source.processing.map((x) => new fhirModels.BiologicallyDerivedProductProcessing(x));
        }
        if (source["productCategory"] !== undefined) {
            this.productCategory = source.productCategory;
        }
        if (source["_productCategory"] !== undefined) {
            this._productCategory = new fhirModels.Element(source._productCategory);
        }
        if (source["productCode"] !== undefined) {
            this.productCode = new fhirModels.CodeableConcept(source.productCode);
        }
        if (source["quantity"] !== undefined) {
            this.quantity = source.quantity;
        }
        if (source["_quantity"] !== undefined) {
            this._quantity = new fhirModels.Element(source._quantity);
        }
        if (source["request"] !== undefined) {
            this.request = source.request.map((x) => new fhirModels.Reference(x));
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["storage"] !== undefined) {
            this.storage = source.storage.map((x) => new fhirModels.BiologicallyDerivedProductStorage(x));
        }
    }
    /**
     * Factory function to create a BiologicallyDerivedProduct from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new BiologicallyDerivedProduct(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `BiologicallyDerivedProduct is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current BiologicallyDerivedProduct contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.BiologicallyDerivedProduct = BiologicallyDerivedProduct;
/**
 * Code Values for the BiologicallyDerivedProduct.productCategory field
 */
var BiologicallyDerivedProductProductCategoryEnum;
(function (BiologicallyDerivedProductProductCategoryEnum) {
    BiologicallyDerivedProductProductCategoryEnum["ORGAN"] = "organ";
    BiologicallyDerivedProductProductCategoryEnum["TISSUE"] = "tissue";
    BiologicallyDerivedProductProductCategoryEnum["FLUID"] = "fluid";
    BiologicallyDerivedProductProductCategoryEnum["CELLS"] = "cells";
    BiologicallyDerivedProductProductCategoryEnum["BIOLOGICALAGENT"] = "biologicalAgent";
})(BiologicallyDerivedProductProductCategoryEnum = exports.BiologicallyDerivedProductProductCategoryEnum || (exports.BiologicallyDerivedProductProductCategoryEnum = {}));
/**
 * Code Values for the BiologicallyDerivedProduct.status field
 */
var BiologicallyDerivedProductStatusEnum;
(function (BiologicallyDerivedProductStatusEnum) {
    BiologicallyDerivedProductStatusEnum["AVAILABLE"] = "available";
    BiologicallyDerivedProductStatusEnum["UNAVAILABLE"] = "unavailable";
})(BiologicallyDerivedProductStatusEnum = exports.BiologicallyDerivedProductStatusEnum || (exports.BiologicallyDerivedProductStatusEnum = {}));
//# sourceMappingURL=BiologicallyDerivedProduct.js.map