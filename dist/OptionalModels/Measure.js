"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MeasureStatusEnum = exports.Measure = exports.MeasureSupplementalData = exports.MeasureGroup = exports.MeasureGroupStratifier = exports.MeasureGroupStratifierComponent = exports.MeasureGroupPopulation = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * A population criteria for the measure.
 */
class MeasureGroupPopulation extends fhirModels.BackboneElement {
    /**
     * Default constructor for MeasureGroupPopulation from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["criteria"] !== undefined) {
            this.criteria = new fhirModels.Expression(source.criteria);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
    }
    /**
     * Factory function to create a MeasureGroupPopulation from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MeasureGroupPopulation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MeasureGroupPopulation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MeasureGroupPopulation contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["criteria"] === undefined) {
            missingElements.push("criteria");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MeasureGroupPopulation = MeasureGroupPopulation;
/**
 * Stratifiers are defined either as a single criteria, or as a set of component criteria.
 */
class MeasureGroupStratifierComponent extends fhirModels.BackboneElement {
    /**
     * Default constructor for MeasureGroupStratifierComponent from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["criteria"] !== undefined) {
            this.criteria = new fhirModels.Expression(source.criteria);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
    }
    /**
     * Factory function to create a MeasureGroupStratifierComponent from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MeasureGroupStratifierComponent(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MeasureGroupStratifierComponent is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MeasureGroupStratifierComponent contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["criteria"] === undefined) {
            missingElements.push("criteria");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MeasureGroupStratifierComponent = MeasureGroupStratifierComponent;
/**
 * The stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.
 */
class MeasureGroupStratifier extends fhirModels.BackboneElement {
    /**
     * Default constructor for MeasureGroupStratifier from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["component"] !== undefined) {
            this.component = source.component.map((x) => new fhirModels.MeasureGroupStratifierComponent(x));
        }
        if (source["criteria"] !== undefined) {
            this.criteria = new fhirModels.Expression(source.criteria);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
    }
    /**
     * Factory function to create a MeasureGroupStratifier from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MeasureGroupStratifier(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MeasureGroupStratifier is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MeasureGroupStratifier contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MeasureGroupStratifier = MeasureGroupStratifier;
/**
 * A group of population criteria for the measure.
 */
class MeasureGroup extends fhirModels.BackboneElement {
    /**
     * Default constructor for MeasureGroup from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["population"] !== undefined) {
            this.population = source.population.map((x) => new fhirModels.MeasureGroupPopulation(x));
        }
        if (source["stratifier"] !== undefined) {
            this.stratifier = source.stratifier.map((x) => new fhirModels.MeasureGroupStratifier(x));
        }
    }
    /**
     * Factory function to create a MeasureGroup from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MeasureGroup(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MeasureGroup is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MeasureGroup contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MeasureGroup = MeasureGroup;
/**
 * Note that supplemental data are reported as observations for each patient and included in the evaluatedResources bundle. See the MeasureReport resource or the Quality Reporting topic for more information.
 */
class MeasureSupplementalData extends fhirModels.BackboneElement {
    /**
     * Default constructor for MeasureSupplementalData from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["criteria"] !== undefined) {
            this.criteria = new fhirModels.Expression(source.criteria);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["usage"] !== undefined) {
            this.usage = source.usage.map((x) => new fhirModels.CodeableConcept(x));
        }
    }
    /**
     * Factory function to create a MeasureSupplementalData from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MeasureSupplementalData(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MeasureSupplementalData is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MeasureSupplementalData contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["criteria"] === undefined) {
            missingElements.push("criteria");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MeasureSupplementalData = MeasureSupplementalData;
/**
 * The Measure resource provides the definition of a quality measure.
 */
class Measure extends fhirModels.DomainResource {
    /**
     * Default constructor for Measure from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "Measure";
        if ((source['resourceType'] !== "Measure") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Measure';
        }
        if (source["approvalDate"] !== undefined) {
            this.approvalDate = source.approvalDate;
        }
        if (source["_approvalDate"] !== undefined) {
            this._approvalDate = new fhirModels.Element(source._approvalDate);
        }
        if (source["author"] !== undefined) {
            this.author = source.author.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["clinicalRecommendationStatement"] !== undefined) {
            this.clinicalRecommendationStatement = source.clinicalRecommendationStatement;
        }
        if (source["_clinicalRecommendationStatement"] !== undefined) {
            this._clinicalRecommendationStatement = new fhirModels.Element(source._clinicalRecommendationStatement);
        }
        if (source["compositeScoring"] !== undefined) {
            this.compositeScoring = new fhirModels.CodeableConcept(source.compositeScoring);
        }
        if (source["contact"] !== undefined) {
            this.contact = source.contact.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["copyright"] !== undefined) {
            this.copyright = source.copyright;
        }
        if (source["_copyright"] !== undefined) {
            this._copyright = new fhirModels.Element(source._copyright);
        }
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["definition"] !== undefined) {
            this.definition = source.definition.map((x) => (x));
        }
        if (source["_definition"] !== undefined) {
            this._definition = source._definition.map((x) => new fhirModels.Element(x));
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["disclaimer"] !== undefined) {
            this.disclaimer = source.disclaimer;
        }
        if (source["_disclaimer"] !== undefined) {
            this._disclaimer = new fhirModels.Element(source._disclaimer);
        }
        if (source["editor"] !== undefined) {
            this.editor = source.editor.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["effectivePeriod"] !== undefined) {
            this.effectivePeriod = new fhirModels.Period(source.effectivePeriod);
        }
        if (source["endorser"] !== undefined) {
            this.endorser = source.endorser.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["experimental"] !== undefined) {
            this.experimental = source.experimental;
        }
        if (source["_experimental"] !== undefined) {
            this._experimental = new fhirModels.Element(source._experimental);
        }
        if (source["group"] !== undefined) {
            this.group = source.group.map((x) => new fhirModels.MeasureGroup(x));
        }
        if (source["guidance"] !== undefined) {
            this.guidance = source.guidance;
        }
        if (source["_guidance"] !== undefined) {
            this._guidance = new fhirModels.Element(source._guidance);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["improvementNotation"] !== undefined) {
            this.improvementNotation = new fhirModels.CodeableConcept(source.improvementNotation);
        }
        if (source["jurisdiction"] !== undefined) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["lastReviewDate"] !== undefined) {
            this.lastReviewDate = source.lastReviewDate;
        }
        if (source["_lastReviewDate"] !== undefined) {
            this._lastReviewDate = new fhirModels.Element(source._lastReviewDate);
        }
        if (source["library"] !== undefined) {
            this.library = source.library.map((x) => (x));
        }
        if (source["_library"] !== undefined) {
            this._library = source._library.map((x) => new fhirModels.Element(x));
        }
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["publisher"] !== undefined) {
            this.publisher = source.publisher;
        }
        if (source["_publisher"] !== undefined) {
            this._publisher = new fhirModels.Element(source._publisher);
        }
        if (source["purpose"] !== undefined) {
            this.purpose = source.purpose;
        }
        if (source["_purpose"] !== undefined) {
            this._purpose = new fhirModels.Element(source._purpose);
        }
        if (source["rateAggregation"] !== undefined) {
            this.rateAggregation = source.rateAggregation;
        }
        if (source["_rateAggregation"] !== undefined) {
            this._rateAggregation = new fhirModels.Element(source._rateAggregation);
        }
        if (source["rationale"] !== undefined) {
            this.rationale = source.rationale;
        }
        if (source["_rationale"] !== undefined) {
            this._rationale = new fhirModels.Element(source._rationale);
        }
        if (source["relatedArtifact"] !== undefined) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhirModels.RelatedArtifact(x));
        }
        if (source["reviewer"] !== undefined) {
            this.reviewer = source.reviewer.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["riskAdjustment"] !== undefined) {
            this.riskAdjustment = source.riskAdjustment;
        }
        if (source["_riskAdjustment"] !== undefined) {
            this._riskAdjustment = new fhirModels.Element(source._riskAdjustment);
        }
        if (source["scoring"] !== undefined) {
            this.scoring = new fhirModels.CodeableConcept(source.scoring);
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["subjectCodeableConcept"] !== undefined) {
            this.subjectCodeableConcept = new fhirModels.CodeableConcept(source.subjectCodeableConcept);
        }
        if (source["subjectReference"] !== undefined) {
            this.subjectReference = new fhirModels.Reference(source.subjectReference);
        }
        if (source["subtitle"] !== undefined) {
            this.subtitle = source.subtitle;
        }
        if (source["_subtitle"] !== undefined) {
            this._subtitle = new fhirModels.Element(source._subtitle);
        }
        if (source["supplementalData"] !== undefined) {
            this.supplementalData = source.supplementalData.map((x) => new fhirModels.MeasureSupplementalData(x));
        }
        if (source["title"] !== undefined) {
            this.title = source.title;
        }
        if (source["_title"] !== undefined) {
            this._title = new fhirModels.Element(source._title);
        }
        if (source["topic"] !== undefined) {
            this.topic = source.topic.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["type"] !== undefined) {
            this.type = source.type.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["url"] !== undefined) {
            this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            this._url = new fhirModels.Element(source._url);
        }
        if (source["usage"] !== undefined) {
            this.usage = source.usage;
        }
        if (source["_usage"] !== undefined) {
            this._usage = new fhirModels.Element(source._usage);
        }
        if (source["useContext"] !== undefined) {
            this.useContext = source.useContext.map((x) => new fhirModels.UsageContext(x));
        }
        if (source["version"] !== undefined) {
            this.version = source.version;
        }
        if (source["_version"] !== undefined) {
            this._version = new fhirModels.Element(source._version);
        }
    }
    /**
     * Factory function to create a Measure from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new Measure(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Measure is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current Measure contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.Measure = Measure;
/**
 * Code Values for the Measure.status field
 */
var MeasureStatusEnum;
(function (MeasureStatusEnum) {
    MeasureStatusEnum["DRAFT"] = "draft";
    MeasureStatusEnum["ACTIVE"] = "active";
    MeasureStatusEnum["RETIRED"] = "retired";
    MeasureStatusEnum["UNKNOWN"] = "unknown";
})(MeasureStatusEnum = exports.MeasureStatusEnum || (exports.MeasureStatusEnum = {}));
//# sourceMappingURL=Measure.js.map