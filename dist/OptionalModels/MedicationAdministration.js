"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MedicationAdministrationStatusEnum = exports.MedicationAdministration = exports.MedicationAdministrationDosage = exports.MedicationAdministrationPerformer = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../optionalmodels"));
/**
 * Indicates who or what performed the medication administration and how they were involved.
 */
class MedicationAdministrationPerformer extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicationAdministrationPerformer from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["actor"] !== undefined) {
            this.actor = new fhirModels.Reference(source.actor);
        }
        if (source["function"] !== undefined) {
            this.function = new fhirModels.CodeableConcept(source.function);
        }
    }
    /**
     * Factory function to create a MedicationAdministrationPerformer from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MedicationAdministrationPerformer(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationAdministrationPerformer is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MedicationAdministrationPerformer contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["actor"] === undefined) {
            missingElements.push("actor");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MedicationAdministrationPerformer = MedicationAdministrationPerformer;
/**
 * Describes the medication dosage information details e.g. dose, rate, site, route, etc.
 */
class MedicationAdministrationDosage extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicationAdministrationDosage from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["dose"] !== undefined) {
            this.dose = new fhirModels.Quantity(source.dose);
        }
        if (source["method"] !== undefined) {
            this.method = new fhirModels.CodeableConcept(source.method);
        }
        if (source["rateRatio"] !== undefined) {
            this.rateRatio = new fhirModels.Ratio(source.rateRatio);
        }
        if (source["rateQuantity"] !== undefined) {
            this.rateQuantity = new fhirModels.Quantity(source.rateQuantity);
        }
        if (source["route"] !== undefined) {
            this.route = new fhirModels.CodeableConcept(source.route);
        }
        if (source["site"] !== undefined) {
            this.site = new fhirModels.CodeableConcept(source.site);
        }
        if (source["text"] !== undefined) {
            this.text = source.text;
        }
        if (source["_text"] !== undefined) {
            this._text = new fhirModels.Element(source._text);
        }
    }
    /**
     * Factory function to create a MedicationAdministrationDosage from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MedicationAdministrationDosage(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationAdministrationDosage is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MedicationAdministrationDosage contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MedicationAdministrationDosage = MedicationAdministrationDosage;
/**
 * Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.
 */
class MedicationAdministration extends fhirModels.DomainResource {
    /**
     * Default constructor for MedicationAdministration from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "MedicationAdministration";
        if ((source['resourceType'] !== "MedicationAdministration") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a MedicationAdministration';
        }
        if (source["category"] !== undefined) {
            this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["context"] !== undefined) {
            this.context = new fhirModels.Reference(source.context);
        }
        if (source["device"] !== undefined) {
            this.device = source.device.map((x) => new fhirModels.Reference(x));
        }
        if (source["dosage"] !== undefined) {
            this.dosage = new fhirModels.MedicationAdministrationDosage(source.dosage);
        }
        if (source["effectiveDateTime"] !== undefined) {
            this.effectiveDateTime = source.effectiveDateTime;
        }
        if (source["_effectiveDateTime"] !== undefined) {
            this._effectiveDateTime = new fhirModels.Element(source._effectiveDateTime);
        }
        if (source["effectivePeriod"] !== undefined) {
            this.effectivePeriod = new fhirModels.Period(source.effectivePeriod);
        }
        if (source["eventHistory"] !== undefined) {
            this.eventHistory = source.eventHistory.map((x) => new fhirModels.Reference(x));
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["instantiates"] !== undefined) {
            this.instantiates = source.instantiates.map((x) => (x));
        }
        if (source["_instantiates"] !== undefined) {
            this._instantiates = source._instantiates.map((x) => new fhirModels.Element(x));
        }
        if (source["medicationCodeableConcept"] !== undefined) {
            this.medicationCodeableConcept = new fhirModels.CodeableConcept(source.medicationCodeableConcept);
        }
        if (source["medicationReference"] !== undefined) {
            this.medicationReference = new fhirModels.Reference(source.medicationReference);
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["partOf"] !== undefined) {
            this.partOf = source.partOf.map((x) => new fhirModels.Reference(x));
        }
        if (source["performer"] !== undefined) {
            this.performer = source.performer.map((x) => new fhirModels.MedicationAdministrationPerformer(x));
        }
        if (source["reasonCode"] !== undefined) {
            this.reasonCode = source.reasonCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["reasonReference"] !== undefined) {
            this.reasonReference = source.reasonReference.map((x) => new fhirModels.Reference(x));
        }
        if (source["request"] !== undefined) {
            this.request = new fhirModels.Reference(source.request);
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["statusReason"] !== undefined) {
            this.statusReason = source.statusReason.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["subject"] !== undefined) {
            this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["supportingInformation"] !== undefined) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhirModels.Reference(x));
        }
    }
    /**
     * Factory function to create a MedicationAdministration from an object that MUST contain all required elements.
     */
    static CreateStrict(source) {
        var dest = new MedicationAdministration(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationAdministration is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Check if the current MedicationAdministration contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["subject"] === undefined) {
            missingElements.push("subject");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
}
exports.MedicationAdministration = MedicationAdministration;
/**
 * Code Values for the MedicationAdministration.status field
 */
var MedicationAdministrationStatusEnum;
(function (MedicationAdministrationStatusEnum) {
    MedicationAdministrationStatusEnum["IN_PROGRESS"] = "in-progress";
    MedicationAdministrationStatusEnum["NOT_DONE"] = "not-done";
    MedicationAdministrationStatusEnum["ON_HOLD"] = "on-hold";
    MedicationAdministrationStatusEnum["COMPLETED"] = "completed";
    MedicationAdministrationStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    MedicationAdministrationStatusEnum["STOPPED"] = "stopped";
    MedicationAdministrationStatusEnum["UNKNOWN"] = "unknown";
})(MedicationAdministrationStatusEnum = exports.MedicationAdministrationStatusEnum || (exports.MedicationAdministrationStatusEnum = {}));
//# sourceMappingURL=MedicationAdministration.js.map