"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceRequestStatusEnum = exports.ServiceRequestPriorityEnum = exports.ServiceRequestIntentEnum = exports.ServiceRequest = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * A record of a request for service such as diagnostic investigations, treatments, or operations to be performed.
 */
class ServiceRequest extends fhirModels.DomainResource {
    /**
     * Default constructor for ServiceRequest from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "ServiceRequest";
        if ((source['resourceType'] !== "ServiceRequest") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a ServiceRequest';
        }
        if (source["asNeededBoolean"] !== undefined) {
            this.asNeededBoolean = source.asNeededBoolean;
        }
        if (source["_asNeededBoolean"] !== undefined) {
            this._asNeededBoolean = new fhirModels.Element(source._asNeededBoolean);
        }
        if (source["asNeededCodeableConcept"] !== undefined) {
            this.asNeededCodeableConcept = new fhirModels.CodeableConcept(source.asNeededCodeableConcept);
        }
        if (source["authoredOn"] !== undefined) {
            this.authoredOn = source.authoredOn;
        }
        if (source["_authoredOn"] !== undefined) {
            this._authoredOn = new fhirModels.Element(source._authoredOn);
        }
        if (source["basedOn"] !== undefined) {
            this.basedOn = source.basedOn.map((x) => new fhirModels.Reference(x));
        }
        if (source["bodySite"] !== undefined) {
            this.bodySite = source.bodySite.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["category"] !== undefined) {
            this.category = source.category.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["doNotPerform"] !== undefined) {
            this.doNotPerform = source.doNotPerform;
        }
        if (source["_doNotPerform"] !== undefined) {
            this._doNotPerform = new fhirModels.Element(source._doNotPerform);
        }
        if (source["encounter"] !== undefined) {
            this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["instantiatesCanonical"] !== undefined) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => (x));
        }
        if (source["_instantiatesCanonical"] !== undefined) {
            this._instantiatesCanonical = source._instantiatesCanonical.map((x) => new fhirModels.Element(x));
        }
        if (source["instantiatesUri"] !== undefined) {
            this.instantiatesUri = source.instantiatesUri.map((x) => (x));
        }
        if (source["_instantiatesUri"] !== undefined) {
            this._instantiatesUri = source._instantiatesUri.map((x) => new fhirModels.Element(x));
        }
        if (source["insurance"] !== undefined) {
            this.insurance = source.insurance.map((x) => new fhirModels.Reference(x));
        }
        {
            this.intent = source.intent;
        }
        if (source["_intent"] !== undefined) {
            this._intent = new fhirModels.Element(source._intent);
        }
        if (source["locationCode"] !== undefined) {
            this.locationCode = source.locationCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["locationReference"] !== undefined) {
            this.locationReference = source.locationReference.map((x) => new fhirModels.Reference(x));
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["occurrenceDateTime"] !== undefined) {
            this.occurrenceDateTime = source.occurrenceDateTime;
        }
        if (source["_occurrenceDateTime"] !== undefined) {
            this._occurrenceDateTime = new fhirModels.Element(source._occurrenceDateTime);
        }
        if (source["occurrencePeriod"] !== undefined) {
            this.occurrencePeriod = new fhirModels.Period(source.occurrencePeriod);
        }
        if (source["occurrenceTiming"] !== undefined) {
            this.occurrenceTiming = new fhirModels.Timing(source.occurrenceTiming);
        }
        if (source["orderDetail"] !== undefined) {
            this.orderDetail = source.orderDetail.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["patientInstruction"] !== undefined) {
            this.patientInstruction = source.patientInstruction;
        }
        if (source["_patientInstruction"] !== undefined) {
            this._patientInstruction = new fhirModels.Element(source._patientInstruction);
        }
        if (source["performer"] !== undefined) {
            this.performer = source.performer.map((x) => new fhirModels.Reference(x));
        }
        if (source["performerType"] !== undefined) {
            this.performerType = new fhirModels.CodeableConcept(source.performerType);
        }
        if (source["priority"] !== undefined) {
            this.priority = source.priority;
        }
        if (source["_priority"] !== undefined) {
            this._priority = new fhirModels.Element(source._priority);
        }
        if (source["quantityQuantity"] !== undefined) {
            this.quantityQuantity = new fhirModels.Quantity(source.quantityQuantity);
        }
        if (source["quantityRatio"] !== undefined) {
            this.quantityRatio = new fhirModels.Ratio(source.quantityRatio);
        }
        if (source["quantityRange"] !== undefined) {
            this.quantityRange = new fhirModels.Range(source.quantityRange);
        }
        if (source["reasonCode"] !== undefined) {
            this.reasonCode = source.reasonCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["reasonReference"] !== undefined) {
            this.reasonReference = source.reasonReference.map((x) => new fhirModels.Reference(x));
        }
        if (source["relevantHistory"] !== undefined) {
            this.relevantHistory = source.relevantHistory.map((x) => new fhirModels.Reference(x));
        }
        if (source["replaces"] !== undefined) {
            this.replaces = source.replaces.map((x) => new fhirModels.Reference(x));
        }
        if (source["requester"] !== undefined) {
            this.requester = new fhirModels.Reference(source.requester);
        }
        if (source["requisition"] !== undefined) {
            this.requisition = new fhirModels.Identifier(source.requisition);
        }
        if (source["specimen"] !== undefined) {
            this.specimen = source.specimen.map((x) => new fhirModels.Reference(x));
        }
        {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        {
            this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["supportingInfo"] !== undefined) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhirModels.Reference(x));
        }
    }
}
exports.ServiceRequest = ServiceRequest;
/**
 * Code Values for the ServiceRequest.intent field
 */
var ServiceRequestIntentEnum;
(function (ServiceRequestIntentEnum) {
    ServiceRequestIntentEnum["PROPOSAL"] = "proposal";
    ServiceRequestIntentEnum["PLAN"] = "plan";
    ServiceRequestIntentEnum["DIRECTIVE"] = "directive";
    ServiceRequestIntentEnum["ORDER"] = "order";
    ServiceRequestIntentEnum["ORIGINAL_ORDER"] = "original-order";
    ServiceRequestIntentEnum["REFLEX_ORDER"] = "reflex-order";
    ServiceRequestIntentEnum["FILLER_ORDER"] = "filler-order";
    ServiceRequestIntentEnum["INSTANCE_ORDER"] = "instance-order";
    ServiceRequestIntentEnum["OPTION"] = "option";
})(ServiceRequestIntentEnum = exports.ServiceRequestIntentEnum || (exports.ServiceRequestIntentEnum = {}));
/**
 * Code Values for the ServiceRequest.priority field
 */
var ServiceRequestPriorityEnum;
(function (ServiceRequestPriorityEnum) {
    ServiceRequestPriorityEnum["ROUTINE"] = "routine";
    ServiceRequestPriorityEnum["URGENT"] = "urgent";
    ServiceRequestPriorityEnum["ASAP"] = "asap";
    ServiceRequestPriorityEnum["STAT"] = "stat";
})(ServiceRequestPriorityEnum = exports.ServiceRequestPriorityEnum || (exports.ServiceRequestPriorityEnum = {}));
/**
 * Code Values for the ServiceRequest.status field
 */
var ServiceRequestStatusEnum;
(function (ServiceRequestStatusEnum) {
    ServiceRequestStatusEnum["DRAFT"] = "draft";
    ServiceRequestStatusEnum["ACTIVE"] = "active";
    ServiceRequestStatusEnum["ON_HOLD"] = "on-hold";
    ServiceRequestStatusEnum["REVOKED"] = "revoked";
    ServiceRequestStatusEnum["COMPLETED"] = "completed";
    ServiceRequestStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    ServiceRequestStatusEnum["UNKNOWN"] = "unknown";
})(ServiceRequestStatusEnum = exports.ServiceRequestStatusEnum || (exports.ServiceRequestStatusEnum = {}));
//# sourceMappingURL=ServiceRequest.js.map