"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MedicinalProductAuthorization = exports.MedicinalProductAuthorizationProcedure = exports.MedicinalProductAuthorizationJurisdictionalAuthorization = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Authorization in areas within a country.
 */
class MedicinalProductAuthorizationJurisdictionalAuthorization extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicinalProductAuthorizationJurisdictionalAuthorization from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["country"] !== undefined) {
            this.country = new fhirModels.CodeableConcept(source.country);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["jurisdiction"] !== undefined) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["legalStatusOfSupply"] !== undefined) {
            this.legalStatusOfSupply = new fhirModels.CodeableConcept(source.legalStatusOfSupply);
        }
        if (source["validityPeriod"] !== undefined) {
            this.validityPeriod = new fhirModels.Period(source.validityPeriod);
        }
    }
}
exports.MedicinalProductAuthorizationJurisdictionalAuthorization = MedicinalProductAuthorizationJurisdictionalAuthorization;
/**
 * The regulatory procedure for granting or amending a marketing authorization.
 */
class MedicinalProductAuthorizationProcedure extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicinalProductAuthorizationProcedure from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["application"] !== undefined) {
            this.application = source.application.map((x) => new fhirModels.MedicinalProductAuthorizationProcedure(x));
        }
        if (source["datePeriod"] !== undefined) {
            this.datePeriod = new fhirModels.Period(source.datePeriod);
        }
        if (source["dateDateTime"] !== undefined) {
            this.dateDateTime = source.dateDateTime;
        }
        if (source["_dateDateTime"] !== undefined) {
            this._dateDateTime = new fhirModels.Element(source._dateDateTime);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = new fhirModels.Identifier(source.identifier);
        }
        {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.MedicinalProductAuthorizationProcedure = MedicinalProductAuthorizationProcedure;
/**
 * The regulatory authorization of a medicinal product.
 */
class MedicinalProductAuthorization extends fhirModels.DomainResource {
    /**
     * Default constructor for MedicinalProductAuthorization from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "MedicinalProductAuthorization";
        if ((source['resourceType'] !== "MedicinalProductAuthorization") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a MedicinalProductAuthorization';
        }
        if (source["country"] !== undefined) {
            this.country = source.country.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["dataExclusivityPeriod"] !== undefined) {
            this.dataExclusivityPeriod = new fhirModels.Period(source.dataExclusivityPeriod);
        }
        if (source["dateOfFirstAuthorization"] !== undefined) {
            this.dateOfFirstAuthorization = source.dateOfFirstAuthorization;
        }
        if (source["_dateOfFirstAuthorization"] !== undefined) {
            this._dateOfFirstAuthorization = new fhirModels.Element(source._dateOfFirstAuthorization);
        }
        if (source["holder"] !== undefined) {
            this.holder = new fhirModels.Reference(source.holder);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["internationalBirthDate"] !== undefined) {
            this.internationalBirthDate = source.internationalBirthDate;
        }
        if (source["_internationalBirthDate"] !== undefined) {
            this._internationalBirthDate = new fhirModels.Element(source._internationalBirthDate);
        }
        if (source["jurisdiction"] !== undefined) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["jurisdictionalAuthorization"] !== undefined) {
            this.jurisdictionalAuthorization = source.jurisdictionalAuthorization.map((x) => new fhirModels.MedicinalProductAuthorizationJurisdictionalAuthorization(x));
        }
        if (source["legalBasis"] !== undefined) {
            this.legalBasis = new fhirModels.CodeableConcept(source.legalBasis);
        }
        if (source["procedure"] !== undefined) {
            this.procedure = new fhirModels.MedicinalProductAuthorizationProcedure(source.procedure);
        }
        if (source["regulator"] !== undefined) {
            this.regulator = new fhirModels.Reference(source.regulator);
        }
        if (source["restoreDate"] !== undefined) {
            this.restoreDate = source.restoreDate;
        }
        if (source["_restoreDate"] !== undefined) {
            this._restoreDate = new fhirModels.Element(source._restoreDate);
        }
        if (source["status"] !== undefined) {
            this.status = new fhirModels.CodeableConcept(source.status);
        }
        if (source["statusDate"] !== undefined) {
            this.statusDate = source.statusDate;
        }
        if (source["_statusDate"] !== undefined) {
            this._statusDate = new fhirModels.Element(source._statusDate);
        }
        if (source["subject"] !== undefined) {
            this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["validityPeriod"] !== undefined) {
            this.validityPeriod = new fhirModels.Period(source.validityPeriod);
        }
    }
}
exports.MedicinalProductAuthorization = MedicinalProductAuthorization;
//# sourceMappingURL=MedicinalProductAuthorization.js.map