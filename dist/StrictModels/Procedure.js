"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProcedureStatusEnum = exports.Procedure = exports.ProcedureFocalDevice = exports.ProcedurePerformer = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Limited to "real" people rather than equipment.
 */
class ProcedurePerformer extends fhirModels.BackboneElement {
    /**
     * Default constructor for ProcedurePerformer from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.actor = new fhirModels.Reference(source.actor);
        }
        if (source["function"] !== undefined) {
            this.function = new fhirModels.CodeableConcept(source.function);
        }
        if (source["onBehalfOf"] !== undefined) {
            this.onBehalfOf = new fhirModels.Reference(source.onBehalfOf);
        }
    }
}
exports.ProcedurePerformer = ProcedurePerformer;
/**
 * A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
 */
class ProcedureFocalDevice extends fhirModels.BackboneElement {
    /**
     * Default constructor for ProcedureFocalDevice from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["action"] !== undefined) {
            this.action = new fhirModels.CodeableConcept(source.action);
        }
        {
            this.manipulated = new fhirModels.Reference(source.manipulated);
        }
    }
}
exports.ProcedureFocalDevice = ProcedureFocalDevice;
/**
 * An action that is or was performed on or for a patient. This can be a physical intervention like an operation, or less invasive like long term services, counseling, or hypnotherapy.
 */
class Procedure extends fhirModels.DomainResource {
    /**
     * Default constructor for Procedure from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "Procedure";
        if ((source['resourceType'] !== "Procedure") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Procedure';
        }
        if (source["asserter"] !== undefined) {
            this.asserter = new fhirModels.Reference(source.asserter);
        }
        if (source["basedOn"] !== undefined) {
            this.basedOn = source.basedOn.map((x) => new fhirModels.Reference(x));
        }
        if (source["bodySite"] !== undefined) {
            this.bodySite = source.bodySite.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["category"] !== undefined) {
            this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["complication"] !== undefined) {
            this.complication = source.complication.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["complicationDetail"] !== undefined) {
            this.complicationDetail = source.complicationDetail.map((x) => new fhirModels.Reference(x));
        }
        if (source["encounter"] !== undefined) {
            this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["focalDevice"] !== undefined) {
            this.focalDevice = source.focalDevice.map((x) => new fhirModels.ProcedureFocalDevice(x));
        }
        if (source["followUp"] !== undefined) {
            this.followUp = source.followUp.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["instantiatesCanonical"] !== undefined) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => (x));
        }
        if (source["_instantiatesCanonical"] !== undefined) {
            this._instantiatesCanonical = source._instantiatesCanonical.map((x) => new fhirModels.Element(x));
        }
        if (source["instantiatesUri"] !== undefined) {
            this.instantiatesUri = source.instantiatesUri.map((x) => (x));
        }
        if (source["_instantiatesUri"] !== undefined) {
            this._instantiatesUri = source._instantiatesUri.map((x) => new fhirModels.Element(x));
        }
        if (source["location"] !== undefined) {
            this.location = new fhirModels.Reference(source.location);
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["outcome"] !== undefined) {
            this.outcome = new fhirModels.CodeableConcept(source.outcome);
        }
        if (source["partOf"] !== undefined) {
            this.partOf = source.partOf.map((x) => new fhirModels.Reference(x));
        }
        if (source["performedDateTime"] !== undefined) {
            this.performedDateTime = source.performedDateTime;
        }
        if (source["_performedDateTime"] !== undefined) {
            this._performedDateTime = new fhirModels.Element(source._performedDateTime);
        }
        if (source["performedPeriod"] !== undefined) {
            this.performedPeriod = new fhirModels.Period(source.performedPeriod);
        }
        if (source["performedString"] !== undefined) {
            this.performedString = source.performedString;
        }
        if (source["_performedString"] !== undefined) {
            this._performedString = new fhirModels.Element(source._performedString);
        }
        if (source["performedAge"] !== undefined) {
            this.performedAge = new fhirModels.Age(source.performedAge);
        }
        if (source["performedRange"] !== undefined) {
            this.performedRange = new fhirModels.Range(source.performedRange);
        }
        if (source["performer"] !== undefined) {
            this.performer = source.performer.map((x) => new fhirModels.ProcedurePerformer(x));
        }
        if (source["reasonCode"] !== undefined) {
            this.reasonCode = source.reasonCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["reasonReference"] !== undefined) {
            this.reasonReference = source.reasonReference.map((x) => new fhirModels.Reference(x));
        }
        if (source["recorder"] !== undefined) {
            this.recorder = new fhirModels.Reference(source.recorder);
        }
        if (source["report"] !== undefined) {
            this.report = source.report.map((x) => new fhirModels.Reference(x));
        }
        {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["statusReason"] !== undefined) {
            this.statusReason = new fhirModels.CodeableConcept(source.statusReason);
        }
        {
            this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["usedCode"] !== undefined) {
            this.usedCode = source.usedCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["usedReference"] !== undefined) {
            this.usedReference = source.usedReference.map((x) => new fhirModels.Reference(x));
        }
    }
}
exports.Procedure = Procedure;
/**
 * Code Values for the Procedure.status field
 */
var ProcedureStatusEnum;
(function (ProcedureStatusEnum) {
    ProcedureStatusEnum["PREPARATION"] = "preparation";
    ProcedureStatusEnum["IN_PROGRESS"] = "in-progress";
    ProcedureStatusEnum["NOT_DONE"] = "not-done";
    ProcedureStatusEnum["ON_HOLD"] = "on-hold";
    ProcedureStatusEnum["STOPPED"] = "stopped";
    ProcedureStatusEnum["COMPLETED"] = "completed";
    ProcedureStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    ProcedureStatusEnum["UNKNOWN"] = "unknown";
})(ProcedureStatusEnum = exports.ProcedureStatusEnum || (exports.ProcedureStatusEnum = {}));
//# sourceMappingURL=Procedure.js.map