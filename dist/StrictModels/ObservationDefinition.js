"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservationDefinitionPermittedDataTypeEnum = exports.ObservationDefinition = exports.ObservationDefinitionQualifiedIntervalGenderEnum = exports.ObservationDefinitionQualifiedIntervalCategoryEnum = exports.ObservationDefinitionQualifiedInterval = exports.ObservationDefinitionQuantitativeDetails = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Characteristics for quantitative results of this observation.
 */
class ObservationDefinitionQuantitativeDetails extends fhirModels.BackboneElement {
    /**
     * Default constructor for ObservationDefinitionQuantitativeDetails from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["conversionFactor"] !== undefined) {
            this.conversionFactor = source.conversionFactor;
        }
        if (source["_conversionFactor"] !== undefined) {
            this._conversionFactor = new fhirModels.Element(source._conversionFactor);
        }
        if (source["customaryUnit"] !== undefined) {
            this.customaryUnit = new fhirModels.CodeableConcept(source.customaryUnit);
        }
        if (source["decimalPrecision"] !== undefined) {
            this.decimalPrecision = source.decimalPrecision;
        }
        if (source["_decimalPrecision"] !== undefined) {
            this._decimalPrecision = new fhirModels.Element(source._decimalPrecision);
        }
        if (source["unit"] !== undefined) {
            this.unit = new fhirModels.CodeableConcept(source.unit);
        }
    }
}
exports.ObservationDefinitionQuantitativeDetails = ObservationDefinitionQuantitativeDetails;
/**
 * Multiple  ranges of results qualified by different contexts for ordinal or continuous observations conforming to this ObservationDefinition.
 */
class ObservationDefinitionQualifiedInterval extends fhirModels.BackboneElement {
    /**
     * Default constructor for ObservationDefinitionQualifiedInterval from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["age"] !== undefined) {
            this.age = new fhirModels.Range(source.age);
        }
        if (source["appliesTo"] !== undefined) {
            this.appliesTo = source.appliesTo.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["category"] !== undefined) {
            this.category = source.category;
        }
        if (source["_category"] !== undefined) {
            this._category = new fhirModels.Element(source._category);
        }
        if (source["condition"] !== undefined) {
            this.condition = source.condition;
        }
        if (source["_condition"] !== undefined) {
            this._condition = new fhirModels.Element(source._condition);
        }
        if (source["context"] !== undefined) {
            this.context = new fhirModels.CodeableConcept(source.context);
        }
        if (source["gender"] !== undefined) {
            this.gender = source.gender;
        }
        if (source["_gender"] !== undefined) {
            this._gender = new fhirModels.Element(source._gender);
        }
        if (source["gestationalAge"] !== undefined) {
            this.gestationalAge = new fhirModels.Range(source.gestationalAge);
        }
        if (source["range"] !== undefined) {
            this.range = new fhirModels.Range(source.range);
        }
    }
}
exports.ObservationDefinitionQualifiedInterval = ObservationDefinitionQualifiedInterval;
/**
 * Code Values for the ObservationDefinition.qualifiedInterval.category field
 */
var ObservationDefinitionQualifiedIntervalCategoryEnum;
(function (ObservationDefinitionQualifiedIntervalCategoryEnum) {
    ObservationDefinitionQualifiedIntervalCategoryEnum["REFERENCE"] = "reference";
    ObservationDefinitionQualifiedIntervalCategoryEnum["CRITICAL"] = "critical";
    ObservationDefinitionQualifiedIntervalCategoryEnum["ABSOLUTE"] = "absolute";
})(ObservationDefinitionQualifiedIntervalCategoryEnum = exports.ObservationDefinitionQualifiedIntervalCategoryEnum || (exports.ObservationDefinitionQualifiedIntervalCategoryEnum = {}));
/**
 * Code Values for the ObservationDefinition.qualifiedInterval.gender field
 */
var ObservationDefinitionQualifiedIntervalGenderEnum;
(function (ObservationDefinitionQualifiedIntervalGenderEnum) {
    ObservationDefinitionQualifiedIntervalGenderEnum["MALE"] = "male";
    ObservationDefinitionQualifiedIntervalGenderEnum["FEMALE"] = "female";
    ObservationDefinitionQualifiedIntervalGenderEnum["OTHER"] = "other";
    ObservationDefinitionQualifiedIntervalGenderEnum["UNKNOWN"] = "unknown";
})(ObservationDefinitionQualifiedIntervalGenderEnum = exports.ObservationDefinitionQualifiedIntervalGenderEnum || (exports.ObservationDefinitionQualifiedIntervalGenderEnum = {}));
/**
 * Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service.
 */
class ObservationDefinition extends fhirModels.DomainResource {
    /**
     * Default constructor for ObservationDefinition from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "ObservationDefinition";
        if ((source['resourceType'] !== "ObservationDefinition") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a ObservationDefinition';
        }
        if (source["abnormalCodedValueSet"] !== undefined) {
            this.abnormalCodedValueSet = new fhirModels.Reference(source.abnormalCodedValueSet);
        }
        if (source["category"] !== undefined) {
            this.category = source.category.map((x) => new fhirModels.CodeableConcept(x));
        }
        {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["criticalCodedValueSet"] !== undefined) {
            this.criticalCodedValueSet = new fhirModels.Reference(source.criticalCodedValueSet);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["method"] !== undefined) {
            this.method = new fhirModels.CodeableConcept(source.method);
        }
        if (source["multipleResultsAllowed"] !== undefined) {
            this.multipleResultsAllowed = source.multipleResultsAllowed;
        }
        if (source["_multipleResultsAllowed"] !== undefined) {
            this._multipleResultsAllowed = new fhirModels.Element(source._multipleResultsAllowed);
        }
        if (source["normalCodedValueSet"] !== undefined) {
            this.normalCodedValueSet = new fhirModels.Reference(source.normalCodedValueSet);
        }
        if (source["permittedDataType"] !== undefined) {
            this.permittedDataType = source.permittedDataType.map((x) => (x));
        }
        if (source["_permittedDataType"] !== undefined) {
            this._permittedDataType = source._permittedDataType.map((x) => new fhirModels.Element(x));
        }
        if (source["preferredReportName"] !== undefined) {
            this.preferredReportName = source.preferredReportName;
        }
        if (source["_preferredReportName"] !== undefined) {
            this._preferredReportName = new fhirModels.Element(source._preferredReportName);
        }
        if (source["qualifiedInterval"] !== undefined) {
            this.qualifiedInterval = source.qualifiedInterval.map((x) => new fhirModels.ObservationDefinitionQualifiedInterval(x));
        }
        if (source["quantitativeDetails"] !== undefined) {
            this.quantitativeDetails = new fhirModels.ObservationDefinitionQuantitativeDetails(source.quantitativeDetails);
        }
        if (source["validCodedValueSet"] !== undefined) {
            this.validCodedValueSet = new fhirModels.Reference(source.validCodedValueSet);
        }
    }
}
exports.ObservationDefinition = ObservationDefinition;
/**
 * Code Values for the ObservationDefinition.permittedDataType field
 */
var ObservationDefinitionPermittedDataTypeEnum;
(function (ObservationDefinitionPermittedDataTypeEnum) {
    ObservationDefinitionPermittedDataTypeEnum["QUANTITY"] = "Quantity";
    ObservationDefinitionPermittedDataTypeEnum["CODEABLECONCEPT"] = "CodeableConcept";
    ObservationDefinitionPermittedDataTypeEnum["STRING"] = "string";
    ObservationDefinitionPermittedDataTypeEnum["BOOLEAN"] = "boolean";
    ObservationDefinitionPermittedDataTypeEnum["INTEGER"] = "integer";
    ObservationDefinitionPermittedDataTypeEnum["RANGE"] = "Range";
    ObservationDefinitionPermittedDataTypeEnum["RATIO"] = "Ratio";
    ObservationDefinitionPermittedDataTypeEnum["SAMPLEDDATA"] = "SampledData";
    ObservationDefinitionPermittedDataTypeEnum["TIME"] = "time";
    ObservationDefinitionPermittedDataTypeEnum["DATETIME"] = "dateTime";
    ObservationDefinitionPermittedDataTypeEnum["PERIOD"] = "Period";
})(ObservationDefinitionPermittedDataTypeEnum = exports.ObservationDefinitionPermittedDataTypeEnum || (exports.ObservationDefinitionPermittedDataTypeEnum = {}));
//# sourceMappingURL=ObservationDefinition.js.map