"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubstanceAmount = exports.SubstanceAmountReferenceRange = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Reference range of possible or expected values.
 */
class SubstanceAmountReferenceRange extends fhirModels.Element {
    /**
     * Default constructor for SubstanceAmountReferenceRange from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["highLimit"] !== undefined) {
            this.highLimit = new fhirModels.Quantity(source.highLimit);
        }
        if (source["lowLimit"] !== undefined) {
            this.lowLimit = new fhirModels.Quantity(source.lowLimit);
        }
    }
}
exports.SubstanceAmountReferenceRange = SubstanceAmountReferenceRange;
/**
 * Chemical substances are a single substance type whose primary defining element is the molecular structure. Chemical substances shall be defined on the basis of their complete covalent molecular structure; the presence of a salt (counter-ion) and/or solvates (water, alcohols) is also captured. Purity, grade, physical form or particle size are not taken into account in the definition of a chemical substance or in the assignment of a Substance ID.
 */
class SubstanceAmount extends fhirModels.BackboneElement {
    /**
     * Default constructor for SubstanceAmount from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["amountQuantity"] !== undefined) {
            this.amountQuantity = new fhirModels.Quantity(source.amountQuantity);
        }
        if (source["amountRange"] !== undefined) {
            this.amountRange = new fhirModels.Range(source.amountRange);
        }
        if (source["amountString"] !== undefined) {
            this.amountString = source.amountString;
        }
        if (source["_amountString"] !== undefined) {
            this._amountString = new fhirModels.Element(source._amountString);
        }
        if (source["amountText"] !== undefined) {
            this.amountText = source.amountText;
        }
        if (source["_amountText"] !== undefined) {
            this._amountText = new fhirModels.Element(source._amountText);
        }
        if (source["amountType"] !== undefined) {
            this.amountType = new fhirModels.CodeableConcept(source.amountType);
        }
        if (source["referenceRange"] !== undefined) {
            this.referenceRange = new fhirModels.SubstanceAmountReferenceRange(source.referenceRange);
        }
    }
}
exports.SubstanceAmount = SubstanceAmount;
//# sourceMappingURL=SubstanceAmount.js.map