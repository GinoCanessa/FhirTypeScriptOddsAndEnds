"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeviceDefinition = exports.DeviceDefinitionMaterial = exports.DeviceDefinitionProperty = exports.DeviceDefinitionCapability = exports.DeviceDefinitionSpecialization = exports.DeviceDefinitionDeviceNameTypeEnum = exports.DeviceDefinitionDeviceName = exports.DeviceDefinitionUdiDeviceIdentifier = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
 */
class DeviceDefinitionUdiDeviceIdentifier extends fhirModels.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionUdiDeviceIdentifier from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.deviceIdentifier = source.deviceIdentifier;
        }
        if (source["_deviceIdentifier"] !== undefined) {
            this._deviceIdentifier = new fhirModels.Element(source._deviceIdentifier);
        }
        {
            this.issuer = source.issuer;
        }
        if (source["_issuer"] !== undefined) {
            this._issuer = new fhirModels.Element(source._issuer);
        }
        {
            this.jurisdiction = source.jurisdiction;
        }
        if (source["_jurisdiction"] !== undefined) {
            this._jurisdiction = new fhirModels.Element(source._jurisdiction);
        }
    }
}
exports.DeviceDefinitionUdiDeviceIdentifier = DeviceDefinitionUdiDeviceIdentifier;
/**
 * A name given to the device to identify it.
 */
class DeviceDefinitionDeviceName extends fhirModels.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionDeviceName from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
    }
}
exports.DeviceDefinitionDeviceName = DeviceDefinitionDeviceName;
/**
 * Code Values for the DeviceDefinition.deviceName.type field
 */
var DeviceDefinitionDeviceNameTypeEnum;
(function (DeviceDefinitionDeviceNameTypeEnum) {
    DeviceDefinitionDeviceNameTypeEnum["UDI_LABEL_NAME"] = "udi-label-name";
    DeviceDefinitionDeviceNameTypeEnum["USER_FRIENDLY_NAME"] = "user-friendly-name";
    DeviceDefinitionDeviceNameTypeEnum["PATIENT_REPORTED_NAME"] = "patient-reported-name";
    DeviceDefinitionDeviceNameTypeEnum["MANUFACTURER_NAME"] = "manufacturer-name";
    DeviceDefinitionDeviceNameTypeEnum["MODEL_NAME"] = "model-name";
    DeviceDefinitionDeviceNameTypeEnum["OTHER"] = "other";
})(DeviceDefinitionDeviceNameTypeEnum = exports.DeviceDefinitionDeviceNameTypeEnum || (exports.DeviceDefinitionDeviceNameTypeEnum = {}));
/**
 * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
 */
class DeviceDefinitionSpecialization extends fhirModels.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionSpecialization from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.systemType = source.systemType;
        }
        if (source["_systemType"] !== undefined) {
            this._systemType = new fhirModels.Element(source._systemType);
        }
        if (source["version"] !== undefined) {
            this.version = source.version;
        }
        if (source["_version"] !== undefined) {
            this._version = new fhirModels.Element(source._version);
        }
    }
}
exports.DeviceDefinitionSpecialization = DeviceDefinitionSpecialization;
/**
 * Device capabilities.
 */
class DeviceDefinitionCapability extends fhirModels.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionCapability from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["description"] !== undefined) {
            this.description = source.description.map((x) => new fhirModels.CodeableConcept(x));
        }
        {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.DeviceDefinitionCapability = DeviceDefinitionCapability;
/**
 * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
 */
class DeviceDefinitionProperty extends fhirModels.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionProperty from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["valueCode"] !== undefined) {
            this.valueCode = source.valueCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["valueQuantity"] !== undefined) {
            this.valueQuantity = source.valueQuantity.map((x) => new fhirModels.Quantity(x));
        }
    }
}
exports.DeviceDefinitionProperty = DeviceDefinitionProperty;
/**
 * A substance used to create the material(s) of which the device is made.
 */
class DeviceDefinitionMaterial extends fhirModels.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionMaterial from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["allergenicIndicator"] !== undefined) {
            this.allergenicIndicator = source.allergenicIndicator;
        }
        if (source["_allergenicIndicator"] !== undefined) {
            this._allergenicIndicator = new fhirModels.Element(source._allergenicIndicator);
        }
        if (source["alternate"] !== undefined) {
            this.alternate = source.alternate;
        }
        if (source["_alternate"] !== undefined) {
            this._alternate = new fhirModels.Element(source._alternate);
        }
        {
            this.substance = new fhirModels.CodeableConcept(source.substance);
        }
    }
}
exports.DeviceDefinitionMaterial = DeviceDefinitionMaterial;
/**
 * The characteristics, operational status and capabilities of a medical-related component of a medical device.
 */
class DeviceDefinition extends fhirModels.DomainResource {
    /**
     * Default constructor for DeviceDefinition from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "DeviceDefinition";
        if ((source['resourceType'] !== "DeviceDefinition") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a DeviceDefinition';
        }
        if (source["capability"] !== undefined) {
            this.capability = source.capability.map((x) => new fhirModels.DeviceDefinitionCapability(x));
        }
        if (source["contact"] !== undefined) {
            this.contact = source.contact.map((x) => new fhirModels.ContactPoint(x));
        }
        if (source["deviceName"] !== undefined) {
            this.deviceName = source.deviceName.map((x) => new fhirModels.DeviceDefinitionDeviceName(x));
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["languageCode"] !== undefined) {
            this.languageCode = source.languageCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["manufacturerString"] !== undefined) {
            this.manufacturerString = source.manufacturerString;
        }
        if (source["_manufacturerString"] !== undefined) {
            this._manufacturerString = new fhirModels.Element(source._manufacturerString);
        }
        if (source["manufacturerReference"] !== undefined) {
            this.manufacturerReference = new fhirModels.Reference(source.manufacturerReference);
        }
        if (source["material"] !== undefined) {
            this.material = source.material.map((x) => new fhirModels.DeviceDefinitionMaterial(x));
        }
        if (source["modelNumber"] !== undefined) {
            this.modelNumber = source.modelNumber;
        }
        if (source["_modelNumber"] !== undefined) {
            this._modelNumber = new fhirModels.Element(source._modelNumber);
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["onlineInformation"] !== undefined) {
            this.onlineInformation = source.onlineInformation;
        }
        if (source["_onlineInformation"] !== undefined) {
            this._onlineInformation = new fhirModels.Element(source._onlineInformation);
        }
        if (source["owner"] !== undefined) {
            this.owner = new fhirModels.Reference(source.owner);
        }
        if (source["parentDevice"] !== undefined) {
            this.parentDevice = new fhirModels.Reference(source.parentDevice);
        }
        if (source["physicalCharacteristics"] !== undefined) {
            this.physicalCharacteristics = new fhirModels.ProdCharacteristic(source.physicalCharacteristics);
        }
        if (source["property"] !== undefined) {
            this.property = source.property.map((x) => new fhirModels.DeviceDefinitionProperty(x));
        }
        if (source["quantity"] !== undefined) {
            this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["safety"] !== undefined) {
            this.safety = source.safety.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["shelfLifeStorage"] !== undefined) {
            this.shelfLifeStorage = source.shelfLifeStorage.map((x) => new fhirModels.ProductShelfLife(x));
        }
        if (source["specialization"] !== undefined) {
            this.specialization = source.specialization.map((x) => new fhirModels.DeviceDefinitionSpecialization(x));
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["udiDeviceIdentifier"] !== undefined) {
            this.udiDeviceIdentifier = source.udiDeviceIdentifier.map((x) => new fhirModels.DeviceDefinitionUdiDeviceIdentifier(x));
        }
        if (source["url"] !== undefined) {
            this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            this._url = new fhirModels.Element(source._url);
        }
        if (source["version"] !== undefined) {
            this.version = source.version.map((x) => (x));
        }
        if (source["_version"] !== undefined) {
            this._version = source._version.map((x) => new fhirModels.Element(x));
        }
    }
}
exports.DeviceDefinition = DeviceDefinition;
//# sourceMappingURL=DeviceDefinition.js.map