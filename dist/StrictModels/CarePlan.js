"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CarePlanStatusEnum = exports.CarePlanIntentEnum = exports.CarePlan = exports.CarePlanActivity = exports.CarePlanActivityDetailStatusEnum = exports.CarePlanActivityDetailKindEnum = exports.CarePlanActivityDetail = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * A simple summary of a planned activity suitable for a general care plan system (e.g. form driven) that doesn't know about specific resources such as procedure etc.
 */
class CarePlanActivityDetail extends fhirModels.BackboneElement {
    /**
     * Default constructor for CarePlanActivityDetail from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["dailyAmount"] !== undefined) {
            this.dailyAmount = new fhirModels.Quantity(source.dailyAmount);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["doNotPerform"] !== undefined) {
            this.doNotPerform = source.doNotPerform;
        }
        if (source["_doNotPerform"] !== undefined) {
            this._doNotPerform = new fhirModels.Element(source._doNotPerform);
        }
        if (source["goal"] !== undefined) {
            this.goal = source.goal.map((x) => new fhirModels.Reference(x));
        }
        if (source["instantiatesCanonical"] !== undefined) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => (x));
        }
        if (source["_instantiatesCanonical"] !== undefined) {
            this._instantiatesCanonical = source._instantiatesCanonical.map((x) => new fhirModels.Element(x));
        }
        if (source["instantiatesUri"] !== undefined) {
            this.instantiatesUri = source.instantiatesUri.map((x) => (x));
        }
        if (source["_instantiatesUri"] !== undefined) {
            this._instantiatesUri = source._instantiatesUri.map((x) => new fhirModels.Element(x));
        }
        if (source["kind"] !== undefined) {
            this.kind = source.kind;
        }
        if (source["_kind"] !== undefined) {
            this._kind = new fhirModels.Element(source._kind);
        }
        if (source["location"] !== undefined) {
            this.location = new fhirModels.Reference(source.location);
        }
        if (source["performer"] !== undefined) {
            this.performer = source.performer.map((x) => new fhirModels.Reference(x));
        }
        if (source["productCodeableConcept"] !== undefined) {
            this.productCodeableConcept = new fhirModels.CodeableConcept(source.productCodeableConcept);
        }
        if (source["productReference"] !== undefined) {
            this.productReference = new fhirModels.Reference(source.productReference);
        }
        if (source["quantity"] !== undefined) {
            this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["reasonCode"] !== undefined) {
            this.reasonCode = source.reasonCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["reasonReference"] !== undefined) {
            this.reasonReference = source.reasonReference.map((x) => new fhirModels.Reference(x));
        }
        if (source["scheduledTiming"] !== undefined) {
            this.scheduledTiming = new fhirModels.Timing(source.scheduledTiming);
        }
        if (source["scheduledPeriod"] !== undefined) {
            this.scheduledPeriod = new fhirModels.Period(source.scheduledPeriod);
        }
        if (source["scheduledString"] !== undefined) {
            this.scheduledString = source.scheduledString;
        }
        if (source["_scheduledString"] !== undefined) {
            this._scheduledString = new fhirModels.Element(source._scheduledString);
        }
        {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["statusReason"] !== undefined) {
            this.statusReason = new fhirModels.CodeableConcept(source.statusReason);
        }
    }
}
exports.CarePlanActivityDetail = CarePlanActivityDetail;
/**
 * Code Values for the CarePlan.activity.detail.kind field
 */
var CarePlanActivityDetailKindEnum;
(function (CarePlanActivityDetailKindEnum) {
    CarePlanActivityDetailKindEnum["APPOINTMENT"] = "Appointment";
    CarePlanActivityDetailKindEnum["COMMUNICATIONREQUEST"] = "CommunicationRequest";
    CarePlanActivityDetailKindEnum["DEVICEREQUEST"] = "DeviceRequest";
    CarePlanActivityDetailKindEnum["MEDICATIONREQUEST"] = "MedicationRequest";
    CarePlanActivityDetailKindEnum["NUTRITIONORDER"] = "NutritionOrder";
    CarePlanActivityDetailKindEnum["TASK"] = "Task";
    CarePlanActivityDetailKindEnum["SERVICEREQUEST"] = "ServiceRequest";
    CarePlanActivityDetailKindEnum["VISIONPRESCRIPTION"] = "VisionPrescription";
})(CarePlanActivityDetailKindEnum = exports.CarePlanActivityDetailKindEnum || (exports.CarePlanActivityDetailKindEnum = {}));
/**
 * Code Values for the CarePlan.activity.detail.status field
 */
var CarePlanActivityDetailStatusEnum;
(function (CarePlanActivityDetailStatusEnum) {
    CarePlanActivityDetailStatusEnum["NOT_STARTED"] = "not-started";
    CarePlanActivityDetailStatusEnum["SCHEDULED"] = "scheduled";
    CarePlanActivityDetailStatusEnum["IN_PROGRESS"] = "in-progress";
    CarePlanActivityDetailStatusEnum["ON_HOLD"] = "on-hold";
    CarePlanActivityDetailStatusEnum["COMPLETED"] = "completed";
    CarePlanActivityDetailStatusEnum["CANCELLED"] = "cancelled";
    CarePlanActivityDetailStatusEnum["STOPPED"] = "stopped";
    CarePlanActivityDetailStatusEnum["UNKNOWN"] = "unknown";
    CarePlanActivityDetailStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(CarePlanActivityDetailStatusEnum = exports.CarePlanActivityDetailStatusEnum || (exports.CarePlanActivityDetailStatusEnum = {}));
/**
 * Identifies a planned action to occur as part of the plan.  For example, a medication to be used, lab tests to perform, self-monitoring, education, etc.
 */
class CarePlanActivity extends fhirModels.BackboneElement {
    /**
     * Default constructor for CarePlanActivity from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["detail"] !== undefined) {
            this.detail = new fhirModels.CarePlanActivityDetail(source.detail);
        }
        if (source["outcomeCodeableConcept"] !== undefined) {
            this.outcomeCodeableConcept = source.outcomeCodeableConcept.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["outcomeReference"] !== undefined) {
            this.outcomeReference = source.outcomeReference.map((x) => new fhirModels.Reference(x));
        }
        if (source["progress"] !== undefined) {
            this.progress = source.progress.map((x) => new fhirModels.Annotation(x));
        }
        if (source["reference"] !== undefined) {
            this.reference = new fhirModels.Reference(source.reference);
        }
    }
}
exports.CarePlanActivity = CarePlanActivity;
/**
 * Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
 */
class CarePlan extends fhirModels.DomainResource {
    /**
     * Default constructor for CarePlan from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "CarePlan";
        if ((source['resourceType'] !== "CarePlan") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a CarePlan';
        }
        if (source["activity"] !== undefined) {
            this.activity = source.activity.map((x) => new fhirModels.CarePlanActivity(x));
        }
        if (source["addresses"] !== undefined) {
            this.addresses = source.addresses.map((x) => new fhirModels.Reference(x));
        }
        if (source["author"] !== undefined) {
            this.author = new fhirModels.Reference(source.author);
        }
        if (source["basedOn"] !== undefined) {
            this.basedOn = source.basedOn.map((x) => new fhirModels.Reference(x));
        }
        if (source["careTeam"] !== undefined) {
            this.careTeam = source.careTeam.map((x) => new fhirModels.Reference(x));
        }
        if (source["category"] !== undefined) {
            this.category = source.category.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["contributor"] !== undefined) {
            this.contributor = source.contributor.map((x) => new fhirModels.Reference(x));
        }
        if (source["created"] !== undefined) {
            this.created = source.created;
        }
        if (source["_created"] !== undefined) {
            this._created = new fhirModels.Element(source._created);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["encounter"] !== undefined) {
            this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["goal"] !== undefined) {
            this.goal = source.goal.map((x) => new fhirModels.Reference(x));
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["instantiatesCanonical"] !== undefined) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => (x));
        }
        if (source["_instantiatesCanonical"] !== undefined) {
            this._instantiatesCanonical = source._instantiatesCanonical.map((x) => new fhirModels.Element(x));
        }
        if (source["instantiatesUri"] !== undefined) {
            this.instantiatesUri = source.instantiatesUri.map((x) => (x));
        }
        if (source["_instantiatesUri"] !== undefined) {
            this._instantiatesUri = source._instantiatesUri.map((x) => new fhirModels.Element(x));
        }
        {
            this.intent = source.intent;
        }
        if (source["_intent"] !== undefined) {
            this._intent = new fhirModels.Element(source._intent);
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["partOf"] !== undefined) {
            this.partOf = source.partOf.map((x) => new fhirModels.Reference(x));
        }
        if (source["period"] !== undefined) {
            this.period = new fhirModels.Period(source.period);
        }
        if (source["replaces"] !== undefined) {
            this.replaces = source.replaces.map((x) => new fhirModels.Reference(x));
        }
        {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        {
            this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["supportingInfo"] !== undefined) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhirModels.Reference(x));
        }
        if (source["title"] !== undefined) {
            this.title = source.title;
        }
        if (source["_title"] !== undefined) {
            this._title = new fhirModels.Element(source._title);
        }
    }
}
exports.CarePlan = CarePlan;
/**
 * Code Values for the CarePlan.intent field
 */
var CarePlanIntentEnum;
(function (CarePlanIntentEnum) {
    CarePlanIntentEnum["PROPOSAL"] = "proposal";
    CarePlanIntentEnum["PLAN"] = "plan";
    CarePlanIntentEnum["ORDER"] = "order";
    CarePlanIntentEnum["OPTION"] = "option";
})(CarePlanIntentEnum = exports.CarePlanIntentEnum || (exports.CarePlanIntentEnum = {}));
/**
 * Code Values for the CarePlan.status field
 */
var CarePlanStatusEnum;
(function (CarePlanStatusEnum) {
    CarePlanStatusEnum["DRAFT"] = "draft";
    CarePlanStatusEnum["ACTIVE"] = "active";
    CarePlanStatusEnum["ON_HOLD"] = "on-hold";
    CarePlanStatusEnum["REVOKED"] = "revoked";
    CarePlanStatusEnum["COMPLETED"] = "completed";
    CarePlanStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    CarePlanStatusEnum["UNKNOWN"] = "unknown";
})(CarePlanStatusEnum = exports.CarePlanStatusEnum || (exports.CarePlanStatusEnum = {}));
//# sourceMappingURL=CarePlan.js.map