"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MedicationKnowledgeStatusEnum = exports.MedicationKnowledge = exports.MedicationKnowledgeKinetics = exports.MedicationKnowledgeRegulatory = exports.MedicationKnowledgeRegulatoryMaxDispense = exports.MedicationKnowledgeRegulatorySchedule = exports.MedicationKnowledgeRegulatorySubstitution = exports.MedicationKnowledgeDrugCharacteristic = exports.MedicationKnowledgePackaging = exports.MedicationKnowledgeMedicineClassification = exports.MedicationKnowledgeAdministrationGuidelines = exports.MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics = exports.MedicationKnowledgeAdministrationGuidelinesDosage = exports.MedicationKnowledgeMonitoringProgram = exports.MedicationKnowledgeCost = exports.MedicationKnowledgeIngredient = exports.MedicationKnowledgeMonograph = exports.MedicationKnowledgeRelatedMedicationKnowledge = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Associated or related knowledge about a medication.
 */
class MedicationKnowledgeRelatedMedicationKnowledge extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRelatedMedicationKnowledge from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.reference = source.reference.map((x) => new fhirModels.Reference(x));
        }
        {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.MedicationKnowledgeRelatedMedicationKnowledge = MedicationKnowledgeRelatedMedicationKnowledge;
/**
 * Associated documentation about the medication.
 */
class MedicationKnowledgeMonograph extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeMonograph from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["source"] !== undefined) {
            this.source = new fhirModels.Reference(source.source);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.MedicationKnowledgeMonograph = MedicationKnowledgeMonograph;
/**
 * Identifies a particular constituent of interest in the product.
 */
class MedicationKnowledgeIngredient extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeIngredient from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["isActive"] !== undefined) {
            this.isActive = source.isActive;
        }
        if (source["_isActive"] !== undefined) {
            this._isActive = new fhirModels.Element(source._isActive);
        }
        if (source["itemCodeableConcept"] !== undefined) {
            this.itemCodeableConcept = new fhirModels.CodeableConcept(source.itemCodeableConcept);
        }
        if (source["itemReference"] !== undefined) {
            this.itemReference = new fhirModels.Reference(source.itemReference);
        }
        if (source["strength"] !== undefined) {
            this.strength = new fhirModels.Ratio(source.strength);
        }
    }
}
exports.MedicationKnowledgeIngredient = MedicationKnowledgeIngredient;
/**
 * The price of the medication.
 */
class MedicationKnowledgeCost extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeCost from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.cost = new fhirModels.Money(source.cost);
        }
        if (source["source"] !== undefined) {
            this.source = source.source;
        }
        if (source["_source"] !== undefined) {
            this._source = new fhirModels.Element(source._source);
        }
        {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.MedicationKnowledgeCost = MedicationKnowledgeCost;
/**
 * The program under which the medication is reviewed.
 */
class MedicationKnowledgeMonitoringProgram extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeMonitoringProgram from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.MedicationKnowledgeMonitoringProgram = MedicationKnowledgeMonitoringProgram;
/**
 * Dosage for the medication for the specific guidelines.
 */
class MedicationKnowledgeAdministrationGuidelinesDosage extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeAdministrationGuidelinesDosage from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.dosage = source.dosage.map((x) => new fhirModels.Dosage(x));
        }
        {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.MedicationKnowledgeAdministrationGuidelinesDosage = MedicationKnowledgeAdministrationGuidelinesDosage;
/**
 * Characteristics of the patient that are relevant to the administration guidelines (for example, height, weight, gender, etc.).
 */
class MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["characteristicCodeableConcept"] !== undefined) {
            this.characteristicCodeableConcept = new fhirModels.CodeableConcept(source.characteristicCodeableConcept);
        }
        if (source["characteristicQuantity"] !== undefined) {
            this.characteristicQuantity = new fhirModels.Quantity(source.characteristicQuantity);
        }
        if (source["value"] !== undefined) {
            this.value = source.value.map((x) => (x));
        }
        if (source["_value"] !== undefined) {
            this._value = source._value.map((x) => new fhirModels.Element(x));
        }
    }
}
exports.MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics = MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics;
/**
 * Guidelines for the administration of the medication.
 */
class MedicationKnowledgeAdministrationGuidelines extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeAdministrationGuidelines from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["dosage"] !== undefined) {
            this.dosage = source.dosage.map((x) => new fhirModels.MedicationKnowledgeAdministrationGuidelinesDosage(x));
        }
        if (source["indicationCodeableConcept"] !== undefined) {
            this.indicationCodeableConcept = new fhirModels.CodeableConcept(source.indicationCodeableConcept);
        }
        if (source["indicationReference"] !== undefined) {
            this.indicationReference = new fhirModels.Reference(source.indicationReference);
        }
        if (source["patientCharacteristics"] !== undefined) {
            this.patientCharacteristics = source.patientCharacteristics.map((x) => new fhirModels.MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(x));
        }
    }
}
exports.MedicationKnowledgeAdministrationGuidelines = MedicationKnowledgeAdministrationGuidelines;
/**
 * Categorization of the medication within a formulary or classification system.
 */
class MedicationKnowledgeMedicineClassification extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeMedicineClassification from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["classification"] !== undefined) {
            this.classification = source.classification.map((x) => new fhirModels.CodeableConcept(x));
        }
        {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.MedicationKnowledgeMedicineClassification = MedicationKnowledgeMedicineClassification;
/**
 * Information that only applies to packages (not products).
 */
class MedicationKnowledgePackaging extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgePackaging from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["quantity"] !== undefined) {
            this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.MedicationKnowledgePackaging = MedicationKnowledgePackaging;
/**
 * Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.
 */
class MedicationKnowledgeDrugCharacteristic extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeDrugCharacteristic from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["valueCodeableConcept"] !== undefined) {
            this.valueCodeableConcept = new fhirModels.CodeableConcept(source.valueCodeableConcept);
        }
        if (source["valueString"] !== undefined) {
            this.valueString = source.valueString;
        }
        if (source["_valueString"] !== undefined) {
            this._valueString = new fhirModels.Element(source._valueString);
        }
        if (source["valueQuantity"] !== undefined) {
            this.valueQuantity = new fhirModels.Quantity(source.valueQuantity);
        }
        if (source["valueBase64Binary"] !== undefined) {
            this.valueBase64Binary = source.valueBase64Binary;
        }
        if (source["_valueBase64Binary"] !== undefined) {
            this._valueBase64Binary = new fhirModels.Element(source._valueBase64Binary);
        }
    }
}
exports.MedicationKnowledgeDrugCharacteristic = MedicationKnowledgeDrugCharacteristic;
/**
 * Specifies if changes are allowed when dispensing a medication from a regulatory perspective.
 */
class MedicationKnowledgeRegulatorySubstitution extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRegulatorySubstitution from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.allowed = source.allowed;
        }
        if (source["_allowed"] !== undefined) {
            this._allowed = new fhirModels.Element(source._allowed);
        }
        {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.MedicationKnowledgeRegulatorySubstitution = MedicationKnowledgeRegulatorySubstitution;
/**
 * Specifies the schedule of a medication in jurisdiction.
 */
class MedicationKnowledgeRegulatorySchedule extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRegulatorySchedule from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.schedule = new fhirModels.CodeableConcept(source.schedule);
        }
    }
}
exports.MedicationKnowledgeRegulatorySchedule = MedicationKnowledgeRegulatorySchedule;
/**
 * The maximum number of units of the medication that can be dispensed in a period.
 */
class MedicationKnowledgeRegulatoryMaxDispense extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRegulatoryMaxDispense from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["period"] !== undefined) {
            this.period = new fhirModels.Duration(source.period);
        }
        {
            this.quantity = new fhirModels.Quantity(source.quantity);
        }
    }
}
exports.MedicationKnowledgeRegulatoryMaxDispense = MedicationKnowledgeRegulatoryMaxDispense;
/**
 * Regulatory information about a medication.
 */
class MedicationKnowledgeRegulatory extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRegulatory from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["maxDispense"] !== undefined) {
            this.maxDispense = new fhirModels.MedicationKnowledgeRegulatoryMaxDispense(source.maxDispense);
        }
        {
            this.regulatoryAuthority = new fhirModels.Reference(source.regulatoryAuthority);
        }
        if (source["schedule"] !== undefined) {
            this.schedule = source.schedule.map((x) => new fhirModels.MedicationKnowledgeRegulatorySchedule(x));
        }
        if (source["substitution"] !== undefined) {
            this.substitution = source.substitution.map((x) => new fhirModels.MedicationKnowledgeRegulatorySubstitution(x));
        }
    }
}
exports.MedicationKnowledgeRegulatory = MedicationKnowledgeRegulatory;
/**
 * The time course of drug absorption, distribution, metabolism and excretion of a medication from the body.
 */
class MedicationKnowledgeKinetics extends fhirModels.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeKinetics from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["areaUnderCurve"] !== undefined) {
            this.areaUnderCurve = source.areaUnderCurve.map((x) => new fhirModels.Quantity(x));
        }
        if (source["halfLifePeriod"] !== undefined) {
            this.halfLifePeriod = new fhirModels.Duration(source.halfLifePeriod);
        }
        if (source["lethalDose50"] !== undefined) {
            this.lethalDose50 = source.lethalDose50.map((x) => new fhirModels.Quantity(x));
        }
    }
}
exports.MedicationKnowledgeKinetics = MedicationKnowledgeKinetics;
/**
 * Information about a medication that is used to support knowledge.
 */
class MedicationKnowledge extends fhirModels.DomainResource {
    /**
     * Default constructor for MedicationKnowledge from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "MedicationKnowledge";
        if ((source['resourceType'] !== "MedicationKnowledge") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a MedicationKnowledge';
        }
        if (source["administrationGuidelines"] !== undefined) {
            this.administrationGuidelines = source.administrationGuidelines.map((x) => new fhirModels.MedicationKnowledgeAdministrationGuidelines(x));
        }
        if (source["amount"] !== undefined) {
            this.amount = new fhirModels.Quantity(source.amount);
        }
        if (source["associatedMedication"] !== undefined) {
            this.associatedMedication = source.associatedMedication.map((x) => new fhirModels.Reference(x));
        }
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["contraindication"] !== undefined) {
            this.contraindication = source.contraindication.map((x) => new fhirModels.Reference(x));
        }
        if (source["cost"] !== undefined) {
            this.cost = source.cost.map((x) => new fhirModels.MedicationKnowledgeCost(x));
        }
        if (source["doseForm"] !== undefined) {
            this.doseForm = new fhirModels.CodeableConcept(source.doseForm);
        }
        if (source["drugCharacteristic"] !== undefined) {
            this.drugCharacteristic = source.drugCharacteristic.map((x) => new fhirModels.MedicationKnowledgeDrugCharacteristic(x));
        }
        if (source["ingredient"] !== undefined) {
            this.ingredient = source.ingredient.map((x) => new fhirModels.MedicationKnowledgeIngredient(x));
        }
        if (source["intendedRoute"] !== undefined) {
            this.intendedRoute = source.intendedRoute.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["kinetics"] !== undefined) {
            this.kinetics = source.kinetics.map((x) => new fhirModels.MedicationKnowledgeKinetics(x));
        }
        if (source["manufacturer"] !== undefined) {
            this.manufacturer = new fhirModels.Reference(source.manufacturer);
        }
        if (source["medicineClassification"] !== undefined) {
            this.medicineClassification = source.medicineClassification.map((x) => new fhirModels.MedicationKnowledgeMedicineClassification(x));
        }
        if (source["monitoringProgram"] !== undefined) {
            this.monitoringProgram = source.monitoringProgram.map((x) => new fhirModels.MedicationKnowledgeMonitoringProgram(x));
        }
        if (source["monograph"] !== undefined) {
            this.monograph = source.monograph.map((x) => new fhirModels.MedicationKnowledgeMonograph(x));
        }
        if (source["packaging"] !== undefined) {
            this.packaging = new fhirModels.MedicationKnowledgePackaging(source.packaging);
        }
        if (source["preparationInstruction"] !== undefined) {
            this.preparationInstruction = source.preparationInstruction;
        }
        if (source["_preparationInstruction"] !== undefined) {
            this._preparationInstruction = new fhirModels.Element(source._preparationInstruction);
        }
        if (source["productType"] !== undefined) {
            this.productType = source.productType.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["regulatory"] !== undefined) {
            this.regulatory = source.regulatory.map((x) => new fhirModels.MedicationKnowledgeRegulatory(x));
        }
        if (source["relatedMedicationKnowledge"] !== undefined) {
            this.relatedMedicationKnowledge = source.relatedMedicationKnowledge.map((x) => new fhirModels.MedicationKnowledgeRelatedMedicationKnowledge(x));
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["synonym"] !== undefined) {
            this.synonym = source.synonym.map((x) => (x));
        }
        if (source["_synonym"] !== undefined) {
            this._synonym = source._synonym.map((x) => new fhirModels.Element(x));
        }
    }
}
exports.MedicationKnowledge = MedicationKnowledge;
/**
 * Code Values for the MedicationKnowledge.status field
 */
var MedicationKnowledgeStatusEnum;
(function (MedicationKnowledgeStatusEnum) {
    MedicationKnowledgeStatusEnum["ACTIVE"] = "active";
    MedicationKnowledgeStatusEnum["INACTIVE"] = "inactive";
    MedicationKnowledgeStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(MedicationKnowledgeStatusEnum = exports.MedicationKnowledgeStatusEnum || (exports.MedicationKnowledgeStatusEnum = {}));
//# sourceMappingURL=MedicationKnowledge.js.map