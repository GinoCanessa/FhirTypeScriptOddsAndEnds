"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PatientGenderEnum = exports.Patient = exports.PatientLinkTypeEnum = exports.PatientLink = exports.PatientCommunication = exports.PatientContactGenderEnum = exports.PatientContact = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Contact covers all kinds of contact parties: family members, business contacts, guardians, caregivers. Not applicable to register pedigree and family ties beyond use of having contact.
 */
class PatientContact extends fhirModels.BackboneElement {
    /**
     * Default constructor for PatientContact from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["address"] !== undefined) {
            this.address = new fhirModels.Address(source.address);
        }
        if (source["gender"] !== undefined) {
            this.gender = source.gender;
        }
        if (source["_gender"] !== undefined) {
            this._gender = new fhirModels.Element(source._gender);
        }
        if (source["name"] !== undefined) {
            this.name = new fhirModels.HumanName(source.name);
        }
        if (source["organization"] !== undefined) {
            this.organization = new fhirModels.Reference(source.organization);
        }
        if (source["period"] !== undefined) {
            this.period = new fhirModels.Period(source.period);
        }
        if (source["relationship"] !== undefined) {
            this.relationship = source.relationship.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["telecom"] !== undefined) {
            this.telecom = source.telecom.map((x) => new fhirModels.ContactPoint(x));
        }
    }
}
exports.PatientContact = PatientContact;
/**
 * Code Values for the Patient.contact.gender field
 */
var PatientContactGenderEnum;
(function (PatientContactGenderEnum) {
    PatientContactGenderEnum["MALE"] = "male";
    PatientContactGenderEnum["FEMALE"] = "female";
    PatientContactGenderEnum["OTHER"] = "other";
    PatientContactGenderEnum["UNKNOWN"] = "unknown";
})(PatientContactGenderEnum = exports.PatientContactGenderEnum || (exports.PatientContactGenderEnum = {}));
/**
 * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple Patient.Communication associations.   For animals, language is not a relevant field, and should be absent from the instance. If the Patient does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
 */
class PatientCommunication extends fhirModels.BackboneElement {
    /**
     * Default constructor for PatientCommunication from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.language = new fhirModels.CodeableConcept(source.language);
        }
        if (source["preferred"] !== undefined) {
            this.preferred = source.preferred;
        }
        if (source["_preferred"] !== undefined) {
            this._preferred = new fhirModels.Element(source._preferred);
        }
    }
}
exports.PatientCommunication = PatientCommunication;
/**
 * There is no assumption that linked patient records have mutual links.
 */
class PatientLink extends fhirModels.BackboneElement {
    /**
     * Default constructor for PatientLink from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.other = new fhirModels.Reference(source.other);
        }
        {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
    }
}
exports.PatientLink = PatientLink;
/**
 * Code Values for the Patient.link.type field
 */
var PatientLinkTypeEnum;
(function (PatientLinkTypeEnum) {
    PatientLinkTypeEnum["REPLACED_BY"] = "replaced-by";
    PatientLinkTypeEnum["REPLACES"] = "replaces";
    PatientLinkTypeEnum["REFER"] = "refer";
    PatientLinkTypeEnum["SEEALSO"] = "seealso";
})(PatientLinkTypeEnum = exports.PatientLinkTypeEnum || (exports.PatientLinkTypeEnum = {}));
/**
 * Demographics and other administrative information about an individual or animal receiving care or other health-related services.
 */
class Patient extends fhirModels.DomainResource {
    /**
     * Default constructor for Patient from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "Patient";
        if ((source['resourceType'] !== "Patient") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Patient';
        }
        if (source["active"] !== undefined) {
            this.active = source.active;
        }
        if (source["_active"] !== undefined) {
            this._active = new fhirModels.Element(source._active);
        }
        if (source["address"] !== undefined) {
            this.address = source.address.map((x) => new fhirModels.Address(x));
        }
        if (source["birthDate"] !== undefined) {
            this.birthDate = source.birthDate;
        }
        if (source["_birthDate"] !== undefined) {
            this._birthDate = new fhirModels.Element(source._birthDate);
        }
        if (source["communication"] !== undefined) {
            this.communication = source.communication.map((x) => new fhirModels.PatientCommunication(x));
        }
        if (source["contact"] !== undefined) {
            this.contact = source.contact.map((x) => new fhirModels.PatientContact(x));
        }
        if (source["deceasedBoolean"] !== undefined) {
            this.deceasedBoolean = source.deceasedBoolean;
        }
        if (source["_deceasedBoolean"] !== undefined) {
            this._deceasedBoolean = new fhirModels.Element(source._deceasedBoolean);
        }
        if (source["deceasedDateTime"] !== undefined) {
            this.deceasedDateTime = source.deceasedDateTime;
        }
        if (source["_deceasedDateTime"] !== undefined) {
            this._deceasedDateTime = new fhirModels.Element(source._deceasedDateTime);
        }
        if (source["gender"] !== undefined) {
            this.gender = source.gender;
        }
        if (source["_gender"] !== undefined) {
            this._gender = new fhirModels.Element(source._gender);
        }
        if (source["generalPractitioner"] !== undefined) {
            this.generalPractitioner = source.generalPractitioner.map((x) => new fhirModels.Reference(x));
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["link"] !== undefined) {
            this.link = source.link.map((x) => new fhirModels.PatientLink(x));
        }
        if (source["managingOrganization"] !== undefined) {
            this.managingOrganization = new fhirModels.Reference(source.managingOrganization);
        }
        if (source["maritalStatus"] !== undefined) {
            this.maritalStatus = new fhirModels.CodeableConcept(source.maritalStatus);
        }
        if (source["multipleBirthBoolean"] !== undefined) {
            this.multipleBirthBoolean = source.multipleBirthBoolean;
        }
        if (source["_multipleBirthBoolean"] !== undefined) {
            this._multipleBirthBoolean = new fhirModels.Element(source._multipleBirthBoolean);
        }
        if (source["multipleBirthInteger"] !== undefined) {
            this.multipleBirthInteger = source.multipleBirthInteger;
        }
        if (source["_multipleBirthInteger"] !== undefined) {
            this._multipleBirthInteger = new fhirModels.Element(source._multipleBirthInteger);
        }
        if (source["name"] !== undefined) {
            this.name = source.name.map((x) => new fhirModels.HumanName(x));
        }
        if (source["photo"] !== undefined) {
            this.photo = source.photo.map((x) => new fhirModels.Attachment(x));
        }
        if (source["telecom"] !== undefined) {
            this.telecom = source.telecom.map((x) => new fhirModels.ContactPoint(x));
        }
    }
}
exports.Patient = Patient;
/**
 * Code Values for the Patient.gender field
 */
var PatientGenderEnum;
(function (PatientGenderEnum) {
    PatientGenderEnum["MALE"] = "male";
    PatientGenderEnum["FEMALE"] = "female";
    PatientGenderEnum["OTHER"] = "other";
    PatientGenderEnum["UNKNOWN"] = "unknown";
})(PatientGenderEnum = exports.PatientGenderEnum || (exports.PatientGenderEnum = {}));
//# sourceMappingURL=Patient.js.map