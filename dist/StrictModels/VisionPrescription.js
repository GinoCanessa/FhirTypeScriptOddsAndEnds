"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VisionPrescriptionStatusEnum = exports.VisionPrescription = exports.VisionPrescriptionLensSpecificationEyeEnum = exports.VisionPrescriptionLensSpecification = exports.VisionPrescriptionLensSpecificationPrismBaseEnum = exports.VisionPrescriptionLensSpecificationPrism = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Allows for adjustment on two axis.
 */
class VisionPrescriptionLensSpecificationPrism extends fhirModels.BackboneElement {
    /**
     * Default constructor for VisionPrescriptionLensSpecificationPrism from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.amount = source.amount;
        }
        if (source["_amount"] !== undefined) {
            this._amount = new fhirModels.Element(source._amount);
        }
        {
            this.base = source.base;
        }
        if (source["_base"] !== undefined) {
            this._base = new fhirModels.Element(source._base);
        }
    }
}
exports.VisionPrescriptionLensSpecificationPrism = VisionPrescriptionLensSpecificationPrism;
/**
 * Code Values for the VisionPrescription.lensSpecification.prism.base field
 */
var VisionPrescriptionLensSpecificationPrismBaseEnum;
(function (VisionPrescriptionLensSpecificationPrismBaseEnum) {
    VisionPrescriptionLensSpecificationPrismBaseEnum["UP"] = "up";
    VisionPrescriptionLensSpecificationPrismBaseEnum["DOWN"] = "down";
    VisionPrescriptionLensSpecificationPrismBaseEnum["IN"] = "in";
    VisionPrescriptionLensSpecificationPrismBaseEnum["OUT"] = "out";
})(VisionPrescriptionLensSpecificationPrismBaseEnum = exports.VisionPrescriptionLensSpecificationPrismBaseEnum || (exports.VisionPrescriptionLensSpecificationPrismBaseEnum = {}));
/**
 * Contain the details of  the individual lens specifications and serves as the authorization for the fullfillment by certified professionals.
 */
class VisionPrescriptionLensSpecification extends fhirModels.BackboneElement {
    /**
     * Default constructor for VisionPrescriptionLensSpecification from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["add"] !== undefined) {
            this.add = source.add;
        }
        if (source["_add"] !== undefined) {
            this._add = new fhirModels.Element(source._add);
        }
        if (source["axis"] !== undefined) {
            this.axis = source.axis;
        }
        if (source["_axis"] !== undefined) {
            this._axis = new fhirModels.Element(source._axis);
        }
        if (source["backCurve"] !== undefined) {
            this.backCurve = source.backCurve;
        }
        if (source["_backCurve"] !== undefined) {
            this._backCurve = new fhirModels.Element(source._backCurve);
        }
        if (source["brand"] !== undefined) {
            this.brand = source.brand;
        }
        if (source["_brand"] !== undefined) {
            this._brand = new fhirModels.Element(source._brand);
        }
        if (source["color"] !== undefined) {
            this.color = source.color;
        }
        if (source["_color"] !== undefined) {
            this._color = new fhirModels.Element(source._color);
        }
        if (source["cylinder"] !== undefined) {
            this.cylinder = source.cylinder;
        }
        if (source["_cylinder"] !== undefined) {
            this._cylinder = new fhirModels.Element(source._cylinder);
        }
        if (source["diameter"] !== undefined) {
            this.diameter = source.diameter;
        }
        if (source["_diameter"] !== undefined) {
            this._diameter = new fhirModels.Element(source._diameter);
        }
        if (source["duration"] !== undefined) {
            this.duration = new fhirModels.Quantity(source.duration);
        }
        {
            this.eye = source.eye;
        }
        if (source["_eye"] !== undefined) {
            this._eye = new fhirModels.Element(source._eye);
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["power"] !== undefined) {
            this.power = source.power;
        }
        if (source["_power"] !== undefined) {
            this._power = new fhirModels.Element(source._power);
        }
        if (source["prism"] !== undefined) {
            this.prism = source.prism.map((x) => new fhirModels.VisionPrescriptionLensSpecificationPrism(x));
        }
        {
            this.product = new fhirModels.CodeableConcept(source.product);
        }
        if (source["sphere"] !== undefined) {
            this.sphere = source.sphere;
        }
        if (source["_sphere"] !== undefined) {
            this._sphere = new fhirModels.Element(source._sphere);
        }
    }
}
exports.VisionPrescriptionLensSpecification = VisionPrescriptionLensSpecification;
/**
 * Code Values for the VisionPrescription.lensSpecification.eye field
 */
var VisionPrescriptionLensSpecificationEyeEnum;
(function (VisionPrescriptionLensSpecificationEyeEnum) {
    VisionPrescriptionLensSpecificationEyeEnum["RIGHT"] = "right";
    VisionPrescriptionLensSpecificationEyeEnum["LEFT"] = "left";
})(VisionPrescriptionLensSpecificationEyeEnum = exports.VisionPrescriptionLensSpecificationEyeEnum || (exports.VisionPrescriptionLensSpecificationEyeEnum = {}));
/**
 * An authorization for the provision of glasses and/or contact lenses to a patient.
 */
class VisionPrescription extends fhirModels.DomainResource {
    /**
     * Default constructor for VisionPrescription from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "VisionPrescription";
        if ((source['resourceType'] !== "VisionPrescription") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a VisionPrescription';
        }
        {
            this.created = source.created;
        }
        if (source["_created"] !== undefined) {
            this._created = new fhirModels.Element(source._created);
        }
        {
            this.dateWritten = source.dateWritten;
        }
        if (source["_dateWritten"] !== undefined) {
            this._dateWritten = new fhirModels.Element(source._dateWritten);
        }
        if (source["encounter"] !== undefined) {
            this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        {
            this.lensSpecification = source.lensSpecification.map((x) => new fhirModels.VisionPrescriptionLensSpecification(x));
        }
        {
            this.patient = new fhirModels.Reference(source.patient);
        }
        {
            this.prescriber = new fhirModels.Reference(source.prescriber);
        }
        {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
    }
}
exports.VisionPrescription = VisionPrescription;
/**
 * Code Values for the VisionPrescription.status field
 */
var VisionPrescriptionStatusEnum;
(function (VisionPrescriptionStatusEnum) {
    VisionPrescriptionStatusEnum["ACTIVE"] = "active";
    VisionPrescriptionStatusEnum["CANCELLED"] = "cancelled";
    VisionPrescriptionStatusEnum["DRAFT"] = "draft";
    VisionPrescriptionStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(VisionPrescriptionStatusEnum = exports.VisionPrescriptionStatusEnum || (exports.VisionPrescriptionStatusEnum = {}));
//# sourceMappingURL=VisionPrescription.js.map