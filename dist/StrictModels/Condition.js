"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Condition = exports.ConditionEvidence = exports.ConditionStage = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Clinical stage or grade of a condition. May include formal severity assessments.
 */
class ConditionStage extends fhirModels.BackboneElement {
    /**
     * Default constructor for ConditionStage from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["assessment"] !== undefined) {
            this.assessment = source.assessment.map((x) => new fhirModels.Reference(x));
        }
        if (source["summary"] !== undefined) {
            this.summary = new fhirModels.CodeableConcept(source.summary);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.ConditionStage = ConditionStage;
/**
 * The evidence may be a simple list of coded symptoms/manifestations, or references to observations or formal assessments, or both.
 */
class ConditionEvidence extends fhirModels.BackboneElement {
    /**
     * Default constructor for ConditionEvidence from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = source.code.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["detail"] !== undefined) {
            this.detail = source.detail.map((x) => new fhirModels.Reference(x));
        }
    }
}
exports.ConditionEvidence = ConditionEvidence;
/**
 * A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.
 */
class Condition extends fhirModels.DomainResource {
    /**
     * Default constructor for Condition from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "Condition";
        if ((source['resourceType'] !== "Condition") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Condition';
        }
        if (source["abatementDateTime"] !== undefined) {
            this.abatementDateTime = source.abatementDateTime;
        }
        if (source["_abatementDateTime"] !== undefined) {
            this._abatementDateTime = new fhirModels.Element(source._abatementDateTime);
        }
        if (source["abatementAge"] !== undefined) {
            this.abatementAge = new fhirModels.Age(source.abatementAge);
        }
        if (source["abatementPeriod"] !== undefined) {
            this.abatementPeriod = new fhirModels.Period(source.abatementPeriod);
        }
        if (source["abatementRange"] !== undefined) {
            this.abatementRange = new fhirModels.Range(source.abatementRange);
        }
        if (source["abatementString"] !== undefined) {
            this.abatementString = source.abatementString;
        }
        if (source["_abatementString"] !== undefined) {
            this._abatementString = new fhirModels.Element(source._abatementString);
        }
        if (source["asserter"] !== undefined) {
            this.asserter = new fhirModels.Reference(source.asserter);
        }
        if (source["bodySite"] !== undefined) {
            this.bodySite = source.bodySite.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["category"] !== undefined) {
            this.category = source.category.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["clinicalStatus"] !== undefined) {
            this.clinicalStatus = new fhirModels.CodeableConcept(source.clinicalStatus);
        }
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["encounter"] !== undefined) {
            this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["evidence"] !== undefined) {
            this.evidence = source.evidence.map((x) => new fhirModels.ConditionEvidence(x));
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["onsetDateTime"] !== undefined) {
            this.onsetDateTime = source.onsetDateTime;
        }
        if (source["_onsetDateTime"] !== undefined) {
            this._onsetDateTime = new fhirModels.Element(source._onsetDateTime);
        }
        if (source["onsetAge"] !== undefined) {
            this.onsetAge = new fhirModels.Age(source.onsetAge);
        }
        if (source["onsetPeriod"] !== undefined) {
            this.onsetPeriod = new fhirModels.Period(source.onsetPeriod);
        }
        if (source["onsetRange"] !== undefined) {
            this.onsetRange = new fhirModels.Range(source.onsetRange);
        }
        if (source["onsetString"] !== undefined) {
            this.onsetString = source.onsetString;
        }
        if (source["_onsetString"] !== undefined) {
            this._onsetString = new fhirModels.Element(source._onsetString);
        }
        if (source["recordedDate"] !== undefined) {
            this.recordedDate = source.recordedDate;
        }
        if (source["_recordedDate"] !== undefined) {
            this._recordedDate = new fhirModels.Element(source._recordedDate);
        }
        if (source["recorder"] !== undefined) {
            this.recorder = new fhirModels.Reference(source.recorder);
        }
        if (source["severity"] !== undefined) {
            this.severity = new fhirModels.CodeableConcept(source.severity);
        }
        if (source["stage"] !== undefined) {
            this.stage = source.stage.map((x) => new fhirModels.ConditionStage(x));
        }
        {
            this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["verificationStatus"] !== undefined) {
            this.verificationStatus = new fhirModels.CodeableConcept(source.verificationStatus);
        }
    }
}
exports.Condition = Condition;
//# sourceMappingURL=Condition.js.map