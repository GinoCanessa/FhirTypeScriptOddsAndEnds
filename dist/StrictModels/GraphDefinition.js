"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphDefinitionStatusEnum = exports.GraphDefinition = exports.GraphDefinitionLink = exports.GraphDefinitionLinkTarget = exports.GraphDefinitionLinkTargetCompartmentUseEnum = exports.GraphDefinitionLinkTargetCompartmentRuleEnum = exports.GraphDefinitionLinkTargetCompartmentCodeEnum = exports.GraphDefinitionLinkTargetCompartment = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Compartment Consistency Rules.
 */
class GraphDefinitionLinkTargetCompartment extends fhirModels.BackboneElement {
    /**
     * Default constructor for GraphDefinitionLinkTargetCompartment from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.code = source.code;
        }
        if (source["_code"] !== undefined) {
            this._code = new fhirModels.Element(source._code);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["expression"] !== undefined) {
            this.expression = source.expression;
        }
        if (source["_expression"] !== undefined) {
            this._expression = new fhirModels.Element(source._expression);
        }
        {
            this.rule = source.rule;
        }
        if (source["_rule"] !== undefined) {
            this._rule = new fhirModels.Element(source._rule);
        }
        {
            this.use = source.use;
        }
        if (source["_use"] !== undefined) {
            this._use = new fhirModels.Element(source._use);
        }
    }
}
exports.GraphDefinitionLinkTargetCompartment = GraphDefinitionLinkTargetCompartment;
/**
 * Code Values for the GraphDefinition.link.target.compartment.code field
 */
var GraphDefinitionLinkTargetCompartmentCodeEnum;
(function (GraphDefinitionLinkTargetCompartmentCodeEnum) {
    GraphDefinitionLinkTargetCompartmentCodeEnum["PATIENT"] = "Patient";
    GraphDefinitionLinkTargetCompartmentCodeEnum["ENCOUNTER"] = "Encounter";
    GraphDefinitionLinkTargetCompartmentCodeEnum["RELATEDPERSON"] = "RelatedPerson";
    GraphDefinitionLinkTargetCompartmentCodeEnum["PRACTITIONER"] = "Practitioner";
    GraphDefinitionLinkTargetCompartmentCodeEnum["DEVICE"] = "Device";
})(GraphDefinitionLinkTargetCompartmentCodeEnum = exports.GraphDefinitionLinkTargetCompartmentCodeEnum || (exports.GraphDefinitionLinkTargetCompartmentCodeEnum = {}));
/**
 * Code Values for the GraphDefinition.link.target.compartment.rule field
 */
var GraphDefinitionLinkTargetCompartmentRuleEnum;
(function (GraphDefinitionLinkTargetCompartmentRuleEnum) {
    GraphDefinitionLinkTargetCompartmentRuleEnum["IDENTICAL"] = "identical";
    GraphDefinitionLinkTargetCompartmentRuleEnum["MATCHING"] = "matching";
    GraphDefinitionLinkTargetCompartmentRuleEnum["DIFFERENT"] = "different";
    GraphDefinitionLinkTargetCompartmentRuleEnum["CUSTOM"] = "custom";
})(GraphDefinitionLinkTargetCompartmentRuleEnum = exports.GraphDefinitionLinkTargetCompartmentRuleEnum || (exports.GraphDefinitionLinkTargetCompartmentRuleEnum = {}));
/**
 * Code Values for the GraphDefinition.link.target.compartment.use field
 */
var GraphDefinitionLinkTargetCompartmentUseEnum;
(function (GraphDefinitionLinkTargetCompartmentUseEnum) {
    GraphDefinitionLinkTargetCompartmentUseEnum["CONDITION"] = "condition";
    GraphDefinitionLinkTargetCompartmentUseEnum["REQUIREMENT"] = "requirement";
})(GraphDefinitionLinkTargetCompartmentUseEnum = exports.GraphDefinitionLinkTargetCompartmentUseEnum || (exports.GraphDefinitionLinkTargetCompartmentUseEnum = {}));
/**
 * Potential target for the link.
 */
class GraphDefinitionLinkTarget extends fhirModels.BackboneElement {
    /**
     * Default constructor for GraphDefinitionLinkTarget from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["compartment"] !== undefined) {
            this.compartment = source.compartment.map((x) => new fhirModels.GraphDefinitionLinkTargetCompartment(x));
        }
        if (source["link"] !== undefined) {
            this.link = source.link.map((x) => new fhirModels.GraphDefinitionLink(x));
        }
        if (source["params"] !== undefined) {
            this.params = source.params;
        }
        if (source["_params"] !== undefined) {
            this._params = new fhirModels.Element(source._params);
        }
        if (source["profile"] !== undefined) {
            this.profile = source.profile;
        }
        if (source["_profile"] !== undefined) {
            this._profile = new fhirModels.Element(source._profile);
        }
        {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
    }
}
exports.GraphDefinitionLinkTarget = GraphDefinitionLinkTarget;
/**
 * Links this graph makes rules about.
 */
class GraphDefinitionLink extends fhirModels.BackboneElement {
    /**
     * Default constructor for GraphDefinitionLink from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["max"] !== undefined) {
            this.max = source.max;
        }
        if (source["_max"] !== undefined) {
            this._max = new fhirModels.Element(source._max);
        }
        if (source["min"] !== undefined) {
            this.min = source.min;
        }
        if (source["_min"] !== undefined) {
            this._min = new fhirModels.Element(source._min);
        }
        if (source["path"] !== undefined) {
            this.path = source.path;
        }
        if (source["_path"] !== undefined) {
            this._path = new fhirModels.Element(source._path);
        }
        if (source["sliceName"] !== undefined) {
            this.sliceName = source.sliceName;
        }
        if (source["_sliceName"] !== undefined) {
            this._sliceName = new fhirModels.Element(source._sliceName);
        }
        if (source["target"] !== undefined) {
            this.target = source.target.map((x) => new fhirModels.GraphDefinitionLinkTarget(x));
        }
    }
}
exports.GraphDefinitionLink = GraphDefinitionLink;
/**
 * A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.
 */
class GraphDefinition extends fhirModels.DomainResource {
    /**
     * Default constructor for GraphDefinition from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "GraphDefinition";
        if ((source['resourceType'] !== "GraphDefinition") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a GraphDefinition';
        }
        if (source["contact"] !== undefined) {
            this.contact = source.contact.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["experimental"] !== undefined) {
            this.experimental = source.experimental;
        }
        if (source["_experimental"] !== undefined) {
            this._experimental = new fhirModels.Element(source._experimental);
        }
        if (source["jurisdiction"] !== undefined) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["link"] !== undefined) {
            this.link = source.link.map((x) => new fhirModels.GraphDefinitionLink(x));
        }
        {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["profile"] !== undefined) {
            this.profile = source.profile;
        }
        if (source["_profile"] !== undefined) {
            this._profile = new fhirModels.Element(source._profile);
        }
        if (source["publisher"] !== undefined) {
            this.publisher = source.publisher;
        }
        if (source["_publisher"] !== undefined) {
            this._publisher = new fhirModels.Element(source._publisher);
        }
        if (source["purpose"] !== undefined) {
            this.purpose = source.purpose;
        }
        if (source["_purpose"] !== undefined) {
            this._purpose = new fhirModels.Element(source._purpose);
        }
        {
            this.start = source.start;
        }
        if (source["_start"] !== undefined) {
            this._start = new fhirModels.Element(source._start);
        }
        {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["url"] !== undefined) {
            this.url = source.url;
        }
        if (source["_url"] !== undefined) {
            this._url = new fhirModels.Element(source._url);
        }
        if (source["useContext"] !== undefined) {
            this.useContext = source.useContext.map((x) => new fhirModels.UsageContext(x));
        }
        if (source["version"] !== undefined) {
            this.version = source.version;
        }
        if (source["_version"] !== undefined) {
            this._version = new fhirModels.Element(source._version);
        }
    }
}
exports.GraphDefinition = GraphDefinition;
/**
 * Code Values for the GraphDefinition.status field
 */
var GraphDefinitionStatusEnum;
(function (GraphDefinitionStatusEnum) {
    GraphDefinitionStatusEnum["DRAFT"] = "draft";
    GraphDefinitionStatusEnum["ACTIVE"] = "active";
    GraphDefinitionStatusEnum["RETIRED"] = "retired";
    GraphDefinitionStatusEnum["UNKNOWN"] = "unknown";
})(GraphDefinitionStatusEnum = exports.GraphDefinitionStatusEnum || (exports.GraphDefinitionStatusEnum = {}));
//# sourceMappingURL=GraphDefinition.js.map