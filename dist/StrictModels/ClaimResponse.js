"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClaimResponseUseEnum = exports.ClaimResponseStatusEnum = exports.ClaimResponseOutcomeEnum = exports.ClaimResponse = exports.ClaimResponseError = exports.ClaimResponseInsurance = exports.ClaimResponseProcessNoteTypeEnum = exports.ClaimResponseProcessNote = exports.ClaimResponsePayment = exports.ClaimResponseTotal = exports.ClaimResponseAddItem = exports.ClaimResponseAddItemDetail = exports.ClaimResponseAddItemDetailSubDetail = exports.ClaimResponseItem = exports.ClaimResponseItemDetail = exports.ClaimResponseItemDetailSubDetail = exports.ClaimResponseItemAdjudication = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
 */
class ClaimResponseItemAdjudication extends fhirModels.BackboneElement {
    /**
     * Default constructor for ClaimResponseItemAdjudication from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["amount"] !== undefined) {
            this.amount = new fhirModels.Money(source.amount);
        }
        {
            this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["reason"] !== undefined) {
            this.reason = new fhirModels.CodeableConcept(source.reason);
        }
        if (source["value"] !== undefined) {
            this.value = source.value;
        }
        if (source["_value"] !== undefined) {
            this._value = new fhirModels.Element(source._value);
        }
    }
}
exports.ClaimResponseItemAdjudication = ClaimResponseItemAdjudication;
/**
 * A sub-detail adjudication of a simple product or service.
 */
class ClaimResponseItemDetailSubDetail extends fhirModels.BackboneElement {
    /**
     * Default constructor for ClaimResponseItemDetailSubDetail from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["adjudication"] !== undefined) {
            this.adjudication = source.adjudication.map((x) => new fhirModels.ClaimResponseItemAdjudication(x));
        }
        if (source["noteNumber"] !== undefined) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source["_noteNumber"] !== undefined) {
            this._noteNumber = source._noteNumber.map((x) => new fhirModels.Element(x));
        }
        {
            this.subDetailSequence = source.subDetailSequence;
        }
        if (source["_subDetailSequence"] !== undefined) {
            this._subDetailSequence = new fhirModels.Element(source._subDetailSequence);
        }
    }
}
exports.ClaimResponseItemDetailSubDetail = ClaimResponseItemDetailSubDetail;
/**
 * A claim detail. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
class ClaimResponseItemDetail extends fhirModels.BackboneElement {
    /**
     * Default constructor for ClaimResponseItemDetail from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.adjudication = source.adjudication.map((x) => new fhirModels.ClaimResponseItemAdjudication(x));
        }
        {
            this.detailSequence = source.detailSequence;
        }
        if (source["_detailSequence"] !== undefined) {
            this._detailSequence = new fhirModels.Element(source._detailSequence);
        }
        if (source["noteNumber"] !== undefined) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source["_noteNumber"] !== undefined) {
            this._noteNumber = source._noteNumber.map((x) => new fhirModels.Element(x));
        }
        if (source["subDetail"] !== undefined) {
            this.subDetail = source.subDetail.map((x) => new fhirModels.ClaimResponseItemDetailSubDetail(x));
        }
    }
}
exports.ClaimResponseItemDetail = ClaimResponseItemDetail;
/**
 * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
 */
class ClaimResponseItem extends fhirModels.BackboneElement {
    /**
     * Default constructor for ClaimResponseItem from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.adjudication = source.adjudication.map((x) => new fhirModels.ClaimResponseItemAdjudication(x));
        }
        if (source["detail"] !== undefined) {
            this.detail = source.detail.map((x) => new fhirModels.ClaimResponseItemDetail(x));
        }
        {
            this.itemSequence = source.itemSequence;
        }
        if (source["_itemSequence"] !== undefined) {
            this._itemSequence = new fhirModels.Element(source._itemSequence);
        }
        if (source["noteNumber"] !== undefined) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source["_noteNumber"] !== undefined) {
            this._noteNumber = source._noteNumber.map((x) => new fhirModels.Element(x));
        }
    }
}
exports.ClaimResponseItem = ClaimResponseItem;
/**
 * The third-tier service adjudications for payor added services.
 */
class ClaimResponseAddItemDetailSubDetail extends fhirModels.BackboneElement {
    /**
     * Default constructor for ClaimResponseAddItemDetailSubDetail from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.adjudication = source.adjudication.map((x) => new fhirModels.ClaimResponseItemAdjudication(x));
        }
        if (source["factor"] !== undefined) {
            this.factor = source.factor;
        }
        if (source["_factor"] !== undefined) {
            this._factor = new fhirModels.Element(source._factor);
        }
        if (source["modifier"] !== undefined) {
            this.modifier = source.modifier.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["net"] !== undefined) {
            this.net = new fhirModels.Money(source.net);
        }
        if (source["noteNumber"] !== undefined) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source["_noteNumber"] !== undefined) {
            this._noteNumber = source._noteNumber.map((x) => new fhirModels.Element(x));
        }
        {
            this.productOrService = new fhirModels.CodeableConcept(source.productOrService);
        }
        if (source["quantity"] !== undefined) {
            this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["unitPrice"] !== undefined) {
            this.unitPrice = new fhirModels.Money(source.unitPrice);
        }
    }
}
exports.ClaimResponseAddItemDetailSubDetail = ClaimResponseAddItemDetailSubDetail;
/**
 * The second-tier service adjudications for payor added services.
 */
class ClaimResponseAddItemDetail extends fhirModels.BackboneElement {
    /**
     * Default constructor for ClaimResponseAddItemDetail from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.adjudication = source.adjudication.map((x) => new fhirModels.ClaimResponseItemAdjudication(x));
        }
        if (source["factor"] !== undefined) {
            this.factor = source.factor;
        }
        if (source["_factor"] !== undefined) {
            this._factor = new fhirModels.Element(source._factor);
        }
        if (source["modifier"] !== undefined) {
            this.modifier = source.modifier.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["net"] !== undefined) {
            this.net = new fhirModels.Money(source.net);
        }
        if (source["noteNumber"] !== undefined) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source["_noteNumber"] !== undefined) {
            this._noteNumber = source._noteNumber.map((x) => new fhirModels.Element(x));
        }
        {
            this.productOrService = new fhirModels.CodeableConcept(source.productOrService);
        }
        if (source["quantity"] !== undefined) {
            this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["subDetail"] !== undefined) {
            this.subDetail = source.subDetail.map((x) => new fhirModels.ClaimResponseAddItemDetailSubDetail(x));
        }
        if (source["unitPrice"] !== undefined) {
            this.unitPrice = new fhirModels.Money(source.unitPrice);
        }
    }
}
exports.ClaimResponseAddItemDetail = ClaimResponseAddItemDetail;
/**
 * The first-tier service adjudications for payor added product or service lines.
 */
class ClaimResponseAddItem extends fhirModels.BackboneElement {
    /**
     * Default constructor for ClaimResponseAddItem from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.adjudication = source.adjudication.map((x) => new fhirModels.ClaimResponseItemAdjudication(x));
        }
        if (source["bodySite"] !== undefined) {
            this.bodySite = new fhirModels.CodeableConcept(source.bodySite);
        }
        if (source["detail"] !== undefined) {
            this.detail = source.detail.map((x) => new fhirModels.ClaimResponseAddItemDetail(x));
        }
        if (source["detailSequence"] !== undefined) {
            this.detailSequence = source.detailSequence.map((x) => (x));
        }
        if (source["_detailSequence"] !== undefined) {
            this._detailSequence = source._detailSequence.map((x) => new fhirModels.Element(x));
        }
        if (source["factor"] !== undefined) {
            this.factor = source.factor;
        }
        if (source["_factor"] !== undefined) {
            this._factor = new fhirModels.Element(source._factor);
        }
        if (source["itemSequence"] !== undefined) {
            this.itemSequence = source.itemSequence.map((x) => (x));
        }
        if (source["_itemSequence"] !== undefined) {
            this._itemSequence = source._itemSequence.map((x) => new fhirModels.Element(x));
        }
        if (source["locationCodeableConcept"] !== undefined) {
            this.locationCodeableConcept = new fhirModels.CodeableConcept(source.locationCodeableConcept);
        }
        if (source["locationAddress"] !== undefined) {
            this.locationAddress = new fhirModels.Address(source.locationAddress);
        }
        if (source["locationReference"] !== undefined) {
            this.locationReference = new fhirModels.Reference(source.locationReference);
        }
        if (source["modifier"] !== undefined) {
            this.modifier = source.modifier.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["net"] !== undefined) {
            this.net = new fhirModels.Money(source.net);
        }
        if (source["noteNumber"] !== undefined) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source["_noteNumber"] !== undefined) {
            this._noteNumber = source._noteNumber.map((x) => new fhirModels.Element(x));
        }
        {
            this.productOrService = new fhirModels.CodeableConcept(source.productOrService);
        }
        if (source["programCode"] !== undefined) {
            this.programCode = source.programCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["provider"] !== undefined) {
            this.provider = source.provider.map((x) => new fhirModels.Reference(x));
        }
        if (source["quantity"] !== undefined) {
            this.quantity = new fhirModels.Quantity(source.quantity);
        }
        if (source["servicedDate"] !== undefined) {
            this.servicedDate = source.servicedDate;
        }
        if (source["_servicedDate"] !== undefined) {
            this._servicedDate = new fhirModels.Element(source._servicedDate);
        }
        if (source["servicedPeriod"] !== undefined) {
            this.servicedPeriod = new fhirModels.Period(source.servicedPeriod);
        }
        if (source["subdetailSequence"] !== undefined) {
            this.subdetailSequence = source.subdetailSequence.map((x) => (x));
        }
        if (source["_subdetailSequence"] !== undefined) {
            this._subdetailSequence = source._subdetailSequence.map((x) => new fhirModels.Element(x));
        }
        if (source["subSite"] !== undefined) {
            this.subSite = source.subSite.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["unitPrice"] !== undefined) {
            this.unitPrice = new fhirModels.Money(source.unitPrice);
        }
    }
}
exports.ClaimResponseAddItem = ClaimResponseAddItem;
/**
 * Totals for amounts submitted, co-pays, benefits payable etc.
 */
class ClaimResponseTotal extends fhirModels.BackboneElement {
    /**
     * Default constructor for ClaimResponseTotal from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.amount = new fhirModels.Money(source.amount);
        }
        {
            this.category = new fhirModels.CodeableConcept(source.category);
        }
    }
}
exports.ClaimResponseTotal = ClaimResponseTotal;
/**
 * Payment details for the adjudication of the claim.
 */
class ClaimResponsePayment extends fhirModels.BackboneElement {
    /**
     * Default constructor for ClaimResponsePayment from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["adjustment"] !== undefined) {
            this.adjustment = new fhirModels.Money(source.adjustment);
        }
        if (source["adjustmentReason"] !== undefined) {
            this.adjustmentReason = new fhirModels.CodeableConcept(source.adjustmentReason);
        }
        {
            this.amount = new fhirModels.Money(source.amount);
        }
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = new fhirModels.Identifier(source.identifier);
        }
        {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.ClaimResponsePayment = ClaimResponsePayment;
/**
 * A note that describes or explains adjudication results in a human readable form.
 */
class ClaimResponseProcessNote extends fhirModels.BackboneElement {
    /**
     * Default constructor for ClaimResponseProcessNote from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["language"] !== undefined) {
            this.language = new fhirModels.CodeableConcept(source.language);
        }
        if (source["number"] !== undefined) {
            this.number = source.number;
        }
        if (source["_number"] !== undefined) {
            this._number = new fhirModels.Element(source._number);
        }
        {
            this.text = source.text;
        }
        if (source["_text"] !== undefined) {
            this._text = new fhirModels.Element(source._text);
        }
        if (source["type"] !== undefined) {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
    }
}
exports.ClaimResponseProcessNote = ClaimResponseProcessNote;
/**
 * Code Values for the ClaimResponse.processNote.type field
 */
var ClaimResponseProcessNoteTypeEnum;
(function (ClaimResponseProcessNoteTypeEnum) {
    ClaimResponseProcessNoteTypeEnum["DISPLAY"] = "display";
    ClaimResponseProcessNoteTypeEnum["PRINT"] = "print";
    ClaimResponseProcessNoteTypeEnum["PRINTOPER"] = "printoper";
})(ClaimResponseProcessNoteTypeEnum = exports.ClaimResponseProcessNoteTypeEnum || (exports.ClaimResponseProcessNoteTypeEnum = {}));
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
class ClaimResponseInsurance extends fhirModels.BackboneElement {
    /**
     * Default constructor for ClaimResponseInsurance from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["businessArrangement"] !== undefined) {
            this.businessArrangement = source.businessArrangement;
        }
        if (source["_businessArrangement"] !== undefined) {
            this._businessArrangement = new fhirModels.Element(source._businessArrangement);
        }
        if (source["claimResponse"] !== undefined) {
            this.claimResponse = new fhirModels.Reference(source.claimResponse);
        }
        {
            this.coverage = new fhirModels.Reference(source.coverage);
        }
        {
            this.focal = source.focal;
        }
        if (source["_focal"] !== undefined) {
            this._focal = new fhirModels.Element(source._focal);
        }
        {
            this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            this._sequence = new fhirModels.Element(source._sequence);
        }
    }
}
exports.ClaimResponseInsurance = ClaimResponseInsurance;
/**
 * If the request contains errors then an error element should be provided and no adjudication related sections (item, addItem, or payment) should be present.
 */
class ClaimResponseError extends fhirModels.BackboneElement {
    /**
     * Default constructor for ClaimResponseError from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["detailSequence"] !== undefined) {
            this.detailSequence = source.detailSequence;
        }
        if (source["_detailSequence"] !== undefined) {
            this._detailSequence = new fhirModels.Element(source._detailSequence);
        }
        if (source["itemSequence"] !== undefined) {
            this.itemSequence = source.itemSequence;
        }
        if (source["_itemSequence"] !== undefined) {
            this._itemSequence = new fhirModels.Element(source._itemSequence);
        }
        if (source["subDetailSequence"] !== undefined) {
            this.subDetailSequence = source.subDetailSequence;
        }
        if (source["_subDetailSequence"] !== undefined) {
            this._subDetailSequence = new fhirModels.Element(source._subDetailSequence);
        }
    }
}
exports.ClaimResponseError = ClaimResponseError;
/**
 * This resource provides the adjudication details from the processing of a Claim resource.
 */
class ClaimResponse extends fhirModels.DomainResource {
    /**
     * Default constructor for ClaimResponse from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "ClaimResponse";
        if ((source['resourceType'] !== "ClaimResponse") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a ClaimResponse';
        }
        if (source["addItem"] !== undefined) {
            this.addItem = source.addItem.map((x) => new fhirModels.ClaimResponseAddItem(x));
        }
        if (source["adjudication"] !== undefined) {
            this.adjudication = source.adjudication.map((x) => new fhirModels.ClaimResponseItemAdjudication(x));
        }
        if (source["communicationRequest"] !== undefined) {
            this.communicationRequest = source.communicationRequest.map((x) => new fhirModels.Reference(x));
        }
        {
            this.created = source.created;
        }
        if (source["_created"] !== undefined) {
            this._created = new fhirModels.Element(source._created);
        }
        if (source["disposition"] !== undefined) {
            this.disposition = source.disposition;
        }
        if (source["_disposition"] !== undefined) {
            this._disposition = new fhirModels.Element(source._disposition);
        }
        if (source["error"] !== undefined) {
            this.error = source.error.map((x) => new fhirModels.ClaimResponseError(x));
        }
        if (source["form"] !== undefined) {
            this.form = new fhirModels.Attachment(source.form);
        }
        if (source["formCode"] !== undefined) {
            this.formCode = new fhirModels.CodeableConcept(source.formCode);
        }
        if (source["fundsReserve"] !== undefined) {
            this.fundsReserve = new fhirModels.CodeableConcept(source.fundsReserve);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["insurance"] !== undefined) {
            this.insurance = source.insurance.map((x) => new fhirModels.ClaimResponseInsurance(x));
        }
        {
            this.insurer = new fhirModels.Reference(source.insurer);
        }
        if (source["item"] !== undefined) {
            this.item = source.item.map((x) => new fhirModels.ClaimResponseItem(x));
        }
        {
            this.outcome = source.outcome;
        }
        if (source["_outcome"] !== undefined) {
            this._outcome = new fhirModels.Element(source._outcome);
        }
        {
            this.patient = new fhirModels.Reference(source.patient);
        }
        if (source["payeeType"] !== undefined) {
            this.payeeType = new fhirModels.CodeableConcept(source.payeeType);
        }
        if (source["payment"] !== undefined) {
            this.payment = new fhirModels.ClaimResponsePayment(source.payment);
        }
        if (source["preAuthPeriod"] !== undefined) {
            this.preAuthPeriod = new fhirModels.Period(source.preAuthPeriod);
        }
        if (source["preAuthRef"] !== undefined) {
            this.preAuthRef = source.preAuthRef;
        }
        if (source["_preAuthRef"] !== undefined) {
            this._preAuthRef = new fhirModels.Element(source._preAuthRef);
        }
        if (source["processNote"] !== undefined) {
            this.processNote = source.processNote.map((x) => new fhirModels.ClaimResponseProcessNote(x));
        }
        if (source["request"] !== undefined) {
            this.request = new fhirModels.Reference(source.request);
        }
        if (source["requestor"] !== undefined) {
            this.requestor = new fhirModels.Reference(source.requestor);
        }
        {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["subType"] !== undefined) {
            this.subType = new fhirModels.CodeableConcept(source.subType);
        }
        if (source["total"] !== undefined) {
            this.total = source.total.map((x) => new fhirModels.ClaimResponseTotal(x));
        }
        {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
        {
            this.use = source.use;
        }
        if (source["_use"] !== undefined) {
            this._use = new fhirModels.Element(source._use);
        }
    }
}
exports.ClaimResponse = ClaimResponse;
/**
 * Code Values for the ClaimResponse.outcome field
 */
var ClaimResponseOutcomeEnum;
(function (ClaimResponseOutcomeEnum) {
    ClaimResponseOutcomeEnum["QUEUED"] = "queued";
    ClaimResponseOutcomeEnum["COMPLETE"] = "complete";
    ClaimResponseOutcomeEnum["ERROR"] = "error";
    ClaimResponseOutcomeEnum["PARTIAL"] = "partial";
})(ClaimResponseOutcomeEnum = exports.ClaimResponseOutcomeEnum || (exports.ClaimResponseOutcomeEnum = {}));
/**
 * Code Values for the ClaimResponse.status field
 */
var ClaimResponseStatusEnum;
(function (ClaimResponseStatusEnum) {
    ClaimResponseStatusEnum["ACTIVE"] = "active";
    ClaimResponseStatusEnum["CANCELLED"] = "cancelled";
    ClaimResponseStatusEnum["DRAFT"] = "draft";
    ClaimResponseStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(ClaimResponseStatusEnum = exports.ClaimResponseStatusEnum || (exports.ClaimResponseStatusEnum = {}));
/**
 * Code Values for the ClaimResponse.use field
 */
var ClaimResponseUseEnum;
(function (ClaimResponseUseEnum) {
    ClaimResponseUseEnum["CLAIM"] = "claim";
    ClaimResponseUseEnum["PREAUTHORIZATION"] = "preauthorization";
    ClaimResponseUseEnum["PREDETERMINATION"] = "predetermination";
})(ClaimResponseUseEnum = exports.ClaimResponseUseEnum || (exports.ClaimResponseUseEnum = {}));
//# sourceMappingURL=ClaimResponse.js.map