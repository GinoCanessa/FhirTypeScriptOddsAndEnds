"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelatedPersonGenderEnum = exports.RelatedPerson = exports.RelatedPersonCommunication = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple RelatedPerson.Communication associations.   If the RelatedPerson does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
 */
class RelatedPersonCommunication extends fhirModels.BackboneElement {
    /**
     * Default constructor for RelatedPersonCommunication from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.language = new fhirModels.CodeableConcept(source.language);
        }
        if (source["preferred"] !== undefined) {
            this.preferred = source.preferred;
        }
        if (source["_preferred"] !== undefined) {
            this._preferred = new fhirModels.Element(source._preferred);
        }
    }
}
exports.RelatedPersonCommunication = RelatedPersonCommunication;
/**
 * Information about a person that is involved in the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.
 */
class RelatedPerson extends fhirModels.DomainResource {
    /**
     * Default constructor for RelatedPerson from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "RelatedPerson";
        if ((source['resourceType'] !== "RelatedPerson") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a RelatedPerson';
        }
        if (source["active"] !== undefined) {
            this.active = source.active;
        }
        if (source["_active"] !== undefined) {
            this._active = new fhirModels.Element(source._active);
        }
        if (source["address"] !== undefined) {
            this.address = source.address.map((x) => new fhirModels.Address(x));
        }
        if (source["birthDate"] !== undefined) {
            this.birthDate = source.birthDate;
        }
        if (source["_birthDate"] !== undefined) {
            this._birthDate = new fhirModels.Element(source._birthDate);
        }
        if (source["communication"] !== undefined) {
            this.communication = source.communication.map((x) => new fhirModels.RelatedPersonCommunication(x));
        }
        if (source["gender"] !== undefined) {
            this.gender = source.gender;
        }
        if (source["_gender"] !== undefined) {
            this._gender = new fhirModels.Element(source._gender);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["name"] !== undefined) {
            this.name = source.name.map((x) => new fhirModels.HumanName(x));
        }
        {
            this.patient = new fhirModels.Reference(source.patient);
        }
        if (source["period"] !== undefined) {
            this.period = new fhirModels.Period(source.period);
        }
        if (source["photo"] !== undefined) {
            this.photo = source.photo.map((x) => new fhirModels.Attachment(x));
        }
        if (source["relationship"] !== undefined) {
            this.relationship = source.relationship.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["telecom"] !== undefined) {
            this.telecom = source.telecom.map((x) => new fhirModels.ContactPoint(x));
        }
    }
}
exports.RelatedPerson = RelatedPerson;
/**
 * Code Values for the RelatedPerson.gender field
 */
var RelatedPersonGenderEnum;
(function (RelatedPersonGenderEnum) {
    RelatedPersonGenderEnum["MALE"] = "male";
    RelatedPersonGenderEnum["FEMALE"] = "female";
    RelatedPersonGenderEnum["OTHER"] = "other";
    RelatedPersonGenderEnum["UNKNOWN"] = "unknown";
})(RelatedPersonGenderEnum = exports.RelatedPersonGenderEnum || (exports.RelatedPersonGenderEnum = {}));
//# sourceMappingURL=RelatedPerson.js.map