"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestReportStatusEnum = exports.TestReportResultEnum = exports.TestReport = exports.TestReportTeardown = exports.TestReportTeardownAction = exports.TestReportTest = exports.TestReportTestAction = exports.TestReportSetup = exports.TestReportSetupAction = exports.TestReportSetupActionAssertResultEnum = exports.TestReportSetupActionAssert = exports.TestReportSetupActionOperationResultEnum = exports.TestReportSetupActionOperation = exports.TestReportParticipantTypeEnum = exports.TestReportParticipant = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * A participant in the test execution, either the execution engine, a client, or a server.
 */
class TestReportParticipant extends fhirModels.BackboneElement {
    /**
     * Default constructor for TestReportParticipant from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["display"] !== undefined) {
            this.display = source.display;
        }
        if (source["_display"] !== undefined) {
            this._display = new fhirModels.Element(source._display);
        }
        {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
        {
            this.uri = source.uri;
        }
        if (source["_uri"] !== undefined) {
            this._uri = new fhirModels.Element(source._uri);
        }
    }
}
exports.TestReportParticipant = TestReportParticipant;
/**
 * Code Values for the TestReport.participant.type field
 */
var TestReportParticipantTypeEnum;
(function (TestReportParticipantTypeEnum) {
    TestReportParticipantTypeEnum["TEST_ENGINE"] = "test-engine";
    TestReportParticipantTypeEnum["CLIENT"] = "client";
    TestReportParticipantTypeEnum["SERVER"] = "server";
})(TestReportParticipantTypeEnum = exports.TestReportParticipantTypeEnum || (exports.TestReportParticipantTypeEnum = {}));
/**
 * The operation performed.
 */
class TestReportSetupActionOperation extends fhirModels.BackboneElement {
    /**
     * Default constructor for TestReportSetupActionOperation from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["detail"] !== undefined) {
            this.detail = source.detail;
        }
        if (source["_detail"] !== undefined) {
            this._detail = new fhirModels.Element(source._detail);
        }
        if (source["message"] !== undefined) {
            this.message = source.message;
        }
        if (source["_message"] !== undefined) {
            this._message = new fhirModels.Element(source._message);
        }
        {
            this.result = source.result;
        }
        if (source["_result"] !== undefined) {
            this._result = new fhirModels.Element(source._result);
        }
    }
}
exports.TestReportSetupActionOperation = TestReportSetupActionOperation;
/**
 * Code Values for the TestReport.setup.action.operation.result field
 */
var TestReportSetupActionOperationResultEnum;
(function (TestReportSetupActionOperationResultEnum) {
    TestReportSetupActionOperationResultEnum["PASS"] = "pass";
    TestReportSetupActionOperationResultEnum["SKIP"] = "skip";
    TestReportSetupActionOperationResultEnum["FAIL"] = "fail";
    TestReportSetupActionOperationResultEnum["WARNING"] = "warning";
    TestReportSetupActionOperationResultEnum["ERROR"] = "error";
})(TestReportSetupActionOperationResultEnum = exports.TestReportSetupActionOperationResultEnum || (exports.TestReportSetupActionOperationResultEnum = {}));
/**
 * The results of the assertion performed on the previous operations.
 */
class TestReportSetupActionAssert extends fhirModels.BackboneElement {
    /**
     * Default constructor for TestReportSetupActionAssert from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["detail"] !== undefined) {
            this.detail = source.detail;
        }
        if (source["_detail"] !== undefined) {
            this._detail = new fhirModels.Element(source._detail);
        }
        if (source["message"] !== undefined) {
            this.message = source.message;
        }
        if (source["_message"] !== undefined) {
            this._message = new fhirModels.Element(source._message);
        }
        {
            this.result = source.result;
        }
        if (source["_result"] !== undefined) {
            this._result = new fhirModels.Element(source._result);
        }
    }
}
exports.TestReportSetupActionAssert = TestReportSetupActionAssert;
/**
 * Code Values for the TestReport.setup.action.assert.result field
 */
var TestReportSetupActionAssertResultEnum;
(function (TestReportSetupActionAssertResultEnum) {
    TestReportSetupActionAssertResultEnum["PASS"] = "pass";
    TestReportSetupActionAssertResultEnum["SKIP"] = "skip";
    TestReportSetupActionAssertResultEnum["FAIL"] = "fail";
    TestReportSetupActionAssertResultEnum["WARNING"] = "warning";
    TestReportSetupActionAssertResultEnum["ERROR"] = "error";
})(TestReportSetupActionAssertResultEnum = exports.TestReportSetupActionAssertResultEnum || (exports.TestReportSetupActionAssertResultEnum = {}));
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
class TestReportSetupAction extends fhirModels.BackboneElement {
    /**
     * Default constructor for TestReportSetupAction from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["assert"] !== undefined) {
            this.assert = new fhirModels.TestReportSetupActionAssert(source.assert);
        }
        if (source["operation"] !== undefined) {
            this.operation = new fhirModels.TestReportSetupActionOperation(source.operation);
        }
    }
}
exports.TestReportSetupAction = TestReportSetupAction;
/**
 * The results of the series of required setup operations before the tests were executed.
 */
class TestReportSetup extends fhirModels.BackboneElement {
    /**
     * Default constructor for TestReportSetup from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.action = source.action.map((x) => new fhirModels.TestReportSetupAction(x));
        }
    }
}
exports.TestReportSetup = TestReportSetup;
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
class TestReportTestAction extends fhirModels.BackboneElement {
    /**
     * Default constructor for TestReportTestAction from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["assert"] !== undefined) {
            this.assert = new fhirModels.TestReportSetupActionAssert(source.assert);
        }
        if (source["operation"] !== undefined) {
            this.operation = new fhirModels.TestReportSetupActionOperation(source.operation);
        }
    }
}
exports.TestReportTestAction = TestReportTestAction;
/**
 * A test executed from the test script.
 */
class TestReportTest extends fhirModels.BackboneElement {
    /**
     * Default constructor for TestReportTest from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.action = source.action.map((x) => new fhirModels.TestReportTestAction(x));
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
    }
}
exports.TestReportTest = TestReportTest;
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
class TestReportTeardownAction extends fhirModels.BackboneElement {
    /**
     * Default constructor for TestReportTeardownAction from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.operation = new fhirModels.TestReportSetupActionOperation(source.operation);
        }
    }
}
exports.TestReportTeardownAction = TestReportTeardownAction;
/**
 * The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
 */
class TestReportTeardown extends fhirModels.BackboneElement {
    /**
     * Default constructor for TestReportTeardown from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.action = source.action.map((x) => new fhirModels.TestReportTeardownAction(x));
        }
    }
}
exports.TestReportTeardown = TestReportTeardown;
/**
 * A summary of information based on the results of executing a TestScript.
 */
class TestReport extends fhirModels.DomainResource {
    /**
     * Default constructor for TestReport from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "TestReport";
        if ((source['resourceType'] !== "TestReport") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a TestReport';
        }
        if (source["identifier"] !== undefined) {
            this.identifier = new fhirModels.Identifier(source.identifier);
        }
        if (source["issued"] !== undefined) {
            this.issued = source.issued;
        }
        if (source["_issued"] !== undefined) {
            this._issued = new fhirModels.Element(source._issued);
        }
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["participant"] !== undefined) {
            this.participant = source.participant.map((x) => new fhirModels.TestReportParticipant(x));
        }
        {
            this.result = source.result;
        }
        if (source["_result"] !== undefined) {
            this._result = new fhirModels.Element(source._result);
        }
        if (source["score"] !== undefined) {
            this.score = source.score;
        }
        if (source["_score"] !== undefined) {
            this._score = new fhirModels.Element(source._score);
        }
        if (source["setup"] !== undefined) {
            this.setup = new fhirModels.TestReportSetup(source.setup);
        }
        {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["teardown"] !== undefined) {
            this.teardown = new fhirModels.TestReportTeardown(source.teardown);
        }
        if (source["test"] !== undefined) {
            this.test = source.test.map((x) => new fhirModels.TestReportTest(x));
        }
        if (source["tester"] !== undefined) {
            this.tester = source.tester;
        }
        if (source["_tester"] !== undefined) {
            this._tester = new fhirModels.Element(source._tester);
        }
        {
            this.testScript = new fhirModels.Reference(source.testScript);
        }
    }
}
exports.TestReport = TestReport;
/**
 * Code Values for the TestReport.result field
 */
var TestReportResultEnum;
(function (TestReportResultEnum) {
    TestReportResultEnum["PASS"] = "pass";
    TestReportResultEnum["FAIL"] = "fail";
    TestReportResultEnum["PENDING"] = "pending";
})(TestReportResultEnum = exports.TestReportResultEnum || (exports.TestReportResultEnum = {}));
/**
 * Code Values for the TestReport.status field
 */
var TestReportStatusEnum;
(function (TestReportStatusEnum) {
    TestReportStatusEnum["COMPLETED"] = "completed";
    TestReportStatusEnum["IN_PROGRESS"] = "in-progress";
    TestReportStatusEnum["WAITING"] = "waiting";
    TestReportStatusEnum["STOPPED"] = "stopped";
    TestReportStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(TestReportStatusEnum = exports.TestReportStatusEnum || (exports.TestReportStatusEnum = {}));
//# sourceMappingURL=TestReport.js.map