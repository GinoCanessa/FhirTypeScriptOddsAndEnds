"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResearchStudyStatusEnum = exports.ResearchStudy = exports.ResearchStudyObjective = exports.ResearchStudyArm = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Describes an expected sequence of events for one of the participants of a study.  E.g. Exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up.
 */
class ResearchStudyArm extends fhirModels.BackboneElement {
    /**
     * Default constructor for ResearchStudyArm from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.ResearchStudyArm = ResearchStudyArm;
/**
 * A goal that the study is aiming to achieve in terms of a scientific question to be answered by the analysis of data collected during the study.
 */
class ResearchStudyObjective extends fhirModels.BackboneElement {
    /**
     * Default constructor for ResearchStudyObjective from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.ResearchStudyObjective = ResearchStudyObjective;
/**
 * A process where a researcher or organization plans and then executes a series of steps intended to increase the field of healthcare-related knowledge.  This includes studies of safety, efficacy, comparative effectiveness and other information about medications, devices, therapies and other interventional and investigative techniques.  A ResearchStudy involves the gathering of information about human or animal subjects.
 */
class ResearchStudy extends fhirModels.DomainResource {
    /**
     * Default constructor for ResearchStudy from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "ResearchStudy";
        if ((source['resourceType'] !== "ResearchStudy") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a ResearchStudy';
        }
        if (source["arm"] !== undefined) {
            this.arm = source.arm.map((x) => new fhirModels.ResearchStudyArm(x));
        }
        if (source["category"] !== undefined) {
            this.category = source.category.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["condition"] !== undefined) {
            this.condition = source.condition.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["contact"] !== undefined) {
            this.contact = source.contact.map((x) => new fhirModels.ContactDetail(x));
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["enrollment"] !== undefined) {
            this.enrollment = source.enrollment.map((x) => new fhirModels.Reference(x));
        }
        if (source["focus"] !== undefined) {
            this.focus = source.focus.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["keyword"] !== undefined) {
            this.keyword = source.keyword.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["location"] !== undefined) {
            this.location = source.location.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["objective"] !== undefined) {
            this.objective = source.objective.map((x) => new fhirModels.ResearchStudyObjective(x));
        }
        if (source["partOf"] !== undefined) {
            this.partOf = source.partOf.map((x) => new fhirModels.Reference(x));
        }
        if (source["period"] !== undefined) {
            this.period = new fhirModels.Period(source.period);
        }
        if (source["phase"] !== undefined) {
            this.phase = new fhirModels.CodeableConcept(source.phase);
        }
        if (source["primaryPurposeType"] !== undefined) {
            this.primaryPurposeType = new fhirModels.CodeableConcept(source.primaryPurposeType);
        }
        if (source["principalInvestigator"] !== undefined) {
            this.principalInvestigator = new fhirModels.Reference(source.principalInvestigator);
        }
        if (source["protocol"] !== undefined) {
            this.protocol = source.protocol.map((x) => new fhirModels.Reference(x));
        }
        if (source["reasonStopped"] !== undefined) {
            this.reasonStopped = new fhirModels.CodeableConcept(source.reasonStopped);
        }
        if (source["relatedArtifact"] !== undefined) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhirModels.RelatedArtifact(x));
        }
        if (source["site"] !== undefined) {
            this.site = source.site.map((x) => new fhirModels.Reference(x));
        }
        if (source["sponsor"] !== undefined) {
            this.sponsor = new fhirModels.Reference(source.sponsor);
        }
        {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["title"] !== undefined) {
            this.title = source.title;
        }
        if (source["_title"] !== undefined) {
            this._title = new fhirModels.Element(source._title);
        }
    }
}
exports.ResearchStudy = ResearchStudy;
/**
 * Code Values for the ResearchStudy.status field
 */
var ResearchStudyStatusEnum;
(function (ResearchStudyStatusEnum) {
    ResearchStudyStatusEnum["ACTIVE"] = "active";
    ResearchStudyStatusEnum["ADMINISTRATIVELY_COMPLETED"] = "administratively-completed";
    ResearchStudyStatusEnum["APPROVED"] = "approved";
    ResearchStudyStatusEnum["CLOSED_TO_ACCRUAL"] = "closed-to-accrual";
    ResearchStudyStatusEnum["CLOSED_TO_ACCRUAL_AND_INTERVENTION"] = "closed-to-accrual-and-intervention";
    ResearchStudyStatusEnum["COMPLETED"] = "completed";
    ResearchStudyStatusEnum["DISAPPROVED"] = "disapproved";
    ResearchStudyStatusEnum["IN_REVIEW"] = "in-review";
    ResearchStudyStatusEnum["TEMPORARILY_CLOSED_TO_ACCRUAL"] = "temporarily-closed-to-accrual";
    ResearchStudyStatusEnum["TEMPORARILY_CLOSED_TO_ACCRUAL_AND_INTERVENTION"] = "temporarily-closed-to-accrual-and-intervention";
    ResearchStudyStatusEnum["WITHDRAWN"] = "withdrawn";
})(ResearchStudyStatusEnum = exports.ResearchStudyStatusEnum || (exports.ResearchStudyStatusEnum = {}));
//# sourceMappingURL=ResearchStudy.js.map