"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppointmentStatusEnum = exports.Appointment = exports.AppointmentParticipantStatusEnum = exports.AppointmentParticipantRequiredEnum = exports.AppointmentParticipant = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * List of participants involved in the appointment.
 */
class AppointmentParticipant extends fhirModels.BackboneElement {
    /**
     * Default constructor for AppointmentParticipant from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["actor"] !== undefined) {
            this.actor = new fhirModels.Reference(source.actor);
        }
        if (source["period"] !== undefined) {
            this.period = new fhirModels.Period(source.period);
        }
        if (source["required"] !== undefined) {
            this.required = source.required;
        }
        if (source["_required"] !== undefined) {
            this._required = new fhirModels.Element(source._required);
        }
        {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["type"] !== undefined) {
            this.type = source.type.map((x) => new fhirModels.CodeableConcept(x));
        }
    }
}
exports.AppointmentParticipant = AppointmentParticipant;
/**
 * Code Values for the Appointment.participant.required field
 */
var AppointmentParticipantRequiredEnum;
(function (AppointmentParticipantRequiredEnum) {
    AppointmentParticipantRequiredEnum["REQUIRED"] = "required";
    AppointmentParticipantRequiredEnum["OPTIONAL"] = "optional";
    AppointmentParticipantRequiredEnum["INFORMATION_ONLY"] = "information-only";
})(AppointmentParticipantRequiredEnum = exports.AppointmentParticipantRequiredEnum || (exports.AppointmentParticipantRequiredEnum = {}));
/**
 * Code Values for the Appointment.participant.status field
 */
var AppointmentParticipantStatusEnum;
(function (AppointmentParticipantStatusEnum) {
    AppointmentParticipantStatusEnum["ACCEPTED"] = "accepted";
    AppointmentParticipantStatusEnum["DECLINED"] = "declined";
    AppointmentParticipantStatusEnum["TENTATIVE"] = "tentative";
    AppointmentParticipantStatusEnum["NEEDS_ACTION"] = "needs-action";
})(AppointmentParticipantStatusEnum = exports.AppointmentParticipantStatusEnum || (exports.AppointmentParticipantStatusEnum = {}));
/**
 * A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).
 */
class Appointment extends fhirModels.DomainResource {
    /**
     * Default constructor for Appointment from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "Appointment";
        if ((source['resourceType'] !== "Appointment") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Appointment';
        }
        if (source["appointmentType"] !== undefined) {
            this.appointmentType = new fhirModels.CodeableConcept(source.appointmentType);
        }
        if (source["basedOn"] !== undefined) {
            this.basedOn = source.basedOn.map((x) => new fhirModels.Reference(x));
        }
        if (source["cancelationReason"] !== undefined) {
            this.cancelationReason = new fhirModels.CodeableConcept(source.cancelationReason);
        }
        if (source["comment"] !== undefined) {
            this.comment = source.comment;
        }
        if (source["_comment"] !== undefined) {
            this._comment = new fhirModels.Element(source._comment);
        }
        if (source["created"] !== undefined) {
            this.created = source.created;
        }
        if (source["_created"] !== undefined) {
            this._created = new fhirModels.Element(source._created);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["end"] !== undefined) {
            this.end = source.end;
        }
        if (source["_end"] !== undefined) {
            this._end = new fhirModels.Element(source._end);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["minutesDuration"] !== undefined) {
            this.minutesDuration = source.minutesDuration;
        }
        if (source["_minutesDuration"] !== undefined) {
            this._minutesDuration = new fhirModels.Element(source._minutesDuration);
        }
        {
            this.participant = source.participant.map((x) => new fhirModels.AppointmentParticipant(x));
        }
        if (source["patientInstruction"] !== undefined) {
            this.patientInstruction = source.patientInstruction;
        }
        if (source["_patientInstruction"] !== undefined) {
            this._patientInstruction = new fhirModels.Element(source._patientInstruction);
        }
        if (source["priority"] !== undefined) {
            this.priority = source.priority;
        }
        if (source["_priority"] !== undefined) {
            this._priority = new fhirModels.Element(source._priority);
        }
        if (source["reasonCode"] !== undefined) {
            this.reasonCode = source.reasonCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["reasonReference"] !== undefined) {
            this.reasonReference = source.reasonReference.map((x) => new fhirModels.Reference(x));
        }
        if (source["requestedPeriod"] !== undefined) {
            this.requestedPeriod = source.requestedPeriod.map((x) => new fhirModels.Period(x));
        }
        if (source["serviceCategory"] !== undefined) {
            this.serviceCategory = source.serviceCategory.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["serviceType"] !== undefined) {
            this.serviceType = source.serviceType.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["slot"] !== undefined) {
            this.slot = source.slot.map((x) => new fhirModels.Reference(x));
        }
        if (source["specialty"] !== undefined) {
            this.specialty = source.specialty.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["start"] !== undefined) {
            this.start = source.start;
        }
        if (source["_start"] !== undefined) {
            this._start = new fhirModels.Element(source._start);
        }
        {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["supportingInformation"] !== undefined) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhirModels.Reference(x));
        }
    }
}
exports.Appointment = Appointment;
/**
 * Code Values for the Appointment.status field
 */
var AppointmentStatusEnum;
(function (AppointmentStatusEnum) {
    AppointmentStatusEnum["PROPOSED"] = "proposed";
    AppointmentStatusEnum["PENDING"] = "pending";
    AppointmentStatusEnum["BOOKED"] = "booked";
    AppointmentStatusEnum["ARRIVED"] = "arrived";
    AppointmentStatusEnum["FULFILLED"] = "fulfilled";
    AppointmentStatusEnum["CANCELLED"] = "cancelled";
    AppointmentStatusEnum["NOSHOW"] = "noshow";
    AppointmentStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    AppointmentStatusEnum["CHECKED_IN"] = "checked-in";
    AppointmentStatusEnum["WAITLIST"] = "waitlist";
})(AppointmentStatusEnum = exports.AppointmentStatusEnum || (exports.AppointmentStatusEnum = {}));
//# sourceMappingURL=Appointment.js.map