"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImmunizationStatusEnum = exports.Immunization = exports.ImmunizationProtocolApplied = exports.ImmunizationReaction = exports.ImmunizationEducation = exports.ImmunizationPerformer = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Indicates who performed the immunization event.
 */
class ImmunizationPerformer extends fhirModels.BackboneElement {
    /**
     * Default constructor for ImmunizationPerformer from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.actor = new fhirModels.Reference(source.actor);
        }
        if (source["function"] !== undefined) {
            this.function = new fhirModels.CodeableConcept(source.function);
        }
    }
}
exports.ImmunizationPerformer = ImmunizationPerformer;
/**
 * Educational material presented to the patient (or guardian) at the time of vaccine administration.
 */
class ImmunizationEducation extends fhirModels.BackboneElement {
    /**
     * Default constructor for ImmunizationEducation from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["documentType"] !== undefined) {
            this.documentType = source.documentType;
        }
        if (source["_documentType"] !== undefined) {
            this._documentType = new fhirModels.Element(source._documentType);
        }
        if (source["presentationDate"] !== undefined) {
            this.presentationDate = source.presentationDate;
        }
        if (source["_presentationDate"] !== undefined) {
            this._presentationDate = new fhirModels.Element(source._presentationDate);
        }
        if (source["publicationDate"] !== undefined) {
            this.publicationDate = source.publicationDate;
        }
        if (source["_publicationDate"] !== undefined) {
            this._publicationDate = new fhirModels.Element(source._publicationDate);
        }
        if (source["reference"] !== undefined) {
            this.reference = source.reference;
        }
        if (source["_reference"] !== undefined) {
            this._reference = new fhirModels.Element(source._reference);
        }
    }
}
exports.ImmunizationEducation = ImmunizationEducation;
/**
 * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
 */
class ImmunizationReaction extends fhirModels.BackboneElement {
    /**
     * Default constructor for ImmunizationReaction from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["detail"] !== undefined) {
            this.detail = new fhirModels.Reference(source.detail);
        }
        if (source["reported"] !== undefined) {
            this.reported = source.reported;
        }
        if (source["_reported"] !== undefined) {
            this._reported = new fhirModels.Element(source._reported);
        }
    }
}
exports.ImmunizationReaction = ImmunizationReaction;
/**
 * The protocol (set of recommendations) being followed by the provider who administered the dose.
 */
class ImmunizationProtocolApplied extends fhirModels.BackboneElement {
    /**
     * Default constructor for ImmunizationProtocolApplied from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["authority"] !== undefined) {
            this.authority = new fhirModels.Reference(source.authority);
        }
        if (source["doseNumberPositiveInt"] !== undefined) {
            this.doseNumberPositiveInt = source.doseNumberPositiveInt;
        }
        if (source["_doseNumberPositiveInt"] !== undefined) {
            this._doseNumberPositiveInt = new fhirModels.Element(source._doseNumberPositiveInt);
        }
        if (source["doseNumberString"] !== undefined) {
            this.doseNumberString = source.doseNumberString;
        }
        if (source["_doseNumberString"] !== undefined) {
            this._doseNumberString = new fhirModels.Element(source._doseNumberString);
        }
        if (source["series"] !== undefined) {
            this.series = source.series;
        }
        if (source["_series"] !== undefined) {
            this._series = new fhirModels.Element(source._series);
        }
        if (source["seriesDosesPositiveInt"] !== undefined) {
            this.seriesDosesPositiveInt = source.seriesDosesPositiveInt;
        }
        if (source["_seriesDosesPositiveInt"] !== undefined) {
            this._seriesDosesPositiveInt = new fhirModels.Element(source._seriesDosesPositiveInt);
        }
        if (source["seriesDosesString"] !== undefined) {
            this.seriesDosesString = source.seriesDosesString;
        }
        if (source["_seriesDosesString"] !== undefined) {
            this._seriesDosesString = new fhirModels.Element(source._seriesDosesString);
        }
        if (source["targetDisease"] !== undefined) {
            this.targetDisease = source.targetDisease.map((x) => new fhirModels.CodeableConcept(x));
        }
    }
}
exports.ImmunizationProtocolApplied = ImmunizationProtocolApplied;
/**
 * Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
 */
class Immunization extends fhirModels.DomainResource {
    /**
     * Default constructor for Immunization from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "Immunization";
        if ((source['resourceType'] !== "Immunization") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Immunization';
        }
        if (source["doseQuantity"] !== undefined) {
            this.doseQuantity = new fhirModels.Quantity(source.doseQuantity);
        }
        if (source["education"] !== undefined) {
            this.education = source.education.map((x) => new fhirModels.ImmunizationEducation(x));
        }
        if (source["encounter"] !== undefined) {
            this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["expirationDate"] !== undefined) {
            this.expirationDate = source.expirationDate;
        }
        if (source["_expirationDate"] !== undefined) {
            this._expirationDate = new fhirModels.Element(source._expirationDate);
        }
        if (source["fundingSource"] !== undefined) {
            this.fundingSource = new fhirModels.CodeableConcept(source.fundingSource);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["isSubpotent"] !== undefined) {
            this.isSubpotent = source.isSubpotent;
        }
        if (source["_isSubpotent"] !== undefined) {
            this._isSubpotent = new fhirModels.Element(source._isSubpotent);
        }
        if (source["location"] !== undefined) {
            this.location = new fhirModels.Reference(source.location);
        }
        if (source["lotNumber"] !== undefined) {
            this.lotNumber = source.lotNumber;
        }
        if (source["_lotNumber"] !== undefined) {
            this._lotNumber = new fhirModels.Element(source._lotNumber);
        }
        if (source["manufacturer"] !== undefined) {
            this.manufacturer = new fhirModels.Reference(source.manufacturer);
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["occurrenceDateTime"] !== undefined) {
            this.occurrenceDateTime = source.occurrenceDateTime;
        }
        if (source["_occurrenceDateTime"] !== undefined) {
            this._occurrenceDateTime = new fhirModels.Element(source._occurrenceDateTime);
        }
        if (source["occurrenceString"] !== undefined) {
            this.occurrenceString = source.occurrenceString;
        }
        if (source["_occurrenceString"] !== undefined) {
            this._occurrenceString = new fhirModels.Element(source._occurrenceString);
        }
        {
            this.patient = new fhirModels.Reference(source.patient);
        }
        if (source["performer"] !== undefined) {
            this.performer = source.performer.map((x) => new fhirModels.ImmunizationPerformer(x));
        }
        if (source["primarySource"] !== undefined) {
            this.primarySource = source.primarySource;
        }
        if (source["_primarySource"] !== undefined) {
            this._primarySource = new fhirModels.Element(source._primarySource);
        }
        if (source["programEligibility"] !== undefined) {
            this.programEligibility = source.programEligibility.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["protocolApplied"] !== undefined) {
            this.protocolApplied = source.protocolApplied.map((x) => new fhirModels.ImmunizationProtocolApplied(x));
        }
        if (source["reaction"] !== undefined) {
            this.reaction = source.reaction.map((x) => new fhirModels.ImmunizationReaction(x));
        }
        if (source["reasonCode"] !== undefined) {
            this.reasonCode = source.reasonCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["reasonReference"] !== undefined) {
            this.reasonReference = source.reasonReference.map((x) => new fhirModels.Reference(x));
        }
        if (source["recorded"] !== undefined) {
            this.recorded = source.recorded;
        }
        if (source["_recorded"] !== undefined) {
            this._recorded = new fhirModels.Element(source._recorded);
        }
        if (source["reportOrigin"] !== undefined) {
            this.reportOrigin = new fhirModels.CodeableConcept(source.reportOrigin);
        }
        if (source["route"] !== undefined) {
            this.route = new fhirModels.CodeableConcept(source.route);
        }
        if (source["site"] !== undefined) {
            this.site = new fhirModels.CodeableConcept(source.site);
        }
        {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["statusReason"] !== undefined) {
            this.statusReason = new fhirModels.CodeableConcept(source.statusReason);
        }
        if (source["subpotentReason"] !== undefined) {
            this.subpotentReason = source.subpotentReason.map((x) => new fhirModels.CodeableConcept(x));
        }
        {
            this.vaccineCode = new fhirModels.CodeableConcept(source.vaccineCode);
        }
    }
}
exports.Immunization = Immunization;
/**
 * Code Values for the Immunization.status field
 */
var ImmunizationStatusEnum;
(function (ImmunizationStatusEnum) {
    ImmunizationStatusEnum["COMPLETED"] = "completed";
    ImmunizationStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    ImmunizationStatusEnum["NOT_DONE"] = "not-done";
})(ImmunizationStatusEnum = exports.ImmunizationStatusEnum || (exports.ImmunizationStatusEnum = {}));
//# sourceMappingURL=Immunization.js.map