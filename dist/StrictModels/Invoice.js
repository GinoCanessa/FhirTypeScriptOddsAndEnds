"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceStatusEnum = exports.Invoice = exports.InvoiceLineItem = exports.InvoiceLineItemPriceComponentTypeEnum = exports.InvoiceLineItemPriceComponent = exports.InvoiceParticipant = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Indicates who or what performed or participated in the charged service.
 */
class InvoiceParticipant extends fhirModels.BackboneElement {
    /**
     * Default constructor for InvoiceParticipant from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.actor = new fhirModels.Reference(source.actor);
        }
        if (source["role"] !== undefined) {
            this.role = new fhirModels.CodeableConcept(source.role);
        }
    }
}
exports.InvoiceParticipant = InvoiceParticipant;
/**
 * The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice as to how the prices have been calculated.
 */
class InvoiceLineItemPriceComponent extends fhirModels.BackboneElement {
    /**
     * Default constructor for InvoiceLineItemPriceComponent from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["amount"] !== undefined) {
            this.amount = new fhirModels.Money(source.amount);
        }
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["factor"] !== undefined) {
            this.factor = source.factor;
        }
        if (source["_factor"] !== undefined) {
            this._factor = new fhirModels.Element(source._factor);
        }
        {
            this.type = source.type;
        }
        if (source["_type"] !== undefined) {
            this._type = new fhirModels.Element(source._type);
        }
    }
}
exports.InvoiceLineItemPriceComponent = InvoiceLineItemPriceComponent;
/**
 * Code Values for the Invoice.lineItem.priceComponent.type field
 */
var InvoiceLineItemPriceComponentTypeEnum;
(function (InvoiceLineItemPriceComponentTypeEnum) {
    InvoiceLineItemPriceComponentTypeEnum["BASE"] = "base";
    InvoiceLineItemPriceComponentTypeEnum["SURCHARGE"] = "surcharge";
    InvoiceLineItemPriceComponentTypeEnum["DEDUCTION"] = "deduction";
    InvoiceLineItemPriceComponentTypeEnum["DISCOUNT"] = "discount";
    InvoiceLineItemPriceComponentTypeEnum["TAX"] = "tax";
    InvoiceLineItemPriceComponentTypeEnum["INFORMATIONAL"] = "informational";
})(InvoiceLineItemPriceComponentTypeEnum = exports.InvoiceLineItemPriceComponentTypeEnum || (exports.InvoiceLineItemPriceComponentTypeEnum = {}));
/**
 * Each line item represents one charge for goods and services rendered. Details such as date, code and amount are found in the referenced ChargeItem resource.
 */
class InvoiceLineItem extends fhirModels.BackboneElement {
    /**
     * Default constructor for InvoiceLineItem from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["chargeItemReference"] !== undefined) {
            this.chargeItemReference = new fhirModels.Reference(source.chargeItemReference);
        }
        if (source["chargeItemCodeableConcept"] !== undefined) {
            this.chargeItemCodeableConcept = new fhirModels.CodeableConcept(source.chargeItemCodeableConcept);
        }
        if (source["priceComponent"] !== undefined) {
            this.priceComponent = source.priceComponent.map((x) => new fhirModels.InvoiceLineItemPriceComponent(x));
        }
        if (source["sequence"] !== undefined) {
            this.sequence = source.sequence;
        }
        if (source["_sequence"] !== undefined) {
            this._sequence = new fhirModels.Element(source._sequence);
        }
    }
}
exports.InvoiceLineItem = InvoiceLineItem;
/**
 * Invoice containing collected ChargeItems from an Account with calculated individual and total price for Billing purpose.
 */
class Invoice extends fhirModels.DomainResource {
    /**
     * Default constructor for Invoice from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "Invoice";
        if ((source['resourceType'] !== "Invoice") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Invoice';
        }
        if (source["account"] !== undefined) {
            this.account = new fhirModels.Reference(source.account);
        }
        if (source["cancelledReason"] !== undefined) {
            this.cancelledReason = source.cancelledReason;
        }
        if (source["_cancelledReason"] !== undefined) {
            this._cancelledReason = new fhirModels.Element(source._cancelledReason);
        }
        if (source["date"] !== undefined) {
            this.date = source.date;
        }
        if (source["_date"] !== undefined) {
            this._date = new fhirModels.Element(source._date);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["issuer"] !== undefined) {
            this.issuer = new fhirModels.Reference(source.issuer);
        }
        if (source["lineItem"] !== undefined) {
            this.lineItem = source.lineItem.map((x) => new fhirModels.InvoiceLineItem(x));
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["participant"] !== undefined) {
            this.participant = source.participant.map((x) => new fhirModels.InvoiceParticipant(x));
        }
        if (source["paymentTerms"] !== undefined) {
            this.paymentTerms = source.paymentTerms;
        }
        if (source["_paymentTerms"] !== undefined) {
            this._paymentTerms = new fhirModels.Element(source._paymentTerms);
        }
        if (source["recipient"] !== undefined) {
            this.recipient = new fhirModels.Reference(source.recipient);
        }
        {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["subject"] !== undefined) {
            this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["totalGross"] !== undefined) {
            this.totalGross = new fhirModels.Money(source.totalGross);
        }
        if (source["totalNet"] !== undefined) {
            this.totalNet = new fhirModels.Money(source.totalNet);
        }
        if (source["totalPriceComponent"] !== undefined) {
            this.totalPriceComponent = source.totalPriceComponent.map((x) => new fhirModels.InvoiceLineItemPriceComponent(x));
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.Invoice = Invoice;
/**
 * Code Values for the Invoice.status field
 */
var InvoiceStatusEnum;
(function (InvoiceStatusEnum) {
    InvoiceStatusEnum["DRAFT"] = "draft";
    InvoiceStatusEnum["ISSUED"] = "issued";
    InvoiceStatusEnum["BALANCED"] = "balanced";
    InvoiceStatusEnum["CANCELLED"] = "cancelled";
    InvoiceStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(InvoiceStatusEnum = exports.InvoiceStatusEnum || (exports.InvoiceStatusEnum = {}));
//# sourceMappingURL=Invoice.js.map