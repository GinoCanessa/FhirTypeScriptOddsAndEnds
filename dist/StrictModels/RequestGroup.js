"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestGroupStatusEnum = exports.RequestGroupPriorityEnum = exports.RequestGroupIntentEnum = exports.RequestGroup = exports.RequestGroupActionSelectionBehaviorEnum = exports.RequestGroupActionRequiredBehaviorEnum = exports.RequestGroupActionPriorityEnum = exports.RequestGroupActionPrecheckBehaviorEnum = exports.RequestGroupActionGroupingBehaviorEnum = exports.RequestGroupActionCardinalityBehaviorEnum = exports.RequestGroupAction = exports.RequestGroupActionRelatedActionRelationshipEnum = exports.RequestGroupActionRelatedAction = exports.RequestGroupActionConditionKindEnum = exports.RequestGroupActionCondition = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all of the conditions are true.
 */
class RequestGroupActionCondition extends fhirModels.BackboneElement {
    /**
     * Default constructor for RequestGroupActionCondition from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["expression"] !== undefined) {
            this.expression = new fhirModels.Expression(source.expression);
        }
        {
            this.kind = source.kind;
        }
        if (source["_kind"] !== undefined) {
            this._kind = new fhirModels.Element(source._kind);
        }
    }
}
exports.RequestGroupActionCondition = RequestGroupActionCondition;
/**
 * Code Values for the RequestGroup.action.condition.kind field
 */
var RequestGroupActionConditionKindEnum;
(function (RequestGroupActionConditionKindEnum) {
    RequestGroupActionConditionKindEnum["APPLICABILITY"] = "applicability";
    RequestGroupActionConditionKindEnum["START"] = "start";
    RequestGroupActionConditionKindEnum["STOP"] = "stop";
})(RequestGroupActionConditionKindEnum = exports.RequestGroupActionConditionKindEnum || (exports.RequestGroupActionConditionKindEnum = {}));
/**
 * A relationship to another action such as "before" or "30-60 minutes after start of".
 */
class RequestGroupActionRelatedAction extends fhirModels.BackboneElement {
    /**
     * Default constructor for RequestGroupActionRelatedAction from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.actionId = source.actionId;
        }
        if (source["_actionId"] !== undefined) {
            this._actionId = new fhirModels.Element(source._actionId);
        }
        if (source["offsetDuration"] !== undefined) {
            this.offsetDuration = new fhirModels.Duration(source.offsetDuration);
        }
        if (source["offsetRange"] !== undefined) {
            this.offsetRange = new fhirModels.Range(source.offsetRange);
        }
        {
            this.relationship = source.relationship;
        }
        if (source["_relationship"] !== undefined) {
            this._relationship = new fhirModels.Element(source._relationship);
        }
    }
}
exports.RequestGroupActionRelatedAction = RequestGroupActionRelatedAction;
/**
 * Code Values for the RequestGroup.action.relatedAction.relationship field
 */
var RequestGroupActionRelatedActionRelationshipEnum;
(function (RequestGroupActionRelatedActionRelationshipEnum) {
    RequestGroupActionRelatedActionRelationshipEnum["BEFORE_START"] = "before-start";
    RequestGroupActionRelatedActionRelationshipEnum["BEFORE"] = "before";
    RequestGroupActionRelatedActionRelationshipEnum["BEFORE_END"] = "before-end";
    RequestGroupActionRelatedActionRelationshipEnum["CONCURRENT_WITH_START"] = "concurrent-with-start";
    RequestGroupActionRelatedActionRelationshipEnum["CONCURRENT"] = "concurrent";
    RequestGroupActionRelatedActionRelationshipEnum["CONCURRENT_WITH_END"] = "concurrent-with-end";
    RequestGroupActionRelatedActionRelationshipEnum["AFTER_START"] = "after-start";
    RequestGroupActionRelatedActionRelationshipEnum["AFTER"] = "after";
    RequestGroupActionRelatedActionRelationshipEnum["AFTER_END"] = "after-end";
})(RequestGroupActionRelatedActionRelationshipEnum = exports.RequestGroupActionRelatedActionRelationshipEnum || (exports.RequestGroupActionRelatedActionRelationshipEnum = {}));
/**
 * The actions, if any, produced by the evaluation of the artifact.
 */
class RequestGroupAction extends fhirModels.BackboneElement {
    /**
     * Default constructor for RequestGroupAction from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["action"] !== undefined) {
            this.action = source.action.map((x) => new fhirModels.RequestGroupAction(x));
        }
        if (source["cardinalityBehavior"] !== undefined) {
            this.cardinalityBehavior = source.cardinalityBehavior;
        }
        if (source["_cardinalityBehavior"] !== undefined) {
            this._cardinalityBehavior = new fhirModels.Element(source._cardinalityBehavior);
        }
        if (source["code"] !== undefined) {
            this.code = source.code.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["condition"] !== undefined) {
            this.condition = source.condition.map((x) => new fhirModels.RequestGroupActionCondition(x));
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["documentation"] !== undefined) {
            this.documentation = source.documentation.map((x) => new fhirModels.RelatedArtifact(x));
        }
        if (source["groupingBehavior"] !== undefined) {
            this.groupingBehavior = source.groupingBehavior;
        }
        if (source["_groupingBehavior"] !== undefined) {
            this._groupingBehavior = new fhirModels.Element(source._groupingBehavior);
        }
        if (source["participant"] !== undefined) {
            this.participant = source.participant.map((x) => new fhirModels.Reference(x));
        }
        if (source["precheckBehavior"] !== undefined) {
            this.precheckBehavior = source.precheckBehavior;
        }
        if (source["_precheckBehavior"] !== undefined) {
            this._precheckBehavior = new fhirModels.Element(source._precheckBehavior);
        }
        if (source["prefix"] !== undefined) {
            this.prefix = source.prefix;
        }
        if (source["_prefix"] !== undefined) {
            this._prefix = new fhirModels.Element(source._prefix);
        }
        if (source["priority"] !== undefined) {
            this.priority = source.priority;
        }
        if (source["_priority"] !== undefined) {
            this._priority = new fhirModels.Element(source._priority);
        }
        if (source["relatedAction"] !== undefined) {
            this.relatedAction = source.relatedAction.map((x) => new fhirModels.RequestGroupActionRelatedAction(x));
        }
        if (source["requiredBehavior"] !== undefined) {
            this.requiredBehavior = source.requiredBehavior;
        }
        if (source["_requiredBehavior"] !== undefined) {
            this._requiredBehavior = new fhirModels.Element(source._requiredBehavior);
        }
        if (source["resource"] !== undefined) {
            this.resource = new fhirModels.Reference(source.resource);
        }
        if (source["selectionBehavior"] !== undefined) {
            this.selectionBehavior = source.selectionBehavior;
        }
        if (source["_selectionBehavior"] !== undefined) {
            this._selectionBehavior = new fhirModels.Element(source._selectionBehavior);
        }
        if (source["textEquivalent"] !== undefined) {
            this.textEquivalent = source.textEquivalent;
        }
        if (source["_textEquivalent"] !== undefined) {
            this._textEquivalent = new fhirModels.Element(source._textEquivalent);
        }
        if (source["timingDateTime"] !== undefined) {
            this.timingDateTime = source.timingDateTime;
        }
        if (source["_timingDateTime"] !== undefined) {
            this._timingDateTime = new fhirModels.Element(source._timingDateTime);
        }
        if (source["timingAge"] !== undefined) {
            this.timingAge = new fhirModels.Age(source.timingAge);
        }
        if (source["timingPeriod"] !== undefined) {
            this.timingPeriod = new fhirModels.Period(source.timingPeriod);
        }
        if (source["timingDuration"] !== undefined) {
            this.timingDuration = new fhirModels.Duration(source.timingDuration);
        }
        if (source["timingRange"] !== undefined) {
            this.timingRange = new fhirModels.Range(source.timingRange);
        }
        if (source["timingTiming"] !== undefined) {
            this.timingTiming = new fhirModels.Timing(source.timingTiming);
        }
        if (source["title"] !== undefined) {
            this.title = source.title;
        }
        if (source["_title"] !== undefined) {
            this._title = new fhirModels.Element(source._title);
        }
        if (source["type"] !== undefined) {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
    }
}
exports.RequestGroupAction = RequestGroupAction;
/**
 * Code Values for the RequestGroup.action.cardinalityBehavior field
 */
var RequestGroupActionCardinalityBehaviorEnum;
(function (RequestGroupActionCardinalityBehaviorEnum) {
    RequestGroupActionCardinalityBehaviorEnum["SINGLE"] = "single";
    RequestGroupActionCardinalityBehaviorEnum["MULTIPLE"] = "multiple";
})(RequestGroupActionCardinalityBehaviorEnum = exports.RequestGroupActionCardinalityBehaviorEnum || (exports.RequestGroupActionCardinalityBehaviorEnum = {}));
/**
 * Code Values for the RequestGroup.action.groupingBehavior field
 */
var RequestGroupActionGroupingBehaviorEnum;
(function (RequestGroupActionGroupingBehaviorEnum) {
    RequestGroupActionGroupingBehaviorEnum["VISUAL_GROUP"] = "visual-group";
    RequestGroupActionGroupingBehaviorEnum["LOGICAL_GROUP"] = "logical-group";
    RequestGroupActionGroupingBehaviorEnum["SENTENCE_GROUP"] = "sentence-group";
})(RequestGroupActionGroupingBehaviorEnum = exports.RequestGroupActionGroupingBehaviorEnum || (exports.RequestGroupActionGroupingBehaviorEnum = {}));
/**
 * Code Values for the RequestGroup.action.precheckBehavior field
 */
var RequestGroupActionPrecheckBehaviorEnum;
(function (RequestGroupActionPrecheckBehaviorEnum) {
    RequestGroupActionPrecheckBehaviorEnum["YES"] = "yes";
    RequestGroupActionPrecheckBehaviorEnum["NO"] = "no";
})(RequestGroupActionPrecheckBehaviorEnum = exports.RequestGroupActionPrecheckBehaviorEnum || (exports.RequestGroupActionPrecheckBehaviorEnum = {}));
/**
 * Code Values for the RequestGroup.action.priority field
 */
var RequestGroupActionPriorityEnum;
(function (RequestGroupActionPriorityEnum) {
    RequestGroupActionPriorityEnum["ROUTINE"] = "routine";
    RequestGroupActionPriorityEnum["URGENT"] = "urgent";
    RequestGroupActionPriorityEnum["ASAP"] = "asap";
    RequestGroupActionPriorityEnum["STAT"] = "stat";
})(RequestGroupActionPriorityEnum = exports.RequestGroupActionPriorityEnum || (exports.RequestGroupActionPriorityEnum = {}));
/**
 * Code Values for the RequestGroup.action.requiredBehavior field
 */
var RequestGroupActionRequiredBehaviorEnum;
(function (RequestGroupActionRequiredBehaviorEnum) {
    RequestGroupActionRequiredBehaviorEnum["MUST"] = "must";
    RequestGroupActionRequiredBehaviorEnum["COULD"] = "could";
    RequestGroupActionRequiredBehaviorEnum["MUST_UNLESS_DOCUMENTED"] = "must-unless-documented";
})(RequestGroupActionRequiredBehaviorEnum = exports.RequestGroupActionRequiredBehaviorEnum || (exports.RequestGroupActionRequiredBehaviorEnum = {}));
/**
 * Code Values for the RequestGroup.action.selectionBehavior field
 */
var RequestGroupActionSelectionBehaviorEnum;
(function (RequestGroupActionSelectionBehaviorEnum) {
    RequestGroupActionSelectionBehaviorEnum["ANY"] = "any";
    RequestGroupActionSelectionBehaviorEnum["ALL"] = "all";
    RequestGroupActionSelectionBehaviorEnum["ALL_OR_NONE"] = "all-or-none";
    RequestGroupActionSelectionBehaviorEnum["EXACTLY_ONE"] = "exactly-one";
    RequestGroupActionSelectionBehaviorEnum["AT_MOST_ONE"] = "at-most-one";
    RequestGroupActionSelectionBehaviorEnum["ONE_OR_MORE"] = "one-or-more";
})(RequestGroupActionSelectionBehaviorEnum = exports.RequestGroupActionSelectionBehaviorEnum || (exports.RequestGroupActionSelectionBehaviorEnum = {}));
/**
 * A group of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one".
 */
class RequestGroup extends fhirModels.DomainResource {
    /**
     * Default constructor for RequestGroup from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "RequestGroup";
        if ((source['resourceType'] !== "RequestGroup") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a RequestGroup';
        }
        if (source["action"] !== undefined) {
            this.action = source.action.map((x) => new fhirModels.RequestGroupAction(x));
        }
        if (source["author"] !== undefined) {
            this.author = new fhirModels.Reference(source.author);
        }
        if (source["authoredOn"] !== undefined) {
            this.authoredOn = source.authoredOn;
        }
        if (source["_authoredOn"] !== undefined) {
            this._authoredOn = new fhirModels.Element(source._authoredOn);
        }
        if (source["basedOn"] !== undefined) {
            this.basedOn = source.basedOn.map((x) => new fhirModels.Reference(x));
        }
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["encounter"] !== undefined) {
            this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["groupIdentifier"] !== undefined) {
            this.groupIdentifier = new fhirModels.Identifier(source.groupIdentifier);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["instantiatesCanonical"] !== undefined) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => (x));
        }
        if (source["_instantiatesCanonical"] !== undefined) {
            this._instantiatesCanonical = source._instantiatesCanonical.map((x) => new fhirModels.Element(x));
        }
        if (source["instantiatesUri"] !== undefined) {
            this.instantiatesUri = source.instantiatesUri.map((x) => (x));
        }
        if (source["_instantiatesUri"] !== undefined) {
            this._instantiatesUri = source._instantiatesUri.map((x) => new fhirModels.Element(x));
        }
        {
            this.intent = source.intent;
        }
        if (source["_intent"] !== undefined) {
            this._intent = new fhirModels.Element(source._intent);
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["priority"] !== undefined) {
            this.priority = source.priority;
        }
        if (source["_priority"] !== undefined) {
            this._priority = new fhirModels.Element(source._priority);
        }
        if (source["reasonCode"] !== undefined) {
            this.reasonCode = source.reasonCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["reasonReference"] !== undefined) {
            this.reasonReference = source.reasonReference.map((x) => new fhirModels.Reference(x));
        }
        if (source["replaces"] !== undefined) {
            this.replaces = source.replaces.map((x) => new fhirModels.Reference(x));
        }
        {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["subject"] !== undefined) {
            this.subject = new fhirModels.Reference(source.subject);
        }
    }
}
exports.RequestGroup = RequestGroup;
/**
 * Code Values for the RequestGroup.intent field
 */
var RequestGroupIntentEnum;
(function (RequestGroupIntentEnum) {
    RequestGroupIntentEnum["PROPOSAL"] = "proposal";
    RequestGroupIntentEnum["PLAN"] = "plan";
    RequestGroupIntentEnum["DIRECTIVE"] = "directive";
    RequestGroupIntentEnum["ORDER"] = "order";
    RequestGroupIntentEnum["ORIGINAL_ORDER"] = "original-order";
    RequestGroupIntentEnum["REFLEX_ORDER"] = "reflex-order";
    RequestGroupIntentEnum["FILLER_ORDER"] = "filler-order";
    RequestGroupIntentEnum["INSTANCE_ORDER"] = "instance-order";
    RequestGroupIntentEnum["OPTION"] = "option";
})(RequestGroupIntentEnum = exports.RequestGroupIntentEnum || (exports.RequestGroupIntentEnum = {}));
/**
 * Code Values for the RequestGroup.priority field
 */
var RequestGroupPriorityEnum;
(function (RequestGroupPriorityEnum) {
    RequestGroupPriorityEnum["ROUTINE"] = "routine";
    RequestGroupPriorityEnum["URGENT"] = "urgent";
    RequestGroupPriorityEnum["ASAP"] = "asap";
    RequestGroupPriorityEnum["STAT"] = "stat";
})(RequestGroupPriorityEnum = exports.RequestGroupPriorityEnum || (exports.RequestGroupPriorityEnum = {}));
/**
 * Code Values for the RequestGroup.status field
 */
var RequestGroupStatusEnum;
(function (RequestGroupStatusEnum) {
    RequestGroupStatusEnum["DRAFT"] = "draft";
    RequestGroupStatusEnum["ACTIVE"] = "active";
    RequestGroupStatusEnum["ON_HOLD"] = "on-hold";
    RequestGroupStatusEnum["REVOKED"] = "revoked";
    RequestGroupStatusEnum["COMPLETED"] = "completed";
    RequestGroupStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    RequestGroupStatusEnum["UNKNOWN"] = "unknown";
})(RequestGroupStatusEnum = exports.RequestGroupStatusEnum || (exports.RequestGroupStatusEnum = {}));
//# sourceMappingURL=RequestGroup.js.map