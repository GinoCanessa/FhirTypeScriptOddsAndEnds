"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MedicationStatementStatusEnum = exports.MedicationStatement = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from sources such as the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains.
 * The primary difference between a medication statement and a medication administration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medication statement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the medication statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.
 */
class MedicationStatement extends fhirModels.DomainResource {
    /**
     * Default constructor for MedicationStatement from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "MedicationStatement";
        if ((source['resourceType'] !== "MedicationStatement") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a MedicationStatement';
        }
        if (source["basedOn"] !== undefined) {
            this.basedOn = source.basedOn.map((x) => new fhirModels.Reference(x));
        }
        if (source["category"] !== undefined) {
            this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["context"] !== undefined) {
            this.context = new fhirModels.Reference(source.context);
        }
        if (source["dateAsserted"] !== undefined) {
            this.dateAsserted = source.dateAsserted;
        }
        if (source["_dateAsserted"] !== undefined) {
            this._dateAsserted = new fhirModels.Element(source._dateAsserted);
        }
        if (source["derivedFrom"] !== undefined) {
            this.derivedFrom = source.derivedFrom.map((x) => new fhirModels.Reference(x));
        }
        if (source["dosage"] !== undefined) {
            this.dosage = source.dosage.map((x) => new fhirModels.Dosage(x));
        }
        if (source["effectiveDateTime"] !== undefined) {
            this.effectiveDateTime = source.effectiveDateTime;
        }
        if (source["_effectiveDateTime"] !== undefined) {
            this._effectiveDateTime = new fhirModels.Element(source._effectiveDateTime);
        }
        if (source["effectivePeriod"] !== undefined) {
            this.effectivePeriod = new fhirModels.Period(source.effectivePeriod);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["informationSource"] !== undefined) {
            this.informationSource = new fhirModels.Reference(source.informationSource);
        }
        if (source["medicationCodeableConcept"] !== undefined) {
            this.medicationCodeableConcept = new fhirModels.CodeableConcept(source.medicationCodeableConcept);
        }
        if (source["medicationReference"] !== undefined) {
            this.medicationReference = new fhirModels.Reference(source.medicationReference);
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["partOf"] !== undefined) {
            this.partOf = source.partOf.map((x) => new fhirModels.Reference(x));
        }
        if (source["reasonCode"] !== undefined) {
            this.reasonCode = source.reasonCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["reasonReference"] !== undefined) {
            this.reasonReference = source.reasonReference.map((x) => new fhirModels.Reference(x));
        }
        {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        if (source["statusReason"] !== undefined) {
            this.statusReason = source.statusReason.map((x) => new fhirModels.CodeableConcept(x));
        }
        {
            this.subject = new fhirModels.Reference(source.subject);
        }
    }
}
exports.MedicationStatement = MedicationStatement;
/**
 * Code Values for the MedicationStatement.status field
 */
var MedicationStatementStatusEnum;
(function (MedicationStatementStatusEnum) {
    MedicationStatementStatusEnum["ACTIVE"] = "active";
    MedicationStatementStatusEnum["COMPLETED"] = "completed";
    MedicationStatementStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    MedicationStatementStatusEnum["INTENDED"] = "intended";
    MedicationStatementStatusEnum["STOPPED"] = "stopped";
    MedicationStatementStatusEnum["ON_HOLD"] = "on-hold";
    MedicationStatementStatusEnum["UNKNOWN"] = "unknown";
    MedicationStatementStatusEnum["NOT_TAKEN"] = "not-taken";
})(MedicationStatementStatusEnum = exports.MedicationStatementStatusEnum || (exports.MedicationStatementStatusEnum = {}));
//# sourceMappingURL=MedicationStatement.js.map