"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeviceRequestStatusEnum = exports.DeviceRequestPriorityEnum = exports.DeviceRequestIntentEnum = exports.DeviceRequest = exports.DeviceRequestParameter = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Specific parameters for the ordered item.  For example, the prism value for lenses.
 */
class DeviceRequestParameter extends fhirModels.BackboneElement {
    /**
     * Default constructor for DeviceRequestParameter from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["code"] !== undefined) {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
        if (source["valueCodeableConcept"] !== undefined) {
            this.valueCodeableConcept = new fhirModels.CodeableConcept(source.valueCodeableConcept);
        }
        if (source["valueQuantity"] !== undefined) {
            this.valueQuantity = new fhirModels.Quantity(source.valueQuantity);
        }
        if (source["valueRange"] !== undefined) {
            this.valueRange = new fhirModels.Range(source.valueRange);
        }
        if (source["valueBoolean"] !== undefined) {
            this.valueBoolean = source.valueBoolean;
        }
        if (source["_valueBoolean"] !== undefined) {
            this._valueBoolean = new fhirModels.Element(source._valueBoolean);
        }
    }
}
exports.DeviceRequestParameter = DeviceRequestParameter;
/**
 * Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.
 */
class DeviceRequest extends fhirModels.DomainResource {
    /**
     * Default constructor for DeviceRequest from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "DeviceRequest";
        if ((source['resourceType'] !== "DeviceRequest") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a DeviceRequest';
        }
        if (source["authoredOn"] !== undefined) {
            this.authoredOn = source.authoredOn;
        }
        if (source["_authoredOn"] !== undefined) {
            this._authoredOn = new fhirModels.Element(source._authoredOn);
        }
        if (source["basedOn"] !== undefined) {
            this.basedOn = source.basedOn.map((x) => new fhirModels.Reference(x));
        }
        if (source["codeReference"] !== undefined) {
            this.codeReference = new fhirModels.Reference(source.codeReference);
        }
        if (source["codeCodeableConcept"] !== undefined) {
            this.codeCodeableConcept = new fhirModels.CodeableConcept(source.codeCodeableConcept);
        }
        if (source["encounter"] !== undefined) {
            this.encounter = new fhirModels.Reference(source.encounter);
        }
        if (source["groupIdentifier"] !== undefined) {
            this.groupIdentifier = new fhirModels.Identifier(source.groupIdentifier);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["instantiatesCanonical"] !== undefined) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => (x));
        }
        if (source["_instantiatesCanonical"] !== undefined) {
            this._instantiatesCanonical = source._instantiatesCanonical.map((x) => new fhirModels.Element(x));
        }
        if (source["instantiatesUri"] !== undefined) {
            this.instantiatesUri = source.instantiatesUri.map((x) => (x));
        }
        if (source["_instantiatesUri"] !== undefined) {
            this._instantiatesUri = source._instantiatesUri.map((x) => new fhirModels.Element(x));
        }
        if (source["insurance"] !== undefined) {
            this.insurance = source.insurance.map((x) => new fhirModels.Reference(x));
        }
        {
            this.intent = source.intent;
        }
        if (source["_intent"] !== undefined) {
            this._intent = new fhirModels.Element(source._intent);
        }
        if (source["note"] !== undefined) {
            this.note = source.note.map((x) => new fhirModels.Annotation(x));
        }
        if (source["occurrenceDateTime"] !== undefined) {
            this.occurrenceDateTime = source.occurrenceDateTime;
        }
        if (source["_occurrenceDateTime"] !== undefined) {
            this._occurrenceDateTime = new fhirModels.Element(source._occurrenceDateTime);
        }
        if (source["occurrencePeriod"] !== undefined) {
            this.occurrencePeriod = new fhirModels.Period(source.occurrencePeriod);
        }
        if (source["occurrenceTiming"] !== undefined) {
            this.occurrenceTiming = new fhirModels.Timing(source.occurrenceTiming);
        }
        if (source["parameter"] !== undefined) {
            this.parameter = source.parameter.map((x) => new fhirModels.DeviceRequestParameter(x));
        }
        if (source["performer"] !== undefined) {
            this.performer = new fhirModels.Reference(source.performer);
        }
        if (source["performerType"] !== undefined) {
            this.performerType = new fhirModels.CodeableConcept(source.performerType);
        }
        if (source["priority"] !== undefined) {
            this.priority = source.priority;
        }
        if (source["_priority"] !== undefined) {
            this._priority = new fhirModels.Element(source._priority);
        }
        if (source["priorRequest"] !== undefined) {
            this.priorRequest = source.priorRequest.map((x) => new fhirModels.Reference(x));
        }
        if (source["reasonCode"] !== undefined) {
            this.reasonCode = source.reasonCode.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["reasonReference"] !== undefined) {
            this.reasonReference = source.reasonReference.map((x) => new fhirModels.Reference(x));
        }
        if (source["relevantHistory"] !== undefined) {
            this.relevantHistory = source.relevantHistory.map((x) => new fhirModels.Reference(x));
        }
        if (source["requester"] !== undefined) {
            this.requester = new fhirModels.Reference(source.requester);
        }
        if (source["status"] !== undefined) {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
        {
            this.subject = new fhirModels.Reference(source.subject);
        }
        if (source["supportingInfo"] !== undefined) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhirModels.Reference(x));
        }
    }
}
exports.DeviceRequest = DeviceRequest;
/**
 * Code Values for the DeviceRequest.intent field
 */
var DeviceRequestIntentEnum;
(function (DeviceRequestIntentEnum) {
    DeviceRequestIntentEnum["PROPOSAL"] = "proposal";
    DeviceRequestIntentEnum["PLAN"] = "plan";
    DeviceRequestIntentEnum["DIRECTIVE"] = "directive";
    DeviceRequestIntentEnum["ORDER"] = "order";
    DeviceRequestIntentEnum["ORIGINAL_ORDER"] = "original-order";
    DeviceRequestIntentEnum["REFLEX_ORDER"] = "reflex-order";
    DeviceRequestIntentEnum["FILLER_ORDER"] = "filler-order";
    DeviceRequestIntentEnum["INSTANCE_ORDER"] = "instance-order";
    DeviceRequestIntentEnum["OPTION"] = "option";
})(DeviceRequestIntentEnum = exports.DeviceRequestIntentEnum || (exports.DeviceRequestIntentEnum = {}));
/**
 * Code Values for the DeviceRequest.priority field
 */
var DeviceRequestPriorityEnum;
(function (DeviceRequestPriorityEnum) {
    DeviceRequestPriorityEnum["ROUTINE"] = "routine";
    DeviceRequestPriorityEnum["URGENT"] = "urgent";
    DeviceRequestPriorityEnum["ASAP"] = "asap";
    DeviceRequestPriorityEnum["STAT"] = "stat";
})(DeviceRequestPriorityEnum = exports.DeviceRequestPriorityEnum || (exports.DeviceRequestPriorityEnum = {}));
/**
 * Code Values for the DeviceRequest.status field
 */
var DeviceRequestStatusEnum;
(function (DeviceRequestStatusEnum) {
    DeviceRequestStatusEnum["DRAFT"] = "draft";
    DeviceRequestStatusEnum["ACTIVE"] = "active";
    DeviceRequestStatusEnum["ON_HOLD"] = "on-hold";
    DeviceRequestStatusEnum["REVOKED"] = "revoked";
    DeviceRequestStatusEnum["COMPLETED"] = "completed";
    DeviceRequestStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    DeviceRequestStatusEnum["UNKNOWN"] = "unknown";
})(DeviceRequestStatusEnum = exports.DeviceRequestStatusEnum || (exports.DeviceRequestStatusEnum = {}));
//# sourceMappingURL=DeviceRequest.js.map