"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoverageEligibilityResponseStatusEnum = exports.CoverageEligibilityResponsePurposeEnum = exports.CoverageEligibilityResponseOutcomeEnum = exports.CoverageEligibilityResponse = exports.CoverageEligibilityResponseError = exports.CoverageEligibilityResponseInsurance = exports.CoverageEligibilityResponseInsuranceItem = exports.CoverageEligibilityResponseInsuranceItemBenefit = void 0;
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
const fhirModels = __importStar(require("../strictmodels"));
/**
 * Benefits used to date.
 */
class CoverageEligibilityResponseInsuranceItemBenefit extends fhirModels.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityResponseInsuranceItemBenefit from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["allowedUnsignedInt"] !== undefined) {
            this.allowedUnsignedInt = source.allowedUnsignedInt;
        }
        if (source["_allowedUnsignedInt"] !== undefined) {
            this._allowedUnsignedInt = new fhirModels.Element(source._allowedUnsignedInt);
        }
        if (source["allowedString"] !== undefined) {
            this.allowedString = source.allowedString;
        }
        if (source["_allowedString"] !== undefined) {
            this._allowedString = new fhirModels.Element(source._allowedString);
        }
        if (source["allowedMoney"] !== undefined) {
            this.allowedMoney = new fhirModels.Money(source.allowedMoney);
        }
        {
            this.type = new fhirModels.CodeableConcept(source.type);
        }
        if (source["usedUnsignedInt"] !== undefined) {
            this.usedUnsignedInt = source.usedUnsignedInt;
        }
        if (source["_usedUnsignedInt"] !== undefined) {
            this._usedUnsignedInt = new fhirModels.Element(source._usedUnsignedInt);
        }
        if (source["usedString"] !== undefined) {
            this.usedString = source.usedString;
        }
        if (source["_usedString"] !== undefined) {
            this._usedString = new fhirModels.Element(source._usedString);
        }
        if (source["usedMoney"] !== undefined) {
            this.usedMoney = new fhirModels.Money(source.usedMoney);
        }
    }
}
exports.CoverageEligibilityResponseInsuranceItemBenefit = CoverageEligibilityResponseInsuranceItemBenefit;
/**
 * Benefits and optionally current balances, and authorization details by category or service.
 */
class CoverageEligibilityResponseInsuranceItem extends fhirModels.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityResponseInsuranceItem from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["authorizationRequired"] !== undefined) {
            this.authorizationRequired = source.authorizationRequired;
        }
        if (source["_authorizationRequired"] !== undefined) {
            this._authorizationRequired = new fhirModels.Element(source._authorizationRequired);
        }
        if (source["authorizationSupporting"] !== undefined) {
            this.authorizationSupporting = source.authorizationSupporting.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["authorizationUrl"] !== undefined) {
            this.authorizationUrl = source.authorizationUrl;
        }
        if (source["_authorizationUrl"] !== undefined) {
            this._authorizationUrl = new fhirModels.Element(source._authorizationUrl);
        }
        if (source["benefit"] !== undefined) {
            this.benefit = source.benefit.map((x) => new fhirModels.CoverageEligibilityResponseInsuranceItemBenefit(x));
        }
        if (source["category"] !== undefined) {
            this.category = new fhirModels.CodeableConcept(source.category);
        }
        if (source["description"] !== undefined) {
            this.description = source.description;
        }
        if (source["_description"] !== undefined) {
            this._description = new fhirModels.Element(source._description);
        }
        if (source["excluded"] !== undefined) {
            this.excluded = source.excluded;
        }
        if (source["_excluded"] !== undefined) {
            this._excluded = new fhirModels.Element(source._excluded);
        }
        if (source["modifier"] !== undefined) {
            this.modifier = source.modifier.map((x) => new fhirModels.CodeableConcept(x));
        }
        if (source["name"] !== undefined) {
            this.name = source.name;
        }
        if (source["_name"] !== undefined) {
            this._name = new fhirModels.Element(source._name);
        }
        if (source["network"] !== undefined) {
            this.network = new fhirModels.CodeableConcept(source.network);
        }
        if (source["productOrService"] !== undefined) {
            this.productOrService = new fhirModels.CodeableConcept(source.productOrService);
        }
        if (source["provider"] !== undefined) {
            this.provider = new fhirModels.Reference(source.provider);
        }
        if (source["term"] !== undefined) {
            this.term = new fhirModels.CodeableConcept(source.term);
        }
        if (source["unit"] !== undefined) {
            this.unit = new fhirModels.CodeableConcept(source.unit);
        }
    }
}
exports.CoverageEligibilityResponseInsuranceItem = CoverageEligibilityResponseInsuranceItem;
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
class CoverageEligibilityResponseInsurance extends fhirModels.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityResponseInsurance from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        if (source["benefitPeriod"] !== undefined) {
            this.benefitPeriod = new fhirModels.Period(source.benefitPeriod);
        }
        {
            this.coverage = new fhirModels.Reference(source.coverage);
        }
        if (source["inforce"] !== undefined) {
            this.inforce = source.inforce;
        }
        if (source["_inforce"] !== undefined) {
            this._inforce = new fhirModels.Element(source._inforce);
        }
        if (source["item"] !== undefined) {
            this.item = source.item.map((x) => new fhirModels.CoverageEligibilityResponseInsuranceItem(x));
        }
    }
}
exports.CoverageEligibilityResponseInsurance = CoverageEligibilityResponseInsurance;
/**
 * Errors encountered during the processing of the request.
 */
class CoverageEligibilityResponseError extends fhirModels.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityResponseError from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        {
            this.code = new fhirModels.CodeableConcept(source.code);
        }
    }
}
exports.CoverageEligibilityResponseError = CoverageEligibilityResponseError;
/**
 * This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.
 */
class CoverageEligibilityResponse extends fhirModels.DomainResource {
    /**
     * Default constructor for CoverageEligibilityResponse from an object that MAY NOT contain all required elements.
     */
    constructor(source) {
        super(source);
        /**
         * Resource Type Name
         */
        this.resourceType = "CoverageEligibilityResponse";
        if ((source['resourceType'] !== "CoverageEligibilityResponse") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a CoverageEligibilityResponse';
        }
        {
            this.created = source.created;
        }
        if (source["_created"] !== undefined) {
            this._created = new fhirModels.Element(source._created);
        }
        if (source["disposition"] !== undefined) {
            this.disposition = source.disposition;
        }
        if (source["_disposition"] !== undefined) {
            this._disposition = new fhirModels.Element(source._disposition);
        }
        if (source["error"] !== undefined) {
            this.error = source.error.map((x) => new fhirModels.CoverageEligibilityResponseError(x));
        }
        if (source["form"] !== undefined) {
            this.form = new fhirModels.CodeableConcept(source.form);
        }
        if (source["identifier"] !== undefined) {
            this.identifier = source.identifier.map((x) => new fhirModels.Identifier(x));
        }
        if (source["insurance"] !== undefined) {
            this.insurance = source.insurance.map((x) => new fhirModels.CoverageEligibilityResponseInsurance(x));
        }
        {
            this.insurer = new fhirModels.Reference(source.insurer);
        }
        {
            this.outcome = source.outcome;
        }
        if (source["_outcome"] !== undefined) {
            this._outcome = new fhirModels.Element(source._outcome);
        }
        {
            this.patient = new fhirModels.Reference(source.patient);
        }
        if (source["preAuthRef"] !== undefined) {
            this.preAuthRef = source.preAuthRef;
        }
        if (source["_preAuthRef"] !== undefined) {
            this._preAuthRef = new fhirModels.Element(source._preAuthRef);
        }
        {
            this.purpose = source.purpose.map((x) => (x));
        }
        if (source["_purpose"] !== undefined) {
            this._purpose = source._purpose.map((x) => new fhirModels.Element(x));
        }
        {
            this.request = new fhirModels.Reference(source.request);
        }
        if (source["requestor"] !== undefined) {
            this.requestor = new fhirModels.Reference(source.requestor);
        }
        if (source["servicedDate"] !== undefined) {
            this.servicedDate = source.servicedDate;
        }
        if (source["_servicedDate"] !== undefined) {
            this._servicedDate = new fhirModels.Element(source._servicedDate);
        }
        if (source["servicedPeriod"] !== undefined) {
            this.servicedPeriod = new fhirModels.Period(source.servicedPeriod);
        }
        {
            this.status = source.status;
        }
        if (source["_status"] !== undefined) {
            this._status = new fhirModels.Element(source._status);
        }
    }
}
exports.CoverageEligibilityResponse = CoverageEligibilityResponse;
/**
 * Code Values for the CoverageEligibilityResponse.outcome field
 */
var CoverageEligibilityResponseOutcomeEnum;
(function (CoverageEligibilityResponseOutcomeEnum) {
    CoverageEligibilityResponseOutcomeEnum["QUEUED"] = "queued";
    CoverageEligibilityResponseOutcomeEnum["COMPLETE"] = "complete";
    CoverageEligibilityResponseOutcomeEnum["ERROR"] = "error";
    CoverageEligibilityResponseOutcomeEnum["PARTIAL"] = "partial";
})(CoverageEligibilityResponseOutcomeEnum = exports.CoverageEligibilityResponseOutcomeEnum || (exports.CoverageEligibilityResponseOutcomeEnum = {}));
/**
 * Code Values for the CoverageEligibilityResponse.purpose field
 */
var CoverageEligibilityResponsePurposeEnum;
(function (CoverageEligibilityResponsePurposeEnum) {
    CoverageEligibilityResponsePurposeEnum["AUTH_REQUIREMENTS"] = "auth-requirements";
    CoverageEligibilityResponsePurposeEnum["BENEFITS"] = "benefits";
    CoverageEligibilityResponsePurposeEnum["DISCOVERY"] = "discovery";
    CoverageEligibilityResponsePurposeEnum["VALIDATION"] = "validation";
})(CoverageEligibilityResponsePurposeEnum = exports.CoverageEligibilityResponsePurposeEnum || (exports.CoverageEligibilityResponsePurposeEnum = {}));
/**
 * Code Values for the CoverageEligibilityResponse.status field
 */
var CoverageEligibilityResponseStatusEnum;
(function (CoverageEligibilityResponseStatusEnum) {
    CoverageEligibilityResponseStatusEnum["ACTIVE"] = "active";
    CoverageEligibilityResponseStatusEnum["CANCELLED"] = "cancelled";
    CoverageEligibilityResponseStatusEnum["DRAFT"] = "draft";
    CoverageEligibilityResponseStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(CoverageEligibilityResponseStatusEnum = exports.CoverageEligibilityResponseStatusEnum || (exports.CoverageEligibilityResponseStatusEnum = {}));
//# sourceMappingURL=CoverageEligibilityResponse.js.map