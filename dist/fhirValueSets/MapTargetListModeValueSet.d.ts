import { Coding } from '../fhir.js';
/**
 * If field is a list, how to manage the production.
 */
export declare const MapTargetListModeValueSet: {
    /**
     * collate: re-use the first item in the list, and keep adding content to it.
     */
    readonly Collate: Coding;
    /**
     * first: when the target list is being assembled, the items for this rule go first. If more than one rule defines a first item (for a given instance of mapping) then this is an error.
     */
    readonly First: Coding;
    /**
     * last: when the target list is being assembled, the items for this rule go last. If more than one rule defines a last item (for a given instance of mapping) then this is an error.
     */
    readonly Last: Coding;
    /**
     * share: the target instance is shared with the target instances generated by another rule (up to the first common n items, then create new ones).
     */
    readonly Share: Coding;
};
/**
 * If field is a list, how to manage the production.
 */
export declare type MapTargetListModeValueSetType = typeof MapTargetListModeValueSet;
/**
 * If field is a list, how to manage the production.
 */
export declare enum MapTargetListModeValueSetEnum {
    /**
     * collate: re-use the first item in the list, and keep adding content to it.
     */
    Collate = "collate",
    /**
     * first: when the target list is being assembled, the items for this rule go first. If more than one rule defines a first item (for a given instance of mapping) then this is an error.
     */
    First = "first",
    /**
     * last: when the target list is being assembled, the items for this rule go last. If more than one rule defines a last item (for a given instance of mapping) then this is an error.
     */
    Last = "last",
    /**
     * share: the target instance is shared with the target instances generated by another rule (up to the first common n items, then create new ones).
     */
    Share = "share"
}
//# sourceMappingURL=MapTargetListModeValueSet.d.ts.map