// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/audit-event-type|4.0.1
import { Coding } from '../fhir.js';
/**
 * Event Types for Audit Events - defined by DICOM with some FHIR specific additions.
 */
export const AuditEventTypeValueSet = {
    /**
     * 110100: Audit event: Application Activity has taken place
     */
    ApplicationActivity: new Coding({
        display: "Application Activity",
        code: "110100",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110101: Audit event: Audit Log has been used
     */
    AuditLogUsed: new Coding({
        display: "Audit Log Used",
        code: "110101",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110102: Audit event: Storage of DICOM Instances has begun
     */
    BeginTransferringDICOMInstances: new Coding({
        display: "Begin Transferring DICOM Instances",
        code: "110102",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110103: Audit event: DICOM Instances have been created, read, updated, or deleted
     */
    DICOMInstancesAccessed: new Coding({
        display: "DICOM Instances Accessed",
        code: "110103",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110104: Audit event: Storage of DICOM Instances has been completed
     */
    DICOMInstancesTransferred: new Coding({
        display: "DICOM Instances Transferred",
        code: "110104",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110105: Audit event: Entire Study has been deleted
     */
    DICOMStudyDeleted: new Coding({
        display: "DICOM Study Deleted",
        code: "110105",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110106: Audit event: Data has been exported out of the system
     */
    Export: new Coding({
        display: "Export",
        code: "110106",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110107: Audit event: Data has been imported into the system
     */
    Import: new Coding({
        display: "Import",
        code: "110107",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110108: Audit event: System has joined or left network
     */
    NetworkEntry: new Coding({
        display: "Network Entry",
        code: "110108",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110109: Audit event: Order has been created, read, updated or deleted
     */
    OrderRecord: new Coding({
        display: "Order Record",
        code: "110109",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110110: Audit event: Patient Record has been created, read, updated, or deleted
     */
    PatientRecord: new Coding({
        display: "Patient Record",
        code: "110110",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110111: Audit event: Procedure Record has been created, read, updated, or deleted
     */
    ProcedureRecord: new Coding({
        display: "Procedure Record",
        code: "110111",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110112: Audit event: Query has been made
     */
    Query: new Coding({
        display: "Query",
        code: "110112",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110113: Audit event: Security Alert has been raised
     */
    SecurityAlert: new Coding({
        display: "Security Alert",
        code: "110113",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110114: Audit event: User Authentication has been attempted
     */
    UserAuthentication: new Coding({
        display: "User Authentication",
        code: "110114",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * access: Occurs when an agent causes the system to obtain and open a record entry for inspection or review.
     */
    AccessViewRecordLifecycleEvent: new Coding({
        display: "Access/View Record Lifecycle Event",
        code: "access",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
    /**
     * amend: Occurs when an agent makes any change to record entry content currently residing in storage considered permanent (persistent).
     */
    AmendUpdateRecordLifecycleEvent: new Coding({
        display: "Amend (Update) Record Lifecycle Event",
        code: "amend",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
    /**
     * archive: Occurs when an agent causes the system to create and move archive artifacts containing record entry content, typically to long-term offline storage.
     */
    ArchiveRecordLifecycleEvent: new Coding({
        display: "Archive Record Lifecycle Event",
        code: "archive",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
    /**
     * attest: Occurs when an agent causes the system to capture the agent’s digital signature (or equivalent indication) during formal validation of record entry content.
     */
    AttestRecordLifecycleEvent: new Coding({
        display: "Attest Record Lifecycle Event",
        code: "attest",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
    /**
     * decrypt: Occurs when an agent causes the system to decode record entry content from a cipher.
     */
    DecryptRecordLifecycleEvent: new Coding({
        display: "Decrypt Record Lifecycle Event",
        code: "decrypt",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
    /**
     * deidentify: Occurs when an agent causes the system to scrub record entry content to reduce the association between a set of identifying data and the data subject in a way that might or might not be reversible.
     */
    DeIdentifyAnononymizeRecordLifecycleEvent: new Coding({
        display: "De-Identify (Anononymize) Record Lifecycle Event",
        code: "deidentify",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
    /**
     * deprecate: Occurs when an agent causes the system to tag record entry(ies) as obsolete, erroneous or untrustworthy, to warn against its future use.
     */
    DeprecateRecordLifecycleEvent: new Coding({
        display: "Deprecate Record Lifecycle Event",
        code: "deprecate",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
    /**
     * destroy: Occurs when an agent causes the system to permanently erase record entry content from the system.
     */
    DestroyDeleteRecordLifecycleEvent: new Coding({
        display: "Destroy/Delete Record Lifecycle Event",
        code: "destroy",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
    /**
     * disclose: Occurs when an agent causes the system to release, transfer, provision access to, or otherwise divulge record entry content.
     */
    DiscloseRecordLifecycleEvent: new Coding({
        display: "Disclose Record Lifecycle Event",
        code: "disclose",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
    /**
     * encrypt: Occurs when an agent causes the system to encode record entry content in a cipher.
     */
    EncryptRecordLifecycleEvent: new Coding({
        display: "Encrypt Record Lifecycle Event",
        code: "encrypt",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
    /**
     * extract: Occurs when an agent causes the system to selectively pull out a subset of record entry content, based on explicit criteria.
     */
    ExtractRecordLifecycleEvent: new Coding({
        display: "Extract Record Lifecycle Event",
        code: "extract",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
    /**
     * hold: Occurs when an agent causes the system to tag or otherwise indicate special access management and suspension of record entry deletion/destruction, if deemed relevant to a lawsuit or which are reasonably anticipated to be relevant or to fulfill organizational policy under the legal doctrine of “duty to preserve”.
     */
    AddLegalHoldRecordLifecycleEvent: new Coding({
        display: "Add Legal Hold Record Lifecycle Event",
        code: "hold",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
    /**
     * link: Occurs when an agent causes the system to connect related record entries.
     */
    LinkRecordLifecycleEvent: new Coding({
        display: "Link Record Lifecycle Event",
        code: "link",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
    /**
     * merge: Occurs when an agent causes the system to combine or join content from two or more record entries, resulting in a single logical record entry.
     */
    MergeRecordLifecycleEvent: new Coding({
        display: "Merge Record Lifecycle Event",
        code: "merge",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
    /**
     * originate: Occurs when an agent causes the system to: a) initiate capture of potential record content, and b) incorporate that content into the storage considered a permanent part of the health record.
     */
    OriginateRetainRecordLifecycleEvent: new Coding({
        display: "Originate/Retain Record Lifecycle Event",
        code: "originate",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
    /**
     * pseudonymize: Occurs when an agent causes the system to remove record entry content to reduce the association between a set of identifying data and the data subject in a way that may be reversible.
     */
    PseudonymizeRecordLifecycleEvent: new Coding({
        display: "Pseudonymize Record Lifecycle Event",
        code: "pseudonymize",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
    /**
     * reactivate: Occurs when an agent causes the system to recreate or restore full status to record entries previously deleted or deprecated.
     */
    ReActivateRecordLifecycleEvent: new Coding({
        display: "Re-activate Record Lifecycle Event",
        code: "reactivate",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
    /**
     * receive: Occurs when an agent causes the system to a) initiate capture of data content from elsewhere, and b) incorporate that content into the storage considered a permanent part of the health record.
     */
    ReceiveRetainRecordLifecycleEvent: new Coding({
        display: "Receive/Retain Record Lifecycle Event",
        code: "receive",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
    /**
     * reidentify: Occurs when an agent causes the system to restore information to data that allows identification of information source and/or information subject.
     */
    ReIdentifyRecordLifecycleEvent: new Coding({
        display: "Re-identify Record Lifecycle Event",
        code: "reidentify",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
    /**
     * report: Occurs when an agent causes the system to produce and deliver record entry content in a particular form and manner.
     */
    ReportOutputRecordLifecycleEvent: new Coding({
        display: "Report (Output) Record Lifecycle Event",
        code: "report",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
    /**
     * rest: Audit Event: Execution of a RESTful operation as defined by FHIR.
     */
    RESTfulOperation: new Coding({
        display: "RESTful Operation",
        code: "rest",
        system: "http://terminology.hl7.org/CodeSystem/audit-event-type",
    }),
    /**
     * restore: Occurs when an agent causes the system to recreate record entries and their content from a previous created archive artefact.
     */
    RestoreRecordLifecycleEvent: new Coding({
        display: "Restore Record Lifecycle Event",
        code: "restore",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
    /**
     * transform: Occurs when an agent causes the system to change the form, language or code system used to represent record entry content.
     */
    TransformTranslateRecordLifecycleEvent: new Coding({
        display: "Transform/Translate Record Lifecycle Event",
        code: "transform",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
    /**
     * transmit: Occurs when an agent causes the system to send record entry content from one (EHR/PHR/other) system to another.
     */
    TransmitRecordLifecycleEvent: new Coding({
        display: "Transmit Record Lifecycle Event",
        code: "transmit",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
    /**
     * unhold: Occurs when an agent causes the system to remove a tag or other cues for special access management had required to fulfill organizational policy under the legal doctrine of “duty to preserve”.
     */
    RemoveLegalHoldRecordLifecycleEvent: new Coding({
        display: "Remove Legal Hold Record Lifecycle Event",
        code: "unhold",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
    /**
     * unlink: Occurs when an agent causes the system to disconnect two or more record entries previously connected, rendering them separate (disconnected) again.
     */
    UnlinkRecordLifecycleEvent: new Coding({
        display: "Unlink Record Lifecycle Event",
        code: "unlink",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
    /**
     * unmerge: Occurs when an agent causes the system to reverse a previous record entry merge operation, rendering them separate again.
     */
    UnmergeRecordLifecycleEvent: new Coding({
        display: "Unmerge Record Lifecycle Event",
        code: "unmerge",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
    /**
     * verify: Occurs when an agent causes the system to confirm compliance of data or data objects with regulations, requirements, specifications, or other imposed conditions based on organizational policy.
     */
    VerifyRecordLifecycleEvent: new Coding({
        display: "Verify Record Lifecycle Event",
        code: "verify",
        system: "http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle",
    }),
};
/**
 * Event Types for Audit Events - defined by DICOM with some FHIR specific additions.
 */
export var AuditEventTypeValueSetEnum;
(function (AuditEventTypeValueSetEnum) {
    /**
     * 110100: Audit event: Application Activity has taken place
     */
    AuditEventTypeValueSetEnum["ApplicationActivity"] = "110100";
    /**
     * 110101: Audit event: Audit Log has been used
     */
    AuditEventTypeValueSetEnum["AuditLogUsed"] = "110101";
    /**
     * 110102: Audit event: Storage of DICOM Instances has begun
     */
    AuditEventTypeValueSetEnum["BeginTransferringDICOMInstances"] = "110102";
    /**
     * 110103: Audit event: DICOM Instances have been created, read, updated, or deleted
     */
    AuditEventTypeValueSetEnum["DICOMInstancesAccessed"] = "110103";
    /**
     * 110104: Audit event: Storage of DICOM Instances has been completed
     */
    AuditEventTypeValueSetEnum["DICOMInstancesTransferred"] = "110104";
    /**
     * 110105: Audit event: Entire Study has been deleted
     */
    AuditEventTypeValueSetEnum["DICOMStudyDeleted"] = "110105";
    /**
     * 110106: Audit event: Data has been exported out of the system
     */
    AuditEventTypeValueSetEnum["Export"] = "110106";
    /**
     * 110107: Audit event: Data has been imported into the system
     */
    AuditEventTypeValueSetEnum["Import"] = "110107";
    /**
     * 110108: Audit event: System has joined or left network
     */
    AuditEventTypeValueSetEnum["NetworkEntry"] = "110108";
    /**
     * 110109: Audit event: Order has been created, read, updated or deleted
     */
    AuditEventTypeValueSetEnum["OrderRecord"] = "110109";
    /**
     * 110110: Audit event: Patient Record has been created, read, updated, or deleted
     */
    AuditEventTypeValueSetEnum["PatientRecord"] = "110110";
    /**
     * 110111: Audit event: Procedure Record has been created, read, updated, or deleted
     */
    AuditEventTypeValueSetEnum["ProcedureRecord"] = "110111";
    /**
     * 110112: Audit event: Query has been made
     */
    AuditEventTypeValueSetEnum["Query"] = "110112";
    /**
     * 110113: Audit event: Security Alert has been raised
     */
    AuditEventTypeValueSetEnum["SecurityAlert"] = "110113";
    /**
     * 110114: Audit event: User Authentication has been attempted
     */
    AuditEventTypeValueSetEnum["UserAuthentication"] = "110114";
    /**
     * access: Occurs when an agent causes the system to obtain and open a record entry for inspection or review.
     */
    AuditEventTypeValueSetEnum["AccessViewRecordLifecycleEvent"] = "access";
    /**
     * amend: Occurs when an agent makes any change to record entry content currently residing in storage considered permanent (persistent).
     */
    AuditEventTypeValueSetEnum["AmendUpdateRecordLifecycleEvent"] = "amend";
    /**
     * archive: Occurs when an agent causes the system to create and move archive artifacts containing record entry content, typically to long-term offline storage.
     */
    AuditEventTypeValueSetEnum["ArchiveRecordLifecycleEvent"] = "archive";
    /**
     * attest: Occurs when an agent causes the system to capture the agent’s digital signature (or equivalent indication) during formal validation of record entry content.
     */
    AuditEventTypeValueSetEnum["AttestRecordLifecycleEvent"] = "attest";
    /**
     * decrypt: Occurs when an agent causes the system to decode record entry content from a cipher.
     */
    AuditEventTypeValueSetEnum["DecryptRecordLifecycleEvent"] = "decrypt";
    /**
     * deidentify: Occurs when an agent causes the system to scrub record entry content to reduce the association between a set of identifying data and the data subject in a way that might or might not be reversible.
     */
    AuditEventTypeValueSetEnum["DeIdentifyAnononymizeRecordLifecycleEvent"] = "deidentify";
    /**
     * deprecate: Occurs when an agent causes the system to tag record entry(ies) as obsolete, erroneous or untrustworthy, to warn against its future use.
     */
    AuditEventTypeValueSetEnum["DeprecateRecordLifecycleEvent"] = "deprecate";
    /**
     * destroy: Occurs when an agent causes the system to permanently erase record entry content from the system.
     */
    AuditEventTypeValueSetEnum["DestroyDeleteRecordLifecycleEvent"] = "destroy";
    /**
     * disclose: Occurs when an agent causes the system to release, transfer, provision access to, or otherwise divulge record entry content.
     */
    AuditEventTypeValueSetEnum["DiscloseRecordLifecycleEvent"] = "disclose";
    /**
     * encrypt: Occurs when an agent causes the system to encode record entry content in a cipher.
     */
    AuditEventTypeValueSetEnum["EncryptRecordLifecycleEvent"] = "encrypt";
    /**
     * extract: Occurs when an agent causes the system to selectively pull out a subset of record entry content, based on explicit criteria.
     */
    AuditEventTypeValueSetEnum["ExtractRecordLifecycleEvent"] = "extract";
    /**
     * hold: Occurs when an agent causes the system to tag or otherwise indicate special access management and suspension of record entry deletion/destruction, if deemed relevant to a lawsuit or which are reasonably anticipated to be relevant or to fulfill organizational policy under the legal doctrine of “duty to preserve”.
     */
    AuditEventTypeValueSetEnum["AddLegalHoldRecordLifecycleEvent"] = "hold";
    /**
     * link: Occurs when an agent causes the system to connect related record entries.
     */
    AuditEventTypeValueSetEnum["LinkRecordLifecycleEvent"] = "link";
    /**
     * merge: Occurs when an agent causes the system to combine or join content from two or more record entries, resulting in a single logical record entry.
     */
    AuditEventTypeValueSetEnum["MergeRecordLifecycleEvent"] = "merge";
    /**
     * originate: Occurs when an agent causes the system to: a) initiate capture of potential record content, and b) incorporate that content into the storage considered a permanent part of the health record.
     */
    AuditEventTypeValueSetEnum["OriginateRetainRecordLifecycleEvent"] = "originate";
    /**
     * pseudonymize: Occurs when an agent causes the system to remove record entry content to reduce the association between a set of identifying data and the data subject in a way that may be reversible.
     */
    AuditEventTypeValueSetEnum["PseudonymizeRecordLifecycleEvent"] = "pseudonymize";
    /**
     * reactivate: Occurs when an agent causes the system to recreate or restore full status to record entries previously deleted or deprecated.
     */
    AuditEventTypeValueSetEnum["ReActivateRecordLifecycleEvent"] = "reactivate";
    /**
     * receive: Occurs when an agent causes the system to a) initiate capture of data content from elsewhere, and b) incorporate that content into the storage considered a permanent part of the health record.
     */
    AuditEventTypeValueSetEnum["ReceiveRetainRecordLifecycleEvent"] = "receive";
    /**
     * reidentify: Occurs when an agent causes the system to restore information to data that allows identification of information source and/or information subject.
     */
    AuditEventTypeValueSetEnum["ReIdentifyRecordLifecycleEvent"] = "reidentify";
    /**
     * report: Occurs when an agent causes the system to produce and deliver record entry content in a particular form and manner.
     */
    AuditEventTypeValueSetEnum["ReportOutputRecordLifecycleEvent"] = "report";
    /**
     * rest: Audit Event: Execution of a RESTful operation as defined by FHIR.
     */
    AuditEventTypeValueSetEnum["RESTfulOperation"] = "rest";
    /**
     * restore: Occurs when an agent causes the system to recreate record entries and their content from a previous created archive artefact.
     */
    AuditEventTypeValueSetEnum["RestoreRecordLifecycleEvent"] = "restore";
    /**
     * transform: Occurs when an agent causes the system to change the form, language or code system used to represent record entry content.
     */
    AuditEventTypeValueSetEnum["TransformTranslateRecordLifecycleEvent"] = "transform";
    /**
     * transmit: Occurs when an agent causes the system to send record entry content from one (EHR/PHR/other) system to another.
     */
    AuditEventTypeValueSetEnum["TransmitRecordLifecycleEvent"] = "transmit";
    /**
     * unhold: Occurs when an agent causes the system to remove a tag or other cues for special access management had required to fulfill organizational policy under the legal doctrine of “duty to preserve”.
     */
    AuditEventTypeValueSetEnum["RemoveLegalHoldRecordLifecycleEvent"] = "unhold";
    /**
     * unlink: Occurs when an agent causes the system to disconnect two or more record entries previously connected, rendering them separate (disconnected) again.
     */
    AuditEventTypeValueSetEnum["UnlinkRecordLifecycleEvent"] = "unlink";
    /**
     * unmerge: Occurs when an agent causes the system to reverse a previous record entry merge operation, rendering them separate again.
     */
    AuditEventTypeValueSetEnum["UnmergeRecordLifecycleEvent"] = "unmerge";
    /**
     * verify: Occurs when an agent causes the system to confirm compliance of data or data objects with regulations, requirements, specifications, or other imposed conditions based on organizational policy.
     */
    AuditEventTypeValueSetEnum["VerifyRecordLifecycleEvent"] = "verify";
})(AuditEventTypeValueSetEnum || (AuditEventTypeValueSetEnum = {}));
//# sourceMappingURL=AuditEventTypeValueSet.js.map