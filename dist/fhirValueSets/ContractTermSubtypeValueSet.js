// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/contract-term-subtype|4.0.1
import { Coding } from '../fhir.js';
/**
 * This value set includes sample Contract Term SubType codes.
 */
export const ContractTermSubtypeValueSet = {
    /**
     * condition: Terms that go to the very root of a contract.
     */
    Condition: new Coding({
        display: "Condition",
        code: "condition",
        system: "http://terminology.hl7.org/CodeSystem/contracttermsubtypecodes",
    }),
    /**
     * innominate: Breach of which might or might not go to the root of the contract depending upon the nature of the breach
     */
    Innominate: new Coding({
        display: "Innominate",
        code: "innominate",
        system: "http://terminology.hl7.org/CodeSystem/contracttermsubtypecodes",
    }),
    /**
     * warranty: Less imperative than a condition, so the contract will survive a breach
     */
    Warranty: new Coding({
        display: "Warranty",
        code: "warranty",
        system: "http://terminology.hl7.org/CodeSystem/contracttermsubtypecodes",
    }),
};
/**
 * This value set includes sample Contract Term SubType codes.
 */
export var ContractTermSubtypeValueSetEnum;
(function (ContractTermSubtypeValueSetEnum) {
    /**
     * condition: Terms that go to the very root of a contract.
     */
    ContractTermSubtypeValueSetEnum["Condition"] = "condition";
    /**
     * innominate: Breach of which might or might not go to the root of the contract depending upon the nature of the breach
     */
    ContractTermSubtypeValueSetEnum["Innominate"] = "innominate";
    /**
     * warranty: Less imperative than a condition, so the contract will survive a breach
     */
    ContractTermSubtypeValueSetEnum["Warranty"] = "warranty";
})(ContractTermSubtypeValueSetEnum || (ContractTermSubtypeValueSetEnum = {}));
//# sourceMappingURL=ContractTermSubtypeValueSet.js.map