// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Class that defines the quantity and type of nutrient modifications (for example carbohydrate, fiber or sodium) required for the oral diet.
 */
export class NutritionOrderOralDietNutrient extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderOralDietNutrient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["amount"]) {
            this.amount = new fhir.Quantity(source.amount);
        }
        if (source["modifier"]) {
            this.modifier = new fhir.CodeableConcept(source.modifier);
        }
    }
    /**
     * Check if the current NutritionOrderOralDietNutrient contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a NutritionOrderOralDietNutrient from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new NutritionOrderOralDietNutrient(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `NutritionOrderOralDietNutrient is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
 */
export class NutritionOrderOralDietTexture extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderOralDietTexture - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["foodType"]) {
            this.foodType = new fhir.CodeableConcept(source.foodType);
        }
        if (source["modifier"]) {
            this.modifier = new fhir.CodeableConcept(source.modifier);
        }
    }
    /**
     * Check if the current NutritionOrderOralDietTexture contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a NutritionOrderOralDietTexture from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new NutritionOrderOralDietTexture(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `NutritionOrderOralDietTexture is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Diet given orally in contrast to enteral (tube) feeding.
 */
export class NutritionOrderOralDiet extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderOralDiet - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["fluidConsistencyType"]) {
            this.fluidConsistencyType = source.fluidConsistencyType.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["instruction"]) {
            this.instruction = source.instruction;
        }
        if (source["_instruction"]) {
            this._instruction = new fhir.FhirElement(source._instruction);
        }
        if (source["nutrient"]) {
            this.nutrient = source.nutrient.map((x) => new fhir.NutritionOrderOralDietNutrient(x));
        }
        if (source["schedule"]) {
            this.schedule = source.schedule.map((x) => new fhir.Timing(x));
        }
        if (source["texture"]) {
            this.texture = source.texture.map((x) => new fhir.NutritionOrderOralDietTexture(x));
        }
        if (source["type"]) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
    }
    /**
     * Check if the current NutritionOrderOralDiet contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a NutritionOrderOralDiet from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new NutritionOrderOralDiet(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `NutritionOrderOralDiet is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Oral nutritional products given in order to add further nutritional value to the patient's diet.
 */
export class NutritionOrderSupplement extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderSupplement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["instruction"]) {
            this.instruction = source.instruction;
        }
        if (source["_instruction"]) {
            this._instruction = new fhir.FhirElement(source._instruction);
        }
        if (source["productName"]) {
            this.productName = source.productName;
        }
        if (source["_productName"]) {
            this._productName = new fhir.FhirElement(source._productName);
        }
        if (source["quantity"]) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source["schedule"]) {
            this.schedule = source.schedule.map((x) => new fhir.Timing(x));
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current NutritionOrderSupplement contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a NutritionOrderSupplement from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new NutritionOrderSupplement(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `NutritionOrderSupplement is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * See implementation notes below for further discussion on how to order continuous vs bolus enteral feeding using this resource.
 */
export class NutritionOrderEnteralFormulaAdministration extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderEnteralFormulaAdministration - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["quantity"]) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source["rateQuantity"]) {
            this.rateQuantity = new fhir.Quantity(source.rateQuantity);
        }
        if (source["rateRatio"]) {
            this.rateRatio = new fhir.Ratio(source.rateRatio);
        }
        if (source["schedule"]) {
            this.schedule = new fhir.Timing(source.schedule);
        }
    }
    /**
     * Check if the current NutritionOrderEnteralFormulaAdministration contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a NutritionOrderEnteralFormulaAdministration from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new NutritionOrderEnteralFormulaAdministration(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `NutritionOrderEnteralFormulaAdministration is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
 */
export class NutritionOrderEnteralFormula extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderEnteralFormula - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["additiveProductName"]) {
            this.additiveProductName = source.additiveProductName;
        }
        if (source["_additiveProductName"]) {
            this._additiveProductName = new fhir.FhirElement(source._additiveProductName);
        }
        if (source["additiveType"]) {
            this.additiveType = new fhir.CodeableConcept(source.additiveType);
        }
        if (source["administration"]) {
            this.administration = source.administration.map((x) => new fhir.NutritionOrderEnteralFormulaAdministration(x));
        }
        if (source["administrationInstruction"]) {
            this.administrationInstruction = source.administrationInstruction;
        }
        if (source["_administrationInstruction"]) {
            this._administrationInstruction = new fhir.FhirElement(source._administrationInstruction);
        }
        if (source["baseFormulaProductName"]) {
            this.baseFormulaProductName = source.baseFormulaProductName;
        }
        if (source["_baseFormulaProductName"]) {
            this._baseFormulaProductName = new fhir.FhirElement(source._baseFormulaProductName);
        }
        if (source["baseFormulaType"]) {
            this.baseFormulaType = new fhir.CodeableConcept(source.baseFormulaType);
        }
        if (source["caloricDensity"]) {
            this.caloricDensity = new fhir.Quantity(source.caloricDensity);
        }
        if (source["maxVolumeToDeliver"]) {
            this.maxVolumeToDeliver = new fhir.Quantity(source.maxVolumeToDeliver);
        }
        if (source["routeofAdministration"]) {
            this.routeofAdministration = new fhir.CodeableConcept(source.routeofAdministration);
        }
    }
    /**
     * Check if the current NutritionOrderEnteralFormula contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a NutritionOrderEnteralFormula from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new NutritionOrderEnteralFormula(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `NutritionOrderEnteralFormula is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
 */
export class NutritionOrder extends fhir.DomainResource {
    /**
     * Default constructor for NutritionOrder - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'NutritionOrder';
        if (source["allergyIntolerance"]) {
            this.allergyIntolerance = source.allergyIntolerance.map((x) => new fhir.Reference(x));
        }
        this.dateTime = null;
        if (source["dateTime"]) {
            this.dateTime = source.dateTime;
        }
        if (this.dateTime === undefined) {
            this.dateTime = null;
        }
        if (source["_dateTime"]) {
            this._dateTime = new fhir.FhirElement(source._dateTime);
        }
        if (source["encounter"]) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source["enteralFormula"]) {
            this.enteralFormula = new fhir.NutritionOrderEnteralFormula(source.enteralFormula);
        }
        if (source["excludeFoodModifier"]) {
            this.excludeFoodModifier = source.excludeFoodModifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["foodPreferenceModifier"]) {
            this.foodPreferenceModifier = source.foodPreferenceModifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["instantiates"]) {
            this.instantiates = source.instantiates.map((x) => (x));
        }
        if (source["_instantiates"]) {
            this._instantiates = source._instantiates.map((x) => new fhir.FhirElement(x));
        }
        if (source["instantiatesCanonical"]) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => (x));
        }
        if (source["_instantiatesCanonical"]) {
            this._instantiatesCanonical = source._instantiatesCanonical.map((x) => new fhir.FhirElement(x));
        }
        if (source["instantiatesUri"]) {
            this.instantiatesUri = source.instantiatesUri.map((x) => (x));
        }
        if (source["_instantiatesUri"]) {
            this._instantiatesUri = source._instantiatesUri.map((x) => new fhir.FhirElement(x));
        }
        this.intent = null;
        if (source["intent"]) {
            this.intent = source.intent;
        }
        if (this.intent === undefined) {
            this.intent = null;
        }
        if (source["_intent"]) {
            this._intent = new fhir.FhirElement(source._intent);
        }
        if (source["note"]) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source["oralDiet"]) {
            this.oralDiet = new fhir.NutritionOrderOralDiet(source.oralDiet);
        }
        if (source["orderer"]) {
            this.orderer = new fhir.Reference(source.orderer);
        }
        this.patient = null;
        if (source["patient"]) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (this.patient === undefined) {
            this.patient = null;
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["supplement"]) {
            this.supplement = source.supplement.map((x) => new fhir.NutritionOrderSupplement(x));
        }
    }
    /**
     * Check if the current NutritionOrder contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["dateTime"] === undefined) {
            missingElements.push("dateTime");
        }
        if (this["intent"] === undefined) {
            missingElements.push("intent");
        }
        if (this["patient"] === undefined) {
            missingElements.push("patient");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a NutritionOrder from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new NutritionOrder(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `NutritionOrder is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the NutritionOrder.intent field
 */
export var NutritionOrderIntentEnum;
(function (NutritionOrderIntentEnum) {
    NutritionOrderIntentEnum["PROPOSAL"] = "proposal";
    NutritionOrderIntentEnum["PLAN"] = "plan";
    NutritionOrderIntentEnum["DIRECTIVE"] = "directive";
    NutritionOrderIntentEnum["ORDER"] = "order";
    NutritionOrderIntentEnum["ORIGINAL_ORDER"] = "original-order";
    NutritionOrderIntentEnum["REFLEX_ORDER"] = "reflex-order";
    NutritionOrderIntentEnum["FILLER_ORDER"] = "filler-order";
    NutritionOrderIntentEnum["INSTANCE_ORDER"] = "instance-order";
    NutritionOrderIntentEnum["OPTION"] = "option";
})(NutritionOrderIntentEnum || (NutritionOrderIntentEnum = {}));
/**
 * Code Values for the NutritionOrder.status field
 */
export var NutritionOrderStatusEnum;
(function (NutritionOrderStatusEnum) {
    NutritionOrderStatusEnum["DRAFT"] = "draft";
    NutritionOrderStatusEnum["ACTIVE"] = "active";
    NutritionOrderStatusEnum["ON_HOLD"] = "on-hold";
    NutritionOrderStatusEnum["REVOKED"] = "revoked";
    NutritionOrderStatusEnum["COMPLETED"] = "completed";
    NutritionOrderStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    NutritionOrderStatusEnum["UNKNOWN"] = "unknown";
})(NutritionOrderStatusEnum || (NutritionOrderStatusEnum = {}));
//# sourceMappingURL=NutritionOrder.js.map