// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: NutritionOrder
import * as fhir from '../fhir.js';
import { NutrientCodeValueSet } from '../fhirValueSets/NutrientCodeValueSet.js';
import { ModifiedFoodtypeValueSet } from '../fhirValueSets/ModifiedFoodtypeValueSet.js';
import { DietTypeValueSet } from '../fhirValueSets/DietTypeValueSet.js';
import { EntformulaAdditiveValueSet } from '../fhirValueSets/EntformulaAdditiveValueSet.js';
import { EnteralRouteValueSet } from '../fhirValueSets/EnteralRouteValueSet.js';
import { RequestStatusValueSet } from '../fhirValueSets/RequestStatusValueSet.js';
import { RequestIntentValueSet } from '../fhirValueSets/RequestIntentValueSet.js';
import { EncounterDietValueSet } from '../fhirValueSets/EncounterDietValueSet.js';
import { FoodTypeValueSet } from '../fhirValueSets/FoodTypeValueSet.js';
/**
 * Class that defines the quantity and type of nutrient modifications (for example carbohydrate, fiber or sodium) required for the oral diet.
 */
export class NutritionOrderOralDietNutrient extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderOralDietNutrient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['modifier']) {
            this.modifier = new fhir.CodeableConcept(source.modifier);
        }
        if (source['amount']) {
            this.amount = new fhir.Quantity(source.amount);
        }
    }
    /**
     * Example-bound Value Set for modifier
     */
    static modifierExampleValueSet() {
        return NutrientCodeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["modifier"]) {
            results.push(...this.modifier.doModelValidation());
        }
        if (this["amount"]) {
            results.push(...this.amount.doModelValidation());
        }
        return results;
    }
}
/**
 * Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
 */
export class NutritionOrderOralDietTexture extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderOralDietTexture - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['modifier']) {
            this.modifier = new fhir.CodeableConcept(source.modifier);
        }
        if (source['foodType']) {
            this.foodType = new fhir.CodeableConcept(source.foodType);
        }
    }
    /**
     * Example-bound Value Set for foodType
     */
    static foodTypeExampleValueSet() {
        return ModifiedFoodtypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["modifier"]) {
            results.push(...this.modifier.doModelValidation());
        }
        if (this["foodType"]) {
            results.push(...this.foodType.doModelValidation());
        }
        return results;
    }
}
/**
 * Diet given orally in contrast to enteral (tube) feeding.
 */
export class NutritionOrderOralDiet extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderOralDiet - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['schedule']) {
            this.schedule = source.schedule.map((x) => new fhir.Timing(x));
        }
        if (source['nutrient']) {
            this.nutrient = source.nutrient.map((x) => new fhir.NutritionOrderOralDietNutrient(x));
        }
        if (source['texture']) {
            this.texture = source.texture.map((x) => new fhir.NutritionOrderOralDietTexture(x));
        }
        if (source['fluidConsistencyType']) {
            this.fluidConsistencyType = source.fluidConsistencyType.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['instruction']) {
            this.instruction = source.instruction;
        }
        if (source['_instruction']) {
            this._instruction = new fhir.FhirElement(source._instruction);
        }
    }
    /**
     * Example-bound Value Set for type
     */
    static typeExampleValueSet() {
        return DietTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["type"]) {
            this.type.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["schedule"]) {
            this.schedule.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["nutrient"]) {
            this.nutrient.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["texture"]) {
            this.texture.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["fluidConsistencyType"]) {
            this.fluidConsistencyType.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_instruction"]) {
            results.push(...this._instruction.doModelValidation());
        }
        return results;
    }
}
/**
 * Oral nutritional products given in order to add further nutritional value to the patient's diet.
 */
export class NutritionOrderSupplement extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderSupplement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['productName']) {
            this.productName = source.productName;
        }
        if (source['_productName']) {
            this._productName = new fhir.FhirElement(source._productName);
        }
        if (source['schedule']) {
            this.schedule = source.schedule.map((x) => new fhir.Timing(x));
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['instruction']) {
            this.instruction = source.instruction;
        }
        if (source['_instruction']) {
            this._instruction = new fhir.FhirElement(source._instruction);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["_productName"]) {
            results.push(...this._productName.doModelValidation());
        }
        if (this["schedule"]) {
            this.schedule.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["quantity"]) {
            results.push(...this.quantity.doModelValidation());
        }
        if (this["_instruction"]) {
            results.push(...this._instruction.doModelValidation());
        }
        return results;
    }
}
/**
 * See implementation notes below for further discussion on how to order continuous vs bolus enteral feeding using this resource.
 */
export class NutritionOrderEnteralFormulaAdministration extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderEnteralFormulaAdministration - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['schedule']) {
            this.schedule = new fhir.Timing(source.schedule);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['rateQuantity']) {
            this.rateQuantity = new fhir.Quantity(source.rateQuantity);
        }
        if (source['rateRatio']) {
            this.rateRatio = new fhir.Ratio(source.rateRatio);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["schedule"]) {
            results.push(...this.schedule.doModelValidation());
        }
        if (this["quantity"]) {
            results.push(...this.quantity.doModelValidation());
        }
        if (this["rateQuantity"]) {
            results.push(...this.rateQuantity.doModelValidation());
        }
        if (this["rateRatio"]) {
            results.push(...this.rateRatio.doModelValidation());
        }
        return results;
    }
}
/**
 * Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
 */
export class NutritionOrderEnteralFormula extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderEnteralFormula - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['baseFormulaType']) {
            this.baseFormulaType = new fhir.CodeableConcept(source.baseFormulaType);
        }
        if (source['baseFormulaProductName']) {
            this.baseFormulaProductName = source.baseFormulaProductName;
        }
        if (source['_baseFormulaProductName']) {
            this._baseFormulaProductName = new fhir.FhirElement(source._baseFormulaProductName);
        }
        if (source['additiveType']) {
            this.additiveType = new fhir.CodeableConcept(source.additiveType);
        }
        if (source['additiveProductName']) {
            this.additiveProductName = source.additiveProductName;
        }
        if (source['_additiveProductName']) {
            this._additiveProductName = new fhir.FhirElement(source._additiveProductName);
        }
        if (source['caloricDensity']) {
            this.caloricDensity = new fhir.Quantity(source.caloricDensity);
        }
        if (source['routeofAdministration']) {
            this.routeofAdministration = new fhir.CodeableConcept(source.routeofAdministration);
        }
        if (source['administration']) {
            this.administration = source.administration.map((x) => new fhir.NutritionOrderEnteralFormulaAdministration(x));
        }
        if (source['maxVolumeToDeliver']) {
            this.maxVolumeToDeliver = new fhir.Quantity(source.maxVolumeToDeliver);
        }
        if (source['administrationInstruction']) {
            this.administrationInstruction = source.administrationInstruction;
        }
        if (source['_administrationInstruction']) {
            this._administrationInstruction = new fhir.FhirElement(source._administrationInstruction);
        }
    }
    /**
     * Example-bound Value Set for additiveType
     */
    static additiveTypeExampleValueSet() {
        return EntformulaAdditiveValueSet;
    }
    /**
     * Extensible-bound Value Set for routeofAdministration
     */
    static routeofAdministrationExtensibleValueSet() {
        return EnteralRouteValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["baseFormulaType"]) {
            results.push(...this.baseFormulaType.doModelValidation());
        }
        if (this["_baseFormulaProductName"]) {
            results.push(...this._baseFormulaProductName.doModelValidation());
        }
        if (this["additiveType"]) {
            results.push(...this.additiveType.doModelValidation());
        }
        if (this["_additiveProductName"]) {
            results.push(...this._additiveProductName.doModelValidation());
        }
        if (this["caloricDensity"]) {
            results.push(...this.caloricDensity.doModelValidation());
        }
        if (this["routeofAdministration"]) {
            results.push(...this.routeofAdministration.doModelValidation());
        }
        if (this["administration"]) {
            this.administration.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["maxVolumeToDeliver"]) {
            results.push(...this.maxVolumeToDeliver.doModelValidation());
        }
        if (this["_administrationInstruction"]) {
            results.push(...this._administrationInstruction.doModelValidation());
        }
        return results;
    }
}
/**
 * A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
 */
export class NutritionOrder extends fhir.DomainResource {
    /**
     * Default constructor for NutritionOrder - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'NutritionOrder';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['instantiatesCanonical']) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => (x));
        }
        if (source['_instantiatesCanonical']) {
            this._instantiatesCanonical = source._instantiatesCanonical.map((x) => new fhir.FhirElement(x));
        }
        if (source['instantiatesUri']) {
            this.instantiatesUri = source.instantiatesUri.map((x) => (x));
        }
        if (source['_instantiatesUri']) {
            this._instantiatesUri = source._instantiatesUri.map((x) => new fhir.FhirElement(x));
        }
        if (source['instantiates']) {
            this.instantiates = source.instantiates.map((x) => (x));
        }
        if (source['_instantiates']) {
            this._instantiates = source._instantiates.map((x) => new fhir.FhirElement(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['intent']) {
            this.intent = source.intent;
        }
        else {
            this.intent = null;
        }
        if (source['_intent']) {
            this._intent = new fhir.FhirElement(source._intent);
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['dateTime']) {
            this.dateTime = source.dateTime;
        }
        else {
            this.dateTime = null;
        }
        if (source['_dateTime']) {
            this._dateTime = new fhir.FhirElement(source._dateTime);
        }
        if (source['orderer']) {
            this.orderer = new fhir.Reference(source.orderer);
        }
        if (source['allergyIntolerance']) {
            this.allergyIntolerance = source.allergyIntolerance.map((x) => new fhir.Reference(x));
        }
        if (source['foodPreferenceModifier']) {
            this.foodPreferenceModifier = source.foodPreferenceModifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['excludeFoodModifier']) {
            this.excludeFoodModifier = source.excludeFoodModifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['oralDiet']) {
            this.oralDiet = new fhir.NutritionOrderOralDiet(source.oralDiet);
        }
        if (source['supplement']) {
            this.supplement = source.supplement.map((x) => new fhir.NutritionOrderSupplement(x));
        }
        if (source['enteralFormula']) {
            this.enteralFormula = new fhir.NutritionOrderEnteralFormula(source.enteralFormula);
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return RequestStatusValueSet;
    }
    /**
     * Required-bound Value Set for intent
     */
    static intentRequiredValueSet() {
        return RequestIntentValueSet;
    }
    /**
     * Example-bound Value Set for foodPreferenceModifier
     */
    static foodPreferenceModifierExampleValueSet() {
        return EncounterDietValueSet;
    }
    /**
     * Example-bound Value Set for excludeFoodModifier
     */
    static excludeFoodModifierExampleValueSet() {
        return FoodTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: NutritionOrder.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_instantiatesCanonical"]) {
            this._instantiatesCanonical.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_instantiatesUri"]) {
            this._instantiatesUri.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_instantiates"]) {
            this._instantiates.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: NutritionOrder.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (!this["intent"]) {
            results.push(["intent", 'Missing required element: NutritionOrder.intent']);
        }
        if (this["_intent"]) {
            results.push(...this._intent.doModelValidation());
        }
        if (!this["patient"]) {
            results.push(["patient", 'Missing required element: NutritionOrder.patient']);
        }
        if (this["patient"]) {
            results.push(...this.patient.doModelValidation());
        }
        if (this["encounter"]) {
            results.push(...this.encounter.doModelValidation());
        }
        if (!this["dateTime"]) {
            results.push(["dateTime", 'Missing required element: NutritionOrder.dateTime']);
        }
        if (this["_dateTime"]) {
            results.push(...this._dateTime.doModelValidation());
        }
        if (this["orderer"]) {
            results.push(...this.orderer.doModelValidation());
        }
        if (this["allergyIntolerance"]) {
            this.allergyIntolerance.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["foodPreferenceModifier"]) {
            this.foodPreferenceModifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["excludeFoodModifier"]) {
            this.excludeFoodModifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["oralDiet"]) {
            results.push(...this.oralDiet.doModelValidation());
        }
        if (this["supplement"]) {
            this.supplement.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["enteralFormula"]) {
            results.push(...this.enteralFormula.doModelValidation());
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=NutritionOrder.js.map