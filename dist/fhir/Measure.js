// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Measure
import * as fhir from '../fhir.js';
import { MeasurePopulationValueSet } from '../fhirValueSets/MeasurePopulationValueSet.js';
import { MeasureDataUsageValueSet } from '../fhirValueSets/MeasureDataUsageValueSet.js';
import { PublicationStatusValueSet } from '../fhirValueSets/PublicationStatusValueSet.js';
import { SubjectTypeValueSet } from '../fhirValueSets/SubjectTypeValueSet.js';
import { DefinitionTopicValueSet } from '../fhirValueSets/DefinitionTopicValueSet.js';
import { MeasureScoringValueSet } from '../fhirValueSets/MeasureScoringValueSet.js';
import { CompositeMeasureScoringValueSet } from '../fhirValueSets/CompositeMeasureScoringValueSet.js';
import { MeasureTypeValueSet } from '../fhirValueSets/MeasureTypeValueSet.js';
import { MeasureImprovementNotationValueSet } from '../fhirValueSets/MeasureImprovementNotationValueSet.js';
/**
 * A population criteria for the measure.
 */
export class MeasureGroupPopulation extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureGroupPopulation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['criteria']) {
            this.criteria = new fhir.Expression(source.criteria);
        }
        else {
            this.criteria = null;
        }
    }
    /**
     * Extensible-bound Value Set for code
     */
    codeExtensibleValueSet() {
        return MeasurePopulationValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (!this["criteria"]) {
            results.push(["criteria", 'Missing required element: Measure.group.population.criteria']);
        }
        if (this["criteria"]) {
            results.push(...this.criteria.doModelValidation());
        }
        return results;
    }
}
/**
 * Stratifiers are defined either as a single criteria, or as a set of component criteria.
 */
export class MeasureGroupStratifierComponent extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureGroupStratifierComponent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['criteria']) {
            this.criteria = new fhir.Expression(source.criteria);
        }
        else {
            this.criteria = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (!this["criteria"]) {
            results.push(["criteria", 'Missing required element: Measure.group.stratifier.component.criteria']);
        }
        if (this["criteria"]) {
            results.push(...this.criteria.doModelValidation());
        }
        return results;
    }
}
/**
 * The stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.
 */
export class MeasureGroupStratifier extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureGroupStratifier - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['criteria']) {
            this.criteria = new fhir.Expression(source.criteria);
        }
        if (source['component']) {
            this.component = source.component.map((x) => new fhir.MeasureGroupStratifierComponent(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["criteria"]) {
            results.push(...this.criteria.doModelValidation());
        }
        if (this["component"]) {
            this.component.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * A group of population criteria for the measure.
 */
export class MeasureGroup extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureGroup - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['population']) {
            this.population = source.population.map((x) => new fhir.MeasureGroupPopulation(x));
        }
        if (source['stratifier']) {
            this.stratifier = source.stratifier.map((x) => new fhir.MeasureGroupStratifier(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["population"]) {
            this.population.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["stratifier"]) {
            this.stratifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Note that supplemental data are reported as observations for each patient and included in the evaluatedResources bundle. See the MeasureReport resource or the Quality Reporting topic for more information.
 */
export class MeasureSupplementalData extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureSupplementalData - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['usage']) {
            this.usage = source.usage.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['criteria']) {
            this.criteria = new fhir.Expression(source.criteria);
        }
        else {
            this.criteria = null;
        }
    }
    /**
     * Extensible-bound Value Set for usage
     */
    usageExtensibleValueSet() {
        return MeasureDataUsageValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["usage"]) {
            this.usage.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (!this["criteria"]) {
            results.push(["criteria", 'Missing required element: Measure.supplementalData.criteria']);
        }
        if (this["criteria"]) {
            results.push(...this.criteria.doModelValidation());
        }
        return results;
    }
}
/**
 * The Measure resource provides the definition of a quality measure.
 */
export class Measure extends fhir.DomainResource {
    /**
     * Default constructor for Measure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Measure';
        if (source['url']) {
            this.url = source.url;
        }
        if (source['_url']) {
            this._url = new fhir.FhirElement(source._url);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['version']) {
            this.version = source.version;
        }
        if (source['_version']) {
            this._version = new fhir.FhirElement(source._version);
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['title']) {
            this.title = source.title;
        }
        if (source['_title']) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source['subtitle']) {
            this.subtitle = source.subtitle;
        }
        if (source['_subtitle']) {
            this._subtitle = new fhir.FhirElement(source._subtitle);
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['experimental']) {
            this.experimental = source.experimental;
        }
        if (source['_experimental']) {
            this._experimental = new fhir.FhirElement(source._experimental);
        }
        if (source['subjectCodeableConcept']) {
            this.subjectCodeableConcept = new fhir.CodeableConcept(source.subjectCodeableConcept);
        }
        if (source['subjectReference']) {
            this.subjectReference = new fhir.Reference(source.subjectReference);
        }
        if (source['date']) {
            this.date = source.date;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['publisher']) {
            this.publisher = source.publisher;
        }
        if (source['_publisher']) {
            this._publisher = new fhir.FhirElement(source._publisher);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['purpose']) {
            this.purpose = source.purpose;
        }
        if (source['_purpose']) {
            this._purpose = new fhir.FhirElement(source._purpose);
        }
        if (source['usage']) {
            this.usage = source.usage;
        }
        if (source['_usage']) {
            this._usage = new fhir.FhirElement(source._usage);
        }
        if (source['copyright']) {
            this.copyright = source.copyright;
        }
        if (source['_copyright']) {
            this._copyright = new fhir.FhirElement(source._copyright);
        }
        if (source['approvalDate']) {
            this.approvalDate = source.approvalDate;
        }
        if (source['_approvalDate']) {
            this._approvalDate = new fhir.FhirElement(source._approvalDate);
        }
        if (source['lastReviewDate']) {
            this.lastReviewDate = source.lastReviewDate;
        }
        if (source['_lastReviewDate']) {
            this._lastReviewDate = new fhir.FhirElement(source._lastReviewDate);
        }
        if (source['effectivePeriod']) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source['topic']) {
            this.topic = source.topic.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.ContactDetail(x));
        }
        if (source['editor']) {
            this.editor = source.editor.map((x) => new fhir.ContactDetail(x));
        }
        if (source['reviewer']) {
            this.reviewer = source.reviewer.map((x) => new fhir.ContactDetail(x));
        }
        if (source['endorser']) {
            this.endorser = source.endorser.map((x) => new fhir.ContactDetail(x));
        }
        if (source['relatedArtifact']) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x));
        }
        if (source['library']) {
            this.library = source.library.map((x) => (x));
        }
        if (source['_library']) {
            this._library = source._library.map((x) => new fhir.FhirElement(x));
        }
        if (source['disclaimer']) {
            this.disclaimer = source.disclaimer;
        }
        if (source['_disclaimer']) {
            this._disclaimer = new fhir.FhirElement(source._disclaimer);
        }
        if (source['scoring']) {
            this.scoring = new fhir.CodeableConcept(source.scoring);
        }
        if (source['compositeScoring']) {
            this.compositeScoring = new fhir.CodeableConcept(source.compositeScoring);
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['riskAdjustment']) {
            this.riskAdjustment = source.riskAdjustment;
        }
        if (source['_riskAdjustment']) {
            this._riskAdjustment = new fhir.FhirElement(source._riskAdjustment);
        }
        if (source['rateAggregation']) {
            this.rateAggregation = source.rateAggregation;
        }
        if (source['_rateAggregation']) {
            this._rateAggregation = new fhir.FhirElement(source._rateAggregation);
        }
        if (source['rationale']) {
            this.rationale = source.rationale;
        }
        if (source['_rationale']) {
            this._rationale = new fhir.FhirElement(source._rationale);
        }
        if (source['clinicalRecommendationStatement']) {
            this.clinicalRecommendationStatement = source.clinicalRecommendationStatement;
        }
        if (source['_clinicalRecommendationStatement']) {
            this._clinicalRecommendationStatement = new fhir.FhirElement(source._clinicalRecommendationStatement);
        }
        if (source['improvementNotation']) {
            this.improvementNotation = new fhir.CodeableConcept(source.improvementNotation);
        }
        if (source['definition']) {
            this.definition = source.definition.map((x) => (x));
        }
        if (source['_definition']) {
            this._definition = source._definition.map((x) => new fhir.FhirElement(x));
        }
        if (source['guidance']) {
            this.guidance = source.guidance;
        }
        if (source['_guidance']) {
            this._guidance = new fhir.FhirElement(source._guidance);
        }
        if (source['group']) {
            this.group = source.group.map((x) => new fhir.MeasureGroup(x));
        }
        if (source['supplementalData']) {
            this.supplementalData = source.supplementalData.map((x) => new fhir.MeasureSupplementalData(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return PublicationStatusValueSet;
    }
    /**
     * Extensible-bound Value Set for subjectCodeableConcept
     */
    subjectCodeableConceptExtensibleValueSet() {
        return SubjectTypeValueSet;
    }
    /**
     * Extensible-bound Value Set for subjectReference
     */
    subjectReferenceExtensibleValueSet() {
        return SubjectTypeValueSet;
    }
    /**
     * Example-bound Value Set for topic
     */
    topicExampleValueSet() {
        return DefinitionTopicValueSet;
    }
    /**
     * Extensible-bound Value Set for scoring
     */
    scoringExtensibleValueSet() {
        return MeasureScoringValueSet;
    }
    /**
     * Extensible-bound Value Set for compositeScoring
     */
    compositeScoringExtensibleValueSet() {
        return CompositeMeasureScoringValueSet;
    }
    /**
     * Extensible-bound Value Set for type
     */
    typeExtensibleValueSet() {
        return MeasureTypeValueSet;
    }
    /**
     * Required-bound Value Set for improvementNotation
     */
    improvementNotationRequiredValueSet() {
        return MeasureImprovementNotationValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: Measure.resourceType']);
        }
        if (this["_url"]) {
            results.push(...this._url.doModelValidation());
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_version"]) {
            results.push(...this._version.doModelValidation());
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_title"]) {
            results.push(...this._title.doModelValidation());
        }
        if (this["_subtitle"]) {
            results.push(...this._subtitle.doModelValidation());
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: Measure.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["_experimental"]) {
            results.push(...this._experimental.doModelValidation());
        }
        if (this["subjectCodeableConcept"]) {
            results.push(...this.subjectCodeableConcept.doModelValidation());
        }
        if (this["subjectReference"]) {
            results.push(...this.subjectReference.doModelValidation());
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["_publisher"]) {
            results.push(...this._publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_purpose"]) {
            results.push(...this._purpose.doModelValidation());
        }
        if (this["_usage"]) {
            results.push(...this._usage.doModelValidation());
        }
        if (this["_copyright"]) {
            results.push(...this._copyright.doModelValidation());
        }
        if (this["_approvalDate"]) {
            results.push(...this._approvalDate.doModelValidation());
        }
        if (this["_lastReviewDate"]) {
            results.push(...this._lastReviewDate.doModelValidation());
        }
        if (this["effectivePeriod"]) {
            results.push(...this.effectivePeriod.doModelValidation());
        }
        if (this["topic"]) {
            this.topic.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["author"]) {
            this.author.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["editor"]) {
            this.editor.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reviewer"]) {
            this.reviewer.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["endorser"]) {
            this.endorser.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["relatedArtifact"]) {
            this.relatedArtifact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_library"]) {
            this._library.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_disclaimer"]) {
            results.push(...this._disclaimer.doModelValidation());
        }
        if (this["scoring"]) {
            results.push(...this.scoring.doModelValidation());
        }
        if (this["compositeScoring"]) {
            results.push(...this.compositeScoring.doModelValidation());
        }
        if (this["type"]) {
            this.type.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_riskAdjustment"]) {
            results.push(...this._riskAdjustment.doModelValidation());
        }
        if (this["_rateAggregation"]) {
            results.push(...this._rateAggregation.doModelValidation());
        }
        if (this["_rationale"]) {
            results.push(...this._rationale.doModelValidation());
        }
        if (this["_clinicalRecommendationStatement"]) {
            results.push(...this._clinicalRecommendationStatement.doModelValidation());
        }
        if (this["improvementNotation"]) {
            results.push(...this.improvementNotation.doModelValidation());
        }
        if (this["_definition"]) {
            this._definition.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_guidance"]) {
            results.push(...this._guidance.doModelValidation());
        }
        if (this["group"]) {
            this.group.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["supplementalData"]) {
            this.supplementalData.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=Measure.js.map