// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Provenance
import * as fhir from '../fhir.js';
import { ProvenanceAgentTypeValueSet, } from '../fhirValueSets/ProvenanceAgentTypeValueSet.js';
import { SecurityRoleTypeValueSet, } from '../fhirValueSets/SecurityRoleTypeValueSet.js';
import { ProvenanceEntityRoleValueSet, } from '../fhirValueSets/ProvenanceEntityRoleValueSet.js';
import { V3PurposeOfUseValueSet, } from '../fhirValueSets/V3PurposeOfUseValueSet.js';
import { ProvenanceActivityTypeValueSet, } from '../fhirValueSets/ProvenanceActivityTypeValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
 */
export class ProvenanceAgent extends fhir.BackboneElement {
    /**
     * Default constructor for ProvenanceAgent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ProvenanceAgent';
        /**
         * For example: doctor, nurse, clerk, etc.
         */
        this.role = [];
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['role']) {
            this.role = source.role.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['who']) {
            this.who = new fhir.Reference(source.who);
        }
        else {
            this.who = null;
        }
        if (source['onBehalfOf']) {
            this.onBehalfOf = new fhir.Reference(source.onBehalfOf);
        }
    }
    /**
     * Extensible-bound Value Set for type
     */
    static typeExtensibleValueSet() {
        return ProvenanceAgentTypeValueSet;
    }
    /**
     * Example-bound Value Set for role
     */
    static roleExampleValueSet() {
        return SecurityRoleTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["role"]) {
            this.role.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['who']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property who:fhir.Reference fhir: Provenance.agent.who:Reference", }));
        }
        if (this["who"]) {
            outcome.issue.push(...this.who.doModelValidation().issue);
        }
        if (this["onBehalfOf"]) {
            outcome.issue.push(...this.onBehalfOf.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * An entity used in this activity.
 */
export class ProvenanceEntity extends fhir.BackboneElement {
    /**
     * Default constructor for ProvenanceEntity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ProvenanceEntity';
        /**
         * A usecase where one Provenance.entity.agent is used where the Entity that was used in the creation/updating of the Target, is not in the context of the same custodianship as the Target, and thus the meaning of Provenance.entity.agent is to say that the entity referenced is managed elsewhere and that this Agent provided access to it.  This would be similar to where the Entity being referenced is managed outside FHIR, such as through HL7 v2, v3, or XDS. This might be where the Entity being referenced is managed in another FHIR resource server. Thus it explains the Provenance of that Entity's use in the context of this Provenance activity.
         */
        this.agent = [];
        if (source['role']) {
            this.role = source.role;
        }
        else {
            this.role = null;
        }
        if (source['what']) {
            this.what = new fhir.Reference(source.what);
        }
        else {
            this.what = null;
        }
        if (source['agent']) {
            this.agent = source.agent.map((x) => new fhir.ProvenanceAgent(x));
        }
    }
    /**
     * Required-bound Value Set for role
     */
    static roleRequiredValueSet() {
        return ProvenanceEntityRoleValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['role']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property role:ProvenanceEntityRoleValueSetEnum fhir: Provenance.entity.role:code", }));
        }
        if (!this['what']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property what:fhir.Reference fhir: Provenance.entity.what:Reference", }));
        }
        if (this["what"]) {
            outcome.issue.push(...this.what.doModelValidation().issue);
        }
        if (this["agent"]) {
            this.agent.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
 */
export class Provenance extends fhir.DomainResource {
    /**
     * Default constructor for Provenance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'Provenance';
        /**
         * Target references are usually version specific, but might not be, if a version has not been assigned or if the provenance information is part of the set of resources being maintained (i.e. a document). When using the RESTful API, the identity of the resource might not be known (especially not the version specific one); the client may either submit the resource first, and then the provenance, or it may submit both using a single transaction. See the notes on transaction for further discussion.
         */
        this.target = [];
        this.__occurredIsChoice = true;
        /**
         * For example: Where an OAuth token authorizes, the unique identifier from the OAuth token is placed into the policy element Where a policy engine (e.g. XACML) holds policy logic, the unique policy identifier is placed into the policy element.
         */
        this.policy = [];
        /**
         * The reason that the activity was taking place.
         */
        this.reason = [];
        /**
         * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
         */
        this.agent = [];
        /**
         * An entity used in this activity.
         */
        this.entity = [];
        /**
         * A digital signature on the target Reference(s). The signer should match a Provenance.agent. The purpose of the signature is indicated.
         */
        this.signature = [];
        this.resourceType = 'Provenance';
        if (source['target']) {
            this.target = source.target.map((x) => new fhir.Reference(x));
        }
        else {
            this.target = null;
        }
        if (source['occurred']) {
            this.occurred = source.occurred;
        }
        else if (source['occurredPeriod']) {
            this.occurred = new fhir.Period(source.occurredPeriod);
        }
        else if (source['occurredDateTime']) {
            this.occurred = new fhir.FhirDateTime({ value: source.occurredDateTime });
        }
        if (source['recorded']) {
            this.recorded = new fhir.FhirInstant({ value: source.recorded });
        }
        else {
            this.recorded = null;
        }
        if (source['policy']) {
            this.policy = source.policy.map((x) => new fhir.FhirUri({ value: x }));
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['activity']) {
            this.activity = new fhir.CodeableConcept(source.activity);
        }
        if (source['agent']) {
            this.agent = source.agent.map((x) => new fhir.ProvenanceAgent(x));
        }
        else {
            this.agent = null;
        }
        if (source['entity']) {
            this.entity = source.entity.map((x) => new fhir.ProvenanceEntity(x));
        }
        if (source['signature']) {
            this.signature = source.signature.map((x) => new fhir.Signature(x));
        }
    }
    /**
     * Extensible-bound Value Set for reason
     */
    static reasonExtensibleValueSet() {
        return V3PurposeOfUseValueSet;
    }
    /**
     * Extensible-bound Value Set for activity
     */
    static activityExtensibleValueSet() {
        return ProvenanceActivityTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'Provenance' fhir: Provenance.resourceType:'Provenance'", }));
        }
        if (!this['target']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property target:fhir.Reference[] fhir: Provenance.target:Reference", }));
        }
        else if (!Array.isArray(this.target)) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue, diagnostics: "Found scalar in array property target:fhir.Reference[] fhir: Provenance.target:Reference", }));
        }
        else if (this.target.length === 0) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property target:fhir.Reference[] fhir: Provenance.target:Reference", }));
        }
        if (this["target"]) {
            this.target.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['recorded']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property recorded:fhir.FhirInstant fhir: Provenance.recorded:instant", }));
        }
        if (this["recorded"]) {
            outcome.issue.push(...this.recorded.doModelValidation().issue);
        }
        if (this["policy"]) {
            this.policy.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["location"]) {
            outcome.issue.push(...this.location.doModelValidation().issue);
        }
        if (this["reason"]) {
            this.reason.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["activity"]) {
            outcome.issue.push(...this.activity.doModelValidation().issue);
        }
        if (!this['agent']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property agent:fhir.ProvenanceAgent[] fhir: Provenance.agent:agent", }));
        }
        else if (!Array.isArray(this.agent)) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue, diagnostics: "Found scalar in array property agent:fhir.ProvenanceAgent[] fhir: Provenance.agent:agent", }));
        }
        else if (this.agent.length === 0) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property agent:fhir.ProvenanceAgent[] fhir: Provenance.agent:agent", }));
        }
        if (this["agent"]) {
            this.agent.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["entity"]) {
            this.entity.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["signature"]) {
            this.signature.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=Provenance.js.map