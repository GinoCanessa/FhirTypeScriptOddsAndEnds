// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
 */
export class ProvenanceAgent extends fhir.BackboneElement {
    /**
     * Default constructor for ProvenanceAgent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["onBehalfOf"]) {
            this.onBehalfOf = new fhir.Reference(source.onBehalfOf);
        }
        if (source["role"]) {
            this.role = source.role.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        this.who = null;
        if (source["who"]) {
            this.who = new fhir.Reference(source.who);
        }
        if (this.who === undefined) {
            this.who = null;
        }
    }
    /**
     * Check if the current ProvenanceAgent contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["who"] === undefined) {
            missingElements.push("who");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ProvenanceAgent from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ProvenanceAgent(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ProvenanceAgent is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * An entity used in this activity.
 */
export class ProvenanceEntity extends fhir.BackboneElement {
    /**
     * Default constructor for ProvenanceEntity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["agent"]) {
            this.agent = source.agent.map((x) => new fhir.ProvenanceAgent(x));
        }
        this.role = null;
        if (source["role"]) {
            this.role = source.role;
        }
        if (this.role === undefined) {
            this.role = null;
        }
        if (source["_role"]) {
            this._role = new fhir.FhirElement(source._role);
        }
        this.what = null;
        if (source["what"]) {
            this.what = new fhir.Reference(source.what);
        }
        if (this.what === undefined) {
            this.what = null;
        }
    }
    /**
     * Check if the current ProvenanceEntity contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["role"] === undefined) {
            missingElements.push("role");
        }
        if (this["what"] === undefined) {
            missingElements.push("what");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ProvenanceEntity from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ProvenanceEntity(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ProvenanceEntity is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
 */
export class Provenance extends fhir.DomainResource {
    /**
     * Default constructor for Provenance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Provenance';
        if (source["activity"]) {
            this.activity = new fhir.CodeableConcept(source.activity);
        }
        this.agent = null;
        if (source["agent"]) {
            this.agent = source.agent.map((x) => new fhir.ProvenanceAgent(x));
        }
        if (this.agent === undefined) {
            this.agent = null;
        }
        if (source["entity"]) {
            this.entity = source.entity.map((x) => new fhir.ProvenanceEntity(x));
        }
        if (source["location"]) {
            this.location = new fhir.Reference(source.location);
        }
        if (source["occurredPeriod"]) {
            this.occurredPeriod = new fhir.Period(source.occurredPeriod);
        }
        if (source["occurredDateTime"]) {
            this.occurredDateTime = source.occurredDateTime;
        }
        if (source["_occurredDateTime"]) {
            this._occurredDateTime = new fhir.FhirElement(source._occurredDateTime);
        }
        if (source["policy"]) {
            this.policy = source.policy.map((x) => (x));
        }
        if (source["_policy"]) {
            this._policy = source._policy.map((x) => new fhir.FhirElement(x));
        }
        if (source["reason"]) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x));
        }
        this.recorded = null;
        if (source["recorded"]) {
            this.recorded = source.recorded;
        }
        if (this.recorded === undefined) {
            this.recorded = null;
        }
        if (source["_recorded"]) {
            this._recorded = new fhir.FhirElement(source._recorded);
        }
        if (source["signature"]) {
            this.signature = source.signature.map((x) => new fhir.Signature(x));
        }
        this.target = null;
        if (source["target"]) {
            this.target = source.target.map((x) => new fhir.Reference(x));
        }
        if (this.target === undefined) {
            this.target = null;
        }
    }
    /**
     * Check if the current Provenance contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if ((!this["agent"]) || (this["agent"].length === 0)) {
            missingElements.push("agent");
        }
        if (this["recorded"] === undefined) {
            missingElements.push("recorded");
        }
        if ((!this["target"]) || (this["target"].length === 0)) {
            missingElements.push("target");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Provenance from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new Provenance(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Provenance is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the Provenance.entity.role field
 */
export var ProvenanceEntityRoleEnum;
(function (ProvenanceEntityRoleEnum) {
    ProvenanceEntityRoleEnum["DERIVATION"] = "derivation";
    ProvenanceEntityRoleEnum["REVISION"] = "revision";
    ProvenanceEntityRoleEnum["QUOTATION"] = "quotation";
    ProvenanceEntityRoleEnum["SOURCE"] = "source";
    ProvenanceEntityRoleEnum["REMOVAL"] = "removal";
})(ProvenanceEntityRoleEnum || (ProvenanceEntityRoleEnum = {}));
//# sourceMappingURL=Provenance.js.map