// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Provenance
import * as fhir from '../fhir.js';
import { ProvenanceAgentTypeValueSet } from '../fhirValueSets/ProvenanceAgentTypeValueSet.js';
import { SecurityRoleTypeValueSet } from '../fhirValueSets/SecurityRoleTypeValueSet.js';
import { ProvenanceEntityRoleValueSet } from '../fhirValueSets/ProvenanceEntityRoleValueSet.js';
import { V3PurposeOfUseValueSet } from '../fhirValueSets/V3PurposeOfUseValueSet.js';
import { ProvenanceActivityTypeValueSet } from '../fhirValueSets/ProvenanceActivityTypeValueSet.js';
/**
 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
 */
export class ProvenanceAgent extends fhir.BackboneElement {
    /**
     * Default constructor for ProvenanceAgent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['role']) {
            this.role = source.role.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['who']) {
            this.who = new fhir.Reference(source.who);
        }
        else {
            this.who = null;
        }
        if (source['onBehalfOf']) {
            this.onBehalfOf = new fhir.Reference(source.onBehalfOf);
        }
    }
    /**
     * Extensible-bound Value Set for type
     */
    static typeExtensibleValueSet() {
        return ProvenanceAgentTypeValueSet;
    }
    /**
     * Example-bound Value Set for role
     */
    static roleExampleValueSet() {
        return SecurityRoleTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["role"]) {
            this.role.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["who"]) {
            results.push(["who", 'Missing required element: Provenance.agent.who']);
        }
        if (this["who"]) {
            results.push(...this.who.doModelValidation());
        }
        if (this["onBehalfOf"]) {
            results.push(...this.onBehalfOf.doModelValidation());
        }
        return results;
    }
}
/**
 * An entity used in this activity.
 */
export class ProvenanceEntity extends fhir.BackboneElement {
    /**
     * Default constructor for ProvenanceEntity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['role']) {
            this.role = source.role;
        }
        else {
            this.role = null;
        }
        if (source['_role']) {
            this._role = new fhir.FhirElement(source._role);
        }
        if (source['what']) {
            this.what = new fhir.Reference(source.what);
        }
        else {
            this.what = null;
        }
        if (source['agent']) {
            this.agent = source.agent.map((x) => new fhir.ProvenanceAgent(x));
        }
    }
    /**
     * Required-bound Value Set for role
     */
    static roleRequiredValueSet() {
        return ProvenanceEntityRoleValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["role"]) {
            results.push(["role", 'Missing required element: Provenance.entity.role']);
        }
        if (this["_role"]) {
            results.push(...this._role.doModelValidation());
        }
        if (!this["what"]) {
            results.push(["what", 'Missing required element: Provenance.entity.what']);
        }
        if (this["what"]) {
            results.push(...this.what.doModelValidation());
        }
        if (this["agent"]) {
            this.agent.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
 */
export class Provenance extends fhir.DomainResource {
    /**
     * Default constructor for Provenance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Provenance';
        if (source['target']) {
            this.target = source.target.map((x) => new fhir.Reference(x));
        }
        else {
            this.target = null;
        }
        if (source['occurredPeriod']) {
            this.occurredPeriod = new fhir.Period(source.occurredPeriod);
        }
        if (source['occurredDateTime']) {
            this.occurredDateTime = source.occurredDateTime;
        }
        if (source['_occurredDateTime']) {
            this._occurredDateTime = new fhir.FhirElement(source._occurredDateTime);
        }
        if (source['recorded']) {
            this.recorded = source.recorded;
        }
        else {
            this.recorded = null;
        }
        if (source['_recorded']) {
            this._recorded = new fhir.FhirElement(source._recorded);
        }
        if (source['policy']) {
            this.policy = source.policy.map((x) => (x));
        }
        if (source['_policy']) {
            this._policy = source._policy.map((x) => new fhir.FhirElement(x));
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['activity']) {
            this.activity = new fhir.CodeableConcept(source.activity);
        }
        if (source['agent']) {
            this.agent = source.agent.map((x) => new fhir.ProvenanceAgent(x));
        }
        else {
            this.agent = null;
        }
        if (source['entity']) {
            this.entity = source.entity.map((x) => new fhir.ProvenanceEntity(x));
        }
        if (source['signature']) {
            this.signature = source.signature.map((x) => new fhir.Signature(x));
        }
    }
    /**
     * Extensible-bound Value Set for reason
     */
    static reasonExtensibleValueSet() {
        return V3PurposeOfUseValueSet;
    }
    /**
     * Extensible-bound Value Set for activity
     */
    static activityExtensibleValueSet() {
        return ProvenanceActivityTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: Provenance.resourceType']);
        }
        if ((!this["target"]) || (this["target"].length === 0)) {
            results.push(["target", 'Missing required element: Provenance.target']);
        }
        if (this["target"]) {
            this.target.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["occurredPeriod"]) {
            results.push(...this.occurredPeriod.doModelValidation());
        }
        if (this["_occurredDateTime"]) {
            results.push(...this._occurredDateTime.doModelValidation());
        }
        if (!this["recorded"]) {
            results.push(["recorded", 'Missing required element: Provenance.recorded']);
        }
        if (this["_recorded"]) {
            results.push(...this._recorded.doModelValidation());
        }
        if (this["_policy"]) {
            this._policy.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["location"]) {
            results.push(...this.location.doModelValidation());
        }
        if (this["reason"]) {
            this.reason.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["activity"]) {
            results.push(...this.activity.doModelValidation());
        }
        if ((!this["agent"]) || (this["agent"].length === 0)) {
            results.push(["agent", 'Missing required element: Provenance.agent']);
        }
        if (this["agent"]) {
            this.agent.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["entity"]) {
            this.entity.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["signature"]) {
            this.signature.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=Provenance.js.map