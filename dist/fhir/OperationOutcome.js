// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: OperationOutcome
import * as fhir from '../fhir.js';
import { IssueSeverityValueSet, } from '../fhirValueSets/IssueSeverityValueSet.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
import { IssueTypeValueSet, } from '../fhirValueSets/IssueTypeValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { OperationOutcomeValueSet, } from '../fhirValueSets/OperationOutcomeValueSet.js';
/**
 * An error, warning, or information message that results from a system action.
 */
export class OperationOutcomeIssue extends fhir.BackboneElement {
    /**
     * Default constructor for OperationOutcomeIssue - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'OperationOutcomeIssue';
        /**
         * The root of the XPath is the resource or bundle that generated OperationOutcome.  Each XPath SHALL resolve to a single node.  This element is deprecated, and is being replaced by expression.
         */
        this.location = [];
        /**
         * The root of the FHIRPath is the resource or bundle that generated OperationOutcome.  Each FHIRPath SHALL resolve to a single node.
         */
        this.expression = [];
        if (source['severity']) {
            this.severity = source.severity;
        }
        else {
            this.severity = null;
        }
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['details']) {
            this.details = new fhir.CodeableConcept(source.details);
        }
        if (source['diagnostics']) {
            this.diagnostics = new fhir.FhirString({ value: source.diagnostics });
        }
        if (source['location']) {
            this.location = source.location.map((x) => new fhir.FhirString({ value: x }));
        }
        if (source['expression']) {
            this.expression = source.expression.map((x) => new fhir.FhirString({ value: x }));
        }
    }
    /**
     * Required-bound Value Set for severity
     */
    static severityRequiredValueSet() {
        return IssueSeverityValueSet;
    }
    /**
     * Required-bound Value Set for code
     */
    static codeRequiredValueSet() {
        return IssueTypeValueSet;
    }
    /**
     * Example-bound Value Set for details
     */
    static detailsExampleValueSet() {
        return OperationOutcomeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['severity']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property severity:IssueSeverityValueSetEnum fhir: OperationOutcome.issue.severity:code", }));
        }
        if (!this['code']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property code:fhir.FhirCode fhir: OperationOutcome.issue.code:code", }));
        }
        if (this["code"]) {
            outcome.issue.push(...this.code.doModelValidation().issue);
        }
        if (this["details"]) {
            outcome.issue.push(...this.details.doModelValidation().issue);
        }
        if (this["diagnostics"]) {
            outcome.issue.push(...this.diagnostics.doModelValidation().issue);
        }
        if (this["location"]) {
            this.location.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["expression"]) {
            this.expression.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * A collection of error, warning, or information messages that result from a system action.
 */
export class OperationOutcome extends fhir.DomainResource {
    /**
     * Default constructor for OperationOutcome - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'OperationOutcome';
        /**
         * An error, warning, or information message that results from a system action.
         */
        this.issue = [];
        this.resourceType = 'OperationOutcome';
        if (source['issue']) {
            this.issue = source.issue.map((x) => new fhir.OperationOutcomeIssue(x));
        }
        else {
            this.issue = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'OperationOutcome' fhir: OperationOutcome.resourceType:'OperationOutcome'", }));
        }
        if (!this['issue']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property issue:fhir.OperationOutcomeIssue[] fhir: OperationOutcome.issue:issue", }));
        }
        else if (!Array.isArray(this.issue)) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue, diagnostics: "Found scalar in array property issue:fhir.OperationOutcomeIssue[] fhir: OperationOutcome.issue:issue", }));
        }
        else if (this.issue.length === 0) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property issue:fhir.OperationOutcomeIssue[] fhir: OperationOutcome.issue:issue", }));
        }
        if (this["issue"]) {
            this.issue.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=OperationOutcome.js.map