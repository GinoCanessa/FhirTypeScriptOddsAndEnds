// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: OperationOutcome
import * as fhir from '../fhir.js';
import { IssueSeverityValueSet } from '../fhirValueSets/IssueSeverityValueSet.js';
import { IssueTypeValueSet } from '../fhirValueSets/IssueTypeValueSet.js';
import { OperationOutcomeValueSet } from '../fhirValueSets/OperationOutcomeValueSet.js';
/**
 * An error, warning, or information message that results from a system action.
 */
export class OperationOutcomeIssue extends fhir.BackboneElement {
    /**
     * Default constructor for OperationOutcomeIssue - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['severity']) {
            this.severity = source.severity;
        }
        else {
            this.severity = null;
        }
        if (source['_severity']) {
            this._severity = new fhir.FhirElement(source._severity);
        }
        if (source['code']) {
            this.code = source.code;
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source['details']) {
            this.details = new fhir.CodeableConcept(source.details);
        }
        if (source['diagnostics']) {
            this.diagnostics = source.diagnostics;
        }
        if (source['_diagnostics']) {
            this._diagnostics = new fhir.FhirElement(source._diagnostics);
        }
        if (source['location']) {
            this.location = source.location.map((x) => (x));
        }
        if (source['_location']) {
            this._location = source._location.map((x) => new fhir.FhirElement(x));
        }
        if (source['expression']) {
            this.expression = source.expression.map((x) => (x));
        }
        if (source['_expression']) {
            this._expression = source._expression.map((x) => new fhir.FhirElement(x));
        }
    }
    /**
     * Required-bound Value Set for severity
     */
    static severityRequiredValueSet() {
        return IssueSeverityValueSet;
    }
    /**
     * Required-bound Value Set for code
     */
    static codeRequiredValueSet() {
        return IssueTypeValueSet;
    }
    /**
     * Example-bound Value Set for details
     */
    static detailsExampleValueSet() {
        return OperationOutcomeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["severity"]) {
            results.push(["severity", 'Missing required element: OperationOutcome.issue.severity']);
        }
        if (this["_severity"]) {
            results.push(...this._severity.doModelValidation());
        }
        if (!this["code"]) {
            results.push(["code", 'Missing required element: OperationOutcome.issue.code']);
        }
        if (this["_code"]) {
            results.push(...this._code.doModelValidation());
        }
        if (this["details"]) {
            results.push(...this.details.doModelValidation());
        }
        if (this["_diagnostics"]) {
            results.push(...this._diagnostics.doModelValidation());
        }
        if (this["_location"]) {
            this._location.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_expression"]) {
            this._expression.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * A collection of error, warning, or information messages that result from a system action.
 */
export class OperationOutcome extends fhir.DomainResource {
    /**
     * Default constructor for OperationOutcome - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'OperationOutcome';
        if (source['issue']) {
            this.issue = source.issue.map((x) => new fhir.OperationOutcomeIssue(x));
        }
        else {
            this.issue = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: OperationOutcome.resourceType']);
        }
        if ((!this["issue"]) || (this["issue"].length === 0)) {
            results.push(["issue", 'Missing required element: OperationOutcome.issue']);
        }
        if (this["issue"]) {
            this.issue.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=OperationOutcome.js.map