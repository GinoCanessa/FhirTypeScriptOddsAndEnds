// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * An error, warning, or information message that results from a system action.
 */
export class OperationOutcomeIssue extends fhir.BackboneElement {
    /**
     * Default constructor for OperationOutcomeIssue - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.code = null;
        if (source["code"]) {
            this.code = source.code;
        }
        if (this.code === undefined) {
            this.code = null;
        }
        if (source["_code"]) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source["details"]) {
            this.details = new fhir.CodeableConcept(source.details);
        }
        if (source["diagnostics"]) {
            this.diagnostics = source.diagnostics;
        }
        if (source["_diagnostics"]) {
            this._diagnostics = new fhir.FhirElement(source._diagnostics);
        }
        if (source["expression"]) {
            this.expression = source.expression.map((x) => (x));
        }
        if (source["_expression"]) {
            this._expression = source._expression.map((x) => new fhir.FhirElement(x));
        }
        if (source["location"]) {
            this.location = source.location.map((x) => (x));
        }
        if (source["_location"]) {
            this._location = source._location.map((x) => new fhir.FhirElement(x));
        }
        this.severity = null;
        if (source["severity"]) {
            this.severity = source.severity;
        }
        if (this.severity === undefined) {
            this.severity = null;
        }
        if (source["_severity"]) {
            this._severity = new fhir.FhirElement(source._severity);
        }
    }
    /**
     * Check if the current OperationOutcomeIssue contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        if (this["severity"] === undefined) {
            missingElements.push("severity");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a OperationOutcomeIssue from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new OperationOutcomeIssue(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `OperationOutcomeIssue is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A collection of error, warning, or information messages that result from a system action.
 */
export class OperationOutcome extends fhir.DomainResource {
    /**
     * Default constructor for OperationOutcome - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'OperationOutcome';
        this.issue = null;
        if (source["issue"]) {
            this.issue = source.issue.map((x) => new fhir.OperationOutcomeIssue(x));
        }
        if (this.issue === undefined) {
            this.issue = null;
        }
    }
    /**
     * Check if the current OperationOutcome contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if ((!this["issue"]) || (this["issue"].length === 0)) {
            missingElements.push("issue");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a OperationOutcome from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new OperationOutcome(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `OperationOutcome is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the OperationOutcome.issue.severity field
 */
export var OperationOutcomeIssueSeverityEnum;
(function (OperationOutcomeIssueSeverityEnum) {
    OperationOutcomeIssueSeverityEnum["FATAL"] = "fatal";
    OperationOutcomeIssueSeverityEnum["ERROR"] = "error";
    OperationOutcomeIssueSeverityEnum["WARNING"] = "warning";
    OperationOutcomeIssueSeverityEnum["INFORMATION"] = "information";
})(OperationOutcomeIssueSeverityEnum || (OperationOutcomeIssueSeverityEnum = {}));
//# sourceMappingURL=OperationOutcome.js.map