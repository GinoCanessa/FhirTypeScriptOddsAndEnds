// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Person
import * as fhir from '../fhir.js';
import { IdentityAssuranceLevelValueSet } from '../fhirValueSets/IdentityAssuranceLevelValueSet.js';
import { AdministrativeGenderValueSet } from '../fhirValueSets/AdministrativeGenderValueSet.js';
/**
 * Link to a resource that concerns the same actual person.
 */
export class PersonLink extends fhir.BackboneElement {
    /**
     * Default constructor for PersonLink - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['target']) {
            this.target = new fhir.Reference(source.target);
        }
        else {
            this.target = null;
        }
        if (source['assurance']) {
            this.assurance = source.assurance;
        }
        if (source['_assurance']) {
            this._assurance = new fhir.FhirElement(source._assurance);
        }
    }
    /**
     * Required-bound Value Set for assurance
     */
    assuranceRequiredValueSet() {
        return IdentityAssuranceLevelValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["target"]) {
            results.push(["target", 'Missing required element: Person.link.target']);
        }
        if (this["target"]) {
            results.push(...this.target.doModelValidation());
        }
        if (this["_assurance"]) {
            results.push(...this._assurance.doModelValidation());
        }
        return results;
    }
}
/**
 * Demographics and administrative information about a person independent of a specific health-related context.
 */
export class Person extends fhir.DomainResource {
    /**
     * Default constructor for Person - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Person';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['name']) {
            this.name = source.name.map((x) => new fhir.HumanName(x));
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        if (source['gender']) {
            this.gender = source.gender;
        }
        if (source['_gender']) {
            this._gender = new fhir.FhirElement(source._gender);
        }
        if (source['birthDate']) {
            this.birthDate = source.birthDate;
        }
        if (source['_birthDate']) {
            this._birthDate = new fhir.FhirElement(source._birthDate);
        }
        if (source['address']) {
            this.address = source.address.map((x) => new fhir.Address(x));
        }
        if (source['photo']) {
            this.photo = new fhir.Attachment(source.photo);
        }
        if (source['managingOrganization']) {
            this.managingOrganization = new fhir.Reference(source.managingOrganization);
        }
        if (source['active']) {
            this.active = source.active;
        }
        if (source['_active']) {
            this._active = new fhir.FhirElement(source._active);
        }
        if (source['link']) {
            this.link = source.link.map((x) => new fhir.PersonLink(x));
        }
    }
    /**
     * Required-bound Value Set for gender
     */
    genderRequiredValueSet() {
        return AdministrativeGenderValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: Person.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["name"]) {
            this.name.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["telecom"]) {
            this.telecom.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_gender"]) {
            results.push(...this._gender.doModelValidation());
        }
        if (this["_birthDate"]) {
            results.push(...this._birthDate.doModelValidation());
        }
        if (this["address"]) {
            this.address.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["photo"]) {
            results.push(...this.photo.doModelValidation());
        }
        if (this["managingOrganization"]) {
            results.push(...this.managingOrganization.doModelValidation());
        }
        if (this["_active"]) {
            results.push(...this._active.doModelValidation());
        }
        if (this["link"]) {
            this.link.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=Person.js.map