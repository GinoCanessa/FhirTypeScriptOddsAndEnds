// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Link to a resource that concerns the same actual person.
 */
export class PersonLink extends fhir.BackboneElement {
    /**
     * Default constructor for PersonLink - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["assurance"]) {
            this.assurance = source.assurance;
        }
        if (source["_assurance"]) {
            this._assurance = new fhir.FhirElement(source._assurance);
        }
        this.target = null;
        if (source["target"]) {
            this.target = new fhir.Reference(source.target);
        }
        if (this.target === undefined) {
            this.target = null;
        }
    }
    /**
     * Check if the current PersonLink contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["target"] === undefined) {
            missingElements.push("target");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a PersonLink from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new PersonLink(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `PersonLink is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Demographics and administrative information about a person independent of a specific health-related context.
 */
export class Person extends fhir.DomainResource {
    /**
     * Default constructor for Person - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Person';
        if (source["active"]) {
            this.active = source.active;
        }
        if (source["_active"]) {
            this._active = new fhir.FhirElement(source._active);
        }
        if (source["address"]) {
            this.address = source.address.map((x) => new fhir.Address(x));
        }
        if (source["birthDate"]) {
            this.birthDate = source.birthDate;
        }
        if (source["_birthDate"]) {
            this._birthDate = new fhir.FhirElement(source._birthDate);
        }
        if (source["gender"]) {
            this.gender = source.gender;
        }
        if (source["_gender"]) {
            this._gender = new fhir.FhirElement(source._gender);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["link"]) {
            this.link = source.link.map((x) => new fhir.PersonLink(x));
        }
        if (source["managingOrganization"]) {
            this.managingOrganization = new fhir.Reference(source.managingOrganization);
        }
        if (source["name"]) {
            this.name = source.name.map((x) => new fhir.HumanName(x));
        }
        if (source["photo"]) {
            this.photo = new fhir.Attachment(source.photo);
        }
        if (source["telecom"]) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
    }
    /**
     * Check if the current Person contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Person from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new Person(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Person is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the Person.link.assurance field
 */
export var PersonLinkAssuranceEnum;
(function (PersonLinkAssuranceEnum) {
    PersonLinkAssuranceEnum["LEVEL1"] = "level1";
    PersonLinkAssuranceEnum["LEVEL2"] = "level2";
    PersonLinkAssuranceEnum["LEVEL3"] = "level3";
    PersonLinkAssuranceEnum["LEVEL4"] = "level4";
})(PersonLinkAssuranceEnum || (PersonLinkAssuranceEnum = {}));
/**
 * Code Values for the Person.gender field
 */
export var PersonGenderEnum;
(function (PersonGenderEnum) {
    PersonGenderEnum["MALE"] = "male";
    PersonGenderEnum["FEMALE"] = "female";
    PersonGenderEnum["OTHER"] = "other";
    PersonGenderEnum["UNKNOWN"] = "unknown";
})(PersonGenderEnum || (PersonGenderEnum = {}));
//# sourceMappingURL=Person.js.map