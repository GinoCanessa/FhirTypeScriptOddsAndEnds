// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: VerificationResult
import * as fhir from '../fhir.js';
import { VerificationresultPrimarySourceTypeValueSet } from '../fhirValueSets/VerificationresultPrimarySourceTypeValueSet.js';
import { VerificationresultCommunicationMethodValueSet } from '../fhirValueSets/VerificationresultCommunicationMethodValueSet.js';
import { VerificationresultValidationStatusValueSet } from '../fhirValueSets/VerificationresultValidationStatusValueSet.js';
import { VerificationresultCanPushUpdatesValueSet } from '../fhirValueSets/VerificationresultCanPushUpdatesValueSet.js';
import { VerificationresultPushTypeAvailableValueSet } from '../fhirValueSets/VerificationresultPushTypeAvailableValueSet.js';
import { VerificationresultNeedValueSet } from '../fhirValueSets/VerificationresultNeedValueSet.js';
import { VerificationresultStatusValueSet } from '../fhirValueSets/VerificationresultStatusValueSet.js';
import { VerificationresultValidationTypeValueSet } from '../fhirValueSets/VerificationresultValidationTypeValueSet.js';
import { VerificationresultValidationProcessValueSet } from '../fhirValueSets/VerificationresultValidationProcessValueSet.js';
import { VerificationresultFailureActionValueSet } from '../fhirValueSets/VerificationresultFailureActionValueSet.js';
/**
 * Information about the primary source(s) involved in validation.
 */
export class VerificationResultPrimarySource extends fhir.BackboneElement {
    /**
     * Default constructor for VerificationResultPrimarySource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['who']) {
            this.who = new fhir.Reference(source.who);
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['communicationMethod']) {
            this.communicationMethod = source.communicationMethod.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['validationStatus']) {
            this.validationStatus = new fhir.CodeableConcept(source.validationStatus);
        }
        if (source['validationDate']) {
            this.validationDate = source.validationDate;
        }
        if (source['_validationDate']) {
            this._validationDate = new fhir.FhirElement(source._validationDate);
        }
        if (source['canPushUpdates']) {
            this.canPushUpdates = new fhir.CodeableConcept(source.canPushUpdates);
        }
        if (source['pushTypeAvailable']) {
            this.pushTypeAvailable = source.pushTypeAvailable.map((x) => new fhir.CodeableConcept(x));
        }
    }
    /**
     * Example-bound Value Set for type
     */
    typeExampleValueSet() {
        return VerificationresultPrimarySourceTypeValueSet;
    }
    /**
     * Example-bound Value Set for communicationMethod
     */
    communicationMethodExampleValueSet() {
        return VerificationresultCommunicationMethodValueSet;
    }
    /**
     * Preferred-bound Value Set for validationStatus
     */
    validationStatusPreferredValueSet() {
        return VerificationresultValidationStatusValueSet;
    }
    /**
     * Preferred-bound Value Set for canPushUpdates
     */
    canPushUpdatesPreferredValueSet() {
        return VerificationresultCanPushUpdatesValueSet;
    }
    /**
     * Preferred-bound Value Set for pushTypeAvailable
     */
    pushTypeAvailablePreferredValueSet() {
        return VerificationresultPushTypeAvailableValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["who"]) {
            results.push(...this.who.doModelValidation());
        }
        if (this["type"]) {
            this.type.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["communicationMethod"]) {
            this.communicationMethod.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["validationStatus"]) {
            results.push(...this.validationStatus.doModelValidation());
        }
        if (this["_validationDate"]) {
            results.push(...this._validationDate.doModelValidation());
        }
        if (this["canPushUpdates"]) {
            results.push(...this.canPushUpdates.doModelValidation());
        }
        if (this["pushTypeAvailable"]) {
            this.pushTypeAvailable.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Information about the entity attesting to information.
 */
export class VerificationResultAttestation extends fhir.BackboneElement {
    /**
     * Default constructor for VerificationResultAttestation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['who']) {
            this.who = new fhir.Reference(source.who);
        }
        if (source['onBehalfOf']) {
            this.onBehalfOf = new fhir.Reference(source.onBehalfOf);
        }
        if (source['communicationMethod']) {
            this.communicationMethod = new fhir.CodeableConcept(source.communicationMethod);
        }
        if (source['date']) {
            this.date = source.date;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['sourceIdentityCertificate']) {
            this.sourceIdentityCertificate = source.sourceIdentityCertificate;
        }
        if (source['_sourceIdentityCertificate']) {
            this._sourceIdentityCertificate = new fhir.FhirElement(source._sourceIdentityCertificate);
        }
        if (source['proxyIdentityCertificate']) {
            this.proxyIdentityCertificate = source.proxyIdentityCertificate;
        }
        if (source['_proxyIdentityCertificate']) {
            this._proxyIdentityCertificate = new fhir.FhirElement(source._proxyIdentityCertificate);
        }
        if (source['proxySignature']) {
            this.proxySignature = new fhir.Signature(source.proxySignature);
        }
        if (source['sourceSignature']) {
            this.sourceSignature = new fhir.Signature(source.sourceSignature);
        }
    }
    /**
     * Example-bound Value Set for communicationMethod
     */
    communicationMethodExampleValueSet() {
        return VerificationresultCommunicationMethodValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["who"]) {
            results.push(...this.who.doModelValidation());
        }
        if (this["onBehalfOf"]) {
            results.push(...this.onBehalfOf.doModelValidation());
        }
        if (this["communicationMethod"]) {
            results.push(...this.communicationMethod.doModelValidation());
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["_sourceIdentityCertificate"]) {
            results.push(...this._sourceIdentityCertificate.doModelValidation());
        }
        if (this["_proxyIdentityCertificate"]) {
            results.push(...this._proxyIdentityCertificate.doModelValidation());
        }
        if (this["proxySignature"]) {
            results.push(...this.proxySignature.doModelValidation());
        }
        if (this["sourceSignature"]) {
            results.push(...this.sourceSignature.doModelValidation());
        }
        return results;
    }
}
/**
 * Information about the entity validating information.
 */
export class VerificationResultValidator extends fhir.BackboneElement {
    /**
     * Default constructor for VerificationResultValidator - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['organization']) {
            this.organization = new fhir.Reference(source.organization);
        }
        else {
            this.organization = null;
        }
        if (source['identityCertificate']) {
            this.identityCertificate = source.identityCertificate;
        }
        if (source['_identityCertificate']) {
            this._identityCertificate = new fhir.FhirElement(source._identityCertificate);
        }
        if (source['attestationSignature']) {
            this.attestationSignature = new fhir.Signature(source.attestationSignature);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["organization"]) {
            results.push(["organization", 'Missing required element: VerificationResult.validator.organization']);
        }
        if (this["organization"]) {
            results.push(...this.organization.doModelValidation());
        }
        if (this["_identityCertificate"]) {
            results.push(...this._identityCertificate.doModelValidation());
        }
        if (this["attestationSignature"]) {
            results.push(...this.attestationSignature.doModelValidation());
        }
        return results;
    }
}
/**
 * Describes validation requirements, source(s), status and dates for one or more elements.
 */
export class VerificationResult extends fhir.DomainResource {
    /**
     * Default constructor for VerificationResult - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'VerificationResult';
        if (source['target']) {
            this.target = source.target.map((x) => new fhir.Reference(x));
        }
        if (source['targetLocation']) {
            this.targetLocation = source.targetLocation.map((x) => (x));
        }
        if (source['_targetLocation']) {
            this._targetLocation = source._targetLocation.map((x) => new fhir.FhirElement(x));
        }
        if (source['need']) {
            this.need = new fhir.CodeableConcept(source.need);
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['statusDate']) {
            this.statusDate = source.statusDate;
        }
        if (source['_statusDate']) {
            this._statusDate = new fhir.FhirElement(source._statusDate);
        }
        if (source['validationType']) {
            this.validationType = new fhir.CodeableConcept(source.validationType);
        }
        if (source['validationProcess']) {
            this.validationProcess = source.validationProcess.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['frequency']) {
            this.frequency = new fhir.Timing(source.frequency);
        }
        if (source['lastPerformed']) {
            this.lastPerformed = source.lastPerformed;
        }
        if (source['_lastPerformed']) {
            this._lastPerformed = new fhir.FhirElement(source._lastPerformed);
        }
        if (source['nextScheduled']) {
            this.nextScheduled = source.nextScheduled;
        }
        if (source['_nextScheduled']) {
            this._nextScheduled = new fhir.FhirElement(source._nextScheduled);
        }
        if (source['failureAction']) {
            this.failureAction = new fhir.CodeableConcept(source.failureAction);
        }
        if (source['primarySource']) {
            this.primarySource = source.primarySource.map((x) => new fhir.VerificationResultPrimarySource(x));
        }
        if (source['attestation']) {
            this.attestation = new fhir.VerificationResultAttestation(source.attestation);
        }
        if (source['validator']) {
            this.validator = source.validator.map((x) => new fhir.VerificationResultValidator(x));
        }
    }
    /**
     * Preferred-bound Value Set for need
     */
    needPreferredValueSet() {
        return VerificationresultNeedValueSet;
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return VerificationresultStatusValueSet;
    }
    /**
     * Preferred-bound Value Set for validationType
     */
    validationTypePreferredValueSet() {
        return VerificationresultValidationTypeValueSet;
    }
    /**
     * Example-bound Value Set for validationProcess
     */
    validationProcessExampleValueSet() {
        return VerificationresultValidationProcessValueSet;
    }
    /**
     * Preferred-bound Value Set for failureAction
     */
    failureActionPreferredValueSet() {
        return VerificationresultFailureActionValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: VerificationResult.resourceType']);
        }
        if (this["target"]) {
            this.target.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_targetLocation"]) {
            this._targetLocation.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["need"]) {
            results.push(...this.need.doModelValidation());
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: VerificationResult.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["_statusDate"]) {
            results.push(...this._statusDate.doModelValidation());
        }
        if (this["validationType"]) {
            results.push(...this.validationType.doModelValidation());
        }
        if (this["validationProcess"]) {
            this.validationProcess.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["frequency"]) {
            results.push(...this.frequency.doModelValidation());
        }
        if (this["_lastPerformed"]) {
            results.push(...this._lastPerformed.doModelValidation());
        }
        if (this["_nextScheduled"]) {
            results.push(...this._nextScheduled.doModelValidation());
        }
        if (this["failureAction"]) {
            results.push(...this.failureAction.doModelValidation());
        }
        if (this["primarySource"]) {
            this.primarySource.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["attestation"]) {
            results.push(...this.attestation.doModelValidation());
        }
        if (this["validator"]) {
            this.validator.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=VerificationResult.js.map