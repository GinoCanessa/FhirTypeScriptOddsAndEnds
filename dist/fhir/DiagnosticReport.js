// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: DiagnosticReport
import * as fhir from '../fhir.js';
import { DiagnosticReportStatusValueSet } from '../fhirValueSets/DiagnosticReportStatusValueSet.js';
import { DiagnosticServiceSectionsValueSet } from '../fhirValueSets/DiagnosticServiceSectionsValueSet.js';
import { ReportCodesValueSet } from '../fhirValueSets/ReportCodesValueSet.js';
import { ClinicalFindingsValueSet } from '../fhirValueSets/ClinicalFindingsValueSet.js';
/**
 * A list of key images associated with this report. The images are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest).
 */
export class DiagnosticReportMedia extends fhir.BackboneElement {
    /**
     * Default constructor for DiagnosticReportMedia - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['comment']) {
            this.comment = source.comment;
        }
        if (source['_comment']) {
            this._comment = new fhir.FhirElement(source._comment);
        }
        if (source['link']) {
            this.link = new fhir.Reference(source.link);
        }
        else {
            this.link = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_comment"]) {
            results.push(...this._comment.doModelValidation());
        }
        if (!this["link"]) {
            results.push(["link", 'Missing required element: DiagnosticReport.media.link']);
        }
        if (this["link"]) {
            results.push(...this.link.doModelValidation());
        }
        return results;
    }
}
/**
 * The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports.
 */
export class DiagnosticReport extends fhir.DomainResource {
    /**
     * Default constructor for DiagnosticReport - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'DiagnosticReport';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['effectiveDateTime']) {
            this.effectiveDateTime = source.effectiveDateTime;
        }
        if (source['_effectiveDateTime']) {
            this._effectiveDateTime = new fhir.FhirElement(source._effectiveDateTime);
        }
        if (source['effectivePeriod']) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source['issued']) {
            this.issued = source.issued;
        }
        if (source['_issued']) {
            this._issued = new fhir.FhirElement(source._issued);
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.Reference(x));
        }
        if (source['resultsInterpreter']) {
            this.resultsInterpreter = source.resultsInterpreter.map((x) => new fhir.Reference(x));
        }
        if (source['specimen']) {
            this.specimen = source.specimen.map((x) => new fhir.Reference(x));
        }
        if (source['result']) {
            this.result = source.result.map((x) => new fhir.Reference(x));
        }
        if (source['imagingStudy']) {
            this.imagingStudy = source.imagingStudy.map((x) => new fhir.Reference(x));
        }
        if (source['media']) {
            this.media = source.media.map((x) => new fhir.DiagnosticReportMedia(x));
        }
        if (source['conclusion']) {
            this.conclusion = source.conclusion;
        }
        if (source['_conclusion']) {
            this._conclusion = new fhir.FhirElement(source._conclusion);
        }
        if (source['conclusionCode']) {
            this.conclusionCode = source.conclusionCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['presentedForm']) {
            this.presentedForm = source.presentedForm.map((x) => new fhir.Attachment(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return DiagnosticReportStatusValueSet;
    }
    /**
     * Example-bound Value Set for category
     */
    static categoryExampleValueSet() {
        return DiagnosticServiceSectionsValueSet;
    }
    /**
     * Preferred-bound Value Set for code
     */
    static codePreferredValueSet() {
        return ReportCodesValueSet;
    }
    /**
     * Example-bound Value Set for conclusionCode
     */
    static conclusionCodeExampleValueSet() {
        return ClinicalFindingsValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: DiagnosticReport.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: DiagnosticReport.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["category"]) {
            this.category.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["code"]) {
            results.push(["code", 'Missing required element: DiagnosticReport.code']);
        }
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["subject"]) {
            results.push(...this.subject.doModelValidation());
        }
        if (this["encounter"]) {
            results.push(...this.encounter.doModelValidation());
        }
        if (this["_effectiveDateTime"]) {
            results.push(...this._effectiveDateTime.doModelValidation());
        }
        if (this["effectivePeriod"]) {
            results.push(...this.effectivePeriod.doModelValidation());
        }
        if (this["_issued"]) {
            results.push(...this._issued.doModelValidation());
        }
        if (this["performer"]) {
            this.performer.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["resultsInterpreter"]) {
            this.resultsInterpreter.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["specimen"]) {
            this.specimen.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["result"]) {
            this.result.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["imagingStudy"]) {
            this.imagingStudy.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["media"]) {
            this.media.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_conclusion"]) {
            results.push(...this._conclusion.doModelValidation());
        }
        if (this["conclusionCode"]) {
            this.conclusionCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["presentedForm"]) {
            this.presentedForm.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=DiagnosticReport.js.map