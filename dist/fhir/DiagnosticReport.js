// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * A list of key images associated with this report. The images are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest).
 */
export class DiagnosticReportMedia extends fhir.BackboneElement {
    /**
     * Default constructor for DiagnosticReportMedia - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["comment"]) {
            this.comment = source.comment;
        }
        if (source["_comment"]) {
            this._comment = new fhir.FhirElement(source._comment);
        }
        this.link = null;
        if (source["link"]) {
            this.link = new fhir.Reference(source.link);
        }
        if (this.link === undefined) {
            this.link = null;
        }
    }
    /**
     * Check if the current DiagnosticReportMedia contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["link"] === undefined) {
            missingElements.push("link");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a DiagnosticReportMedia from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new DiagnosticReportMedia(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `DiagnosticReportMedia is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports.
 */
export class DiagnosticReport extends fhir.DomainResource {
    /**
     * Default constructor for DiagnosticReport - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'DiagnosticReport';
        if (source["basedOn"]) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source["category"]) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        this.code = null;
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (this.code === undefined) {
            this.code = null;
        }
        if (source["conclusion"]) {
            this.conclusion = source.conclusion;
        }
        if (source["_conclusion"]) {
            this._conclusion = new fhir.FhirElement(source._conclusion);
        }
        if (source["conclusionCode"]) {
            this.conclusionCode = source.conclusionCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["effectiveDateTime"]) {
            this.effectiveDateTime = source.effectiveDateTime;
        }
        if (source["_effectiveDateTime"]) {
            this._effectiveDateTime = new fhir.FhirElement(source._effectiveDateTime);
        }
        if (source["effectivePeriod"]) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source["encounter"]) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["imagingStudy"]) {
            this.imagingStudy = source.imagingStudy.map((x) => new fhir.Reference(x));
        }
        if (source["issued"]) {
            this.issued = source.issued;
        }
        if (source["_issued"]) {
            this._issued = new fhir.FhirElement(source._issued);
        }
        if (source["media"]) {
            this.media = source.media.map((x) => new fhir.DiagnosticReportMedia(x));
        }
        if (source["performer"]) {
            this.performer = source.performer.map((x) => new fhir.Reference(x));
        }
        if (source["presentedForm"]) {
            this.presentedForm = source.presentedForm.map((x) => new fhir.Attachment(x));
        }
        if (source["result"]) {
            this.result = source.result.map((x) => new fhir.Reference(x));
        }
        if (source["resultsInterpreter"]) {
            this.resultsInterpreter = source.resultsInterpreter.map((x) => new fhir.Reference(x));
        }
        if (source["specimen"]) {
            this.specimen = source.specimen.map((x) => new fhir.Reference(x));
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["subject"]) {
            this.subject = new fhir.Reference(source.subject);
        }
    }
    /**
     * Check if the current DiagnosticReport contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a DiagnosticReport from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new DiagnosticReport(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `DiagnosticReport is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the DiagnosticReport.status field
 */
export var DiagnosticReportStatusEnum;
(function (DiagnosticReportStatusEnum) {
    DiagnosticReportStatusEnum["REGISTERED"] = "registered";
    DiagnosticReportStatusEnum["PARTIAL"] = "partial";
    DiagnosticReportStatusEnum["PRELIMINARY"] = "preliminary";
    DiagnosticReportStatusEnum["FINAL"] = "final";
    DiagnosticReportStatusEnum["AMENDED"] = "amended";
    DiagnosticReportStatusEnum["CORRECTED"] = "corrected";
    DiagnosticReportStatusEnum["APPENDED"] = "appended";
    DiagnosticReportStatusEnum["CANCELLED"] = "cancelled";
    DiagnosticReportStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    DiagnosticReportStatusEnum["UNKNOWN"] = "unknown";
})(DiagnosticReportStatusEnum || (DiagnosticReportStatusEnum = {}));
//# sourceMappingURL=DiagnosticReport.js.map