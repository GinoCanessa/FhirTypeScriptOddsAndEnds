var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Restricted to: Patient|Encounter|Observation
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * A  text note which also  contains information about who made the statement and when.
 */
var Annotation = /** @class */ (function (_super) {
    __extends(Annotation, _super);
    /**
     * Default constructor for Annotation - initializes required elements to null.
     */
    function Annotation() {
        var _this = _super.call(this) || this;
        _this.text = null;
        return _this;
    }
    /**
     * Factory function to create a Annotation from an object that MAY NOT contain all required elements.
     */
    Annotation.FactoryCreate = function (source) {
        var dest = _super.FactoryCreate.call(this, source);
        if (source["authorReference"] !== undefined) {
            dest.authorReference = fhir.Reference.FactoryCreate(source.authorReference);
        }
        if (source["authorString"] !== undefined) {
            dest.authorString = source.authorString;
        }
        if (source["_authorString"] !== undefined) {
            dest._authorString = fhir.FhirElement.FactoryCreate(source._authorString);
        }
        if (source["text"] !== undefined) {
            dest.text = source.text;
        }
        if (source["_text"] !== undefined) {
            dest._text = fhir.FhirElement.FactoryCreate(source._text);
        }
        if (source["time"] !== undefined) {
            dest.time = source.time;
        }
        if (source["_time"] !== undefined) {
            dest._time = fhir.FhirElement.FactoryCreate(source._time);
        }
        return dest;
    };
    /**
     * Check if the current Annotation contains all required elements.
     */
    Annotation.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["text"] === undefined) {
            missingElements.push("text");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    /**
     * Factory function to create a Annotation from an object that MUST contain all required elements.
     */
    Annotation.FactoryCreateStrict = function (source) {
        var dest = this.FactoryCreate(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "Annotation is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    return Annotation;
}(fhir.FhirElement));
export { Annotation };
//# sourceMappingURL=Annotation.js.map