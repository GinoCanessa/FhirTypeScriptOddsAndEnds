// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
 */
export class MedicinalProductIndicationOtherTherapy extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductIndicationOtherTherapy - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["medicationCodeableConcept"]) {
            this.medicationCodeableConcept = new fhir.CodeableConcept(source.medicationCodeableConcept);
        }
        if (source["medicationReference"]) {
            this.medicationReference = new fhir.Reference(source.medicationReference);
        }
        this.therapyRelationshipType = null;
        if (source["therapyRelationshipType"]) {
            this.therapyRelationshipType = new fhir.CodeableConcept(source.therapyRelationshipType);
        }
        if (this.therapyRelationshipType === undefined) {
            this.therapyRelationshipType = null;
        }
    }
    /**
     * Check if the current MedicinalProductIndicationOtherTherapy contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["therapyRelationshipType"] === undefined) {
            missingElements.push("therapyRelationshipType");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicinalProductIndicationOtherTherapy from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new MedicinalProductIndicationOtherTherapy(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProductIndicationOtherTherapy is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Indication for the Medicinal Product.
 */
export class MedicinalProductIndication extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProductIndication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'MedicinalProductIndication';
        if (source["comorbidity"]) {
            this.comorbidity = source.comorbidity.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["diseaseStatus"]) {
            this.diseaseStatus = new fhir.CodeableConcept(source.diseaseStatus);
        }
        if (source["diseaseSymptomProcedure"]) {
            this.diseaseSymptomProcedure = new fhir.CodeableConcept(source.diseaseSymptomProcedure);
        }
        if (source["duration"]) {
            this.duration = new fhir.Quantity(source.duration);
        }
        if (source["intendedEffect"]) {
            this.intendedEffect = new fhir.CodeableConcept(source.intendedEffect);
        }
        if (source["otherTherapy"]) {
            this.otherTherapy = source.otherTherapy.map((x) => new fhir.MedicinalProductIndicationOtherTherapy(x));
        }
        if (source["population"]) {
            this.population = source.population.map((x) => new fhir.Population(x));
        }
        if (source["subject"]) {
            this.subject = source.subject.map((x) => new fhir.Reference(x));
        }
        if (source["undesirableEffect"]) {
            this.undesirableEffect = source.undesirableEffect.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Check if the current MedicinalProductIndication contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicinalProductIndication from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new MedicinalProductIndication(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProductIndication is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
//# sourceMappingURL=MedicinalProductIndication.js.map