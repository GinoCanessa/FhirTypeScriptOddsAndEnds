// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: CarePlan
import * as fhir from '../fhir.js';
import { CarePlanActivityKindValueSet } from '../fhirValueSets/CarePlanActivityKindValueSet.js';
import { ProcedureCodeValueSet } from '../fhirValueSets/ProcedureCodeValueSet.js';
import { ClinicalFindingsValueSet } from '../fhirValueSets/ClinicalFindingsValueSet.js';
import { CarePlanActivityStatusValueSet } from '../fhirValueSets/CarePlanActivityStatusValueSet.js';
import { MedicationCodesValueSet } from '../fhirValueSets/MedicationCodesValueSet.js';
import { CarePlanActivityOutcomeValueSet } from '../fhirValueSets/CarePlanActivityOutcomeValueSet.js';
import { RequestStatusValueSet } from '../fhirValueSets/RequestStatusValueSet.js';
import { CarePlanIntentValueSet } from '../fhirValueSets/CarePlanIntentValueSet.js';
/**
 * A simple summary of a planned activity suitable for a general care plan system (e.g. form driven) that doesn't know about specific resources such as procedure etc.
 */
export class CarePlanActivityDetail extends fhir.BackboneElement {
    /**
     * Default constructor for CarePlanActivityDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['kind']) {
            this.kind = source.kind;
        }
        if (source['_kind']) {
            this._kind = new fhir.FhirElement(source._kind);
        }
        if (source['instantiatesCanonical']) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => (x));
        }
        if (source['_instantiatesCanonical']) {
            this._instantiatesCanonical = source._instantiatesCanonical.map((x) => new fhir.FhirElement(x));
        }
        if (source['instantiatesUri']) {
            this.instantiatesUri = source.instantiatesUri.map((x) => (x));
        }
        if (source['_instantiatesUri']) {
            this._instantiatesUri = source._instantiatesUri.map((x) => new fhir.FhirElement(x));
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source['goal']) {
            this.goal = source.goal.map((x) => new fhir.Reference(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['statusReason']) {
            this.statusReason = new fhir.CodeableConcept(source.statusReason);
        }
        if (source['doNotPerform']) {
            this.doNotPerform = source.doNotPerform;
        }
        if (source['_doNotPerform']) {
            this._doNotPerform = new fhir.FhirElement(source._doNotPerform);
        }
        if (source['scheduledTiming']) {
            this.scheduledTiming = new fhir.Timing(source.scheduledTiming);
        }
        if (source['scheduledPeriod']) {
            this.scheduledPeriod = new fhir.Period(source.scheduledPeriod);
        }
        if (source['scheduledString']) {
            this.scheduledString = source.scheduledString;
        }
        if (source['_scheduledString']) {
            this._scheduledString = new fhir.FhirElement(source._scheduledString);
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.Reference(x));
        }
        if (source['productCodeableConcept']) {
            this.productCodeableConcept = new fhir.CodeableConcept(source.productCodeableConcept);
        }
        if (source['productReference']) {
            this.productReference = new fhir.Reference(source.productReference);
        }
        if (source['dailyAmount']) {
            this.dailyAmount = new fhir.Quantity(source.dailyAmount);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
    }
    /**
     * Required-bound Value Set for kind
     */
    kindRequiredValueSet() {
        return CarePlanActivityKindValueSet;
    }
    /**
     * Example-bound Value Set for code
     */
    codeExampleValueSet() {
        return ProcedureCodeValueSet;
    }
    /**
     * Example-bound Value Set for reasonCode
     */
    reasonCodeExampleValueSet() {
        return ClinicalFindingsValueSet;
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return CarePlanActivityStatusValueSet;
    }
    /**
     * Example-bound Value Set for productCodeableConcept
     */
    productCodeableConceptExampleValueSet() {
        return MedicationCodesValueSet;
    }
    /**
     * Example-bound Value Set for productReference
     */
    productReferenceExampleValueSet() {
        return MedicationCodesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_kind"]) {
            results.push(...this._kind.doModelValidation());
        }
        if (this["_instantiatesCanonical"]) {
            this._instantiatesCanonical.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_instantiatesUri"]) {
            this._instantiatesUri.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["goal"]) {
            this.goal.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: CarePlan.activity.detail.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["statusReason"]) {
            results.push(...this.statusReason.doModelValidation());
        }
        if (this["_doNotPerform"]) {
            results.push(...this._doNotPerform.doModelValidation());
        }
        if (this["scheduledTiming"]) {
            results.push(...this.scheduledTiming.doModelValidation());
        }
        if (this["scheduledPeriod"]) {
            results.push(...this.scheduledPeriod.doModelValidation());
        }
        if (this["_scheduledString"]) {
            results.push(...this._scheduledString.doModelValidation());
        }
        if (this["location"]) {
            results.push(...this.location.doModelValidation());
        }
        if (this["performer"]) {
            this.performer.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["productCodeableConcept"]) {
            results.push(...this.productCodeableConcept.doModelValidation());
        }
        if (this["productReference"]) {
            results.push(...this.productReference.doModelValidation());
        }
        if (this["dailyAmount"]) {
            results.push(...this.dailyAmount.doModelValidation());
        }
        if (this["quantity"]) {
            results.push(...this.quantity.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        return results;
    }
}
/**
 * Identifies a planned action to occur as part of the plan.  For example, a medication to be used, lab tests to perform, self-monitoring, education, etc.
 */
export class CarePlanActivity extends fhir.BackboneElement {
    /**
     * Default constructor for CarePlanActivity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['outcomeCodeableConcept']) {
            this.outcomeCodeableConcept = source.outcomeCodeableConcept.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['outcomeReference']) {
            this.outcomeReference = source.outcomeReference.map((x) => new fhir.Reference(x));
        }
        if (source['progress']) {
            this.progress = source.progress.map((x) => new fhir.Annotation(x));
        }
        if (source['reference']) {
            this.reference = new fhir.Reference(source.reference);
        }
        if (source['detail']) {
            this.detail = new fhir.CarePlanActivityDetail(source.detail);
        }
    }
    /**
     * Example-bound Value Set for outcomeCodeableConcept
     */
    outcomeCodeableConceptExampleValueSet() {
        return CarePlanActivityOutcomeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["outcomeCodeableConcept"]) {
            this.outcomeCodeableConcept.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["outcomeReference"]) {
            this.outcomeReference.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["progress"]) {
            this.progress.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reference"]) {
            results.push(...this.reference.doModelValidation());
        }
        if (this["detail"]) {
            results.push(...this.detail.doModelValidation());
        }
        return results;
    }
}
/**
 * Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
 */
export class CarePlan extends fhir.DomainResource {
    /**
     * Default constructor for CarePlan - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'CarePlan';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['instantiatesCanonical']) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => (x));
        }
        if (source['_instantiatesCanonical']) {
            this._instantiatesCanonical = source._instantiatesCanonical.map((x) => new fhir.FhirElement(x));
        }
        if (source['instantiatesUri']) {
            this.instantiatesUri = source.instantiatesUri.map((x) => (x));
        }
        if (source['_instantiatesUri']) {
            this._instantiatesUri = source._instantiatesUri.map((x) => new fhir.FhirElement(x));
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source['replaces']) {
            this.replaces = source.replaces.map((x) => new fhir.Reference(x));
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['intent']) {
            this.intent = source.intent;
        }
        else {
            this.intent = null;
        }
        if (source['_intent']) {
            this._intent = new fhir.FhirElement(source._intent);
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['title']) {
            this.title = source.title;
        }
        if (source['_title']) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['created']) {
            this.created = source.created;
        }
        if (source['_created']) {
            this._created = new fhir.FhirElement(source._created);
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author);
        }
        if (source['contributor']) {
            this.contributor = source.contributor.map((x) => new fhir.Reference(x));
        }
        if (source['careTeam']) {
            this.careTeam = source.careTeam.map((x) => new fhir.Reference(x));
        }
        if (source['addresses']) {
            this.addresses = source.addresses.map((x) => new fhir.Reference(x));
        }
        if (source['supportingInfo']) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.Reference(x));
        }
        if (source['goal']) {
            this.goal = source.goal.map((x) => new fhir.Reference(x));
        }
        if (source['activity']) {
            this.activity = source.activity.map((x) => new fhir.CarePlanActivity(x));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return RequestStatusValueSet;
    }
    /**
     * Required-bound Value Set for intent
     */
    intentRequiredValueSet() {
        return CarePlanIntentValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: CarePlan.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_instantiatesCanonical"]) {
            this._instantiatesCanonical.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_instantiatesUri"]) {
            this._instantiatesUri.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["replaces"]) {
            this.replaces.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["partOf"]) {
            this.partOf.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: CarePlan.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (!this["intent"]) {
            results.push(["intent", 'Missing required element: CarePlan.intent']);
        }
        if (this["_intent"]) {
            results.push(...this._intent.doModelValidation());
        }
        if (this["category"]) {
            this.category.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_title"]) {
            results.push(...this._title.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (!this["subject"]) {
            results.push(["subject", 'Missing required element: CarePlan.subject']);
        }
        if (this["subject"]) {
            results.push(...this.subject.doModelValidation());
        }
        if (this["encounter"]) {
            results.push(...this.encounter.doModelValidation());
        }
        if (this["period"]) {
            results.push(...this.period.doModelValidation());
        }
        if (this["_created"]) {
            results.push(...this._created.doModelValidation());
        }
        if (this["author"]) {
            results.push(...this.author.doModelValidation());
        }
        if (this["contributor"]) {
            this.contributor.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["careTeam"]) {
            this.careTeam.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["addresses"]) {
            this.addresses.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["supportingInfo"]) {
            this.supportingInfo.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["goal"]) {
            this.goal.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["activity"]) {
            this.activity.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=CarePlan.js.map