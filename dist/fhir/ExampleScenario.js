// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Actor participating in the resource.
 */
export class ExampleScenarioActor extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioActor - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.actorId = null;
        if (source["actorId"]) {
            this.actorId = source.actorId;
        }
        if (this.actorId === undefined) {
            this.actorId = null;
        }
        if (source["_actorId"]) {
            this._actorId = new fhir.FhirElement(source._actorId);
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        this.type = null;
        if (source["type"]) {
            this.type = source.type;
        }
        if (this.type === undefined) {
            this.type = null;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
    }
    /**
     * Check if the current ExampleScenarioActor contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["actorId"] === undefined) {
            missingElements.push("actorId");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExampleScenarioActor from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExampleScenarioActor(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExampleScenarioActor is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A specific version of the resource.
 */
export class ExampleScenarioInstanceVersion extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioInstanceVersion - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.description = null;
        if (source["description"]) {
            this.description = source.description;
        }
        if (this.description === undefined) {
            this.description = null;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        this.versionId = null;
        if (source["versionId"]) {
            this.versionId = source.versionId;
        }
        if (this.versionId === undefined) {
            this.versionId = null;
        }
        if (source["_versionId"]) {
            this._versionId = new fhir.FhirElement(source._versionId);
        }
    }
    /**
     * Check if the current ExampleScenarioInstanceVersion contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["description"] === undefined) {
            missingElements.push("description");
        }
        if (this["versionId"] === undefined) {
            missingElements.push("versionId");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExampleScenarioInstanceVersion from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExampleScenarioInstanceVersion(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExampleScenarioInstanceVersion is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Resources contained in the instance (e.g. the observations contained in a bundle).
 */
export class ExampleScenarioInstanceContainedInstance extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioInstanceContainedInstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceId = null;
        if (source["resourceId"]) {
            this.resourceId = source.resourceId;
        }
        if (this.resourceId === undefined) {
            this.resourceId = null;
        }
        if (source["_resourceId"]) {
            this._resourceId = new fhir.FhirElement(source._resourceId);
        }
        if (source["versionId"]) {
            this.versionId = source.versionId;
        }
        if (source["_versionId"]) {
            this._versionId = new fhir.FhirElement(source._versionId);
        }
    }
    /**
     * Check if the current ExampleScenarioInstanceContainedInstance contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["resourceId"] === undefined) {
            missingElements.push("resourceId");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExampleScenarioInstanceContainedInstance from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExampleScenarioInstanceContainedInstance(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExampleScenarioInstanceContainedInstance is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Each resource and each version that is present in the workflow.
 */
export class ExampleScenarioInstance extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioInstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["containedInstance"]) {
            this.containedInstance = source.containedInstance.map((x) => new fhir.ExampleScenarioInstanceContainedInstance(x));
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        this.resourceId = null;
        if (source["resourceId"]) {
            this.resourceId = source.resourceId;
        }
        if (this.resourceId === undefined) {
            this.resourceId = null;
        }
        if (source["_resourceId"]) {
            this._resourceId = new fhir.FhirElement(source._resourceId);
        }
        this.resourceType = null;
        if (source["resourceType"]) {
            this.resourceType = source.resourceType;
        }
        if (this.resourceType === undefined) {
            this.resourceType = null;
        }
        if (source["_resourceType"]) {
            this._resourceType = new fhir.FhirElement(source._resourceType);
        }
        if (source["version"]) {
            this.version = source.version.map((x) => new fhir.ExampleScenarioInstanceVersion(x));
        }
    }
    /**
     * Check if the current ExampleScenarioInstance contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["resourceId"] === undefined) {
            missingElements.push("resourceId");
        }
        if (this["resourceType"] === undefined) {
            missingElements.push("resourceType");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExampleScenarioInstance from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExampleScenarioInstance(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExampleScenarioInstance is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Each interaction or action.
 */
export class ExampleScenarioProcessStepOperation extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioProcessStepOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["initiator"]) {
            this.initiator = source.initiator;
        }
        if (source["_initiator"]) {
            this._initiator = new fhir.FhirElement(source._initiator);
        }
        if (source["initiatorActive"]) {
            this.initiatorActive = source.initiatorActive;
        }
        if (source["_initiatorActive"]) {
            this._initiatorActive = new fhir.FhirElement(source._initiatorActive);
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        this.number = null;
        if (source["number"]) {
            this.number = source.number;
        }
        if (this.number === undefined) {
            this.number = null;
        }
        if (source["_number"]) {
            this._number = new fhir.FhirElement(source._number);
        }
        if (source["receiver"]) {
            this.receiver = source.receiver;
        }
        if (source["_receiver"]) {
            this._receiver = new fhir.FhirElement(source._receiver);
        }
        if (source["receiverActive"]) {
            this.receiverActive = source.receiverActive;
        }
        if (source["_receiverActive"]) {
            this._receiverActive = new fhir.FhirElement(source._receiverActive);
        }
        if (source["request"]) {
            this.request = new fhir.ExampleScenarioInstanceContainedInstance(source.request);
        }
        if (source["response"]) {
            this.response = new fhir.ExampleScenarioInstanceContainedInstance(source.response);
        }
        if (source["type"]) {
            this.type = source.type;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
    }
    /**
     * Check if the current ExampleScenarioProcessStepOperation contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["number"] === undefined) {
            missingElements.push("number");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExampleScenarioProcessStepOperation from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExampleScenarioProcessStepOperation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExampleScenarioProcessStepOperation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.
 */
export class ExampleScenarioProcessStepAlternative extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioProcessStepAlternative - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["step"]) {
            this.step = source.step.map((x) => new fhir.ExampleScenarioProcessStep(x));
        }
        this.title = null;
        if (source["title"]) {
            this.title = source.title;
        }
        if (this.title === undefined) {
            this.title = null;
        }
        if (source["_title"]) {
            this._title = new fhir.FhirElement(source._title);
        }
    }
    /**
     * Check if the current ExampleScenarioProcessStepAlternative contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["title"] === undefined) {
            missingElements.push("title");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExampleScenarioProcessStepAlternative from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExampleScenarioProcessStepAlternative(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExampleScenarioProcessStepAlternative is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Each step of the process.
 */
export class ExampleScenarioProcessStep extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioProcessStep - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["alternative"]) {
            this.alternative = source.alternative.map((x) => new fhir.ExampleScenarioProcessStepAlternative(x));
        }
        if (source["operation"]) {
            this.operation = new fhir.ExampleScenarioProcessStepOperation(source.operation);
        }
        if (source["pause"]) {
            this.pause = source.pause;
        }
        if (source["_pause"]) {
            this._pause = new fhir.FhirElement(source._pause);
        }
        if (source["process"]) {
            this.process = source.process.map((x) => new fhir.ExampleScenarioProcess(x));
        }
    }
    /**
     * Check if the current ExampleScenarioProcessStep contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExampleScenarioProcessStep from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExampleScenarioProcessStep(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExampleScenarioProcessStep is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Each major process - a group of operations.
 */
export class ExampleScenarioProcess extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioProcess - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["postConditions"]) {
            this.postConditions = source.postConditions;
        }
        if (source["_postConditions"]) {
            this._postConditions = new fhir.FhirElement(source._postConditions);
        }
        if (source["preConditions"]) {
            this.preConditions = source.preConditions;
        }
        if (source["_preConditions"]) {
            this._preConditions = new fhir.FhirElement(source._preConditions);
        }
        if (source["step"]) {
            this.step = source.step.map((x) => new fhir.ExampleScenarioProcessStep(x));
        }
        this.title = null;
        if (source["title"]) {
            this.title = source.title;
        }
        if (this.title === undefined) {
            this.title = null;
        }
        if (source["_title"]) {
            this._title = new fhir.FhirElement(source._title);
        }
    }
    /**
     * Check if the current ExampleScenarioProcess contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["title"] === undefined) {
            missingElements.push("title");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExampleScenarioProcess from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExampleScenarioProcess(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExampleScenarioProcess is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Example of workflow instance.
 */
export class ExampleScenario extends fhir.DomainResource {
    /**
     * Default constructor for ExampleScenario - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'ExampleScenario';
        if (source["actor"]) {
            this.actor = source.actor.map((x) => new fhir.ExampleScenarioActor(x));
        }
        if (source["contact"]) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source["copyright"]) {
            this.copyright = source.copyright;
        }
        if (source["_copyright"]) {
            this._copyright = new fhir.FhirElement(source._copyright);
        }
        if (source["date"]) {
            this.date = source.date;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["experimental"]) {
            this.experimental = source.experimental;
        }
        if (source["_experimental"]) {
            this._experimental = new fhir.FhirElement(source._experimental);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["instance"]) {
            this.instance = source.instance.map((x) => new fhir.ExampleScenarioInstance(x));
        }
        if (source["jurisdiction"]) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["process"]) {
            this.process = source.process.map((x) => new fhir.ExampleScenarioProcess(x));
        }
        if (source["publisher"]) {
            this.publisher = source.publisher;
        }
        if (source["_publisher"]) {
            this._publisher = new fhir.FhirElement(source._publisher);
        }
        if (source["purpose"]) {
            this.purpose = source.purpose;
        }
        if (source["_purpose"]) {
            this._purpose = new fhir.FhirElement(source._purpose);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["url"]) {
            this.url = source.url;
        }
        if (source["_url"]) {
            this._url = new fhir.FhirElement(source._url);
        }
        if (source["useContext"]) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source["version"]) {
            this.version = source.version;
        }
        if (source["_version"]) {
            this._version = new fhir.FhirElement(source._version);
        }
        if (source["workflow"]) {
            this.workflow = source.workflow.map((x) => (x));
        }
        if (source["_workflow"]) {
            this._workflow = source._workflow.map((x) => new fhir.FhirElement(x));
        }
    }
    /**
     * Check if the current ExampleScenario contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExampleScenario from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExampleScenario(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExampleScenario is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the ExampleScenario.actor.type field
 */
export var ExampleScenarioActorTypeEnum;
(function (ExampleScenarioActorTypeEnum) {
    ExampleScenarioActorTypeEnum["PERSON"] = "person";
    ExampleScenarioActorTypeEnum["ENTITY"] = "entity";
})(ExampleScenarioActorTypeEnum || (ExampleScenarioActorTypeEnum = {}));
/**
 * Code Values for the ExampleScenario.status field
 */
export var ExampleScenarioStatusEnum;
(function (ExampleScenarioStatusEnum) {
    ExampleScenarioStatusEnum["DRAFT"] = "draft";
    ExampleScenarioStatusEnum["ACTIVE"] = "active";
    ExampleScenarioStatusEnum["RETIRED"] = "retired";
    ExampleScenarioStatusEnum["UNKNOWN"] = "unknown";
})(ExampleScenarioStatusEnum || (ExampleScenarioStatusEnum = {}));
//# sourceMappingURL=ExampleScenario.js.map