// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ExampleScenario
import * as fhir from '../fhir.js';
import { ExamplescenarioActorTypeValueSet } from '../fhirValueSets/ExamplescenarioActorTypeValueSet.js';
import { ResourceTypesValueSet } from '../fhirValueSets/ResourceTypesValueSet.js';
import { PublicationStatusValueSet } from '../fhirValueSets/PublicationStatusValueSet.js';
/**
 * Actor participating in the resource.
 */
export class ExampleScenarioActor extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioActor - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['actorId']) {
            this.actorId = source.actorId;
        }
        else {
            this.actorId = null;
        }
        if (source['_actorId']) {
            this._actorId = new fhir.FhirElement(source._actorId);
        }
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
    }
    /**
     * Required-bound Value Set for type
     */
    static typeRequiredValueSet() {
        return ExamplescenarioActorTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["actorId"]) {
            results.push(["actorId", 'Missing required element: ExampleScenario.actor.actorId']);
        }
        if (this["_actorId"]) {
            results.push(...this._actorId.doModelValidation());
        }
        if (!this["type"]) {
            results.push(["type", 'Missing required element: ExampleScenario.actor.type']);
        }
        if (this["_type"]) {
            results.push(...this._type.doModelValidation());
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        return results;
    }
}
/**
 * A specific version of the resource.
 */
export class ExampleScenarioInstanceVersion extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioInstanceVersion - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['versionId']) {
            this.versionId = source.versionId;
        }
        else {
            this.versionId = null;
        }
        if (source['_versionId']) {
            this._versionId = new fhir.FhirElement(source._versionId);
        }
        if (source['description']) {
            this.description = source.description;
        }
        else {
            this.description = null;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["versionId"]) {
            results.push(["versionId", 'Missing required element: ExampleScenario.instance.version.versionId']);
        }
        if (this["_versionId"]) {
            results.push(...this._versionId.doModelValidation());
        }
        if (!this["description"]) {
            results.push(["description", 'Missing required element: ExampleScenario.instance.version.description']);
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        return results;
    }
}
/**
 * Resources contained in the instance (e.g. the observations contained in a bundle).
 */
export class ExampleScenarioInstanceContainedInstance extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioInstanceContainedInstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['resourceId']) {
            this.resourceId = source.resourceId;
        }
        else {
            this.resourceId = null;
        }
        if (source['_resourceId']) {
            this._resourceId = new fhir.FhirElement(source._resourceId);
        }
        if (source['versionId']) {
            this.versionId = source.versionId;
        }
        if (source['_versionId']) {
            this._versionId = new fhir.FhirElement(source._versionId);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceId"]) {
            results.push(["resourceId", 'Missing required element: ExampleScenario.instance.containedInstance.resourceId']);
        }
        if (this["_resourceId"]) {
            results.push(...this._resourceId.doModelValidation());
        }
        if (this["_versionId"]) {
            results.push(...this._versionId.doModelValidation());
        }
        return results;
    }
}
/**
 * Each resource and each version that is present in the workflow.
 */
export class ExampleScenarioInstance extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioInstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['resourceId']) {
            this.resourceId = source.resourceId;
        }
        else {
            this.resourceId = null;
        }
        if (source['_resourceId']) {
            this._resourceId = new fhir.FhirElement(source._resourceId);
        }
        this.resourceType = 'ExampleScenario.instance';
        if (source['_resourceType']) {
            this._resourceType = new fhir.FhirElement(source._resourceType);
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['version']) {
            this.version = source.version.map((x) => new fhir.ExampleScenarioInstanceVersion(x));
        }
        if (source['containedInstance']) {
            this.containedInstance = source.containedInstance.map((x) => new fhir.ExampleScenarioInstanceContainedInstance(x));
        }
    }
    /**
     * Required-bound Value Set for resourceType
     */
    static resourceTypeRequiredValueSet() {
        return ResourceTypesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceId"]) {
            results.push(["resourceId", 'Missing required element: ExampleScenario.instance.resourceId']);
        }
        if (this["_resourceId"]) {
            results.push(...this._resourceId.doModelValidation());
        }
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: ExampleScenario.instance.resourceType']);
        }
        if (this["_resourceType"]) {
            results.push(...this._resourceType.doModelValidation());
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["version"]) {
            this.version.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["containedInstance"]) {
            this.containedInstance.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Each interaction or action.
 */
export class ExampleScenarioProcessStepOperation extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioProcessStepOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['number']) {
            this.number = source.number;
        }
        else {
            this.number = null;
        }
        if (source['_number']) {
            this._number = new fhir.FhirElement(source._number);
        }
        if (source['type']) {
            this.type = source.type;
        }
        if (source['_type']) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['initiator']) {
            this.initiator = source.initiator;
        }
        if (source['_initiator']) {
            this._initiator = new fhir.FhirElement(source._initiator);
        }
        if (source['receiver']) {
            this.receiver = source.receiver;
        }
        if (source['_receiver']) {
            this._receiver = new fhir.FhirElement(source._receiver);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['initiatorActive']) {
            this.initiatorActive = source.initiatorActive;
        }
        if (source['_initiatorActive']) {
            this._initiatorActive = new fhir.FhirElement(source._initiatorActive);
        }
        if (source['receiverActive']) {
            this.receiverActive = source.receiverActive;
        }
        if (source['_receiverActive']) {
            this._receiverActive = new fhir.FhirElement(source._receiverActive);
        }
        if (source['request']) {
            this.request = new fhir.ExampleScenarioInstanceContainedInstance(source.request);
        }
        if (source['response']) {
            this.response = new fhir.ExampleScenarioInstanceContainedInstance(source.response);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["number"]) {
            results.push(["number", 'Missing required element: ExampleScenario.process.step.operation.number']);
        }
        if (this["_number"]) {
            results.push(...this._number.doModelValidation());
        }
        if (this["_type"]) {
            results.push(...this._type.doModelValidation());
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_initiator"]) {
            results.push(...this._initiator.doModelValidation());
        }
        if (this["_receiver"]) {
            results.push(...this._receiver.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["_initiatorActive"]) {
            results.push(...this._initiatorActive.doModelValidation());
        }
        if (this["_receiverActive"]) {
            results.push(...this._receiverActive.doModelValidation());
        }
        if (this["request"]) {
            results.push(...this.request.doModelValidation());
        }
        if (this["response"]) {
            results.push(...this.response.doModelValidation());
        }
        return results;
    }
}
/**
 * Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.
 */
export class ExampleScenarioProcessStepAlternative extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioProcessStepAlternative - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['title']) {
            this.title = source.title;
        }
        else {
            this.title = null;
        }
        if (source['_title']) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['step']) {
            this.step = source.step.map((x) => new fhir.ExampleScenarioProcessStep(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["title"]) {
            results.push(["title", 'Missing required element: ExampleScenario.process.step.alternative.title']);
        }
        if (this["_title"]) {
            results.push(...this._title.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["step"]) {
            this.step.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Each step of the process.
 */
export class ExampleScenarioProcessStep extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioProcessStep - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['process']) {
            this.process = source.process.map((x) => new fhir.ExampleScenarioProcess(x));
        }
        if (source['pause']) {
            this.pause = source.pause;
        }
        if (source['_pause']) {
            this._pause = new fhir.FhirElement(source._pause);
        }
        if (source['operation']) {
            this.operation = new fhir.ExampleScenarioProcessStepOperation(source.operation);
        }
        if (source['alternative']) {
            this.alternative = source.alternative.map((x) => new fhir.ExampleScenarioProcessStepAlternative(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["process"]) {
            this.process.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_pause"]) {
            results.push(...this._pause.doModelValidation());
        }
        if (this["operation"]) {
            results.push(...this.operation.doModelValidation());
        }
        if (this["alternative"]) {
            this.alternative.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Each major process - a group of operations.
 */
export class ExampleScenarioProcess extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioProcess - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['title']) {
            this.title = source.title;
        }
        else {
            this.title = null;
        }
        if (source['_title']) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['preConditions']) {
            this.preConditions = source.preConditions;
        }
        if (source['_preConditions']) {
            this._preConditions = new fhir.FhirElement(source._preConditions);
        }
        if (source['postConditions']) {
            this.postConditions = source.postConditions;
        }
        if (source['_postConditions']) {
            this._postConditions = new fhir.FhirElement(source._postConditions);
        }
        if (source['step']) {
            this.step = source.step.map((x) => new fhir.ExampleScenarioProcessStep(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["title"]) {
            results.push(["title", 'Missing required element: ExampleScenario.process.title']);
        }
        if (this["_title"]) {
            results.push(...this._title.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["_preConditions"]) {
            results.push(...this._preConditions.doModelValidation());
        }
        if (this["_postConditions"]) {
            results.push(...this._postConditions.doModelValidation());
        }
        if (this["step"]) {
            this.step.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Example of workflow instance.
 */
export class ExampleScenario extends fhir.DomainResource {
    /**
     * Default constructor for ExampleScenario - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'ExampleScenario';
        if (source['url']) {
            this.url = source.url;
        }
        if (source['_url']) {
            this._url = new fhir.FhirElement(source._url);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['version']) {
            this.version = source.version;
        }
        if (source['_version']) {
            this._version = new fhir.FhirElement(source._version);
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['experimental']) {
            this.experimental = source.experimental;
        }
        if (source['_experimental']) {
            this._experimental = new fhir.FhirElement(source._experimental);
        }
        if (source['date']) {
            this.date = source.date;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['publisher']) {
            this.publisher = source.publisher;
        }
        if (source['_publisher']) {
            this._publisher = new fhir.FhirElement(source._publisher);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['copyright']) {
            this.copyright = source.copyright;
        }
        if (source['_copyright']) {
            this._copyright = new fhir.FhirElement(source._copyright);
        }
        if (source['purpose']) {
            this.purpose = source.purpose;
        }
        if (source['_purpose']) {
            this._purpose = new fhir.FhirElement(source._purpose);
        }
        if (source['actor']) {
            this.actor = source.actor.map((x) => new fhir.ExampleScenarioActor(x));
        }
        if (source['instance']) {
            this.instance = source.instance.map((x) => new fhir.ExampleScenarioInstance(x));
        }
        if (source['process']) {
            this.process = source.process.map((x) => new fhir.ExampleScenarioProcess(x));
        }
        if (source['workflow']) {
            this.workflow = source.workflow.map((x) => (x));
        }
        if (source['_workflow']) {
            this._workflow = source._workflow.map((x) => new fhir.FhirElement(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return PublicationStatusValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: ExampleScenario.resourceType']);
        }
        if (this["_url"]) {
            results.push(...this._url.doModelValidation());
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_version"]) {
            results.push(...this._version.doModelValidation());
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: ExampleScenario.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["_experimental"]) {
            results.push(...this._experimental.doModelValidation());
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["_publisher"]) {
            results.push(...this._publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_copyright"]) {
            results.push(...this._copyright.doModelValidation());
        }
        if (this["_purpose"]) {
            results.push(...this._purpose.doModelValidation());
        }
        if (this["actor"]) {
            this.actor.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["instance"]) {
            this.instance.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["process"]) {
            this.process.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_workflow"]) {
            this._workflow.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=ExampleScenario.js.map