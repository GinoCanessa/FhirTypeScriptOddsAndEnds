// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ExampleScenario
import * as fhir from '../fhir.js';
import { ExamplescenarioActorTypeValueSet, } from '../fhirValueSets/ExamplescenarioActorTypeValueSet.js';
import { ResourceTypesValueSet, } from '../fhirValueSets/ResourceTypesValueSet.js';
import { PublicationStatusValueSet, } from '../fhirValueSets/PublicationStatusValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Actor participating in the resource.
 */
export class ExampleScenarioActor extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioActor - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ExampleScenarioActor';
        if (source['actorId']) {
            this.actorId = new fhir.FhirString({ value: source.actorId });
        }
        else {
            this.actorId = null;
        }
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
    }
    /**
     * Required-bound Value Set for type
     */
    static typeRequiredValueSet() {
        return ExamplescenarioActorTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['actorId']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property actorId:fhir.FhirString fhir: ExampleScenario.actor.actorId:string", }));
        }
        if (this["actorId"]) {
            outcome.issue.push(...this.actorId.doModelValidation().issue);
        }
        if (!this['type']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property type:ExamplescenarioActorTypeValueSetEnum fhir: ExampleScenario.actor.type:code", }));
        }
        if (this["name"]) {
            outcome.issue.push(...this.name.doModelValidation().issue);
        }
        if (this["description"]) {
            outcome.issue.push(...this.description.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * A specific version of the resource.
 */
export class ExampleScenarioInstanceVersion extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioInstanceVersion - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ExampleScenarioInstanceVersion';
        if (source['versionId']) {
            this.versionId = new fhir.FhirString({ value: source.versionId });
        }
        else {
            this.versionId = null;
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        else {
            this.description = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['versionId']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property versionId:fhir.FhirString fhir: ExampleScenario.instance.version.versionId:string", }));
        }
        if (this["versionId"]) {
            outcome.issue.push(...this.versionId.doModelValidation().issue);
        }
        if (!this['description']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property description:fhir.FhirMarkdown fhir: ExampleScenario.instance.version.description:markdown", }));
        }
        if (this["description"]) {
            outcome.issue.push(...this.description.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Resources contained in the instance (e.g. the observations contained in a bundle).
 */
export class ExampleScenarioInstanceContainedInstance extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioInstanceContainedInstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ExampleScenarioInstanceContainedInstance';
        if (source['resourceId']) {
            this.resourceId = new fhir.FhirString({ value: source.resourceId });
        }
        else {
            this.resourceId = null;
        }
        if (source['versionId']) {
            this.versionId = new fhir.FhirString({ value: source.versionId });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceId']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceId:fhir.FhirString fhir: ExampleScenario.instance.containedInstance.resourceId:string", }));
        }
        if (this["resourceId"]) {
            outcome.issue.push(...this.resourceId.doModelValidation().issue);
        }
        if (this["versionId"]) {
            outcome.issue.push(...this.versionId.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Each resource and each version that is present in the workflow.
 */
export class ExampleScenarioInstance extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioInstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ExampleScenarioInstance';
        /**
         * A specific version of the resource.
         */
        this.version = [];
        /**
         * Resources contained in the instance (e.g. the observations contained in a bundle).
         */
        this.containedInstance = [];
        if (source['resourceId']) {
            this.resourceId = new fhir.FhirString({ value: source.resourceId });
        }
        else {
            this.resourceId = null;
        }
        if (source['resourceType']) {
            this.resourceType = new fhir.FhirCode({ value: source.resourceType });
        }
        else {
            this.resourceType = null;
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['version']) {
            this.version = source.version.map((x) => new fhir.ExampleScenarioInstanceVersion(x));
        }
        if (source['containedInstance']) {
            this.containedInstance = source.containedInstance.map((x) => new fhir.ExampleScenarioInstanceContainedInstance(x));
        }
    }
    /**
     * Required-bound Value Set for resourceType
     */
    static resourceTypeRequiredValueSet() {
        return ResourceTypesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceId']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceId:fhir.FhirString fhir: ExampleScenario.instance.resourceId:string", }));
        }
        if (this["resourceId"]) {
            outcome.issue.push(...this.resourceId.doModelValidation().issue);
        }
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:fhir.FhirCode fhir: ExampleScenario.instance.resourceType:code", }));
        }
        if (this["resourceType"]) {
            outcome.issue.push(...this.resourceType.doModelValidation().issue);
        }
        if (this["name"]) {
            outcome.issue.push(...this.name.doModelValidation().issue);
        }
        if (this["description"]) {
            outcome.issue.push(...this.description.doModelValidation().issue);
        }
        if (this["version"]) {
            this.version.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["containedInstance"]) {
            this.containedInstance.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Each interaction or action.
 */
export class ExampleScenarioProcessStepOperation extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioProcessStepOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ExampleScenarioProcessStepOperation';
        if (source['number']) {
            this.number = new fhir.FhirString({ value: source.number });
        }
        else {
            this.number = null;
        }
        if (source['type']) {
            this.type = new fhir.FhirString({ value: source.type });
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['initiator']) {
            this.initiator = new fhir.FhirString({ value: source.initiator });
        }
        if (source['receiver']) {
            this.receiver = new fhir.FhirString({ value: source.receiver });
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['initiatorActive']) {
            this.initiatorActive = new fhir.FhirBoolean({ value: source.initiatorActive });
        }
        if (source['receiverActive']) {
            this.receiverActive = new fhir.FhirBoolean({ value: source.receiverActive });
        }
        if (source['request']) {
            this.request = new fhir.ExampleScenarioInstanceContainedInstance(source.request);
        }
        if (source['response']) {
            this.response = new fhir.ExampleScenarioInstanceContainedInstance(source.response);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['number']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property number:fhir.FhirString fhir: ExampleScenario.process.step.operation.number:string", }));
        }
        if (this["number"]) {
            outcome.issue.push(...this.number.doModelValidation().issue);
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["name"]) {
            outcome.issue.push(...this.name.doModelValidation().issue);
        }
        if (this["initiator"]) {
            outcome.issue.push(...this.initiator.doModelValidation().issue);
        }
        if (this["receiver"]) {
            outcome.issue.push(...this.receiver.doModelValidation().issue);
        }
        if (this["description"]) {
            outcome.issue.push(...this.description.doModelValidation().issue);
        }
        if (this["initiatorActive"]) {
            outcome.issue.push(...this.initiatorActive.doModelValidation().issue);
        }
        if (this["receiverActive"]) {
            outcome.issue.push(...this.receiverActive.doModelValidation().issue);
        }
        if (this["request"]) {
            outcome.issue.push(...this.request.doModelValidation().issue);
        }
        if (this["response"]) {
            outcome.issue.push(...this.response.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.
 */
export class ExampleScenarioProcessStepAlternative extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioProcessStepAlternative - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ExampleScenarioProcessStepAlternative';
        /**
         * What happens in each alternative option.
         */
        this.step = [];
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        else {
            this.title = null;
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['step']) {
            this.step = source.step.map((x) => new fhir.ExampleScenarioProcessStep(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['title']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property title:fhir.FhirString fhir: ExampleScenario.process.step.alternative.title:string", }));
        }
        if (this["title"]) {
            outcome.issue.push(...this.title.doModelValidation().issue);
        }
        if (this["description"]) {
            outcome.issue.push(...this.description.doModelValidation().issue);
        }
        if (this["step"]) {
            this.step.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Each step of the process.
 */
export class ExampleScenarioProcessStep extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioProcessStep - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ExampleScenarioProcessStep';
        /**
         * Nested process.
         */
        this.process = [];
        /**
         * Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.
         */
        this.alternative = [];
        if (source['process']) {
            this.process = source.process.map((x) => new fhir.ExampleScenarioProcess(x));
        }
        if (source['pause']) {
            this.pause = new fhir.FhirBoolean({ value: source.pause });
        }
        if (source['operation']) {
            this.operation = new fhir.ExampleScenarioProcessStepOperation(source.operation);
        }
        if (source['alternative']) {
            this.alternative = source.alternative.map((x) => new fhir.ExampleScenarioProcessStepAlternative(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["process"]) {
            this.process.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["pause"]) {
            outcome.issue.push(...this.pause.doModelValidation().issue);
        }
        if (this["operation"]) {
            outcome.issue.push(...this.operation.doModelValidation().issue);
        }
        if (this["alternative"]) {
            this.alternative.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Each major process - a group of operations.
 */
export class ExampleScenarioProcess extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioProcess - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ExampleScenarioProcess';
        /**
         * Each step of the process.
         */
        this.step = [];
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        else {
            this.title = null;
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['preConditions']) {
            this.preConditions = new fhir.FhirMarkdown({ value: source.preConditions });
        }
        if (source['postConditions']) {
            this.postConditions = new fhir.FhirMarkdown({ value: source.postConditions });
        }
        if (source['step']) {
            this.step = source.step.map((x) => new fhir.ExampleScenarioProcessStep(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['title']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property title:fhir.FhirString fhir: ExampleScenario.process.title:string", }));
        }
        if (this["title"]) {
            outcome.issue.push(...this.title.doModelValidation().issue);
        }
        if (this["description"]) {
            outcome.issue.push(...this.description.doModelValidation().issue);
        }
        if (this["preConditions"]) {
            outcome.issue.push(...this.preConditions.doModelValidation().issue);
        }
        if (this["postConditions"]) {
            outcome.issue.push(...this.postConditions.doModelValidation().issue);
        }
        if (this["step"]) {
            this.step.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Example of workflow instance.
 */
export class ExampleScenario extends fhir.DomainResource {
    /**
     * Default constructor for ExampleScenario - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ExampleScenario';
        /**
         * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this example scenario outside of FHIR, where it is not possible to use the logical URI.
         */
        this.identifier = [];
        /**
         * May be a web site, an email address, a telephone number, etc.
         */
        this.contact = [];
        /**
         * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
         */
        this.useContext = [];
        /**
         * It may be possible for the example scenario to be used in jurisdictions other than those for which it was originally designed or intended.
         */
        this.jurisdiction = [];
        /**
         * Actor participating in the resource.
         */
        this.actor = [];
        /**
         * Each resource and each version that is present in the workflow.
         */
        this.instance = [];
        /**
         * Each major process - a group of operations.
         */
        this.process = [];
        /**
         * Another nested workflow.
         */
        this.workflow = [];
        this.resourceType = 'ExampleScenario';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['actor']) {
            this.actor = source.actor.map((x) => new fhir.ExampleScenarioActor(x));
        }
        if (source['instance']) {
            this.instance = source.instance.map((x) => new fhir.ExampleScenarioInstance(x));
        }
        if (source['process']) {
            this.process = source.process.map((x) => new fhir.ExampleScenarioProcess(x));
        }
        if (source['workflow']) {
            this.workflow = source.workflow.map((x) => new fhir.FhirCanonical({ value: x }));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return PublicationStatusValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'ExampleScenario' fhir: ExampleScenario.resourceType:'ExampleScenario'", }));
        }
        if (this["url"]) {
            outcome.issue.push(...this.url.doModelValidation().issue);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["version"]) {
            outcome.issue.push(...this.version.doModelValidation().issue);
        }
        if (this["name"]) {
            outcome.issue.push(...this.name.doModelValidation().issue);
        }
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:PublicationStatusValueSetEnum fhir: ExampleScenario.status:code", }));
        }
        if (this["experimental"]) {
            outcome.issue.push(...this.experimental.doModelValidation().issue);
        }
        if (this["date"]) {
            outcome.issue.push(...this.date.doModelValidation().issue);
        }
        if (this["publisher"]) {
            outcome.issue.push(...this.publisher.doModelValidation().issue);
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["copyright"]) {
            outcome.issue.push(...this.copyright.doModelValidation().issue);
        }
        if (this["purpose"]) {
            outcome.issue.push(...this.purpose.doModelValidation().issue);
        }
        if (this["actor"]) {
            this.actor.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["instance"]) {
            this.instance.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["process"]) {
            this.process.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["workflow"]) {
            this.workflow.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=ExampleScenario.js.map