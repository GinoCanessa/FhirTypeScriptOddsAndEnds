// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Appointment
import * as fhir from '../fhir.js';
import { EncounterParticipantTypeValueSet } from '../fhirValueSets/EncounterParticipantTypeValueSet.js';
import { ParticipantrequiredValueSet } from '../fhirValueSets/ParticipantrequiredValueSet.js';
import { ParticipationstatusValueSet } from '../fhirValueSets/ParticipationstatusValueSet.js';
import { AppointmentstatusValueSet } from '../fhirValueSets/AppointmentstatusValueSet.js';
import { AppointmentCancellationReasonValueSet } from '../fhirValueSets/AppointmentCancellationReasonValueSet.js';
import { ServiceCategoryValueSet } from '../fhirValueSets/ServiceCategoryValueSet.js';
import { ServiceTypeValueSet } from '../fhirValueSets/ServiceTypeValueSet.js';
import { C80PracticeCodesValueSet } from '../fhirValueSets/C80PracticeCodesValueSet.js';
import { V20276ValueSet } from '../fhirValueSets/V20276ValueSet.js';
import { EncounterReasonValueSet } from '../fhirValueSets/EncounterReasonValueSet.js';
/**
 * List of participants involved in the appointment.
 */
export class AppointmentParticipant extends fhir.BackboneElement {
    /**
     * Default constructor for AppointmentParticipant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        if (source['required']) {
            this.required = source.required;
        }
        if (source['_required']) {
            this._required = new fhir.FhirElement(source._required);
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Extensible-bound Value Set for type
     */
    typeExtensibleValueSet() {
        return EncounterParticipantTypeValueSet;
    }
    /**
     * Required-bound Value Set for required
     */
    requiredRequiredValueSet() {
        return ParticipantrequiredValueSet;
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return ParticipationstatusValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["type"]) {
            this.type.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["actor"]) {
            results.push(...this.actor.doModelValidation());
        }
        if (this["_required"]) {
            results.push(...this._required.doModelValidation());
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: Appointment.participant.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["period"]) {
            results.push(...this.period.doModelValidation());
        }
        return results;
    }
}
/**
 * A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).
 */
export class Appointment extends fhir.DomainResource {
    /**
     * Default constructor for Appointment - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Appointment';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['cancelationReason']) {
            this.cancelationReason = new fhir.CodeableConcept(source.cancelationReason);
        }
        if (source['serviceCategory']) {
            this.serviceCategory = source.serviceCategory.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['serviceType']) {
            this.serviceType = source.serviceType.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['specialty']) {
            this.specialty = source.specialty.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['appointmentType']) {
            this.appointmentType = new fhir.CodeableConcept(source.appointmentType);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source['priority']) {
            this.priority = source.priority;
        }
        if (source['_priority']) {
            this._priority = new fhir.FhirElement(source._priority);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['supportingInformation']) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x));
        }
        if (source['start']) {
            this.start = source.start;
        }
        if (source['_start']) {
            this._start = new fhir.FhirElement(source._start);
        }
        if (source['end']) {
            this.end = source.end;
        }
        if (source['_end']) {
            this._end = new fhir.FhirElement(source._end);
        }
        if (source['minutesDuration']) {
            this.minutesDuration = source.minutesDuration;
        }
        if (source['_minutesDuration']) {
            this._minutesDuration = new fhir.FhirElement(source._minutesDuration);
        }
        if (source['slot']) {
            this.slot = source.slot.map((x) => new fhir.Reference(x));
        }
        if (source['created']) {
            this.created = source.created;
        }
        if (source['_created']) {
            this._created = new fhir.FhirElement(source._created);
        }
        if (source['comment']) {
            this.comment = source.comment;
        }
        if (source['_comment']) {
            this._comment = new fhir.FhirElement(source._comment);
        }
        if (source['patientInstruction']) {
            this.patientInstruction = source.patientInstruction;
        }
        if (source['_patientInstruction']) {
            this._patientInstruction = new fhir.FhirElement(source._patientInstruction);
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source['participant']) {
            this.participant = source.participant.map((x) => new fhir.AppointmentParticipant(x));
        }
        else {
            this.participant = null;
        }
        if (source['requestedPeriod']) {
            this.requestedPeriod = source.requestedPeriod.map((x) => new fhir.Period(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return AppointmentstatusValueSet;
    }
    /**
     * Example-bound Value Set for cancelationReason
     */
    cancelationReasonExampleValueSet() {
        return AppointmentCancellationReasonValueSet;
    }
    /**
     * Example-bound Value Set for serviceCategory
     */
    serviceCategoryExampleValueSet() {
        return ServiceCategoryValueSet;
    }
    /**
     * Example-bound Value Set for serviceType
     */
    serviceTypeExampleValueSet() {
        return ServiceTypeValueSet;
    }
    /**
     * Preferred-bound Value Set for specialty
     */
    specialtyPreferredValueSet() {
        return C80PracticeCodesValueSet;
    }
    /**
     * Preferred-bound Value Set for appointmentType
     */
    appointmentTypePreferredValueSet() {
        return V20276ValueSet;
    }
    /**
     * Preferred-bound Value Set for reasonCode
     */
    reasonCodePreferredValueSet() {
        return EncounterReasonValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: Appointment.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: Appointment.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["cancelationReason"]) {
            results.push(...this.cancelationReason.doModelValidation());
        }
        if (this["serviceCategory"]) {
            this.serviceCategory.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["serviceType"]) {
            this.serviceType.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["specialty"]) {
            this.specialty.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["appointmentType"]) {
            results.push(...this.appointmentType.doModelValidation());
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_priority"]) {
            results.push(...this._priority.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["supportingInformation"]) {
            this.supportingInformation.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_start"]) {
            results.push(...this._start.doModelValidation());
        }
        if (this["_end"]) {
            results.push(...this._end.doModelValidation());
        }
        if (this["_minutesDuration"]) {
            results.push(...this._minutesDuration.doModelValidation());
        }
        if (this["slot"]) {
            this.slot.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_created"]) {
            results.push(...this._created.doModelValidation());
        }
        if (this["_comment"]) {
            results.push(...this._comment.doModelValidation());
        }
        if (this["_patientInstruction"]) {
            results.push(...this._patientInstruction.doModelValidation());
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if ((!this["participant"]) || (this["participant"].length === 0)) {
            results.push(["participant", 'Missing required element: Appointment.participant']);
        }
        if (this["participant"]) {
            this.participant.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["requestedPeriod"]) {
            this.requestedPeriod.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=Appointment.js.map