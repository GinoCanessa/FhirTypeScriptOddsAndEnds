// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Appointment
import * as fhir from '../fhir.js';
import { EncounterParticipantTypeValueSet, } from '../fhirValueSets/EncounterParticipantTypeValueSet.js';
import { ParticipantrequiredValueSet, } from '../fhirValueSets/ParticipantrequiredValueSet.js';
import { ParticipationstatusValueSet, } from '../fhirValueSets/ParticipationstatusValueSet.js';
import { AppointmentstatusValueSet, } from '../fhirValueSets/AppointmentstatusValueSet.js';
import { AppointmentCancellationReasonValueSet, } from '../fhirValueSets/AppointmentCancellationReasonValueSet.js';
import { ServiceCategoryValueSet, } from '../fhirValueSets/ServiceCategoryValueSet.js';
import { ServiceTypeValueSet, } from '../fhirValueSets/ServiceTypeValueSet.js';
import { C80PracticeCodesValueSet, } from '../fhirValueSets/C80PracticeCodesValueSet.js';
import { V20276ValueSet, } from '../fhirValueSets/V20276ValueSet.js';
import { EncounterReasonValueSet, } from '../fhirValueSets/EncounterReasonValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * List of participants involved in the appointment.
 */
export class AppointmentParticipant extends fhir.BackboneElement {
    /**
     * Default constructor for AppointmentParticipant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'AppointmentParticipant';
        /**
         * The role of the participant can be used to declare what the actor will be doing in the scope of this appointment.
         * If the actor is not specified, then it is expected that the actor will be filled in at a later stage of planning.
         * This value SHALL be the same when creating an AppointmentResponse so that they can be matched, and subsequently update the Appointment.
         */
        this.type = [];
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        if (source['required']) {
            this.required = source.required;
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Extensible-bound Value Set for type
     */
    static typeExtensibleValueSet() {
        return EncounterParticipantTypeValueSet;
    }
    /**
     * Required-bound Value Set for required
     */
    static requiredRequiredValueSet() {
        return ParticipantrequiredValueSet;
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return ParticipationstatusValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["type"]) {
            this.type.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["actor"]) {
            outcome.issue.push(...this.actor.doModelValidation().issue);
        }
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:ParticipationstatusValueSetEnum fhir: Appointment.participant.status:code", }));
        }
        if (this["period"]) {
            outcome.issue.push(...this.period.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).
 */
export class Appointment extends fhir.DomainResource {
    /**
     * Default constructor for Appointment - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'Appointment';
        /**
         * This records identifiers associated with this appointment concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
         */
        this.identifier = [];
        /**
         * A broad categorization of the service that is to be performed during this appointment.
         */
        this.serviceCategory = [];
        /**
         * For a provider to provider appointment the code "FOLLOWUP" may be appropriate, as this is expected to be discussing some patient that was seen in the past.
         */
        this.serviceType = [];
        /**
         * The specialty of a practitioner that would be required to perform the service requested in this appointment.
         */
        this.specialty = [];
        /**
         * The coded reason that this appointment is being scheduled. This is more clinical than administrative.
         */
        this.reasonCode = [];
        /**
         * Reason the appointment has been scheduled to take place, as specified using information from another resource. When the patient arrives and the encounter begins it may be used as the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.
         */
        this.reasonReference = [];
        /**
         * Additional information to support the appointment provided when making the appointment.
         */
        this.supportingInformation = [];
        /**
         * The slots from the participants' schedules that will be filled by the appointment.
         */
        this.slot = [];
        /**
         * The service request this appointment is allocated to assess (e.g. incoming referral or procedure request).
         */
        this.basedOn = [];
        /**
         * List of participants involved in the appointment.
         */
        this.participant = [];
        /**
         * This does not introduce a capacity for recurring appointments.
         */
        this.requestedPeriod = [];
        this.resourceType = 'Appointment';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['cancelationReason']) {
            this.cancelationReason = new fhir.CodeableConcept(source.cancelationReason);
        }
        if (source['serviceCategory']) {
            this.serviceCategory = source.serviceCategory.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['serviceType']) {
            this.serviceType = source.serviceType.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['specialty']) {
            this.specialty = source.specialty.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['appointmentType']) {
            this.appointmentType = new fhir.CodeableConcept(source.appointmentType);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source['priority']) {
            this.priority = new fhir.FhirUnsignedInt({ value: source.priority });
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['supportingInformation']) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x));
        }
        if (source['start']) {
            this.start = new fhir.FhirInstant({ value: source.start });
        }
        if (source['end']) {
            this.end = new fhir.FhirInstant({ value: source.end });
        }
        if (source['minutesDuration']) {
            this.minutesDuration = new fhir.FhirPositiveInt({ value: source.minutesDuration });
        }
        if (source['slot']) {
            this.slot = source.slot.map((x) => new fhir.Reference(x));
        }
        if (source['created']) {
            this.created = new fhir.FhirDateTime({ value: source.created });
        }
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
        if (source['patientInstruction']) {
            this.patientInstruction = new fhir.FhirString({ value: source.patientInstruction });
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source['participant']) {
            this.participant = source.participant.map((x) => new fhir.AppointmentParticipant(x));
        }
        else {
            this.participant = null;
        }
        if (source['requestedPeriod']) {
            this.requestedPeriod = source.requestedPeriod.map((x) => new fhir.Period(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return AppointmentstatusValueSet;
    }
    /**
     * Example-bound Value Set for cancelationReason
     */
    static cancelationReasonExampleValueSet() {
        return AppointmentCancellationReasonValueSet;
    }
    /**
     * Example-bound Value Set for serviceCategory
     */
    static serviceCategoryExampleValueSet() {
        return ServiceCategoryValueSet;
    }
    /**
     * Example-bound Value Set for serviceType
     */
    static serviceTypeExampleValueSet() {
        return ServiceTypeValueSet;
    }
    /**
     * Preferred-bound Value Set for specialty
     */
    static specialtyPreferredValueSet() {
        return C80PracticeCodesValueSet;
    }
    /**
     * Preferred-bound Value Set for appointmentType
     */
    static appointmentTypePreferredValueSet() {
        return V20276ValueSet;
    }
    /**
     * Preferred-bound Value Set for reasonCode
     */
    static reasonCodePreferredValueSet() {
        return EncounterReasonValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'Appointment' fhir: Appointment.resourceType:'Appointment'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:AppointmentstatusValueSetEnum fhir: Appointment.status:code", }));
        }
        if (this["cancelationReason"]) {
            outcome.issue.push(...this.cancelationReason.doModelValidation().issue);
        }
        if (this["serviceCategory"]) {
            this.serviceCategory.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["serviceType"]) {
            this.serviceType.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["specialty"]) {
            this.specialty.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["appointmentType"]) {
            outcome.issue.push(...this.appointmentType.doModelValidation().issue);
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["priority"]) {
            outcome.issue.push(...this.priority.doModelValidation().issue);
        }
        if (this["description"]) {
            outcome.issue.push(...this.description.doModelValidation().issue);
        }
        if (this["supportingInformation"]) {
            this.supportingInformation.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["start"]) {
            outcome.issue.push(...this.start.doModelValidation().issue);
        }
        if (this["end"]) {
            outcome.issue.push(...this.end.doModelValidation().issue);
        }
        if (this["minutesDuration"]) {
            outcome.issue.push(...this.minutesDuration.doModelValidation().issue);
        }
        if (this["slot"]) {
            this.slot.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["created"]) {
            outcome.issue.push(...this.created.doModelValidation().issue);
        }
        if (this["comment"]) {
            outcome.issue.push(...this.comment.doModelValidation().issue);
        }
        if (this["patientInstruction"]) {
            outcome.issue.push(...this.patientInstruction.doModelValidation().issue);
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['participant']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property participant:fhir.AppointmentParticipant[] fhir: Appointment.participant:participant", }));
        }
        else if (!Array.isArray(this.participant)) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue, diagnostics: "Found scalar in array property participant:fhir.AppointmentParticipant[] fhir: Appointment.participant:participant", }));
        }
        else if (this.participant.length === 0) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property participant:fhir.AppointmentParticipant[] fhir: Appointment.participant:participant", }));
        }
        if (this["participant"]) {
            this.participant.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["requestedPeriod"]) {
            this.requestedPeriod.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=Appointment.js.map