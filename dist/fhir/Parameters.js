// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * A parameter passed to or received from the operation.
 */
export class ParametersParameter extends fhir.BackboneElement {
    /**
     * Default constructor for ParametersParameter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        var _a;
        super(source);
        this.name = null;
        if (source["name"]) {
            this.name = source.name;
        }
        if (this.name === undefined) {
            this.name = null;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["part"]) {
            this.part = source.part.map((x) => new fhir.ParametersParameter(x));
        }
        if (source["resource"]) {
            this.resource = ((_a = fhir.FhirResourceFactory(source.resource)) !== null && _a !== void 0 ? _a : undefined);
        }
        if (source["valueBase64Binary"]) {
            this.valueBase64Binary = source.valueBase64Binary;
        }
        if (source["_valueBase64Binary"]) {
            this._valueBase64Binary = new fhir.FhirElement(source._valueBase64Binary);
        }
        if (source["valueBoolean"]) {
            this.valueBoolean = source.valueBoolean;
        }
        if (source["_valueBoolean"]) {
            this._valueBoolean = new fhir.FhirElement(source._valueBoolean);
        }
        if (source["valueCanonical"]) {
            this.valueCanonical = source.valueCanonical;
        }
        if (source["_valueCanonical"]) {
            this._valueCanonical = new fhir.FhirElement(source._valueCanonical);
        }
        if (source["valueCode"]) {
            this.valueCode = source.valueCode;
        }
        if (source["_valueCode"]) {
            this._valueCode = new fhir.FhirElement(source._valueCode);
        }
        if (source["valueDate"]) {
            this.valueDate = source.valueDate;
        }
        if (source["_valueDate"]) {
            this._valueDate = new fhir.FhirElement(source._valueDate);
        }
        if (source["valueDateTime"]) {
            this.valueDateTime = source.valueDateTime;
        }
        if (source["_valueDateTime"]) {
            this._valueDateTime = new fhir.FhirElement(source._valueDateTime);
        }
        if (source["valueDecimal"]) {
            this.valueDecimal = source.valueDecimal;
        }
        if (source["_valueDecimal"]) {
            this._valueDecimal = new fhir.FhirElement(source._valueDecimal);
        }
        if (source["valueId"]) {
            this.valueId = source.valueId;
        }
        if (source["_valueId"]) {
            this._valueId = new fhir.FhirElement(source._valueId);
        }
        if (source["valueInstant"]) {
            this.valueInstant = source.valueInstant;
        }
        if (source["_valueInstant"]) {
            this._valueInstant = new fhir.FhirElement(source._valueInstant);
        }
        if (source["valueInteger"]) {
            this.valueInteger = source.valueInteger;
        }
        if (source["_valueInteger"]) {
            this._valueInteger = new fhir.FhirElement(source._valueInteger);
        }
        if (source["valueMarkdown"]) {
            this.valueMarkdown = source.valueMarkdown;
        }
        if (source["_valueMarkdown"]) {
            this._valueMarkdown = new fhir.FhirElement(source._valueMarkdown);
        }
        if (source["valueOid"]) {
            this.valueOid = source.valueOid;
        }
        if (source["_valueOid"]) {
            this._valueOid = new fhir.FhirElement(source._valueOid);
        }
        if (source["valuePositiveInt"]) {
            this.valuePositiveInt = source.valuePositiveInt;
        }
        if (source["_valuePositiveInt"]) {
            this._valuePositiveInt = new fhir.FhirElement(source._valuePositiveInt);
        }
        if (source["valueString"]) {
            this.valueString = source.valueString;
        }
        if (source["_valueString"]) {
            this._valueString = new fhir.FhirElement(source._valueString);
        }
        if (source["valueTime"]) {
            this.valueTime = source.valueTime;
        }
        if (source["_valueTime"]) {
            this._valueTime = new fhir.FhirElement(source._valueTime);
        }
        if (source["valueUnsignedInt"]) {
            this.valueUnsignedInt = source.valueUnsignedInt;
        }
        if (source["_valueUnsignedInt"]) {
            this._valueUnsignedInt = new fhir.FhirElement(source._valueUnsignedInt);
        }
        if (source["valueUri"]) {
            this.valueUri = source.valueUri;
        }
        if (source["_valueUri"]) {
            this._valueUri = new fhir.FhirElement(source._valueUri);
        }
        if (source["valueUrl"]) {
            this.valueUrl = source.valueUrl;
        }
        if (source["_valueUrl"]) {
            this._valueUrl = new fhir.FhirElement(source._valueUrl);
        }
        if (source["valueUuid"]) {
            this.valueUuid = source.valueUuid;
        }
        if (source["_valueUuid"]) {
            this._valueUuid = new fhir.FhirElement(source._valueUuid);
        }
        if (source["valueAddress"]) {
            this.valueAddress = new fhir.Address(source.valueAddress);
        }
        if (source["valueAge"]) {
            this.valueAge = new fhir.Age(source.valueAge);
        }
        if (source["valueAnnotation"]) {
            this.valueAnnotation = new fhir.Annotation(source.valueAnnotation);
        }
        if (source["valueAttachment"]) {
            this.valueAttachment = new fhir.Attachment(source.valueAttachment);
        }
        if (source["valueCodeableConcept"]) {
            this.valueCodeableConcept = new fhir.CodeableConcept(source.valueCodeableConcept);
        }
        if (source["valueCoding"]) {
            this.valueCoding = new fhir.Coding(source.valueCoding);
        }
        if (source["valueContactPoint"]) {
            this.valueContactPoint = new fhir.ContactPoint(source.valueContactPoint);
        }
        if (source["valueCount"]) {
            this.valueCount = new fhir.Count(source.valueCount);
        }
        if (source["valueDistance"]) {
            this.valueDistance = new fhir.Distance(source.valueDistance);
        }
        if (source["valueDuration"]) {
            this.valueDuration = new fhir.Duration(source.valueDuration);
        }
        if (source["valueHumanName"]) {
            this.valueHumanName = new fhir.HumanName(source.valueHumanName);
        }
        if (source["valueIdentifier"]) {
            this.valueIdentifier = new fhir.Identifier(source.valueIdentifier);
        }
        if (source["valueMoney"]) {
            this.valueMoney = new fhir.Money(source.valueMoney);
        }
        if (source["valuePeriod"]) {
            this.valuePeriod = new fhir.Period(source.valuePeriod);
        }
        if (source["valueQuantity"]) {
            this.valueQuantity = new fhir.Quantity(source.valueQuantity);
        }
        if (source["valueRange"]) {
            this.valueRange = new fhir.Range(source.valueRange);
        }
        if (source["valueRatio"]) {
            this.valueRatio = new fhir.Ratio(source.valueRatio);
        }
        if (source["valueReference"]) {
            this.valueReference = new fhir.Reference(source.valueReference);
        }
        if (source["valueSampledData"]) {
            this.valueSampledData = new fhir.SampledData(source.valueSampledData);
        }
        if (source["valueSignature"]) {
            this.valueSignature = new fhir.Signature(source.valueSignature);
        }
        if (source["valueTiming"]) {
            this.valueTiming = new fhir.Timing(source.valueTiming);
        }
        if (source["valueContactDetail"]) {
            this.valueContactDetail = new fhir.ContactDetail(source.valueContactDetail);
        }
        if (source["valueContributor"]) {
            this.valueContributor = new fhir.Contributor(source.valueContributor);
        }
        if (source["valueDataRequirement"]) {
            this.valueDataRequirement = new fhir.DataRequirement(source.valueDataRequirement);
        }
        if (source["valueExpression"]) {
            this.valueExpression = new fhir.Expression(source.valueExpression);
        }
        if (source["valueParameterDefinition"]) {
            this.valueParameterDefinition = new fhir.ParameterDefinition(source.valueParameterDefinition);
        }
        if (source["valueRelatedArtifact"]) {
            this.valueRelatedArtifact = new fhir.RelatedArtifact(source.valueRelatedArtifact);
        }
        if (source["valueTriggerDefinition"]) {
            this.valueTriggerDefinition = new fhir.TriggerDefinition(source.valueTriggerDefinition);
        }
        if (source["valueUsageContext"]) {
            this.valueUsageContext = new fhir.UsageContext(source.valueUsageContext);
        }
        if (source["valueDosage"]) {
            this.valueDosage = new fhir.Dosage(source.valueDosage);
        }
        if (source["valueMeta"]) {
            this.valueMeta = new fhir.Meta(source.valueMeta);
        }
    }
    /**
     * Check if the current ParametersParameter contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["name"] === undefined) {
            missingElements.push("name");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ParametersParameter from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new ParametersParameter(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `ParametersParameter is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * This resource is a non-persisted resource used to pass information into and back from an [operation](operations.html). It has no other use, and there is no RESTful endpoint associated with it.
 */
export class Parameters extends fhir.Resource {
    /**
     * Default constructor for Parameters - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Parameters';
        if (source["parameter"]) {
            this.parameter = source.parameter.map((x) => new fhir.ParametersParameter(x));
        }
    }
    /**
     * Check if the current Parameters contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Parameters from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new Parameters(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `Parameters is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
//# sourceMappingURL=Parameters.js.map