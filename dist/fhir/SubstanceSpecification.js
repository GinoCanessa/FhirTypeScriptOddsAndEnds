// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Moiety, for structural modifications.
 */
export class SubstanceSpecificationMoiety extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationMoiety - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["amountQuantity"]) {
            this.amountQuantity = new fhir.Quantity(source.amountQuantity);
        }
        if (source["amountString"]) {
            this.amountString = source.amountString;
        }
        if (source["_amountString"]) {
            this._amountString = new fhir.FhirElement(source._amountString);
        }
        if (source["identifier"]) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source["molecularFormula"]) {
            this.molecularFormula = source.molecularFormula;
        }
        if (source["_molecularFormula"]) {
            this._molecularFormula = new fhir.FhirElement(source._molecularFormula);
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["opticalActivity"]) {
            this.opticalActivity = new fhir.CodeableConcept(source.opticalActivity);
        }
        if (source["role"]) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        if (source["stereochemistry"]) {
            this.stereochemistry = new fhir.CodeableConcept(source.stereochemistry);
        }
    }
    /**
     * Check if the current SubstanceSpecificationMoiety contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SubstanceSpecificationMoiety from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new SubstanceSpecificationMoiety(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstanceSpecificationMoiety is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * General specifications for this substance, including how it is related to other substances.
 */
export class SubstanceSpecificationProperty extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationProperty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["amountQuantity"]) {
            this.amountQuantity = new fhir.Quantity(source.amountQuantity);
        }
        if (source["amountString"]) {
            this.amountString = source.amountString;
        }
        if (source["_amountString"]) {
            this._amountString = new fhir.FhirElement(source._amountString);
        }
        if (source["category"]) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source["definingSubstanceReference"]) {
            this.definingSubstanceReference = new fhir.Reference(source.definingSubstanceReference);
        }
        if (source["definingSubstanceCodeableConcept"]) {
            this.definingSubstanceCodeableConcept = new fhir.CodeableConcept(source.definingSubstanceCodeableConcept);
        }
        if (source["parameters"]) {
            this.parameters = source.parameters;
        }
        if (source["_parameters"]) {
            this._parameters = new fhir.FhirElement(source._parameters);
        }
    }
    /**
     * Check if the current SubstanceSpecificationProperty contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SubstanceSpecificationProperty from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new SubstanceSpecificationProperty(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstanceSpecificationProperty is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The molecular weight or weight range (for proteins, polymers or nucleic acids).
 */
export class SubstanceSpecificationStructureIsotopeMolecularWeight extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationStructureIsotopeMolecularWeight - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["amount"]) {
            this.amount = new fhir.Quantity(source.amount);
        }
        if (source["method"]) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current SubstanceSpecificationStructureIsotopeMolecularWeight contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SubstanceSpecificationStructureIsotopeMolecularWeight from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new SubstanceSpecificationStructureIsotopeMolecularWeight(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstanceSpecificationStructureIsotopeMolecularWeight is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.
 */
export class SubstanceSpecificationStructureIsotope extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationStructureIsotope - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["halfLife"]) {
            this.halfLife = new fhir.Quantity(source.halfLife);
        }
        if (source["identifier"]) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source["molecularWeight"]) {
            this.molecularWeight = new fhir.SubstanceSpecificationStructureIsotopeMolecularWeight(source.molecularWeight);
        }
        if (source["name"]) {
            this.name = new fhir.CodeableConcept(source.name);
        }
        if (source["substitution"]) {
            this.substitution = new fhir.CodeableConcept(source.substitution);
        }
    }
    /**
     * Check if the current SubstanceSpecificationStructureIsotope contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SubstanceSpecificationStructureIsotope from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new SubstanceSpecificationStructureIsotope(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstanceSpecificationStructureIsotope is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Molecular structural representation.
 */
export class SubstanceSpecificationStructureRepresentation extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationStructureRepresentation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["attachment"]) {
            this.attachment = new fhir.Attachment(source.attachment);
        }
        if (source["representation"]) {
            this.representation = source.representation;
        }
        if (source["_representation"]) {
            this._representation = new fhir.FhirElement(source._representation);
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current SubstanceSpecificationStructureRepresentation contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SubstanceSpecificationStructureRepresentation from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new SubstanceSpecificationStructureRepresentation(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstanceSpecificationStructureRepresentation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Structural information.
 */
export class SubstanceSpecificationStructure extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationStructure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["isotope"]) {
            this.isotope = source.isotope.map((x) => new fhir.SubstanceSpecificationStructureIsotope(x));
        }
        if (source["molecularFormula"]) {
            this.molecularFormula = source.molecularFormula;
        }
        if (source["_molecularFormula"]) {
            this._molecularFormula = new fhir.FhirElement(source._molecularFormula);
        }
        if (source["molecularFormulaByMoiety"]) {
            this.molecularFormulaByMoiety = source.molecularFormulaByMoiety;
        }
        if (source["_molecularFormulaByMoiety"]) {
            this._molecularFormulaByMoiety = new fhir.FhirElement(source._molecularFormulaByMoiety);
        }
        if (source["molecularWeight"]) {
            this.molecularWeight = new fhir.SubstanceSpecificationStructureIsotopeMolecularWeight(source.molecularWeight);
        }
        if (source["opticalActivity"]) {
            this.opticalActivity = new fhir.CodeableConcept(source.opticalActivity);
        }
        if (source["representation"]) {
            this.representation = source.representation.map((x) => new fhir.SubstanceSpecificationStructureRepresentation(x));
        }
        if (source["source"]) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
        if (source["stereochemistry"]) {
            this.stereochemistry = new fhir.CodeableConcept(source.stereochemistry);
        }
    }
    /**
     * Check if the current SubstanceSpecificationStructure contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SubstanceSpecificationStructure from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new SubstanceSpecificationStructure(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstanceSpecificationStructure is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Codes associated with the substance.
 */
export class SubstanceSpecificationCode extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationCode - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source["comment"]) {
            this.comment = source.comment;
        }
        if (source["_comment"]) {
            this._comment = new fhir.FhirElement(source._comment);
        }
        if (source["source"]) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
        if (source["status"]) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        if (source["statusDate"]) {
            this.statusDate = source.statusDate;
        }
        if (source["_statusDate"]) {
            this._statusDate = new fhir.FhirElement(source._statusDate);
        }
    }
    /**
     * Check if the current SubstanceSpecificationCode contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SubstanceSpecificationCode from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new SubstanceSpecificationCode(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstanceSpecificationCode is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Details of the official nature of this name.
 */
export class SubstanceSpecificationNameOfficial extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationNameOfficial - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["authority"]) {
            this.authority = new fhir.CodeableConcept(source.authority);
        }
        if (source["date"]) {
            this.date = source.date;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["status"]) {
            this.status = new fhir.CodeableConcept(source.status);
        }
    }
    /**
     * Check if the current SubstanceSpecificationNameOfficial contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SubstanceSpecificationNameOfficial from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new SubstanceSpecificationNameOfficial(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstanceSpecificationNameOfficial is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Names applicable to this substance.
 */
export class SubstanceSpecificationName extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationName - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["domain"]) {
            this.domain = source.domain.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["jurisdiction"]) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["language"]) {
            this.language = source.language.map((x) => new fhir.CodeableConcept(x));
        }
        this.name = null;
        if (source["name"]) {
            this.name = source.name;
        }
        if (this.name === undefined) {
            this.name = null;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["official"]) {
            this.official = source.official.map((x) => new fhir.SubstanceSpecificationNameOfficial(x));
        }
        if (source["preferred"]) {
            this.preferred = source.preferred;
        }
        if (source["_preferred"]) {
            this._preferred = new fhir.FhirElement(source._preferred);
        }
        if (source["source"]) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
        if (source["status"]) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        if (source["synonym"]) {
            this.synonym = source.synonym.map((x) => new fhir.SubstanceSpecificationName(x));
        }
        if (source["translation"]) {
            this.translation = source.translation.map((x) => new fhir.SubstanceSpecificationName(x));
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current SubstanceSpecificationName contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["name"] === undefined) {
            missingElements.push("name");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SubstanceSpecificationName from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new SubstanceSpecificationName(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstanceSpecificationName is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A link between this substance and another, with details of the relationship.
 */
export class SubstanceSpecificationRelationship extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationRelationship - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["amountQuantity"]) {
            this.amountQuantity = new fhir.Quantity(source.amountQuantity);
        }
        if (source["amountRange"]) {
            this.amountRange = new fhir.Range(source.amountRange);
        }
        if (source["amountRatio"]) {
            this.amountRatio = new fhir.Ratio(source.amountRatio);
        }
        if (source["amountString"]) {
            this.amountString = source.amountString;
        }
        if (source["_amountString"]) {
            this._amountString = new fhir.FhirElement(source._amountString);
        }
        if (source["amountRatioLowLimit"]) {
            this.amountRatioLowLimit = new fhir.Ratio(source.amountRatioLowLimit);
        }
        if (source["amountType"]) {
            this.amountType = new fhir.CodeableConcept(source.amountType);
        }
        if (source["isDefining"]) {
            this.isDefining = source.isDefining;
        }
        if (source["_isDefining"]) {
            this._isDefining = new fhir.FhirElement(source._isDefining);
        }
        if (source["relationship"]) {
            this.relationship = new fhir.CodeableConcept(source.relationship);
        }
        if (source["source"]) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
        if (source["substanceReference"]) {
            this.substanceReference = new fhir.Reference(source.substanceReference);
        }
        if (source["substanceCodeableConcept"]) {
            this.substanceCodeableConcept = new fhir.CodeableConcept(source.substanceCodeableConcept);
        }
    }
    /**
     * Check if the current SubstanceSpecificationRelationship contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SubstanceSpecificationRelationship from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new SubstanceSpecificationRelationship(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstanceSpecificationRelationship is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The detailed description of a substance, typically at a level beyond what is used for prescribing.
 */
export class SubstanceSpecification extends fhir.DomainResource {
    /**
     * Default constructor for SubstanceSpecification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'SubstanceSpecification';
        if (source["code"]) {
            this.code = source.code.map((x) => new fhir.SubstanceSpecificationCode(x));
        }
        if (source["comment"]) {
            this.comment = source.comment;
        }
        if (source["_comment"]) {
            this._comment = new fhir.FhirElement(source._comment);
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["domain"]) {
            this.domain = new fhir.CodeableConcept(source.domain);
        }
        if (source["identifier"]) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source["moiety"]) {
            this.moiety = source.moiety.map((x) => new fhir.SubstanceSpecificationMoiety(x));
        }
        if (source["molecularWeight"]) {
            this.molecularWeight = source.molecularWeight.map((x) => new fhir.SubstanceSpecificationStructureIsotopeMolecularWeight(x));
        }
        if (source["name"]) {
            this.name = source.name.map((x) => new fhir.SubstanceSpecificationName(x));
        }
        if (source["nucleicAcid"]) {
            this.nucleicAcid = new fhir.Reference(source.nucleicAcid);
        }
        if (source["polymer"]) {
            this.polymer = new fhir.Reference(source.polymer);
        }
        if (source["property"]) {
            this.property = source.property.map((x) => new fhir.SubstanceSpecificationProperty(x));
        }
        if (source["protein"]) {
            this.protein = new fhir.Reference(source.protein);
        }
        if (source["referenceInformation"]) {
            this.referenceInformation = new fhir.Reference(source.referenceInformation);
        }
        if (source["relationship"]) {
            this.relationship = source.relationship.map((x) => new fhir.SubstanceSpecificationRelationship(x));
        }
        if (source["source"]) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
        if (source["sourceMaterial"]) {
            this.sourceMaterial = new fhir.Reference(source.sourceMaterial);
        }
        if (source["status"]) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        if (source["structure"]) {
            this.structure = new fhir.SubstanceSpecificationStructure(source.structure);
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current SubstanceSpecification contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SubstanceSpecification from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new SubstanceSpecification(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstanceSpecification is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
//# sourceMappingURL=SubstanceSpecification.js.map