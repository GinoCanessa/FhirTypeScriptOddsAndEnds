// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SubstanceSpecification
import * as fhir from '../fhir.js';
/**
 * Moiety, for structural modifications.
 */
export class SubstanceSpecificationMoiety extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationMoiety - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['stereochemistry']) {
            this.stereochemistry = new fhir.CodeableConcept(source.stereochemistry);
        }
        if (source['opticalActivity']) {
            this.opticalActivity = new fhir.CodeableConcept(source.opticalActivity);
        }
        if (source['molecularFormula']) {
            this.molecularFormula = source.molecularFormula;
        }
        if (source['_molecularFormula']) {
            this._molecularFormula = new fhir.FhirElement(source._molecularFormula);
        }
        if (source['amountQuantity']) {
            this.amountQuantity = new fhir.Quantity(source.amountQuantity);
        }
        if (source['amountString']) {
            this.amountString = source.amountString;
        }
        if (source['_amountString']) {
            this._amountString = new fhir.FhirElement(source._amountString);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["role"]) {
            results.push(...this.role.doModelValidation());
        }
        if (this["identifier"]) {
            results.push(...this.identifier.doModelValidation());
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["stereochemistry"]) {
            results.push(...this.stereochemistry.doModelValidation());
        }
        if (this["opticalActivity"]) {
            results.push(...this.opticalActivity.doModelValidation());
        }
        if (this["_molecularFormula"]) {
            results.push(...this._molecularFormula.doModelValidation());
        }
        if (this["amountQuantity"]) {
            results.push(...this.amountQuantity.doModelValidation());
        }
        if (this["_amountString"]) {
            results.push(...this._amountString.doModelValidation());
        }
        return results;
    }
}
/**
 * General specifications for this substance, including how it is related to other substances.
 */
export class SubstanceSpecificationProperty extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationProperty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['parameters']) {
            this.parameters = source.parameters;
        }
        if (source['_parameters']) {
            this._parameters = new fhir.FhirElement(source._parameters);
        }
        if (source['definingSubstanceReference']) {
            this.definingSubstanceReference = new fhir.Reference(source.definingSubstanceReference);
        }
        if (source['definingSubstanceCodeableConcept']) {
            this.definingSubstanceCodeableConcept = new fhir.CodeableConcept(source.definingSubstanceCodeableConcept);
        }
        if (source['amountQuantity']) {
            this.amountQuantity = new fhir.Quantity(source.amountQuantity);
        }
        if (source['amountString']) {
            this.amountString = source.amountString;
        }
        if (source['_amountString']) {
            this._amountString = new fhir.FhirElement(source._amountString);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["category"]) {
            results.push(...this.category.doModelValidation());
        }
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["_parameters"]) {
            results.push(...this._parameters.doModelValidation());
        }
        if (this["definingSubstanceReference"]) {
            results.push(...this.definingSubstanceReference.doModelValidation());
        }
        if (this["definingSubstanceCodeableConcept"]) {
            results.push(...this.definingSubstanceCodeableConcept.doModelValidation());
        }
        if (this["amountQuantity"]) {
            results.push(...this.amountQuantity.doModelValidation());
        }
        if (this["_amountString"]) {
            results.push(...this._amountString.doModelValidation());
        }
        return results;
    }
}
/**
 * The molecular weight or weight range (for proteins, polymers or nucleic acids).
 */
export class SubstanceSpecificationStructureIsotopeMolecularWeight extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationStructureIsotopeMolecularWeight - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['amount']) {
            this.amount = new fhir.Quantity(source.amount);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["method"]) {
            results.push(...this.method.doModelValidation());
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["amount"]) {
            results.push(...this.amount.doModelValidation());
        }
        return results;
    }
}
/**
 * Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.
 */
export class SubstanceSpecificationStructureIsotope extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationStructureIsotope - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['name']) {
            this.name = new fhir.CodeableConcept(source.name);
        }
        if (source['substitution']) {
            this.substitution = new fhir.CodeableConcept(source.substitution);
        }
        if (source['halfLife']) {
            this.halfLife = new fhir.Quantity(source.halfLife);
        }
        if (source['molecularWeight']) {
            this.molecularWeight = new fhir.SubstanceSpecificationStructureIsotopeMolecularWeight(source.molecularWeight);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["identifier"]) {
            results.push(...this.identifier.doModelValidation());
        }
        if (this["name"]) {
            results.push(...this.name.doModelValidation());
        }
        if (this["substitution"]) {
            results.push(...this.substitution.doModelValidation());
        }
        if (this["halfLife"]) {
            results.push(...this.halfLife.doModelValidation());
        }
        if (this["molecularWeight"]) {
            results.push(...this.molecularWeight.doModelValidation());
        }
        return results;
    }
}
/**
 * Molecular structural representation.
 */
export class SubstanceSpecificationStructureRepresentation extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationStructureRepresentation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['representation']) {
            this.representation = source.representation;
        }
        if (source['_representation']) {
            this._representation = new fhir.FhirElement(source._representation);
        }
        if (source['attachment']) {
            this.attachment = new fhir.Attachment(source.attachment);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["_representation"]) {
            results.push(...this._representation.doModelValidation());
        }
        if (this["attachment"]) {
            results.push(...this.attachment.doModelValidation());
        }
        return results;
    }
}
/**
 * Structural information.
 */
export class SubstanceSpecificationStructure extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationStructure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['stereochemistry']) {
            this.stereochemistry = new fhir.CodeableConcept(source.stereochemistry);
        }
        if (source['opticalActivity']) {
            this.opticalActivity = new fhir.CodeableConcept(source.opticalActivity);
        }
        if (source['molecularFormula']) {
            this.molecularFormula = source.molecularFormula;
        }
        if (source['_molecularFormula']) {
            this._molecularFormula = new fhir.FhirElement(source._molecularFormula);
        }
        if (source['molecularFormulaByMoiety']) {
            this.molecularFormulaByMoiety = source.molecularFormulaByMoiety;
        }
        if (source['_molecularFormulaByMoiety']) {
            this._molecularFormulaByMoiety = new fhir.FhirElement(source._molecularFormulaByMoiety);
        }
        if (source['isotope']) {
            this.isotope = source.isotope.map((x) => new fhir.SubstanceSpecificationStructureIsotope(x));
        }
        if (source['molecularWeight']) {
            this.molecularWeight = new fhir.SubstanceSpecificationStructureIsotopeMolecularWeight(source.molecularWeight);
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
        if (source['representation']) {
            this.representation = source.representation.map((x) => new fhir.SubstanceSpecificationStructureRepresentation(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["stereochemistry"]) {
            results.push(...this.stereochemistry.doModelValidation());
        }
        if (this["opticalActivity"]) {
            results.push(...this.opticalActivity.doModelValidation());
        }
        if (this["_molecularFormula"]) {
            results.push(...this._molecularFormula.doModelValidation());
        }
        if (this["_molecularFormulaByMoiety"]) {
            results.push(...this._molecularFormulaByMoiety.doModelValidation());
        }
        if (this["isotope"]) {
            this.isotope.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["molecularWeight"]) {
            results.push(...this.molecularWeight.doModelValidation());
        }
        if (this["source"]) {
            this.source.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["representation"]) {
            this.representation.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Codes associated with the substance.
 */
export class SubstanceSpecificationCode extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationCode - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        if (source['statusDate']) {
            this.statusDate = source.statusDate;
        }
        if (source['_statusDate']) {
            this._statusDate = new fhir.FhirElement(source._statusDate);
        }
        if (source['comment']) {
            this.comment = source.comment;
        }
        if (source['_comment']) {
            this._comment = new fhir.FhirElement(source._comment);
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["status"]) {
            results.push(...this.status.doModelValidation());
        }
        if (this["_statusDate"]) {
            results.push(...this._statusDate.doModelValidation());
        }
        if (this["_comment"]) {
            results.push(...this._comment.doModelValidation());
        }
        if (this["source"]) {
            this.source.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Details of the official nature of this name.
 */
export class SubstanceSpecificationNameOfficial extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationNameOfficial - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['authority']) {
            this.authority = new fhir.CodeableConcept(source.authority);
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        if (source['date']) {
            this.date = source.date;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["authority"]) {
            results.push(...this.authority.doModelValidation());
        }
        if (this["status"]) {
            results.push(...this.status.doModelValidation());
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        return results;
    }
}
/**
 * Names applicable to this substance.
 */
export class SubstanceSpecificationName extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationName - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['name']) {
            this.name = source.name;
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        if (source['preferred']) {
            this.preferred = source.preferred;
        }
        if (source['_preferred']) {
            this._preferred = new fhir.FhirElement(source._preferred);
        }
        if (source['language']) {
            this.language = source.language.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['domain']) {
            this.domain = source.domain.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['synonym']) {
            this.synonym = source.synonym.map((x) => new fhir.SubstanceSpecificationName(x));
        }
        if (source['translation']) {
            this.translation = source.translation.map((x) => new fhir.SubstanceSpecificationName(x));
        }
        if (source['official']) {
            this.official = source.official.map((x) => new fhir.SubstanceSpecificationNameOfficial(x));
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["name"]) {
            results.push(["name", 'Missing required element: SubstanceSpecification.name.name']);
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["status"]) {
            results.push(...this.status.doModelValidation());
        }
        if (this["_preferred"]) {
            results.push(...this._preferred.doModelValidation());
        }
        if (this["language"]) {
            this.language.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["domain"]) {
            this.domain.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["synonym"]) {
            this.synonym.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["translation"]) {
            this.translation.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["official"]) {
            this.official.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["source"]) {
            this.source.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * A link between this substance and another, with details of the relationship.
 */
export class SubstanceSpecificationRelationship extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationRelationship - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['substanceReference']) {
            this.substanceReference = new fhir.Reference(source.substanceReference);
        }
        if (source['substanceCodeableConcept']) {
            this.substanceCodeableConcept = new fhir.CodeableConcept(source.substanceCodeableConcept);
        }
        if (source['relationship']) {
            this.relationship = new fhir.CodeableConcept(source.relationship);
        }
        if (source['isDefining']) {
            this.isDefining = source.isDefining;
        }
        if (source['_isDefining']) {
            this._isDefining = new fhir.FhirElement(source._isDefining);
        }
        if (source['amountQuantity']) {
            this.amountQuantity = new fhir.Quantity(source.amountQuantity);
        }
        if (source['amountRange']) {
            this.amountRange = new fhir.Range(source.amountRange);
        }
        if (source['amountRatio']) {
            this.amountRatio = new fhir.Ratio(source.amountRatio);
        }
        if (source['amountString']) {
            this.amountString = source.amountString;
        }
        if (source['_amountString']) {
            this._amountString = new fhir.FhirElement(source._amountString);
        }
        if (source['amountRatioLowLimit']) {
            this.amountRatioLowLimit = new fhir.Ratio(source.amountRatioLowLimit);
        }
        if (source['amountType']) {
            this.amountType = new fhir.CodeableConcept(source.amountType);
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["substanceReference"]) {
            results.push(...this.substanceReference.doModelValidation());
        }
        if (this["substanceCodeableConcept"]) {
            results.push(...this.substanceCodeableConcept.doModelValidation());
        }
        if (this["relationship"]) {
            results.push(...this.relationship.doModelValidation());
        }
        if (this["_isDefining"]) {
            results.push(...this._isDefining.doModelValidation());
        }
        if (this["amountQuantity"]) {
            results.push(...this.amountQuantity.doModelValidation());
        }
        if (this["amountRange"]) {
            results.push(...this.amountRange.doModelValidation());
        }
        if (this["amountRatio"]) {
            results.push(...this.amountRatio.doModelValidation());
        }
        if (this["_amountString"]) {
            results.push(...this._amountString.doModelValidation());
        }
        if (this["amountRatioLowLimit"]) {
            results.push(...this.amountRatioLowLimit.doModelValidation());
        }
        if (this["amountType"]) {
            results.push(...this.amountType.doModelValidation());
        }
        if (this["source"]) {
            this.source.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * The detailed description of a substance, typically at a level beyond what is used for prescribing.
 */
export class SubstanceSpecification extends fhir.DomainResource {
    /**
     * Default constructor for SubstanceSpecification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'SubstanceSpecification';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        if (source['domain']) {
            this.domain = new fhir.CodeableConcept(source.domain);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
        if (source['comment']) {
            this.comment = source.comment;
        }
        if (source['_comment']) {
            this._comment = new fhir.FhirElement(source._comment);
        }
        if (source['moiety']) {
            this.moiety = source.moiety.map((x) => new fhir.SubstanceSpecificationMoiety(x));
        }
        if (source['property']) {
            this.property = source.property.map((x) => new fhir.SubstanceSpecificationProperty(x));
        }
        if (source['referenceInformation']) {
            this.referenceInformation = new fhir.Reference(source.referenceInformation);
        }
        if (source['structure']) {
            this.structure = new fhir.SubstanceSpecificationStructure(source.structure);
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.SubstanceSpecificationCode(x));
        }
        if (source['name']) {
            this.name = source.name.map((x) => new fhir.SubstanceSpecificationName(x));
        }
        if (source['molecularWeight']) {
            this.molecularWeight = source.molecularWeight.map((x) => new fhir.SubstanceSpecificationStructureIsotopeMolecularWeight(x));
        }
        if (source['relationship']) {
            this.relationship = source.relationship.map((x) => new fhir.SubstanceSpecificationRelationship(x));
        }
        if (source['nucleicAcid']) {
            this.nucleicAcid = new fhir.Reference(source.nucleicAcid);
        }
        if (source['polymer']) {
            this.polymer = new fhir.Reference(source.polymer);
        }
        if (source['protein']) {
            this.protein = new fhir.Reference(source.protein);
        }
        if (source['sourceMaterial']) {
            this.sourceMaterial = new fhir.Reference(source.sourceMaterial);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: SubstanceSpecification.resourceType']);
        }
        if (this["identifier"]) {
            results.push(...this.identifier.doModelValidation());
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["status"]) {
            results.push(...this.status.doModelValidation());
        }
        if (this["domain"]) {
            results.push(...this.domain.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["source"]) {
            this.source.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_comment"]) {
            results.push(...this._comment.doModelValidation());
        }
        if (this["moiety"]) {
            this.moiety.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["property"]) {
            this.property.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["referenceInformation"]) {
            results.push(...this.referenceInformation.doModelValidation());
        }
        if (this["structure"]) {
            results.push(...this.structure.doModelValidation());
        }
        if (this["code"]) {
            this.code.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["name"]) {
            this.name.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["molecularWeight"]) {
            this.molecularWeight.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["relationship"]) {
            this.relationship.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["nucleicAcid"]) {
            results.push(...this.nucleicAcid.doModelValidation());
        }
        if (this["polymer"]) {
            results.push(...this.polymer.doModelValidation());
        }
        if (this["protein"]) {
            results.push(...this.protein.doModelValidation());
        }
        if (this["sourceMaterial"]) {
            results.push(...this.sourceMaterial.doModelValidation());
        }
        return results;
    }
}
//# sourceMappingURL=SubstanceSpecification.js.map