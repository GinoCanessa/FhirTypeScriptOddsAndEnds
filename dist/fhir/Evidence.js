// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Evidence
import * as fhir from '../fhir.js';
import { PublicationStatusValueSet } from '../fhirValueSets/PublicationStatusValueSet.js';
import { DefinitionTopicValueSet } from '../fhirValueSets/DefinitionTopicValueSet.js';
/**
 * The Evidence resource describes the conditional state (population and any exposures being compared within the population) and outcome (if specified) that the knowledge (evidence, assertion, recommendation) is about.
 */
export class Evidence extends fhir.DomainResource {
    /**
     * Default constructor for Evidence - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Evidence';
        if (source['url']) {
            this.url = source.url;
        }
        if (source['_url']) {
            this._url = new fhir.FhirElement(source._url);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['version']) {
            this.version = source.version;
        }
        if (source['_version']) {
            this._version = new fhir.FhirElement(source._version);
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['title']) {
            this.title = source.title;
        }
        if (source['_title']) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source['shortTitle']) {
            this.shortTitle = source.shortTitle;
        }
        if (source['_shortTitle']) {
            this._shortTitle = new fhir.FhirElement(source._shortTitle);
        }
        if (source['subtitle']) {
            this.subtitle = source.subtitle;
        }
        if (source['_subtitle']) {
            this._subtitle = new fhir.FhirElement(source._subtitle);
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['date']) {
            this.date = source.date;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['publisher']) {
            this.publisher = source.publisher;
        }
        if (source['_publisher']) {
            this._publisher = new fhir.FhirElement(source._publisher);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['copyright']) {
            this.copyright = source.copyright;
        }
        if (source['_copyright']) {
            this._copyright = new fhir.FhirElement(source._copyright);
        }
        if (source['approvalDate']) {
            this.approvalDate = source.approvalDate;
        }
        if (source['_approvalDate']) {
            this._approvalDate = new fhir.FhirElement(source._approvalDate);
        }
        if (source['lastReviewDate']) {
            this.lastReviewDate = source.lastReviewDate;
        }
        if (source['_lastReviewDate']) {
            this._lastReviewDate = new fhir.FhirElement(source._lastReviewDate);
        }
        if (source['effectivePeriod']) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source['topic']) {
            this.topic = source.topic.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.ContactDetail(x));
        }
        if (source['editor']) {
            this.editor = source.editor.map((x) => new fhir.ContactDetail(x));
        }
        if (source['reviewer']) {
            this.reviewer = source.reviewer.map((x) => new fhir.ContactDetail(x));
        }
        if (source['endorser']) {
            this.endorser = source.endorser.map((x) => new fhir.ContactDetail(x));
        }
        if (source['relatedArtifact']) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x));
        }
        if (source['exposureBackground']) {
            this.exposureBackground = new fhir.Reference(source.exposureBackground);
        }
        else {
            this.exposureBackground = null;
        }
        if (source['exposureVariant']) {
            this.exposureVariant = source.exposureVariant.map((x) => new fhir.Reference(x));
        }
        if (source['outcome']) {
            this.outcome = source.outcome.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return PublicationStatusValueSet;
    }
    /**
     * Example-bound Value Set for topic
     */
    static topicExampleValueSet() {
        return DefinitionTopicValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: Evidence.resourceType']);
        }
        if (this["_url"]) {
            results.push(...this._url.doModelValidation());
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_version"]) {
            results.push(...this._version.doModelValidation());
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_title"]) {
            results.push(...this._title.doModelValidation());
        }
        if (this["_shortTitle"]) {
            results.push(...this._shortTitle.doModelValidation());
        }
        if (this["_subtitle"]) {
            results.push(...this._subtitle.doModelValidation());
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: Evidence.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["_publisher"]) {
            results.push(...this._publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_copyright"]) {
            results.push(...this._copyright.doModelValidation());
        }
        if (this["_approvalDate"]) {
            results.push(...this._approvalDate.doModelValidation());
        }
        if (this["_lastReviewDate"]) {
            results.push(...this._lastReviewDate.doModelValidation());
        }
        if (this["effectivePeriod"]) {
            results.push(...this.effectivePeriod.doModelValidation());
        }
        if (this["topic"]) {
            this.topic.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["author"]) {
            this.author.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["editor"]) {
            this.editor.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reviewer"]) {
            this.reviewer.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["endorser"]) {
            this.endorser.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["relatedArtifact"]) {
            this.relatedArtifact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["exposureBackground"]) {
            results.push(["exposureBackground", 'Missing required element: Evidence.exposureBackground']);
        }
        if (this["exposureBackground"]) {
            results.push(...this.exposureBackground.doModelValidation());
        }
        if (this["exposureVariant"]) {
            this.exposureVariant.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["outcome"]) {
            this.outcome.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=Evidence.js.map