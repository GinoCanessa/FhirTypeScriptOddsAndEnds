// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Procedure
import * as fhir from '../fhir.js';
import { PerformerRoleValueSet, } from '../fhirValueSets/PerformerRoleValueSet.js';
import { DeviceActionValueSet, } from '../fhirValueSets/DeviceActionValueSet.js';
import { EventStatusValueSet, } from '../fhirValueSets/EventStatusValueSet.js';
import { ProcedureNotPerformedReasonValueSet, } from '../fhirValueSets/ProcedureNotPerformedReasonValueSet.js';
import { ProcedureCategoryValueSet, } from '../fhirValueSets/ProcedureCategoryValueSet.js';
import { ProcedureCodeValueSet, } from '../fhirValueSets/ProcedureCodeValueSet.js';
import { ProcedureReasonValueSet, } from '../fhirValueSets/ProcedureReasonValueSet.js';
import { BodySiteValueSet, } from '../fhirValueSets/BodySiteValueSet.js';
import { ProcedureOutcomeValueSet, } from '../fhirValueSets/ProcedureOutcomeValueSet.js';
import { ConditionCodeValueSet, } from '../fhirValueSets/ConditionCodeValueSet.js';
import { ProcedureFollowupValueSet, } from '../fhirValueSets/ProcedureFollowupValueSet.js';
import { DeviceKindValueSet, } from '../fhirValueSets/DeviceKindValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Limited to "real" people rather than equipment.
 */
export class ProcedurePerformer extends fhir.BackboneElement {
    /**
     * Default constructor for ProcedurePerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ProcedurePerformer';
        if (source['function']) {
            this.function = new fhir.CodeableConcept(source.function);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        else {
            this.actor = null;
        }
        if (source['onBehalfOf']) {
            this.onBehalfOf = new fhir.Reference(source.onBehalfOf);
        }
    }
    /**
     * Example-bound Value Set for function
     */
    static functionExampleValueSet() {
        return PerformerRoleValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["function"]) {
            outcome.issue.push(...this.function.doModelValidation().issue);
        }
        if (!this['actor']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property actor:fhir.Reference fhir: Procedure.performer.actor:Reference", }));
        }
        if (this["actor"]) {
            outcome.issue.push(...this.actor.doModelValidation().issue);
        }
        if (this["onBehalfOf"]) {
            outcome.issue.push(...this.onBehalfOf.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
 */
export class ProcedureFocalDevice extends fhir.BackboneElement {
    /**
     * Default constructor for ProcedureFocalDevice - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ProcedureFocalDevice';
        if (source['action']) {
            this.action = new fhir.CodeableConcept(source.action);
        }
        if (source['manipulated']) {
            this.manipulated = new fhir.Reference(source.manipulated);
        }
        else {
            this.manipulated = null;
        }
    }
    /**
     * Preferred-bound Value Set for action
     */
    static actionPreferredValueSet() {
        return DeviceActionValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["action"]) {
            outcome.issue.push(...this.action.doModelValidation().issue);
        }
        if (!this['manipulated']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property manipulated:fhir.Reference fhir: Procedure.focalDevice.manipulated:Reference", }));
        }
        if (this["manipulated"]) {
            outcome.issue.push(...this.manipulated.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * An action that is or was performed on or for a patient. This can be a physical intervention like an operation, or less invasive like long term services, counseling, or hypnotherapy.
 */
export class Procedure extends fhir.DomainResource {
    /**
     * Default constructor for Procedure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'Procedure';
        /**
         * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and Person resource instances might share the same social insurance number.
         */
        this.identifier = [];
        /**
         * The URL pointing to a FHIR-defined protocol, guideline, order set or other definition that is adhered to in whole or in part by this Procedure.
         */
        this.instantiatesCanonical = [];
        /**
         * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
         */
        this.instantiatesUri = [];
        /**
         * A reference to a resource that contains details of the request for this procedure.
         */
        this.basedOn = [];
        /**
         * The MedicationAdministration resource has a partOf reference to Procedure, but this is not a circular reference.   For example, the anesthesia MedicationAdministration is part of the surgical Procedure (MedicationAdministration.partOf = Procedure).  For example, the procedure to insert the IV port for an IV medication administration is part of the medication administration (Procedure.partOf = MedicationAdministration).
         */
        this.partOf = [];
        this.__performedIsChoice = true;
        /**
         * Limited to "real" people rather than equipment.
         */
        this.performer = [];
        /**
         * Use Procedure.reasonCode when a code sufficiently describes the reason.  Use Procedure.reasonReference when referencing a resource, which allows more information to be conveyed, such as onset date. Procedure.reasonCode and Procedure.reasonReference are not meant to be duplicative.  For a single reason, either Procedure.reasonCode or Procedure.reasonReference can be used.  Procedure.reasonCode may be a summary code, or Procedure.reasonReference may be used to reference a very precise definition of the reason using Condition | Observation | Procedure | DiagnosticReport | DocumentReference.  Both Procedure.reasonCode and Procedure.reasonReference can be used if they are describing different reasons for the procedure.
         */
        this.reasonCode = [];
        /**
         * It is possible for a procedure to be a reason (such as C-Section) for another procedure (such as an epidural). Other examples include endoscopy for dilatation and biopsy (a combination of diagnostic and therapeutic use).
         * Use Procedure.reasonCode when a code sufficiently describes the reason.  Use Procedure.reasonReference when referencing a resource, which allows more information to be conveyed, such as onset date. Procedure.reasonCode and Procedure.reasonReference are not meant to be duplicative.  For a single reason, either Procedure.reasonCode or Procedure.reasonReference can be used.  Procedure.reasonCode may be a summary code, or Procedure.reasonReference may be used to reference a very precise definition of the reason using Condition | Observation | Procedure | DiagnosticReport | DocumentReference.  Both Procedure.reasonCode and Procedure.reasonReference can be used if they are describing different reasons for the procedure.
         */
        this.reasonReference = [];
        /**
         * If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [procedure-targetbodystructure](extension-procedure-targetbodystructure.html).
         */
        this.bodySite = [];
        /**
         * There could potentially be multiple reports - e.g. if this was a procedure which took multiple biopsies resulting in a number of anatomical pathology reports.
         */
        this.report = [];
        /**
         * If complications are only expressed by the narrative text, they can be captured using the CodeableConcept.text.
         */
        this.complication = [];
        /**
         * Any complications that occurred during the procedure, or in the immediate post-performance period.
         */
        this.complicationDetail = [];
        /**
         * If the procedure required specific follow up - e.g. removal of sutures. The follow up may be represented as a simple note or could potentially be more complex, in which case the CarePlan resource can be used.
         */
        this.followUp = [];
        /**
         * Any other notes and comments about the procedure.
         */
        this.note = [];
        /**
         * A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
         */
        this.focalDevice = [];
        /**
         * For devices actually implanted or removed, use Procedure.device.
         */
        this.usedReference = [];
        /**
         * For devices actually implanted or removed, use Procedure.device.
         */
        this.usedCode = [];
        this.resourceType = 'Procedure';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['instantiatesCanonical']) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        if (source['instantiatesUri']) {
            this.instantiatesUri = source.instantiatesUri.map((x) => new fhir.FhirUri({ value: x }));
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['statusReason']) {
            this.statusReason = new fhir.CodeableConcept(source.statusReason);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['performed']) {
            this.performed = source.performed;
        }
        else if (source['performedDateTime']) {
            this.performed = new fhir.FhirDateTime({ value: source.performedDateTime });
        }
        else if (source['performedPeriod']) {
            this.performed = new fhir.Period(source.performedPeriod);
        }
        else if (source['performedString']) {
            this.performed = new fhir.FhirString({ value: source.performedString });
        }
        else if (source['performedAge']) {
            this.performed = new fhir.Age(source.performedAge);
        }
        else if (source['performedRange']) {
            this.performed = new fhir.Range(source.performedRange);
        }
        if (source['recorder']) {
            this.recorder = new fhir.Reference(source.recorder);
        }
        if (source['asserter']) {
            this.asserter = new fhir.Reference(source.asserter);
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.ProcedurePerformer(x));
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source['bodySite']) {
            this.bodySite = source.bodySite.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['outcome']) {
            this.outcome = new fhir.CodeableConcept(source.outcome);
        }
        if (source['report']) {
            this.report = source.report.map((x) => new fhir.Reference(x));
        }
        if (source['complication']) {
            this.complication = source.complication.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['complicationDetail']) {
            this.complicationDetail = source.complicationDetail.map((x) => new fhir.Reference(x));
        }
        if (source['followUp']) {
            this.followUp = source.followUp.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['focalDevice']) {
            this.focalDevice = source.focalDevice.map((x) => new fhir.ProcedureFocalDevice(x));
        }
        if (source['usedReference']) {
            this.usedReference = source.usedReference.map((x) => new fhir.Reference(x));
        }
        if (source['usedCode']) {
            this.usedCode = source.usedCode.map((x) => new fhir.CodeableConcept(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return EventStatusValueSet;
    }
    /**
     * Example-bound Value Set for statusReason
     */
    static statusReasonExampleValueSet() {
        return ProcedureNotPerformedReasonValueSet;
    }
    /**
     * Example-bound Value Set for category
     */
    static categoryExampleValueSet() {
        return ProcedureCategoryValueSet;
    }
    /**
     * Example-bound Value Set for code
     */
    static codeExampleValueSet() {
        return ProcedureCodeValueSet;
    }
    /**
     * Example-bound Value Set for reasonCode
     */
    static reasonCodeExampleValueSet() {
        return ProcedureReasonValueSet;
    }
    /**
     * Example-bound Value Set for bodySite
     */
    static bodySiteExampleValueSet() {
        return BodySiteValueSet;
    }
    /**
     * Example-bound Value Set for outcome
     */
    static outcomeExampleValueSet() {
        return ProcedureOutcomeValueSet;
    }
    /**
     * Example-bound Value Set for complication
     */
    static complicationExampleValueSet() {
        return ConditionCodeValueSet;
    }
    /**
     * Example-bound Value Set for followUp
     */
    static followUpExampleValueSet() {
        return ProcedureFollowupValueSet;
    }
    /**
     * Example-bound Value Set for usedCode
     */
    static usedCodeExampleValueSet() {
        return DeviceKindValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'Procedure' fhir: Procedure.resourceType:'Procedure'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["instantiatesCanonical"]) {
            this.instantiatesCanonical.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["instantiatesUri"]) {
            this.instantiatesUri.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["partOf"]) {
            this.partOf.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:EventStatusValueSetEnum fhir: Procedure.status:code", }));
        }
        if (this["statusReason"]) {
            outcome.issue.push(...this.statusReason.doModelValidation().issue);
        }
        if (this["category"]) {
            outcome.issue.push(...this.category.doModelValidation().issue);
        }
        if (this["code"]) {
            outcome.issue.push(...this.code.doModelValidation().issue);
        }
        if (!this['subject']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property subject:fhir.Reference fhir: Procedure.subject:Reference", }));
        }
        if (this["subject"]) {
            outcome.issue.push(...this.subject.doModelValidation().issue);
        }
        if (this["encounter"]) {
            outcome.issue.push(...this.encounter.doModelValidation().issue);
        }
        if (this["recorder"]) {
            outcome.issue.push(...this.recorder.doModelValidation().issue);
        }
        if (this["asserter"]) {
            outcome.issue.push(...this.asserter.doModelValidation().issue);
        }
        if (this["performer"]) {
            this.performer.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["location"]) {
            outcome.issue.push(...this.location.doModelValidation().issue);
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["bodySite"]) {
            this.bodySite.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["outcome"]) {
            outcome.issue.push(...this.outcome.doModelValidation().issue);
        }
        if (this["report"]) {
            this.report.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["complication"]) {
            this.complication.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["complicationDetail"]) {
            this.complicationDetail.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["followUp"]) {
            this.followUp.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["focalDevice"]) {
            this.focalDevice.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["usedReference"]) {
            this.usedReference.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["usedCode"]) {
            this.usedCode.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=Procedure.js.map