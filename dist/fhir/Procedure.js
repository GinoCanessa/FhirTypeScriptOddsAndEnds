// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Limited to "real" people rather than equipment.
 */
export class ProcedurePerformer extends fhir.BackboneElement {
    /**
     * Default constructor for ProcedurePerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.actor = null;
        if (source["actor"]) {
            this.actor = new fhir.Reference(source.actor);
        }
        if (this.actor === undefined) {
            this.actor = null;
        }
        if (source["function"]) {
            this.function = new fhir.CodeableConcept(source.function);
        }
        if (source["onBehalfOf"]) {
            this.onBehalfOf = new fhir.Reference(source.onBehalfOf);
        }
    }
    /**
     * Check if the current ProcedurePerformer contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["actor"] === undefined) {
            missingElements.push("actor");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ProcedurePerformer from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ProcedurePerformer(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ProcedurePerformer is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
 */
export class ProcedureFocalDevice extends fhir.BackboneElement {
    /**
     * Default constructor for ProcedureFocalDevice - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["action"]) {
            this.action = new fhir.CodeableConcept(source.action);
        }
        this.manipulated = null;
        if (source["manipulated"]) {
            this.manipulated = new fhir.Reference(source.manipulated);
        }
        if (this.manipulated === undefined) {
            this.manipulated = null;
        }
    }
    /**
     * Check if the current ProcedureFocalDevice contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["manipulated"] === undefined) {
            missingElements.push("manipulated");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ProcedureFocalDevice from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ProcedureFocalDevice(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ProcedureFocalDevice is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * An action that is or was performed on or for a patient. This can be a physical intervention like an operation, or less invasive like long term services, counseling, or hypnotherapy.
 */
export class Procedure extends fhir.DomainResource {
    /**
     * Default constructor for Procedure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Procedure';
        if (source["asserter"]) {
            this.asserter = new fhir.Reference(source.asserter);
        }
        if (source["basedOn"]) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source["bodySite"]) {
            this.bodySite = source.bodySite.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["category"]) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source["complication"]) {
            this.complication = source.complication.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["complicationDetail"]) {
            this.complicationDetail = source.complicationDetail.map((x) => new fhir.Reference(x));
        }
        if (source["encounter"]) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source["focalDevice"]) {
            this.focalDevice = source.focalDevice.map((x) => new fhir.ProcedureFocalDevice(x));
        }
        if (source["followUp"]) {
            this.followUp = source.followUp.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["instantiatesCanonical"]) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => (x));
        }
        if (source["_instantiatesCanonical"]) {
            this._instantiatesCanonical = source._instantiatesCanonical.map((x) => new fhir.FhirElement(x));
        }
        if (source["instantiatesUri"]) {
            this.instantiatesUri = source.instantiatesUri.map((x) => (x));
        }
        if (source["_instantiatesUri"]) {
            this._instantiatesUri = source._instantiatesUri.map((x) => new fhir.FhirElement(x));
        }
        if (source["location"]) {
            this.location = new fhir.Reference(source.location);
        }
        if (source["note"]) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source["outcome"]) {
            this.outcome = new fhir.CodeableConcept(source.outcome);
        }
        if (source["partOf"]) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        if (source["performedDateTime"]) {
            this.performedDateTime = source.performedDateTime;
        }
        if (source["_performedDateTime"]) {
            this._performedDateTime = new fhir.FhirElement(source._performedDateTime);
        }
        if (source["performedPeriod"]) {
            this.performedPeriod = new fhir.Period(source.performedPeriod);
        }
        if (source["performedString"]) {
            this.performedString = source.performedString;
        }
        if (source["_performedString"]) {
            this._performedString = new fhir.FhirElement(source._performedString);
        }
        if (source["performedAge"]) {
            this.performedAge = new fhir.Age(source.performedAge);
        }
        if (source["performedRange"]) {
            this.performedRange = new fhir.Range(source.performedRange);
        }
        if (source["performer"]) {
            this.performer = source.performer.map((x) => new fhir.ProcedurePerformer(x));
        }
        if (source["reasonCode"]) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["reasonReference"]) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source["recorder"]) {
            this.recorder = new fhir.Reference(source.recorder);
        }
        if (source["report"]) {
            this.report = source.report.map((x) => new fhir.Reference(x));
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["statusReason"]) {
            this.statusReason = new fhir.CodeableConcept(source.statusReason);
        }
        this.subject = null;
        if (source["subject"]) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (this.subject === undefined) {
            this.subject = null;
        }
        if (source["usedCode"]) {
            this.usedCode = source.usedCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["usedReference"]) {
            this.usedReference = source.usedReference.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Check if the current Procedure contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["subject"] === undefined) {
            missingElements.push("subject");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Procedure from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new Procedure(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Procedure is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the Procedure.status field
 */
export var ProcedureStatusEnum;
(function (ProcedureStatusEnum) {
    ProcedureStatusEnum["PREPARATION"] = "preparation";
    ProcedureStatusEnum["IN_PROGRESS"] = "in-progress";
    ProcedureStatusEnum["NOT_DONE"] = "not-done";
    ProcedureStatusEnum["ON_HOLD"] = "on-hold";
    ProcedureStatusEnum["STOPPED"] = "stopped";
    ProcedureStatusEnum["COMPLETED"] = "completed";
    ProcedureStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    ProcedureStatusEnum["UNKNOWN"] = "unknown";
})(ProcedureStatusEnum || (ProcedureStatusEnum = {}));
//# sourceMappingURL=Procedure.js.map