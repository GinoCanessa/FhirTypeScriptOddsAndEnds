// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Procedure
import * as fhir from '../fhir.js';
import { PerformerRoleValueSet } from '../fhirValueSets/PerformerRoleValueSet.js';
import { DeviceActionValueSet } from '../fhirValueSets/DeviceActionValueSet.js';
import { EventStatusValueSet } from '../fhirValueSets/EventStatusValueSet.js';
import { ProcedureNotPerformedReasonValueSet } from '../fhirValueSets/ProcedureNotPerformedReasonValueSet.js';
import { ProcedureCategoryValueSet } from '../fhirValueSets/ProcedureCategoryValueSet.js';
import { ProcedureCodeValueSet } from '../fhirValueSets/ProcedureCodeValueSet.js';
import { ProcedureReasonValueSet } from '../fhirValueSets/ProcedureReasonValueSet.js';
import { BodySiteValueSet } from '../fhirValueSets/BodySiteValueSet.js';
import { ProcedureOutcomeValueSet } from '../fhirValueSets/ProcedureOutcomeValueSet.js';
import { ConditionCodeValueSet } from '../fhirValueSets/ConditionCodeValueSet.js';
import { ProcedureFollowupValueSet } from '../fhirValueSets/ProcedureFollowupValueSet.js';
import { DeviceKindValueSet } from '../fhirValueSets/DeviceKindValueSet.js';
/**
 * Limited to "real" people rather than equipment.
 */
export class ProcedurePerformer extends fhir.BackboneElement {
    /**
     * Default constructor for ProcedurePerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['function']) {
            this.function = new fhir.CodeableConcept(source.function);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        else {
            this.actor = null;
        }
        if (source['onBehalfOf']) {
            this.onBehalfOf = new fhir.Reference(source.onBehalfOf);
        }
    }
    /**
     * Example-bound Value Set for function
     */
    functionExampleValueSet() {
        return PerformerRoleValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["function"]) {
            results.push(...this.function.doModelValidation());
        }
        if (!this["actor"]) {
            results.push(["actor", 'Missing required element: Procedure.performer.actor']);
        }
        if (this["actor"]) {
            results.push(...this.actor.doModelValidation());
        }
        if (this["onBehalfOf"]) {
            results.push(...this.onBehalfOf.doModelValidation());
        }
        return results;
    }
}
/**
 * A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
 */
export class ProcedureFocalDevice extends fhir.BackboneElement {
    /**
     * Default constructor for ProcedureFocalDevice - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['action']) {
            this.action = new fhir.CodeableConcept(source.action);
        }
        if (source['manipulated']) {
            this.manipulated = new fhir.Reference(source.manipulated);
        }
        else {
            this.manipulated = null;
        }
    }
    /**
     * Preferred-bound Value Set for action
     */
    actionPreferredValueSet() {
        return DeviceActionValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["action"]) {
            results.push(...this.action.doModelValidation());
        }
        if (!this["manipulated"]) {
            results.push(["manipulated", 'Missing required element: Procedure.focalDevice.manipulated']);
        }
        if (this["manipulated"]) {
            results.push(...this.manipulated.doModelValidation());
        }
        return results;
    }
}
/**
 * An action that is or was performed on or for a patient. This can be a physical intervention like an operation, or less invasive like long term services, counseling, or hypnotherapy.
 */
export class Procedure extends fhir.DomainResource {
    /**
     * Default constructor for Procedure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Procedure';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['instantiatesCanonical']) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => (x));
        }
        if (source['_instantiatesCanonical']) {
            this._instantiatesCanonical = source._instantiatesCanonical.map((x) => new fhir.FhirElement(x));
        }
        if (source['instantiatesUri']) {
            this.instantiatesUri = source.instantiatesUri.map((x) => (x));
        }
        if (source['_instantiatesUri']) {
            this._instantiatesUri = source._instantiatesUri.map((x) => new fhir.FhirElement(x));
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['statusReason']) {
            this.statusReason = new fhir.CodeableConcept(source.statusReason);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['performedDateTime']) {
            this.performedDateTime = source.performedDateTime;
        }
        if (source['_performedDateTime']) {
            this._performedDateTime = new fhir.FhirElement(source._performedDateTime);
        }
        if (source['performedPeriod']) {
            this.performedPeriod = new fhir.Period(source.performedPeriod);
        }
        if (source['performedString']) {
            this.performedString = source.performedString;
        }
        if (source['_performedString']) {
            this._performedString = new fhir.FhirElement(source._performedString);
        }
        if (source['performedAge']) {
            this.performedAge = new fhir.Age(source.performedAge);
        }
        if (source['performedRange']) {
            this.performedRange = new fhir.Range(source.performedRange);
        }
        if (source['recorder']) {
            this.recorder = new fhir.Reference(source.recorder);
        }
        if (source['asserter']) {
            this.asserter = new fhir.Reference(source.asserter);
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.ProcedurePerformer(x));
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source['bodySite']) {
            this.bodySite = source.bodySite.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['outcome']) {
            this.outcome = new fhir.CodeableConcept(source.outcome);
        }
        if (source['report']) {
            this.report = source.report.map((x) => new fhir.Reference(x));
        }
        if (source['complication']) {
            this.complication = source.complication.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['complicationDetail']) {
            this.complicationDetail = source.complicationDetail.map((x) => new fhir.Reference(x));
        }
        if (source['followUp']) {
            this.followUp = source.followUp.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['focalDevice']) {
            this.focalDevice = source.focalDevice.map((x) => new fhir.ProcedureFocalDevice(x));
        }
        if (source['usedReference']) {
            this.usedReference = source.usedReference.map((x) => new fhir.Reference(x));
        }
        if (source['usedCode']) {
            this.usedCode = source.usedCode.map((x) => new fhir.CodeableConcept(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return EventStatusValueSet;
    }
    /**
     * Example-bound Value Set for statusReason
     */
    statusReasonExampleValueSet() {
        return ProcedureNotPerformedReasonValueSet;
    }
    /**
     * Example-bound Value Set for category
     */
    categoryExampleValueSet() {
        return ProcedureCategoryValueSet;
    }
    /**
     * Example-bound Value Set for code
     */
    codeExampleValueSet() {
        return ProcedureCodeValueSet;
    }
    /**
     * Example-bound Value Set for reasonCode
     */
    reasonCodeExampleValueSet() {
        return ProcedureReasonValueSet;
    }
    /**
     * Example-bound Value Set for bodySite
     */
    bodySiteExampleValueSet() {
        return BodySiteValueSet;
    }
    /**
     * Example-bound Value Set for outcome
     */
    outcomeExampleValueSet() {
        return ProcedureOutcomeValueSet;
    }
    /**
     * Example-bound Value Set for complication
     */
    complicationExampleValueSet() {
        return ConditionCodeValueSet;
    }
    /**
     * Example-bound Value Set for followUp
     */
    followUpExampleValueSet() {
        return ProcedureFollowupValueSet;
    }
    /**
     * Example-bound Value Set for usedCode
     */
    usedCodeExampleValueSet() {
        return DeviceKindValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: Procedure.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_instantiatesCanonical"]) {
            this._instantiatesCanonical.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_instantiatesUri"]) {
            this._instantiatesUri.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["partOf"]) {
            this.partOf.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: Procedure.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["statusReason"]) {
            results.push(...this.statusReason.doModelValidation());
        }
        if (this["category"]) {
            results.push(...this.category.doModelValidation());
        }
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (!this["subject"]) {
            results.push(["subject", 'Missing required element: Procedure.subject']);
        }
        if (this["subject"]) {
            results.push(...this.subject.doModelValidation());
        }
        if (this["encounter"]) {
            results.push(...this.encounter.doModelValidation());
        }
        if (this["_performedDateTime"]) {
            results.push(...this._performedDateTime.doModelValidation());
        }
        if (this["performedPeriod"]) {
            results.push(...this.performedPeriod.doModelValidation());
        }
        if (this["_performedString"]) {
            results.push(...this._performedString.doModelValidation());
        }
        if (this["performedAge"]) {
            results.push(...this.performedAge.doModelValidation());
        }
        if (this["performedRange"]) {
            results.push(...this.performedRange.doModelValidation());
        }
        if (this["recorder"]) {
            results.push(...this.recorder.doModelValidation());
        }
        if (this["asserter"]) {
            results.push(...this.asserter.doModelValidation());
        }
        if (this["performer"]) {
            this.performer.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["location"]) {
            results.push(...this.location.doModelValidation());
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["bodySite"]) {
            this.bodySite.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["outcome"]) {
            results.push(...this.outcome.doModelValidation());
        }
        if (this["report"]) {
            this.report.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["complication"]) {
            this.complication.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["complicationDetail"]) {
            this.complicationDetail.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["followUp"]) {
            this.followUp.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["focalDevice"]) {
            this.focalDevice.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["usedReference"]) {
            this.usedReference.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["usedCode"]) {
            this.usedCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=Procedure.js.map