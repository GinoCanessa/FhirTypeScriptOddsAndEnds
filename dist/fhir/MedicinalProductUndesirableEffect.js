// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Describe the undesirable effects of the medicinal product.
 */
export class MedicinalProductUndesirableEffect extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProductUndesirableEffect - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'MedicinalProductUndesirableEffect';
        if (source["classification"]) {
            this.classification = new fhir.CodeableConcept(source.classification);
        }
        if (source["frequencyOfOccurrence"]) {
            this.frequencyOfOccurrence = new fhir.CodeableConcept(source.frequencyOfOccurrence);
        }
        if (source["population"]) {
            this.population = source.population.map((x) => new fhir.Population(x));
        }
        if (source["subject"]) {
            this.subject = source.subject.map((x) => new fhir.Reference(x));
        }
        if (source["symptomConditionEffect"]) {
            this.symptomConditionEffect = new fhir.CodeableConcept(source.symptomConditionEffect);
        }
    }
    /**
     * Check if the current MedicinalProductUndesirableEffect contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicinalProductUndesirableEffect from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MedicinalProductUndesirableEffect(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProductUndesirableEffect is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
//# sourceMappingURL=MedicinalProductUndesirableEffect.js.map