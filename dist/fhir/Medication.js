// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * The ingredients need not be a complete list.  If an ingredient is not specified, this does not indicate whether an ingredient is present or absent.  If an ingredient is specified it does not mean that all ingredients are specified.  It is possible to specify both inactive and active ingredients.
 */
export class MedicationIngredient extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationIngredient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["isActive"]) {
            this.isActive = source.isActive;
        }
        if (source["_isActive"]) {
            this._isActive = new fhir.FhirElement(source._isActive);
        }
        if (source["itemCodeableConcept"]) {
            this.itemCodeableConcept = new fhir.CodeableConcept(source.itemCodeableConcept);
        }
        if (source["itemReference"]) {
            this.itemReference = new fhir.Reference(source.itemReference);
        }
        if (source["strength"]) {
            this.strength = new fhir.Ratio(source.strength);
        }
    }
    /**
     * Check if the current MedicationIngredient contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicationIngredient from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new MedicationIngredient(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationIngredient is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Information that only applies to packages (not products).
 */
export class MedicationBatch extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationBatch - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["expirationDate"]) {
            this.expirationDate = source.expirationDate;
        }
        if (source["_expirationDate"]) {
            this._expirationDate = new fhir.FhirElement(source._expirationDate);
        }
        if (source["lotNumber"]) {
            this.lotNumber = source.lotNumber;
        }
        if (source["_lotNumber"]) {
            this._lotNumber = new fhir.FhirElement(source._lotNumber);
        }
    }
    /**
     * Check if the current MedicationBatch contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicationBatch from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new MedicationBatch(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationBatch is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * This resource is primarily used for the identification and definition of a medication for the purposes of prescribing, dispensing, and administering a medication as well as for making statements about medication use.
 */
export class Medication extends fhir.DomainResource {
    /**
     * Default constructor for Medication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Medication';
        if (source["amount"]) {
            this.amount = new fhir.Ratio(source.amount);
        }
        if (source["batch"]) {
            this.batch = new fhir.MedicationBatch(source.batch);
        }
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source["form"]) {
            this.form = new fhir.CodeableConcept(source.form);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["ingredient"]) {
            this.ingredient = source.ingredient.map((x) => new fhir.MedicationIngredient(x));
        }
        if (source["manufacturer"]) {
            this.manufacturer = new fhir.Reference(source.manufacturer);
        }
        if (source["status"]) {
            this.status = source.status;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
    }
    /**
     * Check if the current Medication contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Medication from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new Medication(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `Medication is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the Medication.status field
 */
export var MedicationStatusEnum;
(function (MedicationStatusEnum) {
    MedicationStatusEnum["ACTIVE"] = "active";
    MedicationStatusEnum["INACTIVE"] = "inactive";
    MedicationStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(MedicationStatusEnum || (MedicationStatusEnum = {}));
//# sourceMappingURL=Medication.js.map