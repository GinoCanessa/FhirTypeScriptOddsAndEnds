// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Supporting evidence or manifestations that provide the basis for identifying the detected issue such as a GuidanceResponse or MeasureReport.
 */
export class DetectedIssueEvidence extends fhir.BackboneElement {
    /**
     * Default constructor for DetectedIssueEvidence - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["code"]) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["detail"]) {
            this.detail = source.detail.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Check if the current DetectedIssueEvidence contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a DetectedIssueEvidence from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new DetectedIssueEvidence(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `DetectedIssueEvidence is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Indicates an action that has been taken or is committed to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
 */
export class DetectedIssueMitigation extends fhir.BackboneElement {
    /**
     * Default constructor for DetectedIssueMitigation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.action = null;
        if (source["action"]) {
            this.action = new fhir.CodeableConcept(source.action);
        }
        if (this.action === undefined) {
            this.action = null;
        }
        if (source["author"]) {
            this.author = new fhir.Reference(source.author);
        }
        if (source["date"]) {
            this.date = source.date;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
    }
    /**
     * Check if the current DetectedIssueMitigation contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["action"] === undefined) {
            missingElements.push("action");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a DetectedIssueMitigation from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new DetectedIssueMitigation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `DetectedIssueMitigation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.
 */
export class DetectedIssue extends fhir.DomainResource {
    /**
     * Default constructor for DetectedIssue - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'DetectedIssue';
        if (source["author"]) {
            this.author = new fhir.Reference(source.author);
        }
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source["detail"]) {
            this.detail = source.detail;
        }
        if (source["_detail"]) {
            this._detail = new fhir.FhirElement(source._detail);
        }
        if (source["evidence"]) {
            this.evidence = source.evidence.map((x) => new fhir.DetectedIssueEvidence(x));
        }
        if (source["identifiedDateTime"]) {
            this.identifiedDateTime = source.identifiedDateTime;
        }
        if (source["_identifiedDateTime"]) {
            this._identifiedDateTime = new fhir.FhirElement(source._identifiedDateTime);
        }
        if (source["identifiedPeriod"]) {
            this.identifiedPeriod = new fhir.Period(source.identifiedPeriod);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["implicated"]) {
            this.implicated = source.implicated.map((x) => new fhir.Reference(x));
        }
        if (source["mitigation"]) {
            this.mitigation = source.mitigation.map((x) => new fhir.DetectedIssueMitigation(x));
        }
        if (source["patient"]) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (source["reference"]) {
            this.reference = source.reference;
        }
        if (source["_reference"]) {
            this._reference = new fhir.FhirElement(source._reference);
        }
        if (source["severity"]) {
            this.severity = source.severity;
        }
        if (source["_severity"]) {
            this._severity = new fhir.FhirElement(source._severity);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
    }
    /**
     * Check if the current DetectedIssue contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a DetectedIssue from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new DetectedIssue(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `DetectedIssue is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the DetectedIssue.severity field
 */
export var DetectedIssueSeverityEnum;
(function (DetectedIssueSeverityEnum) {
    DetectedIssueSeverityEnum["HIGH"] = "high";
    DetectedIssueSeverityEnum["MODERATE"] = "moderate";
    DetectedIssueSeverityEnum["LOW"] = "low";
})(DetectedIssueSeverityEnum || (DetectedIssueSeverityEnum = {}));
/**
 * Code Values for the DetectedIssue.status field
 */
export var DetectedIssueStatusEnum;
(function (DetectedIssueStatusEnum) {
    DetectedIssueStatusEnum["REGISTERED"] = "registered";
    DetectedIssueStatusEnum["PRELIMINARY"] = "preliminary";
    DetectedIssueStatusEnum["FINAL"] = "final";
    DetectedIssueStatusEnum["AMENDED"] = "amended";
    DetectedIssueStatusEnum["CORRECTED"] = "corrected";
    DetectedIssueStatusEnum["CANCELLED"] = "cancelled";
    DetectedIssueStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    DetectedIssueStatusEnum["UNKNOWN"] = "unknown";
})(DetectedIssueStatusEnum || (DetectedIssueStatusEnum = {}));
//# sourceMappingURL=DetectedIssue.js.map