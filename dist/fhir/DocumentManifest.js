// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * May be identifiers or resources that caused the DocumentManifest to be created.
 */
export class DocumentManifestRelated extends fhir.BackboneElement {
    /**
     * Default constructor for DocumentManifestRelated - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["identifier"]) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source["ref"]) {
            this.ref = new fhir.Reference(source.ref);
        }
    }
    /**
     * Check if the current DocumentManifestRelated contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a DocumentManifestRelated from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new DocumentManifestRelated(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `DocumentManifestRelated is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A collection of documents compiled for a purpose together with metadata that applies to the collection.
 */
export class DocumentManifest extends fhir.DomainResource {
    /**
     * Default constructor for DocumentManifest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'DocumentManifest';
        if (source["author"]) {
            this.author = source.author.map((x) => new fhir.Reference(x));
        }
        this.content = null;
        if (source["content"]) {
            this.content = source.content.map((x) => new fhir.Reference(x));
        }
        if (this.content === undefined) {
            this.content = null;
        }
        if (source["created"]) {
            this.created = source.created;
        }
        if (source["_created"]) {
            this._created = new fhir.FhirElement(source._created);
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["masterIdentifier"]) {
            this.masterIdentifier = new fhir.Identifier(source.masterIdentifier);
        }
        if (source["recipient"]) {
            this.recipient = source.recipient.map((x) => new fhir.Reference(x));
        }
        if (source["related"]) {
            this.related = source.related.map((x) => new fhir.DocumentManifestRelated(x));
        }
        if (source["source"]) {
            this.source = source.source;
        }
        if (source["_source"]) {
            this._source = new fhir.FhirElement(source._source);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["subject"]) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current DocumentManifest contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if ((!this["content"]) || (this["content"].length === 0)) {
            missingElements.push("content");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a DocumentManifest from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new DocumentManifest(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `DocumentManifest is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the DocumentManifest.status field
 */
export var DocumentManifestStatusEnum;
(function (DocumentManifestStatusEnum) {
    DocumentManifestStatusEnum["CURRENT"] = "current";
    DocumentManifestStatusEnum["SUPERSEDED"] = "superseded";
    DocumentManifestStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(DocumentManifestStatusEnum || (DocumentManifestStatusEnum = {}));
//# sourceMappingURL=DocumentManifest.js.map