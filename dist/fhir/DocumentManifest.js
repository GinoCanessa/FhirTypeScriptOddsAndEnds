// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: DocumentManifest
import * as fhir from '../fhir.js';
import { DocumentReferenceStatusValueSet } from '../fhirValueSets/DocumentReferenceStatusValueSet.js';
import { V3ActCodeValueSet } from '../fhirValueSets/V3ActCodeValueSet.js';
/**
 * May be identifiers or resources that caused the DocumentManifest to be created.
 */
export class DocumentManifestRelated extends fhir.BackboneElement {
    /**
     * Default constructor for DocumentManifestRelated - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['ref']) {
            this.ref = new fhir.Reference(source.ref);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["identifier"]) {
            results.push(...this.identifier.doModelValidation());
        }
        if (this["ref"]) {
            results.push(...this.ref.doModelValidation());
        }
        return results;
    }
}
/**
 * A collection of documents compiled for a purpose together with metadata that applies to the collection.
 */
export class DocumentManifest extends fhir.DomainResource {
    /**
     * Default constructor for DocumentManifest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'DocumentManifest';
        if (source['masterIdentifier']) {
            this.masterIdentifier = new fhir.Identifier(source.masterIdentifier);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['created']) {
            this.created = source.created;
        }
        if (source['_created']) {
            this._created = new fhir.FhirElement(source._created);
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.Reference(x));
        }
        if (source['recipient']) {
            this.recipient = source.recipient.map((x) => new fhir.Reference(x));
        }
        if (source['source']) {
            this.source = source.source;
        }
        if (source['_source']) {
            this._source = new fhir.FhirElement(source._source);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['content']) {
            this.content = source.content.map((x) => new fhir.Reference(x));
        }
        else {
            this.content = null;
        }
        if (source['related']) {
            this.related = source.related.map((x) => new fhir.DocumentManifestRelated(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return DocumentReferenceStatusValueSet;
    }
    /**
     * Example-bound Value Set for type
     */
    typeExampleValueSet() {
        return V3ActCodeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: DocumentManifest.resourceType']);
        }
        if (this["masterIdentifier"]) {
            results.push(...this.masterIdentifier.doModelValidation());
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: DocumentManifest.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["subject"]) {
            results.push(...this.subject.doModelValidation());
        }
        if (this["_created"]) {
            results.push(...this._created.doModelValidation());
        }
        if (this["author"]) {
            this.author.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["recipient"]) {
            this.recipient.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_source"]) {
            results.push(...this._source.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if ((!this["content"]) || (this["content"].length === 0)) {
            results.push(["content", 'Missing required element: DocumentManifest.content']);
        }
        if (this["content"]) {
            this.content.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["related"]) {
            this.related.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=DocumentManifest.js.map