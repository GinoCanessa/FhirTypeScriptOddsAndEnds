// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Indicates who or what performed or participated in the charged service.
 */
export class InvoiceParticipant extends fhir.BackboneElement {
    /**
     * Default constructor for InvoiceParticipant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.actor = null;
        if (source["actor"]) {
            this.actor = new fhir.Reference(source.actor);
        }
        if (this.actor === undefined) {
            this.actor = null;
        }
        if (source["role"]) {
            this.role = new fhir.CodeableConcept(source.role);
        }
    }
    /**
     * Check if the current InvoiceParticipant contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["actor"] === undefined) {
            missingElements.push("actor");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a InvoiceParticipant from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new InvoiceParticipant(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `InvoiceParticipant is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice as to how the prices have been calculated.
 */
export class InvoiceLineItemPriceComponent extends fhir.BackboneElement {
    /**
     * Default constructor for InvoiceLineItemPriceComponent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["amount"]) {
            this.amount = new fhir.Money(source.amount);
        }
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source["factor"]) {
            this.factor = source.factor;
        }
        if (source["_factor"]) {
            this._factor = new fhir.FhirElement(source._factor);
        }
        this.type = null;
        if (source["type"]) {
            this.type = source.type;
        }
        if (this.type === undefined) {
            this.type = null;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
    }
    /**
     * Check if the current InvoiceLineItemPriceComponent contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a InvoiceLineItemPriceComponent from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new InvoiceLineItemPriceComponent(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `InvoiceLineItemPriceComponent is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Each line item represents one charge for goods and services rendered. Details such as date, code and amount are found in the referenced ChargeItem resource.
 */
export class InvoiceLineItem extends fhir.BackboneElement {
    /**
     * Default constructor for InvoiceLineItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["chargeItemReference"]) {
            this.chargeItemReference = new fhir.Reference(source.chargeItemReference);
        }
        if (source["chargeItemCodeableConcept"]) {
            this.chargeItemCodeableConcept = new fhir.CodeableConcept(source.chargeItemCodeableConcept);
        }
        if (source["priceComponent"]) {
            this.priceComponent = source.priceComponent.map((x) => new fhir.InvoiceLineItemPriceComponent(x));
        }
        if (source["sequence"]) {
            this.sequence = source.sequence;
        }
        if (source["_sequence"]) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
    }
    /**
     * Check if the current InvoiceLineItem contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a InvoiceLineItem from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new InvoiceLineItem(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `InvoiceLineItem is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Invoice containing collected ChargeItems from an Account with calculated individual and total price for Billing purpose.
 */
export class Invoice extends fhir.DomainResource {
    /**
     * Default constructor for Invoice - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Invoice';
        if (source["account"]) {
            this.account = new fhir.Reference(source.account);
        }
        if (source["cancelledReason"]) {
            this.cancelledReason = source.cancelledReason;
        }
        if (source["_cancelledReason"]) {
            this._cancelledReason = new fhir.FhirElement(source._cancelledReason);
        }
        if (source["date"]) {
            this.date = source.date;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["issuer"]) {
            this.issuer = new fhir.Reference(source.issuer);
        }
        if (source["lineItem"]) {
            this.lineItem = source.lineItem.map((x) => new fhir.InvoiceLineItem(x));
        }
        if (source["note"]) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source["participant"]) {
            this.participant = source.participant.map((x) => new fhir.InvoiceParticipant(x));
        }
        if (source["paymentTerms"]) {
            this.paymentTerms = source.paymentTerms;
        }
        if (source["_paymentTerms"]) {
            this._paymentTerms = new fhir.FhirElement(source._paymentTerms);
        }
        if (source["recipient"]) {
            this.recipient = new fhir.Reference(source.recipient);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["subject"]) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source["totalGross"]) {
            this.totalGross = new fhir.Money(source.totalGross);
        }
        if (source["totalNet"]) {
            this.totalNet = new fhir.Money(source.totalNet);
        }
        if (source["totalPriceComponent"]) {
            this.totalPriceComponent = source.totalPriceComponent.map((x) => new fhir.InvoiceLineItemPriceComponent(x));
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current Invoice contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Invoice from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new Invoice(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `Invoice is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the Invoice.lineItem.priceComponent.type field
 */
export var InvoiceLineItemPriceComponentTypeEnum;
(function (InvoiceLineItemPriceComponentTypeEnum) {
    InvoiceLineItemPriceComponentTypeEnum["BASE"] = "base";
    InvoiceLineItemPriceComponentTypeEnum["SURCHARGE"] = "surcharge";
    InvoiceLineItemPriceComponentTypeEnum["DEDUCTION"] = "deduction";
    InvoiceLineItemPriceComponentTypeEnum["DISCOUNT"] = "discount";
    InvoiceLineItemPriceComponentTypeEnum["TAX"] = "tax";
    InvoiceLineItemPriceComponentTypeEnum["INFORMATIONAL"] = "informational";
})(InvoiceLineItemPriceComponentTypeEnum || (InvoiceLineItemPriceComponentTypeEnum = {}));
/**
 * Code Values for the Invoice.status field
 */
export var InvoiceStatusEnum;
(function (InvoiceStatusEnum) {
    InvoiceStatusEnum["DRAFT"] = "draft";
    InvoiceStatusEnum["ISSUED"] = "issued";
    InvoiceStatusEnum["BALANCED"] = "balanced";
    InvoiceStatusEnum["CANCELLED"] = "cancelled";
    InvoiceStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(InvoiceStatusEnum || (InvoiceStatusEnum = {}));
//# sourceMappingURL=Invoice.js.map