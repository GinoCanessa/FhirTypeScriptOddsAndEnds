// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Typically. this may be some form of insurance, internal charges, or self-pay.
 * Local or jurisdictional business rules may determine which coverage covers which types of billable items charged to the account, and in which order.
 * Where the order is important, a local/jurisdictional extension may be defined to specify the order for the type of charge.
 */
export class AccountCoverage extends fhir.BackboneElement {
    /**
     * Default constructor for AccountCoverage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.coverage = null;
        if (source["coverage"]) {
            this.coverage = new fhir.Reference(source.coverage);
        }
        if (this.coverage === undefined) {
            this.coverage = null;
        }
        if (source["priority"]) {
            this.priority = source.priority;
        }
        if (source["_priority"]) {
            this._priority = new fhir.FhirElement(source._priority);
        }
    }
    /**
     * Check if the current AccountCoverage contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["coverage"] === undefined) {
            missingElements.push("coverage");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a AccountCoverage from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new AccountCoverage(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `AccountCoverage is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The parties responsible for balancing the account if other payment options fall short.
 */
export class AccountGuarantor extends fhir.BackboneElement {
    /**
     * Default constructor for AccountGuarantor - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["onHold"]) {
            this.onHold = source.onHold;
        }
        if (source["_onHold"]) {
            this._onHold = new fhir.FhirElement(source._onHold);
        }
        this.party = null;
        if (source["party"]) {
            this.party = new fhir.Reference(source.party);
        }
        if (this.party === undefined) {
            this.party = null;
        }
        if (source["period"]) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Check if the current AccountGuarantor contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["party"] === undefined) {
            missingElements.push("party");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a AccountGuarantor from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new AccountGuarantor(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `AccountGuarantor is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.
 */
export class Account extends fhir.DomainResource {
    /**
     * Default constructor for Account - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Account';
        if (source["coverage"]) {
            this.coverage = source.coverage.map((x) => new fhir.AccountCoverage(x));
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["guarantor"]) {
            this.guarantor = source.guarantor.map((x) => new fhir.AccountGuarantor(x));
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["owner"]) {
            this.owner = new fhir.Reference(source.owner);
        }
        if (source["partOf"]) {
            this.partOf = new fhir.Reference(source.partOf);
        }
        if (source["servicePeriod"]) {
            this.servicePeriod = new fhir.Period(source.servicePeriod);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["subject"]) {
            this.subject = source.subject.map((x) => new fhir.Reference(x));
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current Account contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Account from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new Account(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Account is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the Account.status field
 */
export var AccountStatusEnum;
(function (AccountStatusEnum) {
    AccountStatusEnum["ACTIVE"] = "active";
    AccountStatusEnum["INACTIVE"] = "inactive";
    AccountStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    AccountStatusEnum["ON_HOLD"] = "on-hold";
    AccountStatusEnum["UNKNOWN"] = "unknown";
})(AccountStatusEnum || (AccountStatusEnum = {}));
//# sourceMappingURL=Account.js.map