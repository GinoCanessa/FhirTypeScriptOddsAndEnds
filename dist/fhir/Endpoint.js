// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Endpoint
import * as fhir from '../fhir.js';
import { EndpointStatusValueSet, } from '../fhirValueSets/EndpointStatusValueSet.js';
import { EndpointConnectionTypeValueSet, } from '../fhirValueSets/EndpointConnectionTypeValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * The technical details of an endpoint that can be used for electronic services, such as for web services providing XDS.b or a REST endpoint for another FHIR server. This may include any security context information.
 */
export class Endpoint extends fhir.DomainResource {
    /**
     * Default constructor for Endpoint - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'Endpoint';
        /**
         * Identifier for the organization that is used to identify the endpoint across multiple disparate systems.
         */
        this.identifier = [];
        /**
         * Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.
         */
        this.contact = [];
        /**
         * The payloadFormat describes the serialization format of the data, where the payloadType indicates the specific document/schema that is being transferred; e.g. DischargeSummary or CarePlan.
         */
        this.payloadType = [];
        /**
         * Sending the payload has obvious security consequences. The server is responsible for ensuring that the content is appropriately secured.
         */
        this.payloadMimeType = [];
        /**
         * Exactly what these mean depends on the channel type. The can convey additional information to the recipient and/or meet security requirements.
         */
        this.header = [];
        this.resourceType = 'Endpoint';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['connectionType']) {
            this.connectionType = new fhir.Coding(source.connectionType);
        }
        else {
            this.connectionType = null;
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['managingOrganization']) {
            this.managingOrganization = new fhir.Reference(source.managingOrganization);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactPoint(x));
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['payloadType']) {
            this.payloadType = source.payloadType.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.payloadType = null;
        }
        if (source['payloadMimeType']) {
            this.payloadMimeType = source.payloadMimeType.map((x) => new fhir.FhirCode({ value: x }));
        }
        if (source['address']) {
            this.address = new fhir.FhirUrl({ value: source.address });
        }
        else {
            this.address = null;
        }
        if (source['header']) {
            this.header = source.header.map((x) => new fhir.FhirString({ value: x }));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return EndpointStatusValueSet;
    }
    /**
     * Extensible-bound Value Set for connectionType
     */
    static connectionTypeExtensibleValueSet() {
        return EndpointConnectionTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'Endpoint' fhir: Endpoint.resourceType:'Endpoint'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:EndpointStatusValueSetEnum fhir: Endpoint.status:code", }));
        }
        if (!this['connectionType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property connectionType:fhir.Coding fhir: Endpoint.connectionType:Coding", }));
        }
        if (this["connectionType"]) {
            outcome.issue.push(...this.connectionType.doModelValidation().issue);
        }
        if (this["name"]) {
            outcome.issue.push(...this.name.doModelValidation().issue);
        }
        if (this["managingOrganization"]) {
            outcome.issue.push(...this.managingOrganization.doModelValidation().issue);
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["period"]) {
            outcome.issue.push(...this.period.doModelValidation().issue);
        }
        if (!this['payloadType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property payloadType:fhir.CodeableConcept[] fhir: Endpoint.payloadType:CodeableConcept", }));
        }
        else if (!Array.isArray(this.payloadType)) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue, diagnostics: "Found scalar in array property payloadType:fhir.CodeableConcept[] fhir: Endpoint.payloadType:CodeableConcept", }));
        }
        else if (this.payloadType.length === 0) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property payloadType:fhir.CodeableConcept[] fhir: Endpoint.payloadType:CodeableConcept", }));
        }
        if (this["payloadType"]) {
            this.payloadType.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["payloadMimeType"]) {
            this.payloadMimeType.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['address']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property address:fhir.FhirUrl fhir: Endpoint.address:url", }));
        }
        if (this["address"]) {
            outcome.issue.push(...this.address.doModelValidation().issue);
        }
        if (this["header"]) {
            this.header.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=Endpoint.js.map