// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Endpoint
import * as fhir from '../fhir.js';
import { EndpointStatusValueSet } from '../fhirValueSets/EndpointStatusValueSet.js';
import { EndpointConnectionTypeValueSet } from '../fhirValueSets/EndpointConnectionTypeValueSet.js';
/**
 * The technical details of an endpoint that can be used for electronic services, such as for web services providing XDS.b or a REST endpoint for another FHIR server. This may include any security context information.
 */
export class Endpoint extends fhir.DomainResource {
    /**
     * Default constructor for Endpoint - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Endpoint';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['connectionType']) {
            this.connectionType = new fhir.Coding(source.connectionType);
        }
        else {
            this.connectionType = null;
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['managingOrganization']) {
            this.managingOrganization = new fhir.Reference(source.managingOrganization);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactPoint(x));
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['payloadType']) {
            this.payloadType = source.payloadType.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.payloadType = null;
        }
        if (source['payloadMimeType']) {
            this.payloadMimeType = source.payloadMimeType.map((x) => (x));
        }
        if (source['_payloadMimeType']) {
            this._payloadMimeType = source._payloadMimeType.map((x) => new fhir.FhirElement(x));
        }
        if (source['address']) {
            this.address = source.address;
        }
        else {
            this.address = null;
        }
        if (source['_address']) {
            this._address = new fhir.FhirElement(source._address);
        }
        if (source['header']) {
            this.header = source.header.map((x) => (x));
        }
        if (source['_header']) {
            this._header = source._header.map((x) => new fhir.FhirElement(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return EndpointStatusValueSet;
    }
    /**
     * Extensible-bound Value Set for connectionType
     */
    static connectionTypeExtensibleValueSet() {
        return EndpointConnectionTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: Endpoint.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: Endpoint.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (!this["connectionType"]) {
            results.push(["connectionType", 'Missing required element: Endpoint.connectionType']);
        }
        if (this["connectionType"]) {
            results.push(...this.connectionType.doModelValidation());
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["managingOrganization"]) {
            results.push(...this.managingOrganization.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["period"]) {
            results.push(...this.period.doModelValidation());
        }
        if ((!this["payloadType"]) || (this["payloadType"].length === 0)) {
            results.push(["payloadType", 'Missing required element: Endpoint.payloadType']);
        }
        if (this["payloadType"]) {
            this.payloadType.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_payloadMimeType"]) {
            this._payloadMimeType.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["address"]) {
            results.push(["address", 'Missing required element: Endpoint.address']);
        }
        if (this["_address"]) {
            results.push(...this._address.doModelValidation());
        }
        if (this["_header"]) {
            this._header.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=Endpoint.js.map