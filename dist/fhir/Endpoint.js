// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * The technical details of an endpoint that can be used for electronic services, such as for web services providing XDS.b or a REST endpoint for another FHIR server. This may include any security context information.
 */
export class Endpoint extends fhir.DomainResource {
    /**
     * Default constructor for Endpoint - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Endpoint';
        this.address = null;
        if (source["address"]) {
            this.address = source.address;
        }
        if (this.address === undefined) {
            this.address = null;
        }
        if (source["_address"]) {
            this._address = new fhir.FhirElement(source._address);
        }
        this.connectionType = null;
        if (source["connectionType"]) {
            this.connectionType = new fhir.Coding(source.connectionType);
        }
        if (this.connectionType === undefined) {
            this.connectionType = null;
        }
        if (source["contact"]) {
            this.contact = source.contact.map((x) => new fhir.ContactPoint(x));
        }
        if (source["header"]) {
            this.header = source.header.map((x) => (x));
        }
        if (source["_header"]) {
            this._header = source._header.map((x) => new fhir.FhirElement(x));
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["managingOrganization"]) {
            this.managingOrganization = new fhir.Reference(source.managingOrganization);
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["payloadMimeType"]) {
            this.payloadMimeType = source.payloadMimeType.map((x) => (x));
        }
        if (source["_payloadMimeType"]) {
            this._payloadMimeType = source._payloadMimeType.map((x) => new fhir.FhirElement(x));
        }
        this.payloadType = null;
        if (source["payloadType"]) {
            this.payloadType = source.payloadType.map((x) => new fhir.CodeableConcept(x));
        }
        if (this.payloadType === undefined) {
            this.payloadType = null;
        }
        if (source["period"]) {
            this.period = new fhir.Period(source.period);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
    }
    /**
     * Check if the current Endpoint contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["address"] === undefined) {
            missingElements.push("address");
        }
        if (this["connectionType"] === undefined) {
            missingElements.push("connectionType");
        }
        if ((!this["payloadType"]) || (this["payloadType"].length === 0)) {
            missingElements.push("payloadType");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Endpoint from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new Endpoint(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `Endpoint is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the Endpoint.status field
 */
export var EndpointStatusEnum;
(function (EndpointStatusEnum) {
    EndpointStatusEnum["ACTIVE"] = "active";
    EndpointStatusEnum["SUSPENDED"] = "suspended";
    EndpointStatusEnum["ERROR"] = "error";
    EndpointStatusEnum["OFF"] = "off";
    EndpointStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    EndpointStatusEnum["TEST"] = "test";
})(EndpointStatusEnum || (EndpointStatusEnum = {}));
//# sourceMappingURL=Endpoint.js.map