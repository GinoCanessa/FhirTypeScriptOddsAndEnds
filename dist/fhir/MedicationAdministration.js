// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Indicates who or what performed the medication administration and how they were involved.
 */
export class MedicationAdministrationPerformer extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationAdministrationPerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.actor = null;
        if (source["actor"]) {
            this.actor = new fhir.Reference(source.actor);
        }
        if (this.actor === undefined) {
            this.actor = null;
        }
        if (source["function"]) {
            this.function = new fhir.CodeableConcept(source.function);
        }
    }
    /**
     * Check if the current MedicationAdministrationPerformer contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["actor"] === undefined) {
            missingElements.push("actor");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicationAdministrationPerformer from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MedicationAdministrationPerformer(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationAdministrationPerformer is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Describes the medication dosage information details e.g. dose, rate, site, route, etc.
 */
export class MedicationAdministrationDosage extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationAdministrationDosage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["dose"]) {
            this.dose = new fhir.Quantity(source.dose);
        }
        if (source["method"]) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source["rateRatio"]) {
            this.rateRatio = new fhir.Ratio(source.rateRatio);
        }
        if (source["rateQuantity"]) {
            this.rateQuantity = new fhir.Quantity(source.rateQuantity);
        }
        if (source["route"]) {
            this.route = new fhir.CodeableConcept(source.route);
        }
        if (source["site"]) {
            this.site = new fhir.CodeableConcept(source.site);
        }
        if (source["text"]) {
            this.text = source.text;
        }
        if (source["_text"]) {
            this._text = new fhir.FhirElement(source._text);
        }
    }
    /**
     * Check if the current MedicationAdministrationDosage contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicationAdministrationDosage from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MedicationAdministrationDosage(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationAdministrationDosage is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.
 */
export class MedicationAdministration extends fhir.DomainResource {
    /**
     * Default constructor for MedicationAdministration - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'MedicationAdministration';
        if (source["category"]) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source["context"]) {
            this.context = new fhir.Reference(source.context);
        }
        if (source["device"]) {
            this.device = source.device.map((x) => new fhir.Reference(x));
        }
        if (source["dosage"]) {
            this.dosage = new fhir.MedicationAdministrationDosage(source.dosage);
        }
        if (source["effectiveDateTime"]) {
            this.effectiveDateTime = source.effectiveDateTime;
        }
        if (source["_effectiveDateTime"]) {
            this._effectiveDateTime = new fhir.FhirElement(source._effectiveDateTime);
        }
        if (source["effectivePeriod"]) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source["eventHistory"]) {
            this.eventHistory = source.eventHistory.map((x) => new fhir.Reference(x));
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["instantiates"]) {
            this.instantiates = source.instantiates.map((x) => (x));
        }
        if (source["_instantiates"]) {
            this._instantiates = source._instantiates.map((x) => new fhir.FhirElement(x));
        }
        if (source["medicationCodeableConcept"]) {
            this.medicationCodeableConcept = new fhir.CodeableConcept(source.medicationCodeableConcept);
        }
        if (source["medicationReference"]) {
            this.medicationReference = new fhir.Reference(source.medicationReference);
        }
        if (source["note"]) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source["partOf"]) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        if (source["performer"]) {
            this.performer = source.performer.map((x) => new fhir.MedicationAdministrationPerformer(x));
        }
        if (source["reasonCode"]) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["reasonReference"]) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source["request"]) {
            this.request = new fhir.Reference(source.request);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["statusReason"]) {
            this.statusReason = source.statusReason.map((x) => new fhir.CodeableConcept(x));
        }
        this.subject = null;
        if (source["subject"]) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (this.subject === undefined) {
            this.subject = null;
        }
        if (source["supportingInformation"]) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Check if the current MedicationAdministration contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["subject"] === undefined) {
            missingElements.push("subject");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicationAdministration from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MedicationAdministration(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationAdministration is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the MedicationAdministration.status field
 */
export var MedicationAdministrationStatusEnum;
(function (MedicationAdministrationStatusEnum) {
    MedicationAdministrationStatusEnum["IN_PROGRESS"] = "in-progress";
    MedicationAdministrationStatusEnum["NOT_DONE"] = "not-done";
    MedicationAdministrationStatusEnum["ON_HOLD"] = "on-hold";
    MedicationAdministrationStatusEnum["COMPLETED"] = "completed";
    MedicationAdministrationStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    MedicationAdministrationStatusEnum["STOPPED"] = "stopped";
    MedicationAdministrationStatusEnum["UNKNOWN"] = "unknown";
})(MedicationAdministrationStatusEnum || (MedicationAdministrationStatusEnum = {}));
//# sourceMappingURL=MedicationAdministration.js.map