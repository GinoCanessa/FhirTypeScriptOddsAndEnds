// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicationAdministration
import * as fhir from '../fhir.js';
import { MedAdminPerformFunctionValueSet } from '../fhirValueSets/MedAdminPerformFunctionValueSet.js';
import { ApproachSiteCodesValueSet } from '../fhirValueSets/ApproachSiteCodesValueSet.js';
import { RouteCodesValueSet } from '../fhirValueSets/RouteCodesValueSet.js';
import { AdministrationMethodCodesValueSet } from '../fhirValueSets/AdministrationMethodCodesValueSet.js';
import { MedicationAdminStatusValueSet } from '../fhirValueSets/MedicationAdminStatusValueSet.js';
import { ReasonMedicationNotGivenCodesValueSet } from '../fhirValueSets/ReasonMedicationNotGivenCodesValueSet.js';
import { MedicationAdminCategoryValueSet } from '../fhirValueSets/MedicationAdminCategoryValueSet.js';
import { MedicationCodesValueSet } from '../fhirValueSets/MedicationCodesValueSet.js';
import { ReasonMedicationGivenCodesValueSet } from '../fhirValueSets/ReasonMedicationGivenCodesValueSet.js';
/**
 * Indicates who or what performed the medication administration and how they were involved.
 */
export class MedicationAdministrationPerformer extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationAdministrationPerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['function']) {
            this.function = new fhir.CodeableConcept(source.function);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        else {
            this.actor = null;
        }
    }
    /**
     * Example-bound Value Set for function
     */
    functionExampleValueSet() {
        return MedAdminPerformFunctionValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["function"]) {
            results.push(...this.function.doModelValidation());
        }
        if (!this["actor"]) {
            results.push(["actor", 'Missing required element: MedicationAdministration.performer.actor']);
        }
        if (this["actor"]) {
            results.push(...this.actor.doModelValidation());
        }
        return results;
    }
}
/**
 * Describes the medication dosage information details e.g. dose, rate, site, route, etc.
 */
export class MedicationAdministrationDosage extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationAdministrationDosage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['text']) {
            this.text = source.text;
        }
        if (source['_text']) {
            this._text = new fhir.FhirElement(source._text);
        }
        if (source['site']) {
            this.site = new fhir.CodeableConcept(source.site);
        }
        if (source['route']) {
            this.route = new fhir.CodeableConcept(source.route);
        }
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source['dose']) {
            this.dose = new fhir.Quantity(source.dose);
        }
        if (source['rateRatio']) {
            this.rateRatio = new fhir.Ratio(source.rateRatio);
        }
        if (source['rateQuantity']) {
            this.rateQuantity = new fhir.Quantity(source.rateQuantity);
        }
    }
    /**
     * Example-bound Value Set for site
     */
    siteExampleValueSet() {
        return ApproachSiteCodesValueSet;
    }
    /**
     * Example-bound Value Set for route
     */
    routeExampleValueSet() {
        return RouteCodesValueSet;
    }
    /**
     * Example-bound Value Set for method
     */
    methodExampleValueSet() {
        return AdministrationMethodCodesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_text"]) {
            results.push(...this._text.doModelValidation());
        }
        if (this["site"]) {
            results.push(...this.site.doModelValidation());
        }
        if (this["route"]) {
            results.push(...this.route.doModelValidation());
        }
        if (this["method"]) {
            results.push(...this.method.doModelValidation());
        }
        if (this["dose"]) {
            results.push(...this.dose.doModelValidation());
        }
        if (this["rateRatio"]) {
            results.push(...this.rateRatio.doModelValidation());
        }
        if (this["rateQuantity"]) {
            results.push(...this.rateQuantity.doModelValidation());
        }
        return results;
    }
}
/**
 * Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.
 */
export class MedicationAdministration extends fhir.DomainResource {
    /**
     * Default constructor for MedicationAdministration - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'MedicationAdministration';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['instantiates']) {
            this.instantiates = source.instantiates.map((x) => (x));
        }
        if (source['_instantiates']) {
            this._instantiates = source._instantiates.map((x) => new fhir.FhirElement(x));
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['statusReason']) {
            this.statusReason = source.statusReason.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['medicationCodeableConcept']) {
            this.medicationCodeableConcept = new fhir.CodeableConcept(source.medicationCodeableConcept);
        }
        if (source['medicationReference']) {
            this.medicationReference = new fhir.Reference(source.medicationReference);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context);
        }
        if (source['supportingInformation']) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x));
        }
        if (source['effectiveDateTime']) {
            this.effectiveDateTime = source.effectiveDateTime;
        }
        if (source['_effectiveDateTime']) {
            this._effectiveDateTime = new fhir.FhirElement(source._effectiveDateTime);
        }
        if (source['effectivePeriod']) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.MedicationAdministrationPerformer(x));
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source['request']) {
            this.request = new fhir.Reference(source.request);
        }
        if (source['device']) {
            this.device = source.device.map((x) => new fhir.Reference(x));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['dosage']) {
            this.dosage = new fhir.MedicationAdministrationDosage(source.dosage);
        }
        if (source['eventHistory']) {
            this.eventHistory = source.eventHistory.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return MedicationAdminStatusValueSet;
    }
    /**
     * Example-bound Value Set for statusReason
     */
    statusReasonExampleValueSet() {
        return ReasonMedicationNotGivenCodesValueSet;
    }
    /**
     * Preferred-bound Value Set for category
     */
    categoryPreferredValueSet() {
        return MedicationAdminCategoryValueSet;
    }
    /**
     * Example-bound Value Set for medicationCodeableConcept
     */
    medicationCodeableConceptExampleValueSet() {
        return MedicationCodesValueSet;
    }
    /**
     * Example-bound Value Set for medicationReference
     */
    medicationReferenceExampleValueSet() {
        return MedicationCodesValueSet;
    }
    /**
     * Example-bound Value Set for reasonCode
     */
    reasonCodeExampleValueSet() {
        return ReasonMedicationGivenCodesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: MedicationAdministration.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_instantiates"]) {
            this._instantiates.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["partOf"]) {
            this.partOf.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: MedicationAdministration.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["statusReason"]) {
            this.statusReason.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["category"]) {
            results.push(...this.category.doModelValidation());
        }
        if (this["medicationCodeableConcept"]) {
            results.push(...this.medicationCodeableConcept.doModelValidation());
        }
        if (this["medicationReference"]) {
            results.push(...this.medicationReference.doModelValidation());
        }
        if (!this["subject"]) {
            results.push(["subject", 'Missing required element: MedicationAdministration.subject']);
        }
        if (this["subject"]) {
            results.push(...this.subject.doModelValidation());
        }
        if (this["context"]) {
            results.push(...this.context.doModelValidation());
        }
        if (this["supportingInformation"]) {
            this.supportingInformation.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_effectiveDateTime"]) {
            results.push(...this._effectiveDateTime.doModelValidation());
        }
        if (this["effectivePeriod"]) {
            results.push(...this.effectivePeriod.doModelValidation());
        }
        if (this["performer"]) {
            this.performer.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["request"]) {
            results.push(...this.request.doModelValidation());
        }
        if (this["device"]) {
            this.device.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["dosage"]) {
            results.push(...this.dosage.doModelValidation());
        }
        if (this["eventHistory"]) {
            this.eventHistory.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=MedicationAdministration.js.map