// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Identifier
import * as fhir from '../fhir.js';
import { IdentifierUseValueSet, } from '../fhirValueSets/IdentifierUseValueSet.js';
import { IdentifierTypeValueSet, } from '../fhirValueSets/IdentifierTypeValueSet.js';
/**
 * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
 */
export class Identifier extends fhir.FhirElement {
    /**
     * Default constructor for Identifier - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'Identifier';
        if (source['use']) {
            this.use = source.use;
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['system']) {
            this.system = new fhir.FhirUri({ value: source.system });
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['assigner']) {
            this.assigner = new fhir.Reference(source.assigner);
        }
    }
    /**
     * Required-bound Value Set for use
     */
    static useRequiredValueSet() {
        return IdentifierUseValueSet;
    }
    /**
     * Extensible-bound Value Set for type
     */
    static typeExtensibleValueSet() {
        return IdentifierTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["system"]) {
            outcome.issue.push(...this.system.doModelValidation().issue);
        }
        if (this["value"]) {
            outcome.issue.push(...this.value.doModelValidation().issue);
        }
        if (this["period"]) {
            outcome.issue.push(...this.period.doModelValidation().issue);
        }
        if (this["assigner"]) {
            outcome.issue.push(...this.assigner.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=Identifier.js.map