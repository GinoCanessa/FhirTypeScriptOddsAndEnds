var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Restricted to: Patient|Encounter|Observation
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
 */
var Identifier = /** @class */ (function (_super) {
    __extends(Identifier, _super);
    /**
     * Default constructor for Identifier - initializes required elements to null.
     */
    function Identifier() {
        return _super.call(this) || this;
    }
    /**
     * Factory function to create a Identifier from an object that MAY NOT contain all required elements.
     */
    Identifier.FactoryCreate = function (source) {
        var dest = _super.FactoryCreate.call(this, source);
        if (source["assigner"] !== undefined) {
            dest.assigner = fhir.Reference.FactoryCreate(source.assigner);
        }
        if (source["period"] !== undefined) {
            dest.period = fhir.Period.FactoryCreate(source.period);
        }
        if (source["system"] !== undefined) {
            dest.system = source.system;
        }
        if (source["_system"] !== undefined) {
            dest._system = fhir.FhirElement.FactoryCreate(source._system);
        }
        if (source["type"] !== undefined) {
            dest.type = fhir.CodeableConcept.FactoryCreate(source.type);
        }
        if (source["use"] !== undefined) {
            dest.use = source.use;
        }
        if (source["_use"] !== undefined) {
            dest._use = fhir.FhirElement.FactoryCreate(source._use);
        }
        if (source["value"] !== undefined) {
            dest.value = source.value;
        }
        if (source["_value"] !== undefined) {
            dest._value = fhir.FhirElement.FactoryCreate(source._value);
        }
        return dest;
    };
    /**
     * Check if the current Identifier contains all required elements.
     */
    Identifier.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    /**
     * Factory function to create a Identifier from an object that MUST contain all required elements.
     */
    Identifier.FactoryCreateStrict = function (source) {
        var dest = this.FactoryCreate(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "Identifier is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    return Identifier;
}(fhir.FhirElement));
export { Identifier };
/**
 * Code Values for the Identifier.use field
 */
export var IdentifierUseEnum;
(function (IdentifierUseEnum) {
    IdentifierUseEnum["USUAL"] = "usual";
    IdentifierUseEnum["OFFICIAL"] = "official";
    IdentifierUseEnum["TEMP"] = "temp";
    IdentifierUseEnum["SECONDARY"] = "secondary";
    IdentifierUseEnum["OLD"] = "old";
})(IdentifierUseEnum || (IdentifierUseEnum = {}));
//# sourceMappingURL=Identifier.js.map