// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
 */
export class Identifier extends fhir.FhirElement {
    /**
     * Default constructor for Identifier - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["assigner"]) {
            this.assigner = new fhir.Reference(source.assigner);
        }
        if (source["period"]) {
            this.period = new fhir.Period(source.period);
        }
        if (source["system"]) {
            this.system = source.system;
        }
        if (source["_system"]) {
            this._system = new fhir.FhirElement(source._system);
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source["use"]) {
            this.use = source.use;
        }
        if (source["_use"]) {
            this._use = new fhir.FhirElement(source._use);
        }
        if (source["value"]) {
            this.value = source.value;
        }
        if (source["_value"]) {
            this._value = new fhir.FhirElement(source._value);
        }
    }
    /**
     * Check if the current Identifier contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Identifier from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new Identifier(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `Identifier is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the Identifier.use field
 */
export var IdentifierUseEnum;
(function (IdentifierUseEnum) {
    IdentifierUseEnum["USUAL"] = "usual";
    IdentifierUseEnum["OFFICIAL"] = "official";
    IdentifierUseEnum["TEMP"] = "temp";
    IdentifierUseEnum["SECONDARY"] = "secondary";
    IdentifierUseEnum["OLD"] = "old";
})(IdentifierUseEnum || (IdentifierUseEnum = {}));
//# sourceMappingURL=Identifier.js.map