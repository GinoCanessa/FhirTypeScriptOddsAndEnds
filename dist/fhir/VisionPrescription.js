// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: VisionPrescription
import * as fhir from '../fhir.js';
import { VisionBaseCodesValueSet } from '../fhirValueSets/VisionBaseCodesValueSet.js';
import { VisionProductValueSet } from '../fhirValueSets/VisionProductValueSet.js';
import { VisionEyeCodesValueSet } from '../fhirValueSets/VisionEyeCodesValueSet.js';
import { FmStatusValueSet } from '../fhirValueSets/FmStatusValueSet.js';
/**
 * Allows for adjustment on two axis.
 */
export class VisionPrescriptionLensSpecificationPrism extends fhir.BackboneElement {
    /**
     * Default constructor for VisionPrescriptionLensSpecificationPrism - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['amount']) {
            this.amount = source.amount;
        }
        else {
            this.amount = null;
        }
        if (source['_amount']) {
            this._amount = new fhir.FhirElement(source._amount);
        }
        if (source['base']) {
            this.base = source.base;
        }
        else {
            this.base = null;
        }
        if (source['_base']) {
            this._base = new fhir.FhirElement(source._base);
        }
    }
    /**
     * Required-bound Value Set for base
     */
    baseRequiredValueSet() {
        return VisionBaseCodesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["amount"]) {
            results.push(["amount", 'Missing required element: VisionPrescription.lensSpecification.prism.amount']);
        }
        if (this["_amount"]) {
            results.push(...this._amount.doModelValidation());
        }
        if (!this["base"]) {
            results.push(["base", 'Missing required element: VisionPrescription.lensSpecification.prism.base']);
        }
        if (this["_base"]) {
            results.push(...this._base.doModelValidation());
        }
        return results;
    }
}
/**
 * Contain the details of  the individual lens specifications and serves as the authorization for the fullfillment by certified professionals.
 */
export class VisionPrescriptionLensSpecification extends fhir.BackboneElement {
    /**
     * Default constructor for VisionPrescriptionLensSpecification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['product']) {
            this.product = new fhir.CodeableConcept(source.product);
        }
        else {
            this.product = null;
        }
        if (source['eye']) {
            this.eye = source.eye;
        }
        else {
            this.eye = null;
        }
        if (source['_eye']) {
            this._eye = new fhir.FhirElement(source._eye);
        }
        if (source['sphere']) {
            this.sphere = source.sphere;
        }
        if (source['_sphere']) {
            this._sphere = new fhir.FhirElement(source._sphere);
        }
        if (source['cylinder']) {
            this.cylinder = source.cylinder;
        }
        if (source['_cylinder']) {
            this._cylinder = new fhir.FhirElement(source._cylinder);
        }
        if (source['axis']) {
            this.axis = source.axis;
        }
        if (source['_axis']) {
            this._axis = new fhir.FhirElement(source._axis);
        }
        if (source['prism']) {
            this.prism = source.prism.map((x) => new fhir.VisionPrescriptionLensSpecificationPrism(x));
        }
        if (source['add']) {
            this.add = source.add;
        }
        if (source['_add']) {
            this._add = new fhir.FhirElement(source._add);
        }
        if (source['power']) {
            this.power = source.power;
        }
        if (source['_power']) {
            this._power = new fhir.FhirElement(source._power);
        }
        if (source['backCurve']) {
            this.backCurve = source.backCurve;
        }
        if (source['_backCurve']) {
            this._backCurve = new fhir.FhirElement(source._backCurve);
        }
        if (source['diameter']) {
            this.diameter = source.diameter;
        }
        if (source['_diameter']) {
            this._diameter = new fhir.FhirElement(source._diameter);
        }
        if (source['duration']) {
            this.duration = new fhir.Quantity(source.duration);
        }
        if (source['color']) {
            this.color = source.color;
        }
        if (source['_color']) {
            this._color = new fhir.FhirElement(source._color);
        }
        if (source['brand']) {
            this.brand = source.brand;
        }
        if (source['_brand']) {
            this._brand = new fhir.FhirElement(source._brand);
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
    }
    /**
     * Example-bound Value Set for product
     */
    productExampleValueSet() {
        return VisionProductValueSet;
    }
    /**
     * Required-bound Value Set for eye
     */
    eyeRequiredValueSet() {
        return VisionEyeCodesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["product"]) {
            results.push(["product", 'Missing required element: VisionPrescription.lensSpecification.product']);
        }
        if (this["product"]) {
            results.push(...this.product.doModelValidation());
        }
        if (!this["eye"]) {
            results.push(["eye", 'Missing required element: VisionPrescription.lensSpecification.eye']);
        }
        if (this["_eye"]) {
            results.push(...this._eye.doModelValidation());
        }
        if (this["_sphere"]) {
            results.push(...this._sphere.doModelValidation());
        }
        if (this["_cylinder"]) {
            results.push(...this._cylinder.doModelValidation());
        }
        if (this["_axis"]) {
            results.push(...this._axis.doModelValidation());
        }
        if (this["prism"]) {
            this.prism.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_add"]) {
            results.push(...this._add.doModelValidation());
        }
        if (this["_power"]) {
            results.push(...this._power.doModelValidation());
        }
        if (this["_backCurve"]) {
            results.push(...this._backCurve.doModelValidation());
        }
        if (this["_diameter"]) {
            results.push(...this._diameter.doModelValidation());
        }
        if (this["duration"]) {
            results.push(...this.duration.doModelValidation());
        }
        if (this["_color"]) {
            results.push(...this._color.doModelValidation());
        }
        if (this["_brand"]) {
            results.push(...this._brand.doModelValidation());
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * An authorization for the provision of glasses and/or contact lenses to a patient.
 */
export class VisionPrescription extends fhir.DomainResource {
    /**
     * Default constructor for VisionPrescription - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'VisionPrescription';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['created']) {
            this.created = source.created;
        }
        else {
            this.created = null;
        }
        if (source['_created']) {
            this._created = new fhir.FhirElement(source._created);
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['dateWritten']) {
            this.dateWritten = source.dateWritten;
        }
        else {
            this.dateWritten = null;
        }
        if (source['_dateWritten']) {
            this._dateWritten = new fhir.FhirElement(source._dateWritten);
        }
        if (source['prescriber']) {
            this.prescriber = new fhir.Reference(source.prescriber);
        }
        else {
            this.prescriber = null;
        }
        if (source['lensSpecification']) {
            this.lensSpecification = source.lensSpecification.map((x) => new fhir.VisionPrescriptionLensSpecification(x));
        }
        else {
            this.lensSpecification = null;
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return FmStatusValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: VisionPrescription.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: VisionPrescription.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (!this["created"]) {
            results.push(["created", 'Missing required element: VisionPrescription.created']);
        }
        if (this["_created"]) {
            results.push(...this._created.doModelValidation());
        }
        if (!this["patient"]) {
            results.push(["patient", 'Missing required element: VisionPrescription.patient']);
        }
        if (this["patient"]) {
            results.push(...this.patient.doModelValidation());
        }
        if (this["encounter"]) {
            results.push(...this.encounter.doModelValidation());
        }
        if (!this["dateWritten"]) {
            results.push(["dateWritten", 'Missing required element: VisionPrescription.dateWritten']);
        }
        if (this["_dateWritten"]) {
            results.push(...this._dateWritten.doModelValidation());
        }
        if (!this["prescriber"]) {
            results.push(["prescriber", 'Missing required element: VisionPrescription.prescriber']);
        }
        if (this["prescriber"]) {
            results.push(...this.prescriber.doModelValidation());
        }
        if ((!this["lensSpecification"]) || (this["lensSpecification"].length === 0)) {
            results.push(["lensSpecification", 'Missing required element: VisionPrescription.lensSpecification']);
        }
        if (this["lensSpecification"]) {
            this.lensSpecification.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=VisionPrescription.js.map