// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Allows for adjustment on two axis.
 */
export class VisionPrescriptionLensSpecificationPrism extends fhir.BackboneElement {
    /**
     * Default constructor for VisionPrescriptionLensSpecificationPrism - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.amount = null;
        if (source["amount"]) {
            this.amount = source.amount;
        }
        if (this.amount === undefined) {
            this.amount = null;
        }
        if (source["_amount"]) {
            this._amount = new fhir.FhirElement(source._amount);
        }
        this.base = null;
        if (source["base"]) {
            this.base = source.base;
        }
        if (this.base === undefined) {
            this.base = null;
        }
        if (source["_base"]) {
            this._base = new fhir.FhirElement(source._base);
        }
    }
    /**
     * Check if the current VisionPrescriptionLensSpecificationPrism contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["amount"] === undefined) {
            missingElements.push("amount");
        }
        if (this["base"] === undefined) {
            missingElements.push("base");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a VisionPrescriptionLensSpecificationPrism from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new VisionPrescriptionLensSpecificationPrism(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `VisionPrescriptionLensSpecificationPrism is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Contain the details of  the individual lens specifications and serves as the authorization for the fullfillment by certified professionals.
 */
export class VisionPrescriptionLensSpecification extends fhir.BackboneElement {
    /**
     * Default constructor for VisionPrescriptionLensSpecification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["add"]) {
            this.add = source.add;
        }
        if (source["_add"]) {
            this._add = new fhir.FhirElement(source._add);
        }
        if (source["axis"]) {
            this.axis = source.axis;
        }
        if (source["_axis"]) {
            this._axis = new fhir.FhirElement(source._axis);
        }
        if (source["backCurve"]) {
            this.backCurve = source.backCurve;
        }
        if (source["_backCurve"]) {
            this._backCurve = new fhir.FhirElement(source._backCurve);
        }
        if (source["brand"]) {
            this.brand = source.brand;
        }
        if (source["_brand"]) {
            this._brand = new fhir.FhirElement(source._brand);
        }
        if (source["color"]) {
            this.color = source.color;
        }
        if (source["_color"]) {
            this._color = new fhir.FhirElement(source._color);
        }
        if (source["cylinder"]) {
            this.cylinder = source.cylinder;
        }
        if (source["_cylinder"]) {
            this._cylinder = new fhir.FhirElement(source._cylinder);
        }
        if (source["diameter"]) {
            this.diameter = source.diameter;
        }
        if (source["_diameter"]) {
            this._diameter = new fhir.FhirElement(source._diameter);
        }
        if (source["duration"]) {
            this.duration = new fhir.Quantity(source.duration);
        }
        this.eye = null;
        if (source["eye"]) {
            this.eye = source.eye;
        }
        if (this.eye === undefined) {
            this.eye = null;
        }
        if (source["_eye"]) {
            this._eye = new fhir.FhirElement(source._eye);
        }
        if (source["note"]) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source["power"]) {
            this.power = source.power;
        }
        if (source["_power"]) {
            this._power = new fhir.FhirElement(source._power);
        }
        if (source["prism"]) {
            this.prism = source.prism.map((x) => new fhir.VisionPrescriptionLensSpecificationPrism(x));
        }
        this.product = null;
        if (source["product"]) {
            this.product = new fhir.CodeableConcept(source.product);
        }
        if (this.product === undefined) {
            this.product = null;
        }
        if (source["sphere"]) {
            this.sphere = source.sphere;
        }
        if (source["_sphere"]) {
            this._sphere = new fhir.FhirElement(source._sphere);
        }
    }
    /**
     * Check if the current VisionPrescriptionLensSpecification contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["eye"] === undefined) {
            missingElements.push("eye");
        }
        if (this["product"] === undefined) {
            missingElements.push("product");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a VisionPrescriptionLensSpecification from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new VisionPrescriptionLensSpecification(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `VisionPrescriptionLensSpecification is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * An authorization for the provision of glasses and/or contact lenses to a patient.
 */
export class VisionPrescription extends fhir.DomainResource {
    /**
     * Default constructor for VisionPrescription - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'VisionPrescription';
        this.created = null;
        if (source["created"]) {
            this.created = source.created;
        }
        if (this.created === undefined) {
            this.created = null;
        }
        if (source["_created"]) {
            this._created = new fhir.FhirElement(source._created);
        }
        this.dateWritten = null;
        if (source["dateWritten"]) {
            this.dateWritten = source.dateWritten;
        }
        if (this.dateWritten === undefined) {
            this.dateWritten = null;
        }
        if (source["_dateWritten"]) {
            this._dateWritten = new fhir.FhirElement(source._dateWritten);
        }
        if (source["encounter"]) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        this.lensSpecification = null;
        if (source["lensSpecification"]) {
            this.lensSpecification = source.lensSpecification.map((x) => new fhir.VisionPrescriptionLensSpecification(x));
        }
        if (this.lensSpecification === undefined) {
            this.lensSpecification = null;
        }
        this.patient = null;
        if (source["patient"]) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (this.patient === undefined) {
            this.patient = null;
        }
        this.prescriber = null;
        if (source["prescriber"]) {
            this.prescriber = new fhir.Reference(source.prescriber);
        }
        if (this.prescriber === undefined) {
            this.prescriber = null;
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
    }
    /**
     * Check if the current VisionPrescription contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["created"] === undefined) {
            missingElements.push("created");
        }
        if (this["dateWritten"] === undefined) {
            missingElements.push("dateWritten");
        }
        if ((!this["lensSpecification"]) || (this["lensSpecification"].length === 0)) {
            missingElements.push("lensSpecification");
        }
        if (this["patient"] === undefined) {
            missingElements.push("patient");
        }
        if (this["prescriber"] === undefined) {
            missingElements.push("prescriber");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a VisionPrescription from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new VisionPrescription(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `VisionPrescription is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the VisionPrescription.lensSpecification.prism.base field
 */
export var VisionPrescriptionLensSpecificationPrismBaseEnum;
(function (VisionPrescriptionLensSpecificationPrismBaseEnum) {
    VisionPrescriptionLensSpecificationPrismBaseEnum["UP"] = "up";
    VisionPrescriptionLensSpecificationPrismBaseEnum["DOWN"] = "down";
    VisionPrescriptionLensSpecificationPrismBaseEnum["IN"] = "in";
    VisionPrescriptionLensSpecificationPrismBaseEnum["OUT"] = "out";
})(VisionPrescriptionLensSpecificationPrismBaseEnum || (VisionPrescriptionLensSpecificationPrismBaseEnum = {}));
/**
 * Code Values for the VisionPrescription.lensSpecification.eye field
 */
export var VisionPrescriptionLensSpecificationEyeEnum;
(function (VisionPrescriptionLensSpecificationEyeEnum) {
    VisionPrescriptionLensSpecificationEyeEnum["RIGHT"] = "right";
    VisionPrescriptionLensSpecificationEyeEnum["LEFT"] = "left";
})(VisionPrescriptionLensSpecificationEyeEnum || (VisionPrescriptionLensSpecificationEyeEnum = {}));
/**
 * Code Values for the VisionPrescription.status field
 */
export var VisionPrescriptionStatusEnum;
(function (VisionPrescriptionStatusEnum) {
    VisionPrescriptionStatusEnum["ACTIVE"] = "active";
    VisionPrescriptionStatusEnum["CANCELLED"] = "cancelled";
    VisionPrescriptionStatusEnum["DRAFT"] = "draft";
    VisionPrescriptionStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(VisionPrescriptionStatusEnum || (VisionPrescriptionStatusEnum = {}));
//# sourceMappingURL=VisionPrescription.js.map