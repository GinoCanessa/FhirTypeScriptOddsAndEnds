// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicationKnowledge
import * as fhir from '../fhir.js';
import { MedicationknowledgePackageTypeValueSet, } from '../fhirValueSets/MedicationknowledgePackageTypeValueSet.js';
import { MedicationknowledgeCharacteristicValueSet, } from '../fhirValueSets/MedicationknowledgeCharacteristicValueSet.js';
import { MedicationCodesValueSet, } from '../fhirValueSets/MedicationCodesValueSet.js';
import { MedicationknowledgeStatusValueSet, } from '../fhirValueSets/MedicationknowledgeStatusValueSet.js';
import { MedicationFormCodesValueSet, } from '../fhirValueSets/MedicationFormCodesValueSet.js';
import { RouteCodesValueSet, } from '../fhirValueSets/RouteCodesValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Associated or related knowledge about a medication.
 */
export class MedicationKnowledgeRelatedMedicationKnowledge extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRelatedMedicationKnowledge - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicationKnowledgeRelatedMedicationKnowledge';
        /**
         * Associated documentation about the associated medication knowledge.
         */
        this.reference = [];
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['reference']) {
            this.reference = source.reference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reference = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['type']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property type:fhir.CodeableConcept fhir: MedicationKnowledge.relatedMedicationKnowledge.type:CodeableConcept", }));
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (!this['reference']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property reference:fhir.Reference[] fhir: MedicationKnowledge.relatedMedicationKnowledge.reference:Reference", }));
        }
        else if (!Array.isArray(this.reference)) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue, diagnostics: "Found scalar in array property reference:fhir.Reference[] fhir: MedicationKnowledge.relatedMedicationKnowledge.reference:Reference", }));
        }
        else if (this.reference.length === 0) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property reference:fhir.Reference[] fhir: MedicationKnowledge.relatedMedicationKnowledge.reference:Reference", }));
        }
        if (this["reference"]) {
            this.reference.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Associated documentation about the medication.
 */
export class MedicationKnowledgeMonograph extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeMonograph - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicationKnowledgeMonograph';
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['source']) {
            this.source = new fhir.Reference(source.source);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["source"]) {
            outcome.issue.push(...this.source.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Identifies a particular constituent of interest in the product.
 */
export class MedicationKnowledgeIngredient extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeIngredient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicationKnowledgeIngredient';
        this.__itemIsChoice = true;
        if (source['item']) {
            this.item = source.item;
        }
        else if (source['itemCodeableConcept']) {
            this.item = new fhir.CodeableConcept(source.itemCodeableConcept);
        }
        else if (source['itemReference']) {
            this.item = new fhir.Reference(source.itemReference);
        }
        else {
            this.item = null;
        }
        if (source['isActive']) {
            this.isActive = new fhir.FhirBoolean({ value: source.isActive });
        }
        if (source['strength']) {
            this.strength = new fhir.Ratio(source.strength);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['item']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property item: fhir: MedicationKnowledge.ingredient.item[x]:", }));
        }
        if (this["isActive"]) {
            outcome.issue.push(...this.isActive.doModelValidation().issue);
        }
        if (this["strength"]) {
            outcome.issue.push(...this.strength.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * The price of the medication.
 */
export class MedicationKnowledgeCost extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeCost - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicationKnowledgeCost';
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['source']) {
            this.source = new fhir.FhirString({ value: source.source });
        }
        if (source['cost']) {
            this.cost = new fhir.Money(source.cost);
        }
        else {
            this.cost = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['type']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property type:fhir.CodeableConcept fhir: MedicationKnowledge.cost.type:CodeableConcept", }));
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["source"]) {
            outcome.issue.push(...this.source.doModelValidation().issue);
        }
        if (!this['cost']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property cost:fhir.Money fhir: MedicationKnowledge.cost.cost:Money", }));
        }
        if (this["cost"]) {
            outcome.issue.push(...this.cost.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * The program under which the medication is reviewed.
 */
export class MedicationKnowledgeMonitoringProgram extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeMonitoringProgram - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicationKnowledgeMonitoringProgram';
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["name"]) {
            outcome.issue.push(...this.name.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Dosage for the medication for the specific guidelines.
 */
export class MedicationKnowledgeAdministrationGuidelinesDosage extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeAdministrationGuidelinesDosage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicationKnowledgeAdministrationGuidelinesDosage';
        /**
         * Dosage for the medication for the specific guidelines.
         */
        this.dosage = [];
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['dosage']) {
            this.dosage = source.dosage.map((x) => new fhir.Dosage(x));
        }
        else {
            this.dosage = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['type']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property type:fhir.CodeableConcept fhir: MedicationKnowledge.administrationGuidelines.dosage.type:CodeableConcept", }));
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (!this['dosage']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property dosage:fhir.Dosage[] fhir: MedicationKnowledge.administrationGuidelines.dosage.dosage:Dosage", }));
        }
        else if (!Array.isArray(this.dosage)) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue, diagnostics: "Found scalar in array property dosage:fhir.Dosage[] fhir: MedicationKnowledge.administrationGuidelines.dosage.dosage:Dosage", }));
        }
        else if (this.dosage.length === 0) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property dosage:fhir.Dosage[] fhir: MedicationKnowledge.administrationGuidelines.dosage.dosage:Dosage", }));
        }
        if (this["dosage"]) {
            this.dosage.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Characteristics of the patient that are relevant to the administration guidelines (for example, height, weight, gender, etc.).
 */
export class MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics';
        this.__characteristicIsChoice = true;
        /**
         * The specific characteristic (e.g. height, weight, gender, etc.).
         */
        this.value = [];
        if (source['characteristic']) {
            this.characteristic = source.characteristic;
        }
        else if (source['characteristicCodeableConcept']) {
            this.characteristic = new fhir.CodeableConcept(source.characteristicCodeableConcept);
        }
        else if (source['characteristicQuantity']) {
            this.characteristic = new fhir.Quantity(source.characteristicQuantity);
        }
        else {
            this.characteristic = null;
        }
        if (source['value']) {
            this.value = source.value.map((x) => new fhir.FhirString({ value: x }));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['characteristic']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property characteristic: fhir: MedicationKnowledge.administrationGuidelines.patientCharacteristics.characteristic[x]:", }));
        }
        if (this["value"]) {
            this.value.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Guidelines for the administration of the medication.
 */
export class MedicationKnowledgeAdministrationGuidelines extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeAdministrationGuidelines - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicationKnowledgeAdministrationGuidelines';
        /**
         * Dosage for the medication for the specific guidelines.
         */
        this.dosage = [];
        this.__indicationIsChoice = true;
        /**
         * Characteristics of the patient that are relevant to the administration guidelines (for example, height, weight, gender, etc.).
         */
        this.patientCharacteristics = [];
        if (source['dosage']) {
            this.dosage = source.dosage.map((x) => new fhir.MedicationKnowledgeAdministrationGuidelinesDosage(x));
        }
        if (source['indication']) {
            this.indication = source.indication;
        }
        else if (source['indicationCodeableConcept']) {
            this.indication = new fhir.CodeableConcept(source.indicationCodeableConcept);
        }
        else if (source['indicationReference']) {
            this.indication = new fhir.Reference(source.indicationReference);
        }
        if (source['patientCharacteristics']) {
            this.patientCharacteristics = source.patientCharacteristics.map((x) => new fhir.MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["dosage"]) {
            this.dosage.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["patientCharacteristics"]) {
            this.patientCharacteristics.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Categorization of the medication within a formulary or classification system.
 */
export class MedicationKnowledgeMedicineClassification extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeMedicineClassification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicationKnowledgeMedicineClassification';
        /**
         * Specific category assigned to the medication (e.g. anti-infective, anti-hypertensive, antibiotic, etc.).
         */
        this.classification = [];
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['classification']) {
            this.classification = source.classification.map((x) => new fhir.CodeableConcept(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['type']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property type:fhir.CodeableConcept fhir: MedicationKnowledge.medicineClassification.type:CodeableConcept", }));
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["classification"]) {
            this.classification.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Information that only applies to packages (not products).
 */
export class MedicationKnowledgePackaging extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgePackaging - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicationKnowledgePackaging';
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
    }
    /**
     * Example-bound Value Set for type
     */
    static typeExampleValueSet() {
        return MedicationknowledgePackageTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["quantity"]) {
            outcome.issue.push(...this.quantity.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.
 */
export class MedicationKnowledgeDrugCharacteristic extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeDrugCharacteristic - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicationKnowledgeDrugCharacteristic';
        this.__valueIsChoice = true;
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueCodeableConcept']) {
            this.value = new fhir.CodeableConcept(source.valueCodeableConcept);
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueBase64Binary']) {
            this.value = new fhir.FhirBase64Binary({ value: source.valueBase64Binary });
        }
    }
    /**
     * Example-bound Value Set for type
     */
    static typeExampleValueSet() {
        return MedicationknowledgeCharacteristicValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Specifies if changes are allowed when dispensing a medication from a regulatory perspective.
 */
export class MedicationKnowledgeRegulatorySubstitution extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRegulatorySubstitution - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicationKnowledgeRegulatorySubstitution';
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['allowed']) {
            this.allowed = new fhir.FhirBoolean({ value: source.allowed });
        }
        else {
            this.allowed = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['type']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property type:fhir.CodeableConcept fhir: MedicationKnowledge.regulatory.substitution.type:CodeableConcept", }));
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (!this['allowed']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property allowed:fhir.FhirBoolean fhir: MedicationKnowledge.regulatory.substitution.allowed:boolean", }));
        }
        if (this["allowed"]) {
            outcome.issue.push(...this.allowed.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Specifies the schedule of a medication in jurisdiction.
 */
export class MedicationKnowledgeRegulatorySchedule extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRegulatorySchedule - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicationKnowledgeRegulatorySchedule';
        if (source['schedule']) {
            this.schedule = new fhir.CodeableConcept(source.schedule);
        }
        else {
            this.schedule = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['schedule']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property schedule:fhir.CodeableConcept fhir: MedicationKnowledge.regulatory.schedule.schedule:CodeableConcept", }));
        }
        if (this["schedule"]) {
            outcome.issue.push(...this.schedule.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * The maximum number of units of the medication that can be dispensed in a period.
 */
export class MedicationKnowledgeRegulatoryMaxDispense extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRegulatoryMaxDispense - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicationKnowledgeRegulatoryMaxDispense';
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        else {
            this.quantity = null;
        }
        if (source['period']) {
            this.period = new fhir.Duration(source.period);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['quantity']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property quantity:fhir.Quantity fhir: MedicationKnowledge.regulatory.maxDispense.quantity:Quantity", }));
        }
        if (this["quantity"]) {
            outcome.issue.push(...this.quantity.doModelValidation().issue);
        }
        if (this["period"]) {
            outcome.issue.push(...this.period.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Regulatory information about a medication.
 */
export class MedicationKnowledgeRegulatory extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRegulatory - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicationKnowledgeRegulatory';
        /**
         * Specifies if changes are allowed when dispensing a medication from a regulatory perspective.
         */
        this.substitution = [];
        /**
         * Specifies the schedule of a medication in jurisdiction.
         */
        this.schedule = [];
        if (source['regulatoryAuthority']) {
            this.regulatoryAuthority = new fhir.Reference(source.regulatoryAuthority);
        }
        else {
            this.regulatoryAuthority = null;
        }
        if (source['substitution']) {
            this.substitution = source.substitution.map((x) => new fhir.MedicationKnowledgeRegulatorySubstitution(x));
        }
        if (source['schedule']) {
            this.schedule = source.schedule.map((x) => new fhir.MedicationKnowledgeRegulatorySchedule(x));
        }
        if (source['maxDispense']) {
            this.maxDispense = new fhir.MedicationKnowledgeRegulatoryMaxDispense(source.maxDispense);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['regulatoryAuthority']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property regulatoryAuthority:fhir.Reference fhir: MedicationKnowledge.regulatory.regulatoryAuthority:Reference", }));
        }
        if (this["regulatoryAuthority"]) {
            outcome.issue.push(...this.regulatoryAuthority.doModelValidation().issue);
        }
        if (this["substitution"]) {
            this.substitution.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["schedule"]) {
            this.schedule.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["maxDispense"]) {
            outcome.issue.push(...this.maxDispense.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * The time course of drug absorption, distribution, metabolism and excretion of a medication from the body.
 */
export class MedicationKnowledgeKinetics extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeKinetics - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicationKnowledgeKinetics';
        /**
         * The drug concentration measured at certain discrete points in time.
         */
        this.areaUnderCurve = [];
        /**
         * The median lethal dose of a drug.
         */
        this.lethalDose50 = [];
        if (source['areaUnderCurve']) {
            this.areaUnderCurve = source.areaUnderCurve.map((x) => new fhir.Quantity(x));
        }
        if (source['lethalDose50']) {
            this.lethalDose50 = source.lethalDose50.map((x) => new fhir.Quantity(x));
        }
        if (source['halfLifePeriod']) {
            this.halfLifePeriod = new fhir.Duration(source.halfLifePeriod);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["areaUnderCurve"]) {
            this.areaUnderCurve.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["lethalDose50"]) {
            this.lethalDose50.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["halfLifePeriod"]) {
            outcome.issue.push(...this.halfLifePeriod.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Information about a medication that is used to support knowledge.
 */
export class MedicationKnowledge extends fhir.DomainResource {
    /**
     * Default constructor for MedicationKnowledge - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicationKnowledge';
        /**
         * Additional names for a medication, for example, the name(s) given to a medication in different countries.  For example, acetaminophen and paracetamol or salbutamol and albuterol.
         */
        this.synonym = [];
        /**
         * Associated or related knowledge about a medication.
         */
        this.relatedMedicationKnowledge = [];
        /**
         * Associated or related medications.  For example, if the medication is a branded product (e.g. Crestor), this is the Therapeutic Moeity (e.g. Rosuvastatin) or if this is a generic medication (e.g. Rosuvastatin), this would link to a branded product (e.g. Crestor).
         */
        this.associatedMedication = [];
        /**
         * Category of the medication or product (e.g. branded product, therapeutic moeity, generic product, innovator product, etc.).
         */
        this.productType = [];
        /**
         * Associated documentation about the medication.
         */
        this.monograph = [];
        /**
         * Identifies a particular constituent of interest in the product.
         */
        this.ingredient = [];
        /**
         * The intended or approved route of administration.
         */
        this.intendedRoute = [];
        /**
         * The price of the medication.
         */
        this.cost = [];
        /**
         * The program under which the medication is reviewed.
         */
        this.monitoringProgram = [];
        /**
         * Guidelines for the administration of the medication.
         */
        this.administrationGuidelines = [];
        /**
         * Categorization of the medication within a formulary or classification system.
         */
        this.medicineClassification = [];
        /**
         * Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.
         */
        this.drugCharacteristic = [];
        /**
         * Potential clinical issue with or between medication(s) (for example, drug-drug interaction, drug-disease contraindication, drug-allergy interaction, etc.).
         */
        this.contraindication = [];
        /**
         * Regulatory information about a medication.
         */
        this.regulatory = [];
        /**
         * The time course of drug absorption, distribution, metabolism and excretion of a medication from the body.
         */
        this.kinetics = [];
        this.resourceType = 'MedicationKnowledge';
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['status']) {
            this.status = source.status;
        }
        if (source['manufacturer']) {
            this.manufacturer = new fhir.Reference(source.manufacturer);
        }
        if (source['doseForm']) {
            this.doseForm = new fhir.CodeableConcept(source.doseForm);
        }
        if (source['amount']) {
            this.amount = new fhir.Quantity(source.amount);
        }
        if (source['synonym']) {
            this.synonym = source.synonym.map((x) => new fhir.FhirString({ value: x }));
        }
        if (source['relatedMedicationKnowledge']) {
            this.relatedMedicationKnowledge = source.relatedMedicationKnowledge.map((x) => new fhir.MedicationKnowledgeRelatedMedicationKnowledge(x));
        }
        if (source['associatedMedication']) {
            this.associatedMedication = source.associatedMedication.map((x) => new fhir.Reference(x));
        }
        if (source['productType']) {
            this.productType = source.productType.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['monograph']) {
            this.monograph = source.monograph.map((x) => new fhir.MedicationKnowledgeMonograph(x));
        }
        if (source['ingredient']) {
            this.ingredient = source.ingredient.map((x) => new fhir.MedicationKnowledgeIngredient(x));
        }
        if (source['preparationInstruction']) {
            this.preparationInstruction = new fhir.FhirMarkdown({ value: source.preparationInstruction });
        }
        if (source['intendedRoute']) {
            this.intendedRoute = source.intendedRoute.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['cost']) {
            this.cost = source.cost.map((x) => new fhir.MedicationKnowledgeCost(x));
        }
        if (source['monitoringProgram']) {
            this.monitoringProgram = source.monitoringProgram.map((x) => new fhir.MedicationKnowledgeMonitoringProgram(x));
        }
        if (source['administrationGuidelines']) {
            this.administrationGuidelines = source.administrationGuidelines.map((x) => new fhir.MedicationKnowledgeAdministrationGuidelines(x));
        }
        if (source['medicineClassification']) {
            this.medicineClassification = source.medicineClassification.map((x) => new fhir.MedicationKnowledgeMedicineClassification(x));
        }
        if (source['packaging']) {
            this.packaging = new fhir.MedicationKnowledgePackaging(source.packaging);
        }
        if (source['drugCharacteristic']) {
            this.drugCharacteristic = source.drugCharacteristic.map((x) => new fhir.MedicationKnowledgeDrugCharacteristic(x));
        }
        if (source['contraindication']) {
            this.contraindication = source.contraindication.map((x) => new fhir.Reference(x));
        }
        if (source['regulatory']) {
            this.regulatory = source.regulatory.map((x) => new fhir.MedicationKnowledgeRegulatory(x));
        }
        if (source['kinetics']) {
            this.kinetics = source.kinetics.map((x) => new fhir.MedicationKnowledgeKinetics(x));
        }
    }
    /**
     * Example-bound Value Set for code
     */
    static codeExampleValueSet() {
        return MedicationCodesValueSet;
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return MedicationknowledgeStatusValueSet;
    }
    /**
     * Example-bound Value Set for doseForm
     */
    static doseFormExampleValueSet() {
        return MedicationFormCodesValueSet;
    }
    /**
     * Example-bound Value Set for intendedRoute
     */
    static intendedRouteExampleValueSet() {
        return RouteCodesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'MedicationKnowledge' fhir: MedicationKnowledge.resourceType:'MedicationKnowledge'", }));
        }
        if (this["code"]) {
            outcome.issue.push(...this.code.doModelValidation().issue);
        }
        if (this["manufacturer"]) {
            outcome.issue.push(...this.manufacturer.doModelValidation().issue);
        }
        if (this["doseForm"]) {
            outcome.issue.push(...this.doseForm.doModelValidation().issue);
        }
        if (this["amount"]) {
            outcome.issue.push(...this.amount.doModelValidation().issue);
        }
        if (this["synonym"]) {
            this.synonym.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["relatedMedicationKnowledge"]) {
            this.relatedMedicationKnowledge.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["associatedMedication"]) {
            this.associatedMedication.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["productType"]) {
            this.productType.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["monograph"]) {
            this.monograph.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["ingredient"]) {
            this.ingredient.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["preparationInstruction"]) {
            outcome.issue.push(...this.preparationInstruction.doModelValidation().issue);
        }
        if (this["intendedRoute"]) {
            this.intendedRoute.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["cost"]) {
            this.cost.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["monitoringProgram"]) {
            this.monitoringProgram.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["administrationGuidelines"]) {
            this.administrationGuidelines.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["medicineClassification"]) {
            this.medicineClassification.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["packaging"]) {
            outcome.issue.push(...this.packaging.doModelValidation().issue);
        }
        if (this["drugCharacteristic"]) {
            this.drugCharacteristic.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["contraindication"]) {
            this.contraindication.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["regulatory"]) {
            this.regulatory.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["kinetics"]) {
            this.kinetics.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=MedicationKnowledge.js.map