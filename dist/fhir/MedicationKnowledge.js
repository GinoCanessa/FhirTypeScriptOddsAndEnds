// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Associated or related knowledge about a medication.
 */
export class MedicationKnowledgeRelatedMedicationKnowledge extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRelatedMedicationKnowledge - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.reference = null;
        if (source["reference"]) {
            this.reference = source.reference.map((x) => new fhir.Reference(x));
        }
        if (this.reference === undefined) {
            this.reference = null;
        }
        this.type = null;
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (this.type === undefined) {
            this.type = null;
        }
    }
    /**
     * Check if the current MedicationKnowledgeRelatedMedicationKnowledge contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if ((!this["reference"]) || (this["reference"].length === 0)) {
            missingElements.push("reference");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicationKnowledgeRelatedMedicationKnowledge from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MedicationKnowledgeRelatedMedicationKnowledge(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationKnowledgeRelatedMedicationKnowledge is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Associated documentation about the medication.
 */
export class MedicationKnowledgeMonograph extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeMonograph - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["source"]) {
            this.source = new fhir.Reference(source.source);
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current MedicationKnowledgeMonograph contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicationKnowledgeMonograph from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MedicationKnowledgeMonograph(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationKnowledgeMonograph is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Identifies a particular constituent of interest in the product.
 */
export class MedicationKnowledgeIngredient extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeIngredient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["isActive"]) {
            this.isActive = source.isActive;
        }
        if (source["_isActive"]) {
            this._isActive = new fhir.FhirElement(source._isActive);
        }
        if (source["itemCodeableConcept"]) {
            this.itemCodeableConcept = new fhir.CodeableConcept(source.itemCodeableConcept);
        }
        if (source["itemReference"]) {
            this.itemReference = new fhir.Reference(source.itemReference);
        }
        if (source["strength"]) {
            this.strength = new fhir.Ratio(source.strength);
        }
    }
    /**
     * Check if the current MedicationKnowledgeIngredient contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicationKnowledgeIngredient from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MedicationKnowledgeIngredient(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationKnowledgeIngredient is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The price of the medication.
 */
export class MedicationKnowledgeCost extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeCost - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.cost = null;
        if (source["cost"]) {
            this.cost = new fhir.Money(source.cost);
        }
        if (this.cost === undefined) {
            this.cost = null;
        }
        if (source["source"]) {
            this.source = source.source;
        }
        if (source["_source"]) {
            this._source = new fhir.FhirElement(source._source);
        }
        this.type = null;
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (this.type === undefined) {
            this.type = null;
        }
    }
    /**
     * Check if the current MedicationKnowledgeCost contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["cost"] === undefined) {
            missingElements.push("cost");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicationKnowledgeCost from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MedicationKnowledgeCost(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationKnowledgeCost is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The program under which the medication is reviewed.
 */
export class MedicationKnowledgeMonitoringProgram extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeMonitoringProgram - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current MedicationKnowledgeMonitoringProgram contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicationKnowledgeMonitoringProgram from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MedicationKnowledgeMonitoringProgram(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationKnowledgeMonitoringProgram is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Dosage for the medication for the specific guidelines.
 */
export class MedicationKnowledgeAdministrationGuidelinesDosage extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeAdministrationGuidelinesDosage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.dosage = null;
        if (source["dosage"]) {
            this.dosage = source.dosage.map((x) => new fhir.Dosage(x));
        }
        if (this.dosage === undefined) {
            this.dosage = null;
        }
        this.type = null;
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (this.type === undefined) {
            this.type = null;
        }
    }
    /**
     * Check if the current MedicationKnowledgeAdministrationGuidelinesDosage contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if ((!this["dosage"]) || (this["dosage"].length === 0)) {
            missingElements.push("dosage");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicationKnowledgeAdministrationGuidelinesDosage from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MedicationKnowledgeAdministrationGuidelinesDosage(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationKnowledgeAdministrationGuidelinesDosage is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Characteristics of the patient that are relevant to the administration guidelines (for example, height, weight, gender, etc.).
 */
export class MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["characteristicCodeableConcept"]) {
            this.characteristicCodeableConcept = new fhir.CodeableConcept(source.characteristicCodeableConcept);
        }
        if (source["characteristicQuantity"]) {
            this.characteristicQuantity = new fhir.Quantity(source.characteristicQuantity);
        }
        if (source["value"]) {
            this.value = source.value.map((x) => (x));
        }
        if (source["_value"]) {
            this._value = source._value.map((x) => new fhir.FhirElement(x));
        }
    }
    /**
     * Check if the current MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Guidelines for the administration of the medication.
 */
export class MedicationKnowledgeAdministrationGuidelines extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeAdministrationGuidelines - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["dosage"]) {
            this.dosage = source.dosage.map((x) => new fhir.MedicationKnowledgeAdministrationGuidelinesDosage(x));
        }
        if (source["indicationCodeableConcept"]) {
            this.indicationCodeableConcept = new fhir.CodeableConcept(source.indicationCodeableConcept);
        }
        if (source["indicationReference"]) {
            this.indicationReference = new fhir.Reference(source.indicationReference);
        }
        if (source["patientCharacteristics"]) {
            this.patientCharacteristics = source.patientCharacteristics.map((x) => new fhir.MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(x));
        }
    }
    /**
     * Check if the current MedicationKnowledgeAdministrationGuidelines contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicationKnowledgeAdministrationGuidelines from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MedicationKnowledgeAdministrationGuidelines(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationKnowledgeAdministrationGuidelines is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Categorization of the medication within a formulary or classification system.
 */
export class MedicationKnowledgeMedicineClassification extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeMedicineClassification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["classification"]) {
            this.classification = source.classification.map((x) => new fhir.CodeableConcept(x));
        }
        this.type = null;
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (this.type === undefined) {
            this.type = null;
        }
    }
    /**
     * Check if the current MedicationKnowledgeMedicineClassification contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicationKnowledgeMedicineClassification from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MedicationKnowledgeMedicineClassification(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationKnowledgeMedicineClassification is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Information that only applies to packages (not products).
 */
export class MedicationKnowledgePackaging extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgePackaging - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["quantity"]) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current MedicationKnowledgePackaging contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicationKnowledgePackaging from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MedicationKnowledgePackaging(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationKnowledgePackaging is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.
 */
export class MedicationKnowledgeDrugCharacteristic extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeDrugCharacteristic - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source["valueCodeableConcept"]) {
            this.valueCodeableConcept = new fhir.CodeableConcept(source.valueCodeableConcept);
        }
        if (source["valueString"]) {
            this.valueString = source.valueString;
        }
        if (source["_valueString"]) {
            this._valueString = new fhir.FhirElement(source._valueString);
        }
        if (source["valueQuantity"]) {
            this.valueQuantity = new fhir.Quantity(source.valueQuantity);
        }
        if (source["valueBase64Binary"]) {
            this.valueBase64Binary = source.valueBase64Binary;
        }
        if (source["_valueBase64Binary"]) {
            this._valueBase64Binary = new fhir.FhirElement(source._valueBase64Binary);
        }
    }
    /**
     * Check if the current MedicationKnowledgeDrugCharacteristic contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicationKnowledgeDrugCharacteristic from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MedicationKnowledgeDrugCharacteristic(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationKnowledgeDrugCharacteristic is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Specifies if changes are allowed when dispensing a medication from a regulatory perspective.
 */
export class MedicationKnowledgeRegulatorySubstitution extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRegulatorySubstitution - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.allowed = null;
        if (source["allowed"]) {
            this.allowed = source.allowed;
        }
        if (this.allowed === undefined) {
            this.allowed = null;
        }
        if (source["_allowed"]) {
            this._allowed = new fhir.FhirElement(source._allowed);
        }
        this.type = null;
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (this.type === undefined) {
            this.type = null;
        }
    }
    /**
     * Check if the current MedicationKnowledgeRegulatorySubstitution contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["allowed"] === undefined) {
            missingElements.push("allowed");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicationKnowledgeRegulatorySubstitution from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MedicationKnowledgeRegulatorySubstitution(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationKnowledgeRegulatorySubstitution is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Specifies the schedule of a medication in jurisdiction.
 */
export class MedicationKnowledgeRegulatorySchedule extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRegulatorySchedule - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.schedule = null;
        if (source["schedule"]) {
            this.schedule = new fhir.CodeableConcept(source.schedule);
        }
        if (this.schedule === undefined) {
            this.schedule = null;
        }
    }
    /**
     * Check if the current MedicationKnowledgeRegulatorySchedule contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["schedule"] === undefined) {
            missingElements.push("schedule");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicationKnowledgeRegulatorySchedule from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MedicationKnowledgeRegulatorySchedule(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationKnowledgeRegulatorySchedule is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The maximum number of units of the medication that can be dispensed in a period.
 */
export class MedicationKnowledgeRegulatoryMaxDispense extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRegulatoryMaxDispense - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["period"]) {
            this.period = new fhir.Duration(source.period);
        }
        this.quantity = null;
        if (source["quantity"]) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (this.quantity === undefined) {
            this.quantity = null;
        }
    }
    /**
     * Check if the current MedicationKnowledgeRegulatoryMaxDispense contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["quantity"] === undefined) {
            missingElements.push("quantity");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicationKnowledgeRegulatoryMaxDispense from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MedicationKnowledgeRegulatoryMaxDispense(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationKnowledgeRegulatoryMaxDispense is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Regulatory information about a medication.
 */
export class MedicationKnowledgeRegulatory extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRegulatory - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["maxDispense"]) {
            this.maxDispense = new fhir.MedicationKnowledgeRegulatoryMaxDispense(source.maxDispense);
        }
        this.regulatoryAuthority = null;
        if (source["regulatoryAuthority"]) {
            this.regulatoryAuthority = new fhir.Reference(source.regulatoryAuthority);
        }
        if (this.regulatoryAuthority === undefined) {
            this.regulatoryAuthority = null;
        }
        if (source["schedule"]) {
            this.schedule = source.schedule.map((x) => new fhir.MedicationKnowledgeRegulatorySchedule(x));
        }
        if (source["substitution"]) {
            this.substitution = source.substitution.map((x) => new fhir.MedicationKnowledgeRegulatorySubstitution(x));
        }
    }
    /**
     * Check if the current MedicationKnowledgeRegulatory contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["regulatoryAuthority"] === undefined) {
            missingElements.push("regulatoryAuthority");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicationKnowledgeRegulatory from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MedicationKnowledgeRegulatory(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationKnowledgeRegulatory is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The time course of drug absorption, distribution, metabolism and excretion of a medication from the body.
 */
export class MedicationKnowledgeKinetics extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeKinetics - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["areaUnderCurve"]) {
            this.areaUnderCurve = source.areaUnderCurve.map((x) => new fhir.Quantity(x));
        }
        if (source["halfLifePeriod"]) {
            this.halfLifePeriod = new fhir.Duration(source.halfLifePeriod);
        }
        if (source["lethalDose50"]) {
            this.lethalDose50 = source.lethalDose50.map((x) => new fhir.Quantity(x));
        }
    }
    /**
     * Check if the current MedicationKnowledgeKinetics contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicationKnowledgeKinetics from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MedicationKnowledgeKinetics(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationKnowledgeKinetics is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Information about a medication that is used to support knowledge.
 */
export class MedicationKnowledge extends fhir.DomainResource {
    /**
     * Default constructor for MedicationKnowledge - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'MedicationKnowledge';
        if (source["administrationGuidelines"]) {
            this.administrationGuidelines = source.administrationGuidelines.map((x) => new fhir.MedicationKnowledgeAdministrationGuidelines(x));
        }
        if (source["amount"]) {
            this.amount = new fhir.Quantity(source.amount);
        }
        if (source["associatedMedication"]) {
            this.associatedMedication = source.associatedMedication.map((x) => new fhir.Reference(x));
        }
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source["contraindication"]) {
            this.contraindication = source.contraindication.map((x) => new fhir.Reference(x));
        }
        if (source["cost"]) {
            this.cost = source.cost.map((x) => new fhir.MedicationKnowledgeCost(x));
        }
        if (source["doseForm"]) {
            this.doseForm = new fhir.CodeableConcept(source.doseForm);
        }
        if (source["drugCharacteristic"]) {
            this.drugCharacteristic = source.drugCharacteristic.map((x) => new fhir.MedicationKnowledgeDrugCharacteristic(x));
        }
        if (source["ingredient"]) {
            this.ingredient = source.ingredient.map((x) => new fhir.MedicationKnowledgeIngredient(x));
        }
        if (source["intendedRoute"]) {
            this.intendedRoute = source.intendedRoute.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["kinetics"]) {
            this.kinetics = source.kinetics.map((x) => new fhir.MedicationKnowledgeKinetics(x));
        }
        if (source["manufacturer"]) {
            this.manufacturer = new fhir.Reference(source.manufacturer);
        }
        if (source["medicineClassification"]) {
            this.medicineClassification = source.medicineClassification.map((x) => new fhir.MedicationKnowledgeMedicineClassification(x));
        }
        if (source["monitoringProgram"]) {
            this.monitoringProgram = source.monitoringProgram.map((x) => new fhir.MedicationKnowledgeMonitoringProgram(x));
        }
        if (source["monograph"]) {
            this.monograph = source.monograph.map((x) => new fhir.MedicationKnowledgeMonograph(x));
        }
        if (source["packaging"]) {
            this.packaging = new fhir.MedicationKnowledgePackaging(source.packaging);
        }
        if (source["preparationInstruction"]) {
            this.preparationInstruction = source.preparationInstruction;
        }
        if (source["_preparationInstruction"]) {
            this._preparationInstruction = new fhir.FhirElement(source._preparationInstruction);
        }
        if (source["productType"]) {
            this.productType = source.productType.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["regulatory"]) {
            this.regulatory = source.regulatory.map((x) => new fhir.MedicationKnowledgeRegulatory(x));
        }
        if (source["relatedMedicationKnowledge"]) {
            this.relatedMedicationKnowledge = source.relatedMedicationKnowledge.map((x) => new fhir.MedicationKnowledgeRelatedMedicationKnowledge(x));
        }
        if (source["status"]) {
            this.status = source.status;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["synonym"]) {
            this.synonym = source.synonym.map((x) => (x));
        }
        if (source["_synonym"]) {
            this._synonym = source._synonym.map((x) => new fhir.FhirElement(x));
        }
    }
    /**
     * Check if the current MedicationKnowledge contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicationKnowledge from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MedicationKnowledge(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicationKnowledge is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the MedicationKnowledge.status field
 */
export var MedicationKnowledgeStatusEnum;
(function (MedicationKnowledgeStatusEnum) {
    MedicationKnowledgeStatusEnum["ACTIVE"] = "active";
    MedicationKnowledgeStatusEnum["INACTIVE"] = "inactive";
    MedicationKnowledgeStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(MedicationKnowledgeStatusEnum || (MedicationKnowledgeStatusEnum = {}));
//# sourceMappingURL=MedicationKnowledge.js.map