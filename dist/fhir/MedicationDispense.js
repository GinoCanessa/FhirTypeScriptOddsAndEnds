// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicationDispense
import * as fhir from '../fhir.js';
import { MedicationdispensePerformerFunctionValueSet, } from '../fhirValueSets/MedicationdispensePerformerFunctionValueSet.js';
import { V3ActSubstanceAdminSubstitutionCodeValueSet, } from '../fhirValueSets/V3ActSubstanceAdminSubstitutionCodeValueSet.js';
import { V3SubstanceAdminSubstitutionReasonValueSet, } from '../fhirValueSets/V3SubstanceAdminSubstitutionReasonValueSet.js';
import { MedicationdispenseStatusValueSet, } from '../fhirValueSets/MedicationdispenseStatusValueSet.js';
import { MedicationdispenseCategoryValueSet, } from '../fhirValueSets/MedicationdispenseCategoryValueSet.js';
import { V3ActPharmacySupplyTypeValueSet, } from '../fhirValueSets/V3ActPharmacySupplyTypeValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Indicates who or what performed the event.
 */
export class MedicationDispensePerformer extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationDispensePerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicationDispensePerformer';
        if (source['function']) {
            this.function = new fhir.CodeableConcept(source.function);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        else {
            this.actor = null;
        }
    }
    /**
     * Example-bound Value Set for function
     */
    static functionExampleValueSet() {
        return MedicationdispensePerformerFunctionValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["function"]) {
            outcome.issue.push(...this.function.doModelValidation().issue);
        }
        if (!this['actor']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property actor:fhir.Reference fhir: MedicationDispense.performer.actor:Reference", }));
        }
        if (this["actor"]) {
            outcome.issue.push(...this.actor.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Indicates whether or not substitution was made as part of the dispense.  In some cases, substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.
 */
export class MedicationDispenseSubstitution extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationDispenseSubstitution - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicationDispenseSubstitution';
        /**
         * Indicates the reason for the substitution (or lack of substitution) from what was prescribed.
         */
        this.reason = [];
        /**
         * The person or organization that has primary responsibility for the substitution.
         */
        this.responsibleParty = [];
        if (source['wasSubstituted']) {
            this.wasSubstituted = new fhir.FhirBoolean({ value: source.wasSubstituted });
        }
        else {
            this.wasSubstituted = null;
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['responsibleParty']) {
            this.responsibleParty = source.responsibleParty.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Example-bound Value Set for type
     */
    static typeExampleValueSet() {
        return V3ActSubstanceAdminSubstitutionCodeValueSet;
    }
    /**
     * Example-bound Value Set for reason
     */
    static reasonExampleValueSet() {
        return V3SubstanceAdminSubstitutionReasonValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['wasSubstituted']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property wasSubstituted:fhir.FhirBoolean fhir: MedicationDispense.substitution.wasSubstituted:boolean", }));
        }
        if (this["wasSubstituted"]) {
            outcome.issue.push(...this.wasSubstituted.doModelValidation().issue);
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["reason"]) {
            this.reason.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["responsibleParty"]) {
            this.responsibleParty.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
 */
export class MedicationDispense extends fhir.DomainResource {
    /**
     * Default constructor for MedicationDispense - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicationDispense';
        /**
         * This is a business identifier, not a resource identifier.
         */
        this.identifier = [];
        /**
         * The procedure that trigger the dispense.
         */
        this.partOf = [];
        this.__statusReasonIsChoice = true;
        this.__medicationIsChoice = true;
        /**
         * Additional information that supports the medication being dispensed.
         */
        this.supportingInformation = [];
        /**
         * Indicates who or what performed the event.
         */
        this.performer = [];
        /**
         * Maps to basedOn in Event logical model.
         */
        this.authorizingPrescription = [];
        /**
         * Identifies the person who picked up the medication.  This will usually be a patient or their caregiver, but some cases exist where it can be a healthcare professional.
         */
        this.receiver = [];
        /**
         * Extra information about the dispense that could not be conveyed in the other attributes.
         */
        this.note = [];
        /**
         * When the dose or rate is intended to change over the entire administration period (e.g. Tapering dose prescriptions), multiple instances of dosage instructions will need to be supplied to convey the different doses/rates.
         * The pharmacist reviews the medication order prior to dispense and updates the dosageInstruction based on the actual product being dispensed.
         */
        this.dosageInstruction = [];
        /**
         * This element can include a detected issue that has been identified either by a decision support system or by a clinician and may include information on the steps that were taken to address the issue.
         */
        this.detectedIssue = [];
        /**
         * This might not include provenances for all versions of the request – only those deemed “relevant” or important. This SHALL NOT include the Provenance associated with this current version of the resource. (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update. Until then, it can be queried directly as the Provenance that points to this version using _revinclude All Provenances should have some historical version of this Request as their subject.).
         */
        this.eventHistory = [];
        this.resourceType = 'MedicationDispense';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['statusReason']) {
            this.statusReason = source.statusReason;
        }
        else if (source['statusReasonCodeableConcept']) {
            this.statusReason = new fhir.CodeableConcept(source.statusReasonCodeableConcept);
        }
        else if (source['statusReasonReference']) {
            this.statusReason = new fhir.Reference(source.statusReasonReference);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['medication']) {
            this.medication = source.medication;
        }
        else if (source['medicationCodeableConcept']) {
            this.medication = new fhir.CodeableConcept(source.medicationCodeableConcept);
        }
        else if (source['medicationReference']) {
            this.medication = new fhir.Reference(source.medicationReference);
        }
        else {
            this.medication = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context);
        }
        if (source['supportingInformation']) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x));
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.MedicationDispensePerformer(x));
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['authorizingPrescription']) {
            this.authorizingPrescription = source.authorizingPrescription.map((x) => new fhir.Reference(x));
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['daysSupply']) {
            this.daysSupply = new fhir.Quantity(source.daysSupply);
        }
        if (source['whenPrepared']) {
            this.whenPrepared = new fhir.FhirDateTime({ value: source.whenPrepared });
        }
        if (source['whenHandedOver']) {
            this.whenHandedOver = new fhir.FhirDateTime({ value: source.whenHandedOver });
        }
        if (source['destination']) {
            this.destination = new fhir.Reference(source.destination);
        }
        if (source['receiver']) {
            this.receiver = source.receiver.map((x) => new fhir.Reference(x));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['dosageInstruction']) {
            this.dosageInstruction = source.dosageInstruction.map((x) => new fhir.Dosage(x));
        }
        if (source['substitution']) {
            this.substitution = new fhir.MedicationDispenseSubstitution(source.substitution);
        }
        if (source['detectedIssue']) {
            this.detectedIssue = source.detectedIssue.map((x) => new fhir.Reference(x));
        }
        if (source['eventHistory']) {
            this.eventHistory = source.eventHistory.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return MedicationdispenseStatusValueSet;
    }
    /**
     * Preferred-bound Value Set for category
     */
    static categoryPreferredValueSet() {
        return MedicationdispenseCategoryValueSet;
    }
    /**
     * Example-bound Value Set for type
     */
    static typeExampleValueSet() {
        return V3ActPharmacySupplyTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'MedicationDispense' fhir: MedicationDispense.resourceType:'MedicationDispense'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["partOf"]) {
            this.partOf.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:MedicationdispenseStatusValueSetEnum fhir: MedicationDispense.status:code", }));
        }
        if (this["category"]) {
            outcome.issue.push(...this.category.doModelValidation().issue);
        }
        if (!this['medication']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property medication: fhir: MedicationDispense.medication[x]:", }));
        }
        if (this["subject"]) {
            outcome.issue.push(...this.subject.doModelValidation().issue);
        }
        if (this["context"]) {
            outcome.issue.push(...this.context.doModelValidation().issue);
        }
        if (this["supportingInformation"]) {
            this.supportingInformation.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["performer"]) {
            this.performer.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["location"]) {
            outcome.issue.push(...this.location.doModelValidation().issue);
        }
        if (this["authorizingPrescription"]) {
            this.authorizingPrescription.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["quantity"]) {
            outcome.issue.push(...this.quantity.doModelValidation().issue);
        }
        if (this["daysSupply"]) {
            outcome.issue.push(...this.daysSupply.doModelValidation().issue);
        }
        if (this["whenPrepared"]) {
            outcome.issue.push(...this.whenPrepared.doModelValidation().issue);
        }
        if (this["whenHandedOver"]) {
            outcome.issue.push(...this.whenHandedOver.doModelValidation().issue);
        }
        if (this["destination"]) {
            outcome.issue.push(...this.destination.doModelValidation().issue);
        }
        if (this["receiver"]) {
            this.receiver.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["dosageInstruction"]) {
            this.dosageInstruction.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["substitution"]) {
            outcome.issue.push(...this.substitution.doModelValidation().issue);
        }
        if (this["detectedIssue"]) {
            this.detectedIssue.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["eventHistory"]) {
            this.eventHistory.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=MedicationDispense.js.map