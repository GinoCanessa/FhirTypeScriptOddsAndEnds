// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicationDispense
import * as fhir from '../fhir.js';
import { MedicationdispensePerformerFunctionValueSet } from '../fhirValueSets/MedicationdispensePerformerFunctionValueSet.js';
import { V3ActSubstanceAdminSubstitutionCodeValueSet } from '../fhirValueSets/V3ActSubstanceAdminSubstitutionCodeValueSet.js';
import { V3SubstanceAdminSubstitutionReasonValueSet } from '../fhirValueSets/V3SubstanceAdminSubstitutionReasonValueSet.js';
import { MedicationdispenseStatusValueSet } from '../fhirValueSets/MedicationdispenseStatusValueSet.js';
import { MedicationdispenseStatusReasonValueSet } from '../fhirValueSets/MedicationdispenseStatusReasonValueSet.js';
import { MedicationdispenseCategoryValueSet } from '../fhirValueSets/MedicationdispenseCategoryValueSet.js';
import { MedicationCodesValueSet } from '../fhirValueSets/MedicationCodesValueSet.js';
import { V3ActPharmacySupplyTypeValueSet } from '../fhirValueSets/V3ActPharmacySupplyTypeValueSet.js';
/**
 * Indicates who or what performed the event.
 */
export class MedicationDispensePerformer extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationDispensePerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['function']) {
            this.function = new fhir.CodeableConcept(source.function);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        else {
            this.actor = null;
        }
    }
    /**
     * Example-bound Value Set for function
     */
    functionExampleValueSet() {
        return MedicationdispensePerformerFunctionValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["function"]) {
            results.push(...this.function.doModelValidation());
        }
        if (!this["actor"]) {
            results.push(["actor", 'Missing required element: MedicationDispense.performer.actor']);
        }
        if (this["actor"]) {
            results.push(...this.actor.doModelValidation());
        }
        return results;
    }
}
/**
 * Indicates whether or not substitution was made as part of the dispense.  In some cases, substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.
 */
export class MedicationDispenseSubstitution extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationDispenseSubstitution - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['wasSubstituted']) {
            this.wasSubstituted = source.wasSubstituted;
        }
        else {
            this.wasSubstituted = null;
        }
        if (source['_wasSubstituted']) {
            this._wasSubstituted = new fhir.FhirElement(source._wasSubstituted);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['responsibleParty']) {
            this.responsibleParty = source.responsibleParty.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Example-bound Value Set for type
     */
    typeExampleValueSet() {
        return V3ActSubstanceAdminSubstitutionCodeValueSet;
    }
    /**
     * Example-bound Value Set for reason
     */
    reasonExampleValueSet() {
        return V3SubstanceAdminSubstitutionReasonValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["wasSubstituted"]) {
            results.push(["wasSubstituted", 'Missing required element: MedicationDispense.substitution.wasSubstituted']);
        }
        if (this["_wasSubstituted"]) {
            results.push(...this._wasSubstituted.doModelValidation());
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["reason"]) {
            this.reason.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["responsibleParty"]) {
            this.responsibleParty.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
 */
export class MedicationDispense extends fhir.DomainResource {
    /**
     * Default constructor for MedicationDispense - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'MedicationDispense';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['statusReasonCodeableConcept']) {
            this.statusReasonCodeableConcept = new fhir.CodeableConcept(source.statusReasonCodeableConcept);
        }
        if (source['statusReasonReference']) {
            this.statusReasonReference = new fhir.Reference(source.statusReasonReference);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['medicationCodeableConcept']) {
            this.medicationCodeableConcept = new fhir.CodeableConcept(source.medicationCodeableConcept);
        }
        if (source['medicationReference']) {
            this.medicationReference = new fhir.Reference(source.medicationReference);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context);
        }
        if (source['supportingInformation']) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x));
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.MedicationDispensePerformer(x));
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['authorizingPrescription']) {
            this.authorizingPrescription = source.authorizingPrescription.map((x) => new fhir.Reference(x));
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['daysSupply']) {
            this.daysSupply = new fhir.Quantity(source.daysSupply);
        }
        if (source['whenPrepared']) {
            this.whenPrepared = source.whenPrepared;
        }
        if (source['_whenPrepared']) {
            this._whenPrepared = new fhir.FhirElement(source._whenPrepared);
        }
        if (source['whenHandedOver']) {
            this.whenHandedOver = source.whenHandedOver;
        }
        if (source['_whenHandedOver']) {
            this._whenHandedOver = new fhir.FhirElement(source._whenHandedOver);
        }
        if (source['destination']) {
            this.destination = new fhir.Reference(source.destination);
        }
        if (source['receiver']) {
            this.receiver = source.receiver.map((x) => new fhir.Reference(x));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['dosageInstruction']) {
            this.dosageInstruction = source.dosageInstruction.map((x) => new fhir.Dosage(x));
        }
        if (source['substitution']) {
            this.substitution = new fhir.MedicationDispenseSubstitution(source.substitution);
        }
        if (source['detectedIssue']) {
            this.detectedIssue = source.detectedIssue.map((x) => new fhir.Reference(x));
        }
        if (source['eventHistory']) {
            this.eventHistory = source.eventHistory.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return MedicationdispenseStatusValueSet;
    }
    /**
     * Example-bound Value Set for statusReasonCodeableConcept
     */
    statusReasonCodeableConceptExampleValueSet() {
        return MedicationdispenseStatusReasonValueSet;
    }
    /**
     * Example-bound Value Set for statusReasonReference
     */
    statusReasonReferenceExampleValueSet() {
        return MedicationdispenseStatusReasonValueSet;
    }
    /**
     * Preferred-bound Value Set for category
     */
    categoryPreferredValueSet() {
        return MedicationdispenseCategoryValueSet;
    }
    /**
     * Example-bound Value Set for medicationCodeableConcept
     */
    medicationCodeableConceptExampleValueSet() {
        return MedicationCodesValueSet;
    }
    /**
     * Example-bound Value Set for medicationReference
     */
    medicationReferenceExampleValueSet() {
        return MedicationCodesValueSet;
    }
    /**
     * Example-bound Value Set for type
     */
    typeExampleValueSet() {
        return V3ActPharmacySupplyTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: MedicationDispense.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["partOf"]) {
            this.partOf.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: MedicationDispense.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["statusReasonCodeableConcept"]) {
            results.push(...this.statusReasonCodeableConcept.doModelValidation());
        }
        if (this["statusReasonReference"]) {
            results.push(...this.statusReasonReference.doModelValidation());
        }
        if (this["category"]) {
            results.push(...this.category.doModelValidation());
        }
        if (this["medicationCodeableConcept"]) {
            results.push(...this.medicationCodeableConcept.doModelValidation());
        }
        if (this["medicationReference"]) {
            results.push(...this.medicationReference.doModelValidation());
        }
        if (this["subject"]) {
            results.push(...this.subject.doModelValidation());
        }
        if (this["context"]) {
            results.push(...this.context.doModelValidation());
        }
        if (this["supportingInformation"]) {
            this.supportingInformation.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["performer"]) {
            this.performer.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["location"]) {
            results.push(...this.location.doModelValidation());
        }
        if (this["authorizingPrescription"]) {
            this.authorizingPrescription.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["quantity"]) {
            results.push(...this.quantity.doModelValidation());
        }
        if (this["daysSupply"]) {
            results.push(...this.daysSupply.doModelValidation());
        }
        if (this["_whenPrepared"]) {
            results.push(...this._whenPrepared.doModelValidation());
        }
        if (this["_whenHandedOver"]) {
            results.push(...this._whenHandedOver.doModelValidation());
        }
        if (this["destination"]) {
            results.push(...this.destination.doModelValidation());
        }
        if (this["receiver"]) {
            this.receiver.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["dosageInstruction"]) {
            this.dosageInstruction.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["substitution"]) {
            results.push(...this.substitution.doModelValidation());
        }
        if (this["detectedIssue"]) {
            this.detectedIssue.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["eventHistory"]) {
            this.eventHistory.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=MedicationDispense.js.map