// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Communication
import * as fhir from '../fhir.js';
import { EventStatusValueSet, } from '../fhirValueSets/EventStatusValueSet.js';
import { CommunicationNotDoneReasonValueSet, } from '../fhirValueSets/CommunicationNotDoneReasonValueSet.js';
import { CommunicationCategoryValueSet, } from '../fhirValueSets/CommunicationCategoryValueSet.js';
import { RequestPriorityValueSet, } from '../fhirValueSets/RequestPriorityValueSet.js';
import { V3ParticipationModeValueSet, } from '../fhirValueSets/V3ParticipationModeValueSet.js';
import { CommunicationTopicValueSet, } from '../fhirValueSets/CommunicationTopicValueSet.js';
import { ClinicalFindingsValueSet, } from '../fhirValueSets/ClinicalFindingsValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Text, attachment(s), or resource(s) that was communicated to the recipient.
 */
export class CommunicationPayload extends fhir.BackboneElement {
    /**
     * Default constructor for CommunicationPayload - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'CommunicationPayload';
        this.__contentIsChoice = true;
        if (source['content']) {
            this.content = source.content;
        }
        else if (source['contentString']) {
            this.content = new fhir.FhirString({ value: source.contentString });
        }
        else if (source['contentAttachment']) {
            this.content = new fhir.Attachment(source.contentAttachment);
        }
        else if (source['contentReference']) {
            this.content = new fhir.Reference(source.contentReference);
        }
        else {
            this.content = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['content']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property content: fhir: Communication.payload.content[x]:", }));
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * An occurrence of information being transmitted; e.g. an alert that was sent to a responsible provider, a public health agency that was notified about a reportable condition.
 */
export class Communication extends fhir.DomainResource {
    /**
     * Default constructor for Communication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'Communication';
        /**
         * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
         */
        this.identifier = [];
        /**
         * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Communication.
         */
        this.instantiatesCanonical = [];
        /**
         * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
         */
        this.instantiatesUri = [];
        /**
         * This must point to some sort of a 'Request' resource, such as CarePlan, CommunicationRequest, ServiceRequest, MedicationRequest, etc.
         */
        this.basedOn = [];
        /**
         * Part of this action.
         */
        this.partOf = [];
        /**
         * Prior communication that this communication is in response to.
         */
        this.inResponseTo = [];
        /**
         * There may be multiple axes of categorization and one communication may serve multiple purposes.
         */
        this.category = [];
        /**
         * A channel that was used for this communication (e.g. email, fax).
         */
        this.medium = [];
        /**
         * Don't use Communication.about element when a more specific element exists, such as basedOn or reasonReference.
         */
        this.about = [];
        /**
         * The entity (e.g. person, organization, clinical information system, care team or device) which was the target of the communication. If receipts need to be tracked by an individual, a separate resource instance will need to be created for each recipient.  Multiple recipient communications are intended where either receipts are not tracked (e.g. a mass mail-out) or a receipt is captured in aggregate (all emails confirmed received by a particular time).
         */
        this.recipient = [];
        /**
         * Textual reasons can be captured using reasonCode.text.
         */
        this.reasonCode = [];
        /**
         * Indicates another resource whose existence justifies this communication.
         */
        this.reasonReference = [];
        /**
         * Text, attachment(s), or resource(s) that was communicated to the recipient.
         */
        this.payload = [];
        /**
         * Additional notes or commentary about the communication by the sender, receiver or other interested parties.
         */
        this.note = [];
        this.resourceType = 'Communication';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['instantiatesCanonical']) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        if (source['instantiatesUri']) {
            this.instantiatesUri = source.instantiatesUri.map((x) => new fhir.FhirUri({ value: x }));
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        if (source['inResponseTo']) {
            this.inResponseTo = source.inResponseTo.map((x) => new fhir.Reference(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['statusReason']) {
            this.statusReason = new fhir.CodeableConcept(source.statusReason);
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['priority']) {
            this.priority = source.priority;
        }
        if (source['medium']) {
            this.medium = source.medium.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['topic']) {
            this.topic = new fhir.CodeableConcept(source.topic);
        }
        if (source['about']) {
            this.about = source.about.map((x) => new fhir.Reference(x));
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['sent']) {
            this.sent = new fhir.FhirDateTime({ value: source.sent });
        }
        if (source['received']) {
            this.received = new fhir.FhirDateTime({ value: source.received });
        }
        if (source['recipient']) {
            this.recipient = source.recipient.map((x) => new fhir.Reference(x));
        }
        if (source['sender']) {
            this.sender = new fhir.Reference(source.sender);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source['payload']) {
            this.payload = source.payload.map((x) => new fhir.CommunicationPayload(x));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return EventStatusValueSet;
    }
    /**
     * Example-bound Value Set for statusReason
     */
    static statusReasonExampleValueSet() {
        return CommunicationNotDoneReasonValueSet;
    }
    /**
     * Example-bound Value Set for category
     */
    static categoryExampleValueSet() {
        return CommunicationCategoryValueSet;
    }
    /**
     * Required-bound Value Set for priority
     */
    static priorityRequiredValueSet() {
        return RequestPriorityValueSet;
    }
    /**
     * Example-bound Value Set for medium
     */
    static mediumExampleValueSet() {
        return V3ParticipationModeValueSet;
    }
    /**
     * Example-bound Value Set for topic
     */
    static topicExampleValueSet() {
        return CommunicationTopicValueSet;
    }
    /**
     * Example-bound Value Set for reasonCode
     */
    static reasonCodeExampleValueSet() {
        return ClinicalFindingsValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'Communication' fhir: Communication.resourceType:'Communication'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["instantiatesCanonical"]) {
            this.instantiatesCanonical.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["instantiatesUri"]) {
            this.instantiatesUri.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["partOf"]) {
            this.partOf.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["inResponseTo"]) {
            this.inResponseTo.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:EventStatusValueSetEnum fhir: Communication.status:code", }));
        }
        if (this["statusReason"]) {
            outcome.issue.push(...this.statusReason.doModelValidation().issue);
        }
        if (this["category"]) {
            this.category.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["medium"]) {
            this.medium.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["subject"]) {
            outcome.issue.push(...this.subject.doModelValidation().issue);
        }
        if (this["topic"]) {
            outcome.issue.push(...this.topic.doModelValidation().issue);
        }
        if (this["about"]) {
            this.about.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["encounter"]) {
            outcome.issue.push(...this.encounter.doModelValidation().issue);
        }
        if (this["sent"]) {
            outcome.issue.push(...this.sent.doModelValidation().issue);
        }
        if (this["received"]) {
            outcome.issue.push(...this.received.doModelValidation().issue);
        }
        if (this["recipient"]) {
            this.recipient.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["sender"]) {
            outcome.issue.push(...this.sender.doModelValidation().issue);
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["payload"]) {
            this.payload.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=Communication.js.map