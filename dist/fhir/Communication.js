// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Text, attachment(s), or resource(s) that was communicated to the recipient.
 */
export class CommunicationPayload extends fhir.BackboneElement {
    /**
     * Default constructor for CommunicationPayload - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["contentString"]) {
            this.contentString = source.contentString;
        }
        if (source["_contentString"]) {
            this._contentString = new fhir.FhirElement(source._contentString);
        }
        if (source["contentAttachment"]) {
            this.contentAttachment = new fhir.Attachment(source.contentAttachment);
        }
        if (source["contentReference"]) {
            this.contentReference = new fhir.Reference(source.contentReference);
        }
    }
    /**
     * Check if the current CommunicationPayload contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a CommunicationPayload from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new CommunicationPayload(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `CommunicationPayload is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * An occurrence of information being transmitted; e.g. an alert that was sent to a responsible provider, a public health agency that was notified about a reportable condition.
 */
export class Communication extends fhir.DomainResource {
    /**
     * Default constructor for Communication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Communication';
        if (source["about"]) {
            this.about = source.about.map((x) => new fhir.Reference(x));
        }
        if (source["basedOn"]) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source["category"]) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["encounter"]) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["inResponseTo"]) {
            this.inResponseTo = source.inResponseTo.map((x) => new fhir.Reference(x));
        }
        if (source["instantiatesCanonical"]) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => (x));
        }
        if (source["_instantiatesCanonical"]) {
            this._instantiatesCanonical = source._instantiatesCanonical.map((x) => new fhir.FhirElement(x));
        }
        if (source["instantiatesUri"]) {
            this.instantiatesUri = source.instantiatesUri.map((x) => (x));
        }
        if (source["_instantiatesUri"]) {
            this._instantiatesUri = source._instantiatesUri.map((x) => new fhir.FhirElement(x));
        }
        if (source["medium"]) {
            this.medium = source.medium.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["note"]) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source["partOf"]) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        if (source["payload"]) {
            this.payload = source.payload.map((x) => new fhir.CommunicationPayload(x));
        }
        if (source["priority"]) {
            this.priority = source.priority;
        }
        if (source["_priority"]) {
            this._priority = new fhir.FhirElement(source._priority);
        }
        if (source["reasonCode"]) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["reasonReference"]) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source["received"]) {
            this.received = source.received;
        }
        if (source["_received"]) {
            this._received = new fhir.FhirElement(source._received);
        }
        if (source["recipient"]) {
            this.recipient = source.recipient.map((x) => new fhir.Reference(x));
        }
        if (source["sender"]) {
            this.sender = new fhir.Reference(source.sender);
        }
        if (source["sent"]) {
            this.sent = source.sent;
        }
        if (source["_sent"]) {
            this._sent = new fhir.FhirElement(source._sent);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["statusReason"]) {
            this.statusReason = new fhir.CodeableConcept(source.statusReason);
        }
        if (source["subject"]) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source["topic"]) {
            this.topic = new fhir.CodeableConcept(source.topic);
        }
    }
    /**
     * Check if the current Communication contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Communication from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new Communication(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Communication is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the Communication.priority field
 */
export var CommunicationPriorityEnum;
(function (CommunicationPriorityEnum) {
    CommunicationPriorityEnum["ROUTINE"] = "routine";
    CommunicationPriorityEnum["URGENT"] = "urgent";
    CommunicationPriorityEnum["ASAP"] = "asap";
    CommunicationPriorityEnum["STAT"] = "stat";
})(CommunicationPriorityEnum || (CommunicationPriorityEnum = {}));
/**
 * Code Values for the Communication.status field
 */
export var CommunicationStatusEnum;
(function (CommunicationStatusEnum) {
    CommunicationStatusEnum["PREPARATION"] = "preparation";
    CommunicationStatusEnum["IN_PROGRESS"] = "in-progress";
    CommunicationStatusEnum["NOT_DONE"] = "not-done";
    CommunicationStatusEnum["ON_HOLD"] = "on-hold";
    CommunicationStatusEnum["STOPPED"] = "stopped";
    CommunicationStatusEnum["COMPLETED"] = "completed";
    CommunicationStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    CommunicationStatusEnum["UNKNOWN"] = "unknown";
})(CommunicationStatusEnum || (CommunicationStatusEnum = {}));
//# sourceMappingURL=Communication.js.map