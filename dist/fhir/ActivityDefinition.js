// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ActivityDefinition
import * as fhir from '../fhir.js';
import { ActionParticipantTypeValueSet } from '../fhirValueSets/ActionParticipantTypeValueSet.js';
import { PublicationStatusValueSet } from '../fhirValueSets/PublicationStatusValueSet.js';
import { SubjectTypeValueSet } from '../fhirValueSets/SubjectTypeValueSet.js';
import { DefinitionTopicValueSet } from '../fhirValueSets/DefinitionTopicValueSet.js';
import { RequestResourceTypesValueSet } from '../fhirValueSets/RequestResourceTypesValueSet.js';
import { ProcedureCodeValueSet } from '../fhirValueSets/ProcedureCodeValueSet.js';
import { RequestIntentValueSet } from '../fhirValueSets/RequestIntentValueSet.js';
import { RequestPriorityValueSet } from '../fhirValueSets/RequestPriorityValueSet.js';
import { MedicationCodesValueSet } from '../fhirValueSets/MedicationCodesValueSet.js';
import { BodySiteValueSet } from '../fhirValueSets/BodySiteValueSet.js';
/**
 * Indicates who should participate in performing the action described.
 */
export class ActivityDefinitionParticipant extends fhir.BackboneElement {
    /**
     * Default constructor for ActivityDefinitionParticipant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
    }
    /**
     * Required-bound Value Set for type
     */
    static typeRequiredValueSet() {
        return ActionParticipantTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["type"]) {
            results.push(["type", 'Missing required element: ActivityDefinition.participant.type']);
        }
        if (this["_type"]) {
            results.push(...this._type.doModelValidation());
        }
        if (this["role"]) {
            results.push(...this.role.doModelValidation());
        }
        return results;
    }
}
/**
 * Dynamic values are applied in the order in which they are defined in the ActivityDefinition. Note that if both a transform and dynamic values are specified, the dynamic values will be applied to the result of the transform.
 */
export class ActivityDefinitionDynamicValue extends fhir.BackboneElement {
    /**
     * Default constructor for ActivityDefinitionDynamicValue - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['path']) {
            this.path = source.path;
        }
        else {
            this.path = null;
        }
        if (source['_path']) {
            this._path = new fhir.FhirElement(source._path);
        }
        if (source['expression']) {
            this.expression = new fhir.Expression(source.expression);
        }
        else {
            this.expression = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["path"]) {
            results.push(["path", 'Missing required element: ActivityDefinition.dynamicValue.path']);
        }
        if (this["_path"]) {
            results.push(...this._path.doModelValidation());
        }
        if (!this["expression"]) {
            results.push(["expression", 'Missing required element: ActivityDefinition.dynamicValue.expression']);
        }
        if (this["expression"]) {
            results.push(...this.expression.doModelValidation());
        }
        return results;
    }
}
/**
 * This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context.
 */
export class ActivityDefinition extends fhir.DomainResource {
    /**
     * Default constructor for ActivityDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'ActivityDefinition';
        if (source['url']) {
            this.url = source.url;
        }
        if (source['_url']) {
            this._url = new fhir.FhirElement(source._url);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['version']) {
            this.version = source.version;
        }
        if (source['_version']) {
            this._version = new fhir.FhirElement(source._version);
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['title']) {
            this.title = source.title;
        }
        if (source['_title']) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source['subtitle']) {
            this.subtitle = source.subtitle;
        }
        if (source['_subtitle']) {
            this._subtitle = new fhir.FhirElement(source._subtitle);
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['experimental']) {
            this.experimental = source.experimental;
        }
        if (source['_experimental']) {
            this._experimental = new fhir.FhirElement(source._experimental);
        }
        if (source['subjectCodeableConcept']) {
            this.subjectCodeableConcept = new fhir.CodeableConcept(source.subjectCodeableConcept);
        }
        if (source['subjectReference']) {
            this.subjectReference = new fhir.Reference(source.subjectReference);
        }
        if (source['date']) {
            this.date = source.date;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['publisher']) {
            this.publisher = source.publisher;
        }
        if (source['_publisher']) {
            this._publisher = new fhir.FhirElement(source._publisher);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['purpose']) {
            this.purpose = source.purpose;
        }
        if (source['_purpose']) {
            this._purpose = new fhir.FhirElement(source._purpose);
        }
        if (source['usage']) {
            this.usage = source.usage;
        }
        if (source['_usage']) {
            this._usage = new fhir.FhirElement(source._usage);
        }
        if (source['copyright']) {
            this.copyright = source.copyright;
        }
        if (source['_copyright']) {
            this._copyright = new fhir.FhirElement(source._copyright);
        }
        if (source['approvalDate']) {
            this.approvalDate = source.approvalDate;
        }
        if (source['_approvalDate']) {
            this._approvalDate = new fhir.FhirElement(source._approvalDate);
        }
        if (source['lastReviewDate']) {
            this.lastReviewDate = source.lastReviewDate;
        }
        if (source['_lastReviewDate']) {
            this._lastReviewDate = new fhir.FhirElement(source._lastReviewDate);
        }
        if (source['effectivePeriod']) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source['topic']) {
            this.topic = source.topic.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.ContactDetail(x));
        }
        if (source['editor']) {
            this.editor = source.editor.map((x) => new fhir.ContactDetail(x));
        }
        if (source['reviewer']) {
            this.reviewer = source.reviewer.map((x) => new fhir.ContactDetail(x));
        }
        if (source['endorser']) {
            this.endorser = source.endorser.map((x) => new fhir.ContactDetail(x));
        }
        if (source['relatedArtifact']) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x));
        }
        if (source['library']) {
            this.library = source.library.map((x) => (x));
        }
        if (source['_library']) {
            this._library = source._library.map((x) => new fhir.FhirElement(x));
        }
        if (source['kind']) {
            this.kind = source.kind;
        }
        if (source['_kind']) {
            this._kind = new fhir.FhirElement(source._kind);
        }
        if (source['profile']) {
            this.profile = source.profile;
        }
        if (source['_profile']) {
            this._profile = new fhir.FhirElement(source._profile);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['intent']) {
            this.intent = source.intent;
        }
        if (source['_intent']) {
            this._intent = new fhir.FhirElement(source._intent);
        }
        if (source['priority']) {
            this.priority = source.priority;
        }
        if (source['_priority']) {
            this._priority = new fhir.FhirElement(source._priority);
        }
        if (source['doNotPerform']) {
            this.doNotPerform = source.doNotPerform;
        }
        if (source['_doNotPerform']) {
            this._doNotPerform = new fhir.FhirElement(source._doNotPerform);
        }
        if (source['timingTiming']) {
            this.timingTiming = new fhir.Timing(source.timingTiming);
        }
        if (source['timingDateTime']) {
            this.timingDateTime = source.timingDateTime;
        }
        if (source['_timingDateTime']) {
            this._timingDateTime = new fhir.FhirElement(source._timingDateTime);
        }
        if (source['timingAge']) {
            this.timingAge = new fhir.Age(source.timingAge);
        }
        if (source['timingPeriod']) {
            this.timingPeriod = new fhir.Period(source.timingPeriod);
        }
        if (source['timingRange']) {
            this.timingRange = new fhir.Range(source.timingRange);
        }
        if (source['timingDuration']) {
            this.timingDuration = new fhir.Duration(source.timingDuration);
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['participant']) {
            this.participant = source.participant.map((x) => new fhir.ActivityDefinitionParticipant(x));
        }
        if (source['productReference']) {
            this.productReference = new fhir.Reference(source.productReference);
        }
        if (source['productCodeableConcept']) {
            this.productCodeableConcept = new fhir.CodeableConcept(source.productCodeableConcept);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['dosage']) {
            this.dosage = source.dosage.map((x) => new fhir.Dosage(x));
        }
        if (source['bodySite']) {
            this.bodySite = source.bodySite.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['specimenRequirement']) {
            this.specimenRequirement = source.specimenRequirement.map((x) => new fhir.Reference(x));
        }
        if (source['observationRequirement']) {
            this.observationRequirement = source.observationRequirement.map((x) => new fhir.Reference(x));
        }
        if (source['observationResultRequirement']) {
            this.observationResultRequirement = source.observationResultRequirement.map((x) => new fhir.Reference(x));
        }
        if (source['transform']) {
            this.transform = source.transform;
        }
        if (source['_transform']) {
            this._transform = new fhir.FhirElement(source._transform);
        }
        if (source['dynamicValue']) {
            this.dynamicValue = source.dynamicValue.map((x) => new fhir.ActivityDefinitionDynamicValue(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return PublicationStatusValueSet;
    }
    /**
     * Extensible-bound Value Set for subjectCodeableConcept
     */
    static subjectCodeableConceptExtensibleValueSet() {
        return SubjectTypeValueSet;
    }
    /**
     * Extensible-bound Value Set for subjectReference
     */
    static subjectReferenceExtensibleValueSet() {
        return SubjectTypeValueSet;
    }
    /**
     * Example-bound Value Set for topic
     */
    static topicExampleValueSet() {
        return DefinitionTopicValueSet;
    }
    /**
     * Required-bound Value Set for kind
     */
    static kindRequiredValueSet() {
        return RequestResourceTypesValueSet;
    }
    /**
     * Example-bound Value Set for code
     */
    static codeExampleValueSet() {
        return ProcedureCodeValueSet;
    }
    /**
     * Required-bound Value Set for intent
     */
    static intentRequiredValueSet() {
        return RequestIntentValueSet;
    }
    /**
     * Required-bound Value Set for priority
     */
    static priorityRequiredValueSet() {
        return RequestPriorityValueSet;
    }
    /**
     * Example-bound Value Set for productReference
     */
    static productReferenceExampleValueSet() {
        return MedicationCodesValueSet;
    }
    /**
     * Example-bound Value Set for productCodeableConcept
     */
    static productCodeableConceptExampleValueSet() {
        return MedicationCodesValueSet;
    }
    /**
     * Example-bound Value Set for bodySite
     */
    static bodySiteExampleValueSet() {
        return BodySiteValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: ActivityDefinition.resourceType']);
        }
        if (this["_url"]) {
            results.push(...this._url.doModelValidation());
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_version"]) {
            results.push(...this._version.doModelValidation());
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_title"]) {
            results.push(...this._title.doModelValidation());
        }
        if (this["_subtitle"]) {
            results.push(...this._subtitle.doModelValidation());
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: ActivityDefinition.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["_experimental"]) {
            results.push(...this._experimental.doModelValidation());
        }
        if (this["subjectCodeableConcept"]) {
            results.push(...this.subjectCodeableConcept.doModelValidation());
        }
        if (this["subjectReference"]) {
            results.push(...this.subjectReference.doModelValidation());
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["_publisher"]) {
            results.push(...this._publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_purpose"]) {
            results.push(...this._purpose.doModelValidation());
        }
        if (this["_usage"]) {
            results.push(...this._usage.doModelValidation());
        }
        if (this["_copyright"]) {
            results.push(...this._copyright.doModelValidation());
        }
        if (this["_approvalDate"]) {
            results.push(...this._approvalDate.doModelValidation());
        }
        if (this["_lastReviewDate"]) {
            results.push(...this._lastReviewDate.doModelValidation());
        }
        if (this["effectivePeriod"]) {
            results.push(...this.effectivePeriod.doModelValidation());
        }
        if (this["topic"]) {
            this.topic.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["author"]) {
            this.author.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["editor"]) {
            this.editor.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reviewer"]) {
            this.reviewer.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["endorser"]) {
            this.endorser.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["relatedArtifact"]) {
            this.relatedArtifact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_library"]) {
            this._library.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_kind"]) {
            results.push(...this._kind.doModelValidation());
        }
        if (this["_profile"]) {
            results.push(...this._profile.doModelValidation());
        }
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["_intent"]) {
            results.push(...this._intent.doModelValidation());
        }
        if (this["_priority"]) {
            results.push(...this._priority.doModelValidation());
        }
        if (this["_doNotPerform"]) {
            results.push(...this._doNotPerform.doModelValidation());
        }
        if (this["timingTiming"]) {
            results.push(...this.timingTiming.doModelValidation());
        }
        if (this["_timingDateTime"]) {
            results.push(...this._timingDateTime.doModelValidation());
        }
        if (this["timingAge"]) {
            results.push(...this.timingAge.doModelValidation());
        }
        if (this["timingPeriod"]) {
            results.push(...this.timingPeriod.doModelValidation());
        }
        if (this["timingRange"]) {
            results.push(...this.timingRange.doModelValidation());
        }
        if (this["timingDuration"]) {
            results.push(...this.timingDuration.doModelValidation());
        }
        if (this["location"]) {
            results.push(...this.location.doModelValidation());
        }
        if (this["participant"]) {
            this.participant.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["productReference"]) {
            results.push(...this.productReference.doModelValidation());
        }
        if (this["productCodeableConcept"]) {
            results.push(...this.productCodeableConcept.doModelValidation());
        }
        if (this["quantity"]) {
            results.push(...this.quantity.doModelValidation());
        }
        if (this["dosage"]) {
            this.dosage.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["bodySite"]) {
            this.bodySite.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["specimenRequirement"]) {
            this.specimenRequirement.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["observationRequirement"]) {
            this.observationRequirement.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["observationResultRequirement"]) {
            this.observationResultRequirement.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_transform"]) {
            results.push(...this._transform.doModelValidation());
        }
        if (this["dynamicValue"]) {
            this.dynamicValue.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=ActivityDefinition.js.map