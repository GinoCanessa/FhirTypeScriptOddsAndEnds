// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MessageDefinition
import * as fhir from '../fhir.js';
import { ResourceTypesValueSet } from '../fhirValueSets/ResourceTypesValueSet.js';
import { PublicationStatusValueSet } from '../fhirValueSets/PublicationStatusValueSet.js';
import { MessageSignificanceCategoryValueSet } from '../fhirValueSets/MessageSignificanceCategoryValueSet.js';
import { MessageheaderResponseRequestValueSet } from '../fhirValueSets/MessageheaderResponseRequestValueSet.js';
/**
 * Identifies the resource (or resources) that are being addressed by the event.  For example, the Encounter for an admit message or two Account records for a merge.
 */
export class MessageDefinitionFocus extends fhir.BackboneElement {
    /**
     * Default constructor for MessageDefinitionFocus - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = source.code;
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source['profile']) {
            this.profile = source.profile;
        }
        if (source['_profile']) {
            this._profile = new fhir.FhirElement(source._profile);
        }
        if (source['min']) {
            this.min = source.min;
        }
        else {
            this.min = null;
        }
        if (source['_min']) {
            this._min = new fhir.FhirElement(source._min);
        }
        if (source['max']) {
            this.max = source.max;
        }
        if (source['_max']) {
            this._max = new fhir.FhirElement(source._max);
        }
    }
    /**
     * Required-bound Value Set for code
     */
    codeRequiredValueSet() {
        return ResourceTypesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["code"]) {
            results.push(["code", 'Missing required element: MessageDefinition.focus.code']);
        }
        if (this["_code"]) {
            results.push(...this._code.doModelValidation());
        }
        if (this["_profile"]) {
            results.push(...this._profile.doModelValidation());
        }
        if (!this["min"]) {
            results.push(["min", 'Missing required element: MessageDefinition.focus.min']);
        }
        if (this["_min"]) {
            results.push(...this._min.doModelValidation());
        }
        if (this["_max"]) {
            results.push(...this._max.doModelValidation());
        }
        return results;
    }
}
/**
 * This indicates an application level response to "close" a transaction implicit in a particular request message.  To define a complete workflow scenario, look to the [[PlanDefinition]] resource which allows the definition of complex orchestrations, conditionality, etc.
 */
export class MessageDefinitionAllowedResponse extends fhir.BackboneElement {
    /**
     * Default constructor for MessageDefinitionAllowedResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['message']) {
            this.message = source.message;
        }
        else {
            this.message = null;
        }
        if (source['_message']) {
            this._message = new fhir.FhirElement(source._message);
        }
        if (source['situation']) {
            this.situation = source.situation;
        }
        if (source['_situation']) {
            this._situation = new fhir.FhirElement(source._situation);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["message"]) {
            results.push(["message", 'Missing required element: MessageDefinition.allowedResponse.message']);
        }
        if (this["_message"]) {
            results.push(...this._message.doModelValidation());
        }
        if (this["_situation"]) {
            results.push(...this._situation.doModelValidation());
        }
        return results;
    }
}
/**
 * Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted.
 */
export class MessageDefinition extends fhir.DomainResource {
    /**
     * Default constructor for MessageDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'MessageDefinition';
        if (source['url']) {
            this.url = source.url;
        }
        if (source['_url']) {
            this._url = new fhir.FhirElement(source._url);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['version']) {
            this.version = source.version;
        }
        if (source['_version']) {
            this._version = new fhir.FhirElement(source._version);
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['title']) {
            this.title = source.title;
        }
        if (source['_title']) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source['replaces']) {
            this.replaces = source.replaces.map((x) => (x));
        }
        if (source['_replaces']) {
            this._replaces = source._replaces.map((x) => new fhir.FhirElement(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['experimental']) {
            this.experimental = source.experimental;
        }
        if (source['_experimental']) {
            this._experimental = new fhir.FhirElement(source._experimental);
        }
        if (source['date']) {
            this.date = source.date;
        }
        else {
            this.date = null;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['publisher']) {
            this.publisher = source.publisher;
        }
        if (source['_publisher']) {
            this._publisher = new fhir.FhirElement(source._publisher);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['purpose']) {
            this.purpose = source.purpose;
        }
        if (source['_purpose']) {
            this._purpose = new fhir.FhirElement(source._purpose);
        }
        if (source['copyright']) {
            this.copyright = source.copyright;
        }
        if (source['_copyright']) {
            this._copyright = new fhir.FhirElement(source._copyright);
        }
        if (source['base']) {
            this.base = source.base;
        }
        if (source['_base']) {
            this._base = new fhir.FhirElement(source._base);
        }
        if (source['parent']) {
            this.parent = source.parent.map((x) => (x));
        }
        if (source['_parent']) {
            this._parent = source._parent.map((x) => new fhir.FhirElement(x));
        }
        if (source['eventCoding']) {
            this.eventCoding = new fhir.Coding(source.eventCoding);
        }
        if (source['eventUri']) {
            this.eventUri = source.eventUri;
        }
        if (source['_eventUri']) {
            this._eventUri = new fhir.FhirElement(source._eventUri);
        }
        if (source['category']) {
            this.category = source.category;
        }
        if (source['_category']) {
            this._category = new fhir.FhirElement(source._category);
        }
        if (source['focus']) {
            this.focus = source.focus.map((x) => new fhir.MessageDefinitionFocus(x));
        }
        if (source['responseRequired']) {
            this.responseRequired = source.responseRequired;
        }
        if (source['_responseRequired']) {
            this._responseRequired = new fhir.FhirElement(source._responseRequired);
        }
        if (source['allowedResponse']) {
            this.allowedResponse = source.allowedResponse.map((x) => new fhir.MessageDefinitionAllowedResponse(x));
        }
        if (source['graph']) {
            this.graph = source.graph.map((x) => (x));
        }
        if (source['_graph']) {
            this._graph = source._graph.map((x) => new fhir.FhirElement(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return PublicationStatusValueSet;
    }
    /**
     * Required-bound Value Set for category
     */
    categoryRequiredValueSet() {
        return MessageSignificanceCategoryValueSet;
    }
    /**
     * Required-bound Value Set for responseRequired
     */
    responseRequiredRequiredValueSet() {
        return MessageheaderResponseRequestValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: MessageDefinition.resourceType']);
        }
        if (this["_url"]) {
            results.push(...this._url.doModelValidation());
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_version"]) {
            results.push(...this._version.doModelValidation());
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_title"]) {
            results.push(...this._title.doModelValidation());
        }
        if (this["_replaces"]) {
            this._replaces.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: MessageDefinition.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["_experimental"]) {
            results.push(...this._experimental.doModelValidation());
        }
        if (!this["date"]) {
            results.push(["date", 'Missing required element: MessageDefinition.date']);
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["_publisher"]) {
            results.push(...this._publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_purpose"]) {
            results.push(...this._purpose.doModelValidation());
        }
        if (this["_copyright"]) {
            results.push(...this._copyright.doModelValidation());
        }
        if (this["_base"]) {
            results.push(...this._base.doModelValidation());
        }
        if (this["_parent"]) {
            this._parent.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["eventCoding"]) {
            results.push(...this.eventCoding.doModelValidation());
        }
        if (this["_eventUri"]) {
            results.push(...this._eventUri.doModelValidation());
        }
        if (this["_category"]) {
            results.push(...this._category.doModelValidation());
        }
        if (this["focus"]) {
            this.focus.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_responseRequired"]) {
            results.push(...this._responseRequired.doModelValidation());
        }
        if (this["allowedResponse"]) {
            this.allowedResponse.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_graph"]) {
            this._graph.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=MessageDefinition.js.map