// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ServiceRequest
import * as fhir from '../fhir.js';
import { RequestStatusValueSet } from '../fhirValueSets/RequestStatusValueSet.js';
import { RequestIntentValueSet } from '../fhirValueSets/RequestIntentValueSet.js';
import { ServicerequestCategoryValueSet } from '../fhirValueSets/ServicerequestCategoryValueSet.js';
import { RequestPriorityValueSet } from '../fhirValueSets/RequestPriorityValueSet.js';
import { ProcedureCodeValueSet } from '../fhirValueSets/ProcedureCodeValueSet.js';
import { ServicerequestOrderdetailValueSet } from '../fhirValueSets/ServicerequestOrderdetailValueSet.js';
import { MedicationAsNeededReasonValueSet } from '../fhirValueSets/MedicationAsNeededReasonValueSet.js';
import { ParticipantRoleValueSet } from '../fhirValueSets/ParticipantRoleValueSet.js';
import { V3ServiceDeliveryLocationRoleTypeValueSet } from '../fhirValueSets/V3ServiceDeliveryLocationRoleTypeValueSet.js';
import { ProcedureReasonValueSet } from '../fhirValueSets/ProcedureReasonValueSet.js';
import { BodySiteValueSet } from '../fhirValueSets/BodySiteValueSet.js';
/**
 * A record of a request for service such as diagnostic investigations, treatments, or operations to be performed.
 */
export class ServiceRequest extends fhir.DomainResource {
    /**
     * Default constructor for ServiceRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'ServiceRequest';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['instantiatesCanonical']) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => (x));
        }
        if (source['_instantiatesCanonical']) {
            this._instantiatesCanonical = source._instantiatesCanonical.map((x) => new fhir.FhirElement(x));
        }
        if (source['instantiatesUri']) {
            this.instantiatesUri = source.instantiatesUri.map((x) => (x));
        }
        if (source['_instantiatesUri']) {
            this._instantiatesUri = source._instantiatesUri.map((x) => new fhir.FhirElement(x));
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source['replaces']) {
            this.replaces = source.replaces.map((x) => new fhir.Reference(x));
        }
        if (source['requisition']) {
            this.requisition = new fhir.Identifier(source.requisition);
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['intent']) {
            this.intent = source.intent;
        }
        else {
            this.intent = null;
        }
        if (source['_intent']) {
            this._intent = new fhir.FhirElement(source._intent);
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['priority']) {
            this.priority = source.priority;
        }
        if (source['_priority']) {
            this._priority = new fhir.FhirElement(source._priority);
        }
        if (source['doNotPerform']) {
            this.doNotPerform = source.doNotPerform;
        }
        if (source['_doNotPerform']) {
            this._doNotPerform = new fhir.FhirElement(source._doNotPerform);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['orderDetail']) {
            this.orderDetail = source.orderDetail.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['quantityQuantity']) {
            this.quantityQuantity = new fhir.Quantity(source.quantityQuantity);
        }
        if (source['quantityRatio']) {
            this.quantityRatio = new fhir.Ratio(source.quantityRatio);
        }
        if (source['quantityRange']) {
            this.quantityRange = new fhir.Range(source.quantityRange);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['occurrenceDateTime']) {
            this.occurrenceDateTime = source.occurrenceDateTime;
        }
        if (source['_occurrenceDateTime']) {
            this._occurrenceDateTime = new fhir.FhirElement(source._occurrenceDateTime);
        }
        if (source['occurrencePeriod']) {
            this.occurrencePeriod = new fhir.Period(source.occurrencePeriod);
        }
        if (source['occurrenceTiming']) {
            this.occurrenceTiming = new fhir.Timing(source.occurrenceTiming);
        }
        if (source['asNeededBoolean']) {
            this.asNeededBoolean = source.asNeededBoolean;
        }
        if (source['_asNeededBoolean']) {
            this._asNeededBoolean = new fhir.FhirElement(source._asNeededBoolean);
        }
        if (source['asNeededCodeableConcept']) {
            this.asNeededCodeableConcept = new fhir.CodeableConcept(source.asNeededCodeableConcept);
        }
        if (source['authoredOn']) {
            this.authoredOn = source.authoredOn;
        }
        if (source['_authoredOn']) {
            this._authoredOn = new fhir.FhirElement(source._authoredOn);
        }
        if (source['requester']) {
            this.requester = new fhir.Reference(source.requester);
        }
        if (source['performerType']) {
            this.performerType = new fhir.CodeableConcept(source.performerType);
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.Reference(x));
        }
        if (source['locationCode']) {
            this.locationCode = source.locationCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['locationReference']) {
            this.locationReference = source.locationReference.map((x) => new fhir.Reference(x));
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source['insurance']) {
            this.insurance = source.insurance.map((x) => new fhir.Reference(x));
        }
        if (source['supportingInfo']) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.Reference(x));
        }
        if (source['specimen']) {
            this.specimen = source.specimen.map((x) => new fhir.Reference(x));
        }
        if (source['bodySite']) {
            this.bodySite = source.bodySite.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['patientInstruction']) {
            this.patientInstruction = source.patientInstruction;
        }
        if (source['_patientInstruction']) {
            this._patientInstruction = new fhir.FhirElement(source._patientInstruction);
        }
        if (source['relevantHistory']) {
            this.relevantHistory = source.relevantHistory.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return RequestStatusValueSet;
    }
    /**
     * Required-bound Value Set for intent
     */
    static intentRequiredValueSet() {
        return RequestIntentValueSet;
    }
    /**
     * Example-bound Value Set for category
     */
    static categoryExampleValueSet() {
        return ServicerequestCategoryValueSet;
    }
    /**
     * Required-bound Value Set for priority
     */
    static priorityRequiredValueSet() {
        return RequestPriorityValueSet;
    }
    /**
     * Example-bound Value Set for code
     */
    static codeExampleValueSet() {
        return ProcedureCodeValueSet;
    }
    /**
     * Example-bound Value Set for orderDetail
     */
    static orderDetailExampleValueSet() {
        return ServicerequestOrderdetailValueSet;
    }
    /**
     * Example-bound Value Set for asNeededBoolean
     */
    static asNeededBooleanExampleValueSet() {
        return MedicationAsNeededReasonValueSet;
    }
    /**
     * Example-bound Value Set for asNeededCodeableConcept
     */
    static asNeededCodeableConceptExampleValueSet() {
        return MedicationAsNeededReasonValueSet;
    }
    /**
     * Example-bound Value Set for performerType
     */
    static performerTypeExampleValueSet() {
        return ParticipantRoleValueSet;
    }
    /**
     * Example-bound Value Set for locationCode
     */
    static locationCodeExampleValueSet() {
        return V3ServiceDeliveryLocationRoleTypeValueSet;
    }
    /**
     * Example-bound Value Set for reasonCode
     */
    static reasonCodeExampleValueSet() {
        return ProcedureReasonValueSet;
    }
    /**
     * Example-bound Value Set for bodySite
     */
    static bodySiteExampleValueSet() {
        return BodySiteValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: ServiceRequest.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_instantiatesCanonical"]) {
            this._instantiatesCanonical.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_instantiatesUri"]) {
            this._instantiatesUri.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["replaces"]) {
            this.replaces.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["requisition"]) {
            results.push(...this.requisition.doModelValidation());
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: ServiceRequest.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (!this["intent"]) {
            results.push(["intent", 'Missing required element: ServiceRequest.intent']);
        }
        if (this["_intent"]) {
            results.push(...this._intent.doModelValidation());
        }
        if (this["category"]) {
            this.category.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_priority"]) {
            results.push(...this._priority.doModelValidation());
        }
        if (this["_doNotPerform"]) {
            results.push(...this._doNotPerform.doModelValidation());
        }
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["orderDetail"]) {
            this.orderDetail.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["quantityQuantity"]) {
            results.push(...this.quantityQuantity.doModelValidation());
        }
        if (this["quantityRatio"]) {
            results.push(...this.quantityRatio.doModelValidation());
        }
        if (this["quantityRange"]) {
            results.push(...this.quantityRange.doModelValidation());
        }
        if (!this["subject"]) {
            results.push(["subject", 'Missing required element: ServiceRequest.subject']);
        }
        if (this["subject"]) {
            results.push(...this.subject.doModelValidation());
        }
        if (this["encounter"]) {
            results.push(...this.encounter.doModelValidation());
        }
        if (this["_occurrenceDateTime"]) {
            results.push(...this._occurrenceDateTime.doModelValidation());
        }
        if (this["occurrencePeriod"]) {
            results.push(...this.occurrencePeriod.doModelValidation());
        }
        if (this["occurrenceTiming"]) {
            results.push(...this.occurrenceTiming.doModelValidation());
        }
        if (this["_asNeededBoolean"]) {
            results.push(...this._asNeededBoolean.doModelValidation());
        }
        if (this["asNeededCodeableConcept"]) {
            results.push(...this.asNeededCodeableConcept.doModelValidation());
        }
        if (this["_authoredOn"]) {
            results.push(...this._authoredOn.doModelValidation());
        }
        if (this["requester"]) {
            results.push(...this.requester.doModelValidation());
        }
        if (this["performerType"]) {
            results.push(...this.performerType.doModelValidation());
        }
        if (this["performer"]) {
            this.performer.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["locationCode"]) {
            this.locationCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["locationReference"]) {
            this.locationReference.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["insurance"]) {
            this.insurance.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["supportingInfo"]) {
            this.supportingInfo.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["specimen"]) {
            this.specimen.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["bodySite"]) {
            this.bodySite.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_patientInstruction"]) {
            results.push(...this._patientInstruction.doModelValidation());
        }
        if (this["relevantHistory"]) {
            this.relevantHistory.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=ServiceRequest.js.map