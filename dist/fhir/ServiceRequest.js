// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ServiceRequest
import * as fhir from '../fhir.js';
import { RequestStatusValueSet, } from '../fhirValueSets/RequestStatusValueSet.js';
import { RequestIntentValueSet, } from '../fhirValueSets/RequestIntentValueSet.js';
import { ServicerequestCategoryValueSet, } from '../fhirValueSets/ServicerequestCategoryValueSet.js';
import { RequestPriorityValueSet, } from '../fhirValueSets/RequestPriorityValueSet.js';
import { ProcedureCodeValueSet, } from '../fhirValueSets/ProcedureCodeValueSet.js';
import { ServicerequestOrderdetailValueSet, } from '../fhirValueSets/ServicerequestOrderdetailValueSet.js';
import { ParticipantRoleValueSet, } from '../fhirValueSets/ParticipantRoleValueSet.js';
import { V3ServiceDeliveryLocationRoleTypeValueSet, } from '../fhirValueSets/V3ServiceDeliveryLocationRoleTypeValueSet.js';
import { ProcedureReasonValueSet, } from '../fhirValueSets/ProcedureReasonValueSet.js';
import { BodySiteValueSet, } from '../fhirValueSets/BodySiteValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * A record of a request for service such as diagnostic investigations, treatments, or operations to be performed.
 */
export class ServiceRequest extends fhir.DomainResource {
    /**
     * Default constructor for ServiceRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ServiceRequest';
        /**
         * The identifier.type element is used to distinguish between the identifiers assigned by the orderer (known as the 'Placer' in HL7 v2) and the producer of the observations in response to the order (known as the 'Filler' in HL7 v2).  For further discussion and examples see the resource notes section below.
         */
        this.identifier = [];
        /**
         * Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
         */
        this.instantiatesCanonical = [];
        /**
         * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
         */
        this.instantiatesUri = [];
        /**
         * Plan/proposal/order fulfilled by this request.
         */
        this.basedOn = [];
        /**
         * The request takes the place of the referenced completed or terminated request(s).
         */
        this.replaces = [];
        /**
         * There may be multiple axis of categorization depending on the context or use case for retrieving or displaying the resource.  The level of granularity is defined by the category concepts in the value set.
         */
        this.category = [];
        /**
         * For information from the medical record intended to support the delivery of the requested services, use the `supportingInformation` element.
         */
        this.orderDetail = [];
        this.__quantityIsChoice = true;
        this.__occurrenceIsChoice = true;
        this.__asNeededIsChoice = true;
        /**
         * If multiple performers are present, it is interpreted as a list of *alternative* performers without any preference regardless of order.  If order of preference is needed use the [request-performerOrder extension](extension-request-performerorder.html).  Use CareTeam to represent a group of performers (for example, Practitioner A *and* Practitioner B).
         */
        this.performer = [];
        /**
         * The preferred location(s) where the procedure should actually happen in coded or free text form. E.g. at home or nursing day care center.
         */
        this.locationCode = [];
        /**
         * A reference to the the preferred location(s) where the procedure should actually happen. E.g. at home or nursing day care center.
         */
        this.locationReference = [];
        /**
         * This element represents why the referral is being made and may be used to decide how the service will be performed, or even if it will be performed at all.   Use `CodeableConcept.text` element if the data is free (uncoded) text as shown in the [CT Scan example](servicerequest-example-di.html).
         */
        this.reasonCode = [];
        /**
         * This element represents why the referral is being made and may be used to decide how the service will be performed, or even if it will be performed at all.    To be as specific as possible,  a reference to  *Observation* or *Condition* should be used if available.  Otherwise when referencing  *DiagnosticReport*  it should contain a finding  in `DiagnosticReport.conclusion` and/or `DiagnosticReport.conclusionCode`.   When using a reference to *DocumentReference*, the target document should contain clear findings language providing the relevant reason for this service request.  Use  the CodeableConcept text element in `ServiceRequest.reasonCode` if the data is free (uncoded) text as shown in the [CT Scan example](servicerequest-example-di.html).
         */
        this.reasonReference = [];
        /**
         * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be needed for delivering the requested service.
         */
        this.insurance = [];
        /**
         * To represent information about how the services are to be delivered use the `instructions` element.
         */
        this.supportingInfo = [];
        /**
         * Many diagnostic procedures need a specimen, but the request itself is not actually about the specimen. This element is for when the diagnostic is requested on already existing specimens and the request points to the specimen it applies to.    Conversely, if the request is entered first with an unknown specimen, then the [Specimen](specimen.html) resource points to the ServiceRequest.
         */
        this.specimen = [];
        /**
         * Only used if not implicit in the code found in ServiceRequest.code.  If the use case requires BodySite to be handled as a separate resource instead of an inline coded element (e.g. to identify and track separately)  then use the standard extension [procedure-targetBodyStructure](extension-procedure-targetbodystructure.html).
         */
        this.bodySite = [];
        /**
         * Any other notes and comments made about the service request. For example, internal billing notes.
         */
        this.note = [];
        /**
         * This might not include provenances for all versions of the request – only those deemed “relevant” or important.
         * This SHALL NOT include the Provenance associated with this current version of the resource.  (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update.  Until then, it can be queried directly as the Provenance that points to this version using _revinclude
         * All Provenances should have some historical version of this Request as their subject.
         */
        this.relevantHistory = [];
        this.resourceType = 'ServiceRequest';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['instantiatesCanonical']) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        if (source['instantiatesUri']) {
            this.instantiatesUri = source.instantiatesUri.map((x) => new fhir.FhirUri({ value: x }));
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source['replaces']) {
            this.replaces = source.replaces.map((x) => new fhir.Reference(x));
        }
        if (source['requisition']) {
            this.requisition = new fhir.Identifier(source.requisition);
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['intent']) {
            this.intent = source.intent;
        }
        else {
            this.intent = null;
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['priority']) {
            this.priority = source.priority;
        }
        if (source['doNotPerform']) {
            this.doNotPerform = new fhir.FhirBoolean({ value: source.doNotPerform });
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['orderDetail']) {
            this.orderDetail = source.orderDetail.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['quantity']) {
            this.quantity = source.quantity;
        }
        else if (source['quantityQuantity']) {
            this.quantity = new fhir.Quantity(source.quantityQuantity);
        }
        else if (source['quantityRatio']) {
            this.quantity = new fhir.Ratio(source.quantityRatio);
        }
        else if (source['quantityRange']) {
            this.quantity = new fhir.Range(source.quantityRange);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['occurrence']) {
            this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime']) {
            this.occurrence = new fhir.FhirDateTime({ value: source.occurrenceDateTime });
        }
        else if (source['occurrencePeriod']) {
            this.occurrence = new fhir.Period(source.occurrencePeriod);
        }
        else if (source['occurrenceTiming']) {
            this.occurrence = new fhir.Timing(source.occurrenceTiming);
        }
        if (source['asNeeded']) {
            this.asNeeded = source.asNeeded;
        }
        else if (source['asNeededBoolean']) {
            this.asNeeded = new fhir.FhirBoolean({ value: source.asNeededBoolean });
        }
        else if (source['asNeededCodeableConcept']) {
            this.asNeeded = new fhir.CodeableConcept(source.asNeededCodeableConcept);
        }
        if (source['authoredOn']) {
            this.authoredOn = new fhir.FhirDateTime({ value: source.authoredOn });
        }
        if (source['requester']) {
            this.requester = new fhir.Reference(source.requester);
        }
        if (source['performerType']) {
            this.performerType = new fhir.CodeableConcept(source.performerType);
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.Reference(x));
        }
        if (source['locationCode']) {
            this.locationCode = source.locationCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['locationReference']) {
            this.locationReference = source.locationReference.map((x) => new fhir.Reference(x));
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source['insurance']) {
            this.insurance = source.insurance.map((x) => new fhir.Reference(x));
        }
        if (source['supportingInfo']) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.Reference(x));
        }
        if (source['specimen']) {
            this.specimen = source.specimen.map((x) => new fhir.Reference(x));
        }
        if (source['bodySite']) {
            this.bodySite = source.bodySite.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['patientInstruction']) {
            this.patientInstruction = new fhir.FhirString({ value: source.patientInstruction });
        }
        if (source['relevantHistory']) {
            this.relevantHistory = source.relevantHistory.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return RequestStatusValueSet;
    }
    /**
     * Required-bound Value Set for intent
     */
    static intentRequiredValueSet() {
        return RequestIntentValueSet;
    }
    /**
     * Example-bound Value Set for category
     */
    static categoryExampleValueSet() {
        return ServicerequestCategoryValueSet;
    }
    /**
     * Required-bound Value Set for priority
     */
    static priorityRequiredValueSet() {
        return RequestPriorityValueSet;
    }
    /**
     * Example-bound Value Set for code
     */
    static codeExampleValueSet() {
        return ProcedureCodeValueSet;
    }
    /**
     * Example-bound Value Set for orderDetail
     */
    static orderDetailExampleValueSet() {
        return ServicerequestOrderdetailValueSet;
    }
    /**
     * Example-bound Value Set for performerType
     */
    static performerTypeExampleValueSet() {
        return ParticipantRoleValueSet;
    }
    /**
     * Example-bound Value Set for locationCode
     */
    static locationCodeExampleValueSet() {
        return V3ServiceDeliveryLocationRoleTypeValueSet;
    }
    /**
     * Example-bound Value Set for reasonCode
     */
    static reasonCodeExampleValueSet() {
        return ProcedureReasonValueSet;
    }
    /**
     * Example-bound Value Set for bodySite
     */
    static bodySiteExampleValueSet() {
        return BodySiteValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'ServiceRequest' fhir: ServiceRequest.resourceType:'ServiceRequest'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["instantiatesCanonical"]) {
            this.instantiatesCanonical.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["instantiatesUri"]) {
            this.instantiatesUri.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["replaces"]) {
            this.replaces.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["requisition"]) {
            outcome.issue.push(...this.requisition.doModelValidation().issue);
        }
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:RequestStatusValueSetEnum fhir: ServiceRequest.status:code", }));
        }
        if (!this['intent']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property intent:RequestIntentValueSetEnum fhir: ServiceRequest.intent:code", }));
        }
        if (this["category"]) {
            this.category.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["doNotPerform"]) {
            outcome.issue.push(...this.doNotPerform.doModelValidation().issue);
        }
        if (this["code"]) {
            outcome.issue.push(...this.code.doModelValidation().issue);
        }
        if (this["orderDetail"]) {
            this.orderDetail.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['subject']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property subject:fhir.Reference fhir: ServiceRequest.subject:Reference", }));
        }
        if (this["subject"]) {
            outcome.issue.push(...this.subject.doModelValidation().issue);
        }
        if (this["encounter"]) {
            outcome.issue.push(...this.encounter.doModelValidation().issue);
        }
        if (this["authoredOn"]) {
            outcome.issue.push(...this.authoredOn.doModelValidation().issue);
        }
        if (this["requester"]) {
            outcome.issue.push(...this.requester.doModelValidation().issue);
        }
        if (this["performerType"]) {
            outcome.issue.push(...this.performerType.doModelValidation().issue);
        }
        if (this["performer"]) {
            this.performer.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["locationCode"]) {
            this.locationCode.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["locationReference"]) {
            this.locationReference.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["insurance"]) {
            this.insurance.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["supportingInfo"]) {
            this.supportingInfo.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["specimen"]) {
            this.specimen.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["bodySite"]) {
            this.bodySite.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["patientInstruction"]) {
            outcome.issue.push(...this.patientInstruction.doModelValidation().issue);
        }
        if (this["relevantHistory"]) {
            this.relevantHistory.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=ServiceRequest.js.map