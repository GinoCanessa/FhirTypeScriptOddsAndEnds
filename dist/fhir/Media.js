// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Media
import * as fhir from '../fhir.js';
import { EventStatusValueSet, } from '../fhirValueSets/EventStatusValueSet.js';
import { MediaTypeValueSet, } from '../fhirValueSets/MediaTypeValueSet.js';
import { MediaViewValueSet, } from '../fhirValueSets/MediaViewValueSet.js';
import { ProcedureReasonValueSet, } from '../fhirValueSets/ProcedureReasonValueSet.js';
import { BodySiteValueSet, } from '../fhirValueSets/BodySiteValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
 */
export class Media extends fhir.DomainResource {
    /**
     * Default constructor for Media - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'Media';
        /**
         * The identifier label and use can be used to determine what kind of identifier it is.
         */
        this.identifier = [];
        /**
         * A procedure that is fulfilled in whole or in part by the creation of this media.
         */
        this.basedOn = [];
        /**
         * Not to be used to link an event to an Encounter - use Media.encounter for that.
         * [The allowed reference resources may be adjusted as appropriate for the event resource].
         */
        this.partOf = [];
        this.__createdIsChoice = true;
        /**
         * Textual reasons can be captured using reasonCode.text.
         */
        this.reasonCode = [];
        /**
         * Not to be used for observations, conclusions, etc. Instead use an [Observation](observation.html) based on the Media/ImagingStudy resource.
         */
        this.note = [];
        this.resourceType = 'Media';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['modality']) {
            this.modality = new fhir.CodeableConcept(source.modality);
        }
        if (source['view']) {
            this.view = new fhir.CodeableConcept(source.view);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['created']) {
            this.created = source.created;
        }
        else if (source['createdDateTime']) {
            this.created = new fhir.FhirDateTime({ value: source.createdDateTime });
        }
        else if (source['createdPeriod']) {
            this.created = new fhir.Period(source.createdPeriod);
        }
        if (source['issued']) {
            this.issued = new fhir.FhirInstant({ value: source.issued });
        }
        if (source['operator']) {
            this.operator = new fhir.Reference(source.operator);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite);
        }
        if (source['deviceName']) {
            this.deviceName = new fhir.FhirString({ value: source.deviceName });
        }
        if (source['device']) {
            this.device = new fhir.Reference(source.device);
        }
        if (source['height']) {
            this.height = new fhir.FhirPositiveInt({ value: source.height });
        }
        if (source['width']) {
            this.width = new fhir.FhirPositiveInt({ value: source.width });
        }
        if (source['frames']) {
            this.frames = new fhir.FhirPositiveInt({ value: source.frames });
        }
        if (source['duration']) {
            this.duration = new fhir.FhirDecimal({ value: source.duration });
        }
        if (source['content']) {
            this.content = new fhir.Attachment(source.content);
        }
        else {
            this.content = null;
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return EventStatusValueSet;
    }
    /**
     * Extensible-bound Value Set for type
     */
    static typeExtensibleValueSet() {
        return MediaTypeValueSet;
    }
    /**
     * Example-bound Value Set for view
     */
    static viewExampleValueSet() {
        return MediaViewValueSet;
    }
    /**
     * Example-bound Value Set for reasonCode
     */
    static reasonCodeExampleValueSet() {
        return ProcedureReasonValueSet;
    }
    /**
     * Example-bound Value Set for bodySite
     */
    static bodySiteExampleValueSet() {
        return BodySiteValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'Media' fhir: Media.resourceType:'Media'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["partOf"]) {
            this.partOf.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:EventStatusValueSetEnum fhir: Media.status:code", }));
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["modality"]) {
            outcome.issue.push(...this.modality.doModelValidation().issue);
        }
        if (this["view"]) {
            outcome.issue.push(...this.view.doModelValidation().issue);
        }
        if (this["subject"]) {
            outcome.issue.push(...this.subject.doModelValidation().issue);
        }
        if (this["encounter"]) {
            outcome.issue.push(...this.encounter.doModelValidation().issue);
        }
        if (this["issued"]) {
            outcome.issue.push(...this.issued.doModelValidation().issue);
        }
        if (this["operator"]) {
            outcome.issue.push(...this.operator.doModelValidation().issue);
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["bodySite"]) {
            outcome.issue.push(...this.bodySite.doModelValidation().issue);
        }
        if (this["deviceName"]) {
            outcome.issue.push(...this.deviceName.doModelValidation().issue);
        }
        if (this["device"]) {
            outcome.issue.push(...this.device.doModelValidation().issue);
        }
        if (this["height"]) {
            outcome.issue.push(...this.height.doModelValidation().issue);
        }
        if (this["width"]) {
            outcome.issue.push(...this.width.doModelValidation().issue);
        }
        if (this["frames"]) {
            outcome.issue.push(...this.frames.doModelValidation().issue);
        }
        if (this["duration"]) {
            outcome.issue.push(...this.duration.doModelValidation().issue);
        }
        if (!this['content']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property content:fhir.Attachment fhir: Media.content:Attachment", }));
        }
        if (this["content"]) {
            outcome.issue.push(...this.content.doModelValidation().issue);
        }
        if (this["note"]) {
            this.note.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=Media.js.map