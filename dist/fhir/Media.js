// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
 */
export class Media extends fhir.DomainResource {
    /**
     * Default constructor for Media - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Media';
        if (source["basedOn"]) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source["bodySite"]) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite);
        }
        this.content = null;
        if (source["content"]) {
            this.content = new fhir.Attachment(source.content);
        }
        if (this.content === undefined) {
            this.content = null;
        }
        if (source["createdDateTime"]) {
            this.createdDateTime = source.createdDateTime;
        }
        if (source["_createdDateTime"]) {
            this._createdDateTime = new fhir.FhirElement(source._createdDateTime);
        }
        if (source["createdPeriod"]) {
            this.createdPeriod = new fhir.Period(source.createdPeriod);
        }
        if (source["device"]) {
            this.device = new fhir.Reference(source.device);
        }
        if (source["deviceName"]) {
            this.deviceName = source.deviceName;
        }
        if (source["_deviceName"]) {
            this._deviceName = new fhir.FhirElement(source._deviceName);
        }
        if (source["duration"]) {
            this.duration = source.duration;
        }
        if (source["_duration"]) {
            this._duration = new fhir.FhirElement(source._duration);
        }
        if (source["encounter"]) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source["frames"]) {
            this.frames = source.frames;
        }
        if (source["_frames"]) {
            this._frames = new fhir.FhirElement(source._frames);
        }
        if (source["height"]) {
            this.height = source.height;
        }
        if (source["_height"]) {
            this._height = new fhir.FhirElement(source._height);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["issued"]) {
            this.issued = source.issued;
        }
        if (source["_issued"]) {
            this._issued = new fhir.FhirElement(source._issued);
        }
        if (source["modality"]) {
            this.modality = new fhir.CodeableConcept(source.modality);
        }
        if (source["note"]) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source["operator"]) {
            this.operator = new fhir.Reference(source.operator);
        }
        if (source["partOf"]) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        if (source["reasonCode"]) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["subject"]) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source["view"]) {
            this.view = new fhir.CodeableConcept(source.view);
        }
        if (source["width"]) {
            this.width = source.width;
        }
        if (source["_width"]) {
            this._width = new fhir.FhirElement(source._width);
        }
    }
    /**
     * Check if the current Media contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["content"] === undefined) {
            missingElements.push("content");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Media from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new Media(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `Media is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the Media.status field
 */
export var MediaStatusEnum;
(function (MediaStatusEnum) {
    MediaStatusEnum["PREPARATION"] = "preparation";
    MediaStatusEnum["IN_PROGRESS"] = "in-progress";
    MediaStatusEnum["NOT_DONE"] = "not-done";
    MediaStatusEnum["ON_HOLD"] = "on-hold";
    MediaStatusEnum["STOPPED"] = "stopped";
    MediaStatusEnum["COMPLETED"] = "completed";
    MediaStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    MediaStatusEnum["UNKNOWN"] = "unknown";
})(MediaStatusEnum || (MediaStatusEnum = {}));
//# sourceMappingURL=Media.js.map