// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Media
import * as fhir from '../fhir.js';
import { EventStatusValueSet } from '../fhirValueSets/EventStatusValueSet.js';
import { MediaTypeValueSet } from '../fhirValueSets/MediaTypeValueSet.js';
import { MediaViewValueSet } from '../fhirValueSets/MediaViewValueSet.js';
import { ProcedureReasonValueSet } from '../fhirValueSets/ProcedureReasonValueSet.js';
import { BodySiteValueSet } from '../fhirValueSets/BodySiteValueSet.js';
/**
 * A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
 */
export class Media extends fhir.DomainResource {
    /**
     * Default constructor for Media - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Media';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['modality']) {
            this.modality = new fhir.CodeableConcept(source.modality);
        }
        if (source['view']) {
            this.view = new fhir.CodeableConcept(source.view);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['createdDateTime']) {
            this.createdDateTime = source.createdDateTime;
        }
        if (source['_createdDateTime']) {
            this._createdDateTime = new fhir.FhirElement(source._createdDateTime);
        }
        if (source['createdPeriod']) {
            this.createdPeriod = new fhir.Period(source.createdPeriod);
        }
        if (source['issued']) {
            this.issued = source.issued;
        }
        if (source['_issued']) {
            this._issued = new fhir.FhirElement(source._issued);
        }
        if (source['operator']) {
            this.operator = new fhir.Reference(source.operator);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite);
        }
        if (source['deviceName']) {
            this.deviceName = source.deviceName;
        }
        if (source['_deviceName']) {
            this._deviceName = new fhir.FhirElement(source._deviceName);
        }
        if (source['device']) {
            this.device = new fhir.Reference(source.device);
        }
        if (source['height']) {
            this.height = source.height;
        }
        if (source['_height']) {
            this._height = new fhir.FhirElement(source._height);
        }
        if (source['width']) {
            this.width = source.width;
        }
        if (source['_width']) {
            this._width = new fhir.FhirElement(source._width);
        }
        if (source['frames']) {
            this.frames = source.frames;
        }
        if (source['_frames']) {
            this._frames = new fhir.FhirElement(source._frames);
        }
        if (source['duration']) {
            this.duration = source.duration;
        }
        if (source['_duration']) {
            this._duration = new fhir.FhirElement(source._duration);
        }
        if (source['content']) {
            this.content = new fhir.Attachment(source.content);
        }
        else {
            this.content = null;
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return EventStatusValueSet;
    }
    /**
     * Extensible-bound Value Set for type
     */
    typeExtensibleValueSet() {
        return MediaTypeValueSet;
    }
    /**
     * Example-bound Value Set for view
     */
    viewExampleValueSet() {
        return MediaViewValueSet;
    }
    /**
     * Example-bound Value Set for reasonCode
     */
    reasonCodeExampleValueSet() {
        return ProcedureReasonValueSet;
    }
    /**
     * Example-bound Value Set for bodySite
     */
    bodySiteExampleValueSet() {
        return BodySiteValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: Media.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["partOf"]) {
            this.partOf.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: Media.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["modality"]) {
            results.push(...this.modality.doModelValidation());
        }
        if (this["view"]) {
            results.push(...this.view.doModelValidation());
        }
        if (this["subject"]) {
            results.push(...this.subject.doModelValidation());
        }
        if (this["encounter"]) {
            results.push(...this.encounter.doModelValidation());
        }
        if (this["_createdDateTime"]) {
            results.push(...this._createdDateTime.doModelValidation());
        }
        if (this["createdPeriod"]) {
            results.push(...this.createdPeriod.doModelValidation());
        }
        if (this["_issued"]) {
            results.push(...this._issued.doModelValidation());
        }
        if (this["operator"]) {
            results.push(...this.operator.doModelValidation());
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["bodySite"]) {
            results.push(...this.bodySite.doModelValidation());
        }
        if (this["_deviceName"]) {
            results.push(...this._deviceName.doModelValidation());
        }
        if (this["device"]) {
            results.push(...this.device.doModelValidation());
        }
        if (this["_height"]) {
            results.push(...this._height.doModelValidation());
        }
        if (this["_width"]) {
            results.push(...this._width.doModelValidation());
        }
        if (this["_frames"]) {
            results.push(...this._frames.doModelValidation());
        }
        if (this["_duration"]) {
            results.push(...this._duration.doModelValidation());
        }
        if (!this["content"]) {
            results.push(["content", 'Missing required element: Media.content']);
        }
        if (this["content"]) {
            results.push(...this.content.doModelValidation());
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=Media.js.map