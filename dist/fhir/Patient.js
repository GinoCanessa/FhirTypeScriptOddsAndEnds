// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Patient
import * as fhir from '../fhir.js';
import { PatientContactrelationshipValueSet } from '../fhirValueSets/PatientContactrelationshipValueSet.js';
import { AdministrativeGenderValueSet } from '../fhirValueSets/AdministrativeGenderValueSet.js';
import { LanguagesValueSet } from '../fhirValueSets/LanguagesValueSet.js';
import { LinkTypeValueSet } from '../fhirValueSets/LinkTypeValueSet.js';
import { MaritalStatusValueSet } from '../fhirValueSets/MaritalStatusValueSet.js';
/**
 * Contact covers all kinds of contact parties: family members, business contacts, guardians, caregivers. Not applicable to register pedigree and family ties beyond use of having contact.
 */
export class PatientContact extends fhir.BackboneElement {
    /**
     * Default constructor for PatientContact - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['relationship']) {
            this.relationship = source.relationship.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['name']) {
            this.name = new fhir.HumanName(source.name);
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        if (source['address']) {
            this.address = new fhir.Address(source.address);
        }
        if (source['gender']) {
            this.gender = source.gender;
        }
        if (source['_gender']) {
            this._gender = new fhir.FhirElement(source._gender);
        }
        if (source['organization']) {
            this.organization = new fhir.Reference(source.organization);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Extensible-bound Value Set for relationship
     */
    relationshipExtensibleValueSet() {
        return PatientContactrelationshipValueSet;
    }
    /**
     * Required-bound Value Set for gender
     */
    genderRequiredValueSet() {
        return AdministrativeGenderValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["relationship"]) {
            this.relationship.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["name"]) {
            results.push(...this.name.doModelValidation());
        }
        if (this["telecom"]) {
            this.telecom.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["address"]) {
            results.push(...this.address.doModelValidation());
        }
        if (this["_gender"]) {
            results.push(...this._gender.doModelValidation());
        }
        if (this["organization"]) {
            results.push(...this.organization.doModelValidation());
        }
        if (this["period"]) {
            results.push(...this.period.doModelValidation());
        }
        return results;
    }
}
/**
 * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple Patient.Communication associations.   For animals, language is not a relevant field, and should be absent from the instance. If the Patient does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
 */
export class PatientCommunication extends fhir.BackboneElement {
    /**
     * Default constructor for PatientCommunication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['language']) {
            this.language = new fhir.CodeableConcept(source.language);
        }
        else {
            this.language = null;
        }
        if (source['preferred']) {
            this.preferred = source.preferred;
        }
        if (source['_preferred']) {
            this._preferred = new fhir.FhirElement(source._preferred);
        }
    }
    /**
     * Preferred-bound Value Set for language
     */
    languagePreferredValueSet() {
        return LanguagesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["language"]) {
            results.push(["language", 'Missing required element: Patient.communication.language']);
        }
        if (this["language"]) {
            results.push(...this.language.doModelValidation());
        }
        if (this["_preferred"]) {
            results.push(...this._preferred.doModelValidation());
        }
        return results;
    }
}
/**
 * There is no assumption that linked patient records have mutual links.
 */
export class PatientLink extends fhir.BackboneElement {
    /**
     * Default constructor for PatientLink - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['other']) {
            this.other = new fhir.Reference(source.other);
        }
        else {
            this.other = null;
        }
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            this._type = new fhir.FhirElement(source._type);
        }
    }
    /**
     * Required-bound Value Set for type
     */
    typeRequiredValueSet() {
        return LinkTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["other"]) {
            results.push(["other", 'Missing required element: Patient.link.other']);
        }
        if (this["other"]) {
            results.push(...this.other.doModelValidation());
        }
        if (!this["type"]) {
            results.push(["type", 'Missing required element: Patient.link.type']);
        }
        if (this["_type"]) {
            results.push(...this._type.doModelValidation());
        }
        return results;
    }
}
/**
 * Demographics and other administrative information about an individual or animal receiving care or other health-related services.
 */
export class Patient extends fhir.DomainResource {
    /**
     * Default constructor for Patient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Patient';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['active']) {
            this.active = source.active;
        }
        if (source['_active']) {
            this._active = new fhir.FhirElement(source._active);
        }
        if (source['name']) {
            this.name = source.name.map((x) => new fhir.HumanName(x));
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        if (source['gender']) {
            this.gender = source.gender;
        }
        if (source['_gender']) {
            this._gender = new fhir.FhirElement(source._gender);
        }
        if (source['birthDate']) {
            this.birthDate = source.birthDate;
        }
        if (source['_birthDate']) {
            this._birthDate = new fhir.FhirElement(source._birthDate);
        }
        if (source['deceasedBoolean']) {
            this.deceasedBoolean = source.deceasedBoolean;
        }
        if (source['_deceasedBoolean']) {
            this._deceasedBoolean = new fhir.FhirElement(source._deceasedBoolean);
        }
        if (source['deceasedDateTime']) {
            this.deceasedDateTime = source.deceasedDateTime;
        }
        if (source['_deceasedDateTime']) {
            this._deceasedDateTime = new fhir.FhirElement(source._deceasedDateTime);
        }
        if (source['address']) {
            this.address = source.address.map((x) => new fhir.Address(x));
        }
        if (source['maritalStatus']) {
            this.maritalStatus = new fhir.CodeableConcept(source.maritalStatus);
        }
        if (source['multipleBirthBoolean']) {
            this.multipleBirthBoolean = source.multipleBirthBoolean;
        }
        if (source['_multipleBirthBoolean']) {
            this._multipleBirthBoolean = new fhir.FhirElement(source._multipleBirthBoolean);
        }
        if (source['multipleBirthInteger']) {
            this.multipleBirthInteger = source.multipleBirthInteger;
        }
        if (source['_multipleBirthInteger']) {
            this._multipleBirthInteger = new fhir.FhirElement(source._multipleBirthInteger);
        }
        if (source['photo']) {
            this.photo = source.photo.map((x) => new fhir.Attachment(x));
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.PatientContact(x));
        }
        if (source['communication']) {
            this.communication = source.communication.map((x) => new fhir.PatientCommunication(x));
        }
        if (source['generalPractitioner']) {
            this.generalPractitioner = source.generalPractitioner.map((x) => new fhir.Reference(x));
        }
        if (source['managingOrganization']) {
            this.managingOrganization = new fhir.Reference(source.managingOrganization);
        }
        if (source['link']) {
            this.link = source.link.map((x) => new fhir.PatientLink(x));
        }
    }
    /**
     * Required-bound Value Set for gender
     */
    genderRequiredValueSet() {
        return AdministrativeGenderValueSet;
    }
    /**
     * Extensible-bound Value Set for maritalStatus
     */
    maritalStatusExtensibleValueSet() {
        return MaritalStatusValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: Patient.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_active"]) {
            results.push(...this._active.doModelValidation());
        }
        if (this["name"]) {
            this.name.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["telecom"]) {
            this.telecom.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_gender"]) {
            results.push(...this._gender.doModelValidation());
        }
        if (this["_birthDate"]) {
            results.push(...this._birthDate.doModelValidation());
        }
        if (this["_deceasedBoolean"]) {
            results.push(...this._deceasedBoolean.doModelValidation());
        }
        if (this["_deceasedDateTime"]) {
            results.push(...this._deceasedDateTime.doModelValidation());
        }
        if (this["address"]) {
            this.address.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["maritalStatus"]) {
            results.push(...this.maritalStatus.doModelValidation());
        }
        if (this["_multipleBirthBoolean"]) {
            results.push(...this._multipleBirthBoolean.doModelValidation());
        }
        if (this["_multipleBirthInteger"]) {
            results.push(...this._multipleBirthInteger.doModelValidation());
        }
        if (this["photo"]) {
            this.photo.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["communication"]) {
            this.communication.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["generalPractitioner"]) {
            this.generalPractitioner.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["managingOrganization"]) {
            results.push(...this.managingOrganization.doModelValidation());
        }
        if (this["link"]) {
            this.link.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=Patient.js.map