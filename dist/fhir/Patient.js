var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Restricted to: Patient|Encounter|Observation
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Contact covers all kinds of contact parties: family members, business contacts, guardians, caregivers. Not applicable to register pedigree and family ties beyond use of having contact.
 */
var PatientContact = /** @class */ (function (_super) {
    __extends(PatientContact, _super);
    /**
     * Default constructor for PatientContact - initializes required elements to null.
     */
    function PatientContact() {
        return _super.call(this) || this;
    }
    /**
     * Factory function to create a PatientContact from an object that MAY NOT contain all required elements.
     */
    PatientContact.FactoryCreate = function (source) {
        var dest = _super.FactoryCreate.call(this, source);
        if (source["address"] !== undefined) {
            dest.address = fhir.Address.FactoryCreate(source.address);
        }
        if (source["gender"] !== undefined) {
            dest.gender = source.gender;
        }
        if (source["_gender"] !== undefined) {
            dest._gender = fhir.FhirElement.FactoryCreate(source._gender);
        }
        if (source["name"] !== undefined) {
            dest.name = fhir.HumanName.FactoryCreate(source.name);
        }
        if (source["organization"] !== undefined) {
            dest.organization = fhir.Reference.FactoryCreate(source.organization);
        }
        if (source["period"] !== undefined) {
            dest.period = fhir.Period.FactoryCreate(source.period);
        }
        if (source["relationship"] !== undefined) {
            dest.relationship = source.relationship.map(function (x) { return fhir.CodeableConcept.FactoryCreate(x); });
        }
        if (source["telecom"] !== undefined) {
            dest.telecom = source.telecom.map(function (x) { return fhir.ContactPoint.FactoryCreate(x); });
        }
        return dest;
    };
    /**
     * Check if the current PatientContact contains all required elements.
     */
    PatientContact.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    /**
     * Factory function to create a PatientContact from an object that MUST contain all required elements.
     */
    PatientContact.FactoryCreateStrict = function (source) {
        var dest = this.FactoryCreate(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "PatientContact is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    return PatientContact;
}(fhir.BackboneElement));
export { PatientContact };
/**
 * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple Patient.Communication associations.   For animals, language is not a relevant field, and should be absent from the instance. If the Patient does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
 */
var PatientCommunication = /** @class */ (function (_super) {
    __extends(PatientCommunication, _super);
    /**
     * Default constructor for PatientCommunication - initializes required elements to null.
     */
    function PatientCommunication() {
        var _this = _super.call(this) || this;
        _this.language = null;
        return _this;
    }
    /**
     * Factory function to create a PatientCommunication from an object that MAY NOT contain all required elements.
     */
    PatientCommunication.FactoryCreate = function (source) {
        var dest = _super.FactoryCreate.call(this, source);
        if (source["language"] !== undefined) {
            dest.language = fhir.CodeableConcept.FactoryCreate(source.language);
        }
        if (source["preferred"] !== undefined) {
            dest.preferred = source.preferred;
        }
        if (source["_preferred"] !== undefined) {
            dest._preferred = fhir.FhirElement.FactoryCreate(source._preferred);
        }
        return dest;
    };
    /**
     * Check if the current PatientCommunication contains all required elements.
     */
    PatientCommunication.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["language"] === undefined) {
            missingElements.push("language");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    /**
     * Factory function to create a PatientCommunication from an object that MUST contain all required elements.
     */
    PatientCommunication.FactoryCreateStrict = function (source) {
        var dest = this.FactoryCreate(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "PatientCommunication is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    return PatientCommunication;
}(fhir.BackboneElement));
export { PatientCommunication };
/**
 * There is no assumption that linked patient records have mutual links.
 */
var PatientLink = /** @class */ (function (_super) {
    __extends(PatientLink, _super);
    /**
     * Default constructor for PatientLink - initializes required elements to null.
     */
    function PatientLink() {
        var _this = _super.call(this) || this;
        _this.other = null;
        _this.type = null;
        return _this;
    }
    /**
     * Factory function to create a PatientLink from an object that MAY NOT contain all required elements.
     */
    PatientLink.FactoryCreate = function (source) {
        var dest = _super.FactoryCreate.call(this, source);
        if (source["other"] !== undefined) {
            dest.other = fhir.Reference.FactoryCreate(source.other);
        }
        if (source["type"] !== undefined) {
            dest.type = source.type;
        }
        if (source["_type"] !== undefined) {
            dest._type = fhir.FhirElement.FactoryCreate(source._type);
        }
        return dest;
    };
    /**
     * Check if the current PatientLink contains all required elements.
     */
    PatientLink.prototype.checkRequiredElements = function () {
        var missingElements = [];
        if (this["other"] === undefined) {
            missingElements.push("other");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    /**
     * Factory function to create a PatientLink from an object that MUST contain all required elements.
     */
    PatientLink.FactoryCreateStrict = function (source) {
        var dest = this.FactoryCreate(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "PatientLink is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    return PatientLink;
}(fhir.BackboneElement));
export { PatientLink };
/**
 * Demographics and other administrative information about an individual or animal receiving care or other health-related services.
 */
var Patient = /** @class */ (function (_super) {
    __extends(Patient, _super);
    /**
     * Default constructor for Patient - initializes required elements to null.
     */
    function Patient() {
        var _this = _super.call(this) || this;
        /**
         * Resource Type Name
         */
        _this.resourceType = "Patient";
        return _this;
    }
    /**
     * Factory function to create a Patient from an object that MAY NOT contain all required elements.
     */
    Patient.FactoryCreate = function (source) {
        var dest = _super.FactoryCreate.call(this, source);
        if ((source['resourceType'] !== "Patient") || (source['resourceType'] !== undefined)) {
            throw 'Invalid resourceType for a Patient';
        }
        if (source["active"] !== undefined) {
            dest.active = source.active;
        }
        if (source["_active"] !== undefined) {
            dest._active = fhir.FhirElement.FactoryCreate(source._active);
        }
        if (source["address"] !== undefined) {
            dest.address = source.address.map(function (x) { return fhir.Address.FactoryCreate(x); });
        }
        if (source["birthDate"] !== undefined) {
            dest.birthDate = source.birthDate;
        }
        if (source["_birthDate"] !== undefined) {
            dest._birthDate = fhir.FhirElement.FactoryCreate(source._birthDate);
        }
        if (source["communication"] !== undefined) {
            dest.communication = source.communication.map(function (x) { return fhir.PatientCommunication.FactoryCreate(x); });
        }
        if (source["contact"] !== undefined) {
            dest.contact = source.contact.map(function (x) { return fhir.PatientContact.FactoryCreate(x); });
        }
        if (source["deceasedBoolean"] !== undefined) {
            dest.deceasedBoolean = source.deceasedBoolean;
        }
        if (source["_deceasedBoolean"] !== undefined) {
            dest._deceasedBoolean = fhir.FhirElement.FactoryCreate(source._deceasedBoolean);
        }
        if (source["deceasedDateTime"] !== undefined) {
            dest.deceasedDateTime = source.deceasedDateTime;
        }
        if (source["_deceasedDateTime"] !== undefined) {
            dest._deceasedDateTime = fhir.FhirElement.FactoryCreate(source._deceasedDateTime);
        }
        if (source["gender"] !== undefined) {
            dest.gender = source.gender;
        }
        if (source["_gender"] !== undefined) {
            dest._gender = fhir.FhirElement.FactoryCreate(source._gender);
        }
        if (source["generalPractitioner"] !== undefined) {
            dest.generalPractitioner = source.generalPractitioner.map(function (x) { return fhir.Reference.FactoryCreate(x); });
        }
        if (source["identifier"] !== undefined) {
            dest.identifier = source.identifier.map(function (x) { return fhir.Identifier.FactoryCreate(x); });
        }
        if (source["link"] !== undefined) {
            dest.link = source.link.map(function (x) { return fhir.PatientLink.FactoryCreate(x); });
        }
        if (source["managingOrganization"] !== undefined) {
            dest.managingOrganization = fhir.Reference.FactoryCreate(source.managingOrganization);
        }
        if (source["maritalStatus"] !== undefined) {
            dest.maritalStatus = fhir.CodeableConcept.FactoryCreate(source.maritalStatus);
        }
        if (source["multipleBirthBoolean"] !== undefined) {
            dest.multipleBirthBoolean = source.multipleBirthBoolean;
        }
        if (source["_multipleBirthBoolean"] !== undefined) {
            dest._multipleBirthBoolean = fhir.FhirElement.FactoryCreate(source._multipleBirthBoolean);
        }
        if (source["multipleBirthInteger"] !== undefined) {
            dest.multipleBirthInteger = source.multipleBirthInteger;
        }
        if (source["_multipleBirthInteger"] !== undefined) {
            dest._multipleBirthInteger = fhir.FhirElement.FactoryCreate(source._multipleBirthInteger);
        }
        if (source["name"] !== undefined) {
            dest.name = source.name.map(function (x) { return fhir.HumanName.FactoryCreate(x); });
        }
        if (source["photo"] !== undefined) {
            dest.photo = source.photo.map(function (x) { return fhir.Attachment.FactoryCreate(x); });
        }
        if (source["telecom"] !== undefined) {
            dest.telecom = source.telecom.map(function (x) { return fhir.ContactPoint.FactoryCreate(x); });
        }
        return dest;
    };
    /**
     * Check if the current Patient contains all required elements.
     */
    Patient.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    /**
     * Factory function to create a Patient from an object that MUST contain all required elements.
     */
    Patient.FactoryCreateStrict = function (source) {
        var dest = this.FactoryCreate(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "Patient is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    return Patient;
}(fhir.DomainResource));
export { Patient };
/**
 * Code Values for the Patient.contact.gender field
 */
export var PatientContactGenderEnum;
(function (PatientContactGenderEnum) {
    PatientContactGenderEnum["MALE"] = "male";
    PatientContactGenderEnum["FEMALE"] = "female";
    PatientContactGenderEnum["OTHER"] = "other";
    PatientContactGenderEnum["UNKNOWN"] = "unknown";
})(PatientContactGenderEnum || (PatientContactGenderEnum = {}));
/**
 * Code Values for the Patient.link.type field
 */
export var PatientLinkTypeEnum;
(function (PatientLinkTypeEnum) {
    PatientLinkTypeEnum["REPLACED_BY"] = "replaced-by";
    PatientLinkTypeEnum["REPLACES"] = "replaces";
    PatientLinkTypeEnum["REFER"] = "refer";
    PatientLinkTypeEnum["SEEALSO"] = "seealso";
})(PatientLinkTypeEnum || (PatientLinkTypeEnum = {}));
/**
 * Code Values for the Patient.gender field
 */
export var PatientGenderEnum;
(function (PatientGenderEnum) {
    PatientGenderEnum["MALE"] = "male";
    PatientGenderEnum["FEMALE"] = "female";
    PatientGenderEnum["OTHER"] = "other";
    PatientGenderEnum["UNKNOWN"] = "unknown";
})(PatientGenderEnum || (PatientGenderEnum = {}));
//# sourceMappingURL=Patient.js.map