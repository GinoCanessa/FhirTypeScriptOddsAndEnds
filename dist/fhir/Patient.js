// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Contact covers all kinds of contact parties: family members, business contacts, guardians, caregivers. Not applicable to register pedigree and family ties beyond use of having contact.
 */
export class PatientContact extends fhir.BackboneElement {
    /**
     * Default constructor for PatientContact - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["address"]) {
            this.address = new fhir.Address(source.address);
        }
        if (source["gender"]) {
            this.gender = source.gender;
        }
        if (source["_gender"]) {
            this._gender = new fhir.FhirElement(source._gender);
        }
        if (source["name"]) {
            this.name = new fhir.HumanName(source.name);
        }
        if (source["organization"]) {
            this.organization = new fhir.Reference(source.organization);
        }
        if (source["period"]) {
            this.period = new fhir.Period(source.period);
        }
        if (source["relationship"]) {
            this.relationship = source.relationship.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["telecom"]) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
    }
    /**
     * Check if the current PatientContact contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a PatientContact from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new PatientContact(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `PatientContact is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple Patient.Communication associations.   For animals, language is not a relevant field, and should be absent from the instance. If the Patient does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
 */
export class PatientCommunication extends fhir.BackboneElement {
    /**
     * Default constructor for PatientCommunication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.language = null;
        if (source["language"]) {
            this.language = new fhir.CodeableConcept(source.language);
        }
        if (this.language === undefined) {
            this.language = null;
        }
        if (source["preferred"]) {
            this.preferred = source.preferred;
        }
        if (source["_preferred"]) {
            this._preferred = new fhir.FhirElement(source._preferred);
        }
    }
    /**
     * Check if the current PatientCommunication contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["language"] === undefined) {
            missingElements.push("language");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a PatientCommunication from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new PatientCommunication(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `PatientCommunication is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * There is no assumption that linked patient records have mutual links.
 */
export class PatientLink extends fhir.BackboneElement {
    /**
     * Default constructor for PatientLink - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.other = null;
        if (source["other"]) {
            this.other = new fhir.Reference(source.other);
        }
        if (this.other === undefined) {
            this.other = null;
        }
        this.type = null;
        if (source["type"]) {
            this.type = source.type;
        }
        if (this.type === undefined) {
            this.type = null;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
    }
    /**
     * Check if the current PatientLink contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["other"] === undefined) {
            missingElements.push("other");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a PatientLink from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new PatientLink(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `PatientLink is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Demographics and other administrative information about an individual or animal receiving care or other health-related services.
 */
export class Patient extends fhir.DomainResource {
    /**
     * Default constructor for Patient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Patient';
        if (source["active"]) {
            this.active = source.active;
        }
        if (source["_active"]) {
            this._active = new fhir.FhirElement(source._active);
        }
        if (source["address"]) {
            this.address = source.address.map((x) => new fhir.Address(x));
        }
        if (source["birthDate"]) {
            this.birthDate = source.birthDate;
        }
        if (source["_birthDate"]) {
            this._birthDate = new fhir.FhirElement(source._birthDate);
        }
        if (source["communication"]) {
            this.communication = source.communication.map((x) => new fhir.PatientCommunication(x));
        }
        if (source["contact"]) {
            this.contact = source.contact.map((x) => new fhir.PatientContact(x));
        }
        if (source["deceasedBoolean"]) {
            this.deceasedBoolean = source.deceasedBoolean;
        }
        if (source["_deceasedBoolean"]) {
            this._deceasedBoolean = new fhir.FhirElement(source._deceasedBoolean);
        }
        if (source["deceasedDateTime"]) {
            this.deceasedDateTime = source.deceasedDateTime;
        }
        if (source["_deceasedDateTime"]) {
            this._deceasedDateTime = new fhir.FhirElement(source._deceasedDateTime);
        }
        if (source["gender"]) {
            this.gender = source.gender;
        }
        if (source["_gender"]) {
            this._gender = new fhir.FhirElement(source._gender);
        }
        if (source["generalPractitioner"]) {
            this.generalPractitioner = source.generalPractitioner.map((x) => new fhir.Reference(x));
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["link"]) {
            this.link = source.link.map((x) => new fhir.PatientLink(x));
        }
        if (source["managingOrganization"]) {
            this.managingOrganization = new fhir.Reference(source.managingOrganization);
        }
        if (source["maritalStatus"]) {
            this.maritalStatus = new fhir.CodeableConcept(source.maritalStatus);
        }
        if (source["multipleBirthBoolean"]) {
            this.multipleBirthBoolean = source.multipleBirthBoolean;
        }
        if (source["_multipleBirthBoolean"]) {
            this._multipleBirthBoolean = new fhir.FhirElement(source._multipleBirthBoolean);
        }
        if (source["multipleBirthInteger"]) {
            this.multipleBirthInteger = source.multipleBirthInteger;
        }
        if (source["_multipleBirthInteger"]) {
            this._multipleBirthInteger = new fhir.FhirElement(source._multipleBirthInteger);
        }
        if (source["name"]) {
            this.name = source.name.map((x) => new fhir.HumanName(x));
        }
        if (source["photo"]) {
            this.photo = source.photo.map((x) => new fhir.Attachment(x));
        }
        if (source["telecom"]) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
    }
    /**
     * Check if the current Patient contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Patient from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new Patient(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `Patient is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the Patient.contact.gender field
 */
export var PatientContactGenderEnum;
(function (PatientContactGenderEnum) {
    PatientContactGenderEnum["MALE"] = "male";
    PatientContactGenderEnum["FEMALE"] = "female";
    PatientContactGenderEnum["OTHER"] = "other";
    PatientContactGenderEnum["UNKNOWN"] = "unknown";
})(PatientContactGenderEnum || (PatientContactGenderEnum = {}));
/**
 * Code Values for the Patient.link.type field
 */
export var PatientLinkTypeEnum;
(function (PatientLinkTypeEnum) {
    PatientLinkTypeEnum["REPLACED_BY"] = "replaced-by";
    PatientLinkTypeEnum["REPLACES"] = "replaces";
    PatientLinkTypeEnum["REFER"] = "refer";
    PatientLinkTypeEnum["SEEALSO"] = "seealso";
})(PatientLinkTypeEnum || (PatientLinkTypeEnum = {}));
/**
 * Code Values for the Patient.gender field
 */
export var PatientGenderEnum;
(function (PatientGenderEnum) {
    PatientGenderEnum["MALE"] = "male";
    PatientGenderEnum["FEMALE"] = "female";
    PatientGenderEnum["OTHER"] = "other";
    PatientGenderEnum["UNKNOWN"] = "unknown";
})(PatientGenderEnum || (PatientGenderEnum = {}));
//# sourceMappingURL=Patient.js.map