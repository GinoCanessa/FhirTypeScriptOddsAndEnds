// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: TestReport
import * as fhir from '../fhir.js';
import { ReportParticipantTypeValueSet } from '../fhirValueSets/ReportParticipantTypeValueSet.js';
import { ReportActionResultCodesValueSet } from '../fhirValueSets/ReportActionResultCodesValueSet.js';
import { ReportStatusCodesValueSet } from '../fhirValueSets/ReportStatusCodesValueSet.js';
import { ReportResultCodesValueSet } from '../fhirValueSets/ReportResultCodesValueSet.js';
/**
 * A participant in the test execution, either the execution engine, a client, or a server.
 */
export class TestReportParticipant extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportParticipant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source['uri']) {
            this.uri = source.uri;
        }
        else {
            this.uri = null;
        }
        if (source['_uri']) {
            this._uri = new fhir.FhirElement(source._uri);
        }
        if (source['display']) {
            this.display = source.display;
        }
        if (source['_display']) {
            this._display = new fhir.FhirElement(source._display);
        }
    }
    /**
     * Required-bound Value Set for type
     */
    static typeRequiredValueSet() {
        return ReportParticipantTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["type"]) {
            results.push(["type", 'Missing required element: TestReport.participant.type']);
        }
        if (this["_type"]) {
            results.push(...this._type.doModelValidation());
        }
        if (!this["uri"]) {
            results.push(["uri", 'Missing required element: TestReport.participant.uri']);
        }
        if (this["_uri"]) {
            results.push(...this._uri.doModelValidation());
        }
        if (this["_display"]) {
            results.push(...this._display.doModelValidation());
        }
        return results;
    }
}
/**
 * The operation performed.
 */
export class TestReportSetupActionOperation extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportSetupActionOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['result']) {
            this.result = source.result;
        }
        else {
            this.result = null;
        }
        if (source['_result']) {
            this._result = new fhir.FhirElement(source._result);
        }
        if (source['message']) {
            this.message = source.message;
        }
        if (source['_message']) {
            this._message = new fhir.FhirElement(source._message);
        }
        if (source['detail']) {
            this.detail = source.detail;
        }
        if (source['_detail']) {
            this._detail = new fhir.FhirElement(source._detail);
        }
    }
    /**
     * Required-bound Value Set for result
     */
    static resultRequiredValueSet() {
        return ReportActionResultCodesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["result"]) {
            results.push(["result", 'Missing required element: TestReport.setup.action.operation.result']);
        }
        if (this["_result"]) {
            results.push(...this._result.doModelValidation());
        }
        if (this["_message"]) {
            results.push(...this._message.doModelValidation());
        }
        if (this["_detail"]) {
            results.push(...this._detail.doModelValidation());
        }
        return results;
    }
}
/**
 * The results of the assertion performed on the previous operations.
 */
export class TestReportSetupActionAssert extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportSetupActionAssert - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['result']) {
            this.result = source.result;
        }
        else {
            this.result = null;
        }
        if (source['_result']) {
            this._result = new fhir.FhirElement(source._result);
        }
        if (source['message']) {
            this.message = source.message;
        }
        if (source['_message']) {
            this._message = new fhir.FhirElement(source._message);
        }
        if (source['detail']) {
            this.detail = source.detail;
        }
        if (source['_detail']) {
            this._detail = new fhir.FhirElement(source._detail);
        }
    }
    /**
     * Required-bound Value Set for result
     */
    static resultRequiredValueSet() {
        return ReportActionResultCodesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["result"]) {
            results.push(["result", 'Missing required element: TestReport.setup.action.assert.result']);
        }
        if (this["_result"]) {
            results.push(...this._result.doModelValidation());
        }
        if (this["_message"]) {
            results.push(...this._message.doModelValidation());
        }
        if (this["_detail"]) {
            results.push(...this._detail.doModelValidation());
        }
        return results;
    }
}
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestReportSetupAction extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportSetupAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['operation']) {
            this.operation = new fhir.TestReportSetupActionOperation(source.operation);
        }
        if (source['assert']) {
            this.assert = new fhir.TestReportSetupActionAssert(source.assert);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["operation"]) {
            results.push(...this.operation.doModelValidation());
        }
        if (this["assert"]) {
            results.push(...this.assert.doModelValidation());
        }
        return results;
    }
}
/**
 * The results of the series of required setup operations before the tests were executed.
 */
export class TestReportSetup extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportSetup - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.TestReportSetupAction(x));
        }
        else {
            this.action = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if ((!this["action"]) || (this["action"].length === 0)) {
            results.push(["action", 'Missing required element: TestReport.setup.action']);
        }
        if (this["action"]) {
            this.action.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestReportTestAction extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportTestAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['operation']) {
            this.operation = new fhir.TestReportSetupActionOperation(source.operation);
        }
        if (source['assert']) {
            this.assert = new fhir.TestReportSetupActionAssert(source.assert);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["operation"]) {
            results.push(...this.operation.doModelValidation());
        }
        if (this["assert"]) {
            results.push(...this.assert.doModelValidation());
        }
        return results;
    }
}
/**
 * A test executed from the test script.
 */
export class TestReportTest extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportTest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.TestReportTestAction(x));
        }
        else {
            this.action = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if ((!this["action"]) || (this["action"].length === 0)) {
            results.push(["action", 'Missing required element: TestReport.test.action']);
        }
        if (this["action"]) {
            this.action.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestReportTeardownAction extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportTeardownAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['operation']) {
            this.operation = new fhir.TestReportSetupActionOperation(source.operation);
        }
        else {
            this.operation = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["operation"]) {
            results.push(["operation", 'Missing required element: TestReport.teardown.action.operation']);
        }
        if (this["operation"]) {
            results.push(...this.operation.doModelValidation());
        }
        return results;
    }
}
/**
 * The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
 */
export class TestReportTeardown extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportTeardown - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.TestReportTeardownAction(x));
        }
        else {
            this.action = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if ((!this["action"]) || (this["action"].length === 0)) {
            results.push(["action", 'Missing required element: TestReport.teardown.action']);
        }
        if (this["action"]) {
            this.action.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * A summary of information based on the results of executing a TestScript.
 */
export class TestReport extends fhir.DomainResource {
    /**
     * Default constructor for TestReport - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'TestReport';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['testScript']) {
            this.testScript = new fhir.Reference(source.testScript);
        }
        else {
            this.testScript = null;
        }
        if (source['result']) {
            this.result = source.result;
        }
        else {
            this.result = null;
        }
        if (source['_result']) {
            this._result = new fhir.FhirElement(source._result);
        }
        if (source['score']) {
            this.score = source.score;
        }
        if (source['_score']) {
            this._score = new fhir.FhirElement(source._score);
        }
        if (source['tester']) {
            this.tester = source.tester;
        }
        if (source['_tester']) {
            this._tester = new fhir.FhirElement(source._tester);
        }
        if (source['issued']) {
            this.issued = source.issued;
        }
        if (source['_issued']) {
            this._issued = new fhir.FhirElement(source._issued);
        }
        if (source['participant']) {
            this.participant = source.participant.map((x) => new fhir.TestReportParticipant(x));
        }
        if (source['setup']) {
            this.setup = new fhir.TestReportSetup(source.setup);
        }
        if (source['test']) {
            this.test = source.test.map((x) => new fhir.TestReportTest(x));
        }
        if (source['teardown']) {
            this.teardown = new fhir.TestReportTeardown(source.teardown);
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return ReportStatusCodesValueSet;
    }
    /**
     * Required-bound Value Set for result
     */
    static resultRequiredValueSet() {
        return ReportResultCodesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: TestReport.resourceType']);
        }
        if (this["identifier"]) {
            results.push(...this.identifier.doModelValidation());
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: TestReport.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (!this["testScript"]) {
            results.push(["testScript", 'Missing required element: TestReport.testScript']);
        }
        if (this["testScript"]) {
            results.push(...this.testScript.doModelValidation());
        }
        if (!this["result"]) {
            results.push(["result", 'Missing required element: TestReport.result']);
        }
        if (this["_result"]) {
            results.push(...this._result.doModelValidation());
        }
        if (this["_score"]) {
            results.push(...this._score.doModelValidation());
        }
        if (this["_tester"]) {
            results.push(...this._tester.doModelValidation());
        }
        if (this["_issued"]) {
            results.push(...this._issued.doModelValidation());
        }
        if (this["participant"]) {
            this.participant.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["setup"]) {
            results.push(...this.setup.doModelValidation());
        }
        if (this["test"]) {
            this.test.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["teardown"]) {
            results.push(...this.teardown.doModelValidation());
        }
        return results;
    }
}
//# sourceMappingURL=TestReport.js.map