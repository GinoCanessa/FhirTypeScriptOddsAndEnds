// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * A participant in the test execution, either the execution engine, a client, or a server.
 */
export class TestReportParticipant extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportParticipant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["display"]) {
            this.display = source.display;
        }
        if (source["_display"]) {
            this._display = new fhir.FhirElement(source._display);
        }
        this.type = null;
        if (source["type"]) {
            this.type = source.type;
        }
        if (this.type === undefined) {
            this.type = null;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
        this.uri = null;
        if (source["uri"]) {
            this.uri = source.uri;
        }
        if (this.uri === undefined) {
            this.uri = null;
        }
        if (source["_uri"]) {
            this._uri = new fhir.FhirElement(source._uri);
        }
    }
    /**
     * Check if the current TestReportParticipant contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        if (this["uri"] === undefined) {
            missingElements.push("uri");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a TestReportParticipant from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new TestReportParticipant(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `TestReportParticipant is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The operation performed.
 */
export class TestReportSetupActionOperation extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportSetupActionOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["detail"]) {
            this.detail = source.detail;
        }
        if (source["_detail"]) {
            this._detail = new fhir.FhirElement(source._detail);
        }
        if (source["message"]) {
            this.message = source.message;
        }
        if (source["_message"]) {
            this._message = new fhir.FhirElement(source._message);
        }
        this.result = null;
        if (source["result"]) {
            this.result = source.result;
        }
        if (this.result === undefined) {
            this.result = null;
        }
        if (source["_result"]) {
            this._result = new fhir.FhirElement(source._result);
        }
    }
    /**
     * Check if the current TestReportSetupActionOperation contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["result"] === undefined) {
            missingElements.push("result");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a TestReportSetupActionOperation from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new TestReportSetupActionOperation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `TestReportSetupActionOperation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The results of the assertion performed on the previous operations.
 */
export class TestReportSetupActionAssert extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportSetupActionAssert - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["detail"]) {
            this.detail = source.detail;
        }
        if (source["_detail"]) {
            this._detail = new fhir.FhirElement(source._detail);
        }
        if (source["message"]) {
            this.message = source.message;
        }
        if (source["_message"]) {
            this._message = new fhir.FhirElement(source._message);
        }
        this.result = null;
        if (source["result"]) {
            this.result = source.result;
        }
        if (this.result === undefined) {
            this.result = null;
        }
        if (source["_result"]) {
            this._result = new fhir.FhirElement(source._result);
        }
    }
    /**
     * Check if the current TestReportSetupActionAssert contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["result"] === undefined) {
            missingElements.push("result");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a TestReportSetupActionAssert from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new TestReportSetupActionAssert(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `TestReportSetupActionAssert is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestReportSetupAction extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportSetupAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["assert"]) {
            this.assert = new fhir.TestReportSetupActionAssert(source.assert);
        }
        if (source["operation"]) {
            this.operation = new fhir.TestReportSetupActionOperation(source.operation);
        }
    }
    /**
     * Check if the current TestReportSetupAction contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a TestReportSetupAction from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new TestReportSetupAction(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `TestReportSetupAction is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The results of the series of required setup operations before the tests were executed.
 */
export class TestReportSetup extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportSetup - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.action = null;
        if (source["action"]) {
            this.action = source.action.map((x) => new fhir.TestReportSetupAction(x));
        }
        if (this.action === undefined) {
            this.action = null;
        }
    }
    /**
     * Check if the current TestReportSetup contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if ((!this["action"]) || (this["action"].length === 0)) {
            missingElements.push("action");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a TestReportSetup from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new TestReportSetup(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `TestReportSetup is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestReportTestAction extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportTestAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["assert"]) {
            this.assert = new fhir.TestReportSetupActionAssert(source.assert);
        }
        if (source["operation"]) {
            this.operation = new fhir.TestReportSetupActionOperation(source.operation);
        }
    }
    /**
     * Check if the current TestReportTestAction contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a TestReportTestAction from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new TestReportTestAction(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `TestReportTestAction is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A test executed from the test script.
 */
export class TestReportTest extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportTest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.action = null;
        if (source["action"]) {
            this.action = source.action.map((x) => new fhir.TestReportTestAction(x));
        }
        if (this.action === undefined) {
            this.action = null;
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
    }
    /**
     * Check if the current TestReportTest contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if ((!this["action"]) || (this["action"].length === 0)) {
            missingElements.push("action");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a TestReportTest from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new TestReportTest(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `TestReportTest is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestReportTeardownAction extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportTeardownAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.operation = null;
        if (source["operation"]) {
            this.operation = new fhir.TestReportSetupActionOperation(source.operation);
        }
        if (this.operation === undefined) {
            this.operation = null;
        }
    }
    /**
     * Check if the current TestReportTeardownAction contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["operation"] === undefined) {
            missingElements.push("operation");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a TestReportTeardownAction from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new TestReportTeardownAction(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `TestReportTeardownAction is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
 */
export class TestReportTeardown extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportTeardown - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.action = null;
        if (source["action"]) {
            this.action = source.action.map((x) => new fhir.TestReportTeardownAction(x));
        }
        if (this.action === undefined) {
            this.action = null;
        }
    }
    /**
     * Check if the current TestReportTeardown contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if ((!this["action"]) || (this["action"].length === 0)) {
            missingElements.push("action");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a TestReportTeardown from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new TestReportTeardown(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `TestReportTeardown is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A summary of information based on the results of executing a TestScript.
 */
export class TestReport extends fhir.DomainResource {
    /**
     * Default constructor for TestReport - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'TestReport';
        if (source["identifier"]) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source["issued"]) {
            this.issued = source.issued;
        }
        if (source["_issued"]) {
            this._issued = new fhir.FhirElement(source._issued);
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["participant"]) {
            this.participant = source.participant.map((x) => new fhir.TestReportParticipant(x));
        }
        this.result = null;
        if (source["result"]) {
            this.result = source.result;
        }
        if (this.result === undefined) {
            this.result = null;
        }
        if (source["_result"]) {
            this._result = new fhir.FhirElement(source._result);
        }
        if (source["score"]) {
            this.score = source.score;
        }
        if (source["_score"]) {
            this._score = new fhir.FhirElement(source._score);
        }
        if (source["setup"]) {
            this.setup = new fhir.TestReportSetup(source.setup);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["teardown"]) {
            this.teardown = new fhir.TestReportTeardown(source.teardown);
        }
        if (source["test"]) {
            this.test = source.test.map((x) => new fhir.TestReportTest(x));
        }
        if (source["tester"]) {
            this.tester = source.tester;
        }
        if (source["_tester"]) {
            this._tester = new fhir.FhirElement(source._tester);
        }
        this.testScript = null;
        if (source["testScript"]) {
            this.testScript = new fhir.Reference(source.testScript);
        }
        if (this.testScript === undefined) {
            this.testScript = null;
        }
    }
    /**
     * Check if the current TestReport contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["result"] === undefined) {
            missingElements.push("result");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["testScript"] === undefined) {
            missingElements.push("testScript");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a TestReport from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new TestReport(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `TestReport is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the TestReport.participant.type field
 */
export var TestReportParticipantTypeEnum;
(function (TestReportParticipantTypeEnum) {
    TestReportParticipantTypeEnum["TEST_ENGINE"] = "test-engine";
    TestReportParticipantTypeEnum["CLIENT"] = "client";
    TestReportParticipantTypeEnum["SERVER"] = "server";
})(TestReportParticipantTypeEnum || (TestReportParticipantTypeEnum = {}));
/**
 * Code Values for the TestReport.setup.action.operation.result field
 */
export var TestReportSetupActionOperationResultEnum;
(function (TestReportSetupActionOperationResultEnum) {
    TestReportSetupActionOperationResultEnum["PASS"] = "pass";
    TestReportSetupActionOperationResultEnum["SKIP"] = "skip";
    TestReportSetupActionOperationResultEnum["FAIL"] = "fail";
    TestReportSetupActionOperationResultEnum["WARNING"] = "warning";
    TestReportSetupActionOperationResultEnum["ERROR"] = "error";
})(TestReportSetupActionOperationResultEnum || (TestReportSetupActionOperationResultEnum = {}));
/**
 * Code Values for the TestReport.setup.action.assert.result field
 */
export var TestReportSetupActionAssertResultEnum;
(function (TestReportSetupActionAssertResultEnum) {
    TestReportSetupActionAssertResultEnum["PASS"] = "pass";
    TestReportSetupActionAssertResultEnum["SKIP"] = "skip";
    TestReportSetupActionAssertResultEnum["FAIL"] = "fail";
    TestReportSetupActionAssertResultEnum["WARNING"] = "warning";
    TestReportSetupActionAssertResultEnum["ERROR"] = "error";
})(TestReportSetupActionAssertResultEnum || (TestReportSetupActionAssertResultEnum = {}));
/**
 * Code Values for the TestReport.result field
 */
export var TestReportResultEnum;
(function (TestReportResultEnum) {
    TestReportResultEnum["PASS"] = "pass";
    TestReportResultEnum["FAIL"] = "fail";
    TestReportResultEnum["PENDING"] = "pending";
})(TestReportResultEnum || (TestReportResultEnum = {}));
/**
 * Code Values for the TestReport.status field
 */
export var TestReportStatusEnum;
(function (TestReportStatusEnum) {
    TestReportStatusEnum["COMPLETED"] = "completed";
    TestReportStatusEnum["IN_PROGRESS"] = "in-progress";
    TestReportStatusEnum["WAITING"] = "waiting";
    TestReportStatusEnum["STOPPED"] = "stopped";
    TestReportStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(TestReportStatusEnum || (TestReportStatusEnum = {}));
//# sourceMappingURL=TestReport.js.map