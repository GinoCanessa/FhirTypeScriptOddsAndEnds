// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ChargeItem
import * as fhir from '../fhir.js';
import { PerformerRoleValueSet } from '../fhirValueSets/PerformerRoleValueSet.js';
import { ChargeitemStatusValueSet } from '../fhirValueSets/ChargeitemStatusValueSet.js';
import { ChargeitemBillingcodesValueSet } from '../fhirValueSets/ChargeitemBillingcodesValueSet.js';
import { BodySiteValueSet } from '../fhirValueSets/BodySiteValueSet.js';
import { DeviceKindValueSet } from '../fhirValueSets/DeviceKindValueSet.js';
/**
 * Indicates who or what performed or participated in the charged service.
 */
export class ChargeItemPerformer extends fhir.BackboneElement {
    /**
     * Default constructor for ChargeItemPerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['function']) {
            this.function = new fhir.CodeableConcept(source.function);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        else {
            this.actor = null;
        }
    }
    /**
     * Example-bound Value Set for function
     */
    functionExampleValueSet() {
        return PerformerRoleValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["function"]) {
            results.push(...this.function.doModelValidation());
        }
        if (!this["actor"]) {
            results.push(["actor", 'Missing required element: ChargeItem.performer.actor']);
        }
        if (this["actor"]) {
            results.push(...this.actor.doModelValidation());
        }
        return results;
    }
}
/**
 * The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation.
 */
export class ChargeItem extends fhir.DomainResource {
    /**
     * Default constructor for ChargeItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'ChargeItem';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['definitionUri']) {
            this.definitionUri = source.definitionUri.map((x) => (x));
        }
        if (source['_definitionUri']) {
            this._definitionUri = source._definitionUri.map((x) => new fhir.FhirElement(x));
        }
        if (source['definitionCanonical']) {
            this.definitionCanonical = source.definitionCanonical.map((x) => (x));
        }
        if (source['_definitionCanonical']) {
            this._definitionCanonical = source._definitionCanonical.map((x) => new fhir.FhirElement(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context);
        }
        if (source['occurrenceDateTime']) {
            this.occurrenceDateTime = source.occurrenceDateTime;
        }
        if (source['_occurrenceDateTime']) {
            this._occurrenceDateTime = new fhir.FhirElement(source._occurrenceDateTime);
        }
        if (source['occurrencePeriod']) {
            this.occurrencePeriod = new fhir.Period(source.occurrencePeriod);
        }
        if (source['occurrenceTiming']) {
            this.occurrenceTiming = new fhir.Timing(source.occurrenceTiming);
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.ChargeItemPerformer(x));
        }
        if (source['performingOrganization']) {
            this.performingOrganization = new fhir.Reference(source.performingOrganization);
        }
        if (source['requestingOrganization']) {
            this.requestingOrganization = new fhir.Reference(source.requestingOrganization);
        }
        if (source['costCenter']) {
            this.costCenter = new fhir.Reference(source.costCenter);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['bodysite']) {
            this.bodysite = source.bodysite.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['factorOverride']) {
            this.factorOverride = source.factorOverride;
        }
        if (source['_factorOverride']) {
            this._factorOverride = new fhir.FhirElement(source._factorOverride);
        }
        if (source['priceOverride']) {
            this.priceOverride = new fhir.Money(source.priceOverride);
        }
        if (source['overrideReason']) {
            this.overrideReason = source.overrideReason;
        }
        if (source['_overrideReason']) {
            this._overrideReason = new fhir.FhirElement(source._overrideReason);
        }
        if (source['enterer']) {
            this.enterer = new fhir.Reference(source.enterer);
        }
        if (source['enteredDate']) {
            this.enteredDate = source.enteredDate;
        }
        if (source['_enteredDate']) {
            this._enteredDate = new fhir.FhirElement(source._enteredDate);
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['service']) {
            this.service = source.service.map((x) => new fhir.Reference(x));
        }
        if (source['productReference']) {
            this.productReference = new fhir.Reference(source.productReference);
        }
        if (source['productCodeableConcept']) {
            this.productCodeableConcept = new fhir.CodeableConcept(source.productCodeableConcept);
        }
        if (source['account']) {
            this.account = source.account.map((x) => new fhir.Reference(x));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['supportingInformation']) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return ChargeitemStatusValueSet;
    }
    /**
     * Example-bound Value Set for code
     */
    codeExampleValueSet() {
        return ChargeitemBillingcodesValueSet;
    }
    /**
     * Example-bound Value Set for bodysite
     */
    bodysiteExampleValueSet() {
        return BodySiteValueSet;
    }
    /**
     * Example-bound Value Set for productReference
     */
    productReferenceExampleValueSet() {
        return DeviceKindValueSet;
    }
    /**
     * Example-bound Value Set for productCodeableConcept
     */
    productCodeableConceptExampleValueSet() {
        return DeviceKindValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: ChargeItem.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_definitionUri"]) {
            this._definitionUri.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_definitionCanonical"]) {
            this._definitionCanonical.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: ChargeItem.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["partOf"]) {
            this.partOf.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["code"]) {
            results.push(["code", 'Missing required element: ChargeItem.code']);
        }
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (!this["subject"]) {
            results.push(["subject", 'Missing required element: ChargeItem.subject']);
        }
        if (this["subject"]) {
            results.push(...this.subject.doModelValidation());
        }
        if (this["context"]) {
            results.push(...this.context.doModelValidation());
        }
        if (this["_occurrenceDateTime"]) {
            results.push(...this._occurrenceDateTime.doModelValidation());
        }
        if (this["occurrencePeriod"]) {
            results.push(...this.occurrencePeriod.doModelValidation());
        }
        if (this["occurrenceTiming"]) {
            results.push(...this.occurrenceTiming.doModelValidation());
        }
        if (this["performer"]) {
            this.performer.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["performingOrganization"]) {
            results.push(...this.performingOrganization.doModelValidation());
        }
        if (this["requestingOrganization"]) {
            results.push(...this.requestingOrganization.doModelValidation());
        }
        if (this["costCenter"]) {
            results.push(...this.costCenter.doModelValidation());
        }
        if (this["quantity"]) {
            results.push(...this.quantity.doModelValidation());
        }
        if (this["bodysite"]) {
            this.bodysite.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_factorOverride"]) {
            results.push(...this._factorOverride.doModelValidation());
        }
        if (this["priceOverride"]) {
            results.push(...this.priceOverride.doModelValidation());
        }
        if (this["_overrideReason"]) {
            results.push(...this._overrideReason.doModelValidation());
        }
        if (this["enterer"]) {
            results.push(...this.enterer.doModelValidation());
        }
        if (this["_enteredDate"]) {
            results.push(...this._enteredDate.doModelValidation());
        }
        if (this["reason"]) {
            this.reason.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["service"]) {
            this.service.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["productReference"]) {
            results.push(...this.productReference.doModelValidation());
        }
        if (this["productCodeableConcept"]) {
            results.push(...this.productCodeableConcept.doModelValidation());
        }
        if (this["account"]) {
            this.account.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["supportingInformation"]) {
            this.supportingInformation.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=ChargeItem.js.map