// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Indicates who or what performed or participated in the charged service.
 */
export class ChargeItemPerformer extends fhir.BackboneElement {
    /**
     * Default constructor for ChargeItemPerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.actor = null;
        if (source["actor"]) {
            this.actor = new fhir.Reference(source.actor);
        }
        if (this.actor === undefined) {
            this.actor = null;
        }
        if (source["function"]) {
            this.function = new fhir.CodeableConcept(source.function);
        }
    }
    /**
     * Check if the current ChargeItemPerformer contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["actor"] === undefined) {
            missingElements.push("actor");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ChargeItemPerformer from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ChargeItemPerformer(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ChargeItemPerformer is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation.
 */
export class ChargeItem extends fhir.DomainResource {
    /**
     * Default constructor for ChargeItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'ChargeItem';
        if (source["account"]) {
            this.account = source.account.map((x) => new fhir.Reference(x));
        }
        if (source["bodysite"]) {
            this.bodysite = source.bodysite.map((x) => new fhir.CodeableConcept(x));
        }
        this.code = null;
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (this.code === undefined) {
            this.code = null;
        }
        if (source["context"]) {
            this.context = new fhir.Reference(source.context);
        }
        if (source["costCenter"]) {
            this.costCenter = new fhir.Reference(source.costCenter);
        }
        if (source["definitionCanonical"]) {
            this.definitionCanonical = source.definitionCanonical.map((x) => (x));
        }
        if (source["_definitionCanonical"]) {
            this._definitionCanonical = source._definitionCanonical.map((x) => new fhir.FhirElement(x));
        }
        if (source["definitionUri"]) {
            this.definitionUri = source.definitionUri.map((x) => (x));
        }
        if (source["_definitionUri"]) {
            this._definitionUri = source._definitionUri.map((x) => new fhir.FhirElement(x));
        }
        if (source["enteredDate"]) {
            this.enteredDate = source.enteredDate;
        }
        if (source["_enteredDate"]) {
            this._enteredDate = new fhir.FhirElement(source._enteredDate);
        }
        if (source["enterer"]) {
            this.enterer = new fhir.Reference(source.enterer);
        }
        if (source["factorOverride"]) {
            this.factorOverride = source.factorOverride;
        }
        if (source["_factorOverride"]) {
            this._factorOverride = new fhir.FhirElement(source._factorOverride);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["note"]) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source["occurrenceDateTime"]) {
            this.occurrenceDateTime = source.occurrenceDateTime;
        }
        if (source["_occurrenceDateTime"]) {
            this._occurrenceDateTime = new fhir.FhirElement(source._occurrenceDateTime);
        }
        if (source["occurrencePeriod"]) {
            this.occurrencePeriod = new fhir.Period(source.occurrencePeriod);
        }
        if (source["occurrenceTiming"]) {
            this.occurrenceTiming = new fhir.Timing(source.occurrenceTiming);
        }
        if (source["overrideReason"]) {
            this.overrideReason = source.overrideReason;
        }
        if (source["_overrideReason"]) {
            this._overrideReason = new fhir.FhirElement(source._overrideReason);
        }
        if (source["partOf"]) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        if (source["performer"]) {
            this.performer = source.performer.map((x) => new fhir.ChargeItemPerformer(x));
        }
        if (source["performingOrganization"]) {
            this.performingOrganization = new fhir.Reference(source.performingOrganization);
        }
        if (source["priceOverride"]) {
            this.priceOverride = new fhir.Money(source.priceOverride);
        }
        if (source["productReference"]) {
            this.productReference = new fhir.Reference(source.productReference);
        }
        if (source["productCodeableConcept"]) {
            this.productCodeableConcept = new fhir.CodeableConcept(source.productCodeableConcept);
        }
        if (source["quantity"]) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source["reason"]) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["requestingOrganization"]) {
            this.requestingOrganization = new fhir.Reference(source.requestingOrganization);
        }
        if (source["service"]) {
            this.service = source.service.map((x) => new fhir.Reference(x));
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        this.subject = null;
        if (source["subject"]) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (this.subject === undefined) {
            this.subject = null;
        }
        if (source["supportingInformation"]) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Check if the current ChargeItem contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["subject"] === undefined) {
            missingElements.push("subject");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ChargeItem from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ChargeItem(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ChargeItem is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the ChargeItem.status field
 */
export var ChargeItemStatusEnum;
(function (ChargeItemStatusEnum) {
    ChargeItemStatusEnum["PLANNED"] = "planned";
    ChargeItemStatusEnum["BILLABLE"] = "billable";
    ChargeItemStatusEnum["NOT_BILLABLE"] = "not-billable";
    ChargeItemStatusEnum["ABORTED"] = "aborted";
    ChargeItemStatusEnum["BILLED"] = "billed";
    ChargeItemStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    ChargeItemStatusEnum["UNKNOWN"] = "unknown";
})(ChargeItemStatusEnum || (ChargeItemStatusEnum = {}));
//# sourceMappingURL=ChargeItem.js.map