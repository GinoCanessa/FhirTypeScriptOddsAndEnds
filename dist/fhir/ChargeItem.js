// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ChargeItem
import * as fhir from '../fhir.js';
import { PerformerRoleValueSet, } from '../fhirValueSets/PerformerRoleValueSet.js';
import { ChargeitemStatusValueSet, } from '../fhirValueSets/ChargeitemStatusValueSet.js';
import { ChargeitemBillingcodesValueSet, } from '../fhirValueSets/ChargeitemBillingcodesValueSet.js';
import { BodySiteValueSet, } from '../fhirValueSets/BodySiteValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Indicates who or what performed or participated in the charged service.
 */
export class ChargeItemPerformer extends fhir.BackboneElement {
    /**
     * Default constructor for ChargeItemPerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ChargeItemPerformer';
        if (source['function']) {
            this.function = new fhir.CodeableConcept(source.function);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        else {
            this.actor = null;
        }
    }
    /**
     * Example-bound Value Set for function
     */
    static functionExampleValueSet() {
        return PerformerRoleValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["function"]) {
            outcome.issue.push(...this.function.doModelValidation().issue);
        }
        if (!this['actor']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property actor:fhir.Reference fhir: ChargeItem.performer.actor:Reference", }));
        }
        if (this["actor"]) {
            outcome.issue.push(...this.actor.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation.
 */
export class ChargeItem extends fhir.DomainResource {
    /**
     * Default constructor for ChargeItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ChargeItem';
        /**
         * Identifiers assigned to this event performer or other systems.
         */
        this.identifier = [];
        /**
         * References the (external) source of pricing information, rules of application for the code this ChargeItem uses.
         */
        this.definitionUri = [];
        /**
         * References the source of pricing information, rules of application for the code this ChargeItem uses.
         */
        this.definitionCanonical = [];
        /**
         * ChargeItems can be grouped to larger ChargeItems covering the whole set.
         */
        this.partOf = [];
        this.__occurrenceIsChoice = true;
        /**
         * Indicates who or what performed or participated in the charged service.
         */
        this.performer = [];
        /**
         * Only used if not implicit in code found in Condition.code. If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [bodySite](extension-bodysite.html).  May be a summary code, or a reference to a very precise definition of the location, or both.
         */
        this.bodysite = [];
        /**
         * If the application of the charge item requires a reason to be given, it can be captured here. Textual reasons can be captured using reasonCode.text.
         */
        this.reason = [];
        /**
         * Indicated the rendered service that caused this charge.
         */
        this.service = [];
        this.__productIsChoice = true;
        /**
         * Systems posting the ChargeItems might not always be able to determine, which accounts the Items need to be places into. It is up to the postprocessing Financial System to apply internal rules to decide based on the Encounter/EpisodeOfCare/Patient/Coverage context and the type of ChargeItem, which Account is appropriate.
         */
        this.account = [];
        /**
         * Comments made about the event by the performer, subject or other participants.
         */
        this.note = [];
        /**
         * Further information supporting this charge.
         */
        this.supportingInformation = [];
        this.resourceType = 'ChargeItem';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['definitionUri']) {
            this.definitionUri = source.definitionUri.map((x) => new fhir.FhirUri({ value: x }));
        }
        if (source['definitionCanonical']) {
            this.definitionCanonical = source.definitionCanonical.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context);
        }
        if (source['occurrence']) {
            this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime']) {
            this.occurrence = new fhir.FhirDateTime({ value: source.occurrenceDateTime });
        }
        else if (source['occurrencePeriod']) {
            this.occurrence = new fhir.Period(source.occurrencePeriod);
        }
        else if (source['occurrenceTiming']) {
            this.occurrence = new fhir.Timing(source.occurrenceTiming);
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.ChargeItemPerformer(x));
        }
        if (source['performingOrganization']) {
            this.performingOrganization = new fhir.Reference(source.performingOrganization);
        }
        if (source['requestingOrganization']) {
            this.requestingOrganization = new fhir.Reference(source.requestingOrganization);
        }
        if (source['costCenter']) {
            this.costCenter = new fhir.Reference(source.costCenter);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['bodysite']) {
            this.bodysite = source.bodysite.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['factorOverride']) {
            this.factorOverride = new fhir.FhirDecimal({ value: source.factorOverride });
        }
        if (source['priceOverride']) {
            this.priceOverride = new fhir.Money(source.priceOverride);
        }
        if (source['overrideReason']) {
            this.overrideReason = new fhir.FhirString({ value: source.overrideReason });
        }
        if (source['enterer']) {
            this.enterer = new fhir.Reference(source.enterer);
        }
        if (source['enteredDate']) {
            this.enteredDate = new fhir.FhirDateTime({ value: source.enteredDate });
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['service']) {
            this.service = source.service.map((x) => new fhir.Reference(x));
        }
        if (source['product']) {
            this.product = source.product;
        }
        else if (source['productReference']) {
            this.product = new fhir.Reference(source.productReference);
        }
        else if (source['productCodeableConcept']) {
            this.product = new fhir.CodeableConcept(source.productCodeableConcept);
        }
        if (source['account']) {
            this.account = source.account.map((x) => new fhir.Reference(x));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['supportingInformation']) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return ChargeitemStatusValueSet;
    }
    /**
     * Example-bound Value Set for code
     */
    static codeExampleValueSet() {
        return ChargeitemBillingcodesValueSet;
    }
    /**
     * Example-bound Value Set for bodysite
     */
    static bodysiteExampleValueSet() {
        return BodySiteValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'ChargeItem' fhir: ChargeItem.resourceType:'ChargeItem'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["definitionUri"]) {
            this.definitionUri.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["definitionCanonical"]) {
            this.definitionCanonical.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:ChargeitemStatusValueSetEnum fhir: ChargeItem.status:code", }));
        }
        if (this["partOf"]) {
            this.partOf.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['code']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property code:fhir.CodeableConcept fhir: ChargeItem.code:CodeableConcept", }));
        }
        if (this["code"]) {
            outcome.issue.push(...this.code.doModelValidation().issue);
        }
        if (!this['subject']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property subject:fhir.Reference fhir: ChargeItem.subject:Reference", }));
        }
        if (this["subject"]) {
            outcome.issue.push(...this.subject.doModelValidation().issue);
        }
        if (this["context"]) {
            outcome.issue.push(...this.context.doModelValidation().issue);
        }
        if (this["performer"]) {
            this.performer.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["performingOrganization"]) {
            outcome.issue.push(...this.performingOrganization.doModelValidation().issue);
        }
        if (this["requestingOrganization"]) {
            outcome.issue.push(...this.requestingOrganization.doModelValidation().issue);
        }
        if (this["costCenter"]) {
            outcome.issue.push(...this.costCenter.doModelValidation().issue);
        }
        if (this["quantity"]) {
            outcome.issue.push(...this.quantity.doModelValidation().issue);
        }
        if (this["bodysite"]) {
            this.bodysite.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["factorOverride"]) {
            outcome.issue.push(...this.factorOverride.doModelValidation().issue);
        }
        if (this["priceOverride"]) {
            outcome.issue.push(...this.priceOverride.doModelValidation().issue);
        }
        if (this["overrideReason"]) {
            outcome.issue.push(...this.overrideReason.doModelValidation().issue);
        }
        if (this["enterer"]) {
            outcome.issue.push(...this.enterer.doModelValidation().issue);
        }
        if (this["enteredDate"]) {
            outcome.issue.push(...this.enteredDate.doModelValidation().issue);
        }
        if (this["reason"]) {
            this.reason.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["service"]) {
            this.service.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["account"]) {
            this.account.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["supportingInformation"]) {
            this.supportingInformation.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=ChargeItem.js.map