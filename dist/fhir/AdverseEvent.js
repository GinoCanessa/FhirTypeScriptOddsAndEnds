// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: AdverseEvent
import * as fhir from '../fhir.js';
import { AdverseEventCausalityAssessValueSet } from '../fhirValueSets/AdverseEventCausalityAssessValueSet.js';
import { AdverseEventCausalityMethodValueSet } from '../fhirValueSets/AdverseEventCausalityMethodValueSet.js';
import { AdverseEventActualityValueSet } from '../fhirValueSets/AdverseEventActualityValueSet.js';
import { AdverseEventCategoryValueSet } from '../fhirValueSets/AdverseEventCategoryValueSet.js';
import { AdverseEventTypeValueSet } from '../fhirValueSets/AdverseEventTypeValueSet.js';
import { AdverseEventSeriousnessValueSet } from '../fhirValueSets/AdverseEventSeriousnessValueSet.js';
import { AdverseEventSeverityValueSet } from '../fhirValueSets/AdverseEventSeverityValueSet.js';
import { AdverseEventOutcomeValueSet } from '../fhirValueSets/AdverseEventOutcomeValueSet.js';
/**
 * Information on the possible cause of the event.
 */
export class AdverseEventSuspectEntityCausality extends fhir.BackboneElement {
    /**
     * Default constructor for AdverseEventSuspectEntityCausality - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['assessment']) {
            this.assessment = new fhir.CodeableConcept(source.assessment);
        }
        if (source['productRelatedness']) {
            this.productRelatedness = source.productRelatedness;
        }
        if (source['_productRelatedness']) {
            this._productRelatedness = new fhir.FhirElement(source._productRelatedness);
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author);
        }
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method);
        }
    }
    /**
     * Example-bound Value Set for assessment
     */
    assessmentExampleValueSet() {
        return AdverseEventCausalityAssessValueSet;
    }
    /**
     * Example-bound Value Set for method
     */
    methodExampleValueSet() {
        return AdverseEventCausalityMethodValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["assessment"]) {
            results.push(...this.assessment.doModelValidation());
        }
        if (this["_productRelatedness"]) {
            results.push(...this._productRelatedness.doModelValidation());
        }
        if (this["author"]) {
            results.push(...this.author.doModelValidation());
        }
        if (this["method"]) {
            results.push(...this.method.doModelValidation());
        }
        return results;
    }
}
/**
 * Describes the entity that is suspected to have caused the adverse event.
 */
export class AdverseEventSuspectEntity extends fhir.BackboneElement {
    /**
     * Default constructor for AdverseEventSuspectEntity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['instance']) {
            this.instance = new fhir.Reference(source.instance);
        }
        else {
            this.instance = null;
        }
        if (source['causality']) {
            this.causality = source.causality.map((x) => new fhir.AdverseEventSuspectEntityCausality(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["instance"]) {
            results.push(["instance", 'Missing required element: AdverseEvent.suspectEntity.instance']);
        }
        if (this["instance"]) {
            results.push(...this.instance.doModelValidation());
        }
        if (this["causality"]) {
            this.causality.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Actual or  potential/avoided event causing unintended physical injury resulting from or contributed to by medical care, a research study or other healthcare setting factors that requires additional monitoring, treatment, or hospitalization, or that results in death.
 */
export class AdverseEvent extends fhir.DomainResource {
    /**
     * Default constructor for AdverseEvent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'AdverseEvent';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['actuality']) {
            this.actuality = source.actuality;
        }
        else {
            this.actuality = null;
        }
        if (source['_actuality']) {
            this._actuality = new fhir.FhirElement(source._actuality);
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['event']) {
            this.event = new fhir.CodeableConcept(source.event);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['date']) {
            this.date = source.date;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['detected']) {
            this.detected = source.detected;
        }
        if (source['_detected']) {
            this._detected = new fhir.FhirElement(source._detected);
        }
        if (source['recordedDate']) {
            this.recordedDate = source.recordedDate;
        }
        if (source['_recordedDate']) {
            this._recordedDate = new fhir.FhirElement(source._recordedDate);
        }
        if (source['resultingCondition']) {
            this.resultingCondition = source.resultingCondition.map((x) => new fhir.Reference(x));
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['seriousness']) {
            this.seriousness = new fhir.CodeableConcept(source.seriousness);
        }
        if (source['severity']) {
            this.severity = new fhir.CodeableConcept(source.severity);
        }
        if (source['outcome']) {
            this.outcome = new fhir.CodeableConcept(source.outcome);
        }
        if (source['recorder']) {
            this.recorder = new fhir.Reference(source.recorder);
        }
        if (source['contributor']) {
            this.contributor = source.contributor.map((x) => new fhir.Reference(x));
        }
        if (source['suspectEntity']) {
            this.suspectEntity = source.suspectEntity.map((x) => new fhir.AdverseEventSuspectEntity(x));
        }
        if (source['subjectMedicalHistory']) {
            this.subjectMedicalHistory = source.subjectMedicalHistory.map((x) => new fhir.Reference(x));
        }
        if (source['referenceDocument']) {
            this.referenceDocument = source.referenceDocument.map((x) => new fhir.Reference(x));
        }
        if (source['study']) {
            this.study = source.study.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Required-bound Value Set for actuality
     */
    actualityRequiredValueSet() {
        return AdverseEventActualityValueSet;
    }
    /**
     * Extensible-bound Value Set for category
     */
    categoryExtensibleValueSet() {
        return AdverseEventCategoryValueSet;
    }
    /**
     * Example-bound Value Set for event
     */
    eventExampleValueSet() {
        return AdverseEventTypeValueSet;
    }
    /**
     * Example-bound Value Set for seriousness
     */
    seriousnessExampleValueSet() {
        return AdverseEventSeriousnessValueSet;
    }
    /**
     * Required-bound Value Set for severity
     */
    severityRequiredValueSet() {
        return AdverseEventSeverityValueSet;
    }
    /**
     * Required-bound Value Set for outcome
     */
    outcomeRequiredValueSet() {
        return AdverseEventOutcomeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: AdverseEvent.resourceType']);
        }
        if (this["identifier"]) {
            results.push(...this.identifier.doModelValidation());
        }
        if (!this["actuality"]) {
            results.push(["actuality", 'Missing required element: AdverseEvent.actuality']);
        }
        if (this["_actuality"]) {
            results.push(...this._actuality.doModelValidation());
        }
        if (this["category"]) {
            this.category.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["event"]) {
            results.push(...this.event.doModelValidation());
        }
        if (!this["subject"]) {
            results.push(["subject", 'Missing required element: AdverseEvent.subject']);
        }
        if (this["subject"]) {
            results.push(...this.subject.doModelValidation());
        }
        if (this["encounter"]) {
            results.push(...this.encounter.doModelValidation());
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["_detected"]) {
            results.push(...this._detected.doModelValidation());
        }
        if (this["_recordedDate"]) {
            results.push(...this._recordedDate.doModelValidation());
        }
        if (this["resultingCondition"]) {
            this.resultingCondition.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["location"]) {
            results.push(...this.location.doModelValidation());
        }
        if (this["seriousness"]) {
            results.push(...this.seriousness.doModelValidation());
        }
        if (this["severity"]) {
            results.push(...this.severity.doModelValidation());
        }
        if (this["outcome"]) {
            results.push(...this.outcome.doModelValidation());
        }
        if (this["recorder"]) {
            results.push(...this.recorder.doModelValidation());
        }
        if (this["contributor"]) {
            this.contributor.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["suspectEntity"]) {
            this.suspectEntity.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["subjectMedicalHistory"]) {
            this.subjectMedicalHistory.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["referenceDocument"]) {
            this.referenceDocument.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["study"]) {
            this.study.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=AdverseEvent.js.map