// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Information on the possible cause of the event.
 */
export class AdverseEventSuspectEntityCausality extends fhir.BackboneElement {
    /**
     * Default constructor for AdverseEventSuspectEntityCausality - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["assessment"]) {
            this.assessment = new fhir.CodeableConcept(source.assessment);
        }
        if (source["author"]) {
            this.author = new fhir.Reference(source.author);
        }
        if (source["method"]) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source["productRelatedness"]) {
            this.productRelatedness = source.productRelatedness;
        }
        if (source["_productRelatedness"]) {
            this._productRelatedness = new fhir.FhirElement(source._productRelatedness);
        }
    }
    /**
     * Check if the current AdverseEventSuspectEntityCausality contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a AdverseEventSuspectEntityCausality from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new AdverseEventSuspectEntityCausality(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `AdverseEventSuspectEntityCausality is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Describes the entity that is suspected to have caused the adverse event.
 */
export class AdverseEventSuspectEntity extends fhir.BackboneElement {
    /**
     * Default constructor for AdverseEventSuspectEntity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["causality"]) {
            this.causality = source.causality.map((x) => new fhir.AdverseEventSuspectEntityCausality(x));
        }
        this.instance = null;
        if (source["instance"]) {
            this.instance = new fhir.Reference(source.instance);
        }
        if (this.instance === undefined) {
            this.instance = null;
        }
    }
    /**
     * Check if the current AdverseEventSuspectEntity contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["instance"] === undefined) {
            missingElements.push("instance");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a AdverseEventSuspectEntity from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new AdverseEventSuspectEntity(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `AdverseEventSuspectEntity is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Actual or  potential/avoided event causing unintended physical injury resulting from or contributed to by medical care, a research study or other healthcare setting factors that requires additional monitoring, treatment, or hospitalization, or that results in death.
 */
export class AdverseEvent extends fhir.DomainResource {
    /**
     * Default constructor for AdverseEvent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'AdverseEvent';
        this.actuality = null;
        if (source["actuality"]) {
            this.actuality = source.actuality;
        }
        if (this.actuality === undefined) {
            this.actuality = null;
        }
        if (source["_actuality"]) {
            this._actuality = new fhir.FhirElement(source._actuality);
        }
        if (source["category"]) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["contributor"]) {
            this.contributor = source.contributor.map((x) => new fhir.Reference(x));
        }
        if (source["date"]) {
            this.date = source.date;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["detected"]) {
            this.detected = source.detected;
        }
        if (source["_detected"]) {
            this._detected = new fhir.FhirElement(source._detected);
        }
        if (source["encounter"]) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source["event"]) {
            this.event = new fhir.CodeableConcept(source.event);
        }
        if (source["identifier"]) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source["location"]) {
            this.location = new fhir.Reference(source.location);
        }
        if (source["outcome"]) {
            this.outcome = new fhir.CodeableConcept(source.outcome);
        }
        if (source["recordedDate"]) {
            this.recordedDate = source.recordedDate;
        }
        if (source["_recordedDate"]) {
            this._recordedDate = new fhir.FhirElement(source._recordedDate);
        }
        if (source["recorder"]) {
            this.recorder = new fhir.Reference(source.recorder);
        }
        if (source["referenceDocument"]) {
            this.referenceDocument = source.referenceDocument.map((x) => new fhir.Reference(x));
        }
        if (source["resultingCondition"]) {
            this.resultingCondition = source.resultingCondition.map((x) => new fhir.Reference(x));
        }
        if (source["seriousness"]) {
            this.seriousness = new fhir.CodeableConcept(source.seriousness);
        }
        if (source["severity"]) {
            this.severity = new fhir.CodeableConcept(source.severity);
        }
        if (source["study"]) {
            this.study = source.study.map((x) => new fhir.Reference(x));
        }
        this.subject = null;
        if (source["subject"]) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (this.subject === undefined) {
            this.subject = null;
        }
        if (source["subjectMedicalHistory"]) {
            this.subjectMedicalHistory = source.subjectMedicalHistory.map((x) => new fhir.Reference(x));
        }
        if (source["suspectEntity"]) {
            this.suspectEntity = source.suspectEntity.map((x) => new fhir.AdverseEventSuspectEntity(x));
        }
    }
    /**
     * Check if the current AdverseEvent contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["actuality"] === undefined) {
            missingElements.push("actuality");
        }
        if (this["subject"] === undefined) {
            missingElements.push("subject");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a AdverseEvent from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new AdverseEvent(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `AdverseEvent is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the AdverseEvent.actuality field
 */
export var AdverseEventActualityEnum;
(function (AdverseEventActualityEnum) {
    AdverseEventActualityEnum["ACTUAL"] = "actual";
    AdverseEventActualityEnum["POTENTIAL"] = "potential";
})(AdverseEventActualityEnum || (AdverseEventActualityEnum = {}));
//# sourceMappingURL=AdverseEvent.js.map