// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * The applicability conditions can be used to ascertain whether a billing item is allowed in a specific context. E.g. some billing codes may only be applicable in out-patient settings, only to male/female patients or only to children.
 */
export class ChargeItemDefinitionApplicability extends fhir.BackboneElement {
    /**
     * Default constructor for ChargeItemDefinitionApplicability - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["expression"]) {
            this.expression = source.expression;
        }
        if (source["_expression"]) {
            this._expression = new fhir.FhirElement(source._expression);
        }
        if (source["language"]) {
            this.language = source.language;
        }
        if (source["_language"]) {
            this._language = new fhir.FhirElement(source._language);
        }
    }
    /**
     * Check if the current ChargeItemDefinitionApplicability contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ChargeItemDefinitionApplicability from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ChargeItemDefinitionApplicability(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ChargeItemDefinitionApplicability is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the prices have been calculated.
 */
export class ChargeItemDefinitionPropertyGroupPriceComponent extends fhir.BackboneElement {
    /**
     * Default constructor for ChargeItemDefinitionPropertyGroupPriceComponent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["amount"]) {
            this.amount = new fhir.Money(source.amount);
        }
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source["factor"]) {
            this.factor = source.factor;
        }
        if (source["_factor"]) {
            this._factor = new fhir.FhirElement(source._factor);
        }
        this.type = null;
        if (source["type"]) {
            this.type = source.type;
        }
        if (this.type === undefined) {
            this.type = null;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
    }
    /**
     * Check if the current ChargeItemDefinitionPropertyGroupPriceComponent contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ChargeItemDefinitionPropertyGroupPriceComponent from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ChargeItemDefinitionPropertyGroupPriceComponent(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ChargeItemDefinitionPropertyGroupPriceComponent is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Group of properties which are applicable under the same conditions. If no applicability rules are established for the group, then all properties always apply.
 */
export class ChargeItemDefinitionPropertyGroup extends fhir.BackboneElement {
    /**
     * Default constructor for ChargeItemDefinitionPropertyGroup - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["applicability"]) {
            this.applicability = source.applicability.map((x) => new fhir.ChargeItemDefinitionApplicability(x));
        }
        if (source["priceComponent"]) {
            this.priceComponent = source.priceComponent.map((x) => new fhir.ChargeItemDefinitionPropertyGroupPriceComponent(x));
        }
    }
    /**
     * Check if the current ChargeItemDefinitionPropertyGroup contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ChargeItemDefinitionPropertyGroup from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ChargeItemDefinitionPropertyGroup(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ChargeItemDefinitionPropertyGroup is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The ChargeItemDefinition resource provides the properties that apply to the (billing) codes necessary to calculate costs and prices. The properties may differ largely depending on type and realm, therefore this resource gives only a rough structure and requires profiling for each type of billing code system.
 */
export class ChargeItemDefinition extends fhir.DomainResource {
    /**
     * Default constructor for ChargeItemDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'ChargeItemDefinition';
        if (source["applicability"]) {
            this.applicability = source.applicability.map((x) => new fhir.ChargeItemDefinitionApplicability(x));
        }
        if (source["approvalDate"]) {
            this.approvalDate = source.approvalDate;
        }
        if (source["_approvalDate"]) {
            this._approvalDate = new fhir.FhirElement(source._approvalDate);
        }
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source["contact"]) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source["copyright"]) {
            this.copyright = source.copyright;
        }
        if (source["_copyright"]) {
            this._copyright = new fhir.FhirElement(source._copyright);
        }
        if (source["date"]) {
            this.date = source.date;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["derivedFromUri"]) {
            this.derivedFromUri = source.derivedFromUri.map((x) => (x));
        }
        if (source["_derivedFromUri"]) {
            this._derivedFromUri = source._derivedFromUri.map((x) => new fhir.FhirElement(x));
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["effectivePeriod"]) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source["experimental"]) {
            this.experimental = source.experimental;
        }
        if (source["_experimental"]) {
            this._experimental = new fhir.FhirElement(source._experimental);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["instance"]) {
            this.instance = source.instance.map((x) => new fhir.Reference(x));
        }
        if (source["jurisdiction"]) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["lastReviewDate"]) {
            this.lastReviewDate = source.lastReviewDate;
        }
        if (source["_lastReviewDate"]) {
            this._lastReviewDate = new fhir.FhirElement(source._lastReviewDate);
        }
        if (source["partOf"]) {
            this.partOf = source.partOf.map((x) => (x));
        }
        if (source["_partOf"]) {
            this._partOf = source._partOf.map((x) => new fhir.FhirElement(x));
        }
        if (source["propertyGroup"]) {
            this.propertyGroup = source.propertyGroup.map((x) => new fhir.ChargeItemDefinitionPropertyGroup(x));
        }
        if (source["publisher"]) {
            this.publisher = source.publisher;
        }
        if (source["_publisher"]) {
            this._publisher = new fhir.FhirElement(source._publisher);
        }
        if (source["replaces"]) {
            this.replaces = source.replaces.map((x) => (x));
        }
        if (source["_replaces"]) {
            this._replaces = source._replaces.map((x) => new fhir.FhirElement(x));
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["title"]) {
            this.title = source.title;
        }
        if (source["_title"]) {
            this._title = new fhir.FhirElement(source._title);
        }
        this.url = null;
        if (source["url"]) {
            this.url = source.url;
        }
        if (this.url === undefined) {
            this.url = null;
        }
        if (source["_url"]) {
            this._url = new fhir.FhirElement(source._url);
        }
        if (source["useContext"]) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source["version"]) {
            this.version = source.version;
        }
        if (source["_version"]) {
            this._version = new fhir.FhirElement(source._version);
        }
    }
    /**
     * Check if the current ChargeItemDefinition contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["url"] === undefined) {
            missingElements.push("url");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ChargeItemDefinition from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ChargeItemDefinition(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ChargeItemDefinition is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the ChargeItemDefinition.propertyGroup.priceComponent.type field
 */
export var ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum;
(function (ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum) {
    ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum["BASE"] = "base";
    ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum["SURCHARGE"] = "surcharge";
    ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum["DEDUCTION"] = "deduction";
    ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum["DISCOUNT"] = "discount";
    ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum["TAX"] = "tax";
    ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum["INFORMATIONAL"] = "informational";
})(ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum || (ChargeItemDefinitionPropertyGroupPriceComponentTypeEnum = {}));
/**
 * Code Values for the ChargeItemDefinition.status field
 */
export var ChargeItemDefinitionStatusEnum;
(function (ChargeItemDefinitionStatusEnum) {
    ChargeItemDefinitionStatusEnum["DRAFT"] = "draft";
    ChargeItemDefinitionStatusEnum["ACTIVE"] = "active";
    ChargeItemDefinitionStatusEnum["RETIRED"] = "retired";
    ChargeItemDefinitionStatusEnum["UNKNOWN"] = "unknown";
})(ChargeItemDefinitionStatusEnum || (ChargeItemDefinitionStatusEnum = {}));
//# sourceMappingURL=ChargeItemDefinition.js.map