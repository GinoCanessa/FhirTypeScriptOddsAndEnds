// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: DocumentReference
import * as fhir from '../fhir.js';
import { DocumentRelationshipTypeValueSet, } from '../fhirValueSets/DocumentRelationshipTypeValueSet.js';
import { FormatcodesValueSet, } from '../fhirValueSets/FormatcodesValueSet.js';
import { V3ActCodeValueSet, } from '../fhirValueSets/V3ActCodeValueSet.js';
import { C80FacilitycodesValueSet, } from '../fhirValueSets/C80FacilitycodesValueSet.js';
import { C80PracticeCodesValueSet, } from '../fhirValueSets/C80PracticeCodesValueSet.js';
import { DocumentReferenceStatusValueSet, } from '../fhirValueSets/DocumentReferenceStatusValueSet.js';
import { CompositionStatusValueSet, } from '../fhirValueSets/CompositionStatusValueSet.js';
import { C80DocTypecodesValueSet, } from '../fhirValueSets/C80DocTypecodesValueSet.js';
import { DocumentClasscodesValueSet, } from '../fhirValueSets/DocumentClasscodesValueSet.js';
import { SecurityLabelsValueSet, } from '../fhirValueSets/SecurityLabelsValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * This element is labeled as a modifier because documents that append to other documents are incomplete on their own.
 */
export class DocumentReferenceRelatesTo extends fhir.BackboneElement {
    /**
     * Default constructor for DocumentReferenceRelatesTo - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'DocumentReferenceRelatesTo';
        if (source['code']) {
            this.code = source.code;
        }
        else {
            this.code = null;
        }
        if (source['target']) {
            this.target = new fhir.Reference(source.target);
        }
        else {
            this.target = null;
        }
    }
    /**
     * Required-bound Value Set for code
     */
    static codeRequiredValueSet() {
        return DocumentRelationshipTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['code']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property code:DocumentRelationshipTypeValueSetEnum fhir: DocumentReference.relatesTo.code:code", }));
        }
        if (!this['target']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property target:fhir.Reference fhir: DocumentReference.relatesTo.target:Reference", }));
        }
        if (this["target"]) {
            outcome.issue.push(...this.target.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * The document and format referenced. There may be multiple content element repetitions, each with a different format.
 */
export class DocumentReferenceContent extends fhir.BackboneElement {
    /**
     * Default constructor for DocumentReferenceContent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'DocumentReferenceContent';
        if (source['attachment']) {
            this.attachment = new fhir.Attachment(source.attachment);
        }
        else {
            this.attachment = null;
        }
        if (source['format']) {
            this.format = new fhir.Coding(source.format);
        }
    }
    /**
     * Preferred-bound Value Set for format
     */
    static formatPreferredValueSet() {
        return FormatcodesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['attachment']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property attachment:fhir.Attachment fhir: DocumentReference.content.attachment:Attachment", }));
        }
        if (this["attachment"]) {
            outcome.issue.push(...this.attachment.doModelValidation().issue);
        }
        if (this["format"]) {
            outcome.issue.push(...this.format.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * These values are primarily added to help with searching for interesting/relevant documents.
 */
export class DocumentReferenceContext extends fhir.BackboneElement {
    /**
     * Default constructor for DocumentReferenceContext - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'DocumentReferenceContext';
        /**
         * Describes the clinical encounter or type of care that the document content is associated with.
         */
        this.encounter = [];
        /**
         * An event can further specialize the act inherent in the type, such as  where it is simply "Procedure Report" and the procedure was a "colonoscopy". If one or more event codes are included, they shall not conflict with the values inherent in the class or type elements as such a conflict would create an ambiguous situation.
         */
        this.event = [];
        /**
         * May be identifiers or resources that caused the DocumentReference or referenced Document to be created.
         */
        this.related = [];
        if (source['encounter']) {
            this.encounter = source.encounter.map((x) => new fhir.Reference(x));
        }
        if (source['event']) {
            this.event = source.event.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['facilityType']) {
            this.facilityType = new fhir.CodeableConcept(source.facilityType);
        }
        if (source['practiceSetting']) {
            this.practiceSetting = new fhir.CodeableConcept(source.practiceSetting);
        }
        if (source['sourcePatientInfo']) {
            this.sourcePatientInfo = new fhir.Reference(source.sourcePatientInfo);
        }
        if (source['related']) {
            this.related = source.related.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Example-bound Value Set for event
     */
    static eventExampleValueSet() {
        return V3ActCodeValueSet;
    }
    /**
     * Example-bound Value Set for facilityType
     */
    static facilityTypeExampleValueSet() {
        return C80FacilitycodesValueSet;
    }
    /**
     * Example-bound Value Set for practiceSetting
     */
    static practiceSettingExampleValueSet() {
        return C80PracticeCodesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["encounter"]) {
            this.encounter.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["event"]) {
            this.event.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["period"]) {
            outcome.issue.push(...this.period.doModelValidation().issue);
        }
        if (this["facilityType"]) {
            outcome.issue.push(...this.facilityType.doModelValidation().issue);
        }
        if (this["practiceSetting"]) {
            outcome.issue.push(...this.practiceSetting.doModelValidation().issue);
        }
        if (this["sourcePatientInfo"]) {
            outcome.issue.push(...this.sourcePatientInfo.doModelValidation().issue);
        }
        if (this["related"]) {
            this.related.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * A reference to a document of any kind for any purpose. Provides metadata about the document so that the document can be discovered and managed. The scope of a document is any seralized object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, scanned paper, and non-patient specific documents like policy text.
 */
export class DocumentReference extends fhir.DomainResource {
    /**
     * Default constructor for DocumentReference - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'DocumentReference';
        /**
         * Other identifiers associated with the document, including version independent identifiers.
         */
        this.identifier = [];
        /**
         * Key metadata element describing the the category or classification of the document. This is a broader perspective that groups similar documents based on how they would be used. This is a primary key used in searching.
         */
        this.category = [];
        /**
         * Not necessarily who did the actual data entry (i.e. typist) or who was the source (informant).
         */
        this.author = [];
        /**
         * This element is labeled as a modifier because documents that append to other documents are incomplete on their own.
         */
        this.relatesTo = [];
        /**
         * The confidentiality codes can carry multiple vocabulary items. HL7 has developed an understanding of security and privacy tags that might be desirable in a Document Sharing environment, called HL7 Healthcare Privacy and Security Classification System (HCS). The following specification is recommended but not mandated, as the vocabulary bindings are an administrative domain responsibility. The use of this method is up to the policy domain such as the XDS Affinity Domain or other Trust Domain where all parties including sender and recipients are trusted to appropriately tag and enforce.
         * In the HL7 Healthcare Privacy and Security Classification (HCS) there are code systems specific to Confidentiality, Sensitivity, Integrity, and Handling Caveats. Some values would come from a local vocabulary as they are related to workflow roles and special projects.
         */
        this.securityLabel = [];
        /**
         * The document and format referenced. There may be multiple content element repetitions, each with a different format.
         */
        this.content = [];
        this.resourceType = 'DocumentReference';
        if (source['masterIdentifier']) {
            this.masterIdentifier = new fhir.Identifier(source.masterIdentifier);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['docStatus']) {
            this.docStatus = source.docStatus;
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['date']) {
            this.date = new fhir.FhirInstant({ value: source.date });
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.Reference(x));
        }
        if (source['authenticator']) {
            this.authenticator = new fhir.Reference(source.authenticator);
        }
        if (source['custodian']) {
            this.custodian = new fhir.Reference(source.custodian);
        }
        if (source['relatesTo']) {
            this.relatesTo = source.relatesTo.map((x) => new fhir.DocumentReferenceRelatesTo(x));
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['securityLabel']) {
            this.securityLabel = source.securityLabel.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['content']) {
            this.content = source.content.map((x) => new fhir.DocumentReferenceContent(x));
        }
        else {
            this.content = null;
        }
        if (source['context']) {
            this.context = new fhir.DocumentReferenceContext(source.context);
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return DocumentReferenceStatusValueSet;
    }
    /**
     * Required-bound Value Set for docStatus
     */
    static docStatusRequiredValueSet() {
        return CompositionStatusValueSet;
    }
    /**
     * Preferred-bound Value Set for type
     */
    static typePreferredValueSet() {
        return C80DocTypecodesValueSet;
    }
    /**
     * Example-bound Value Set for category
     */
    static categoryExampleValueSet() {
        return DocumentClasscodesValueSet;
    }
    /**
     * Extensible-bound Value Set for securityLabel
     */
    static securityLabelExtensibleValueSet() {
        return SecurityLabelsValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'DocumentReference' fhir: DocumentReference.resourceType:'DocumentReference'", }));
        }
        if (this["masterIdentifier"]) {
            outcome.issue.push(...this.masterIdentifier.doModelValidation().issue);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:DocumentReferenceStatusValueSetEnum fhir: DocumentReference.status:code", }));
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["category"]) {
            this.category.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["subject"]) {
            outcome.issue.push(...this.subject.doModelValidation().issue);
        }
        if (this["date"]) {
            outcome.issue.push(...this.date.doModelValidation().issue);
        }
        if (this["author"]) {
            this.author.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["authenticator"]) {
            outcome.issue.push(...this.authenticator.doModelValidation().issue);
        }
        if (this["custodian"]) {
            outcome.issue.push(...this.custodian.doModelValidation().issue);
        }
        if (this["relatesTo"]) {
            this.relatesTo.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["description"]) {
            outcome.issue.push(...this.description.doModelValidation().issue);
        }
        if (this["securityLabel"]) {
            this.securityLabel.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['content']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property content:fhir.DocumentReferenceContent[] fhir: DocumentReference.content:content", }));
        }
        else if (!Array.isArray(this.content)) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue, diagnostics: "Found scalar in array property content:fhir.DocumentReferenceContent[] fhir: DocumentReference.content:content", }));
        }
        else if (this.content.length === 0) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property content:fhir.DocumentReferenceContent[] fhir: DocumentReference.content:content", }));
        }
        if (this["content"]) {
            this.content.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["context"]) {
            outcome.issue.push(...this.context.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=DocumentReference.js.map