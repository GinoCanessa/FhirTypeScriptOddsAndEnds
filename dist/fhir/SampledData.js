// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: SampledData
import * as fhir from '../fhir.js';
/**
 * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
 */
export class SampledData extends fhir.FhirElement {
    /**
     * Default constructor for SampledData - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['origin']) {
            this.origin = new fhir.Quantity(source.origin);
        }
        else {
            this.origin = null;
        }
        if (source['period']) {
            this.period = source.period;
        }
        else {
            this.period = null;
        }
        if (source['_period']) {
            this._period = new fhir.FhirElement(source._period);
        }
        if (source['factor']) {
            this.factor = source.factor;
        }
        if (source['_factor']) {
            this._factor = new fhir.FhirElement(source._factor);
        }
        if (source['lowerLimit']) {
            this.lowerLimit = source.lowerLimit;
        }
        if (source['_lowerLimit']) {
            this._lowerLimit = new fhir.FhirElement(source._lowerLimit);
        }
        if (source['upperLimit']) {
            this.upperLimit = source.upperLimit;
        }
        if (source['_upperLimit']) {
            this._upperLimit = new fhir.FhirElement(source._upperLimit);
        }
        if (source['dimensions']) {
            this.dimensions = source.dimensions;
        }
        else {
            this.dimensions = null;
        }
        if (source['_dimensions']) {
            this._dimensions = new fhir.FhirElement(source._dimensions);
        }
        if (source['data']) {
            this.data = source.data;
        }
        if (source['_data']) {
            this._data = new fhir.FhirElement(source._data);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["origin"]) {
            results.push(["origin", 'Missing required element: SampledData.origin']);
        }
        if (this["origin"]) {
            results.push(...this.origin.doModelValidation());
        }
        if (!this["period"]) {
            results.push(["period", 'Missing required element: SampledData.period']);
        }
        if (this["_period"]) {
            results.push(...this._period.doModelValidation());
        }
        if (this["_factor"]) {
            results.push(...this._factor.doModelValidation());
        }
        if (this["_lowerLimit"]) {
            results.push(...this._lowerLimit.doModelValidation());
        }
        if (this["_upperLimit"]) {
            results.push(...this._upperLimit.doModelValidation());
        }
        if (!this["dimensions"]) {
            results.push(["dimensions", 'Missing required element: SampledData.dimensions']);
        }
        if (this["_dimensions"]) {
            results.push(...this._dimensions.doModelValidation());
        }
        if (this["_data"]) {
            results.push(...this._data.doModelValidation());
        }
        return results;
    }
}
//# sourceMappingURL=SampledData.js.map