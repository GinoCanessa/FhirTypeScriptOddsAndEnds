// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: SampledData
import * as fhir from '../fhir.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
 */
export class SampledData extends fhir.FhirElement {
    /**
     * Default constructor for SampledData - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'SampledData';
        if (source['origin']) {
            this.origin = new fhir.Quantity(source.origin);
        }
        else {
            this.origin = null;
        }
        if (source['period']) {
            this.period = new fhir.FhirDecimal({ value: source.period });
        }
        else {
            this.period = null;
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['lowerLimit']) {
            this.lowerLimit = new fhir.FhirDecimal({ value: source.lowerLimit });
        }
        if (source['upperLimit']) {
            this.upperLimit = new fhir.FhirDecimal({ value: source.upperLimit });
        }
        if (source['dimensions']) {
            this.dimensions = new fhir.FhirPositiveInt({ value: source.dimensions });
        }
        else {
            this.dimensions = null;
        }
        if (source['data']) {
            this.data = new fhir.FhirString({ value: source.data });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['origin']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property origin:fhir.Quantity fhir: SampledData.origin:Quantity", }));
        }
        if (this["origin"]) {
            outcome.issue.push(...this.origin.doModelValidation().issue);
        }
        if (!this['period']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property period:fhir.FhirDecimal fhir: SampledData.period:decimal", }));
        }
        if (this["period"]) {
            outcome.issue.push(...this.period.doModelValidation().issue);
        }
        if (this["factor"]) {
            outcome.issue.push(...this.factor.doModelValidation().issue);
        }
        if (this["lowerLimit"]) {
            outcome.issue.push(...this.lowerLimit.doModelValidation().issue);
        }
        if (this["upperLimit"]) {
            outcome.issue.push(...this.upperLimit.doModelValidation().issue);
        }
        if (!this['dimensions']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property dimensions:fhir.FhirPositiveInt fhir: SampledData.dimensions:positiveInt", }));
        }
        if (this["dimensions"]) {
            outcome.issue.push(...this.dimensions.doModelValidation().issue);
        }
        if (this["data"]) {
            outcome.issue.push(...this.data.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=SampledData.js.map