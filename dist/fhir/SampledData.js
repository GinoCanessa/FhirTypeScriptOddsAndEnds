// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
 */
export class SampledData extends fhir.FhirElement {
    /**
     * Default constructor for SampledData - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["data"]) {
            this.data = source.data;
        }
        if (source["_data"]) {
            this._data = new fhir.FhirElement(source._data);
        }
        this.dimensions = null;
        if (source["dimensions"]) {
            this.dimensions = source.dimensions;
        }
        if (this.dimensions === undefined) {
            this.dimensions = null;
        }
        if (source["_dimensions"]) {
            this._dimensions = new fhir.FhirElement(source._dimensions);
        }
        if (source["factor"]) {
            this.factor = source.factor;
        }
        if (source["_factor"]) {
            this._factor = new fhir.FhirElement(source._factor);
        }
        if (source["lowerLimit"]) {
            this.lowerLimit = source.lowerLimit;
        }
        if (source["_lowerLimit"]) {
            this._lowerLimit = new fhir.FhirElement(source._lowerLimit);
        }
        this.origin = null;
        if (source["origin"]) {
            this.origin = new fhir.Quantity(source.origin);
        }
        if (this.origin === undefined) {
            this.origin = null;
        }
        this.period = null;
        if (source["period"]) {
            this.period = source.period;
        }
        if (this.period === undefined) {
            this.period = null;
        }
        if (source["_period"]) {
            this._period = new fhir.FhirElement(source._period);
        }
        if (source["upperLimit"]) {
            this.upperLimit = source.upperLimit;
        }
        if (source["_upperLimit"]) {
            this._upperLimit = new fhir.FhirElement(source._upperLimit);
        }
    }
    /**
     * Check if the current SampledData contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["dimensions"] === undefined) {
            missingElements.push("dimensions");
        }
        if (this["origin"] === undefined) {
            missingElements.push("origin");
        }
        if (this["period"] === undefined) {
            missingElements.push("period");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SampledData from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new SampledData(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `SampledData is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
//# sourceMappingURL=SampledData.js.map