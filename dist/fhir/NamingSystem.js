// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Multiple identifiers may exist, either due to duplicate registration, regional rules, needs of different communication technologies, etc.
 */
export class NamingSystemUniqueId extends fhir.BackboneElement {
    /**
     * Default constructor for NamingSystemUniqueId - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["comment"]) {
            this.comment = source.comment;
        }
        if (source["_comment"]) {
            this._comment = new fhir.FhirElement(source._comment);
        }
        if (source["period"]) {
            this.period = new fhir.Period(source.period);
        }
        if (source["preferred"]) {
            this.preferred = source.preferred;
        }
        if (source["_preferred"]) {
            this._preferred = new fhir.FhirElement(source._preferred);
        }
        this.type = null;
        if (source["type"]) {
            this.type = source.type;
        }
        if (this.type === undefined) {
            this.type = null;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
        this.value = null;
        if (source["value"]) {
            this.value = source.value;
        }
        if (this.value === undefined) {
            this.value = null;
        }
        if (source["_value"]) {
            this._value = new fhir.FhirElement(source._value);
        }
    }
    /**
     * Check if the current NamingSystemUniqueId contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        if (this["value"] === undefined) {
            missingElements.push("value");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a NamingSystemUniqueId from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new NamingSystemUniqueId(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `NamingSystemUniqueId is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types.
 */
export class NamingSystem extends fhir.DomainResource {
    /**
     * Default constructor for NamingSystem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'NamingSystem';
        if (source["contact"]) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        this.date = null;
        if (source["date"]) {
            this.date = source.date;
        }
        if (this.date === undefined) {
            this.date = null;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["jurisdiction"]) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        this.kind = null;
        if (source["kind"]) {
            this.kind = source.kind;
        }
        if (this.kind === undefined) {
            this.kind = null;
        }
        if (source["_kind"]) {
            this._kind = new fhir.FhirElement(source._kind);
        }
        this.name = null;
        if (source["name"]) {
            this.name = source.name;
        }
        if (this.name === undefined) {
            this.name = null;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["publisher"]) {
            this.publisher = source.publisher;
        }
        if (source["_publisher"]) {
            this._publisher = new fhir.FhirElement(source._publisher);
        }
        if (source["responsible"]) {
            this.responsible = source.responsible;
        }
        if (source["_responsible"]) {
            this._responsible = new fhir.FhirElement(source._responsible);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        this.uniqueId = null;
        if (source["uniqueId"]) {
            this.uniqueId = source.uniqueId.map((x) => new fhir.NamingSystemUniqueId(x));
        }
        if (this.uniqueId === undefined) {
            this.uniqueId = null;
        }
        if (source["usage"]) {
            this.usage = source.usage;
        }
        if (source["_usage"]) {
            this._usage = new fhir.FhirElement(source._usage);
        }
        if (source["useContext"]) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
    }
    /**
     * Check if the current NamingSystem contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["date"] === undefined) {
            missingElements.push("date");
        }
        if (this["kind"] === undefined) {
            missingElements.push("kind");
        }
        if (this["name"] === undefined) {
            missingElements.push("name");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if ((!this["uniqueId"]) || (this["uniqueId"].length === 0)) {
            missingElements.push("uniqueId");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a NamingSystem from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new NamingSystem(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `NamingSystem is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the NamingSystem.uniqueId.type field
 */
export var NamingSystemUniqueIdTypeEnum;
(function (NamingSystemUniqueIdTypeEnum) {
    NamingSystemUniqueIdTypeEnum["OID"] = "oid";
    NamingSystemUniqueIdTypeEnum["UUID"] = "uuid";
    NamingSystemUniqueIdTypeEnum["URI"] = "uri";
    NamingSystemUniqueIdTypeEnum["OTHER"] = "other";
})(NamingSystemUniqueIdTypeEnum || (NamingSystemUniqueIdTypeEnum = {}));
/**
 * Code Values for the NamingSystem.kind field
 */
export var NamingSystemKindEnum;
(function (NamingSystemKindEnum) {
    NamingSystemKindEnum["CODESYSTEM"] = "codesystem";
    NamingSystemKindEnum["IDENTIFIER"] = "identifier";
    NamingSystemKindEnum["ROOT"] = "root";
})(NamingSystemKindEnum || (NamingSystemKindEnum = {}));
/**
 * Code Values for the NamingSystem.status field
 */
export var NamingSystemStatusEnum;
(function (NamingSystemStatusEnum) {
    NamingSystemStatusEnum["DRAFT"] = "draft";
    NamingSystemStatusEnum["ACTIVE"] = "active";
    NamingSystemStatusEnum["RETIRED"] = "retired";
    NamingSystemStatusEnum["UNKNOWN"] = "unknown";
})(NamingSystemStatusEnum || (NamingSystemStatusEnum = {}));
//# sourceMappingURL=NamingSystem.js.map