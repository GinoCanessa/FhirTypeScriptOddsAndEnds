// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: NamingSystem
import * as fhir from '../fhir.js';
import { NamingsystemIdentifierTypeValueSet } from '../fhirValueSets/NamingsystemIdentifierTypeValueSet.js';
import { PublicationStatusValueSet } from '../fhirValueSets/PublicationStatusValueSet.js';
import { NamingsystemTypeValueSet } from '../fhirValueSets/NamingsystemTypeValueSet.js';
import { IdentifierTypeValueSet } from '../fhirValueSets/IdentifierTypeValueSet.js';
/**
 * Multiple identifiers may exist, either due to duplicate registration, regional rules, needs of different communication technologies, etc.
 */
export class NamingSystemUniqueId extends fhir.BackboneElement {
    /**
     * Default constructor for NamingSystemUniqueId - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source['value']) {
            this.value = source.value;
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            this._value = new fhir.FhirElement(source._value);
        }
        if (source['preferred']) {
            this.preferred = source.preferred;
        }
        if (source['_preferred']) {
            this._preferred = new fhir.FhirElement(source._preferred);
        }
        if (source['comment']) {
            this.comment = source.comment;
        }
        if (source['_comment']) {
            this._comment = new fhir.FhirElement(source._comment);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Required-bound Value Set for type
     */
    static typeRequiredValueSet() {
        return NamingsystemIdentifierTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["type"]) {
            results.push(["type", 'Missing required element: NamingSystem.uniqueId.type']);
        }
        if (this["_type"]) {
            results.push(...this._type.doModelValidation());
        }
        if (!this["value"]) {
            results.push(["value", 'Missing required element: NamingSystem.uniqueId.value']);
        }
        if (this["_value"]) {
            results.push(...this._value.doModelValidation());
        }
        if (this["_preferred"]) {
            results.push(...this._preferred.doModelValidation());
        }
        if (this["_comment"]) {
            results.push(...this._comment.doModelValidation());
        }
        if (this["period"]) {
            results.push(...this.period.doModelValidation());
        }
        return results;
    }
}
/**
 * A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types.
 */
export class NamingSystem extends fhir.DomainResource {
    /**
     * Default constructor for NamingSystem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'NamingSystem';
        if (source['name']) {
            this.name = source.name;
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['kind']) {
            this.kind = source.kind;
        }
        else {
            this.kind = null;
        }
        if (source['_kind']) {
            this._kind = new fhir.FhirElement(source._kind);
        }
        if (source['date']) {
            this.date = source.date;
        }
        else {
            this.date = null;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['publisher']) {
            this.publisher = source.publisher;
        }
        if (source['_publisher']) {
            this._publisher = new fhir.FhirElement(source._publisher);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source['responsible']) {
            this.responsible = source.responsible;
        }
        if (source['_responsible']) {
            this._responsible = new fhir.FhirElement(source._responsible);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['usage']) {
            this.usage = source.usage;
        }
        if (source['_usage']) {
            this._usage = new fhir.FhirElement(source._usage);
        }
        if (source['uniqueId']) {
            this.uniqueId = source.uniqueId.map((x) => new fhir.NamingSystemUniqueId(x));
        }
        else {
            this.uniqueId = null;
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return PublicationStatusValueSet;
    }
    /**
     * Required-bound Value Set for kind
     */
    static kindRequiredValueSet() {
        return NamingsystemTypeValueSet;
    }
    /**
     * Extensible-bound Value Set for type
     */
    static typeExtensibleValueSet() {
        return IdentifierTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: NamingSystem.resourceType']);
        }
        if (!this["name"]) {
            results.push(["name", 'Missing required element: NamingSystem.name']);
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: NamingSystem.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (!this["kind"]) {
            results.push(["kind", 'Missing required element: NamingSystem.kind']);
        }
        if (this["_kind"]) {
            results.push(...this._kind.doModelValidation());
        }
        if (!this["date"]) {
            results.push(["date", 'Missing required element: NamingSystem.date']);
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["_publisher"]) {
            results.push(...this._publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_responsible"]) {
            results.push(...this._responsible.doModelValidation());
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_usage"]) {
            results.push(...this._usage.doModelValidation());
        }
        if ((!this["uniqueId"]) || (this["uniqueId"].length === 0)) {
            results.push(["uniqueId", 'Missing required element: NamingSystem.uniqueId']);
        }
        if (this["uniqueId"]) {
            this.uniqueId.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=NamingSystem.js.map