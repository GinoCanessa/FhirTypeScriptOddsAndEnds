// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProductContraindication
import * as fhir from '../fhir.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
 */
export class MedicinalProductContraindicationOtherTherapy extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductContraindicationOtherTherapy - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicinalProductContraindicationOtherTherapy';
        this.__medicationIsChoice = true;
        if (source['therapyRelationshipType']) {
            this.therapyRelationshipType = new fhir.CodeableConcept(source.therapyRelationshipType);
        }
        else {
            this.therapyRelationshipType = null;
        }
        if (source['medication']) {
            this.medication = source.medication;
        }
        else if (source['medicationCodeableConcept']) {
            this.medication = new fhir.CodeableConcept(source.medicationCodeableConcept);
        }
        else if (source['medicationReference']) {
            this.medication = new fhir.Reference(source.medicationReference);
        }
        else {
            this.medication = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['therapyRelationshipType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property therapyRelationshipType:fhir.CodeableConcept fhir: MedicinalProductContraindication.otherTherapy.therapyRelationshipType:CodeableConcept", }));
        }
        if (this["therapyRelationshipType"]) {
            outcome.issue.push(...this.therapyRelationshipType.doModelValidation().issue);
        }
        if (!this['medication']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property medication: fhir: MedicinalProductContraindication.otherTherapy.medication[x]:", }));
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * The clinical particulars - indications, contraindications etc. of a medicinal product, including for regulatory purposes.
 */
export class MedicinalProductContraindication extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProductContraindication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicinalProductContraindication';
        /**
         * The medication for which this is an indication.
         */
        this.subject = [];
        /**
         * A comorbidity (concurrent condition) or coinfection.
         */
        this.comorbidity = [];
        /**
         * Information about the use of the medicinal product in relation to other therapies as part of the indication.
         */
        this.therapeuticIndication = [];
        /**
         * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
         */
        this.otherTherapy = [];
        /**
         * The population group to which this applies.
         */
        this.population = [];
        this.resourceType = 'MedicinalProductContraindication';
        if (source['subject']) {
            this.subject = source.subject.map((x) => new fhir.Reference(x));
        }
        if (source['disease']) {
            this.disease = new fhir.CodeableConcept(source.disease);
        }
        if (source['diseaseStatus']) {
            this.diseaseStatus = new fhir.CodeableConcept(source.diseaseStatus);
        }
        if (source['comorbidity']) {
            this.comorbidity = source.comorbidity.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['therapeuticIndication']) {
            this.therapeuticIndication = source.therapeuticIndication.map((x) => new fhir.Reference(x));
        }
        if (source['otherTherapy']) {
            this.otherTherapy = source.otherTherapy.map((x) => new fhir.MedicinalProductContraindicationOtherTherapy(x));
        }
        if (source['population']) {
            this.population = source.population.map((x) => new fhir.Population(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'MedicinalProductContraindication' fhir: MedicinalProductContraindication.resourceType:'MedicinalProductContraindication'", }));
        }
        if (this["subject"]) {
            this.subject.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["disease"]) {
            outcome.issue.push(...this.disease.doModelValidation().issue);
        }
        if (this["diseaseStatus"]) {
            outcome.issue.push(...this.diseaseStatus.doModelValidation().issue);
        }
        if (this["comorbidity"]) {
            this.comorbidity.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["therapeuticIndication"]) {
            this.therapeuticIndication.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["otherTherapy"]) {
            this.otherTherapy.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["population"]) {
            this.population.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=MedicinalProductContraindication.js.map