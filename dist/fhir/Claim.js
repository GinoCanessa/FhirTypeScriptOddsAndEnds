// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * For example,  for the original treatment and follow-up exams.
 */
export class ClaimRelated extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimRelated - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["claim"]) {
            this.claim = new fhir.Reference(source.claim);
        }
        if (source["reference"]) {
            this.reference = new fhir.Identifier(source.reference);
        }
        if (source["relationship"]) {
            this.relationship = new fhir.CodeableConcept(source.relationship);
        }
    }
    /**
     * Check if the current ClaimRelated contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClaimRelated from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ClaimRelated(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimRelated is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and choose to pay the subscriber instead.
 */
export class ClaimPayee extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimPayee - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["party"]) {
            this.party = new fhir.Reference(source.party);
        }
        this.type = null;
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (this.type === undefined) {
            this.type = null;
        }
    }
    /**
     * Check if the current ClaimPayee contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClaimPayee from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ClaimPayee(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimPayee is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The members of the team who provided the products and services.
 */
export class ClaimCareTeam extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimCareTeam - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.provider = null;
        if (source["provider"]) {
            this.provider = new fhir.Reference(source.provider);
        }
        if (this.provider === undefined) {
            this.provider = null;
        }
        if (source["qualification"]) {
            this.qualification = new fhir.CodeableConcept(source.qualification);
        }
        if (source["responsible"]) {
            this.responsible = source.responsible;
        }
        if (source["_responsible"]) {
            this._responsible = new fhir.FhirElement(source._responsible);
        }
        if (source["role"]) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        this.sequence = null;
        if (source["sequence"]) {
            this.sequence = source.sequence;
        }
        if (this.sequence === undefined) {
            this.sequence = null;
        }
        if (source["_sequence"]) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
    }
    /**
     * Check if the current ClaimCareTeam contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["provider"] === undefined) {
            missingElements.push("provider");
        }
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClaimCareTeam from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ClaimCareTeam(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimCareTeam is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
export class ClaimSupportingInfo extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimSupportingInfo - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.category = null;
        if (source["category"]) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (this.category === undefined) {
            this.category = null;
        }
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source["reason"]) {
            this.reason = new fhir.CodeableConcept(source.reason);
        }
        this.sequence = null;
        if (source["sequence"]) {
            this.sequence = source.sequence;
        }
        if (this.sequence === undefined) {
            this.sequence = null;
        }
        if (source["_sequence"]) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source["timingDate"]) {
            this.timingDate = source.timingDate;
        }
        if (source["_timingDate"]) {
            this._timingDate = new fhir.FhirElement(source._timingDate);
        }
        if (source["timingPeriod"]) {
            this.timingPeriod = new fhir.Period(source.timingPeriod);
        }
        if (source["valueBoolean"]) {
            this.valueBoolean = source.valueBoolean;
        }
        if (source["_valueBoolean"]) {
            this._valueBoolean = new fhir.FhirElement(source._valueBoolean);
        }
        if (source["valueString"]) {
            this.valueString = source.valueString;
        }
        if (source["_valueString"]) {
            this._valueString = new fhir.FhirElement(source._valueString);
        }
        if (source["valueQuantity"]) {
            this.valueQuantity = new fhir.Quantity(source.valueQuantity);
        }
        if (source["valueAttachment"]) {
            this.valueAttachment = new fhir.Attachment(source.valueAttachment);
        }
        if (source["valueReference"]) {
            this.valueReference = new fhir.Reference(source.valueReference);
        }
    }
    /**
     * Check if the current ClaimSupportingInfo contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["category"] === undefined) {
            missingElements.push("category");
        }
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClaimSupportingInfo from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ClaimSupportingInfo(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimSupportingInfo is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Information about diagnoses relevant to the claim items.
 */
export class ClaimDiagnosis extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimDiagnosis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["diagnosisCodeableConcept"]) {
            this.diagnosisCodeableConcept = new fhir.CodeableConcept(source.diagnosisCodeableConcept);
        }
        if (source["diagnosisReference"]) {
            this.diagnosisReference = new fhir.Reference(source.diagnosisReference);
        }
        if (source["onAdmission"]) {
            this.onAdmission = new fhir.CodeableConcept(source.onAdmission);
        }
        if (source["packageCode"]) {
            this.packageCode = new fhir.CodeableConcept(source.packageCode);
        }
        this.sequence = null;
        if (source["sequence"]) {
            this.sequence = source.sequence;
        }
        if (this.sequence === undefined) {
            this.sequence = null;
        }
        if (source["_sequence"]) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source["type"]) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
    }
    /**
     * Check if the current ClaimDiagnosis contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClaimDiagnosis from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ClaimDiagnosis(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimDiagnosis is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Procedures performed on the patient relevant to the billing items with the claim.
 */
export class ClaimProcedure extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimProcedure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["date"]) {
            this.date = source.date;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["procedureCodeableConcept"]) {
            this.procedureCodeableConcept = new fhir.CodeableConcept(source.procedureCodeableConcept);
        }
        if (source["procedureReference"]) {
            this.procedureReference = new fhir.Reference(source.procedureReference);
        }
        this.sequence = null;
        if (source["sequence"]) {
            this.sequence = source.sequence;
        }
        if (this.sequence === undefined) {
            this.sequence = null;
        }
        if (source["_sequence"]) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source["type"]) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["udi"]) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Check if the current ClaimProcedure contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClaimProcedure from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ClaimProcedure(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimProcedure is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export class ClaimInsurance extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimInsurance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["businessArrangement"]) {
            this.businessArrangement = source.businessArrangement;
        }
        if (source["_businessArrangement"]) {
            this._businessArrangement = new fhir.FhirElement(source._businessArrangement);
        }
        if (source["claimResponse"]) {
            this.claimResponse = new fhir.Reference(source.claimResponse);
        }
        this.coverage = null;
        if (source["coverage"]) {
            this.coverage = new fhir.Reference(source.coverage);
        }
        if (this.coverage === undefined) {
            this.coverage = null;
        }
        this.focal = null;
        if (source["focal"]) {
            this.focal = source.focal;
        }
        if (this.focal === undefined) {
            this.focal = null;
        }
        if (source["_focal"]) {
            this._focal = new fhir.FhirElement(source._focal);
        }
        if (source["identifier"]) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source["preAuthRef"]) {
            this.preAuthRef = source.preAuthRef.map((x) => (x));
        }
        if (source["_preAuthRef"]) {
            this._preAuthRef = source._preAuthRef.map((x) => new fhir.FhirElement(x));
        }
        this.sequence = null;
        if (source["sequence"]) {
            this.sequence = source.sequence;
        }
        if (this.sequence === undefined) {
            this.sequence = null;
        }
        if (source["_sequence"]) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
    }
    /**
     * Check if the current ClaimInsurance contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["coverage"] === undefined) {
            missingElements.push("coverage");
        }
        if (this["focal"] === undefined) {
            missingElements.push("focal");
        }
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClaimInsurance from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ClaimInsurance(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimInsurance is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Details of an accident which resulted in injuries which required the products and services listed in the claim.
 */
export class ClaimAccident extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimAccident - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.date = null;
        if (source["date"]) {
            this.date = source.date;
        }
        if (this.date === undefined) {
            this.date = null;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["locationAddress"]) {
            this.locationAddress = new fhir.Address(source.locationAddress);
        }
        if (source["locationReference"]) {
            this.locationReference = new fhir.Reference(source.locationReference);
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current ClaimAccident contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["date"] === undefined) {
            missingElements.push("date");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClaimAccident from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ClaimAccident(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimAccident is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
export class ClaimItemDetailSubDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimItemDetailSubDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["category"]) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source["factor"]) {
            this.factor = source.factor;
        }
        if (source["_factor"]) {
            this._factor = new fhir.FhirElement(source._factor);
        }
        if (source["modifier"]) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["net"]) {
            this.net = new fhir.Money(source.net);
        }
        this.productOrService = null;
        if (source["productOrService"]) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        if (this.productOrService === undefined) {
            this.productOrService = null;
        }
        if (source["programCode"]) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["quantity"]) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source["revenue"]) {
            this.revenue = new fhir.CodeableConcept(source.revenue);
        }
        this.sequence = null;
        if (source["sequence"]) {
            this.sequence = source.sequence;
        }
        if (this.sequence === undefined) {
            this.sequence = null;
        }
        if (source["_sequence"]) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source["udi"]) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
        if (source["unitPrice"]) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
    }
    /**
     * Check if the current ClaimItemDetailSubDetail contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["productOrService"] === undefined) {
            missingElements.push("productOrService");
        }
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClaimItemDetailSubDetail from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ClaimItemDetailSubDetail(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimItemDetailSubDetail is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
export class ClaimItemDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimItemDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["category"]) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source["factor"]) {
            this.factor = source.factor;
        }
        if (source["_factor"]) {
            this._factor = new fhir.FhirElement(source._factor);
        }
        if (source["modifier"]) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["net"]) {
            this.net = new fhir.Money(source.net);
        }
        this.productOrService = null;
        if (source["productOrService"]) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        if (this.productOrService === undefined) {
            this.productOrService = null;
        }
        if (source["programCode"]) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["quantity"]) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source["revenue"]) {
            this.revenue = new fhir.CodeableConcept(source.revenue);
        }
        this.sequence = null;
        if (source["sequence"]) {
            this.sequence = source.sequence;
        }
        if (this.sequence === undefined) {
            this.sequence = null;
        }
        if (source["_sequence"]) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source["subDetail"]) {
            this.subDetail = source.subDetail.map((x) => new fhir.ClaimItemDetailSubDetail(x));
        }
        if (source["udi"]) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
        if (source["unitPrice"]) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
    }
    /**
     * Check if the current ClaimItemDetail contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["productOrService"] === undefined) {
            missingElements.push("productOrService");
        }
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClaimItemDetail from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ClaimItemDetail(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimItemDetail is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
 */
export class ClaimItem extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["bodySite"]) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite);
        }
        if (source["careTeamSequence"]) {
            this.careTeamSequence = source.careTeamSequence.map((x) => (x));
        }
        if (source["_careTeamSequence"]) {
            this._careTeamSequence = source._careTeamSequence.map((x) => new fhir.FhirElement(x));
        }
        if (source["category"]) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source["detail"]) {
            this.detail = source.detail.map((x) => new fhir.ClaimItemDetail(x));
        }
        if (source["diagnosisSequence"]) {
            this.diagnosisSequence = source.diagnosisSequence.map((x) => (x));
        }
        if (source["_diagnosisSequence"]) {
            this._diagnosisSequence = source._diagnosisSequence.map((x) => new fhir.FhirElement(x));
        }
        if (source["encounter"]) {
            this.encounter = source.encounter.map((x) => new fhir.Reference(x));
        }
        if (source["factor"]) {
            this.factor = source.factor;
        }
        if (source["_factor"]) {
            this._factor = new fhir.FhirElement(source._factor);
        }
        if (source["informationSequence"]) {
            this.informationSequence = source.informationSequence.map((x) => (x));
        }
        if (source["_informationSequence"]) {
            this._informationSequence = source._informationSequence.map((x) => new fhir.FhirElement(x));
        }
        if (source["locationCodeableConcept"]) {
            this.locationCodeableConcept = new fhir.CodeableConcept(source.locationCodeableConcept);
        }
        if (source["locationAddress"]) {
            this.locationAddress = new fhir.Address(source.locationAddress);
        }
        if (source["locationReference"]) {
            this.locationReference = new fhir.Reference(source.locationReference);
        }
        if (source["modifier"]) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["net"]) {
            this.net = new fhir.Money(source.net);
        }
        if (source["procedureSequence"]) {
            this.procedureSequence = source.procedureSequence.map((x) => (x));
        }
        if (source["_procedureSequence"]) {
            this._procedureSequence = source._procedureSequence.map((x) => new fhir.FhirElement(x));
        }
        this.productOrService = null;
        if (source["productOrService"]) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        if (this.productOrService === undefined) {
            this.productOrService = null;
        }
        if (source["programCode"]) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["quantity"]) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source["revenue"]) {
            this.revenue = new fhir.CodeableConcept(source.revenue);
        }
        this.sequence = null;
        if (source["sequence"]) {
            this.sequence = source.sequence;
        }
        if (this.sequence === undefined) {
            this.sequence = null;
        }
        if (source["_sequence"]) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source["servicedDate"]) {
            this.servicedDate = source.servicedDate;
        }
        if (source["_servicedDate"]) {
            this._servicedDate = new fhir.FhirElement(source._servicedDate);
        }
        if (source["servicedPeriod"]) {
            this.servicedPeriod = new fhir.Period(source.servicedPeriod);
        }
        if (source["subSite"]) {
            this.subSite = source.subSite.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["udi"]) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
        if (source["unitPrice"]) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
    }
    /**
     * Check if the current ClaimItem contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["productOrService"] === undefined) {
            missingElements.push("productOrService");
        }
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClaimItem from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ClaimItem(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimItem is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
 */
export class Claim extends fhir.DomainResource {
    /**
     * Default constructor for Claim - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Claim';
        if (source["accident"]) {
            this.accident = new fhir.ClaimAccident(source.accident);
        }
        if (source["billablePeriod"]) {
            this.billablePeriod = new fhir.Period(source.billablePeriod);
        }
        if (source["careTeam"]) {
            this.careTeam = source.careTeam.map((x) => new fhir.ClaimCareTeam(x));
        }
        this.created = null;
        if (source["created"]) {
            this.created = source.created;
        }
        if (this.created === undefined) {
            this.created = null;
        }
        if (source["_created"]) {
            this._created = new fhir.FhirElement(source._created);
        }
        if (source["diagnosis"]) {
            this.diagnosis = source.diagnosis.map((x) => new fhir.ClaimDiagnosis(x));
        }
        if (source["enterer"]) {
            this.enterer = new fhir.Reference(source.enterer);
        }
        if (source["facility"]) {
            this.facility = new fhir.Reference(source.facility);
        }
        if (source["fundsReserve"]) {
            this.fundsReserve = new fhir.CodeableConcept(source.fundsReserve);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        this.insurance = null;
        if (source["insurance"]) {
            this.insurance = source.insurance.map((x) => new fhir.ClaimInsurance(x));
        }
        if (this.insurance === undefined) {
            this.insurance = null;
        }
        if (source["insurer"]) {
            this.insurer = new fhir.Reference(source.insurer);
        }
        if (source["item"]) {
            this.item = source.item.map((x) => new fhir.ClaimItem(x));
        }
        if (source["originalPrescription"]) {
            this.originalPrescription = new fhir.Reference(source.originalPrescription);
        }
        this.patient = null;
        if (source["patient"]) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (this.patient === undefined) {
            this.patient = null;
        }
        if (source["payee"]) {
            this.payee = new fhir.ClaimPayee(source.payee);
        }
        if (source["prescription"]) {
            this.prescription = new fhir.Reference(source.prescription);
        }
        this.priority = null;
        if (source["priority"]) {
            this.priority = new fhir.CodeableConcept(source.priority);
        }
        if (this.priority === undefined) {
            this.priority = null;
        }
        if (source["procedure"]) {
            this.procedure = source.procedure.map((x) => new fhir.ClaimProcedure(x));
        }
        this.provider = null;
        if (source["provider"]) {
            this.provider = new fhir.Reference(source.provider);
        }
        if (this.provider === undefined) {
            this.provider = null;
        }
        if (source["referral"]) {
            this.referral = new fhir.Reference(source.referral);
        }
        if (source["related"]) {
            this.related = source.related.map((x) => new fhir.ClaimRelated(x));
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["subType"]) {
            this.subType = new fhir.CodeableConcept(source.subType);
        }
        if (source["supportingInfo"]) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.ClaimSupportingInfo(x));
        }
        if (source["total"]) {
            this.total = new fhir.Money(source.total);
        }
        this.type = null;
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (this.type === undefined) {
            this.type = null;
        }
        this.use = null;
        if (source["use"]) {
            this.use = source.use;
        }
        if (this.use === undefined) {
            this.use = null;
        }
        if (source["_use"]) {
            this._use = new fhir.FhirElement(source._use);
        }
    }
    /**
     * Check if the current Claim contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["created"] === undefined) {
            missingElements.push("created");
        }
        if ((!this["insurance"]) || (this["insurance"].length === 0)) {
            missingElements.push("insurance");
        }
        if (this["patient"] === undefined) {
            missingElements.push("patient");
        }
        if (this["priority"] === undefined) {
            missingElements.push("priority");
        }
        if (this["provider"] === undefined) {
            missingElements.push("provider");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        if (this["use"] === undefined) {
            missingElements.push("use");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Claim from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new Claim(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Claim is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the Claim.status field
 */
export var ClaimStatusEnum;
(function (ClaimStatusEnum) {
    ClaimStatusEnum["ACTIVE"] = "active";
    ClaimStatusEnum["CANCELLED"] = "cancelled";
    ClaimStatusEnum["DRAFT"] = "draft";
    ClaimStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(ClaimStatusEnum || (ClaimStatusEnum = {}));
/**
 * Code Values for the Claim.use field
 */
export var ClaimUseEnum;
(function (ClaimUseEnum) {
    ClaimUseEnum["CLAIM"] = "claim";
    ClaimUseEnum["PREAUTHORIZATION"] = "preauthorization";
    ClaimUseEnum["PREDETERMINATION"] = "predetermination";
})(ClaimUseEnum || (ClaimUseEnum = {}));
//# sourceMappingURL=Claim.js.map