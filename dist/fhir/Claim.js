// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Claim
import * as fhir from '../fhir.js';
import { RelatedClaimRelationshipValueSet } from '../fhirValueSets/RelatedClaimRelationshipValueSet.js';
import { PayeetypeValueSet } from '../fhirValueSets/PayeetypeValueSet.js';
import { ClaimCareteamroleValueSet } from '../fhirValueSets/ClaimCareteamroleValueSet.js';
import { ProviderQualificationValueSet } from '../fhirValueSets/ProviderQualificationValueSet.js';
import { ClaimInformationcategoryValueSet } from '../fhirValueSets/ClaimInformationcategoryValueSet.js';
import { ClaimExceptionValueSet } from '../fhirValueSets/ClaimExceptionValueSet.js';
import { MissingToothReasonValueSet } from '../fhirValueSets/MissingToothReasonValueSet.js';
import { ExDiagnosistypeValueSet } from '../fhirValueSets/ExDiagnosistypeValueSet.js';
import { ExDiagnosisOnAdmissionValueSet } from '../fhirValueSets/ExDiagnosisOnAdmissionValueSet.js';
import { ExDiagnosisrelatedgroupValueSet } from '../fhirValueSets/ExDiagnosisrelatedgroupValueSet.js';
import { ExProcedureTypeValueSet } from '../fhirValueSets/ExProcedureTypeValueSet.js';
import { Icd10ProceduresValueSet } from '../fhirValueSets/Icd10ProceduresValueSet.js';
import { V3ActIncidentCodeValueSet } from '../fhirValueSets/V3ActIncidentCodeValueSet.js';
import { ExRevenueCenterValueSet } from '../fhirValueSets/ExRevenueCenterValueSet.js';
import { ExBenefitcategoryValueSet } from '../fhirValueSets/ExBenefitcategoryValueSet.js';
import { ServiceUsclsValueSet } from '../fhirValueSets/ServiceUsclsValueSet.js';
import { ClaimModifiersValueSet } from '../fhirValueSets/ClaimModifiersValueSet.js';
import { ExProgramCodeValueSet } from '../fhirValueSets/ExProgramCodeValueSet.js';
import { ServicePlaceValueSet } from '../fhirValueSets/ServicePlaceValueSet.js';
import { ToothValueSet } from '../fhirValueSets/ToothValueSet.js';
import { SurfaceValueSet } from '../fhirValueSets/SurfaceValueSet.js';
import { FmStatusValueSet } from '../fhirValueSets/FmStatusValueSet.js';
import { ClaimTypeValueSet } from '../fhirValueSets/ClaimTypeValueSet.js';
import { ClaimSubtypeValueSet } from '../fhirValueSets/ClaimSubtypeValueSet.js';
import { ClaimUseValueSet } from '../fhirValueSets/ClaimUseValueSet.js';
import { ProcessPriorityValueSet } from '../fhirValueSets/ProcessPriorityValueSet.js';
import { FundsreserveValueSet } from '../fhirValueSets/FundsreserveValueSet.js';
/**
 * For example,  for the original treatment and follow-up exams.
 */
export class ClaimRelated extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimRelated - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['claim']) {
            this.claim = new fhir.Reference(source.claim);
        }
        if (source['relationship']) {
            this.relationship = new fhir.CodeableConcept(source.relationship);
        }
        if (source['reference']) {
            this.reference = new fhir.Identifier(source.reference);
        }
    }
    /**
     * Example-bound Value Set for relationship
     */
    relationshipExampleValueSet() {
        return RelatedClaimRelationshipValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["claim"]) {
            results.push(...this.claim.doModelValidation());
        }
        if (this["relationship"]) {
            results.push(...this.relationship.doModelValidation());
        }
        if (this["reference"]) {
            results.push(...this.reference.doModelValidation());
        }
        return results;
    }
}
/**
 * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and choose to pay the subscriber instead.
 */
export class ClaimPayee extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimPayee - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['party']) {
            this.party = new fhir.Reference(source.party);
        }
    }
    /**
     * Example-bound Value Set for type
     */
    typeExampleValueSet() {
        return PayeetypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["type"]) {
            results.push(["type", 'Missing required element: Claim.payee.type']);
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["party"]) {
            results.push(...this.party.doModelValidation());
        }
        return results;
    }
}
/**
 * The members of the team who provided the products and services.
 */
export class ClaimCareTeam extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimCareTeam - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['sequence']) {
            this.sequence = source.sequence;
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider);
        }
        else {
            this.provider = null;
        }
        if (source['responsible']) {
            this.responsible = source.responsible;
        }
        if (source['_responsible']) {
            this._responsible = new fhir.FhirElement(source._responsible);
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        if (source['qualification']) {
            this.qualification = new fhir.CodeableConcept(source.qualification);
        }
    }
    /**
     * Example-bound Value Set for role
     */
    roleExampleValueSet() {
        return ClaimCareteamroleValueSet;
    }
    /**
     * Example-bound Value Set for qualification
     */
    qualificationExampleValueSet() {
        return ProviderQualificationValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["sequence"]) {
            results.push(["sequence", 'Missing required element: Claim.careTeam.sequence']);
        }
        if (this["_sequence"]) {
            results.push(...this._sequence.doModelValidation());
        }
        if (!this["provider"]) {
            results.push(["provider", 'Missing required element: Claim.careTeam.provider']);
        }
        if (this["provider"]) {
            results.push(...this.provider.doModelValidation());
        }
        if (this["_responsible"]) {
            results.push(...this._responsible.doModelValidation());
        }
        if (this["role"]) {
            results.push(...this.role.doModelValidation());
        }
        if (this["qualification"]) {
            results.push(...this.qualification.doModelValidation());
        }
        return results;
    }
}
/**
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
export class ClaimSupportingInfo extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimSupportingInfo - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['sequence']) {
            this.sequence = source.sequence;
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        else {
            this.category = null;
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['timingDate']) {
            this.timingDate = source.timingDate;
        }
        if (source['_timingDate']) {
            this._timingDate = new fhir.FhirElement(source._timingDate);
        }
        if (source['timingPeriod']) {
            this.timingPeriod = new fhir.Period(source.timingPeriod);
        }
        if (source['valueBoolean']) {
            this.valueBoolean = source.valueBoolean;
        }
        if (source['_valueBoolean']) {
            this._valueBoolean = new fhir.FhirElement(source._valueBoolean);
        }
        if (source['valueString']) {
            this.valueString = source.valueString;
        }
        if (source['_valueString']) {
            this._valueString = new fhir.FhirElement(source._valueString);
        }
        if (source['valueQuantity']) {
            this.valueQuantity = new fhir.Quantity(source.valueQuantity);
        }
        if (source['valueAttachment']) {
            this.valueAttachment = new fhir.Attachment(source.valueAttachment);
        }
        if (source['valueReference']) {
            this.valueReference = new fhir.Reference(source.valueReference);
        }
        if (source['reason']) {
            this.reason = new fhir.CodeableConcept(source.reason);
        }
    }
    /**
     * Example-bound Value Set for category
     */
    categoryExampleValueSet() {
        return ClaimInformationcategoryValueSet;
    }
    /**
     * Example-bound Value Set for code
     */
    codeExampleValueSet() {
        return ClaimExceptionValueSet;
    }
    /**
     * Example-bound Value Set for reason
     */
    reasonExampleValueSet() {
        return MissingToothReasonValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["sequence"]) {
            results.push(["sequence", 'Missing required element: Claim.supportingInfo.sequence']);
        }
        if (this["_sequence"]) {
            results.push(...this._sequence.doModelValidation());
        }
        if (!this["category"]) {
            results.push(["category", 'Missing required element: Claim.supportingInfo.category']);
        }
        if (this["category"]) {
            results.push(...this.category.doModelValidation());
        }
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["_timingDate"]) {
            results.push(...this._timingDate.doModelValidation());
        }
        if (this["timingPeriod"]) {
            results.push(...this.timingPeriod.doModelValidation());
        }
        if (this["_valueBoolean"]) {
            results.push(...this._valueBoolean.doModelValidation());
        }
        if (this["_valueString"]) {
            results.push(...this._valueString.doModelValidation());
        }
        if (this["valueQuantity"]) {
            results.push(...this.valueQuantity.doModelValidation());
        }
        if (this["valueAttachment"]) {
            results.push(...this.valueAttachment.doModelValidation());
        }
        if (this["valueReference"]) {
            results.push(...this.valueReference.doModelValidation());
        }
        if (this["reason"]) {
            results.push(...this.reason.doModelValidation());
        }
        return results;
    }
}
/**
 * Information about diagnoses relevant to the claim items.
 */
export class ClaimDiagnosis extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimDiagnosis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['sequence']) {
            this.sequence = source.sequence;
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source['diagnosisCodeableConcept']) {
            this.diagnosisCodeableConcept = new fhir.CodeableConcept(source.diagnosisCodeableConcept);
        }
        if (source['diagnosisReference']) {
            this.diagnosisReference = new fhir.Reference(source.diagnosisReference);
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['onAdmission']) {
            this.onAdmission = new fhir.CodeableConcept(source.onAdmission);
        }
        if (source['packageCode']) {
            this.packageCode = new fhir.CodeableConcept(source.packageCode);
        }
    }
    /**
     * Example-bound Value Set for type
     */
    typeExampleValueSet() {
        return ExDiagnosistypeValueSet;
    }
    /**
     * Example-bound Value Set for onAdmission
     */
    onAdmissionExampleValueSet() {
        return ExDiagnosisOnAdmissionValueSet;
    }
    /**
     * Example-bound Value Set for packageCode
     */
    packageCodeExampleValueSet() {
        return ExDiagnosisrelatedgroupValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["sequence"]) {
            results.push(["sequence", 'Missing required element: Claim.diagnosis.sequence']);
        }
        if (this["_sequence"]) {
            results.push(...this._sequence.doModelValidation());
        }
        if (this["diagnosisCodeableConcept"]) {
            results.push(...this.diagnosisCodeableConcept.doModelValidation());
        }
        if (this["diagnosisReference"]) {
            results.push(...this.diagnosisReference.doModelValidation());
        }
        if (this["type"]) {
            this.type.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["onAdmission"]) {
            results.push(...this.onAdmission.doModelValidation());
        }
        if (this["packageCode"]) {
            results.push(...this.packageCode.doModelValidation());
        }
        return results;
    }
}
/**
 * Procedures performed on the patient relevant to the billing items with the claim.
 */
export class ClaimProcedure extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimProcedure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['sequence']) {
            this.sequence = source.sequence;
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['date']) {
            this.date = source.date;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['procedureCodeableConcept']) {
            this.procedureCodeableConcept = new fhir.CodeableConcept(source.procedureCodeableConcept);
        }
        if (source['procedureReference']) {
            this.procedureReference = new fhir.Reference(source.procedureReference);
        }
        if (source['udi']) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Example-bound Value Set for type
     */
    typeExampleValueSet() {
        return ExProcedureTypeValueSet;
    }
    /**
     * Example-bound Value Set for procedureCodeableConcept
     */
    procedureCodeableConceptExampleValueSet() {
        return Icd10ProceduresValueSet;
    }
    /**
     * Example-bound Value Set for procedureReference
     */
    procedureReferenceExampleValueSet() {
        return Icd10ProceduresValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["sequence"]) {
            results.push(["sequence", 'Missing required element: Claim.procedure.sequence']);
        }
        if (this["_sequence"]) {
            results.push(...this._sequence.doModelValidation());
        }
        if (this["type"]) {
            this.type.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["procedureCodeableConcept"]) {
            results.push(...this.procedureCodeableConcept.doModelValidation());
        }
        if (this["procedureReference"]) {
            results.push(...this.procedureReference.doModelValidation());
        }
        if (this["udi"]) {
            this.udi.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export class ClaimInsurance extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimInsurance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['sequence']) {
            this.sequence = source.sequence;
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source['focal']) {
            this.focal = source.focal;
        }
        else {
            this.focal = null;
        }
        if (source['_focal']) {
            this._focal = new fhir.FhirElement(source._focal);
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['coverage']) {
            this.coverage = new fhir.Reference(source.coverage);
        }
        else {
            this.coverage = null;
        }
        if (source['businessArrangement']) {
            this.businessArrangement = source.businessArrangement;
        }
        if (source['_businessArrangement']) {
            this._businessArrangement = new fhir.FhirElement(source._businessArrangement);
        }
        if (source['preAuthRef']) {
            this.preAuthRef = source.preAuthRef.map((x) => (x));
        }
        if (source['_preAuthRef']) {
            this._preAuthRef = source._preAuthRef.map((x) => new fhir.FhirElement(x));
        }
        if (source['claimResponse']) {
            this.claimResponse = new fhir.Reference(source.claimResponse);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["sequence"]) {
            results.push(["sequence", 'Missing required element: Claim.insurance.sequence']);
        }
        if (this["_sequence"]) {
            results.push(...this._sequence.doModelValidation());
        }
        if (!this["focal"]) {
            results.push(["focal", 'Missing required element: Claim.insurance.focal']);
        }
        if (this["_focal"]) {
            results.push(...this._focal.doModelValidation());
        }
        if (this["identifier"]) {
            results.push(...this.identifier.doModelValidation());
        }
        if (!this["coverage"]) {
            results.push(["coverage", 'Missing required element: Claim.insurance.coverage']);
        }
        if (this["coverage"]) {
            results.push(...this.coverage.doModelValidation());
        }
        if (this["_businessArrangement"]) {
            results.push(...this._businessArrangement.doModelValidation());
        }
        if (this["_preAuthRef"]) {
            this._preAuthRef.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["claimResponse"]) {
            results.push(...this.claimResponse.doModelValidation());
        }
        return results;
    }
}
/**
 * Details of an accident which resulted in injuries which required the products and services listed in the claim.
 */
export class ClaimAccident extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimAccident - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['date']) {
            this.date = source.date;
        }
        else {
            this.date = null;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['locationAddress']) {
            this.locationAddress = new fhir.Address(source.locationAddress);
        }
        if (source['locationReference']) {
            this.locationReference = new fhir.Reference(source.locationReference);
        }
    }
    /**
     * Extensible-bound Value Set for type
     */
    typeExtensibleValueSet() {
        return V3ActIncidentCodeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["date"]) {
            results.push(["date", 'Missing required element: Claim.accident.date']);
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["locationAddress"]) {
            results.push(...this.locationAddress.doModelValidation());
        }
        if (this["locationReference"]) {
            results.push(...this.locationReference.doModelValidation());
        }
        return results;
    }
}
/**
 * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
export class ClaimItemDetailSubDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimItemDetailSubDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['sequence']) {
            this.sequence = source.sequence;
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source['revenue']) {
            this.revenue = new fhir.CodeableConcept(source.revenue);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['programCode']) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = source.factor;
        }
        if (source['_factor']) {
            this._factor = new fhir.FhirElement(source._factor);
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['udi']) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Example-bound Value Set for revenue
     */
    revenueExampleValueSet() {
        return ExRevenueCenterValueSet;
    }
    /**
     * Example-bound Value Set for category
     */
    categoryExampleValueSet() {
        return ExBenefitcategoryValueSet;
    }
    /**
     * Example-bound Value Set for productOrService
     */
    productOrServiceExampleValueSet() {
        return ServiceUsclsValueSet;
    }
    /**
     * Example-bound Value Set for modifier
     */
    modifierExampleValueSet() {
        return ClaimModifiersValueSet;
    }
    /**
     * Example-bound Value Set for programCode
     */
    programCodeExampleValueSet() {
        return ExProgramCodeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["sequence"]) {
            results.push(["sequence", 'Missing required element: Claim.item.detail.subDetail.sequence']);
        }
        if (this["_sequence"]) {
            results.push(...this._sequence.doModelValidation());
        }
        if (this["revenue"]) {
            results.push(...this.revenue.doModelValidation());
        }
        if (this["category"]) {
            results.push(...this.category.doModelValidation());
        }
        if (!this["productOrService"]) {
            results.push(["productOrService", 'Missing required element: Claim.item.detail.subDetail.productOrService']);
        }
        if (this["productOrService"]) {
            results.push(...this.productOrService.doModelValidation());
        }
        if (this["modifier"]) {
            this.modifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["programCode"]) {
            this.programCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["quantity"]) {
            results.push(...this.quantity.doModelValidation());
        }
        if (this["unitPrice"]) {
            results.push(...this.unitPrice.doModelValidation());
        }
        if (this["_factor"]) {
            results.push(...this._factor.doModelValidation());
        }
        if (this["net"]) {
            results.push(...this.net.doModelValidation());
        }
        if (this["udi"]) {
            this.udi.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
export class ClaimItemDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimItemDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['sequence']) {
            this.sequence = source.sequence;
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source['revenue']) {
            this.revenue = new fhir.CodeableConcept(source.revenue);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['programCode']) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = source.factor;
        }
        if (source['_factor']) {
            this._factor = new fhir.FhirElement(source._factor);
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['udi']) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
        if (source['subDetail']) {
            this.subDetail = source.subDetail.map((x) => new fhir.ClaimItemDetailSubDetail(x));
        }
    }
    /**
     * Example-bound Value Set for revenue
     */
    revenueExampleValueSet() {
        return ExRevenueCenterValueSet;
    }
    /**
     * Example-bound Value Set for category
     */
    categoryExampleValueSet() {
        return ExBenefitcategoryValueSet;
    }
    /**
     * Example-bound Value Set for productOrService
     */
    productOrServiceExampleValueSet() {
        return ServiceUsclsValueSet;
    }
    /**
     * Example-bound Value Set for modifier
     */
    modifierExampleValueSet() {
        return ClaimModifiersValueSet;
    }
    /**
     * Example-bound Value Set for programCode
     */
    programCodeExampleValueSet() {
        return ExProgramCodeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["sequence"]) {
            results.push(["sequence", 'Missing required element: Claim.item.detail.sequence']);
        }
        if (this["_sequence"]) {
            results.push(...this._sequence.doModelValidation());
        }
        if (this["revenue"]) {
            results.push(...this.revenue.doModelValidation());
        }
        if (this["category"]) {
            results.push(...this.category.doModelValidation());
        }
        if (!this["productOrService"]) {
            results.push(["productOrService", 'Missing required element: Claim.item.detail.productOrService']);
        }
        if (this["productOrService"]) {
            results.push(...this.productOrService.doModelValidation());
        }
        if (this["modifier"]) {
            this.modifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["programCode"]) {
            this.programCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["quantity"]) {
            results.push(...this.quantity.doModelValidation());
        }
        if (this["unitPrice"]) {
            results.push(...this.unitPrice.doModelValidation());
        }
        if (this["_factor"]) {
            results.push(...this._factor.doModelValidation());
        }
        if (this["net"]) {
            results.push(...this.net.doModelValidation());
        }
        if (this["udi"]) {
            this.udi.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["subDetail"]) {
            this.subDetail.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
 */
export class ClaimItem extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['sequence']) {
            this.sequence = source.sequence;
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source['careTeamSequence']) {
            this.careTeamSequence = source.careTeamSequence.map((x) => (x));
        }
        if (source['_careTeamSequence']) {
            this._careTeamSequence = source._careTeamSequence.map((x) => new fhir.FhirElement(x));
        }
        if (source['diagnosisSequence']) {
            this.diagnosisSequence = source.diagnosisSequence.map((x) => (x));
        }
        if (source['_diagnosisSequence']) {
            this._diagnosisSequence = source._diagnosisSequence.map((x) => new fhir.FhirElement(x));
        }
        if (source['procedureSequence']) {
            this.procedureSequence = source.procedureSequence.map((x) => (x));
        }
        if (source['_procedureSequence']) {
            this._procedureSequence = source._procedureSequence.map((x) => new fhir.FhirElement(x));
        }
        if (source['informationSequence']) {
            this.informationSequence = source.informationSequence.map((x) => (x));
        }
        if (source['_informationSequence']) {
            this._informationSequence = source._informationSequence.map((x) => new fhir.FhirElement(x));
        }
        if (source['revenue']) {
            this.revenue = new fhir.CodeableConcept(source.revenue);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['programCode']) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['servicedDate']) {
            this.servicedDate = source.servicedDate;
        }
        if (source['_servicedDate']) {
            this._servicedDate = new fhir.FhirElement(source._servicedDate);
        }
        if (source['servicedPeriod']) {
            this.servicedPeriod = new fhir.Period(source.servicedPeriod);
        }
        if (source['locationCodeableConcept']) {
            this.locationCodeableConcept = new fhir.CodeableConcept(source.locationCodeableConcept);
        }
        if (source['locationAddress']) {
            this.locationAddress = new fhir.Address(source.locationAddress);
        }
        if (source['locationReference']) {
            this.locationReference = new fhir.Reference(source.locationReference);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = source.factor;
        }
        if (source['_factor']) {
            this._factor = new fhir.FhirElement(source._factor);
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['udi']) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite);
        }
        if (source['subSite']) {
            this.subSite = source.subSite.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['encounter']) {
            this.encounter = source.encounter.map((x) => new fhir.Reference(x));
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.ClaimItemDetail(x));
        }
    }
    /**
     * Example-bound Value Set for revenue
     */
    revenueExampleValueSet() {
        return ExRevenueCenterValueSet;
    }
    /**
     * Example-bound Value Set for category
     */
    categoryExampleValueSet() {
        return ExBenefitcategoryValueSet;
    }
    /**
     * Example-bound Value Set for productOrService
     */
    productOrServiceExampleValueSet() {
        return ServiceUsclsValueSet;
    }
    /**
     * Example-bound Value Set for modifier
     */
    modifierExampleValueSet() {
        return ClaimModifiersValueSet;
    }
    /**
     * Example-bound Value Set for programCode
     */
    programCodeExampleValueSet() {
        return ExProgramCodeValueSet;
    }
    /**
     * Example-bound Value Set for locationCodeableConcept
     */
    locationCodeableConceptExampleValueSet() {
        return ServicePlaceValueSet;
    }
    /**
     * Example-bound Value Set for locationAddress
     */
    locationAddressExampleValueSet() {
        return ServicePlaceValueSet;
    }
    /**
     * Example-bound Value Set for locationReference
     */
    locationReferenceExampleValueSet() {
        return ServicePlaceValueSet;
    }
    /**
     * Example-bound Value Set for bodySite
     */
    bodySiteExampleValueSet() {
        return ToothValueSet;
    }
    /**
     * Example-bound Value Set for subSite
     */
    subSiteExampleValueSet() {
        return SurfaceValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["sequence"]) {
            results.push(["sequence", 'Missing required element: Claim.item.sequence']);
        }
        if (this["_sequence"]) {
            results.push(...this._sequence.doModelValidation());
        }
        if (this["_careTeamSequence"]) {
            this._careTeamSequence.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_diagnosisSequence"]) {
            this._diagnosisSequence.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_procedureSequence"]) {
            this._procedureSequence.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_informationSequence"]) {
            this._informationSequence.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["revenue"]) {
            results.push(...this.revenue.doModelValidation());
        }
        if (this["category"]) {
            results.push(...this.category.doModelValidation());
        }
        if (!this["productOrService"]) {
            results.push(["productOrService", 'Missing required element: Claim.item.productOrService']);
        }
        if (this["productOrService"]) {
            results.push(...this.productOrService.doModelValidation());
        }
        if (this["modifier"]) {
            this.modifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["programCode"]) {
            this.programCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_servicedDate"]) {
            results.push(...this._servicedDate.doModelValidation());
        }
        if (this["servicedPeriod"]) {
            results.push(...this.servicedPeriod.doModelValidation());
        }
        if (this["locationCodeableConcept"]) {
            results.push(...this.locationCodeableConcept.doModelValidation());
        }
        if (this["locationAddress"]) {
            results.push(...this.locationAddress.doModelValidation());
        }
        if (this["locationReference"]) {
            results.push(...this.locationReference.doModelValidation());
        }
        if (this["quantity"]) {
            results.push(...this.quantity.doModelValidation());
        }
        if (this["unitPrice"]) {
            results.push(...this.unitPrice.doModelValidation());
        }
        if (this["_factor"]) {
            results.push(...this._factor.doModelValidation());
        }
        if (this["net"]) {
            results.push(...this.net.doModelValidation());
        }
        if (this["udi"]) {
            this.udi.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["bodySite"]) {
            results.push(...this.bodySite.doModelValidation());
        }
        if (this["subSite"]) {
            this.subSite.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["encounter"]) {
            this.encounter.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["detail"]) {
            this.detail.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
 */
export class Claim extends fhir.DomainResource {
    /**
     * Default constructor for Claim - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Claim';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['subType']) {
            this.subType = new fhir.CodeableConcept(source.subType);
        }
        if (source['use']) {
            this.use = source.use;
        }
        else {
            this.use = null;
        }
        if (source['_use']) {
            this._use = new fhir.FhirElement(source._use);
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['billablePeriod']) {
            this.billablePeriod = new fhir.Period(source.billablePeriod);
        }
        if (source['created']) {
            this.created = source.created;
        }
        else {
            this.created = null;
        }
        if (source['_created']) {
            this._created = new fhir.FhirElement(source._created);
        }
        if (source['enterer']) {
            this.enterer = new fhir.Reference(source.enterer);
        }
        if (source['insurer']) {
            this.insurer = new fhir.Reference(source.insurer);
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider);
        }
        else {
            this.provider = null;
        }
        if (source['priority']) {
            this.priority = new fhir.CodeableConcept(source.priority);
        }
        else {
            this.priority = null;
        }
        if (source['fundsReserve']) {
            this.fundsReserve = new fhir.CodeableConcept(source.fundsReserve);
        }
        if (source['related']) {
            this.related = source.related.map((x) => new fhir.ClaimRelated(x));
        }
        if (source['prescription']) {
            this.prescription = new fhir.Reference(source.prescription);
        }
        if (source['originalPrescription']) {
            this.originalPrescription = new fhir.Reference(source.originalPrescription);
        }
        if (source['payee']) {
            this.payee = new fhir.ClaimPayee(source.payee);
        }
        if (source['referral']) {
            this.referral = new fhir.Reference(source.referral);
        }
        if (source['facility']) {
            this.facility = new fhir.Reference(source.facility);
        }
        if (source['careTeam']) {
            this.careTeam = source.careTeam.map((x) => new fhir.ClaimCareTeam(x));
        }
        if (source['supportingInfo']) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.ClaimSupportingInfo(x));
        }
        if (source['diagnosis']) {
            this.diagnosis = source.diagnosis.map((x) => new fhir.ClaimDiagnosis(x));
        }
        if (source['procedure']) {
            this.procedure = source.procedure.map((x) => new fhir.ClaimProcedure(x));
        }
        if (source['insurance']) {
            this.insurance = source.insurance.map((x) => new fhir.ClaimInsurance(x));
        }
        else {
            this.insurance = null;
        }
        if (source['accident']) {
            this.accident = new fhir.ClaimAccident(source.accident);
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.ClaimItem(x));
        }
        if (source['total']) {
            this.total = new fhir.Money(source.total);
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return FmStatusValueSet;
    }
    /**
     * Extensible-bound Value Set for type
     */
    typeExtensibleValueSet() {
        return ClaimTypeValueSet;
    }
    /**
     * Example-bound Value Set for subType
     */
    subTypeExampleValueSet() {
        return ClaimSubtypeValueSet;
    }
    /**
     * Required-bound Value Set for use
     */
    useRequiredValueSet() {
        return ClaimUseValueSet;
    }
    /**
     * Example-bound Value Set for priority
     */
    priorityExampleValueSet() {
        return ProcessPriorityValueSet;
    }
    /**
     * Example-bound Value Set for fundsReserve
     */
    fundsReserveExampleValueSet() {
        return FundsreserveValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: Claim.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: Claim.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (!this["type"]) {
            results.push(["type", 'Missing required element: Claim.type']);
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["subType"]) {
            results.push(...this.subType.doModelValidation());
        }
        if (!this["use"]) {
            results.push(["use", 'Missing required element: Claim.use']);
        }
        if (this["_use"]) {
            results.push(...this._use.doModelValidation());
        }
        if (!this["patient"]) {
            results.push(["patient", 'Missing required element: Claim.patient']);
        }
        if (this["patient"]) {
            results.push(...this.patient.doModelValidation());
        }
        if (this["billablePeriod"]) {
            results.push(...this.billablePeriod.doModelValidation());
        }
        if (!this["created"]) {
            results.push(["created", 'Missing required element: Claim.created']);
        }
        if (this["_created"]) {
            results.push(...this._created.doModelValidation());
        }
        if (this["enterer"]) {
            results.push(...this.enterer.doModelValidation());
        }
        if (this["insurer"]) {
            results.push(...this.insurer.doModelValidation());
        }
        if (!this["provider"]) {
            results.push(["provider", 'Missing required element: Claim.provider']);
        }
        if (this["provider"]) {
            results.push(...this.provider.doModelValidation());
        }
        if (!this["priority"]) {
            results.push(["priority", 'Missing required element: Claim.priority']);
        }
        if (this["priority"]) {
            results.push(...this.priority.doModelValidation());
        }
        if (this["fundsReserve"]) {
            results.push(...this.fundsReserve.doModelValidation());
        }
        if (this["related"]) {
            this.related.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["prescription"]) {
            results.push(...this.prescription.doModelValidation());
        }
        if (this["originalPrescription"]) {
            results.push(...this.originalPrescription.doModelValidation());
        }
        if (this["payee"]) {
            results.push(...this.payee.doModelValidation());
        }
        if (this["referral"]) {
            results.push(...this.referral.doModelValidation());
        }
        if (this["facility"]) {
            results.push(...this.facility.doModelValidation());
        }
        if (this["careTeam"]) {
            this.careTeam.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["supportingInfo"]) {
            this.supportingInfo.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["diagnosis"]) {
            this.diagnosis.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["procedure"]) {
            this.procedure.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if ((!this["insurance"]) || (this["insurance"].length === 0)) {
            results.push(["insurance", 'Missing required element: Claim.insurance']);
        }
        if (this["insurance"]) {
            this.insurance.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["accident"]) {
            results.push(...this.accident.doModelValidation());
        }
        if (this["item"]) {
            this.item.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["total"]) {
            results.push(...this.total.doModelValidation());
        }
        return results;
    }
}
//# sourceMappingURL=Claim.js.map