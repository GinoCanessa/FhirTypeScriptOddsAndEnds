// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: SubstanceAmount
import * as fhir from '../fhir.js';
/**
 * Reference range of possible or expected values.
 */
export class SubstanceAmountReferenceRange extends fhir.FhirElement {
    /**
     * Default constructor for SubstanceAmountReferenceRange - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'SubstanceAmountReferenceRange';
        if (source['lowLimit']) {
            this.lowLimit = new fhir.Quantity(source.lowLimit);
        }
        if (source['highLimit']) {
            this.highLimit = new fhir.Quantity(source.highLimit);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["lowLimit"]) {
            outcome.issue.push(...this.lowLimit.doModelValidation().issue);
        }
        if (this["highLimit"]) {
            outcome.issue.push(...this.highLimit.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Chemical substances are a single substance type whose primary defining element is the molecular structure. Chemical substances shall be defined on the basis of their complete covalent molecular structure; the presence of a salt (counter-ion) and/or solvates (water, alcohols) is also captured. Purity, grade, physical form or particle size are not taken into account in the definition of a chemical substance or in the assignment of a Substance ID.
 */
export class SubstanceAmount extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceAmount - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'SubstanceAmount';
        this.__amountIsChoice = true;
        if (source['amount']) {
            this.amount = source.amount;
        }
        else if (source['amountQuantity']) {
            this.amount = new fhir.Quantity(source.amountQuantity);
        }
        else if (source['amountRange']) {
            this.amount = new fhir.Range(source.amountRange);
        }
        else if (source['amountString']) {
            this.amount = new fhir.FhirString({ value: source.amountString });
        }
        if (source['amountType']) {
            this.amountType = new fhir.CodeableConcept(source.amountType);
        }
        if (source['amountText']) {
            this.amountText = new fhir.FhirString({ value: source.amountText });
        }
        if (source['referenceRange']) {
            this.referenceRange = new fhir.SubstanceAmountReferenceRange(source.referenceRange);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["amountType"]) {
            outcome.issue.push(...this.amountType.doModelValidation().issue);
        }
        if (this["amountText"]) {
            outcome.issue.push(...this.amountText.doModelValidation().issue);
        }
        if (this["referenceRange"]) {
            outcome.issue.push(...this.referenceRange.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=SubstanceAmount.js.map