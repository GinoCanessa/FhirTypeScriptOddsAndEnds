// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Reference
import * as fhir from '../fhir.js';
import { ResourceTypesValueSet } from '../fhirValueSets/ResourceTypesValueSet.js';
/**
 * A reference from one resource to another.
 */
export class Reference extends fhir.FhirElement {
    /**
     * Default constructor for Reference - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['reference']) {
            this.reference = source.reference;
        }
        if (source['_reference']) {
            this._reference = new fhir.FhirElement(source._reference);
        }
        if (source['type']) {
            this.type = source.type;
        }
        if (source['_type']) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['display']) {
            this.display = source.display;
        }
        if (source['_display']) {
            this._display = new fhir.FhirElement(source._display);
        }
    }
    /**
     * Extensible-bound Value Set for type
     */
    static typeExtensibleValueSet() {
        return ResourceTypesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_reference"]) {
            results.push(...this._reference.doModelValidation());
        }
        if (this["_type"]) {
            results.push(...this._type.doModelValidation());
        }
        if (this["identifier"]) {
            results.push(...this.identifier.doModelValidation());
        }
        if (this["_display"]) {
            results.push(...this._display.doModelValidation());
        }
        return results;
    }
    /**
     * Create a reference from an existing resource
     */
    static fromResource(source, baseUrl = '') {
        var _a, _b;
        if (baseUrl.endsWith('/')) {
            return new Reference({
                type: (_a = source.resourceType) !== null && _a !== void 0 ? _a : undefined,
                reference: baseUrl + source.resourceType + '/' + source.id,
            });
        }
        return new Reference({
            type: (_b = source.resourceType) !== null && _b !== void 0 ? _b : undefined,
            reference: ((baseUrl.length > 0) ? (baseUrl + '/') : '') + source.resourceType + '/' + source.id,
        });
    }
}
//# sourceMappingURL=Reference.js.map