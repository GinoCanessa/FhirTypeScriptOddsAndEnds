// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: ElementDefinition
import * as fhir from '../fhir.js';
import { DiscriminatorTypeValueSet } from '../fhirValueSets/DiscriminatorTypeValueSet.js';
import { ResourceSlicingRulesValueSet } from '../fhirValueSets/ResourceSlicingRulesValueSet.js';
import { DefinedTypesValueSet } from '../fhirValueSets/DefinedTypesValueSet.js';
import { ResourceAggregationModeValueSet } from '../fhirValueSets/ResourceAggregationModeValueSet.js';
import { ReferenceVersionRulesValueSet } from '../fhirValueSets/ReferenceVersionRulesValueSet.js';
import { ConstraintSeverityValueSet } from '../fhirValueSets/ConstraintSeverityValueSet.js';
import { BindingStrengthValueSet } from '../fhirValueSets/BindingStrengthValueSet.js';
import { PropertyRepresentationValueSet } from '../fhirValueSets/PropertyRepresentationValueSet.js';
import { ObservationCodesValueSet } from '../fhirValueSets/ObservationCodesValueSet.js';
/**
 * If there is no discriminator, the content is hard to process, so this should be avoided.
 */
export class ElementDefinitionSlicingDiscriminator extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionSlicingDiscriminator - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source['path']) {
            this.path = source.path;
        }
        else {
            this.path = null;
        }
        if (source['_path']) {
            this._path = new fhir.FhirElement(source._path);
        }
    }
    /**
     * Required-bound Value Set for type
     */
    static typeRequiredValueSet() {
        return DiscriminatorTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["type"]) {
            results.push(["type", 'Missing required element: ElementDefinition.slicing.discriminator.type']);
        }
        if (this["_type"]) {
            results.push(...this._type.doModelValidation());
        }
        if (!this["path"]) {
            results.push(["path", 'Missing required element: ElementDefinition.slicing.discriminator.path']);
        }
        if (this["_path"]) {
            results.push(...this._path.doModelValidation());
        }
        return results;
    }
}
/**
 * The first element in the sequence, the one that carries the slicing, is the definition that applies to all the slices. This is based on the unconstrained element, but can apply any constraints as appropriate. This may include the common constraints on the children of the element.
 */
export class ElementDefinitionSlicing extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionSlicing - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['discriminator']) {
            this.discriminator = source.discriminator.map((x) => new fhir.ElementDefinitionSlicingDiscriminator(x));
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['ordered']) {
            this.ordered = source.ordered;
        }
        if (source['_ordered']) {
            this._ordered = new fhir.FhirElement(source._ordered);
        }
        if (source['rules']) {
            this.rules = source.rules;
        }
        else {
            this.rules = null;
        }
        if (source['_rules']) {
            this._rules = new fhir.FhirElement(source._rules);
        }
    }
    /**
     * Required-bound Value Set for rules
     */
    static rulesRequiredValueSet() {
        return ResourceSlicingRulesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["discriminator"]) {
            this.discriminator.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["_ordered"]) {
            results.push(...this._ordered.doModelValidation());
        }
        if (!this["rules"]) {
            results.push(["rules", 'Missing required element: ElementDefinition.slicing.rules']);
        }
        if (this["_rules"]) {
            results.push(...this._rules.doModelValidation());
        }
        return results;
    }
}
/**
 * The base information does not carry any information that could not be determined from the path and related profiles, but making this determination requires both that the related profiles are available, and that the algorithm to determine them be available. For tooling simplicity, the base information must always be populated in element definitions in snap shots, even if it is the same.
 */
export class ElementDefinitionBase extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionBase - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['path']) {
            this.path = source.path;
        }
        else {
            this.path = null;
        }
        if (source['_path']) {
            this._path = new fhir.FhirElement(source._path);
        }
        if (source['min']) {
            this.min = source.min;
        }
        else {
            this.min = null;
        }
        if (source['_min']) {
            this._min = new fhir.FhirElement(source._min);
        }
        if (source['max']) {
            this.max = source.max;
        }
        else {
            this.max = null;
        }
        if (source['_max']) {
            this._max = new fhir.FhirElement(source._max);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["path"]) {
            results.push(["path", 'Missing required element: ElementDefinition.base.path']);
        }
        if (this["_path"]) {
            results.push(...this._path.doModelValidation());
        }
        if (!this["min"]) {
            results.push(["min", 'Missing required element: ElementDefinition.base.min']);
        }
        if (this["_min"]) {
            results.push(...this._min.doModelValidation());
        }
        if (!this["max"]) {
            results.push(["max", 'Missing required element: ElementDefinition.base.max']);
        }
        if (this["_max"]) {
            results.push(...this._max.doModelValidation());
        }
        return results;
    }
}
/**
 * The Type of the element can be left blank in a differential constraint, in which case the type is inherited from the resource. Abstract types are not permitted to appear as a type when multiple types are listed.  (I.e. Abstract types cannot be part of a choice).
 */
export class ElementDefinitionType extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionType - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = source.code;
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source['profile']) {
            this.profile = source.profile.map((x) => (x));
        }
        if (source['_profile']) {
            this._profile = source._profile.map((x) => new fhir.FhirElement(x));
        }
        if (source['targetProfile']) {
            this.targetProfile = source.targetProfile.map((x) => (x));
        }
        if (source['_targetProfile']) {
            this._targetProfile = source._targetProfile.map((x) => new fhir.FhirElement(x));
        }
        if (source['aggregation']) {
            this.aggregation = source.aggregation.map((x) => (x));
        }
        if (source['_aggregation']) {
            this._aggregation = source._aggregation.map((x) => new fhir.FhirElement(x));
        }
        if (source['versioning']) {
            this.versioning = source.versioning;
        }
        if (source['_versioning']) {
            this._versioning = new fhir.FhirElement(source._versioning);
        }
    }
    /**
     * Extensible-bound Value Set for code
     */
    static codeExtensibleValueSet() {
        return DefinedTypesValueSet;
    }
    /**
     * Required-bound Value Set for aggregation
     */
    static aggregationRequiredValueSet() {
        return ResourceAggregationModeValueSet;
    }
    /**
     * Required-bound Value Set for versioning
     */
    static versioningRequiredValueSet() {
        return ReferenceVersionRulesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["code"]) {
            results.push(["code", 'Missing required element: ElementDefinition.type.code']);
        }
        if (this["_code"]) {
            results.push(...this._code.doModelValidation());
        }
        if (this["_profile"]) {
            this._profile.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_targetProfile"]) {
            this._targetProfile.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_aggregation"]) {
            this._aggregation.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_versioning"]) {
            results.push(...this._versioning.doModelValidation());
        }
        return results;
    }
}
/**
 * Examples will most commonly be present for data where it's not implicitly obvious from either the data type or value set what the values might be.  (I.e. Example values for dates or quantities would generally be unnecessary.)  If the example value is fully populated, the publication tool can generate an instance automatically.
 */
export class ElementDefinitionExample extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionExample - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['label']) {
            this.label = source.label;
        }
        else {
            this.label = null;
        }
        if (source['_label']) {
            this._label = new fhir.FhirElement(source._label);
        }
        if (source['valueBase64Binary']) {
            this.valueBase64Binary = source.valueBase64Binary;
        }
        if (source['_valueBase64Binary']) {
            this._valueBase64Binary = new fhir.FhirElement(source._valueBase64Binary);
        }
        if (source['valueBoolean']) {
            this.valueBoolean = source.valueBoolean;
        }
        if (source['_valueBoolean']) {
            this._valueBoolean = new fhir.FhirElement(source._valueBoolean);
        }
        if (source['valueCanonical']) {
            this.valueCanonical = source.valueCanonical;
        }
        if (source['_valueCanonical']) {
            this._valueCanonical = new fhir.FhirElement(source._valueCanonical);
        }
        if (source['valueCode']) {
            this.valueCode = source.valueCode;
        }
        if (source['_valueCode']) {
            this._valueCode = new fhir.FhirElement(source._valueCode);
        }
        if (source['valueDate']) {
            this.valueDate = source.valueDate;
        }
        if (source['_valueDate']) {
            this._valueDate = new fhir.FhirElement(source._valueDate);
        }
        if (source['valueDateTime']) {
            this.valueDateTime = source.valueDateTime;
        }
        if (source['_valueDateTime']) {
            this._valueDateTime = new fhir.FhirElement(source._valueDateTime);
        }
        if (source['valueDecimal']) {
            this.valueDecimal = source.valueDecimal;
        }
        if (source['_valueDecimal']) {
            this._valueDecimal = new fhir.FhirElement(source._valueDecimal);
        }
        if (source['valueId']) {
            this.valueId = source.valueId;
        }
        if (source['_valueId']) {
            this._valueId = new fhir.FhirElement(source._valueId);
        }
        if (source['valueInstant']) {
            this.valueInstant = source.valueInstant;
        }
        if (source['_valueInstant']) {
            this._valueInstant = new fhir.FhirElement(source._valueInstant);
        }
        if (source['valueInteger']) {
            this.valueInteger = source.valueInteger;
        }
        if (source['_valueInteger']) {
            this._valueInteger = new fhir.FhirElement(source._valueInteger);
        }
        if (source['valueMarkdown']) {
            this.valueMarkdown = source.valueMarkdown;
        }
        if (source['_valueMarkdown']) {
            this._valueMarkdown = new fhir.FhirElement(source._valueMarkdown);
        }
        if (source['valueOid']) {
            this.valueOid = source.valueOid;
        }
        if (source['_valueOid']) {
            this._valueOid = new fhir.FhirElement(source._valueOid);
        }
        if (source['valuePositiveInt']) {
            this.valuePositiveInt = source.valuePositiveInt;
        }
        if (source['_valuePositiveInt']) {
            this._valuePositiveInt = new fhir.FhirElement(source._valuePositiveInt);
        }
        if (source['valueString']) {
            this.valueString = source.valueString;
        }
        if (source['_valueString']) {
            this._valueString = new fhir.FhirElement(source._valueString);
        }
        if (source['valueTime']) {
            this.valueTime = source.valueTime;
        }
        if (source['_valueTime']) {
            this._valueTime = new fhir.FhirElement(source._valueTime);
        }
        if (source['valueUnsignedInt']) {
            this.valueUnsignedInt = source.valueUnsignedInt;
        }
        if (source['_valueUnsignedInt']) {
            this._valueUnsignedInt = new fhir.FhirElement(source._valueUnsignedInt);
        }
        if (source['valueUri']) {
            this.valueUri = source.valueUri;
        }
        if (source['_valueUri']) {
            this._valueUri = new fhir.FhirElement(source._valueUri);
        }
        if (source['valueUrl']) {
            this.valueUrl = source.valueUrl;
        }
        if (source['_valueUrl']) {
            this._valueUrl = new fhir.FhirElement(source._valueUrl);
        }
        if (source['valueUuid']) {
            this.valueUuid = source.valueUuid;
        }
        if (source['_valueUuid']) {
            this._valueUuid = new fhir.FhirElement(source._valueUuid);
        }
        if (source['valueAddress']) {
            this.valueAddress = new fhir.Address(source.valueAddress);
        }
        if (source['valueAge']) {
            this.valueAge = new fhir.Age(source.valueAge);
        }
        if (source['valueAnnotation']) {
            this.valueAnnotation = new fhir.Annotation(source.valueAnnotation);
        }
        if (source['valueAttachment']) {
            this.valueAttachment = new fhir.Attachment(source.valueAttachment);
        }
        if (source['valueCodeableConcept']) {
            this.valueCodeableConcept = new fhir.CodeableConcept(source.valueCodeableConcept);
        }
        if (source['valueCoding']) {
            this.valueCoding = new fhir.Coding(source.valueCoding);
        }
        if (source['valueContactPoint']) {
            this.valueContactPoint = new fhir.ContactPoint(source.valueContactPoint);
        }
        if (source['valueCount']) {
            this.valueCount = new fhir.Count(source.valueCount);
        }
        if (source['valueDistance']) {
            this.valueDistance = new fhir.Distance(source.valueDistance);
        }
        if (source['valueDuration']) {
            this.valueDuration = new fhir.Duration(source.valueDuration);
        }
        if (source['valueHumanName']) {
            this.valueHumanName = new fhir.HumanName(source.valueHumanName);
        }
        if (source['valueIdentifier']) {
            this.valueIdentifier = new fhir.Identifier(source.valueIdentifier);
        }
        if (source['valueMoney']) {
            this.valueMoney = new fhir.Money(source.valueMoney);
        }
        if (source['valuePeriod']) {
            this.valuePeriod = new fhir.Period(source.valuePeriod);
        }
        if (source['valueQuantity']) {
            this.valueQuantity = new fhir.Quantity(source.valueQuantity);
        }
        if (source['valueRange']) {
            this.valueRange = new fhir.Range(source.valueRange);
        }
        if (source['valueRatio']) {
            this.valueRatio = new fhir.Ratio(source.valueRatio);
        }
        if (source['valueReference']) {
            this.valueReference = new fhir.Reference(source.valueReference);
        }
        if (source['valueSampledData']) {
            this.valueSampledData = new fhir.SampledData(source.valueSampledData);
        }
        if (source['valueSignature']) {
            this.valueSignature = new fhir.Signature(source.valueSignature);
        }
        if (source['valueTiming']) {
            this.valueTiming = new fhir.Timing(source.valueTiming);
        }
        if (source['valueContactDetail']) {
            this.valueContactDetail = new fhir.ContactDetail(source.valueContactDetail);
        }
        if (source['valueContributor']) {
            this.valueContributor = new fhir.Contributor(source.valueContributor);
        }
        if (source['valueDataRequirement']) {
            this.valueDataRequirement = new fhir.DataRequirement(source.valueDataRequirement);
        }
        if (source['valueExpression']) {
            this.valueExpression = new fhir.Expression(source.valueExpression);
        }
        if (source['valueParameterDefinition']) {
            this.valueParameterDefinition = new fhir.ParameterDefinition(source.valueParameterDefinition);
        }
        if (source['valueRelatedArtifact']) {
            this.valueRelatedArtifact = new fhir.RelatedArtifact(source.valueRelatedArtifact);
        }
        if (source['valueTriggerDefinition']) {
            this.valueTriggerDefinition = new fhir.TriggerDefinition(source.valueTriggerDefinition);
        }
        if (source['valueUsageContext']) {
            this.valueUsageContext = new fhir.UsageContext(source.valueUsageContext);
        }
        if (source['valueDosage']) {
            this.valueDosage = new fhir.Dosage(source.valueDosage);
        }
        if (source['valueMeta']) {
            this.valueMeta = new fhir.Meta(source.valueMeta);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["label"]) {
            results.push(["label", 'Missing required element: ElementDefinition.example.label']);
        }
        if (this["_label"]) {
            results.push(...this._label.doModelValidation());
        }
        if (this["_valueBase64Binary"]) {
            results.push(...this._valueBase64Binary.doModelValidation());
        }
        if (this["_valueBoolean"]) {
            results.push(...this._valueBoolean.doModelValidation());
        }
        if (this["_valueCanonical"]) {
            results.push(...this._valueCanonical.doModelValidation());
        }
        if (this["_valueCode"]) {
            results.push(...this._valueCode.doModelValidation());
        }
        if (this["_valueDate"]) {
            results.push(...this._valueDate.doModelValidation());
        }
        if (this["_valueDateTime"]) {
            results.push(...this._valueDateTime.doModelValidation());
        }
        if (this["_valueDecimal"]) {
            results.push(...this._valueDecimal.doModelValidation());
        }
        if (this["_valueId"]) {
            results.push(...this._valueId.doModelValidation());
        }
        if (this["_valueInstant"]) {
            results.push(...this._valueInstant.doModelValidation());
        }
        if (this["_valueInteger"]) {
            results.push(...this._valueInteger.doModelValidation());
        }
        if (this["_valueMarkdown"]) {
            results.push(...this._valueMarkdown.doModelValidation());
        }
        if (this["_valueOid"]) {
            results.push(...this._valueOid.doModelValidation());
        }
        if (this["_valuePositiveInt"]) {
            results.push(...this._valuePositiveInt.doModelValidation());
        }
        if (this["_valueString"]) {
            results.push(...this._valueString.doModelValidation());
        }
        if (this["_valueTime"]) {
            results.push(...this._valueTime.doModelValidation());
        }
        if (this["_valueUnsignedInt"]) {
            results.push(...this._valueUnsignedInt.doModelValidation());
        }
        if (this["_valueUri"]) {
            results.push(...this._valueUri.doModelValidation());
        }
        if (this["_valueUrl"]) {
            results.push(...this._valueUrl.doModelValidation());
        }
        if (this["_valueUuid"]) {
            results.push(...this._valueUuid.doModelValidation());
        }
        if (this["valueAddress"]) {
            results.push(...this.valueAddress.doModelValidation());
        }
        if (this["valueAge"]) {
            results.push(...this.valueAge.doModelValidation());
        }
        if (this["valueAnnotation"]) {
            results.push(...this.valueAnnotation.doModelValidation());
        }
        if (this["valueAttachment"]) {
            results.push(...this.valueAttachment.doModelValidation());
        }
        if (this["valueCodeableConcept"]) {
            results.push(...this.valueCodeableConcept.doModelValidation());
        }
        if (this["valueCoding"]) {
            results.push(...this.valueCoding.doModelValidation());
        }
        if (this["valueContactPoint"]) {
            results.push(...this.valueContactPoint.doModelValidation());
        }
        if (this["valueCount"]) {
            results.push(...this.valueCount.doModelValidation());
        }
        if (this["valueDistance"]) {
            results.push(...this.valueDistance.doModelValidation());
        }
        if (this["valueDuration"]) {
            results.push(...this.valueDuration.doModelValidation());
        }
        if (this["valueHumanName"]) {
            results.push(...this.valueHumanName.doModelValidation());
        }
        if (this["valueIdentifier"]) {
            results.push(...this.valueIdentifier.doModelValidation());
        }
        if (this["valueMoney"]) {
            results.push(...this.valueMoney.doModelValidation());
        }
        if (this["valuePeriod"]) {
            results.push(...this.valuePeriod.doModelValidation());
        }
        if (this["valueQuantity"]) {
            results.push(...this.valueQuantity.doModelValidation());
        }
        if (this["valueRange"]) {
            results.push(...this.valueRange.doModelValidation());
        }
        if (this["valueRatio"]) {
            results.push(...this.valueRatio.doModelValidation());
        }
        if (this["valueReference"]) {
            results.push(...this.valueReference.doModelValidation());
        }
        if (this["valueSampledData"]) {
            results.push(...this.valueSampledData.doModelValidation());
        }
        if (this["valueSignature"]) {
            results.push(...this.valueSignature.doModelValidation());
        }
        if (this["valueTiming"]) {
            results.push(...this.valueTiming.doModelValidation());
        }
        if (this["valueContactDetail"]) {
            results.push(...this.valueContactDetail.doModelValidation());
        }
        if (this["valueContributor"]) {
            results.push(...this.valueContributor.doModelValidation());
        }
        if (this["valueDataRequirement"]) {
            results.push(...this.valueDataRequirement.doModelValidation());
        }
        if (this["valueExpression"]) {
            results.push(...this.valueExpression.doModelValidation());
        }
        if (this["valueParameterDefinition"]) {
            results.push(...this.valueParameterDefinition.doModelValidation());
        }
        if (this["valueRelatedArtifact"]) {
            results.push(...this.valueRelatedArtifact.doModelValidation());
        }
        if (this["valueTriggerDefinition"]) {
            results.push(...this.valueTriggerDefinition.doModelValidation());
        }
        if (this["valueUsageContext"]) {
            results.push(...this.valueUsageContext.doModelValidation());
        }
        if (this["valueDosage"]) {
            results.push(...this.valueDosage.doModelValidation());
        }
        if (this["valueMeta"]) {
            results.push(...this.valueMeta.doModelValidation());
        }
        return results;
    }
}
/**
 * Constraints should be declared on the "context" element - the lowest element in the hierarchy that is common to all nodes referenced by the constraint.
 */
export class ElementDefinitionConstraint extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionConstraint - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['key']) {
            this.key = source.key;
        }
        else {
            this.key = null;
        }
        if (source['_key']) {
            this._key = new fhir.FhirElement(source._key);
        }
        if (source['requirements']) {
            this.requirements = source.requirements;
        }
        if (source['_requirements']) {
            this._requirements = new fhir.FhirElement(source._requirements);
        }
        if (source['severity']) {
            this.severity = source.severity;
        }
        else {
            this.severity = null;
        }
        if (source['_severity']) {
            this._severity = new fhir.FhirElement(source._severity);
        }
        if (source['human']) {
            this.human = source.human;
        }
        else {
            this.human = null;
        }
        if (source['_human']) {
            this._human = new fhir.FhirElement(source._human);
        }
        if (source['expression']) {
            this.expression = source.expression;
        }
        if (source['_expression']) {
            this._expression = new fhir.FhirElement(source._expression);
        }
        if (source['xpath']) {
            this.xpath = source.xpath;
        }
        if (source['_xpath']) {
            this._xpath = new fhir.FhirElement(source._xpath);
        }
        if (source['source']) {
            this.source = source.source;
        }
        if (source['_source']) {
            this._source = new fhir.FhirElement(source._source);
        }
    }
    /**
     * Required-bound Value Set for severity
     */
    static severityRequiredValueSet() {
        return ConstraintSeverityValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["key"]) {
            results.push(["key", 'Missing required element: ElementDefinition.constraint.key']);
        }
        if (this["_key"]) {
            results.push(...this._key.doModelValidation());
        }
        if (this["_requirements"]) {
            results.push(...this._requirements.doModelValidation());
        }
        if (!this["severity"]) {
            results.push(["severity", 'Missing required element: ElementDefinition.constraint.severity']);
        }
        if (this["_severity"]) {
            results.push(...this._severity.doModelValidation());
        }
        if (!this["human"]) {
            results.push(["human", 'Missing required element: ElementDefinition.constraint.human']);
        }
        if (this["_human"]) {
            results.push(...this._human.doModelValidation());
        }
        if (this["_expression"]) {
            results.push(...this._expression.doModelValidation());
        }
        if (this["_xpath"]) {
            results.push(...this._xpath.doModelValidation());
        }
        if (this["_source"]) {
            results.push(...this._source.doModelValidation());
        }
        return results;
    }
}
/**
 * For a CodeableConcept, when no codes are allowed - only text, use a binding of strength "required" with a description explaining that no coded values are allowed and what sort of information to put in the "text" element.
 */
export class ElementDefinitionBinding extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionBinding - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['strength']) {
            this.strength = source.strength;
        }
        else {
            this.strength = null;
        }
        if (source['_strength']) {
            this._strength = new fhir.FhirElement(source._strength);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['valueSet']) {
            this.valueSet = source.valueSet;
        }
        if (source['_valueSet']) {
            this._valueSet = new fhir.FhirElement(source._valueSet);
        }
    }
    /**
     * Required-bound Value Set for strength
     */
    static strengthRequiredValueSet() {
        return BindingStrengthValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["strength"]) {
            results.push(["strength", 'Missing required element: ElementDefinition.binding.strength']);
        }
        if (this["_strength"]) {
            results.push(...this._strength.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["_valueSet"]) {
            results.push(...this._valueSet.doModelValidation());
        }
        return results;
    }
}
/**
 * Mappings are not necessarily specific enough for safe translation.
 */
export class ElementDefinitionMapping extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionMapping - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['identity']) {
            this.identity = source.identity;
        }
        else {
            this.identity = null;
        }
        if (source['_identity']) {
            this._identity = new fhir.FhirElement(source._identity);
        }
        if (source['language']) {
            this.language = source.language;
        }
        if (source['_language']) {
            this._language = new fhir.FhirElement(source._language);
        }
        if (source['map']) {
            this.map = source.map;
        }
        else {
            this.map = null;
        }
        if (source['_map']) {
            this._map = new fhir.FhirElement(source._map);
        }
        if (source['comment']) {
            this.comment = source.comment;
        }
        if (source['_comment']) {
            this._comment = new fhir.FhirElement(source._comment);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["identity"]) {
            results.push(["identity", 'Missing required element: ElementDefinition.mapping.identity']);
        }
        if (this["_identity"]) {
            results.push(...this._identity.doModelValidation());
        }
        if (this["_language"]) {
            results.push(...this._language.doModelValidation());
        }
        if (!this["map"]) {
            results.push(["map", 'Missing required element: ElementDefinition.mapping.map']);
        }
        if (this["_map"]) {
            results.push(...this._map.doModelValidation());
        }
        if (this["_comment"]) {
            results.push(...this._comment.doModelValidation());
        }
        return results;
    }
}
/**
 * Captures constraints on each element within the resource, profile, or extension.
 */
export class ElementDefinition extends fhir.BackboneElement {
    /**
     * Default constructor for ElementDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['path']) {
            this.path = source.path;
        }
        else {
            this.path = null;
        }
        if (source['_path']) {
            this._path = new fhir.FhirElement(source._path);
        }
        if (source['representation']) {
            this.representation = source.representation.map((x) => (x));
        }
        if (source['_representation']) {
            this._representation = source._representation.map((x) => new fhir.FhirElement(x));
        }
        if (source['sliceName']) {
            this.sliceName = source.sliceName;
        }
        if (source['_sliceName']) {
            this._sliceName = new fhir.FhirElement(source._sliceName);
        }
        if (source['sliceIsConstraining']) {
            this.sliceIsConstraining = source.sliceIsConstraining;
        }
        if (source['_sliceIsConstraining']) {
            this._sliceIsConstraining = new fhir.FhirElement(source._sliceIsConstraining);
        }
        if (source['label']) {
            this.label = source.label;
        }
        if (source['_label']) {
            this._label = new fhir.FhirElement(source._label);
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.Coding(x));
        }
        if (source['slicing']) {
            this.slicing = new fhir.ElementDefinitionSlicing(source.slicing);
        }
        if (source['short']) {
            this.short = source.short;
        }
        if (source['_short']) {
            this._short = new fhir.FhirElement(source._short);
        }
        if (source['definition']) {
            this.definition = source.definition;
        }
        if (source['_definition']) {
            this._definition = new fhir.FhirElement(source._definition);
        }
        if (source['comment']) {
            this.comment = source.comment;
        }
        if (source['_comment']) {
            this._comment = new fhir.FhirElement(source._comment);
        }
        if (source['requirements']) {
            this.requirements = source.requirements;
        }
        if (source['_requirements']) {
            this._requirements = new fhir.FhirElement(source._requirements);
        }
        if (source['alias']) {
            this.alias = source.alias.map((x) => (x));
        }
        if (source['_alias']) {
            this._alias = source._alias.map((x) => new fhir.FhirElement(x));
        }
        if (source['min']) {
            this.min = source.min;
        }
        if (source['_min']) {
            this._min = new fhir.FhirElement(source._min);
        }
        if (source['max']) {
            this.max = source.max;
        }
        if (source['_max']) {
            this._max = new fhir.FhirElement(source._max);
        }
        if (source['base']) {
            this.base = new fhir.ElementDefinitionBase(source.base);
        }
        if (source['contentReference']) {
            this.contentReference = source.contentReference;
        }
        if (source['_contentReference']) {
            this._contentReference = new fhir.FhirElement(source._contentReference);
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.ElementDefinitionType(x));
        }
        if (source['defaultValueBase64Binary']) {
            this.defaultValueBase64Binary = source.defaultValueBase64Binary;
        }
        if (source['_defaultValueBase64Binary']) {
            this._defaultValueBase64Binary = new fhir.FhirElement(source._defaultValueBase64Binary);
        }
        if (source['defaultValueBoolean']) {
            this.defaultValueBoolean = source.defaultValueBoolean;
        }
        if (source['_defaultValueBoolean']) {
            this._defaultValueBoolean = new fhir.FhirElement(source._defaultValueBoolean);
        }
        if (source['defaultValueCanonical']) {
            this.defaultValueCanonical = source.defaultValueCanonical;
        }
        if (source['_defaultValueCanonical']) {
            this._defaultValueCanonical = new fhir.FhirElement(source._defaultValueCanonical);
        }
        if (source['defaultValueCode']) {
            this.defaultValueCode = source.defaultValueCode;
        }
        if (source['_defaultValueCode']) {
            this._defaultValueCode = new fhir.FhirElement(source._defaultValueCode);
        }
        if (source['defaultValueDate']) {
            this.defaultValueDate = source.defaultValueDate;
        }
        if (source['_defaultValueDate']) {
            this._defaultValueDate = new fhir.FhirElement(source._defaultValueDate);
        }
        if (source['defaultValueDateTime']) {
            this.defaultValueDateTime = source.defaultValueDateTime;
        }
        if (source['_defaultValueDateTime']) {
            this._defaultValueDateTime = new fhir.FhirElement(source._defaultValueDateTime);
        }
        if (source['defaultValueDecimal']) {
            this.defaultValueDecimal = source.defaultValueDecimal;
        }
        if (source['_defaultValueDecimal']) {
            this._defaultValueDecimal = new fhir.FhirElement(source._defaultValueDecimal);
        }
        if (source['defaultValueId']) {
            this.defaultValueId = source.defaultValueId;
        }
        if (source['_defaultValueId']) {
            this._defaultValueId = new fhir.FhirElement(source._defaultValueId);
        }
        if (source['defaultValueInstant']) {
            this.defaultValueInstant = source.defaultValueInstant;
        }
        if (source['_defaultValueInstant']) {
            this._defaultValueInstant = new fhir.FhirElement(source._defaultValueInstant);
        }
        if (source['defaultValueInteger']) {
            this.defaultValueInteger = source.defaultValueInteger;
        }
        if (source['_defaultValueInteger']) {
            this._defaultValueInteger = new fhir.FhirElement(source._defaultValueInteger);
        }
        if (source['defaultValueMarkdown']) {
            this.defaultValueMarkdown = source.defaultValueMarkdown;
        }
        if (source['_defaultValueMarkdown']) {
            this._defaultValueMarkdown = new fhir.FhirElement(source._defaultValueMarkdown);
        }
        if (source['defaultValueOid']) {
            this.defaultValueOid = source.defaultValueOid;
        }
        if (source['_defaultValueOid']) {
            this._defaultValueOid = new fhir.FhirElement(source._defaultValueOid);
        }
        if (source['defaultValuePositiveInt']) {
            this.defaultValuePositiveInt = source.defaultValuePositiveInt;
        }
        if (source['_defaultValuePositiveInt']) {
            this._defaultValuePositiveInt = new fhir.FhirElement(source._defaultValuePositiveInt);
        }
        if (source['defaultValueString']) {
            this.defaultValueString = source.defaultValueString;
        }
        if (source['_defaultValueString']) {
            this._defaultValueString = new fhir.FhirElement(source._defaultValueString);
        }
        if (source['defaultValueTime']) {
            this.defaultValueTime = source.defaultValueTime;
        }
        if (source['_defaultValueTime']) {
            this._defaultValueTime = new fhir.FhirElement(source._defaultValueTime);
        }
        if (source['defaultValueUnsignedInt']) {
            this.defaultValueUnsignedInt = source.defaultValueUnsignedInt;
        }
        if (source['_defaultValueUnsignedInt']) {
            this._defaultValueUnsignedInt = new fhir.FhirElement(source._defaultValueUnsignedInt);
        }
        if (source['defaultValueUri']) {
            this.defaultValueUri = source.defaultValueUri;
        }
        if (source['_defaultValueUri']) {
            this._defaultValueUri = new fhir.FhirElement(source._defaultValueUri);
        }
        if (source['defaultValueUrl']) {
            this.defaultValueUrl = source.defaultValueUrl;
        }
        if (source['_defaultValueUrl']) {
            this._defaultValueUrl = new fhir.FhirElement(source._defaultValueUrl);
        }
        if (source['defaultValueUuid']) {
            this.defaultValueUuid = source.defaultValueUuid;
        }
        if (source['_defaultValueUuid']) {
            this._defaultValueUuid = new fhir.FhirElement(source._defaultValueUuid);
        }
        if (source['defaultValueAddress']) {
            this.defaultValueAddress = new fhir.Address(source.defaultValueAddress);
        }
        if (source['defaultValueAge']) {
            this.defaultValueAge = new fhir.Age(source.defaultValueAge);
        }
        if (source['defaultValueAnnotation']) {
            this.defaultValueAnnotation = new fhir.Annotation(source.defaultValueAnnotation);
        }
        if (source['defaultValueAttachment']) {
            this.defaultValueAttachment = new fhir.Attachment(source.defaultValueAttachment);
        }
        if (source['defaultValueCodeableConcept']) {
            this.defaultValueCodeableConcept = new fhir.CodeableConcept(source.defaultValueCodeableConcept);
        }
        if (source['defaultValueCoding']) {
            this.defaultValueCoding = new fhir.Coding(source.defaultValueCoding);
        }
        if (source['defaultValueContactPoint']) {
            this.defaultValueContactPoint = new fhir.ContactPoint(source.defaultValueContactPoint);
        }
        if (source['defaultValueCount']) {
            this.defaultValueCount = new fhir.Count(source.defaultValueCount);
        }
        if (source['defaultValueDistance']) {
            this.defaultValueDistance = new fhir.Distance(source.defaultValueDistance);
        }
        if (source['defaultValueDuration']) {
            this.defaultValueDuration = new fhir.Duration(source.defaultValueDuration);
        }
        if (source['defaultValueHumanName']) {
            this.defaultValueHumanName = new fhir.HumanName(source.defaultValueHumanName);
        }
        if (source['defaultValueIdentifier']) {
            this.defaultValueIdentifier = new fhir.Identifier(source.defaultValueIdentifier);
        }
        if (source['defaultValueMoney']) {
            this.defaultValueMoney = new fhir.Money(source.defaultValueMoney);
        }
        if (source['defaultValuePeriod']) {
            this.defaultValuePeriod = new fhir.Period(source.defaultValuePeriod);
        }
        if (source['defaultValueQuantity']) {
            this.defaultValueQuantity = new fhir.Quantity(source.defaultValueQuantity);
        }
        if (source['defaultValueRange']) {
            this.defaultValueRange = new fhir.Range(source.defaultValueRange);
        }
        if (source['defaultValueRatio']) {
            this.defaultValueRatio = new fhir.Ratio(source.defaultValueRatio);
        }
        if (source['defaultValueReference']) {
            this.defaultValueReference = new fhir.Reference(source.defaultValueReference);
        }
        if (source['defaultValueSampledData']) {
            this.defaultValueSampledData = new fhir.SampledData(source.defaultValueSampledData);
        }
        if (source['defaultValueSignature']) {
            this.defaultValueSignature = new fhir.Signature(source.defaultValueSignature);
        }
        if (source['defaultValueTiming']) {
            this.defaultValueTiming = new fhir.Timing(source.defaultValueTiming);
        }
        if (source['defaultValueContactDetail']) {
            this.defaultValueContactDetail = new fhir.ContactDetail(source.defaultValueContactDetail);
        }
        if (source['defaultValueContributor']) {
            this.defaultValueContributor = new fhir.Contributor(source.defaultValueContributor);
        }
        if (source['defaultValueDataRequirement']) {
            this.defaultValueDataRequirement = new fhir.DataRequirement(source.defaultValueDataRequirement);
        }
        if (source['defaultValueExpression']) {
            this.defaultValueExpression = new fhir.Expression(source.defaultValueExpression);
        }
        if (source['defaultValueParameterDefinition']) {
            this.defaultValueParameterDefinition = new fhir.ParameterDefinition(source.defaultValueParameterDefinition);
        }
        if (source['defaultValueRelatedArtifact']) {
            this.defaultValueRelatedArtifact = new fhir.RelatedArtifact(source.defaultValueRelatedArtifact);
        }
        if (source['defaultValueTriggerDefinition']) {
            this.defaultValueTriggerDefinition = new fhir.TriggerDefinition(source.defaultValueTriggerDefinition);
        }
        if (source['defaultValueUsageContext']) {
            this.defaultValueUsageContext = new fhir.UsageContext(source.defaultValueUsageContext);
        }
        if (source['defaultValueDosage']) {
            this.defaultValueDosage = new fhir.Dosage(source.defaultValueDosage);
        }
        if (source['defaultValueMeta']) {
            this.defaultValueMeta = new fhir.Meta(source.defaultValueMeta);
        }
        if (source['meaningWhenMissing']) {
            this.meaningWhenMissing = source.meaningWhenMissing;
        }
        if (source['_meaningWhenMissing']) {
            this._meaningWhenMissing = new fhir.FhirElement(source._meaningWhenMissing);
        }
        if (source['orderMeaning']) {
            this.orderMeaning = source.orderMeaning;
        }
        if (source['_orderMeaning']) {
            this._orderMeaning = new fhir.FhirElement(source._orderMeaning);
        }
        if (source['fixedBase64Binary']) {
            this.fixedBase64Binary = source.fixedBase64Binary;
        }
        if (source['_fixedBase64Binary']) {
            this._fixedBase64Binary = new fhir.FhirElement(source._fixedBase64Binary);
        }
        if (source['fixedBoolean']) {
            this.fixedBoolean = source.fixedBoolean;
        }
        if (source['_fixedBoolean']) {
            this._fixedBoolean = new fhir.FhirElement(source._fixedBoolean);
        }
        if (source['fixedCanonical']) {
            this.fixedCanonical = source.fixedCanonical;
        }
        if (source['_fixedCanonical']) {
            this._fixedCanonical = new fhir.FhirElement(source._fixedCanonical);
        }
        if (source['fixedCode']) {
            this.fixedCode = source.fixedCode;
        }
        if (source['_fixedCode']) {
            this._fixedCode = new fhir.FhirElement(source._fixedCode);
        }
        if (source['fixedDate']) {
            this.fixedDate = source.fixedDate;
        }
        if (source['_fixedDate']) {
            this._fixedDate = new fhir.FhirElement(source._fixedDate);
        }
        if (source['fixedDateTime']) {
            this.fixedDateTime = source.fixedDateTime;
        }
        if (source['_fixedDateTime']) {
            this._fixedDateTime = new fhir.FhirElement(source._fixedDateTime);
        }
        if (source['fixedDecimal']) {
            this.fixedDecimal = source.fixedDecimal;
        }
        if (source['_fixedDecimal']) {
            this._fixedDecimal = new fhir.FhirElement(source._fixedDecimal);
        }
        if (source['fixedId']) {
            this.fixedId = source.fixedId;
        }
        if (source['_fixedId']) {
            this._fixedId = new fhir.FhirElement(source._fixedId);
        }
        if (source['fixedInstant']) {
            this.fixedInstant = source.fixedInstant;
        }
        if (source['_fixedInstant']) {
            this._fixedInstant = new fhir.FhirElement(source._fixedInstant);
        }
        if (source['fixedInteger']) {
            this.fixedInteger = source.fixedInteger;
        }
        if (source['_fixedInteger']) {
            this._fixedInteger = new fhir.FhirElement(source._fixedInteger);
        }
        if (source['fixedMarkdown']) {
            this.fixedMarkdown = source.fixedMarkdown;
        }
        if (source['_fixedMarkdown']) {
            this._fixedMarkdown = new fhir.FhirElement(source._fixedMarkdown);
        }
        if (source['fixedOid']) {
            this.fixedOid = source.fixedOid;
        }
        if (source['_fixedOid']) {
            this._fixedOid = new fhir.FhirElement(source._fixedOid);
        }
        if (source['fixedPositiveInt']) {
            this.fixedPositiveInt = source.fixedPositiveInt;
        }
        if (source['_fixedPositiveInt']) {
            this._fixedPositiveInt = new fhir.FhirElement(source._fixedPositiveInt);
        }
        if (source['fixedString']) {
            this.fixedString = source.fixedString;
        }
        if (source['_fixedString']) {
            this._fixedString = new fhir.FhirElement(source._fixedString);
        }
        if (source['fixedTime']) {
            this.fixedTime = source.fixedTime;
        }
        if (source['_fixedTime']) {
            this._fixedTime = new fhir.FhirElement(source._fixedTime);
        }
        if (source['fixedUnsignedInt']) {
            this.fixedUnsignedInt = source.fixedUnsignedInt;
        }
        if (source['_fixedUnsignedInt']) {
            this._fixedUnsignedInt = new fhir.FhirElement(source._fixedUnsignedInt);
        }
        if (source['fixedUri']) {
            this.fixedUri = source.fixedUri;
        }
        if (source['_fixedUri']) {
            this._fixedUri = new fhir.FhirElement(source._fixedUri);
        }
        if (source['fixedUrl']) {
            this.fixedUrl = source.fixedUrl;
        }
        if (source['_fixedUrl']) {
            this._fixedUrl = new fhir.FhirElement(source._fixedUrl);
        }
        if (source['fixedUuid']) {
            this.fixedUuid = source.fixedUuid;
        }
        if (source['_fixedUuid']) {
            this._fixedUuid = new fhir.FhirElement(source._fixedUuid);
        }
        if (source['fixedAddress']) {
            this.fixedAddress = new fhir.Address(source.fixedAddress);
        }
        if (source['fixedAge']) {
            this.fixedAge = new fhir.Age(source.fixedAge);
        }
        if (source['fixedAnnotation']) {
            this.fixedAnnotation = new fhir.Annotation(source.fixedAnnotation);
        }
        if (source['fixedAttachment']) {
            this.fixedAttachment = new fhir.Attachment(source.fixedAttachment);
        }
        if (source['fixedCodeableConcept']) {
            this.fixedCodeableConcept = new fhir.CodeableConcept(source.fixedCodeableConcept);
        }
        if (source['fixedCoding']) {
            this.fixedCoding = new fhir.Coding(source.fixedCoding);
        }
        if (source['fixedContactPoint']) {
            this.fixedContactPoint = new fhir.ContactPoint(source.fixedContactPoint);
        }
        if (source['fixedCount']) {
            this.fixedCount = new fhir.Count(source.fixedCount);
        }
        if (source['fixedDistance']) {
            this.fixedDistance = new fhir.Distance(source.fixedDistance);
        }
        if (source['fixedDuration']) {
            this.fixedDuration = new fhir.Duration(source.fixedDuration);
        }
        if (source['fixedHumanName']) {
            this.fixedHumanName = new fhir.HumanName(source.fixedHumanName);
        }
        if (source['fixedIdentifier']) {
            this.fixedIdentifier = new fhir.Identifier(source.fixedIdentifier);
        }
        if (source['fixedMoney']) {
            this.fixedMoney = new fhir.Money(source.fixedMoney);
        }
        if (source['fixedPeriod']) {
            this.fixedPeriod = new fhir.Period(source.fixedPeriod);
        }
        if (source['fixedQuantity']) {
            this.fixedQuantity = new fhir.Quantity(source.fixedQuantity);
        }
        if (source['fixedRange']) {
            this.fixedRange = new fhir.Range(source.fixedRange);
        }
        if (source['fixedRatio']) {
            this.fixedRatio = new fhir.Ratio(source.fixedRatio);
        }
        if (source['fixedReference']) {
            this.fixedReference = new fhir.Reference(source.fixedReference);
        }
        if (source['fixedSampledData']) {
            this.fixedSampledData = new fhir.SampledData(source.fixedSampledData);
        }
        if (source['fixedSignature']) {
            this.fixedSignature = new fhir.Signature(source.fixedSignature);
        }
        if (source['fixedTiming']) {
            this.fixedTiming = new fhir.Timing(source.fixedTiming);
        }
        if (source['fixedContactDetail']) {
            this.fixedContactDetail = new fhir.ContactDetail(source.fixedContactDetail);
        }
        if (source['fixedContributor']) {
            this.fixedContributor = new fhir.Contributor(source.fixedContributor);
        }
        if (source['fixedDataRequirement']) {
            this.fixedDataRequirement = new fhir.DataRequirement(source.fixedDataRequirement);
        }
        if (source['fixedExpression']) {
            this.fixedExpression = new fhir.Expression(source.fixedExpression);
        }
        if (source['fixedParameterDefinition']) {
            this.fixedParameterDefinition = new fhir.ParameterDefinition(source.fixedParameterDefinition);
        }
        if (source['fixedRelatedArtifact']) {
            this.fixedRelatedArtifact = new fhir.RelatedArtifact(source.fixedRelatedArtifact);
        }
        if (source['fixedTriggerDefinition']) {
            this.fixedTriggerDefinition = new fhir.TriggerDefinition(source.fixedTriggerDefinition);
        }
        if (source['fixedUsageContext']) {
            this.fixedUsageContext = new fhir.UsageContext(source.fixedUsageContext);
        }
        if (source['fixedDosage']) {
            this.fixedDosage = new fhir.Dosage(source.fixedDosage);
        }
        if (source['fixedMeta']) {
            this.fixedMeta = new fhir.Meta(source.fixedMeta);
        }
        if (source['patternBase64Binary']) {
            this.patternBase64Binary = source.patternBase64Binary;
        }
        if (source['_patternBase64Binary']) {
            this._patternBase64Binary = new fhir.FhirElement(source._patternBase64Binary);
        }
        if (source['patternBoolean']) {
            this.patternBoolean = source.patternBoolean;
        }
        if (source['_patternBoolean']) {
            this._patternBoolean = new fhir.FhirElement(source._patternBoolean);
        }
        if (source['patternCanonical']) {
            this.patternCanonical = source.patternCanonical;
        }
        if (source['_patternCanonical']) {
            this._patternCanonical = new fhir.FhirElement(source._patternCanonical);
        }
        if (source['patternCode']) {
            this.patternCode = source.patternCode;
        }
        if (source['_patternCode']) {
            this._patternCode = new fhir.FhirElement(source._patternCode);
        }
        if (source['patternDate']) {
            this.patternDate = source.patternDate;
        }
        if (source['_patternDate']) {
            this._patternDate = new fhir.FhirElement(source._patternDate);
        }
        if (source['patternDateTime']) {
            this.patternDateTime = source.patternDateTime;
        }
        if (source['_patternDateTime']) {
            this._patternDateTime = new fhir.FhirElement(source._patternDateTime);
        }
        if (source['patternDecimal']) {
            this.patternDecimal = source.patternDecimal;
        }
        if (source['_patternDecimal']) {
            this._patternDecimal = new fhir.FhirElement(source._patternDecimal);
        }
        if (source['patternId']) {
            this.patternId = source.patternId;
        }
        if (source['_patternId']) {
            this._patternId = new fhir.FhirElement(source._patternId);
        }
        if (source['patternInstant']) {
            this.patternInstant = source.patternInstant;
        }
        if (source['_patternInstant']) {
            this._patternInstant = new fhir.FhirElement(source._patternInstant);
        }
        if (source['patternInteger']) {
            this.patternInteger = source.patternInteger;
        }
        if (source['_patternInteger']) {
            this._patternInteger = new fhir.FhirElement(source._patternInteger);
        }
        if (source['patternMarkdown']) {
            this.patternMarkdown = source.patternMarkdown;
        }
        if (source['_patternMarkdown']) {
            this._patternMarkdown = new fhir.FhirElement(source._patternMarkdown);
        }
        if (source['patternOid']) {
            this.patternOid = source.patternOid;
        }
        if (source['_patternOid']) {
            this._patternOid = new fhir.FhirElement(source._patternOid);
        }
        if (source['patternPositiveInt']) {
            this.patternPositiveInt = source.patternPositiveInt;
        }
        if (source['_patternPositiveInt']) {
            this._patternPositiveInt = new fhir.FhirElement(source._patternPositiveInt);
        }
        if (source['patternString']) {
            this.patternString = source.patternString;
        }
        if (source['_patternString']) {
            this._patternString = new fhir.FhirElement(source._patternString);
        }
        if (source['patternTime']) {
            this.patternTime = source.patternTime;
        }
        if (source['_patternTime']) {
            this._patternTime = new fhir.FhirElement(source._patternTime);
        }
        if (source['patternUnsignedInt']) {
            this.patternUnsignedInt = source.patternUnsignedInt;
        }
        if (source['_patternUnsignedInt']) {
            this._patternUnsignedInt = new fhir.FhirElement(source._patternUnsignedInt);
        }
        if (source['patternUri']) {
            this.patternUri = source.patternUri;
        }
        if (source['_patternUri']) {
            this._patternUri = new fhir.FhirElement(source._patternUri);
        }
        if (source['patternUrl']) {
            this.patternUrl = source.patternUrl;
        }
        if (source['_patternUrl']) {
            this._patternUrl = new fhir.FhirElement(source._patternUrl);
        }
        if (source['patternUuid']) {
            this.patternUuid = source.patternUuid;
        }
        if (source['_patternUuid']) {
            this._patternUuid = new fhir.FhirElement(source._patternUuid);
        }
        if (source['patternAddress']) {
            this.patternAddress = new fhir.Address(source.patternAddress);
        }
        if (source['patternAge']) {
            this.patternAge = new fhir.Age(source.patternAge);
        }
        if (source['patternAnnotation']) {
            this.patternAnnotation = new fhir.Annotation(source.patternAnnotation);
        }
        if (source['patternAttachment']) {
            this.patternAttachment = new fhir.Attachment(source.patternAttachment);
        }
        if (source['patternCodeableConcept']) {
            this.patternCodeableConcept = new fhir.CodeableConcept(source.patternCodeableConcept);
        }
        if (source['patternCoding']) {
            this.patternCoding = new fhir.Coding(source.patternCoding);
        }
        if (source['patternContactPoint']) {
            this.patternContactPoint = new fhir.ContactPoint(source.patternContactPoint);
        }
        if (source['patternCount']) {
            this.patternCount = new fhir.Count(source.patternCount);
        }
        if (source['patternDistance']) {
            this.patternDistance = new fhir.Distance(source.patternDistance);
        }
        if (source['patternDuration']) {
            this.patternDuration = new fhir.Duration(source.patternDuration);
        }
        if (source['patternHumanName']) {
            this.patternHumanName = new fhir.HumanName(source.patternHumanName);
        }
        if (source['patternIdentifier']) {
            this.patternIdentifier = new fhir.Identifier(source.patternIdentifier);
        }
        if (source['patternMoney']) {
            this.patternMoney = new fhir.Money(source.patternMoney);
        }
        if (source['patternPeriod']) {
            this.patternPeriod = new fhir.Period(source.patternPeriod);
        }
        if (source['patternQuantity']) {
            this.patternQuantity = new fhir.Quantity(source.patternQuantity);
        }
        if (source['patternRange']) {
            this.patternRange = new fhir.Range(source.patternRange);
        }
        if (source['patternRatio']) {
            this.patternRatio = new fhir.Ratio(source.patternRatio);
        }
        if (source['patternReference']) {
            this.patternReference = new fhir.Reference(source.patternReference);
        }
        if (source['patternSampledData']) {
            this.patternSampledData = new fhir.SampledData(source.patternSampledData);
        }
        if (source['patternSignature']) {
            this.patternSignature = new fhir.Signature(source.patternSignature);
        }
        if (source['patternTiming']) {
            this.patternTiming = new fhir.Timing(source.patternTiming);
        }
        if (source['patternContactDetail']) {
            this.patternContactDetail = new fhir.ContactDetail(source.patternContactDetail);
        }
        if (source['patternContributor']) {
            this.patternContributor = new fhir.Contributor(source.patternContributor);
        }
        if (source['patternDataRequirement']) {
            this.patternDataRequirement = new fhir.DataRequirement(source.patternDataRequirement);
        }
        if (source['patternExpression']) {
            this.patternExpression = new fhir.Expression(source.patternExpression);
        }
        if (source['patternParameterDefinition']) {
            this.patternParameterDefinition = new fhir.ParameterDefinition(source.patternParameterDefinition);
        }
        if (source['patternRelatedArtifact']) {
            this.patternRelatedArtifact = new fhir.RelatedArtifact(source.patternRelatedArtifact);
        }
        if (source['patternTriggerDefinition']) {
            this.patternTriggerDefinition = new fhir.TriggerDefinition(source.patternTriggerDefinition);
        }
        if (source['patternUsageContext']) {
            this.patternUsageContext = new fhir.UsageContext(source.patternUsageContext);
        }
        if (source['patternDosage']) {
            this.patternDosage = new fhir.Dosage(source.patternDosage);
        }
        if (source['patternMeta']) {
            this.patternMeta = new fhir.Meta(source.patternMeta);
        }
        if (source['example']) {
            this.example = source.example.map((x) => new fhir.ElementDefinitionExample(x));
        }
        if (source['minValueDate']) {
            this.minValueDate = source.minValueDate;
        }
        if (source['_minValueDate']) {
            this._minValueDate = new fhir.FhirElement(source._minValueDate);
        }
        if (source['minValueDateTime']) {
            this.minValueDateTime = source.minValueDateTime;
        }
        if (source['_minValueDateTime']) {
            this._minValueDateTime = new fhir.FhirElement(source._minValueDateTime);
        }
        if (source['minValueInstant']) {
            this.minValueInstant = source.minValueInstant;
        }
        if (source['_minValueInstant']) {
            this._minValueInstant = new fhir.FhirElement(source._minValueInstant);
        }
        if (source['minValueTime']) {
            this.minValueTime = source.minValueTime;
        }
        if (source['_minValueTime']) {
            this._minValueTime = new fhir.FhirElement(source._minValueTime);
        }
        if (source['minValueDecimal']) {
            this.minValueDecimal = source.minValueDecimal;
        }
        if (source['_minValueDecimal']) {
            this._minValueDecimal = new fhir.FhirElement(source._minValueDecimal);
        }
        if (source['minValueInteger']) {
            this.minValueInteger = source.minValueInteger;
        }
        if (source['_minValueInteger']) {
            this._minValueInteger = new fhir.FhirElement(source._minValueInteger);
        }
        if (source['minValuePositiveInt']) {
            this.minValuePositiveInt = source.minValuePositiveInt;
        }
        if (source['_minValuePositiveInt']) {
            this._minValuePositiveInt = new fhir.FhirElement(source._minValuePositiveInt);
        }
        if (source['minValueUnsignedInt']) {
            this.minValueUnsignedInt = source.minValueUnsignedInt;
        }
        if (source['_minValueUnsignedInt']) {
            this._minValueUnsignedInt = new fhir.FhirElement(source._minValueUnsignedInt);
        }
        if (source['minValueQuantity']) {
            this.minValueQuantity = new fhir.Quantity(source.minValueQuantity);
        }
        if (source['maxValueDate']) {
            this.maxValueDate = source.maxValueDate;
        }
        if (source['_maxValueDate']) {
            this._maxValueDate = new fhir.FhirElement(source._maxValueDate);
        }
        if (source['maxValueDateTime']) {
            this.maxValueDateTime = source.maxValueDateTime;
        }
        if (source['_maxValueDateTime']) {
            this._maxValueDateTime = new fhir.FhirElement(source._maxValueDateTime);
        }
        if (source['maxValueInstant']) {
            this.maxValueInstant = source.maxValueInstant;
        }
        if (source['_maxValueInstant']) {
            this._maxValueInstant = new fhir.FhirElement(source._maxValueInstant);
        }
        if (source['maxValueTime']) {
            this.maxValueTime = source.maxValueTime;
        }
        if (source['_maxValueTime']) {
            this._maxValueTime = new fhir.FhirElement(source._maxValueTime);
        }
        if (source['maxValueDecimal']) {
            this.maxValueDecimal = source.maxValueDecimal;
        }
        if (source['_maxValueDecimal']) {
            this._maxValueDecimal = new fhir.FhirElement(source._maxValueDecimal);
        }
        if (source['maxValueInteger']) {
            this.maxValueInteger = source.maxValueInteger;
        }
        if (source['_maxValueInteger']) {
            this._maxValueInteger = new fhir.FhirElement(source._maxValueInteger);
        }
        if (source['maxValuePositiveInt']) {
            this.maxValuePositiveInt = source.maxValuePositiveInt;
        }
        if (source['_maxValuePositiveInt']) {
            this._maxValuePositiveInt = new fhir.FhirElement(source._maxValuePositiveInt);
        }
        if (source['maxValueUnsignedInt']) {
            this.maxValueUnsignedInt = source.maxValueUnsignedInt;
        }
        if (source['_maxValueUnsignedInt']) {
            this._maxValueUnsignedInt = new fhir.FhirElement(source._maxValueUnsignedInt);
        }
        if (source['maxValueQuantity']) {
            this.maxValueQuantity = new fhir.Quantity(source.maxValueQuantity);
        }
        if (source['maxLength']) {
            this.maxLength = source.maxLength;
        }
        if (source['_maxLength']) {
            this._maxLength = new fhir.FhirElement(source._maxLength);
        }
        if (source['condition']) {
            this.condition = source.condition.map((x) => (x));
        }
        if (source['_condition']) {
            this._condition = source._condition.map((x) => new fhir.FhirElement(x));
        }
        if (source['constraint']) {
            this.constraint = source.constraint.map((x) => new fhir.ElementDefinitionConstraint(x));
        }
        if (source['mustSupport']) {
            this.mustSupport = source.mustSupport;
        }
        if (source['_mustSupport']) {
            this._mustSupport = new fhir.FhirElement(source._mustSupport);
        }
        if (source['isModifier']) {
            this.isModifier = source.isModifier;
        }
        if (source['_isModifier']) {
            this._isModifier = new fhir.FhirElement(source._isModifier);
        }
        if (source['isModifierReason']) {
            this.isModifierReason = source.isModifierReason;
        }
        if (source['_isModifierReason']) {
            this._isModifierReason = new fhir.FhirElement(source._isModifierReason);
        }
        if (source['isSummary']) {
            this.isSummary = source.isSummary;
        }
        if (source['_isSummary']) {
            this._isSummary = new fhir.FhirElement(source._isSummary);
        }
        if (source['binding']) {
            this.binding = new fhir.ElementDefinitionBinding(source.binding);
        }
        if (source['mapping']) {
            this.mapping = source.mapping.map((x) => new fhir.ElementDefinitionMapping(x));
        }
    }
    /**
     * Required-bound Value Set for representation
     */
    static representationRequiredValueSet() {
        return PropertyRepresentationValueSet;
    }
    /**
     * Example-bound Value Set for code
     */
    static codeExampleValueSet() {
        return ObservationCodesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["path"]) {
            results.push(["path", 'Missing required element: ElementDefinition.path']);
        }
        if (this["_path"]) {
            results.push(...this._path.doModelValidation());
        }
        if (this["_representation"]) {
            this._representation.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_sliceName"]) {
            results.push(...this._sliceName.doModelValidation());
        }
        if (this["_sliceIsConstraining"]) {
            results.push(...this._sliceIsConstraining.doModelValidation());
        }
        if (this["_label"]) {
            results.push(...this._label.doModelValidation());
        }
        if (this["code"]) {
            this.code.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["slicing"]) {
            results.push(...this.slicing.doModelValidation());
        }
        if (this["_short"]) {
            results.push(...this._short.doModelValidation());
        }
        if (this["_definition"]) {
            results.push(...this._definition.doModelValidation());
        }
        if (this["_comment"]) {
            results.push(...this._comment.doModelValidation());
        }
        if (this["_requirements"]) {
            results.push(...this._requirements.doModelValidation());
        }
        if (this["_alias"]) {
            this._alias.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_min"]) {
            results.push(...this._min.doModelValidation());
        }
        if (this["_max"]) {
            results.push(...this._max.doModelValidation());
        }
        if (this["base"]) {
            results.push(...this.base.doModelValidation());
        }
        if (this["_contentReference"]) {
            results.push(...this._contentReference.doModelValidation());
        }
        if (this["type"]) {
            this.type.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_defaultValueBase64Binary"]) {
            results.push(...this._defaultValueBase64Binary.doModelValidation());
        }
        if (this["_defaultValueBoolean"]) {
            results.push(...this._defaultValueBoolean.doModelValidation());
        }
        if (this["_defaultValueCanonical"]) {
            results.push(...this._defaultValueCanonical.doModelValidation());
        }
        if (this["_defaultValueCode"]) {
            results.push(...this._defaultValueCode.doModelValidation());
        }
        if (this["_defaultValueDate"]) {
            results.push(...this._defaultValueDate.doModelValidation());
        }
        if (this["_defaultValueDateTime"]) {
            results.push(...this._defaultValueDateTime.doModelValidation());
        }
        if (this["_defaultValueDecimal"]) {
            results.push(...this._defaultValueDecimal.doModelValidation());
        }
        if (this["_defaultValueId"]) {
            results.push(...this._defaultValueId.doModelValidation());
        }
        if (this["_defaultValueInstant"]) {
            results.push(...this._defaultValueInstant.doModelValidation());
        }
        if (this["_defaultValueInteger"]) {
            results.push(...this._defaultValueInteger.doModelValidation());
        }
        if (this["_defaultValueMarkdown"]) {
            results.push(...this._defaultValueMarkdown.doModelValidation());
        }
        if (this["_defaultValueOid"]) {
            results.push(...this._defaultValueOid.doModelValidation());
        }
        if (this["_defaultValuePositiveInt"]) {
            results.push(...this._defaultValuePositiveInt.doModelValidation());
        }
        if (this["_defaultValueString"]) {
            results.push(...this._defaultValueString.doModelValidation());
        }
        if (this["_defaultValueTime"]) {
            results.push(...this._defaultValueTime.doModelValidation());
        }
        if (this["_defaultValueUnsignedInt"]) {
            results.push(...this._defaultValueUnsignedInt.doModelValidation());
        }
        if (this["_defaultValueUri"]) {
            results.push(...this._defaultValueUri.doModelValidation());
        }
        if (this["_defaultValueUrl"]) {
            results.push(...this._defaultValueUrl.doModelValidation());
        }
        if (this["_defaultValueUuid"]) {
            results.push(...this._defaultValueUuid.doModelValidation());
        }
        if (this["defaultValueAddress"]) {
            results.push(...this.defaultValueAddress.doModelValidation());
        }
        if (this["defaultValueAge"]) {
            results.push(...this.defaultValueAge.doModelValidation());
        }
        if (this["defaultValueAnnotation"]) {
            results.push(...this.defaultValueAnnotation.doModelValidation());
        }
        if (this["defaultValueAttachment"]) {
            results.push(...this.defaultValueAttachment.doModelValidation());
        }
        if (this["defaultValueCodeableConcept"]) {
            results.push(...this.defaultValueCodeableConcept.doModelValidation());
        }
        if (this["defaultValueCoding"]) {
            results.push(...this.defaultValueCoding.doModelValidation());
        }
        if (this["defaultValueContactPoint"]) {
            results.push(...this.defaultValueContactPoint.doModelValidation());
        }
        if (this["defaultValueCount"]) {
            results.push(...this.defaultValueCount.doModelValidation());
        }
        if (this["defaultValueDistance"]) {
            results.push(...this.defaultValueDistance.doModelValidation());
        }
        if (this["defaultValueDuration"]) {
            results.push(...this.defaultValueDuration.doModelValidation());
        }
        if (this["defaultValueHumanName"]) {
            results.push(...this.defaultValueHumanName.doModelValidation());
        }
        if (this["defaultValueIdentifier"]) {
            results.push(...this.defaultValueIdentifier.doModelValidation());
        }
        if (this["defaultValueMoney"]) {
            results.push(...this.defaultValueMoney.doModelValidation());
        }
        if (this["defaultValuePeriod"]) {
            results.push(...this.defaultValuePeriod.doModelValidation());
        }
        if (this["defaultValueQuantity"]) {
            results.push(...this.defaultValueQuantity.doModelValidation());
        }
        if (this["defaultValueRange"]) {
            results.push(...this.defaultValueRange.doModelValidation());
        }
        if (this["defaultValueRatio"]) {
            results.push(...this.defaultValueRatio.doModelValidation());
        }
        if (this["defaultValueReference"]) {
            results.push(...this.defaultValueReference.doModelValidation());
        }
        if (this["defaultValueSampledData"]) {
            results.push(...this.defaultValueSampledData.doModelValidation());
        }
        if (this["defaultValueSignature"]) {
            results.push(...this.defaultValueSignature.doModelValidation());
        }
        if (this["defaultValueTiming"]) {
            results.push(...this.defaultValueTiming.doModelValidation());
        }
        if (this["defaultValueContactDetail"]) {
            results.push(...this.defaultValueContactDetail.doModelValidation());
        }
        if (this["defaultValueContributor"]) {
            results.push(...this.defaultValueContributor.doModelValidation());
        }
        if (this["defaultValueDataRequirement"]) {
            results.push(...this.defaultValueDataRequirement.doModelValidation());
        }
        if (this["defaultValueExpression"]) {
            results.push(...this.defaultValueExpression.doModelValidation());
        }
        if (this["defaultValueParameterDefinition"]) {
            results.push(...this.defaultValueParameterDefinition.doModelValidation());
        }
        if (this["defaultValueRelatedArtifact"]) {
            results.push(...this.defaultValueRelatedArtifact.doModelValidation());
        }
        if (this["defaultValueTriggerDefinition"]) {
            results.push(...this.defaultValueTriggerDefinition.doModelValidation());
        }
        if (this["defaultValueUsageContext"]) {
            results.push(...this.defaultValueUsageContext.doModelValidation());
        }
        if (this["defaultValueDosage"]) {
            results.push(...this.defaultValueDosage.doModelValidation());
        }
        if (this["defaultValueMeta"]) {
            results.push(...this.defaultValueMeta.doModelValidation());
        }
        if (this["_meaningWhenMissing"]) {
            results.push(...this._meaningWhenMissing.doModelValidation());
        }
        if (this["_orderMeaning"]) {
            results.push(...this._orderMeaning.doModelValidation());
        }
        if (this["_fixedBase64Binary"]) {
            results.push(...this._fixedBase64Binary.doModelValidation());
        }
        if (this["_fixedBoolean"]) {
            results.push(...this._fixedBoolean.doModelValidation());
        }
        if (this["_fixedCanonical"]) {
            results.push(...this._fixedCanonical.doModelValidation());
        }
        if (this["_fixedCode"]) {
            results.push(...this._fixedCode.doModelValidation());
        }
        if (this["_fixedDate"]) {
            results.push(...this._fixedDate.doModelValidation());
        }
        if (this["_fixedDateTime"]) {
            results.push(...this._fixedDateTime.doModelValidation());
        }
        if (this["_fixedDecimal"]) {
            results.push(...this._fixedDecimal.doModelValidation());
        }
        if (this["_fixedId"]) {
            results.push(...this._fixedId.doModelValidation());
        }
        if (this["_fixedInstant"]) {
            results.push(...this._fixedInstant.doModelValidation());
        }
        if (this["_fixedInteger"]) {
            results.push(...this._fixedInteger.doModelValidation());
        }
        if (this["_fixedMarkdown"]) {
            results.push(...this._fixedMarkdown.doModelValidation());
        }
        if (this["_fixedOid"]) {
            results.push(...this._fixedOid.doModelValidation());
        }
        if (this["_fixedPositiveInt"]) {
            results.push(...this._fixedPositiveInt.doModelValidation());
        }
        if (this["_fixedString"]) {
            results.push(...this._fixedString.doModelValidation());
        }
        if (this["_fixedTime"]) {
            results.push(...this._fixedTime.doModelValidation());
        }
        if (this["_fixedUnsignedInt"]) {
            results.push(...this._fixedUnsignedInt.doModelValidation());
        }
        if (this["_fixedUri"]) {
            results.push(...this._fixedUri.doModelValidation());
        }
        if (this["_fixedUrl"]) {
            results.push(...this._fixedUrl.doModelValidation());
        }
        if (this["_fixedUuid"]) {
            results.push(...this._fixedUuid.doModelValidation());
        }
        if (this["fixedAddress"]) {
            results.push(...this.fixedAddress.doModelValidation());
        }
        if (this["fixedAge"]) {
            results.push(...this.fixedAge.doModelValidation());
        }
        if (this["fixedAnnotation"]) {
            results.push(...this.fixedAnnotation.doModelValidation());
        }
        if (this["fixedAttachment"]) {
            results.push(...this.fixedAttachment.doModelValidation());
        }
        if (this["fixedCodeableConcept"]) {
            results.push(...this.fixedCodeableConcept.doModelValidation());
        }
        if (this["fixedCoding"]) {
            results.push(...this.fixedCoding.doModelValidation());
        }
        if (this["fixedContactPoint"]) {
            results.push(...this.fixedContactPoint.doModelValidation());
        }
        if (this["fixedCount"]) {
            results.push(...this.fixedCount.doModelValidation());
        }
        if (this["fixedDistance"]) {
            results.push(...this.fixedDistance.doModelValidation());
        }
        if (this["fixedDuration"]) {
            results.push(...this.fixedDuration.doModelValidation());
        }
        if (this["fixedHumanName"]) {
            results.push(...this.fixedHumanName.doModelValidation());
        }
        if (this["fixedIdentifier"]) {
            results.push(...this.fixedIdentifier.doModelValidation());
        }
        if (this["fixedMoney"]) {
            results.push(...this.fixedMoney.doModelValidation());
        }
        if (this["fixedPeriod"]) {
            results.push(...this.fixedPeriod.doModelValidation());
        }
        if (this["fixedQuantity"]) {
            results.push(...this.fixedQuantity.doModelValidation());
        }
        if (this["fixedRange"]) {
            results.push(...this.fixedRange.doModelValidation());
        }
        if (this["fixedRatio"]) {
            results.push(...this.fixedRatio.doModelValidation());
        }
        if (this["fixedReference"]) {
            results.push(...this.fixedReference.doModelValidation());
        }
        if (this["fixedSampledData"]) {
            results.push(...this.fixedSampledData.doModelValidation());
        }
        if (this["fixedSignature"]) {
            results.push(...this.fixedSignature.doModelValidation());
        }
        if (this["fixedTiming"]) {
            results.push(...this.fixedTiming.doModelValidation());
        }
        if (this["fixedContactDetail"]) {
            results.push(...this.fixedContactDetail.doModelValidation());
        }
        if (this["fixedContributor"]) {
            results.push(...this.fixedContributor.doModelValidation());
        }
        if (this["fixedDataRequirement"]) {
            results.push(...this.fixedDataRequirement.doModelValidation());
        }
        if (this["fixedExpression"]) {
            results.push(...this.fixedExpression.doModelValidation());
        }
        if (this["fixedParameterDefinition"]) {
            results.push(...this.fixedParameterDefinition.doModelValidation());
        }
        if (this["fixedRelatedArtifact"]) {
            results.push(...this.fixedRelatedArtifact.doModelValidation());
        }
        if (this["fixedTriggerDefinition"]) {
            results.push(...this.fixedTriggerDefinition.doModelValidation());
        }
        if (this["fixedUsageContext"]) {
            results.push(...this.fixedUsageContext.doModelValidation());
        }
        if (this["fixedDosage"]) {
            results.push(...this.fixedDosage.doModelValidation());
        }
        if (this["fixedMeta"]) {
            results.push(...this.fixedMeta.doModelValidation());
        }
        if (this["_patternBase64Binary"]) {
            results.push(...this._patternBase64Binary.doModelValidation());
        }
        if (this["_patternBoolean"]) {
            results.push(...this._patternBoolean.doModelValidation());
        }
        if (this["_patternCanonical"]) {
            results.push(...this._patternCanonical.doModelValidation());
        }
        if (this["_patternCode"]) {
            results.push(...this._patternCode.doModelValidation());
        }
        if (this["_patternDate"]) {
            results.push(...this._patternDate.doModelValidation());
        }
        if (this["_patternDateTime"]) {
            results.push(...this._patternDateTime.doModelValidation());
        }
        if (this["_patternDecimal"]) {
            results.push(...this._patternDecimal.doModelValidation());
        }
        if (this["_patternId"]) {
            results.push(...this._patternId.doModelValidation());
        }
        if (this["_patternInstant"]) {
            results.push(...this._patternInstant.doModelValidation());
        }
        if (this["_patternInteger"]) {
            results.push(...this._patternInteger.doModelValidation());
        }
        if (this["_patternMarkdown"]) {
            results.push(...this._patternMarkdown.doModelValidation());
        }
        if (this["_patternOid"]) {
            results.push(...this._patternOid.doModelValidation());
        }
        if (this["_patternPositiveInt"]) {
            results.push(...this._patternPositiveInt.doModelValidation());
        }
        if (this["_patternString"]) {
            results.push(...this._patternString.doModelValidation());
        }
        if (this["_patternTime"]) {
            results.push(...this._patternTime.doModelValidation());
        }
        if (this["_patternUnsignedInt"]) {
            results.push(...this._patternUnsignedInt.doModelValidation());
        }
        if (this["_patternUri"]) {
            results.push(...this._patternUri.doModelValidation());
        }
        if (this["_patternUrl"]) {
            results.push(...this._patternUrl.doModelValidation());
        }
        if (this["_patternUuid"]) {
            results.push(...this._patternUuid.doModelValidation());
        }
        if (this["patternAddress"]) {
            results.push(...this.patternAddress.doModelValidation());
        }
        if (this["patternAge"]) {
            results.push(...this.patternAge.doModelValidation());
        }
        if (this["patternAnnotation"]) {
            results.push(...this.patternAnnotation.doModelValidation());
        }
        if (this["patternAttachment"]) {
            results.push(...this.patternAttachment.doModelValidation());
        }
        if (this["patternCodeableConcept"]) {
            results.push(...this.patternCodeableConcept.doModelValidation());
        }
        if (this["patternCoding"]) {
            results.push(...this.patternCoding.doModelValidation());
        }
        if (this["patternContactPoint"]) {
            results.push(...this.patternContactPoint.doModelValidation());
        }
        if (this["patternCount"]) {
            results.push(...this.patternCount.doModelValidation());
        }
        if (this["patternDistance"]) {
            results.push(...this.patternDistance.doModelValidation());
        }
        if (this["patternDuration"]) {
            results.push(...this.patternDuration.doModelValidation());
        }
        if (this["patternHumanName"]) {
            results.push(...this.patternHumanName.doModelValidation());
        }
        if (this["patternIdentifier"]) {
            results.push(...this.patternIdentifier.doModelValidation());
        }
        if (this["patternMoney"]) {
            results.push(...this.patternMoney.doModelValidation());
        }
        if (this["patternPeriod"]) {
            results.push(...this.patternPeriod.doModelValidation());
        }
        if (this["patternQuantity"]) {
            results.push(...this.patternQuantity.doModelValidation());
        }
        if (this["patternRange"]) {
            results.push(...this.patternRange.doModelValidation());
        }
        if (this["patternRatio"]) {
            results.push(...this.patternRatio.doModelValidation());
        }
        if (this["patternReference"]) {
            results.push(...this.patternReference.doModelValidation());
        }
        if (this["patternSampledData"]) {
            results.push(...this.patternSampledData.doModelValidation());
        }
        if (this["patternSignature"]) {
            results.push(...this.patternSignature.doModelValidation());
        }
        if (this["patternTiming"]) {
            results.push(...this.patternTiming.doModelValidation());
        }
        if (this["patternContactDetail"]) {
            results.push(...this.patternContactDetail.doModelValidation());
        }
        if (this["patternContributor"]) {
            results.push(...this.patternContributor.doModelValidation());
        }
        if (this["patternDataRequirement"]) {
            results.push(...this.patternDataRequirement.doModelValidation());
        }
        if (this["patternExpression"]) {
            results.push(...this.patternExpression.doModelValidation());
        }
        if (this["patternParameterDefinition"]) {
            results.push(...this.patternParameterDefinition.doModelValidation());
        }
        if (this["patternRelatedArtifact"]) {
            results.push(...this.patternRelatedArtifact.doModelValidation());
        }
        if (this["patternTriggerDefinition"]) {
            results.push(...this.patternTriggerDefinition.doModelValidation());
        }
        if (this["patternUsageContext"]) {
            results.push(...this.patternUsageContext.doModelValidation());
        }
        if (this["patternDosage"]) {
            results.push(...this.patternDosage.doModelValidation());
        }
        if (this["patternMeta"]) {
            results.push(...this.patternMeta.doModelValidation());
        }
        if (this["example"]) {
            this.example.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_minValueDate"]) {
            results.push(...this._minValueDate.doModelValidation());
        }
        if (this["_minValueDateTime"]) {
            results.push(...this._minValueDateTime.doModelValidation());
        }
        if (this["_minValueInstant"]) {
            results.push(...this._minValueInstant.doModelValidation());
        }
        if (this["_minValueTime"]) {
            results.push(...this._minValueTime.doModelValidation());
        }
        if (this["_minValueDecimal"]) {
            results.push(...this._minValueDecimal.doModelValidation());
        }
        if (this["_minValueInteger"]) {
            results.push(...this._minValueInteger.doModelValidation());
        }
        if (this["_minValuePositiveInt"]) {
            results.push(...this._minValuePositiveInt.doModelValidation());
        }
        if (this["_minValueUnsignedInt"]) {
            results.push(...this._minValueUnsignedInt.doModelValidation());
        }
        if (this["minValueQuantity"]) {
            results.push(...this.minValueQuantity.doModelValidation());
        }
        if (this["_maxValueDate"]) {
            results.push(...this._maxValueDate.doModelValidation());
        }
        if (this["_maxValueDateTime"]) {
            results.push(...this._maxValueDateTime.doModelValidation());
        }
        if (this["_maxValueInstant"]) {
            results.push(...this._maxValueInstant.doModelValidation());
        }
        if (this["_maxValueTime"]) {
            results.push(...this._maxValueTime.doModelValidation());
        }
        if (this["_maxValueDecimal"]) {
            results.push(...this._maxValueDecimal.doModelValidation());
        }
        if (this["_maxValueInteger"]) {
            results.push(...this._maxValueInteger.doModelValidation());
        }
        if (this["_maxValuePositiveInt"]) {
            results.push(...this._maxValuePositiveInt.doModelValidation());
        }
        if (this["_maxValueUnsignedInt"]) {
            results.push(...this._maxValueUnsignedInt.doModelValidation());
        }
        if (this["maxValueQuantity"]) {
            results.push(...this.maxValueQuantity.doModelValidation());
        }
        if (this["_maxLength"]) {
            results.push(...this._maxLength.doModelValidation());
        }
        if (this["_condition"]) {
            this._condition.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["constraint"]) {
            this.constraint.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_mustSupport"]) {
            results.push(...this._mustSupport.doModelValidation());
        }
        if (this["_isModifier"]) {
            results.push(...this._isModifier.doModelValidation());
        }
        if (this["_isModifierReason"]) {
            results.push(...this._isModifierReason.doModelValidation());
        }
        if (this["_isSummary"]) {
            results.push(...this._isSummary.doModelValidation());
        }
        if (this["binding"]) {
            results.push(...this.binding.doModelValidation());
        }
        if (this["mapping"]) {
            this.mapping.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=ElementDefinition.js.map