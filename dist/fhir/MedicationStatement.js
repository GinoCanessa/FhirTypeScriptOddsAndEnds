// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicationStatement
import * as fhir from '../fhir.js';
import { MedicationStatementStatusValueSet } from '../fhirValueSets/MedicationStatementStatusValueSet.js';
import { ReasonMedicationStatusCodesValueSet } from '../fhirValueSets/ReasonMedicationStatusCodesValueSet.js';
import { MedicationStatementCategoryValueSet } from '../fhirValueSets/MedicationStatementCategoryValueSet.js';
import { MedicationCodesValueSet } from '../fhirValueSets/MedicationCodesValueSet.js';
import { ConditionCodeValueSet } from '../fhirValueSets/ConditionCodeValueSet.js';
/**
 * A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from sources such as the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains.
 * The primary difference between a medication statement and a medication administration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medication statement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the medication statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.
 */
export class MedicationStatement extends fhir.DomainResource {
    /**
     * Default constructor for MedicationStatement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'MedicationStatement';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['statusReason']) {
            this.statusReason = source.statusReason.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['medicationCodeableConcept']) {
            this.medicationCodeableConcept = new fhir.CodeableConcept(source.medicationCodeableConcept);
        }
        if (source['medicationReference']) {
            this.medicationReference = new fhir.Reference(source.medicationReference);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context);
        }
        if (source['effectiveDateTime']) {
            this.effectiveDateTime = source.effectiveDateTime;
        }
        if (source['_effectiveDateTime']) {
            this._effectiveDateTime = new fhir.FhirElement(source._effectiveDateTime);
        }
        if (source['effectivePeriod']) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source['dateAsserted']) {
            this.dateAsserted = source.dateAsserted;
        }
        if (source['_dateAsserted']) {
            this._dateAsserted = new fhir.FhirElement(source._dateAsserted);
        }
        if (source['informationSource']) {
            this.informationSource = new fhir.Reference(source.informationSource);
        }
        if (source['derivedFrom']) {
            this.derivedFrom = source.derivedFrom.map((x) => new fhir.Reference(x));
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['dosage']) {
            this.dosage = source.dosage.map((x) => new fhir.Dosage(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return MedicationStatementStatusValueSet;
    }
    /**
     * Example-bound Value Set for statusReason
     */
    statusReasonExampleValueSet() {
        return ReasonMedicationStatusCodesValueSet;
    }
    /**
     * Preferred-bound Value Set for category
     */
    categoryPreferredValueSet() {
        return MedicationStatementCategoryValueSet;
    }
    /**
     * Example-bound Value Set for medicationCodeableConcept
     */
    medicationCodeableConceptExampleValueSet() {
        return MedicationCodesValueSet;
    }
    /**
     * Example-bound Value Set for medicationReference
     */
    medicationReferenceExampleValueSet() {
        return MedicationCodesValueSet;
    }
    /**
     * Example-bound Value Set for reasonCode
     */
    reasonCodeExampleValueSet() {
        return ConditionCodeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: MedicationStatement.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["partOf"]) {
            this.partOf.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: MedicationStatement.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["statusReason"]) {
            this.statusReason.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["category"]) {
            results.push(...this.category.doModelValidation());
        }
        if (this["medicationCodeableConcept"]) {
            results.push(...this.medicationCodeableConcept.doModelValidation());
        }
        if (this["medicationReference"]) {
            results.push(...this.medicationReference.doModelValidation());
        }
        if (!this["subject"]) {
            results.push(["subject", 'Missing required element: MedicationStatement.subject']);
        }
        if (this["subject"]) {
            results.push(...this.subject.doModelValidation());
        }
        if (this["context"]) {
            results.push(...this.context.doModelValidation());
        }
        if (this["_effectiveDateTime"]) {
            results.push(...this._effectiveDateTime.doModelValidation());
        }
        if (this["effectivePeriod"]) {
            results.push(...this.effectivePeriod.doModelValidation());
        }
        if (this["_dateAsserted"]) {
            results.push(...this._dateAsserted.doModelValidation());
        }
        if (this["informationSource"]) {
            results.push(...this.informationSource.doModelValidation());
        }
        if (this["derivedFrom"]) {
            this.derivedFrom.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["dosage"]) {
            this.dosage.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=MedicationStatement.js.map