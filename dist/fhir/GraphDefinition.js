// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: GraphDefinition
import * as fhir from '../fhir.js';
import { GraphCompartmentUseValueSet } from '../fhirValueSets/GraphCompartmentUseValueSet.js';
import { CompartmentTypeValueSet } from '../fhirValueSets/CompartmentTypeValueSet.js';
import { GraphCompartmentRuleValueSet } from '../fhirValueSets/GraphCompartmentRuleValueSet.js';
import { ResourceTypesValueSet } from '../fhirValueSets/ResourceTypesValueSet.js';
import { PublicationStatusValueSet } from '../fhirValueSets/PublicationStatusValueSet.js';
/**
 * Compartment Consistency Rules.
 */
export class GraphDefinitionLinkTargetCompartment extends fhir.BackboneElement {
    /**
     * Default constructor for GraphDefinitionLinkTargetCompartment - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['use']) {
            this.use = source.use;
        }
        else {
            this.use = null;
        }
        if (source['_use']) {
            this._use = new fhir.FhirElement(source._use);
        }
        if (source['code']) {
            this.code = source.code;
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source['rule']) {
            this.rule = source.rule;
        }
        else {
            this.rule = null;
        }
        if (source['_rule']) {
            this._rule = new fhir.FhirElement(source._rule);
        }
        if (source['expression']) {
            this.expression = source.expression;
        }
        if (source['_expression']) {
            this._expression = new fhir.FhirElement(source._expression);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
    }
    /**
     * Required-bound Value Set for use
     */
    static useRequiredValueSet() {
        return GraphCompartmentUseValueSet;
    }
    /**
     * Required-bound Value Set for code
     */
    static codeRequiredValueSet() {
        return CompartmentTypeValueSet;
    }
    /**
     * Required-bound Value Set for rule
     */
    static ruleRequiredValueSet() {
        return GraphCompartmentRuleValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["use"]) {
            results.push(["use", 'Missing required element: GraphDefinition.link.target.compartment.use']);
        }
        if (this["_use"]) {
            results.push(...this._use.doModelValidation());
        }
        if (!this["code"]) {
            results.push(["code", 'Missing required element: GraphDefinition.link.target.compartment.code']);
        }
        if (this["_code"]) {
            results.push(...this._code.doModelValidation());
        }
        if (!this["rule"]) {
            results.push(["rule", 'Missing required element: GraphDefinition.link.target.compartment.rule']);
        }
        if (this["_rule"]) {
            results.push(...this._rule.doModelValidation());
        }
        if (this["_expression"]) {
            results.push(...this._expression.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        return results;
    }
}
/**
 * Potential target for the link.
 */
export class GraphDefinitionLinkTarget extends fhir.BackboneElement {
    /**
     * Default constructor for GraphDefinitionLinkTarget - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source['params']) {
            this.params = source.params;
        }
        if (source['_params']) {
            this._params = new fhir.FhirElement(source._params);
        }
        if (source['profile']) {
            this.profile = source.profile;
        }
        if (source['_profile']) {
            this._profile = new fhir.FhirElement(source._profile);
        }
        if (source['compartment']) {
            this.compartment = source.compartment.map((x) => new fhir.GraphDefinitionLinkTargetCompartment(x));
        }
        if (source['link']) {
            this.link = source.link.map((x) => new fhir.GraphDefinitionLink(x));
        }
    }
    /**
     * Required-bound Value Set for type
     */
    static typeRequiredValueSet() {
        return ResourceTypesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["type"]) {
            results.push(["type", 'Missing required element: GraphDefinition.link.target.type']);
        }
        if (this["_type"]) {
            results.push(...this._type.doModelValidation());
        }
        if (this["_params"]) {
            results.push(...this._params.doModelValidation());
        }
        if (this["_profile"]) {
            results.push(...this._profile.doModelValidation());
        }
        if (this["compartment"]) {
            this.compartment.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["link"]) {
            this.link.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Links this graph makes rules about.
 */
export class GraphDefinitionLink extends fhir.BackboneElement {
    /**
     * Default constructor for GraphDefinitionLink - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['path']) {
            this.path = source.path;
        }
        if (source['_path']) {
            this._path = new fhir.FhirElement(source._path);
        }
        if (source['sliceName']) {
            this.sliceName = source.sliceName;
        }
        if (source['_sliceName']) {
            this._sliceName = new fhir.FhirElement(source._sliceName);
        }
        if (source['min']) {
            this.min = source.min;
        }
        if (source['_min']) {
            this._min = new fhir.FhirElement(source._min);
        }
        if (source['max']) {
            this.max = source.max;
        }
        if (source['_max']) {
            this._max = new fhir.FhirElement(source._max);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['target']) {
            this.target = source.target.map((x) => new fhir.GraphDefinitionLinkTarget(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_path"]) {
            results.push(...this._path.doModelValidation());
        }
        if (this["_sliceName"]) {
            results.push(...this._sliceName.doModelValidation());
        }
        if (this["_min"]) {
            results.push(...this._min.doModelValidation());
        }
        if (this["_max"]) {
            results.push(...this._max.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["target"]) {
            this.target.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.
 */
export class GraphDefinition extends fhir.DomainResource {
    /**
     * Default constructor for GraphDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'GraphDefinition';
        if (source['url']) {
            this.url = source.url;
        }
        if (source['_url']) {
            this._url = new fhir.FhirElement(source._url);
        }
        if (source['version']) {
            this.version = source.version;
        }
        if (source['_version']) {
            this._version = new fhir.FhirElement(source._version);
        }
        if (source['name']) {
            this.name = source.name;
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['experimental']) {
            this.experimental = source.experimental;
        }
        if (source['_experimental']) {
            this._experimental = new fhir.FhirElement(source._experimental);
        }
        if (source['date']) {
            this.date = source.date;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['publisher']) {
            this.publisher = source.publisher;
        }
        if (source['_publisher']) {
            this._publisher = new fhir.FhirElement(source._publisher);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['purpose']) {
            this.purpose = source.purpose;
        }
        if (source['_purpose']) {
            this._purpose = new fhir.FhirElement(source._purpose);
        }
        if (source['start']) {
            this.start = source.start;
        }
        else {
            this.start = null;
        }
        if (source['_start']) {
            this._start = new fhir.FhirElement(source._start);
        }
        if (source['profile']) {
            this.profile = source.profile;
        }
        if (source['_profile']) {
            this._profile = new fhir.FhirElement(source._profile);
        }
        if (source['link']) {
            this.link = source.link.map((x) => new fhir.GraphDefinitionLink(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return PublicationStatusValueSet;
    }
    /**
     * Required-bound Value Set for start
     */
    static startRequiredValueSet() {
        return ResourceTypesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: GraphDefinition.resourceType']);
        }
        if (this["_url"]) {
            results.push(...this._url.doModelValidation());
        }
        if (this["_version"]) {
            results.push(...this._version.doModelValidation());
        }
        if (!this["name"]) {
            results.push(["name", 'Missing required element: GraphDefinition.name']);
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: GraphDefinition.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["_experimental"]) {
            results.push(...this._experimental.doModelValidation());
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["_publisher"]) {
            results.push(...this._publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_purpose"]) {
            results.push(...this._purpose.doModelValidation());
        }
        if (!this["start"]) {
            results.push(["start", 'Missing required element: GraphDefinition.start']);
        }
        if (this["_start"]) {
            results.push(...this._start.doModelValidation());
        }
        if (this["_profile"]) {
            results.push(...this._profile.doModelValidation());
        }
        if (this["link"]) {
            this.link.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=GraphDefinition.js.map