// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Identifies all people and organizations who are expected to be involved in the care team.
 */
export class CareTeamParticipant extends fhir.BackboneElement {
    /**
     * Default constructor for CareTeamParticipant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["member"]) {
            this.member = new fhir.Reference(source.member);
        }
        if (source["onBehalfOf"]) {
            this.onBehalfOf = new fhir.Reference(source.onBehalfOf);
        }
        if (source["period"]) {
            this.period = new fhir.Period(source.period);
        }
        if (source["role"]) {
            this.role = source.role.map((x) => new fhir.CodeableConcept(x));
        }
    }
    /**
     * Check if the current CareTeamParticipant contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a CareTeamParticipant from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new CareTeamParticipant(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `CareTeamParticipant is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care for a patient.
 */
export class CareTeam extends fhir.DomainResource {
    /**
     * Default constructor for CareTeam - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'CareTeam';
        if (source["category"]) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["encounter"]) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["managingOrganization"]) {
            this.managingOrganization = source.managingOrganization.map((x) => new fhir.Reference(x));
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["note"]) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source["participant"]) {
            this.participant = source.participant.map((x) => new fhir.CareTeamParticipant(x));
        }
        if (source["period"]) {
            this.period = new fhir.Period(source.period);
        }
        if (source["reasonCode"]) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["reasonReference"]) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source["status"]) {
            this.status = source.status;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["subject"]) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source["telecom"]) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
    }
    /**
     * Check if the current CareTeam contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a CareTeam from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new CareTeam(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `CareTeam is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the CareTeam.status field
 */
export var CareTeamStatusEnum;
(function (CareTeamStatusEnum) {
    CareTeamStatusEnum["PROPOSED"] = "proposed";
    CareTeamStatusEnum["ACTIVE"] = "active";
    CareTeamStatusEnum["SUSPENDED"] = "suspended";
    CareTeamStatusEnum["INACTIVE"] = "inactive";
    CareTeamStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(CareTeamStatusEnum || (CareTeamStatusEnum = {}));
//# sourceMappingURL=CareTeam.js.map