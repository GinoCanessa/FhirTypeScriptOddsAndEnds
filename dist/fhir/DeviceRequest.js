// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Specific parameters for the ordered item.  For example, the prism value for lenses.
 */
export class DeviceRequestParameter extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceRequestParameter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source["valueCodeableConcept"]) {
            this.valueCodeableConcept = new fhir.CodeableConcept(source.valueCodeableConcept);
        }
        if (source["valueQuantity"]) {
            this.valueQuantity = new fhir.Quantity(source.valueQuantity);
        }
        if (source["valueRange"]) {
            this.valueRange = new fhir.Range(source.valueRange);
        }
        if (source["valueBoolean"]) {
            this.valueBoolean = source.valueBoolean;
        }
        if (source["_valueBoolean"]) {
            this._valueBoolean = new fhir.FhirElement(source._valueBoolean);
        }
    }
    /**
     * Check if the current DeviceRequestParameter contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a DeviceRequestParameter from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new DeviceRequestParameter(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `DeviceRequestParameter is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.
 */
export class DeviceRequest extends fhir.DomainResource {
    /**
     * Default constructor for DeviceRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'DeviceRequest';
        if (source["authoredOn"]) {
            this.authoredOn = source.authoredOn;
        }
        if (source["_authoredOn"]) {
            this._authoredOn = new fhir.FhirElement(source._authoredOn);
        }
        if (source["basedOn"]) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source["codeReference"]) {
            this.codeReference = new fhir.Reference(source.codeReference);
        }
        if (source["codeCodeableConcept"]) {
            this.codeCodeableConcept = new fhir.CodeableConcept(source.codeCodeableConcept);
        }
        if (source["encounter"]) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source["groupIdentifier"]) {
            this.groupIdentifier = new fhir.Identifier(source.groupIdentifier);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["instantiatesCanonical"]) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => (x));
        }
        if (source["_instantiatesCanonical"]) {
            this._instantiatesCanonical = source._instantiatesCanonical.map((x) => new fhir.FhirElement(x));
        }
        if (source["instantiatesUri"]) {
            this.instantiatesUri = source.instantiatesUri.map((x) => (x));
        }
        if (source["_instantiatesUri"]) {
            this._instantiatesUri = source._instantiatesUri.map((x) => new fhir.FhirElement(x));
        }
        if (source["insurance"]) {
            this.insurance = source.insurance.map((x) => new fhir.Reference(x));
        }
        this.intent = null;
        if (source["intent"]) {
            this.intent = source.intent;
        }
        if (this.intent === undefined) {
            this.intent = null;
        }
        if (source["_intent"]) {
            this._intent = new fhir.FhirElement(source._intent);
        }
        if (source["note"]) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source["occurrenceDateTime"]) {
            this.occurrenceDateTime = source.occurrenceDateTime;
        }
        if (source["_occurrenceDateTime"]) {
            this._occurrenceDateTime = new fhir.FhirElement(source._occurrenceDateTime);
        }
        if (source["occurrencePeriod"]) {
            this.occurrencePeriod = new fhir.Period(source.occurrencePeriod);
        }
        if (source["occurrenceTiming"]) {
            this.occurrenceTiming = new fhir.Timing(source.occurrenceTiming);
        }
        if (source["parameter"]) {
            this.parameter = source.parameter.map((x) => new fhir.DeviceRequestParameter(x));
        }
        if (source["performer"]) {
            this.performer = new fhir.Reference(source.performer);
        }
        if (source["performerType"]) {
            this.performerType = new fhir.CodeableConcept(source.performerType);
        }
        if (source["priority"]) {
            this.priority = source.priority;
        }
        if (source["_priority"]) {
            this._priority = new fhir.FhirElement(source._priority);
        }
        if (source["priorRequest"]) {
            this.priorRequest = source.priorRequest.map((x) => new fhir.Reference(x));
        }
        if (source["reasonCode"]) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["reasonReference"]) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source["relevantHistory"]) {
            this.relevantHistory = source.relevantHistory.map((x) => new fhir.Reference(x));
        }
        if (source["requester"]) {
            this.requester = new fhir.Reference(source.requester);
        }
        if (source["status"]) {
            this.status = source.status;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        this.subject = null;
        if (source["subject"]) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (this.subject === undefined) {
            this.subject = null;
        }
        if (source["supportingInfo"]) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Check if the current DeviceRequest contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["intent"] === undefined) {
            missingElements.push("intent");
        }
        if (this["subject"] === undefined) {
            missingElements.push("subject");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a DeviceRequest from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new DeviceRequest(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `DeviceRequest is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the DeviceRequest.intent field
 */
export var DeviceRequestIntentEnum;
(function (DeviceRequestIntentEnum) {
    DeviceRequestIntentEnum["PROPOSAL"] = "proposal";
    DeviceRequestIntentEnum["PLAN"] = "plan";
    DeviceRequestIntentEnum["DIRECTIVE"] = "directive";
    DeviceRequestIntentEnum["ORDER"] = "order";
    DeviceRequestIntentEnum["ORIGINAL_ORDER"] = "original-order";
    DeviceRequestIntentEnum["REFLEX_ORDER"] = "reflex-order";
    DeviceRequestIntentEnum["FILLER_ORDER"] = "filler-order";
    DeviceRequestIntentEnum["INSTANCE_ORDER"] = "instance-order";
    DeviceRequestIntentEnum["OPTION"] = "option";
})(DeviceRequestIntentEnum || (DeviceRequestIntentEnum = {}));
/**
 * Code Values for the DeviceRequest.priority field
 */
export var DeviceRequestPriorityEnum;
(function (DeviceRequestPriorityEnum) {
    DeviceRequestPriorityEnum["ROUTINE"] = "routine";
    DeviceRequestPriorityEnum["URGENT"] = "urgent";
    DeviceRequestPriorityEnum["ASAP"] = "asap";
    DeviceRequestPriorityEnum["STAT"] = "stat";
})(DeviceRequestPriorityEnum || (DeviceRequestPriorityEnum = {}));
/**
 * Code Values for the DeviceRequest.status field
 */
export var DeviceRequestStatusEnum;
(function (DeviceRequestStatusEnum) {
    DeviceRequestStatusEnum["DRAFT"] = "draft";
    DeviceRequestStatusEnum["ACTIVE"] = "active";
    DeviceRequestStatusEnum["ON_HOLD"] = "on-hold";
    DeviceRequestStatusEnum["REVOKED"] = "revoked";
    DeviceRequestStatusEnum["COMPLETED"] = "completed";
    DeviceRequestStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    DeviceRequestStatusEnum["UNKNOWN"] = "unknown";
})(DeviceRequestStatusEnum || (DeviceRequestStatusEnum = {}));
//# sourceMappingURL=DeviceRequest.js.map