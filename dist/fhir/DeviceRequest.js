// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: DeviceRequest
import * as fhir from '../fhir.js';
import { RequestStatusValueSet } from '../fhirValueSets/RequestStatusValueSet.js';
import { RequestIntentValueSet } from '../fhirValueSets/RequestIntentValueSet.js';
import { RequestPriorityValueSet } from '../fhirValueSets/RequestPriorityValueSet.js';
import { DeviceKindValueSet } from '../fhirValueSets/DeviceKindValueSet.js';
import { ParticipantRoleValueSet } from '../fhirValueSets/ParticipantRoleValueSet.js';
import { ConditionCodeValueSet } from '../fhirValueSets/ConditionCodeValueSet.js';
/**
 * Specific parameters for the ordered item.  For example, the prism value for lenses.
 */
export class DeviceRequestParameter extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceRequestParameter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['valueCodeableConcept']) {
            this.valueCodeableConcept = new fhir.CodeableConcept(source.valueCodeableConcept);
        }
        if (source['valueQuantity']) {
            this.valueQuantity = new fhir.Quantity(source.valueQuantity);
        }
        if (source['valueRange']) {
            this.valueRange = new fhir.Range(source.valueRange);
        }
        if (source['valueBoolean']) {
            this.valueBoolean = source.valueBoolean;
        }
        if (source['_valueBoolean']) {
            this._valueBoolean = new fhir.FhirElement(source._valueBoolean);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["valueCodeableConcept"]) {
            results.push(...this.valueCodeableConcept.doModelValidation());
        }
        if (this["valueQuantity"]) {
            results.push(...this.valueQuantity.doModelValidation());
        }
        if (this["valueRange"]) {
            results.push(...this.valueRange.doModelValidation());
        }
        if (this["_valueBoolean"]) {
            results.push(...this._valueBoolean.doModelValidation());
        }
        return results;
    }
}
/**
 * Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.
 */
export class DeviceRequest extends fhir.DomainResource {
    /**
     * Default constructor for DeviceRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'DeviceRequest';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['instantiatesCanonical']) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => (x));
        }
        if (source['_instantiatesCanonical']) {
            this._instantiatesCanonical = source._instantiatesCanonical.map((x) => new fhir.FhirElement(x));
        }
        if (source['instantiatesUri']) {
            this.instantiatesUri = source.instantiatesUri.map((x) => (x));
        }
        if (source['_instantiatesUri']) {
            this._instantiatesUri = source._instantiatesUri.map((x) => new fhir.FhirElement(x));
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source['priorRequest']) {
            this.priorRequest = source.priorRequest.map((x) => new fhir.Reference(x));
        }
        if (source['groupIdentifier']) {
            this.groupIdentifier = new fhir.Identifier(source.groupIdentifier);
        }
        if (source['status']) {
            this.status = source.status;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['intent']) {
            this.intent = source.intent;
        }
        else {
            this.intent = null;
        }
        if (source['_intent']) {
            this._intent = new fhir.FhirElement(source._intent);
        }
        if (source['priority']) {
            this.priority = source.priority;
        }
        if (source['_priority']) {
            this._priority = new fhir.FhirElement(source._priority);
        }
        if (source['codeReference']) {
            this.codeReference = new fhir.Reference(source.codeReference);
        }
        if (source['codeCodeableConcept']) {
            this.codeCodeableConcept = new fhir.CodeableConcept(source.codeCodeableConcept);
        }
        if (source['parameter']) {
            this.parameter = source.parameter.map((x) => new fhir.DeviceRequestParameter(x));
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['occurrenceDateTime']) {
            this.occurrenceDateTime = source.occurrenceDateTime;
        }
        if (source['_occurrenceDateTime']) {
            this._occurrenceDateTime = new fhir.FhirElement(source._occurrenceDateTime);
        }
        if (source['occurrencePeriod']) {
            this.occurrencePeriod = new fhir.Period(source.occurrencePeriod);
        }
        if (source['occurrenceTiming']) {
            this.occurrenceTiming = new fhir.Timing(source.occurrenceTiming);
        }
        if (source['authoredOn']) {
            this.authoredOn = source.authoredOn;
        }
        if (source['_authoredOn']) {
            this._authoredOn = new fhir.FhirElement(source._authoredOn);
        }
        if (source['requester']) {
            this.requester = new fhir.Reference(source.requester);
        }
        if (source['performerType']) {
            this.performerType = new fhir.CodeableConcept(source.performerType);
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source['insurance']) {
            this.insurance = source.insurance.map((x) => new fhir.Reference(x));
        }
        if (source['supportingInfo']) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.Reference(x));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['relevantHistory']) {
            this.relevantHistory = source.relevantHistory.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return RequestStatusValueSet;
    }
    /**
     * Required-bound Value Set for intent
     */
    intentRequiredValueSet() {
        return RequestIntentValueSet;
    }
    /**
     * Required-bound Value Set for priority
     */
    priorityRequiredValueSet() {
        return RequestPriorityValueSet;
    }
    /**
     * Example-bound Value Set for codeReference
     */
    codeReferenceExampleValueSet() {
        return DeviceKindValueSet;
    }
    /**
     * Example-bound Value Set for codeCodeableConcept
     */
    codeCodeableConceptExampleValueSet() {
        return DeviceKindValueSet;
    }
    /**
     * Example-bound Value Set for performerType
     */
    performerTypeExampleValueSet() {
        return ParticipantRoleValueSet;
    }
    /**
     * Example-bound Value Set for reasonCode
     */
    reasonCodeExampleValueSet() {
        return ConditionCodeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: DeviceRequest.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_instantiatesCanonical"]) {
            this._instantiatesCanonical.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_instantiatesUri"]) {
            this._instantiatesUri.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["priorRequest"]) {
            this.priorRequest.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["groupIdentifier"]) {
            results.push(...this.groupIdentifier.doModelValidation());
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (!this["intent"]) {
            results.push(["intent", 'Missing required element: DeviceRequest.intent']);
        }
        if (this["_intent"]) {
            results.push(...this._intent.doModelValidation());
        }
        if (this["_priority"]) {
            results.push(...this._priority.doModelValidation());
        }
        if (this["codeReference"]) {
            results.push(...this.codeReference.doModelValidation());
        }
        if (this["codeCodeableConcept"]) {
            results.push(...this.codeCodeableConcept.doModelValidation());
        }
        if (this["parameter"]) {
            this.parameter.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["subject"]) {
            results.push(["subject", 'Missing required element: DeviceRequest.subject']);
        }
        if (this["subject"]) {
            results.push(...this.subject.doModelValidation());
        }
        if (this["encounter"]) {
            results.push(...this.encounter.doModelValidation());
        }
        if (this["_occurrenceDateTime"]) {
            results.push(...this._occurrenceDateTime.doModelValidation());
        }
        if (this["occurrencePeriod"]) {
            results.push(...this.occurrencePeriod.doModelValidation());
        }
        if (this["occurrenceTiming"]) {
            results.push(...this.occurrenceTiming.doModelValidation());
        }
        if (this["_authoredOn"]) {
            results.push(...this._authoredOn.doModelValidation());
        }
        if (this["requester"]) {
            results.push(...this.requester.doModelValidation());
        }
        if (this["performerType"]) {
            results.push(...this.performerType.doModelValidation());
        }
        if (this["performer"]) {
            results.push(...this.performer.doModelValidation());
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["insurance"]) {
            this.insurance.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["supportingInfo"]) {
            this.supportingInfo.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["relevantHistory"]) {
            this.relevantHistory.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=DeviceRequest.js.map