// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Characteristics e.g. a products onset of action.
 */
export class MedicinalProductPharmaceuticalCharacteristics extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductPharmaceuticalCharacteristics - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.code = null;
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (this.code === undefined) {
            this.code = null;
        }
        if (source["status"]) {
            this.status = new fhir.CodeableConcept(source.status);
        }
    }
    /**
     * Check if the current MedicinalProductPharmaceuticalCharacteristics contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicinalProductPharmaceuticalCharacteristics from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MedicinalProductPharmaceuticalCharacteristics(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProductPharmaceuticalCharacteristics is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A species specific time during which consumption of animal product is not appropriate.
 */
export class MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["supportingInformation"]) {
            this.supportingInformation = source.supportingInformation;
        }
        if (source["_supportingInformation"]) {
            this._supportingInformation = new fhir.FhirElement(source._supportingInformation);
        }
        this.tissue = null;
        if (source["tissue"]) {
            this.tissue = new fhir.CodeableConcept(source.tissue);
        }
        if (this.tissue === undefined) {
            this.tissue = null;
        }
        this.value = null;
        if (source["value"]) {
            this.value = new fhir.Quantity(source.value);
        }
        if (this.value === undefined) {
            this.value = null;
        }
    }
    /**
     * Check if the current MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["tissue"] === undefined) {
            missingElements.push("tissue");
        }
        if (this["value"] === undefined) {
            missingElements.push("value");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A species for which this route applies.
 */
export class MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.code = null;
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (this.code === undefined) {
            this.code = null;
        }
        if (source["withdrawalPeriod"]) {
            this.withdrawalPeriod = source.withdrawalPeriod.map((x) => new fhir.MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod(x));
        }
    }
    /**
     * Check if the current MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The path by which the pharmaceutical product is taken into or makes contact with the body.
 */
export class MedicinalProductPharmaceuticalRouteOfAdministration extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductPharmaceuticalRouteOfAdministration - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.code = null;
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (this.code === undefined) {
            this.code = null;
        }
        if (source["firstDose"]) {
            this.firstDose = new fhir.Quantity(source.firstDose);
        }
        if (source["maxDosePerDay"]) {
            this.maxDosePerDay = new fhir.Quantity(source.maxDosePerDay);
        }
        if (source["maxDosePerTreatmentPeriod"]) {
            this.maxDosePerTreatmentPeriod = new fhir.Ratio(source.maxDosePerTreatmentPeriod);
        }
        if (source["maxSingleDose"]) {
            this.maxSingleDose = new fhir.Quantity(source.maxSingleDose);
        }
        if (source["maxTreatmentPeriod"]) {
            this.maxTreatmentPeriod = new fhir.Duration(source.maxTreatmentPeriod);
        }
        if (source["targetSpecies"]) {
            this.targetSpecies = source.targetSpecies.map((x) => new fhir.MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies(x));
        }
    }
    /**
     * Check if the current MedicinalProductPharmaceuticalRouteOfAdministration contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicinalProductPharmaceuticalRouteOfAdministration from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MedicinalProductPharmaceuticalRouteOfAdministration(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProductPharmaceuticalRouteOfAdministration is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A pharmaceutical product described in terms of its composition and dose form.
 */
export class MedicinalProductPharmaceutical extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProductPharmaceutical - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'MedicinalProductPharmaceutical';
        this.administrableDoseForm = null;
        if (source["administrableDoseForm"]) {
            this.administrableDoseForm = new fhir.CodeableConcept(source.administrableDoseForm);
        }
        if (this.administrableDoseForm === undefined) {
            this.administrableDoseForm = null;
        }
        if (source["characteristics"]) {
            this.characteristics = source.characteristics.map((x) => new fhir.MedicinalProductPharmaceuticalCharacteristics(x));
        }
        if (source["device"]) {
            this.device = source.device.map((x) => new fhir.Reference(x));
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["ingredient"]) {
            this.ingredient = source.ingredient.map((x) => new fhir.Reference(x));
        }
        this.routeOfAdministration = null;
        if (source["routeOfAdministration"]) {
            this.routeOfAdministration = source.routeOfAdministration.map((x) => new fhir.MedicinalProductPharmaceuticalRouteOfAdministration(x));
        }
        if (this.routeOfAdministration === undefined) {
            this.routeOfAdministration = null;
        }
        if (source["unitOfPresentation"]) {
            this.unitOfPresentation = new fhir.CodeableConcept(source.unitOfPresentation);
        }
    }
    /**
     * Check if the current MedicinalProductPharmaceutical contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["administrableDoseForm"] === undefined) {
            missingElements.push("administrableDoseForm");
        }
        if ((!this["routeOfAdministration"]) || (this["routeOfAdministration"].length === 0)) {
            missingElements.push("routeOfAdministration");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicinalProductPharmaceutical from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MedicinalProductPharmaceutical(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProductPharmaceutical is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
//# sourceMappingURL=MedicinalProductPharmaceutical.js.map