// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Condition
import * as fhir from '../fhir.js';
import { ConditionStageValueSet } from '../fhirValueSets/ConditionStageValueSet.js';
import { ConditionStageTypeValueSet } from '../fhirValueSets/ConditionStageTypeValueSet.js';
import { ManifestationOrSymptomValueSet } from '../fhirValueSets/ManifestationOrSymptomValueSet.js';
import { ConditionClinicalValueSet } from '../fhirValueSets/ConditionClinicalValueSet.js';
import { ConditionVerStatusValueSet } from '../fhirValueSets/ConditionVerStatusValueSet.js';
import { ConditionCategoryValueSet } from '../fhirValueSets/ConditionCategoryValueSet.js';
import { ConditionSeverityValueSet } from '../fhirValueSets/ConditionSeverityValueSet.js';
import { ConditionCodeValueSet } from '../fhirValueSets/ConditionCodeValueSet.js';
import { BodySiteValueSet } from '../fhirValueSets/BodySiteValueSet.js';
/**
 * Clinical stage or grade of a condition. May include formal severity assessments.
 */
export class ConditionStage extends fhir.BackboneElement {
    /**
     * Default constructor for ConditionStage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['summary']) {
            this.summary = new fhir.CodeableConcept(source.summary);
        }
        if (source['assessment']) {
            this.assessment = source.assessment.map((x) => new fhir.Reference(x));
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Example-bound Value Set for summary
     */
    static summaryExampleValueSet() {
        return ConditionStageValueSet;
    }
    /**
     * Example-bound Value Set for type
     */
    static typeExampleValueSet() {
        return ConditionStageTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["summary"]) {
            results.push(...this.summary.doModelValidation());
        }
        if (this["assessment"]) {
            this.assessment.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        return results;
    }
}
/**
 * The evidence may be a simple list of coded symptoms/manifestations, or references to observations or formal assessments, or both.
 */
export class ConditionEvidence extends fhir.BackboneElement {
    /**
     * Default constructor for ConditionEvidence - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Example-bound Value Set for code
     */
    static codeExampleValueSet() {
        return ManifestationOrSymptomValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["code"]) {
            this.code.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["detail"]) {
            this.detail.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.
 */
export class Condition extends fhir.DomainResource {
    /**
     * Default constructor for Condition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Condition';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['clinicalStatus']) {
            this.clinicalStatus = new fhir.CodeableConcept(source.clinicalStatus);
        }
        if (source['verificationStatus']) {
            this.verificationStatus = new fhir.CodeableConcept(source.verificationStatus);
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['severity']) {
            this.severity = new fhir.CodeableConcept(source.severity);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['bodySite']) {
            this.bodySite = source.bodySite.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['onsetDateTime']) {
            this.onsetDateTime = source.onsetDateTime;
        }
        if (source['_onsetDateTime']) {
            this._onsetDateTime = new fhir.FhirElement(source._onsetDateTime);
        }
        if (source['onsetAge']) {
            this.onsetAge = new fhir.Age(source.onsetAge);
        }
        if (source['onsetPeriod']) {
            this.onsetPeriod = new fhir.Period(source.onsetPeriod);
        }
        if (source['onsetRange']) {
            this.onsetRange = new fhir.Range(source.onsetRange);
        }
        if (source['onsetString']) {
            this.onsetString = source.onsetString;
        }
        if (source['_onsetString']) {
            this._onsetString = new fhir.FhirElement(source._onsetString);
        }
        if (source['abatementDateTime']) {
            this.abatementDateTime = source.abatementDateTime;
        }
        if (source['_abatementDateTime']) {
            this._abatementDateTime = new fhir.FhirElement(source._abatementDateTime);
        }
        if (source['abatementAge']) {
            this.abatementAge = new fhir.Age(source.abatementAge);
        }
        if (source['abatementPeriod']) {
            this.abatementPeriod = new fhir.Period(source.abatementPeriod);
        }
        if (source['abatementRange']) {
            this.abatementRange = new fhir.Range(source.abatementRange);
        }
        if (source['abatementString']) {
            this.abatementString = source.abatementString;
        }
        if (source['_abatementString']) {
            this._abatementString = new fhir.FhirElement(source._abatementString);
        }
        if (source['recordedDate']) {
            this.recordedDate = source.recordedDate;
        }
        if (source['_recordedDate']) {
            this._recordedDate = new fhir.FhirElement(source._recordedDate);
        }
        if (source['recorder']) {
            this.recorder = new fhir.Reference(source.recorder);
        }
        if (source['asserter']) {
            this.asserter = new fhir.Reference(source.asserter);
        }
        if (source['stage']) {
            this.stage = source.stage.map((x) => new fhir.ConditionStage(x));
        }
        if (source['evidence']) {
            this.evidence = source.evidence.map((x) => new fhir.ConditionEvidence(x));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
    }
    /**
     * Required-bound Value Set for clinicalStatus
     */
    static clinicalStatusRequiredValueSet() {
        return ConditionClinicalValueSet;
    }
    /**
     * Required-bound Value Set for verificationStatus
     */
    static verificationStatusRequiredValueSet() {
        return ConditionVerStatusValueSet;
    }
    /**
     * Extensible-bound Value Set for category
     */
    static categoryExtensibleValueSet() {
        return ConditionCategoryValueSet;
    }
    /**
     * Preferred-bound Value Set for severity
     */
    static severityPreferredValueSet() {
        return ConditionSeverityValueSet;
    }
    /**
     * Example-bound Value Set for code
     */
    static codeExampleValueSet() {
        return ConditionCodeValueSet;
    }
    /**
     * Example-bound Value Set for bodySite
     */
    static bodySiteExampleValueSet() {
        return BodySiteValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: Condition.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["clinicalStatus"]) {
            results.push(...this.clinicalStatus.doModelValidation());
        }
        if (this["verificationStatus"]) {
            results.push(...this.verificationStatus.doModelValidation());
        }
        if (this["category"]) {
            this.category.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["severity"]) {
            results.push(...this.severity.doModelValidation());
        }
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["bodySite"]) {
            this.bodySite.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["subject"]) {
            results.push(["subject", 'Missing required element: Condition.subject']);
        }
        if (this["subject"]) {
            results.push(...this.subject.doModelValidation());
        }
        if (this["encounter"]) {
            results.push(...this.encounter.doModelValidation());
        }
        if (this["_onsetDateTime"]) {
            results.push(...this._onsetDateTime.doModelValidation());
        }
        if (this["onsetAge"]) {
            results.push(...this.onsetAge.doModelValidation());
        }
        if (this["onsetPeriod"]) {
            results.push(...this.onsetPeriod.doModelValidation());
        }
        if (this["onsetRange"]) {
            results.push(...this.onsetRange.doModelValidation());
        }
        if (this["_onsetString"]) {
            results.push(...this._onsetString.doModelValidation());
        }
        if (this["_abatementDateTime"]) {
            results.push(...this._abatementDateTime.doModelValidation());
        }
        if (this["abatementAge"]) {
            results.push(...this.abatementAge.doModelValidation());
        }
        if (this["abatementPeriod"]) {
            results.push(...this.abatementPeriod.doModelValidation());
        }
        if (this["abatementRange"]) {
            results.push(...this.abatementRange.doModelValidation());
        }
        if (this["_abatementString"]) {
            results.push(...this._abatementString.doModelValidation());
        }
        if (this["_recordedDate"]) {
            results.push(...this._recordedDate.doModelValidation());
        }
        if (this["recorder"]) {
            results.push(...this.recorder.doModelValidation());
        }
        if (this["asserter"]) {
            results.push(...this.asserter.doModelValidation());
        }
        if (this["stage"]) {
            this.stage.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["evidence"]) {
            this.evidence.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=Condition.js.map