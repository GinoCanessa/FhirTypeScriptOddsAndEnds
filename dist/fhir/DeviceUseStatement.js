// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: DeviceUseStatement
import * as fhir from '../fhir.js';
import { DeviceStatementStatusValueSet } from '../fhirValueSets/DeviceStatementStatusValueSet.js';
import { BodySiteValueSet } from '../fhirValueSets/BodySiteValueSet.js';
/**
 * A record of a device being used by a patient where the record is the result of a report from the patient or another clinician.
 */
export class DeviceUseStatement extends fhir.DomainResource {
    /**
     * Default constructor for DeviceUseStatement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'DeviceUseStatement';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['derivedFrom']) {
            this.derivedFrom = source.derivedFrom.map((x) => new fhir.Reference(x));
        }
        if (source['timingTiming']) {
            this.timingTiming = new fhir.Timing(source.timingTiming);
        }
        if (source['timingPeriod']) {
            this.timingPeriod = new fhir.Period(source.timingPeriod);
        }
        if (source['timingDateTime']) {
            this.timingDateTime = source.timingDateTime;
        }
        if (source['_timingDateTime']) {
            this._timingDateTime = new fhir.FhirElement(source._timingDateTime);
        }
        if (source['recordedOn']) {
            this.recordedOn = source.recordedOn;
        }
        if (source['_recordedOn']) {
            this._recordedOn = new fhir.FhirElement(source._recordedOn);
        }
        if (source['source']) {
            this.source = new fhir.Reference(source.source);
        }
        if (source['device']) {
            this.device = new fhir.Reference(source.device);
        }
        else {
            this.device = null;
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite);
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return DeviceStatementStatusValueSet;
    }
    /**
     * Example-bound Value Set for bodySite
     */
    static bodySiteExampleValueSet() {
        return BodySiteValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: DeviceUseStatement.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: DeviceUseStatement.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (!this["subject"]) {
            results.push(["subject", 'Missing required element: DeviceUseStatement.subject']);
        }
        if (this["subject"]) {
            results.push(...this.subject.doModelValidation());
        }
        if (this["derivedFrom"]) {
            this.derivedFrom.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["timingTiming"]) {
            results.push(...this.timingTiming.doModelValidation());
        }
        if (this["timingPeriod"]) {
            results.push(...this.timingPeriod.doModelValidation());
        }
        if (this["_timingDateTime"]) {
            results.push(...this._timingDateTime.doModelValidation());
        }
        if (this["_recordedOn"]) {
            results.push(...this._recordedOn.doModelValidation());
        }
        if (this["source"]) {
            results.push(...this.source.doModelValidation());
        }
        if (!this["device"]) {
            results.push(["device", 'Missing required element: DeviceUseStatement.device']);
        }
        if (this["device"]) {
            results.push(...this.device.doModelValidation());
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["bodySite"]) {
            results.push(...this.bodySite.doModelValidation());
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=DeviceUseStatement.js.map