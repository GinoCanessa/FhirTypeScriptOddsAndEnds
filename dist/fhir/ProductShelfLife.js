// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * The shelf-life and storage information for a medicinal product item or container can be described using this class.
 */
export class ProductShelfLife extends fhir.BackboneElement {
    /**
     * Default constructor for ProductShelfLife - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["identifier"]) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        this.period = null;
        if (source["period"]) {
            this.period = new fhir.Quantity(source.period);
        }
        if (this.period === undefined) {
            this.period = null;
        }
        if (source["specialPrecautionsForStorage"]) {
            this.specialPrecautionsForStorage = source.specialPrecautionsForStorage.map((x) => new fhir.CodeableConcept(x));
        }
        this.type = null;
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (this.type === undefined) {
            this.type = null;
        }
    }
    /**
     * Check if the current ProductShelfLife contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["period"] === undefined) {
            missingElements.push("period");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ProductShelfLife from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new ProductShelfLife(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `ProductShelfLife is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
//# sourceMappingURL=ProductShelfLife.js.map