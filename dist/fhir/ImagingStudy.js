// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ImagingStudy
import * as fhir from '../fhir.js';
import { SeriesPerformerFunctionValueSet } from '../fhirValueSets/SeriesPerformerFunctionValueSet.js';
import { DicomCid29AcquisitionModalityValueSet } from '../fhirValueSets/DicomCid29AcquisitionModalityValueSet.js';
import { BodySiteValueSet } from '../fhirValueSets/BodySiteValueSet.js';
import { BodysiteLateralityValueSet } from '../fhirValueSets/BodysiteLateralityValueSet.js';
import { ImagingstudyStatusValueSet } from '../fhirValueSets/ImagingstudyStatusValueSet.js';
import { ProcedureReasonValueSet } from '../fhirValueSets/ProcedureReasonValueSet.js';
/**
 * If the person who performed the series is not known, their Organization may be recorded. A patient, or related person, may be the performer, e.g. for patient-captured images.
 */
export class ImagingStudySeriesPerformer extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingStudySeriesPerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['function']) {
            this.function = new fhir.CodeableConcept(source.function);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        else {
            this.actor = null;
        }
    }
    /**
     * Extensible-bound Value Set for function
     */
    static functionExtensibleValueSet() {
        return SeriesPerformerFunctionValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["function"]) {
            results.push(...this.function.doModelValidation());
        }
        if (!this["actor"]) {
            results.push(["actor", 'Missing required element: ImagingStudy.series.performer.actor']);
        }
        if (this["actor"]) {
            results.push(...this.actor.doModelValidation());
        }
        return results;
    }
}
/**
 * A single SOP instance within the series, e.g. an image, or presentation state.
 */
export class ImagingStudySeriesInstance extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingStudySeriesInstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['uid']) {
            this.uid = source.uid;
        }
        else {
            this.uid = null;
        }
        if (source['_uid']) {
            this._uid = new fhir.FhirElement(source._uid);
        }
        if (source['sopClass']) {
            this.sopClass = new fhir.Coding(source.sopClass);
        }
        else {
            this.sopClass = null;
        }
        if (source['number']) {
            this.number = source.number;
        }
        if (source['_number']) {
            this._number = new fhir.FhirElement(source._number);
        }
        if (source['title']) {
            this.title = source.title;
        }
        if (source['_title']) {
            this._title = new fhir.FhirElement(source._title);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["uid"]) {
            results.push(["uid", 'Missing required element: ImagingStudy.series.instance.uid']);
        }
        if (this["_uid"]) {
            results.push(...this._uid.doModelValidation());
        }
        if (!this["sopClass"]) {
            results.push(["sopClass", 'Missing required element: ImagingStudy.series.instance.sopClass']);
        }
        if (this["sopClass"]) {
            results.push(...this.sopClass.doModelValidation());
        }
        if (this["_number"]) {
            results.push(...this._number.doModelValidation());
        }
        if (this["_title"]) {
            results.push(...this._title.doModelValidation());
        }
        return results;
    }
}
/**
 * Each study has one or more series of images or other content.
 */
export class ImagingStudySeries extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingStudySeries - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['uid']) {
            this.uid = source.uid;
        }
        else {
            this.uid = null;
        }
        if (source['_uid']) {
            this._uid = new fhir.FhirElement(source._uid);
        }
        if (source['number']) {
            this.number = source.number;
        }
        if (source['_number']) {
            this._number = new fhir.FhirElement(source._number);
        }
        if (source['modality']) {
            this.modality = new fhir.Coding(source.modality);
        }
        else {
            this.modality = null;
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['numberOfInstances']) {
            this.numberOfInstances = source.numberOfInstances;
        }
        if (source['_numberOfInstances']) {
            this._numberOfInstances = new fhir.FhirElement(source._numberOfInstances);
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x));
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.Coding(source.bodySite);
        }
        if (source['laterality']) {
            this.laterality = new fhir.Coding(source.laterality);
        }
        if (source['specimen']) {
            this.specimen = source.specimen.map((x) => new fhir.Reference(x));
        }
        if (source['started']) {
            this.started = source.started;
        }
        if (source['_started']) {
            this._started = new fhir.FhirElement(source._started);
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.ImagingStudySeriesPerformer(x));
        }
        if (source['instance']) {
            this.instance = source.instance.map((x) => new fhir.ImagingStudySeriesInstance(x));
        }
    }
    /**
     * Extensible-bound Value Set for modality
     */
    static modalityExtensibleValueSet() {
        return DicomCid29AcquisitionModalityValueSet;
    }
    /**
     * Example-bound Value Set for bodySite
     */
    static bodySiteExampleValueSet() {
        return BodySiteValueSet;
    }
    /**
     * Example-bound Value Set for laterality
     */
    static lateralityExampleValueSet() {
        return BodysiteLateralityValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["uid"]) {
            results.push(["uid", 'Missing required element: ImagingStudy.series.uid']);
        }
        if (this["_uid"]) {
            results.push(...this._uid.doModelValidation());
        }
        if (this["_number"]) {
            results.push(...this._number.doModelValidation());
        }
        if (!this["modality"]) {
            results.push(["modality", 'Missing required element: ImagingStudy.series.modality']);
        }
        if (this["modality"]) {
            results.push(...this.modality.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["_numberOfInstances"]) {
            results.push(...this._numberOfInstances.doModelValidation());
        }
        if (this["endpoint"]) {
            this.endpoint.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["bodySite"]) {
            results.push(...this.bodySite.doModelValidation());
        }
        if (this["laterality"]) {
            results.push(...this.laterality.doModelValidation());
        }
        if (this["specimen"]) {
            this.specimen.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_started"]) {
            results.push(...this._started.doModelValidation());
        }
        if (this["performer"]) {
            this.performer.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["instance"]) {
            this.instance.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
 */
export class ImagingStudy extends fhir.DomainResource {
    /**
     * Default constructor for ImagingStudy - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'ImagingStudy';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['modality']) {
            this.modality = source.modality.map((x) => new fhir.Coding(x));
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['started']) {
            this.started = source.started;
        }
        if (source['_started']) {
            this._started = new fhir.FhirElement(source._started);
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source['referrer']) {
            this.referrer = new fhir.Reference(source.referrer);
        }
        if (source['interpreter']) {
            this.interpreter = source.interpreter.map((x) => new fhir.Reference(x));
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x));
        }
        if (source['numberOfSeries']) {
            this.numberOfSeries = source.numberOfSeries;
        }
        if (source['_numberOfSeries']) {
            this._numberOfSeries = new fhir.FhirElement(source._numberOfSeries);
        }
        if (source['numberOfInstances']) {
            this.numberOfInstances = source.numberOfInstances;
        }
        if (source['_numberOfInstances']) {
            this._numberOfInstances = new fhir.FhirElement(source._numberOfInstances);
        }
        if (source['procedureReference']) {
            this.procedureReference = new fhir.Reference(source.procedureReference);
        }
        if (source['procedureCode']) {
            this.procedureCode = source.procedureCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['series']) {
            this.series = source.series.map((x) => new fhir.ImagingStudySeries(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return ImagingstudyStatusValueSet;
    }
    /**
     * Extensible-bound Value Set for modality
     */
    static modalityExtensibleValueSet() {
        return DicomCid29AcquisitionModalityValueSet;
    }
    /**
     * Example-bound Value Set for reasonCode
     */
    static reasonCodeExampleValueSet() {
        return ProcedureReasonValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: ImagingStudy.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: ImagingStudy.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["modality"]) {
            this.modality.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["subject"]) {
            results.push(["subject", 'Missing required element: ImagingStudy.subject']);
        }
        if (this["subject"]) {
            results.push(...this.subject.doModelValidation());
        }
        if (this["encounter"]) {
            results.push(...this.encounter.doModelValidation());
        }
        if (this["_started"]) {
            results.push(...this._started.doModelValidation());
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["referrer"]) {
            results.push(...this.referrer.doModelValidation());
        }
        if (this["interpreter"]) {
            this.interpreter.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["endpoint"]) {
            this.endpoint.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_numberOfSeries"]) {
            results.push(...this._numberOfSeries.doModelValidation());
        }
        if (this["_numberOfInstances"]) {
            results.push(...this._numberOfInstances.doModelValidation());
        }
        if (this["procedureReference"]) {
            results.push(...this.procedureReference.doModelValidation());
        }
        if (this["procedureCode"]) {
            this.procedureCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["location"]) {
            results.push(...this.location.doModelValidation());
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["series"]) {
            this.series.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=ImagingStudy.js.map