// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ImagingStudy
import * as fhir from '../fhir.js';
import { SeriesPerformerFunctionValueSet, } from '../fhirValueSets/SeriesPerformerFunctionValueSet.js';
import { DicomCid29AcquisitionModalityValueSet, } from '../fhirValueSets/DicomCid29AcquisitionModalityValueSet.js';
import { BodySiteValueSet, } from '../fhirValueSets/BodySiteValueSet.js';
import { BodysiteLateralityValueSet, } from '../fhirValueSets/BodysiteLateralityValueSet.js';
import { ImagingstudyStatusValueSet, } from '../fhirValueSets/ImagingstudyStatusValueSet.js';
import { ProcedureReasonValueSet, } from '../fhirValueSets/ProcedureReasonValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * If the person who performed the series is not known, their Organization may be recorded. A patient, or related person, may be the performer, e.g. for patient-captured images.
 */
export class ImagingStudySeriesPerformer extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingStudySeriesPerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ImagingStudySeriesPerformer';
        if (source['function']) {
            this.function = new fhir.CodeableConcept(source.function);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        else {
            this.actor = null;
        }
    }
    /**
     * Extensible-bound Value Set for function
     */
    static functionExtensibleValueSet() {
        return SeriesPerformerFunctionValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["function"]) {
            outcome.issue.push(...this.function.doModelValidation().issue);
        }
        if (!this['actor']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property actor:fhir.Reference fhir: ImagingStudy.series.performer.actor:Reference", }));
        }
        if (this["actor"]) {
            outcome.issue.push(...this.actor.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * A single SOP instance within the series, e.g. an image, or presentation state.
 */
export class ImagingStudySeriesInstance extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingStudySeriesInstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ImagingStudySeriesInstance';
        if (source['uid']) {
            this.uid = new fhir.FhirId({ value: source.uid });
        }
        else {
            this.uid = null;
        }
        if (source['sopClass']) {
            this.sopClass = new fhir.Coding(source.sopClass);
        }
        else {
            this.sopClass = null;
        }
        if (source['number']) {
            this.number = new fhir.FhirUnsignedInt({ value: source.number });
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['uid']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property uid:fhir.FhirId fhir: ImagingStudy.series.instance.uid:id", }));
        }
        if (this["uid"]) {
            outcome.issue.push(...this.uid.doModelValidation().issue);
        }
        if (!this['sopClass']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property sopClass:fhir.Coding fhir: ImagingStudy.series.instance.sopClass:Coding", }));
        }
        if (this["sopClass"]) {
            outcome.issue.push(...this.sopClass.doModelValidation().issue);
        }
        if (this["number"]) {
            outcome.issue.push(...this.number.doModelValidation().issue);
        }
        if (this["title"]) {
            outcome.issue.push(...this.title.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Each study has one or more series of images or other content.
 */
export class ImagingStudySeries extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingStudySeries - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ImagingStudySeries';
        /**
         * Typical endpoint types include DICOM WADO-RS, which is used to retrieve DICOM instances in native or rendered (e.g., JPG, PNG) formats using a RESTful API; DICOM WADO-URI, which can similarly retrieve native or rendered instances, except using an HTTP query-based approach; and DICOM QIDO-RS, which allows RESTful query for DICOM information without retrieving the actual instances.
         */
        this.endpoint = [];
        /**
         * The specimen imaged, e.g., for whole slide imaging of a biopsy.
         */
        this.specimen = [];
        /**
         * If the person who performed the series is not known, their Organization may be recorded. A patient, or related person, may be the performer, e.g. for patient-captured images.
         */
        this.performer = [];
        /**
         * A single SOP instance within the series, e.g. an image, or presentation state.
         */
        this.instance = [];
        if (source['uid']) {
            this.uid = new fhir.FhirId({ value: source.uid });
        }
        else {
            this.uid = null;
        }
        if (source['number']) {
            this.number = new fhir.FhirUnsignedInt({ value: source.number });
        }
        if (source['modality']) {
            this.modality = new fhir.Coding(source.modality);
        }
        else {
            this.modality = null;
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['numberOfInstances']) {
            this.numberOfInstances = new fhir.FhirUnsignedInt({ value: source.numberOfInstances });
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x));
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.Coding(source.bodySite);
        }
        if (source['laterality']) {
            this.laterality = new fhir.Coding(source.laterality);
        }
        if (source['specimen']) {
            this.specimen = source.specimen.map((x) => new fhir.Reference(x));
        }
        if (source['started']) {
            this.started = new fhir.FhirDateTime({ value: source.started });
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.ImagingStudySeriesPerformer(x));
        }
        if (source['instance']) {
            this.instance = source.instance.map((x) => new fhir.ImagingStudySeriesInstance(x));
        }
    }
    /**
     * Extensible-bound Value Set for modality
     */
    static modalityExtensibleValueSet() {
        return DicomCid29AcquisitionModalityValueSet;
    }
    /**
     * Example-bound Value Set for bodySite
     */
    static bodySiteExampleValueSet() {
        return BodySiteValueSet;
    }
    /**
     * Example-bound Value Set for laterality
     */
    static lateralityExampleValueSet() {
        return BodysiteLateralityValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['uid']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property uid:fhir.FhirId fhir: ImagingStudy.series.uid:id", }));
        }
        if (this["uid"]) {
            outcome.issue.push(...this.uid.doModelValidation().issue);
        }
        if (this["number"]) {
            outcome.issue.push(...this.number.doModelValidation().issue);
        }
        if (!this['modality']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property modality:fhir.Coding fhir: ImagingStudy.series.modality:Coding", }));
        }
        if (this["modality"]) {
            outcome.issue.push(...this.modality.doModelValidation().issue);
        }
        if (this["description"]) {
            outcome.issue.push(...this.description.doModelValidation().issue);
        }
        if (this["numberOfInstances"]) {
            outcome.issue.push(...this.numberOfInstances.doModelValidation().issue);
        }
        if (this["endpoint"]) {
            this.endpoint.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["bodySite"]) {
            outcome.issue.push(...this.bodySite.doModelValidation().issue);
        }
        if (this["laterality"]) {
            outcome.issue.push(...this.laterality.doModelValidation().issue);
        }
        if (this["specimen"]) {
            this.specimen.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["started"]) {
            outcome.issue.push(...this.started.doModelValidation().issue);
        }
        if (this["performer"]) {
            this.performer.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["instance"]) {
            this.instance.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
 */
export class ImagingStudy extends fhir.DomainResource {
    /**
     * Default constructor for ImagingStudy - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ImagingStudy';
        /**
         * See discussion under [Imaging Study Implementation Notes](imagingstudy.html#notes) for encoding of DICOM Study Instance UID. Accession Number should use ACSN Identifier type.
         */
        this.identifier = [];
        /**
         * A list of all the series.modality values that are actual acquisition modalities, i.e. those in the DICOM Context Group 29 (value set OID 1.2.840.10008.6.1.19).
         */
        this.modality = [];
        /**
         * A list of the diagnostic requests that resulted in this imaging study being performed.
         */
        this.basedOn = [];
        /**
         * Who read the study and interpreted the images or other content.
         */
        this.interpreter = [];
        /**
         * Typical endpoint types include DICOM WADO-RS, which is used to retrieve DICOM instances in native or rendered (e.g., JPG, PNG), formats using a RESTful API; DICOM WADO-URI, which can similarly retrieve native or rendered instances, except using an HTTP query-based approach; DICOM QIDO-RS, which allows RESTful query for DICOM information without retrieving the actual instances; or IHE Invoke Image Display (IID), which provides standard invocation of an imaging web viewer.
         */
        this.endpoint = [];
        /**
         * The code for the performed procedure type.
         */
        this.procedureCode = [];
        /**
         * Description of clinical condition indicating why the ImagingStudy was requested.
         */
        this.reasonCode = [];
        /**
         * Indicates another resource whose existence justifies this Study.
         */
        this.reasonReference = [];
        /**
         * Per the recommended DICOM mapping, this element is derived from the Study Description attribute (0008,1030). Observations or findings about the imaging study should be recorded in another resource, e.g. Observation, and not in this element.
         */
        this.note = [];
        /**
         * Each study has one or more series of images or other content.
         */
        this.series = [];
        this.resourceType = 'ImagingStudy';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['modality']) {
            this.modality = source.modality.map((x) => new fhir.Coding(x));
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['started']) {
            this.started = new fhir.FhirDateTime({ value: source.started });
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source['referrer']) {
            this.referrer = new fhir.Reference(source.referrer);
        }
        if (source['interpreter']) {
            this.interpreter = source.interpreter.map((x) => new fhir.Reference(x));
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x));
        }
        if (source['numberOfSeries']) {
            this.numberOfSeries = new fhir.FhirUnsignedInt({ value: source.numberOfSeries });
        }
        if (source['numberOfInstances']) {
            this.numberOfInstances = new fhir.FhirUnsignedInt({ value: source.numberOfInstances });
        }
        if (source['procedureReference']) {
            this.procedureReference = new fhir.Reference(source.procedureReference);
        }
        if (source['procedureCode']) {
            this.procedureCode = source.procedureCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['series']) {
            this.series = source.series.map((x) => new fhir.ImagingStudySeries(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return ImagingstudyStatusValueSet;
    }
    /**
     * Extensible-bound Value Set for modality
     */
    static modalityExtensibleValueSet() {
        return DicomCid29AcquisitionModalityValueSet;
    }
    /**
     * Example-bound Value Set for reasonCode
     */
    static reasonCodeExampleValueSet() {
        return ProcedureReasonValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'ImagingStudy' fhir: ImagingStudy.resourceType:'ImagingStudy'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:ImagingstudyStatusValueSetEnum fhir: ImagingStudy.status:code", }));
        }
        if (this["modality"]) {
            this.modality.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['subject']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property subject:fhir.Reference fhir: ImagingStudy.subject:Reference", }));
        }
        if (this["subject"]) {
            outcome.issue.push(...this.subject.doModelValidation().issue);
        }
        if (this["encounter"]) {
            outcome.issue.push(...this.encounter.doModelValidation().issue);
        }
        if (this["started"]) {
            outcome.issue.push(...this.started.doModelValidation().issue);
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["referrer"]) {
            outcome.issue.push(...this.referrer.doModelValidation().issue);
        }
        if (this["interpreter"]) {
            this.interpreter.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["endpoint"]) {
            this.endpoint.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["numberOfSeries"]) {
            outcome.issue.push(...this.numberOfSeries.doModelValidation().issue);
        }
        if (this["numberOfInstances"]) {
            outcome.issue.push(...this.numberOfInstances.doModelValidation().issue);
        }
        if (this["procedureReference"]) {
            outcome.issue.push(...this.procedureReference.doModelValidation().issue);
        }
        if (this["procedureCode"]) {
            this.procedureCode.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["location"]) {
            outcome.issue.push(...this.location.doModelValidation().issue);
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["description"]) {
            outcome.issue.push(...this.description.doModelValidation().issue);
        }
        if (this["series"]) {
            this.series.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=ImagingStudy.js.map