// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: InsurancePlan
import * as fhir from '../fhir.js';
import { ContactentityTypeValueSet } from '../fhirValueSets/ContactentityTypeValueSet.js';
import { InsuranceplanApplicabilityValueSet } from '../fhirValueSets/InsuranceplanApplicabilityValueSet.js';
import { PublicationStatusValueSet } from '../fhirValueSets/PublicationStatusValueSet.js';
import { InsuranceplanTypeValueSet } from '../fhirValueSets/InsuranceplanTypeValueSet.js';
/**
 * Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
 */
export class InsurancePlanContact extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanContact - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['purpose']) {
            this.purpose = new fhir.CodeableConcept(source.purpose);
        }
        if (source['name']) {
            this.name = new fhir.HumanName(source.name);
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        if (source['address']) {
            this.address = new fhir.Address(source.address);
        }
    }
    /**
     * Extensible-bound Value Set for purpose
     */
    purposeExtensibleValueSet() {
        return ContactentityTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["purpose"]) {
            results.push(...this.purpose.doModelValidation());
        }
        if (this["name"]) {
            results.push(...this.name.doModelValidation());
        }
        if (this["telecom"]) {
            this.telecom.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["address"]) {
            results.push(...this.address.doModelValidation());
        }
        return results;
    }
}
/**
 * The specific limits on the benefit.
 */
export class InsurancePlanCoverageBenefitLimit extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanCoverageBenefitLimit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['value']) {
            this.value = new fhir.Quantity(source.value);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["value"]) {
            results.push(...this.value.doModelValidation());
        }
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        return results;
    }
}
/**
 * Specific benefits under this type of coverage.
 */
export class InsurancePlanCoverageBenefit extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanCoverageBenefit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['requirement']) {
            this.requirement = source.requirement;
        }
        if (source['_requirement']) {
            this._requirement = new fhir.FhirElement(source._requirement);
        }
        if (source['limit']) {
            this.limit = source.limit.map((x) => new fhir.InsurancePlanCoverageBenefitLimit(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["type"]) {
            results.push(["type", 'Missing required element: InsurancePlan.coverage.benefit.type']);
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["_requirement"]) {
            results.push(...this._requirement.doModelValidation());
        }
        if (this["limit"]) {
            this.limit.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Details about the coverage offered by the insurance product.
 */
export class InsurancePlanCoverage extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanCoverage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['network']) {
            this.network = source.network.map((x) => new fhir.Reference(x));
        }
        if (source['benefit']) {
            this.benefit = source.benefit.map((x) => new fhir.InsurancePlanCoverageBenefit(x));
        }
        else {
            this.benefit = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["type"]) {
            results.push(["type", 'Missing required element: InsurancePlan.coverage.type']);
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["network"]) {
            this.network.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if ((!this["benefit"]) || (this["benefit"].length === 0)) {
            results.push(["benefit", 'Missing required element: InsurancePlan.coverage.benefit']);
        }
        if (this["benefit"]) {
            this.benefit.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Overall costs associated with the plan.
 */
export class InsurancePlanPlanGeneralCost extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanPlanGeneralCost - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['groupSize']) {
            this.groupSize = source.groupSize;
        }
        if (source['_groupSize']) {
            this._groupSize = new fhir.FhirElement(source._groupSize);
        }
        if (source['cost']) {
            this.cost = new fhir.Money(source.cost);
        }
        if (source['comment']) {
            this.comment = source.comment;
        }
        if (source['_comment']) {
            this._comment = new fhir.FhirElement(source._comment);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["_groupSize"]) {
            results.push(...this._groupSize.doModelValidation());
        }
        if (this["cost"]) {
            results.push(...this.cost.doModelValidation());
        }
        if (this["_comment"]) {
            results.push(...this._comment.doModelValidation());
        }
        return results;
    }
}
/**
 * List of the costs associated with a specific benefit.
 */
export class InsurancePlanPlanSpecificCostBenefitCost extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanPlanSpecificCostBenefitCost - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['applicability']) {
            this.applicability = new fhir.CodeableConcept(source.applicability);
        }
        if (source['qualifiers']) {
            this.qualifiers = source.qualifiers.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['value']) {
            this.value = new fhir.Quantity(source.value);
        }
    }
    /**
     * Required-bound Value Set for applicability
     */
    applicabilityRequiredValueSet() {
        return InsuranceplanApplicabilityValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["type"]) {
            results.push(["type", 'Missing required element: InsurancePlan.plan.specificCost.benefit.cost.type']);
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["applicability"]) {
            results.push(...this.applicability.doModelValidation());
        }
        if (this["qualifiers"]) {
            this.qualifiers.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["value"]) {
            results.push(...this.value.doModelValidation());
        }
        return results;
    }
}
/**
 * List of the specific benefits under this category of benefit.
 */
export class InsurancePlanPlanSpecificCostBenefit extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanPlanSpecificCostBenefit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['cost']) {
            this.cost = source.cost.map((x) => new fhir.InsurancePlanPlanSpecificCostBenefitCost(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["type"]) {
            results.push(["type", 'Missing required element: InsurancePlan.plan.specificCost.benefit.type']);
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["cost"]) {
            this.cost.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Costs associated with the coverage provided by the product.
 */
export class InsurancePlanPlanSpecificCost extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanPlanSpecificCost - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        else {
            this.category = null;
        }
        if (source['benefit']) {
            this.benefit = source.benefit.map((x) => new fhir.InsurancePlanPlanSpecificCostBenefit(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["category"]) {
            results.push(["category", 'Missing required element: InsurancePlan.plan.specificCost.category']);
        }
        if (this["category"]) {
            results.push(...this.category.doModelValidation());
        }
        if (this["benefit"]) {
            this.benefit.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Details about an insurance plan.
 */
export class InsurancePlanPlan extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanPlan - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['coverageArea']) {
            this.coverageArea = source.coverageArea.map((x) => new fhir.Reference(x));
        }
        if (source['network']) {
            this.network = source.network.map((x) => new fhir.Reference(x));
        }
        if (source['generalCost']) {
            this.generalCost = source.generalCost.map((x) => new fhir.InsurancePlanPlanGeneralCost(x));
        }
        if (source['specificCost']) {
            this.specificCost = source.specificCost.map((x) => new fhir.InsurancePlanPlanSpecificCost(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["coverageArea"]) {
            this.coverageArea.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["network"]) {
            this.network.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["generalCost"]) {
            this.generalCost.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["specificCost"]) {
            this.specificCost.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Details of a Health Insurance product/plan provided by an organization.
 */
export class InsurancePlan extends fhir.DomainResource {
    /**
     * Default constructor for InsurancePlan - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'InsurancePlan';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['alias']) {
            this.alias = source.alias.map((x) => (x));
        }
        if (source['_alias']) {
            this._alias = source._alias.map((x) => new fhir.FhirElement(x));
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['ownedBy']) {
            this.ownedBy = new fhir.Reference(source.ownedBy);
        }
        if (source['administeredBy']) {
            this.administeredBy = new fhir.Reference(source.administeredBy);
        }
        if (source['coverageArea']) {
            this.coverageArea = source.coverageArea.map((x) => new fhir.Reference(x));
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.InsurancePlanContact(x));
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x));
        }
        if (source['network']) {
            this.network = source.network.map((x) => new fhir.Reference(x));
        }
        if (source['coverage']) {
            this.coverage = source.coverage.map((x) => new fhir.InsurancePlanCoverage(x));
        }
        if (source['plan']) {
            this.plan = source.plan.map((x) => new fhir.InsurancePlanPlan(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return PublicationStatusValueSet;
    }
    /**
     * Example-bound Value Set for type
     */
    typeExampleValueSet() {
        return InsuranceplanTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: InsurancePlan.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["type"]) {
            this.type.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_alias"]) {
            this._alias.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["period"]) {
            results.push(...this.period.doModelValidation());
        }
        if (this["ownedBy"]) {
            results.push(...this.ownedBy.doModelValidation());
        }
        if (this["administeredBy"]) {
            results.push(...this.administeredBy.doModelValidation());
        }
        if (this["coverageArea"]) {
            this.coverageArea.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["endpoint"]) {
            this.endpoint.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["network"]) {
            this.network.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["coverage"]) {
            this.coverage.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["plan"]) {
            this.plan.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=InsurancePlan.js.map