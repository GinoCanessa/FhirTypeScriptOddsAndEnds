// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
 */
export class InsurancePlanContact extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanContact - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["address"]) {
            this.address = new fhir.Address(source.address);
        }
        if (source["name"]) {
            this.name = new fhir.HumanName(source.name);
        }
        if (source["purpose"]) {
            this.purpose = new fhir.CodeableConcept(source.purpose);
        }
        if (source["telecom"]) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
    }
    /**
     * Check if the current InsurancePlanContact contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a InsurancePlanContact from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new InsurancePlanContact(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `InsurancePlanContact is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The specific limits on the benefit.
 */
export class InsurancePlanCoverageBenefitLimit extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanCoverageBenefitLimit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source["value"]) {
            this.value = new fhir.Quantity(source.value);
        }
    }
    /**
     * Check if the current InsurancePlanCoverageBenefitLimit contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a InsurancePlanCoverageBenefitLimit from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new InsurancePlanCoverageBenefitLimit(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `InsurancePlanCoverageBenefitLimit is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Specific benefits under this type of coverage.
 */
export class InsurancePlanCoverageBenefit extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanCoverageBenefit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["limit"]) {
            this.limit = source.limit.map((x) => new fhir.InsurancePlanCoverageBenefitLimit(x));
        }
        if (source["requirement"]) {
            this.requirement = source.requirement;
        }
        if (source["_requirement"]) {
            this._requirement = new fhir.FhirElement(source._requirement);
        }
        this.type = null;
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (this.type === undefined) {
            this.type = null;
        }
    }
    /**
     * Check if the current InsurancePlanCoverageBenefit contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a InsurancePlanCoverageBenefit from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new InsurancePlanCoverageBenefit(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `InsurancePlanCoverageBenefit is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Details about the coverage offered by the insurance product.
 */
export class InsurancePlanCoverage extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanCoverage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.benefit = null;
        if (source["benefit"]) {
            this.benefit = source.benefit.map((x) => new fhir.InsurancePlanCoverageBenefit(x));
        }
        if (this.benefit === undefined) {
            this.benefit = null;
        }
        if (source["network"]) {
            this.network = source.network.map((x) => new fhir.Reference(x));
        }
        this.type = null;
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (this.type === undefined) {
            this.type = null;
        }
    }
    /**
     * Check if the current InsurancePlanCoverage contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if ((!this["benefit"]) || (this["benefit"].length === 0)) {
            missingElements.push("benefit");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a InsurancePlanCoverage from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new InsurancePlanCoverage(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `InsurancePlanCoverage is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Overall costs associated with the plan.
 */
export class InsurancePlanPlanGeneralCost extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanPlanGeneralCost - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["comment"]) {
            this.comment = source.comment;
        }
        if (source["_comment"]) {
            this._comment = new fhir.FhirElement(source._comment);
        }
        if (source["cost"]) {
            this.cost = new fhir.Money(source.cost);
        }
        if (source["groupSize"]) {
            this.groupSize = source.groupSize;
        }
        if (source["_groupSize"]) {
            this._groupSize = new fhir.FhirElement(source._groupSize);
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current InsurancePlanPlanGeneralCost contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a InsurancePlanPlanGeneralCost from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new InsurancePlanPlanGeneralCost(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `InsurancePlanPlanGeneralCost is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * List of the costs associated with a specific benefit.
 */
export class InsurancePlanPlanSpecificCostBenefitCost extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanPlanSpecificCostBenefitCost - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["applicability"]) {
            this.applicability = new fhir.CodeableConcept(source.applicability);
        }
        if (source["qualifiers"]) {
            this.qualifiers = source.qualifiers.map((x) => new fhir.CodeableConcept(x));
        }
        this.type = null;
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (this.type === undefined) {
            this.type = null;
        }
        if (source["value"]) {
            this.value = new fhir.Quantity(source.value);
        }
    }
    /**
     * Check if the current InsurancePlanPlanSpecificCostBenefitCost contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a InsurancePlanPlanSpecificCostBenefitCost from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new InsurancePlanPlanSpecificCostBenefitCost(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `InsurancePlanPlanSpecificCostBenefitCost is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * List of the specific benefits under this category of benefit.
 */
export class InsurancePlanPlanSpecificCostBenefit extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanPlanSpecificCostBenefit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["cost"]) {
            this.cost = source.cost.map((x) => new fhir.InsurancePlanPlanSpecificCostBenefitCost(x));
        }
        this.type = null;
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (this.type === undefined) {
            this.type = null;
        }
    }
    /**
     * Check if the current InsurancePlanPlanSpecificCostBenefit contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a InsurancePlanPlanSpecificCostBenefit from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new InsurancePlanPlanSpecificCostBenefit(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `InsurancePlanPlanSpecificCostBenefit is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Costs associated with the coverage provided by the product.
 */
export class InsurancePlanPlanSpecificCost extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanPlanSpecificCost - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["benefit"]) {
            this.benefit = source.benefit.map((x) => new fhir.InsurancePlanPlanSpecificCostBenefit(x));
        }
        this.category = null;
        if (source["category"]) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (this.category === undefined) {
            this.category = null;
        }
    }
    /**
     * Check if the current InsurancePlanPlanSpecificCost contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["category"] === undefined) {
            missingElements.push("category");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a InsurancePlanPlanSpecificCost from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new InsurancePlanPlanSpecificCost(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `InsurancePlanPlanSpecificCost is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Details about an insurance plan.
 */
export class InsurancePlanPlan extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanPlan - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["coverageArea"]) {
            this.coverageArea = source.coverageArea.map((x) => new fhir.Reference(x));
        }
        if (source["generalCost"]) {
            this.generalCost = source.generalCost.map((x) => new fhir.InsurancePlanPlanGeneralCost(x));
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["network"]) {
            this.network = source.network.map((x) => new fhir.Reference(x));
        }
        if (source["specificCost"]) {
            this.specificCost = source.specificCost.map((x) => new fhir.InsurancePlanPlanSpecificCost(x));
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current InsurancePlanPlan contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a InsurancePlanPlan from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new InsurancePlanPlan(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `InsurancePlanPlan is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Details of a Health Insurance product/plan provided by an organization.
 */
export class InsurancePlan extends fhir.DomainResource {
    /**
     * Default constructor for InsurancePlan - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'InsurancePlan';
        if (source["administeredBy"]) {
            this.administeredBy = new fhir.Reference(source.administeredBy);
        }
        if (source["alias"]) {
            this.alias = source.alias.map((x) => (x));
        }
        if (source["_alias"]) {
            this._alias = source._alias.map((x) => new fhir.FhirElement(x));
        }
        if (source["contact"]) {
            this.contact = source.contact.map((x) => new fhir.InsurancePlanContact(x));
        }
        if (source["coverage"]) {
            this.coverage = source.coverage.map((x) => new fhir.InsurancePlanCoverage(x));
        }
        if (source["coverageArea"]) {
            this.coverageArea = source.coverageArea.map((x) => new fhir.Reference(x));
        }
        if (source["endpoint"]) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x));
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["network"]) {
            this.network = source.network.map((x) => new fhir.Reference(x));
        }
        if (source["ownedBy"]) {
            this.ownedBy = new fhir.Reference(source.ownedBy);
        }
        if (source["period"]) {
            this.period = new fhir.Period(source.period);
        }
        if (source["plan"]) {
            this.plan = source.plan.map((x) => new fhir.InsurancePlanPlan(x));
        }
        if (source["status"]) {
            this.status = source.status;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["type"]) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
    }
    /**
     * Check if the current InsurancePlan contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a InsurancePlan from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new InsurancePlan(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `InsurancePlan is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the InsurancePlan.status field
 */
export var InsurancePlanStatusEnum;
(function (InsurancePlanStatusEnum) {
    InsurancePlanStatusEnum["DRAFT"] = "draft";
    InsurancePlanStatusEnum["ACTIVE"] = "active";
    InsurancePlanStatusEnum["RETIRED"] = "retired";
    InsurancePlanStatusEnum["UNKNOWN"] = "unknown";
})(InsurancePlanStatusEnum || (InsurancePlanStatusEnum = {}));
//# sourceMappingURL=InsurancePlan.js.map