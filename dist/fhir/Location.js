// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).
 */
export class LocationPosition extends fhir.BackboneElement {
    /**
     * Default constructor for LocationPosition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["altitude"]) {
            this.altitude = source.altitude;
        }
        if (source["_altitude"]) {
            this._altitude = new fhir.FhirElement(source._altitude);
        }
        this.latitude = null;
        if (source["latitude"]) {
            this.latitude = source.latitude;
        }
        if (this.latitude === undefined) {
            this.latitude = null;
        }
        if (source["_latitude"]) {
            this._latitude = new fhir.FhirElement(source._latitude);
        }
        this.longitude = null;
        if (source["longitude"]) {
            this.longitude = source.longitude;
        }
        if (this.longitude === undefined) {
            this.longitude = null;
        }
        if (source["_longitude"]) {
            this._longitude = new fhir.FhirElement(source._longitude);
        }
    }
    /**
     * Check if the current LocationPosition contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["latitude"] === undefined) {
            missingElements.push("latitude");
        }
        if (this["longitude"] === undefined) {
            missingElements.push("longitude");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a LocationPosition from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new LocationPosition(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `LocationPosition is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * This type of information is commonly found published in directories and on websites informing customers when the facility is available.
 * Specific services within the location may have their own hours which could be shorter (or longer) than the locations hours.
 */
export class LocationHoursOfOperation extends fhir.BackboneElement {
    /**
     * Default constructor for LocationHoursOfOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["allDay"]) {
            this.allDay = source.allDay;
        }
        if (source["_allDay"]) {
            this._allDay = new fhir.FhirElement(source._allDay);
        }
        if (source["closingTime"]) {
            this.closingTime = source.closingTime;
        }
        if (source["_closingTime"]) {
            this._closingTime = new fhir.FhirElement(source._closingTime);
        }
        if (source["daysOfWeek"]) {
            this.daysOfWeek = source.daysOfWeek.map((x) => (x));
        }
        if (source["_daysOfWeek"]) {
            this._daysOfWeek = source._daysOfWeek.map((x) => new fhir.FhirElement(x));
        }
        if (source["openingTime"]) {
            this.openingTime = source.openingTime;
        }
        if (source["_openingTime"]) {
            this._openingTime = new fhir.FhirElement(source._openingTime);
        }
    }
    /**
     * Check if the current LocationHoursOfOperation contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a LocationHoursOfOperation from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new LocationHoursOfOperation(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `LocationHoursOfOperation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Details and position information for a physical place where services are provided and resources and participants may be stored, found, contained, or accommodated.
 */
export class Location extends fhir.DomainResource {
    /**
     * Default constructor for Location - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Location';
        if (source["address"]) {
            this.address = new fhir.Address(source.address);
        }
        if (source["alias"]) {
            this.alias = source.alias.map((x) => (x));
        }
        if (source["_alias"]) {
            this._alias = source._alias.map((x) => new fhir.FhirElement(x));
        }
        if (source["availabilityExceptions"]) {
            this.availabilityExceptions = source.availabilityExceptions;
        }
        if (source["_availabilityExceptions"]) {
            this._availabilityExceptions = new fhir.FhirElement(source._availabilityExceptions);
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["endpoint"]) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x));
        }
        if (source["hoursOfOperation"]) {
            this.hoursOfOperation = source.hoursOfOperation.map((x) => new fhir.LocationHoursOfOperation(x));
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["managingOrganization"]) {
            this.managingOrganization = new fhir.Reference(source.managingOrganization);
        }
        if (source["mode"]) {
            this.mode = source.mode;
        }
        if (source["_mode"]) {
            this._mode = new fhir.FhirElement(source._mode);
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["operationalStatus"]) {
            this.operationalStatus = new fhir.Coding(source.operationalStatus);
        }
        if (source["partOf"]) {
            this.partOf = new fhir.Reference(source.partOf);
        }
        if (source["physicalType"]) {
            this.physicalType = new fhir.CodeableConcept(source.physicalType);
        }
        if (source["position"]) {
            this.position = new fhir.LocationPosition(source.position);
        }
        if (source["status"]) {
            this.status = source.status;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["telecom"]) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        if (source["type"]) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
    }
    /**
     * Check if the current Location contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Location from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new Location(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `Location is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the Location.hoursOfOperation.daysOfWeek field
 */
export var LocationHoursOfOperationDaysOfWeekEnum;
(function (LocationHoursOfOperationDaysOfWeekEnum) {
    LocationHoursOfOperationDaysOfWeekEnum["MON"] = "mon";
    LocationHoursOfOperationDaysOfWeekEnum["TUE"] = "tue";
    LocationHoursOfOperationDaysOfWeekEnum["WED"] = "wed";
    LocationHoursOfOperationDaysOfWeekEnum["THU"] = "thu";
    LocationHoursOfOperationDaysOfWeekEnum["FRI"] = "fri";
    LocationHoursOfOperationDaysOfWeekEnum["SAT"] = "sat";
    LocationHoursOfOperationDaysOfWeekEnum["SUN"] = "sun";
})(LocationHoursOfOperationDaysOfWeekEnum || (LocationHoursOfOperationDaysOfWeekEnum = {}));
/**
 * Code Values for the Location.mode field
 */
export var LocationModeEnum;
(function (LocationModeEnum) {
    LocationModeEnum["INSTANCE"] = "instance";
    LocationModeEnum["KIND"] = "kind";
})(LocationModeEnum || (LocationModeEnum = {}));
/**
 * Code Values for the Location.status field
 */
export var LocationStatusEnum;
(function (LocationStatusEnum) {
    LocationStatusEnum["ACTIVE"] = "active";
    LocationStatusEnum["SUSPENDED"] = "suspended";
    LocationStatusEnum["INACTIVE"] = "inactive";
})(LocationStatusEnum || (LocationStatusEnum = {}));
//# sourceMappingURL=Location.js.map