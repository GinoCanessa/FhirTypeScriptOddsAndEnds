// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Location
import * as fhir from '../fhir.js';
import { DaysOfWeekValueSet } from '../fhirValueSets/DaysOfWeekValueSet.js';
import { LocationStatusValueSet } from '../fhirValueSets/LocationStatusValueSet.js';
import { V20116ValueSet } from '../fhirValueSets/V20116ValueSet.js';
import { LocationModeValueSet } from '../fhirValueSets/LocationModeValueSet.js';
import { V3ServiceDeliveryLocationRoleTypeValueSet } from '../fhirValueSets/V3ServiceDeliveryLocationRoleTypeValueSet.js';
import { LocationPhysicalTypeValueSet } from '../fhirValueSets/LocationPhysicalTypeValueSet.js';
/**
 * The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).
 */
export class LocationPosition extends fhir.BackboneElement {
    /**
     * Default constructor for LocationPosition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['longitude']) {
            this.longitude = source.longitude;
        }
        else {
            this.longitude = null;
        }
        if (source['_longitude']) {
            this._longitude = new fhir.FhirElement(source._longitude);
        }
        if (source['latitude']) {
            this.latitude = source.latitude;
        }
        else {
            this.latitude = null;
        }
        if (source['_latitude']) {
            this._latitude = new fhir.FhirElement(source._latitude);
        }
        if (source['altitude']) {
            this.altitude = source.altitude;
        }
        if (source['_altitude']) {
            this._altitude = new fhir.FhirElement(source._altitude);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["longitude"]) {
            results.push(["longitude", 'Missing required element: Location.position.longitude']);
        }
        if (this["_longitude"]) {
            results.push(...this._longitude.doModelValidation());
        }
        if (!this["latitude"]) {
            results.push(["latitude", 'Missing required element: Location.position.latitude']);
        }
        if (this["_latitude"]) {
            results.push(...this._latitude.doModelValidation());
        }
        if (this["_altitude"]) {
            results.push(...this._altitude.doModelValidation());
        }
        return results;
    }
}
/**
 * This type of information is commonly found published in directories and on websites informing customers when the facility is available.
 * Specific services within the location may have their own hours which could be shorter (or longer) than the locations hours.
 */
export class LocationHoursOfOperation extends fhir.BackboneElement {
    /**
     * Default constructor for LocationHoursOfOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['daysOfWeek']) {
            this.daysOfWeek = source.daysOfWeek.map((x) => (x));
        }
        if (source['_daysOfWeek']) {
            this._daysOfWeek = source._daysOfWeek.map((x) => new fhir.FhirElement(x));
        }
        if (source['allDay']) {
            this.allDay = source.allDay;
        }
        if (source['_allDay']) {
            this._allDay = new fhir.FhirElement(source._allDay);
        }
        if (source['openingTime']) {
            this.openingTime = source.openingTime;
        }
        if (source['_openingTime']) {
            this._openingTime = new fhir.FhirElement(source._openingTime);
        }
        if (source['closingTime']) {
            this.closingTime = source.closingTime;
        }
        if (source['_closingTime']) {
            this._closingTime = new fhir.FhirElement(source._closingTime);
        }
    }
    /**
     * Required-bound Value Set for daysOfWeek
     */
    daysOfWeekRequiredValueSet() {
        return DaysOfWeekValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_daysOfWeek"]) {
            this._daysOfWeek.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_allDay"]) {
            results.push(...this._allDay.doModelValidation());
        }
        if (this["_openingTime"]) {
            results.push(...this._openingTime.doModelValidation());
        }
        if (this["_closingTime"]) {
            results.push(...this._closingTime.doModelValidation());
        }
        return results;
    }
}
/**
 * Details and position information for a physical place where services are provided and resources and participants may be stored, found, contained, or accommodated.
 */
export class Location extends fhir.DomainResource {
    /**
     * Default constructor for Location - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Location';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['operationalStatus']) {
            this.operationalStatus = new fhir.Coding(source.operationalStatus);
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['alias']) {
            this.alias = source.alias.map((x) => (x));
        }
        if (source['_alias']) {
            this._alias = source._alias.map((x) => new fhir.FhirElement(x));
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['mode']) {
            this.mode = source.mode;
        }
        if (source['_mode']) {
            this._mode = new fhir.FhirElement(source._mode);
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        if (source['address']) {
            this.address = new fhir.Address(source.address);
        }
        if (source['physicalType']) {
            this.physicalType = new fhir.CodeableConcept(source.physicalType);
        }
        if (source['position']) {
            this.position = new fhir.LocationPosition(source.position);
        }
        if (source['managingOrganization']) {
            this.managingOrganization = new fhir.Reference(source.managingOrganization);
        }
        if (source['partOf']) {
            this.partOf = new fhir.Reference(source.partOf);
        }
        if (source['hoursOfOperation']) {
            this.hoursOfOperation = source.hoursOfOperation.map((x) => new fhir.LocationHoursOfOperation(x));
        }
        if (source['availabilityExceptions']) {
            this.availabilityExceptions = source.availabilityExceptions;
        }
        if (source['_availabilityExceptions']) {
            this._availabilityExceptions = new fhir.FhirElement(source._availabilityExceptions);
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return LocationStatusValueSet;
    }
    /**
     * Preferred-bound Value Set for operationalStatus
     */
    operationalStatusPreferredValueSet() {
        return V20116ValueSet;
    }
    /**
     * Required-bound Value Set for mode
     */
    modeRequiredValueSet() {
        return LocationModeValueSet;
    }
    /**
     * Extensible-bound Value Set for type
     */
    typeExtensibleValueSet() {
        return V3ServiceDeliveryLocationRoleTypeValueSet;
    }
    /**
     * Example-bound Value Set for physicalType
     */
    physicalTypeExampleValueSet() {
        return LocationPhysicalTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: Location.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["operationalStatus"]) {
            results.push(...this.operationalStatus.doModelValidation());
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_alias"]) {
            this._alias.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["_mode"]) {
            results.push(...this._mode.doModelValidation());
        }
        if (this["type"]) {
            this.type.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["telecom"]) {
            this.telecom.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["address"]) {
            results.push(...this.address.doModelValidation());
        }
        if (this["physicalType"]) {
            results.push(...this.physicalType.doModelValidation());
        }
        if (this["position"]) {
            results.push(...this.position.doModelValidation());
        }
        if (this["managingOrganization"]) {
            results.push(...this.managingOrganization.doModelValidation());
        }
        if (this["partOf"]) {
            results.push(...this.partOf.doModelValidation());
        }
        if (this["hoursOfOperation"]) {
            this.hoursOfOperation.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_availabilityExceptions"]) {
            results.push(...this._availabilityExceptions.doModelValidation());
        }
        if (this["endpoint"]) {
            this.endpoint.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=Location.js.map