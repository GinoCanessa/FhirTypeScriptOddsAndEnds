// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
 */
export class FamilyMemberHistoryCondition extends fhir.BackboneElement {
    /**
     * Default constructor for FamilyMemberHistoryCondition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.code = null;
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (this.code === undefined) {
            this.code = null;
        }
        if (source["contributedToDeath"]) {
            this.contributedToDeath = source.contributedToDeath;
        }
        if (source["_contributedToDeath"]) {
            this._contributedToDeath = new fhir.FhirElement(source._contributedToDeath);
        }
        if (source["note"]) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source["onsetAge"]) {
            this.onsetAge = new fhir.Age(source.onsetAge);
        }
        if (source["onsetRange"]) {
            this.onsetRange = new fhir.Range(source.onsetRange);
        }
        if (source["onsetPeriod"]) {
            this.onsetPeriod = new fhir.Period(source.onsetPeriod);
        }
        if (source["onsetString"]) {
            this.onsetString = source.onsetString;
        }
        if (source["_onsetString"]) {
            this._onsetString = new fhir.FhirElement(source._onsetString);
        }
        if (source["outcome"]) {
            this.outcome = new fhir.CodeableConcept(source.outcome);
        }
    }
    /**
     * Check if the current FamilyMemberHistoryCondition contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a FamilyMemberHistoryCondition from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new FamilyMemberHistoryCondition(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `FamilyMemberHistoryCondition is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Significant health conditions for a person related to the patient relevant in the context of care for the patient.
 */
export class FamilyMemberHistory extends fhir.DomainResource {
    /**
     * Default constructor for FamilyMemberHistory - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'FamilyMemberHistory';
        if (source["ageAge"]) {
            this.ageAge = new fhir.Age(source.ageAge);
        }
        if (source["ageRange"]) {
            this.ageRange = new fhir.Range(source.ageRange);
        }
        if (source["ageString"]) {
            this.ageString = source.ageString;
        }
        if (source["_ageString"]) {
            this._ageString = new fhir.FhirElement(source._ageString);
        }
        if (source["bornPeriod"]) {
            this.bornPeriod = new fhir.Period(source.bornPeriod);
        }
        if (source["bornDate"]) {
            this.bornDate = source.bornDate;
        }
        if (source["_bornDate"]) {
            this._bornDate = new fhir.FhirElement(source._bornDate);
        }
        if (source["bornString"]) {
            this.bornString = source.bornString;
        }
        if (source["_bornString"]) {
            this._bornString = new fhir.FhirElement(source._bornString);
        }
        if (source["condition"]) {
            this.condition = source.condition.map((x) => new fhir.FamilyMemberHistoryCondition(x));
        }
        if (source["dataAbsentReason"]) {
            this.dataAbsentReason = new fhir.CodeableConcept(source.dataAbsentReason);
        }
        if (source["date"]) {
            this.date = source.date;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["deceasedBoolean"]) {
            this.deceasedBoolean = source.deceasedBoolean;
        }
        if (source["_deceasedBoolean"]) {
            this._deceasedBoolean = new fhir.FhirElement(source._deceasedBoolean);
        }
        if (source["deceasedAge"]) {
            this.deceasedAge = new fhir.Age(source.deceasedAge);
        }
        if (source["deceasedRange"]) {
            this.deceasedRange = new fhir.Range(source.deceasedRange);
        }
        if (source["deceasedDate"]) {
            this.deceasedDate = source.deceasedDate;
        }
        if (source["_deceasedDate"]) {
            this._deceasedDate = new fhir.FhirElement(source._deceasedDate);
        }
        if (source["deceasedString"]) {
            this.deceasedString = source.deceasedString;
        }
        if (source["_deceasedString"]) {
            this._deceasedString = new fhir.FhirElement(source._deceasedString);
        }
        if (source["estimatedAge"]) {
            this.estimatedAge = source.estimatedAge;
        }
        if (source["_estimatedAge"]) {
            this._estimatedAge = new fhir.FhirElement(source._estimatedAge);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["instantiatesCanonical"]) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => (x));
        }
        if (source["_instantiatesCanonical"]) {
            this._instantiatesCanonical = source._instantiatesCanonical.map((x) => new fhir.FhirElement(x));
        }
        if (source["instantiatesUri"]) {
            this.instantiatesUri = source.instantiatesUri.map((x) => (x));
        }
        if (source["_instantiatesUri"]) {
            this._instantiatesUri = source._instantiatesUri.map((x) => new fhir.FhirElement(x));
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["note"]) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        this.patient = null;
        if (source["patient"]) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (this.patient === undefined) {
            this.patient = null;
        }
        if (source["reasonCode"]) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["reasonReference"]) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        this.relationship = null;
        if (source["relationship"]) {
            this.relationship = new fhir.CodeableConcept(source.relationship);
        }
        if (this.relationship === undefined) {
            this.relationship = null;
        }
        if (source["sex"]) {
            this.sex = new fhir.CodeableConcept(source.sex);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
    }
    /**
     * Check if the current FamilyMemberHistory contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["patient"] === undefined) {
            missingElements.push("patient");
        }
        if (this["relationship"] === undefined) {
            missingElements.push("relationship");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a FamilyMemberHistory from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new FamilyMemberHistory(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `FamilyMemberHistory is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the FamilyMemberHistory.status field
 */
export var FamilyMemberHistoryStatusEnum;
(function (FamilyMemberHistoryStatusEnum) {
    FamilyMemberHistoryStatusEnum["PARTIAL"] = "partial";
    FamilyMemberHistoryStatusEnum["COMPLETED"] = "completed";
    FamilyMemberHistoryStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    FamilyMemberHistoryStatusEnum["HEALTH_UNKNOWN"] = "health-unknown";
})(FamilyMemberHistoryStatusEnum || (FamilyMemberHistoryStatusEnum = {}));
//# sourceMappingURL=FamilyMemberHistory.js.map