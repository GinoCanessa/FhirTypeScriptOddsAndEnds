// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: FamilyMemberHistory
import * as fhir from '../fhir.js';
import { ConditionCodeValueSet } from '../fhirValueSets/ConditionCodeValueSet.js';
import { ConditionOutcomeValueSet } from '../fhirValueSets/ConditionOutcomeValueSet.js';
import { HistoryStatusValueSet } from '../fhirValueSets/HistoryStatusValueSet.js';
import { HistoryAbsentReasonValueSet } from '../fhirValueSets/HistoryAbsentReasonValueSet.js';
import { V3FamilyMemberValueSet } from '../fhirValueSets/V3FamilyMemberValueSet.js';
import { AdministrativeGenderValueSet } from '../fhirValueSets/AdministrativeGenderValueSet.js';
import { ClinicalFindingsValueSet } from '../fhirValueSets/ClinicalFindingsValueSet.js';
/**
 * The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
 */
export class FamilyMemberHistoryCondition extends fhir.BackboneElement {
    /**
     * Default constructor for FamilyMemberHistoryCondition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['outcome']) {
            this.outcome = new fhir.CodeableConcept(source.outcome);
        }
        if (source['contributedToDeath']) {
            this.contributedToDeath = source.contributedToDeath;
        }
        if (source['_contributedToDeath']) {
            this._contributedToDeath = new fhir.FhirElement(source._contributedToDeath);
        }
        if (source['onsetAge']) {
            this.onsetAge = new fhir.Age(source.onsetAge);
        }
        if (source['onsetRange']) {
            this.onsetRange = new fhir.Range(source.onsetRange);
        }
        if (source['onsetPeriod']) {
            this.onsetPeriod = new fhir.Period(source.onsetPeriod);
        }
        if (source['onsetString']) {
            this.onsetString = source.onsetString;
        }
        if (source['_onsetString']) {
            this._onsetString = new fhir.FhirElement(source._onsetString);
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
    }
    /**
     * Example-bound Value Set for code
     */
    codeExampleValueSet() {
        return ConditionCodeValueSet;
    }
    /**
     * Example-bound Value Set for outcome
     */
    outcomeExampleValueSet() {
        return ConditionOutcomeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["code"]) {
            results.push(["code", 'Missing required element: FamilyMemberHistory.condition.code']);
        }
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["outcome"]) {
            results.push(...this.outcome.doModelValidation());
        }
        if (this["_contributedToDeath"]) {
            results.push(...this._contributedToDeath.doModelValidation());
        }
        if (this["onsetAge"]) {
            results.push(...this.onsetAge.doModelValidation());
        }
        if (this["onsetRange"]) {
            results.push(...this.onsetRange.doModelValidation());
        }
        if (this["onsetPeriod"]) {
            results.push(...this.onsetPeriod.doModelValidation());
        }
        if (this["_onsetString"]) {
            results.push(...this._onsetString.doModelValidation());
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Significant health conditions for a person related to the patient relevant in the context of care for the patient.
 */
export class FamilyMemberHistory extends fhir.DomainResource {
    /**
     * Default constructor for FamilyMemberHistory - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'FamilyMemberHistory';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['instantiatesCanonical']) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => (x));
        }
        if (source['_instantiatesCanonical']) {
            this._instantiatesCanonical = source._instantiatesCanonical.map((x) => new fhir.FhirElement(x));
        }
        if (source['instantiatesUri']) {
            this.instantiatesUri = source.instantiatesUri.map((x) => (x));
        }
        if (source['_instantiatesUri']) {
            this._instantiatesUri = source._instantiatesUri.map((x) => new fhir.FhirElement(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['dataAbsentReason']) {
            this.dataAbsentReason = new fhir.CodeableConcept(source.dataAbsentReason);
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['date']) {
            this.date = source.date;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['relationship']) {
            this.relationship = new fhir.CodeableConcept(source.relationship);
        }
        else {
            this.relationship = null;
        }
        if (source['sex']) {
            this.sex = new fhir.CodeableConcept(source.sex);
        }
        if (source['bornPeriod']) {
            this.bornPeriod = new fhir.Period(source.bornPeriod);
        }
        if (source['bornDate']) {
            this.bornDate = source.bornDate;
        }
        if (source['_bornDate']) {
            this._bornDate = new fhir.FhirElement(source._bornDate);
        }
        if (source['bornString']) {
            this.bornString = source.bornString;
        }
        if (source['_bornString']) {
            this._bornString = new fhir.FhirElement(source._bornString);
        }
        if (source['ageAge']) {
            this.ageAge = new fhir.Age(source.ageAge);
        }
        if (source['ageRange']) {
            this.ageRange = new fhir.Range(source.ageRange);
        }
        if (source['ageString']) {
            this.ageString = source.ageString;
        }
        if (source['_ageString']) {
            this._ageString = new fhir.FhirElement(source._ageString);
        }
        if (source['estimatedAge']) {
            this.estimatedAge = source.estimatedAge;
        }
        if (source['_estimatedAge']) {
            this._estimatedAge = new fhir.FhirElement(source._estimatedAge);
        }
        if (source['deceasedBoolean']) {
            this.deceasedBoolean = source.deceasedBoolean;
        }
        if (source['_deceasedBoolean']) {
            this._deceasedBoolean = new fhir.FhirElement(source._deceasedBoolean);
        }
        if (source['deceasedAge']) {
            this.deceasedAge = new fhir.Age(source.deceasedAge);
        }
        if (source['deceasedRange']) {
            this.deceasedRange = new fhir.Range(source.deceasedRange);
        }
        if (source['deceasedDate']) {
            this.deceasedDate = source.deceasedDate;
        }
        if (source['_deceasedDate']) {
            this._deceasedDate = new fhir.FhirElement(source._deceasedDate);
        }
        if (source['deceasedString']) {
            this.deceasedString = source.deceasedString;
        }
        if (source['_deceasedString']) {
            this._deceasedString = new fhir.FhirElement(source._deceasedString);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['condition']) {
            this.condition = source.condition.map((x) => new fhir.FamilyMemberHistoryCondition(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return HistoryStatusValueSet;
    }
    /**
     * Example-bound Value Set for dataAbsentReason
     */
    dataAbsentReasonExampleValueSet() {
        return HistoryAbsentReasonValueSet;
    }
    /**
     * Example-bound Value Set for relationship
     */
    relationshipExampleValueSet() {
        return V3FamilyMemberValueSet;
    }
    /**
     * Extensible-bound Value Set for sex
     */
    sexExtensibleValueSet() {
        return AdministrativeGenderValueSet;
    }
    /**
     * Example-bound Value Set for reasonCode
     */
    reasonCodeExampleValueSet() {
        return ClinicalFindingsValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: FamilyMemberHistory.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_instantiatesCanonical"]) {
            this._instantiatesCanonical.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_instantiatesUri"]) {
            this._instantiatesUri.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: FamilyMemberHistory.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["dataAbsentReason"]) {
            results.push(...this.dataAbsentReason.doModelValidation());
        }
        if (!this["patient"]) {
            results.push(["patient", 'Missing required element: FamilyMemberHistory.patient']);
        }
        if (this["patient"]) {
            results.push(...this.patient.doModelValidation());
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (!this["relationship"]) {
            results.push(["relationship", 'Missing required element: FamilyMemberHistory.relationship']);
        }
        if (this["relationship"]) {
            results.push(...this.relationship.doModelValidation());
        }
        if (this["sex"]) {
            results.push(...this.sex.doModelValidation());
        }
        if (this["bornPeriod"]) {
            results.push(...this.bornPeriod.doModelValidation());
        }
        if (this["_bornDate"]) {
            results.push(...this._bornDate.doModelValidation());
        }
        if (this["_bornString"]) {
            results.push(...this._bornString.doModelValidation());
        }
        if (this["ageAge"]) {
            results.push(...this.ageAge.doModelValidation());
        }
        if (this["ageRange"]) {
            results.push(...this.ageRange.doModelValidation());
        }
        if (this["_ageString"]) {
            results.push(...this._ageString.doModelValidation());
        }
        if (this["_estimatedAge"]) {
            results.push(...this._estimatedAge.doModelValidation());
        }
        if (this["_deceasedBoolean"]) {
            results.push(...this._deceasedBoolean.doModelValidation());
        }
        if (this["deceasedAge"]) {
            results.push(...this.deceasedAge.doModelValidation());
        }
        if (this["deceasedRange"]) {
            results.push(...this.deceasedRange.doModelValidation());
        }
        if (this["_deceasedDate"]) {
            results.push(...this._deceasedDate.doModelValidation());
        }
        if (this["_deceasedString"]) {
            results.push(...this._deceasedString.doModelValidation());
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["condition"]) {
            this.condition.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=FamilyMemberHistory.js.map