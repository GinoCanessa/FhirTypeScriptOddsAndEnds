// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: OrganizationAffiliation
import * as fhir from '../fhir.js';
import { OrganizationRoleValueSet } from '../fhirValueSets/OrganizationRoleValueSet.js';
import { C80PracticeCodesValueSet } from '../fhirValueSets/C80PracticeCodesValueSet.js';
/**
 * Defines an affiliation/assotiation/relationship between 2 distinct oganizations, that is not a part-of relationship/sub-division relationship.
 */
export class OrganizationAffiliation extends fhir.DomainResource {
    /**
     * Default constructor for OrganizationAffiliation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'OrganizationAffiliation';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['active']) {
            this.active = source.active;
        }
        if (source['_active']) {
            this._active = new fhir.FhirElement(source._active);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['organization']) {
            this.organization = new fhir.Reference(source.organization);
        }
        if (source['participatingOrganization']) {
            this.participatingOrganization = new fhir.Reference(source.participatingOrganization);
        }
        if (source['network']) {
            this.network = source.network.map((x) => new fhir.Reference(x));
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['specialty']) {
            this.specialty = source.specialty.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['location']) {
            this.location = source.location.map((x) => new fhir.Reference(x));
        }
        if (source['healthcareService']) {
            this.healthcareService = source.healthcareService.map((x) => new fhir.Reference(x));
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Example-bound Value Set for code
     */
    codeExampleValueSet() {
        return OrganizationRoleValueSet;
    }
    /**
     * Preferred-bound Value Set for specialty
     */
    specialtyPreferredValueSet() {
        return C80PracticeCodesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: OrganizationAffiliation.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_active"]) {
            results.push(...this._active.doModelValidation());
        }
        if (this["period"]) {
            results.push(...this.period.doModelValidation());
        }
        if (this["organization"]) {
            results.push(...this.organization.doModelValidation());
        }
        if (this["participatingOrganization"]) {
            results.push(...this.participatingOrganization.doModelValidation());
        }
        if (this["network"]) {
            this.network.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["code"]) {
            this.code.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["specialty"]) {
            this.specialty.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["location"]) {
            this.location.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["healthcareService"]) {
            this.healthcareService.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["telecom"]) {
            this.telecom.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["endpoint"]) {
            this.endpoint.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=OrganizationAffiliation.js.map