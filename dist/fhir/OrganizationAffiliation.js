// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: OrganizationAffiliation
import * as fhir from '../fhir.js';
import { OrganizationRoleValueSet, } from '../fhirValueSets/OrganizationRoleValueSet.js';
import { C80PracticeCodesValueSet, } from '../fhirValueSets/C80PracticeCodesValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Defines an affiliation/assotiation/relationship between 2 distinct oganizations, that is not a part-of relationship/sub-division relationship.
 */
export class OrganizationAffiliation extends fhir.DomainResource {
    /**
     * Default constructor for OrganizationAffiliation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'OrganizationAffiliation';
        /**
         * Business identifiers that are specific to this role.
         */
        this.identifier = [];
        /**
         * Health insurance provider network in which the participatingOrganization provides the role's services (if defined) at the indicated locations (if defined).
         */
        this.network = [];
        /**
         * Definition of the role the participatingOrganization plays in the association.
         */
        this.code = [];
        /**
         * Specific specialty of the participatingOrganization in the context of the role.
         */
        this.specialty = [];
        /**
         * The location(s) at which the role occurs.
         */
        this.location = [];
        /**
         * Healthcare services provided through the role.
         */
        this.healthcareService = [];
        /**
         * Contact details at the participatingOrganization relevant to this Affiliation.
         */
        this.telecom = [];
        /**
         * Technical endpoints providing access to services operated for this role.
         */
        this.endpoint = [];
        this.resourceType = 'OrganizationAffiliation';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['active']) {
            this.active = new fhir.FhirBoolean({ value: source.active });
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['organization']) {
            this.organization = new fhir.Reference(source.organization);
        }
        if (source['participatingOrganization']) {
            this.participatingOrganization = new fhir.Reference(source.participatingOrganization);
        }
        if (source['network']) {
            this.network = source.network.map((x) => new fhir.Reference(x));
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['specialty']) {
            this.specialty = source.specialty.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['location']) {
            this.location = source.location.map((x) => new fhir.Reference(x));
        }
        if (source['healthcareService']) {
            this.healthcareService = source.healthcareService.map((x) => new fhir.Reference(x));
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Example-bound Value Set for code
     */
    static codeExampleValueSet() {
        return OrganizationRoleValueSet;
    }
    /**
     * Preferred-bound Value Set for specialty
     */
    static specialtyPreferredValueSet() {
        return C80PracticeCodesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'OrganizationAffiliation' fhir: OrganizationAffiliation.resourceType:'OrganizationAffiliation'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["active"]) {
            outcome.issue.push(...this.active.doModelValidation().issue);
        }
        if (this["period"]) {
            outcome.issue.push(...this.period.doModelValidation().issue);
        }
        if (this["organization"]) {
            outcome.issue.push(...this.organization.doModelValidation().issue);
        }
        if (this["participatingOrganization"]) {
            outcome.issue.push(...this.participatingOrganization.doModelValidation().issue);
        }
        if (this["network"]) {
            this.network.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["code"]) {
            this.code.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["specialty"]) {
            this.specialty.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["location"]) {
            this.location.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["healthcareService"]) {
            this.healthcareService.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["telecom"]) {
            this.telecom.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["endpoint"]) {
            this.endpoint.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=OrganizationAffiliation.js.map