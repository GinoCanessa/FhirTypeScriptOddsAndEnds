// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
 */
export class AppointmentResponse extends fhir.DomainResource {
    /**
     * Default constructor for AppointmentResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'AppointmentResponse';
        if (source["actor"]) {
            this.actor = new fhir.Reference(source.actor);
        }
        this.appointment = null;
        if (source["appointment"]) {
            this.appointment = new fhir.Reference(source.appointment);
        }
        if (this.appointment === undefined) {
            this.appointment = null;
        }
        if (source["comment"]) {
            this.comment = source.comment;
        }
        if (source["_comment"]) {
            this._comment = new fhir.FhirElement(source._comment);
        }
        if (source["end"]) {
            this.end = source.end;
        }
        if (source["_end"]) {
            this._end = new fhir.FhirElement(source._end);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        this.participantStatus = null;
        if (source["participantStatus"]) {
            this.participantStatus = source.participantStatus;
        }
        if (this.participantStatus === undefined) {
            this.participantStatus = null;
        }
        if (source["_participantStatus"]) {
            this._participantStatus = new fhir.FhirElement(source._participantStatus);
        }
        if (source["participantType"]) {
            this.participantType = source.participantType.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["start"]) {
            this.start = source.start;
        }
        if (source["_start"]) {
            this._start = new fhir.FhirElement(source._start);
        }
    }
    /**
     * Check if the current AppointmentResponse contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["appointment"] === undefined) {
            missingElements.push("appointment");
        }
        if (this["participantStatus"] === undefined) {
            missingElements.push("participantStatus");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a AppointmentResponse from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new AppointmentResponse(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `AppointmentResponse is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the AppointmentResponse.participantStatus field
 */
export var AppointmentResponseParticipantStatusEnum;
(function (AppointmentResponseParticipantStatusEnum) {
    AppointmentResponseParticipantStatusEnum["ACCEPTED"] = "accepted";
    AppointmentResponseParticipantStatusEnum["DECLINED"] = "declined";
    AppointmentResponseParticipantStatusEnum["TENTATIVE"] = "tentative";
    AppointmentResponseParticipantStatusEnum["NEEDS_ACTION"] = "needs-action";
})(AppointmentResponseParticipantStatusEnum || (AppointmentResponseParticipantStatusEnum = {}));
//# sourceMappingURL=AppointmentResponse.js.map