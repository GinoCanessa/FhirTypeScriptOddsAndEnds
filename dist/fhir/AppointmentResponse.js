// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: AppointmentResponse
import * as fhir from '../fhir.js';
import { EncounterParticipantTypeValueSet } from '../fhirValueSets/EncounterParticipantTypeValueSet.js';
import { ParticipationstatusValueSet } from '../fhirValueSets/ParticipationstatusValueSet.js';
/**
 * A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
 */
export class AppointmentResponse extends fhir.DomainResource {
    /**
     * Default constructor for AppointmentResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'AppointmentResponse';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['appointment']) {
            this.appointment = new fhir.Reference(source.appointment);
        }
        else {
            this.appointment = null;
        }
        if (source['start']) {
            this.start = source.start;
        }
        if (source['_start']) {
            this._start = new fhir.FhirElement(source._start);
        }
        if (source['end']) {
            this.end = source.end;
        }
        if (source['_end']) {
            this._end = new fhir.FhirElement(source._end);
        }
        if (source['participantType']) {
            this.participantType = source.participantType.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        if (source['participantStatus']) {
            this.participantStatus = source.participantStatus;
        }
        else {
            this.participantStatus = null;
        }
        if (source['_participantStatus']) {
            this._participantStatus = new fhir.FhirElement(source._participantStatus);
        }
        if (source['comment']) {
            this.comment = source.comment;
        }
        if (source['_comment']) {
            this._comment = new fhir.FhirElement(source._comment);
        }
    }
    /**
     * Extensible-bound Value Set for participantType
     */
    static participantTypeExtensibleValueSet() {
        return EncounterParticipantTypeValueSet;
    }
    /**
     * Required-bound Value Set for participantStatus
     */
    static participantStatusRequiredValueSet() {
        return ParticipationstatusValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: AppointmentResponse.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["appointment"]) {
            results.push(["appointment", 'Missing required element: AppointmentResponse.appointment']);
        }
        if (this["appointment"]) {
            results.push(...this.appointment.doModelValidation());
        }
        if (this["_start"]) {
            results.push(...this._start.doModelValidation());
        }
        if (this["_end"]) {
            results.push(...this._end.doModelValidation());
        }
        if (this["participantType"]) {
            this.participantType.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["actor"]) {
            results.push(...this.actor.doModelValidation());
        }
        if (!this["participantStatus"]) {
            results.push(["participantStatus", 'Missing required element: AppointmentResponse.participantStatus']);
        }
        if (this["_participantStatus"]) {
            results.push(...this._participantStatus.doModelValidation());
        }
        if (this["_comment"]) {
            results.push(...this._comment.doModelValidation());
        }
        return results;
    }
}
//# sourceMappingURL=AppointmentResponse.js.map