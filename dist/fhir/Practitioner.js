// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Practitioner
import * as fhir from '../fhir.js';
import { V2270360ValueSet } from '../fhirValueSets/V2270360ValueSet.js';
import { AdministrativeGenderValueSet } from '../fhirValueSets/AdministrativeGenderValueSet.js';
import { LanguagesValueSet } from '../fhirValueSets/LanguagesValueSet.js';
/**
 * The official certifications, training, and licenses that authorize or otherwise pertain to the provision of care by the practitioner.  For example, a medical license issued by a medical board authorizing the practitioner to practice medicine within a certian locality.
 */
export class PractitionerQualification extends fhir.BackboneElement {
    /**
     * Default constructor for PractitionerQualification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['issuer']) {
            this.issuer = new fhir.Reference(source.issuer);
        }
    }
    /**
     * Example-bound Value Set for code
     */
    codeExampleValueSet() {
        return V2270360ValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["code"]) {
            results.push(["code", 'Missing required element: Practitioner.qualification.code']);
        }
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["period"]) {
            results.push(...this.period.doModelValidation());
        }
        if (this["issuer"]) {
            results.push(...this.issuer.doModelValidation());
        }
        return results;
    }
}
/**
 * A person who is directly or indirectly involved in the provisioning of healthcare.
 */
export class Practitioner extends fhir.DomainResource {
    /**
     * Default constructor for Practitioner - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Practitioner';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['active']) {
            this.active = source.active;
        }
        if (source['_active']) {
            this._active = new fhir.FhirElement(source._active);
        }
        if (source['name']) {
            this.name = source.name.map((x) => new fhir.HumanName(x));
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        if (source['address']) {
            this.address = source.address.map((x) => new fhir.Address(x));
        }
        if (source['gender']) {
            this.gender = source.gender;
        }
        if (source['_gender']) {
            this._gender = new fhir.FhirElement(source._gender);
        }
        if (source['birthDate']) {
            this.birthDate = source.birthDate;
        }
        if (source['_birthDate']) {
            this._birthDate = new fhir.FhirElement(source._birthDate);
        }
        if (source['photo']) {
            this.photo = source.photo.map((x) => new fhir.Attachment(x));
        }
        if (source['qualification']) {
            this.qualification = source.qualification.map((x) => new fhir.PractitionerQualification(x));
        }
        if (source['communication']) {
            this.communication = source.communication.map((x) => new fhir.CodeableConcept(x));
        }
    }
    /**
     * Required-bound Value Set for gender
     */
    genderRequiredValueSet() {
        return AdministrativeGenderValueSet;
    }
    /**
     * Preferred-bound Value Set for communication
     */
    communicationPreferredValueSet() {
        return LanguagesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: Practitioner.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_active"]) {
            results.push(...this._active.doModelValidation());
        }
        if (this["name"]) {
            this.name.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["telecom"]) {
            this.telecom.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["address"]) {
            this.address.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_gender"]) {
            results.push(...this._gender.doModelValidation());
        }
        if (this["_birthDate"]) {
            results.push(...this._birthDate.doModelValidation());
        }
        if (this["photo"]) {
            this.photo.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["qualification"]) {
            this.qualification.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["communication"]) {
            this.communication.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=Practitioner.js.map