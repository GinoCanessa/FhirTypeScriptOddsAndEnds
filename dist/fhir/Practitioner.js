// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * The official certifications, training, and licenses that authorize or otherwise pertain to the provision of care by the practitioner.  For example, a medical license issued by a medical board authorizing the practitioner to practice medicine within a certian locality.
 */
export class PractitionerQualification extends fhir.BackboneElement {
    /**
     * Default constructor for PractitionerQualification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.code = null;
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (this.code === undefined) {
            this.code = null;
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["issuer"]) {
            this.issuer = new fhir.Reference(source.issuer);
        }
        if (source["period"]) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Check if the current PractitionerQualification contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a PractitionerQualification from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new PractitionerQualification(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `PractitionerQualification is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A person who is directly or indirectly involved in the provisioning of healthcare.
 */
export class Practitioner extends fhir.DomainResource {
    /**
     * Default constructor for Practitioner - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Practitioner';
        if (source["active"]) {
            this.active = source.active;
        }
        if (source["_active"]) {
            this._active = new fhir.FhirElement(source._active);
        }
        if (source["address"]) {
            this.address = source.address.map((x) => new fhir.Address(x));
        }
        if (source["birthDate"]) {
            this.birthDate = source.birthDate;
        }
        if (source["_birthDate"]) {
            this._birthDate = new fhir.FhirElement(source._birthDate);
        }
        if (source["communication"]) {
            this.communication = source.communication.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["gender"]) {
            this.gender = source.gender;
        }
        if (source["_gender"]) {
            this._gender = new fhir.FhirElement(source._gender);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["name"]) {
            this.name = source.name.map((x) => new fhir.HumanName(x));
        }
        if (source["photo"]) {
            this.photo = source.photo.map((x) => new fhir.Attachment(x));
        }
        if (source["qualification"]) {
            this.qualification = source.qualification.map((x) => new fhir.PractitionerQualification(x));
        }
        if (source["telecom"]) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
    }
    /**
     * Check if the current Practitioner contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Practitioner from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new Practitioner(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `Practitioner is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the Practitioner.gender field
 */
export var PractitionerGenderEnum;
(function (PractitionerGenderEnum) {
    PractitionerGenderEnum["MALE"] = "male";
    PractitionerGenderEnum["FEMALE"] = "female";
    PractitionerGenderEnum["OTHER"] = "other";
    PractitionerGenderEnum["UNKNOWN"] = "unknown";
})(PractitionerGenderEnum || (PractitionerGenderEnum = {}));
//# sourceMappingURL=Practitioner.js.map