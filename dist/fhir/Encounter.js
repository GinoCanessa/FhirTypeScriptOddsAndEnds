// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Encounter
import * as fhir from '../fhir.js';
import { EncounterStatusValueSet, } from '../fhirValueSets/EncounterStatusValueSet.js';
import { V3ActEncounterCodeValueSet, } from '../fhirValueSets/V3ActEncounterCodeValueSet.js';
import { EncounterParticipantTypeValueSet, } from '../fhirValueSets/EncounterParticipantTypeValueSet.js';
import { DiagnosisRoleValueSet, } from '../fhirValueSets/DiagnosisRoleValueSet.js';
import { EncounterAdmitSourceValueSet, } from '../fhirValueSets/EncounterAdmitSourceValueSet.js';
import { V20092ValueSet, } from '../fhirValueSets/V20092ValueSet.js';
import { EncounterDietValueSet, } from '../fhirValueSets/EncounterDietValueSet.js';
import { EncounterSpecialCourtesyValueSet, } from '../fhirValueSets/EncounterSpecialCourtesyValueSet.js';
import { EncounterSpecialArrangementsValueSet, } from '../fhirValueSets/EncounterSpecialArrangementsValueSet.js';
import { EncounterDischargeDispositionValueSet, } from '../fhirValueSets/EncounterDischargeDispositionValueSet.js';
import { EncounterLocationStatusValueSet, } from '../fhirValueSets/EncounterLocationStatusValueSet.js';
import { LocationPhysicalTypeValueSet, } from '../fhirValueSets/LocationPhysicalTypeValueSet.js';
import { EncounterTypeValueSet, } from '../fhirValueSets/EncounterTypeValueSet.js';
import { ServiceTypeValueSet, } from '../fhirValueSets/ServiceTypeValueSet.js';
import { V3ActPriorityValueSet, } from '../fhirValueSets/V3ActPriorityValueSet.js';
import { EncounterReasonValueSet, } from '../fhirValueSets/EncounterReasonValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * The current status is always found in the current version of the resource, not the status history.
 */
export class EncounterStatusHistory extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterStatusHistory - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'EncounterStatusHistory';
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        else {
            this.period = null;
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return EncounterStatusValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:EncounterStatusValueSetEnum fhir: Encounter.statusHistory.status:code", }));
        }
        if (!this['period']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property period:fhir.Period fhir: Encounter.statusHistory.period:Period", }));
        }
        if (this["period"]) {
            outcome.issue.push(...this.period.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * The class history permits the tracking of the encounters transitions without needing to go  through the resource history.  This would be used for a case where an admission starts of as an emergency encounter, then transitions into an inpatient scenario. Doing this and not restarting a new encounter ensures that any lab/diagnostic results can more easily follow the patient and not require re-processing and not get lost or cancelled during a kind of discharge from emergency to inpatient.
 */
export class EncounterClassHistory extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterClassHistory - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'EncounterClassHistory';
        if (source['class']) {
            this.class = new fhir.Coding(source.class);
        }
        else {
            this.class = null;
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        else {
            this.period = null;
        }
    }
    /**
     * Extensible-bound Value Set for class
     */
    static classExtensibleValueSet() {
        return V3ActEncounterCodeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['class']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property class:fhir.Coding fhir: Encounter.classHistory.class:Coding", }));
        }
        if (this["class"]) {
            outcome.issue.push(...this.class.doModelValidation().issue);
        }
        if (!this['period']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property period:fhir.Period fhir: Encounter.classHistory.period:Period", }));
        }
        if (this["period"]) {
            outcome.issue.push(...this.period.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * The list of people responsible for providing the service.
 */
export class EncounterParticipant extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterParticipant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'EncounterParticipant';
        /**
         * The participant type indicates how an individual participates in an encounter. It includes non-practitioner participants, and for practitioners this is to describe the action type in the context of this encounter (e.g. Admitting Dr, Attending Dr, Translator, Consulting Dr). This is different to the practitioner roles which are functional roles, derived from terms of employment, education, licensing, etc.
         */
        this.type = [];
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['individual']) {
            this.individual = new fhir.Reference(source.individual);
        }
    }
    /**
     * Extensible-bound Value Set for type
     */
    static typeExtensibleValueSet() {
        return EncounterParticipantTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["type"]) {
            this.type.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["period"]) {
            outcome.issue.push(...this.period.doModelValidation().issue);
        }
        if (this["individual"]) {
            outcome.issue.push(...this.individual.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * The list of diagnosis relevant to this encounter.
 */
export class EncounterDiagnosis extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterDiagnosis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'EncounterDiagnosis';
        if (source['condition']) {
            this.condition = new fhir.Reference(source.condition);
        }
        else {
            this.condition = null;
        }
        if (source['use']) {
            this.use = new fhir.CodeableConcept(source.use);
        }
        if (source['rank']) {
            this.rank = new fhir.FhirPositiveInt({ value: source.rank });
        }
    }
    /**
     * Preferred-bound Value Set for use
     */
    static usePreferredValueSet() {
        return DiagnosisRoleValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['condition']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property condition:fhir.Reference fhir: Encounter.diagnosis.condition:Reference", }));
        }
        if (this["condition"]) {
            outcome.issue.push(...this.condition.doModelValidation().issue);
        }
        if (this["use"]) {
            outcome.issue.push(...this.use.doModelValidation().issue);
        }
        if (this["rank"]) {
            outcome.issue.push(...this.rank.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * An Encounter may cover more than just the inpatient stay. Contexts such as outpatients, community clinics, and aged care facilities are also included.
 * The duration recorded in the period of this encounter covers the entire scope of this hospitalization record.
 */
export class EncounterHospitalization extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterHospitalization - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'EncounterHospitalization';
        /**
         * For example, a patient may request both a dairy-free and nut-free diet preference (not mutually exclusive).
         */
        this.dietPreference = [];
        /**
         * Special courtesies (VIP, board member).
         */
        this.specialCourtesy = [];
        /**
         * Any special requests that have been made for this hospitalization encounter, such as the provision of specific equipment or other things.
         */
        this.specialArrangement = [];
        if (source['preAdmissionIdentifier']) {
            this.preAdmissionIdentifier = new fhir.Identifier(source.preAdmissionIdentifier);
        }
        if (source['origin']) {
            this.origin = new fhir.Reference(source.origin);
        }
        if (source['admitSource']) {
            this.admitSource = new fhir.CodeableConcept(source.admitSource);
        }
        if (source['reAdmission']) {
            this.reAdmission = new fhir.CodeableConcept(source.reAdmission);
        }
        if (source['dietPreference']) {
            this.dietPreference = source.dietPreference.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['specialCourtesy']) {
            this.specialCourtesy = source.specialCourtesy.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['specialArrangement']) {
            this.specialArrangement = source.specialArrangement.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['destination']) {
            this.destination = new fhir.Reference(source.destination);
        }
        if (source['dischargeDisposition']) {
            this.dischargeDisposition = new fhir.CodeableConcept(source.dischargeDisposition);
        }
    }
    /**
     * Preferred-bound Value Set for admitSource
     */
    static admitSourcePreferredValueSet() {
        return EncounterAdmitSourceValueSet;
    }
    /**
     * Example-bound Value Set for reAdmission
     */
    static reAdmissionExampleValueSet() {
        return V20092ValueSet;
    }
    /**
     * Example-bound Value Set for dietPreference
     */
    static dietPreferenceExampleValueSet() {
        return EncounterDietValueSet;
    }
    /**
     * Preferred-bound Value Set for specialCourtesy
     */
    static specialCourtesyPreferredValueSet() {
        return EncounterSpecialCourtesyValueSet;
    }
    /**
     * Preferred-bound Value Set for specialArrangement
     */
    static specialArrangementPreferredValueSet() {
        return EncounterSpecialArrangementsValueSet;
    }
    /**
     * Example-bound Value Set for dischargeDisposition
     */
    static dischargeDispositionExampleValueSet() {
        return EncounterDischargeDispositionValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["preAdmissionIdentifier"]) {
            outcome.issue.push(...this.preAdmissionIdentifier.doModelValidation().issue);
        }
        if (this["origin"]) {
            outcome.issue.push(...this.origin.doModelValidation().issue);
        }
        if (this["admitSource"]) {
            outcome.issue.push(...this.admitSource.doModelValidation().issue);
        }
        if (this["reAdmission"]) {
            outcome.issue.push(...this.reAdmission.doModelValidation().issue);
        }
        if (this["dietPreference"]) {
            this.dietPreference.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["specialCourtesy"]) {
            this.specialCourtesy.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["specialArrangement"]) {
            this.specialArrangement.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["destination"]) {
            outcome.issue.push(...this.destination.doModelValidation().issue);
        }
        if (this["dischargeDisposition"]) {
            outcome.issue.push(...this.dischargeDisposition.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Virtual encounters can be recorded in the Encounter by specifying a location reference to a location of type "kind" such as "client's home" and an encounter.class = "virtual".
 */
export class EncounterLocation extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterLocation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'EncounterLocation';
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        else {
            this.location = null;
        }
        if (source['status']) {
            this.status = source.status;
        }
        if (source['physicalType']) {
            this.physicalType = new fhir.CodeableConcept(source.physicalType);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return EncounterLocationStatusValueSet;
    }
    /**
     * Example-bound Value Set for physicalType
     */
    static physicalTypeExampleValueSet() {
        return LocationPhysicalTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['location']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property location:fhir.Reference fhir: Encounter.location.location:Reference", }));
        }
        if (this["location"]) {
            outcome.issue.push(...this.location.doModelValidation().issue);
        }
        if (this["physicalType"]) {
            outcome.issue.push(...this.physicalType.doModelValidation().issue);
        }
        if (this["period"]) {
            outcome.issue.push(...this.period.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
 */
export class Encounter extends fhir.DomainResource {
    /**
     * Default constructor for Encounter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'Encounter';
        /**
         * Identifier(s) by which this encounter is known.
         */
        this.identifier = [];
        /**
         * The current status is always found in the current version of the resource, not the status history.
         */
        this.statusHistory = [];
        /**
         * The class history permits the tracking of the encounters transitions without needing to go  through the resource history.  This would be used for a case where an admission starts of as an emergency encounter, then transitions into an inpatient scenario. Doing this and not restarting a new encounter ensures that any lab/diagnostic results can more easily follow the patient and not require re-processing and not get lost or cancelled during a kind of discharge from emergency to inpatient.
         */
        this.classHistory = [];
        /**
         * Since there are many ways to further classify encounters, this element is 0..*.
         */
        this.type = [];
        /**
         * Where a specific encounter should be classified as a part of a specific episode(s) of care this field should be used. This association can facilitate grouping of related encounters together for a specific purpose, such as government reporting, issue tracking, association via a common problem.  The association is recorded on the encounter as these are typically created after the episode of care and grouped on entry rather than editing the episode of care to append another encounter to it (the episode of care could span years).
         */
        this.episodeOfCare = [];
        /**
         * The request this encounter satisfies (e.g. incoming referral or procedure request).
         */
        this.basedOn = [];
        /**
         * The list of people responsible for providing the service.
         */
        this.participant = [];
        /**
         * The appointment that scheduled this encounter.
         */
        this.appointment = [];
        /**
         * For systems that need to know which was the primary diagnosis, these will be marked with the standard extension primaryDiagnosis (which is a sequence value rather than a flag, 1 = primary diagnosis).
         */
        this.reasonCode = [];
        /**
         * For systems that need to know which was the primary diagnosis, these will be marked with the standard extension primaryDiagnosis (which is a sequence value rather than a flag, 1 = primary diagnosis).
         */
        this.reasonReference = [];
        /**
         * The list of diagnosis relevant to this encounter.
         */
        this.diagnosis = [];
        /**
         * The billing system may choose to allocate billable items associated with the Encounter to different referenced Accounts based on internal business rules.
         */
        this.account = [];
        /**
         * Virtual encounters can be recorded in the Encounter by specifying a location reference to a location of type "kind" such as "client's home" and an encounter.class = "virtual".
         */
        this.location = [];
        this.resourceType = 'Encounter';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['statusHistory']) {
            this.statusHistory = source.statusHistory.map((x) => new fhir.EncounterStatusHistory(x));
        }
        if (source['class']) {
            this.class = new fhir.Coding(source.class);
        }
        else {
            this.class = null;
        }
        if (source['classHistory']) {
            this.classHistory = source.classHistory.map((x) => new fhir.EncounterClassHistory(x));
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['serviceType']) {
            this.serviceType = new fhir.CodeableConcept(source.serviceType);
        }
        if (source['priority']) {
            this.priority = new fhir.CodeableConcept(source.priority);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['episodeOfCare']) {
            this.episodeOfCare = source.episodeOfCare.map((x) => new fhir.Reference(x));
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source['participant']) {
            this.participant = source.participant.map((x) => new fhir.EncounterParticipant(x));
        }
        if (source['appointment']) {
            this.appointment = source.appointment.map((x) => new fhir.Reference(x));
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['length']) {
            this.length = new fhir.Duration(source.length);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source['diagnosis']) {
            this.diagnosis = source.diagnosis.map((x) => new fhir.EncounterDiagnosis(x));
        }
        if (source['account']) {
            this.account = source.account.map((x) => new fhir.Reference(x));
        }
        if (source['hospitalization']) {
            this.hospitalization = new fhir.EncounterHospitalization(source.hospitalization);
        }
        if (source['location']) {
            this.location = source.location.map((x) => new fhir.EncounterLocation(x));
        }
        if (source['serviceProvider']) {
            this.serviceProvider = new fhir.Reference(source.serviceProvider);
        }
        if (source['partOf']) {
            this.partOf = new fhir.Reference(source.partOf);
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return EncounterStatusValueSet;
    }
    /**
     * Extensible-bound Value Set for class
     */
    static classExtensibleValueSet() {
        return V3ActEncounterCodeValueSet;
    }
    /**
     * Example-bound Value Set for type
     */
    static typeExampleValueSet() {
        return EncounterTypeValueSet;
    }
    /**
     * Example-bound Value Set for serviceType
     */
    static serviceTypeExampleValueSet() {
        return ServiceTypeValueSet;
    }
    /**
     * Example-bound Value Set for priority
     */
    static priorityExampleValueSet() {
        return V3ActPriorityValueSet;
    }
    /**
     * Preferred-bound Value Set for reasonCode
     */
    static reasonCodePreferredValueSet() {
        return EncounterReasonValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'Encounter' fhir: Encounter.resourceType:'Encounter'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:EncounterStatusValueSetEnum fhir: Encounter.status:code", }));
        }
        if (this["statusHistory"]) {
            this.statusHistory.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['class']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property class:fhir.Coding fhir: Encounter.class:Coding", }));
        }
        if (this["class"]) {
            outcome.issue.push(...this.class.doModelValidation().issue);
        }
        if (this["classHistory"]) {
            this.classHistory.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["type"]) {
            this.type.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["serviceType"]) {
            outcome.issue.push(...this.serviceType.doModelValidation().issue);
        }
        if (this["priority"]) {
            outcome.issue.push(...this.priority.doModelValidation().issue);
        }
        if (this["subject"]) {
            outcome.issue.push(...this.subject.doModelValidation().issue);
        }
        if (this["episodeOfCare"]) {
            this.episodeOfCare.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["participant"]) {
            this.participant.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["appointment"]) {
            this.appointment.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["period"]) {
            outcome.issue.push(...this.period.doModelValidation().issue);
        }
        if (this["length"]) {
            outcome.issue.push(...this.length.doModelValidation().issue);
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["diagnosis"]) {
            this.diagnosis.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["account"]) {
            this.account.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["hospitalization"]) {
            outcome.issue.push(...this.hospitalization.doModelValidation().issue);
        }
        if (this["location"]) {
            this.location.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["serviceProvider"]) {
            outcome.issue.push(...this.serviceProvider.doModelValidation().issue);
        }
        if (this["partOf"]) {
            outcome.issue.push(...this.partOf.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=Encounter.js.map