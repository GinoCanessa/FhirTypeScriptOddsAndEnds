// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Describes a comparison of an immunization event against published recommendations to determine if the administration is "valid" in relation to those  recommendations.
 */
export class ImmunizationEvaluation extends fhir.DomainResource {
    /**
     * Default constructor for ImmunizationEvaluation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'ImmunizationEvaluation';
        if (source["authority"]) {
            this.authority = new fhir.Reference(source.authority);
        }
        if (source["date"]) {
            this.date = source.date;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["doseNumberPositiveInt"]) {
            this.doseNumberPositiveInt = source.doseNumberPositiveInt;
        }
        if (source["_doseNumberPositiveInt"]) {
            this._doseNumberPositiveInt = new fhir.FhirElement(source._doseNumberPositiveInt);
        }
        if (source["doseNumberString"]) {
            this.doseNumberString = source.doseNumberString;
        }
        if (source["_doseNumberString"]) {
            this._doseNumberString = new fhir.FhirElement(source._doseNumberString);
        }
        this.doseStatus = null;
        if (source["doseStatus"]) {
            this.doseStatus = new fhir.CodeableConcept(source.doseStatus);
        }
        if (this.doseStatus === undefined) {
            this.doseStatus = null;
        }
        if (source["doseStatusReason"]) {
            this.doseStatusReason = source.doseStatusReason.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        this.immunizationEvent = null;
        if (source["immunizationEvent"]) {
            this.immunizationEvent = new fhir.Reference(source.immunizationEvent);
        }
        if (this.immunizationEvent === undefined) {
            this.immunizationEvent = null;
        }
        this.patient = null;
        if (source["patient"]) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (this.patient === undefined) {
            this.patient = null;
        }
        if (source["series"]) {
            this.series = source.series;
        }
        if (source["_series"]) {
            this._series = new fhir.FhirElement(source._series);
        }
        if (source["seriesDosesPositiveInt"]) {
            this.seriesDosesPositiveInt = source.seriesDosesPositiveInt;
        }
        if (source["_seriesDosesPositiveInt"]) {
            this._seriesDosesPositiveInt = new fhir.FhirElement(source._seriesDosesPositiveInt);
        }
        if (source["seriesDosesString"]) {
            this.seriesDosesString = source.seriesDosesString;
        }
        if (source["_seriesDosesString"]) {
            this._seriesDosesString = new fhir.FhirElement(source._seriesDosesString);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        this.targetDisease = null;
        if (source["targetDisease"]) {
            this.targetDisease = new fhir.CodeableConcept(source.targetDisease);
        }
        if (this.targetDisease === undefined) {
            this.targetDisease = null;
        }
    }
    /**
     * Check if the current ImmunizationEvaluation contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["doseStatus"] === undefined) {
            missingElements.push("doseStatus");
        }
        if (this["immunizationEvent"] === undefined) {
            missingElements.push("immunizationEvent");
        }
        if (this["patient"] === undefined) {
            missingElements.push("patient");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["targetDisease"] === undefined) {
            missingElements.push("targetDisease");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ImmunizationEvaluation from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ImmunizationEvaluation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ImmunizationEvaluation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the ImmunizationEvaluation.status field
 */
export var ImmunizationEvaluationStatusEnum;
(function (ImmunizationEvaluationStatusEnum) {
    ImmunizationEvaluationStatusEnum["COMPLETED"] = "completed";
    ImmunizationEvaluationStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(ImmunizationEvaluationStatusEnum || (ImmunizationEvaluationStatusEnum = {}));
//# sourceMappingURL=ImmunizationEvaluation.js.map