// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: EpisodeOfCare
import * as fhir from '../fhir.js';
import { EpisodeOfCareStatusValueSet, } from '../fhirValueSets/EpisodeOfCareStatusValueSet.js';
import { DiagnosisRoleValueSet, } from '../fhirValueSets/DiagnosisRoleValueSet.js';
import { EpisodeofcareTypeValueSet, } from '../fhirValueSets/EpisodeofcareTypeValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
 */
export class EpisodeOfCareStatusHistory extends fhir.BackboneElement {
    /**
     * Default constructor for EpisodeOfCareStatusHistory - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'EpisodeOfCareStatusHistory';
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        else {
            this.period = null;
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return EpisodeOfCareStatusValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:EpisodeOfCareStatusValueSetEnum fhir: EpisodeOfCare.statusHistory.status:code", }));
        }
        if (!this['period']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property period:fhir.Period fhir: EpisodeOfCare.statusHistory.period:Period", }));
        }
        if (this["period"]) {
            outcome.issue.push(...this.period.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * The list of diagnosis relevant to this episode of care.
 */
export class EpisodeOfCareDiagnosis extends fhir.BackboneElement {
    /**
     * Default constructor for EpisodeOfCareDiagnosis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'EpisodeOfCareDiagnosis';
        if (source['condition']) {
            this.condition = new fhir.Reference(source.condition);
        }
        else {
            this.condition = null;
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        if (source['rank']) {
            this.rank = new fhir.FhirPositiveInt({ value: source.rank });
        }
    }
    /**
     * Preferred-bound Value Set for role
     */
    static rolePreferredValueSet() {
        return DiagnosisRoleValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['condition']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property condition:fhir.Reference fhir: EpisodeOfCare.diagnosis.condition:Reference", }));
        }
        if (this["condition"]) {
            outcome.issue.push(...this.condition.doModelValidation().issue);
        }
        if (this["role"]) {
            outcome.issue.push(...this.role.doModelValidation().issue);
        }
        if (this["rank"]) {
            outcome.issue.push(...this.rank.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
 */
export class EpisodeOfCare extends fhir.DomainResource {
    /**
     * Default constructor for EpisodeOfCare - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'EpisodeOfCare';
        /**
         * The EpisodeOfCare may be known by different identifiers for different contexts of use, such as when an external agency is tracking the Episode for funding purposes.
         */
        this.identifier = [];
        /**
         * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
         */
        this.statusHistory = [];
        /**
         * The type can be very important in processing as this could be used in determining if the EpisodeOfCare is relevant to specific government reporting, or other types of classifications.
         */
        this.type = [];
        /**
         * The list of diagnosis relevant to this episode of care.
         */
        this.diagnosis = [];
        /**
         * Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.
         */
        this.referralRequest = [];
        /**
         * The list of practitioners that may be facilitating this episode of care for specific purposes.
         */
        this.team = [];
        /**
         * The billing system may choose to allocate billable items associated with the EpisodeOfCare to different referenced Accounts based on internal business rules.
         */
        this.account = [];
        this.resourceType = 'EpisodeOfCare';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['statusHistory']) {
            this.statusHistory = source.statusHistory.map((x) => new fhir.EpisodeOfCareStatusHistory(x));
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['diagnosis']) {
            this.diagnosis = source.diagnosis.map((x) => new fhir.EpisodeOfCareDiagnosis(x));
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['managingOrganization']) {
            this.managingOrganization = new fhir.Reference(source.managingOrganization);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['referralRequest']) {
            this.referralRequest = source.referralRequest.map((x) => new fhir.Reference(x));
        }
        if (source['careManager']) {
            this.careManager = new fhir.Reference(source.careManager);
        }
        if (source['team']) {
            this.team = source.team.map((x) => new fhir.Reference(x));
        }
        if (source['account']) {
            this.account = source.account.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return EpisodeOfCareStatusValueSet;
    }
    /**
     * Example-bound Value Set for type
     */
    static typeExampleValueSet() {
        return EpisodeofcareTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'EpisodeOfCare' fhir: EpisodeOfCare.resourceType:'EpisodeOfCare'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:EpisodeOfCareStatusValueSetEnum fhir: EpisodeOfCare.status:code", }));
        }
        if (this["statusHistory"]) {
            this.statusHistory.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["type"]) {
            this.type.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["diagnosis"]) {
            this.diagnosis.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['patient']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property patient:fhir.Reference fhir: EpisodeOfCare.patient:Reference", }));
        }
        if (this["patient"]) {
            outcome.issue.push(...this.patient.doModelValidation().issue);
        }
        if (this["managingOrganization"]) {
            outcome.issue.push(...this.managingOrganization.doModelValidation().issue);
        }
        if (this["period"]) {
            outcome.issue.push(...this.period.doModelValidation().issue);
        }
        if (this["referralRequest"]) {
            this.referralRequest.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["careManager"]) {
            outcome.issue.push(...this.careManager.doModelValidation().issue);
        }
        if (this["team"]) {
            this.team.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["account"]) {
            this.account.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=EpisodeOfCare.js.map