// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: RelatedPerson
import * as fhir from '../fhir.js';
import { LanguagesValueSet } from '../fhirValueSets/LanguagesValueSet.js';
import { RelatedpersonRelationshiptypeValueSet } from '../fhirValueSets/RelatedpersonRelationshiptypeValueSet.js';
import { AdministrativeGenderValueSet } from '../fhirValueSets/AdministrativeGenderValueSet.js';
/**
 * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple RelatedPerson.Communication associations.   If the RelatedPerson does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
 */
export class RelatedPersonCommunication extends fhir.BackboneElement {
    /**
     * Default constructor for RelatedPersonCommunication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['language']) {
            this.language = new fhir.CodeableConcept(source.language);
        }
        else {
            this.language = null;
        }
        if (source['preferred']) {
            this.preferred = source.preferred;
        }
        if (source['_preferred']) {
            this._preferred = new fhir.FhirElement(source._preferred);
        }
    }
    /**
     * Preferred-bound Value Set for language
     */
    static languagePreferredValueSet() {
        return LanguagesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["language"]) {
            results.push(["language", 'Missing required element: RelatedPerson.communication.language']);
        }
        if (this["language"]) {
            results.push(...this.language.doModelValidation());
        }
        if (this["_preferred"]) {
            results.push(...this._preferred.doModelValidation());
        }
        return results;
    }
}
/**
 * Information about a person that is involved in the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.
 */
export class RelatedPerson extends fhir.DomainResource {
    /**
     * Default constructor for RelatedPerson - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'RelatedPerson';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['active']) {
            this.active = source.active;
        }
        if (source['_active']) {
            this._active = new fhir.FhirElement(source._active);
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['relationship']) {
            this.relationship = source.relationship.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['name']) {
            this.name = source.name.map((x) => new fhir.HumanName(x));
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        if (source['gender']) {
            this.gender = source.gender;
        }
        if (source['_gender']) {
            this._gender = new fhir.FhirElement(source._gender);
        }
        if (source['birthDate']) {
            this.birthDate = source.birthDate;
        }
        if (source['_birthDate']) {
            this._birthDate = new fhir.FhirElement(source._birthDate);
        }
        if (source['address']) {
            this.address = source.address.map((x) => new fhir.Address(x));
        }
        if (source['photo']) {
            this.photo = source.photo.map((x) => new fhir.Attachment(x));
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['communication']) {
            this.communication = source.communication.map((x) => new fhir.RelatedPersonCommunication(x));
        }
    }
    /**
     * Preferred-bound Value Set for relationship
     */
    static relationshipPreferredValueSet() {
        return RelatedpersonRelationshiptypeValueSet;
    }
    /**
     * Required-bound Value Set for gender
     */
    static genderRequiredValueSet() {
        return AdministrativeGenderValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: RelatedPerson.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_active"]) {
            results.push(...this._active.doModelValidation());
        }
        if (!this["patient"]) {
            results.push(["patient", 'Missing required element: RelatedPerson.patient']);
        }
        if (this["patient"]) {
            results.push(...this.patient.doModelValidation());
        }
        if (this["relationship"]) {
            this.relationship.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["name"]) {
            this.name.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["telecom"]) {
            this.telecom.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_gender"]) {
            results.push(...this._gender.doModelValidation());
        }
        if (this["_birthDate"]) {
            results.push(...this._birthDate.doModelValidation());
        }
        if (this["address"]) {
            this.address.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["photo"]) {
            this.photo.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["period"]) {
            results.push(...this.period.doModelValidation());
        }
        if (this["communication"]) {
            this.communication.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=RelatedPerson.js.map