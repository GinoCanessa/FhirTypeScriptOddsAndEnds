// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Schedule
import * as fhir from '../fhir.js';
import { ServiceCategoryValueSet } from '../fhirValueSets/ServiceCategoryValueSet.js';
import { ServiceTypeValueSet } from '../fhirValueSets/ServiceTypeValueSet.js';
import { C80PracticeCodesValueSet } from '../fhirValueSets/C80PracticeCodesValueSet.js';
/**
 * A container for slots of time that may be available for booking appointments.
 */
export class Schedule extends fhir.DomainResource {
    /**
     * Default constructor for Schedule - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Schedule';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['active']) {
            this.active = source.active;
        }
        if (source['_active']) {
            this._active = new fhir.FhirElement(source._active);
        }
        if (source['serviceCategory']) {
            this.serviceCategory = source.serviceCategory.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['serviceType']) {
            this.serviceType = source.serviceType.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['specialty']) {
            this.specialty = source.specialty.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['actor']) {
            this.actor = source.actor.map((x) => new fhir.Reference(x));
        }
        else {
            this.actor = null;
        }
        if (source['planningHorizon']) {
            this.planningHorizon = new fhir.Period(source.planningHorizon);
        }
        if (source['comment']) {
            this.comment = source.comment;
        }
        if (source['_comment']) {
            this._comment = new fhir.FhirElement(source._comment);
        }
    }
    /**
     * Example-bound Value Set for serviceCategory
     */
    serviceCategoryExampleValueSet() {
        return ServiceCategoryValueSet;
    }
    /**
     * Example-bound Value Set for serviceType
     */
    serviceTypeExampleValueSet() {
        return ServiceTypeValueSet;
    }
    /**
     * Preferred-bound Value Set for specialty
     */
    specialtyPreferredValueSet() {
        return C80PracticeCodesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: Schedule.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_active"]) {
            results.push(...this._active.doModelValidation());
        }
        if (this["serviceCategory"]) {
            this.serviceCategory.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["serviceType"]) {
            this.serviceType.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["specialty"]) {
            this.specialty.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if ((!this["actor"]) || (this["actor"].length === 0)) {
            results.push(["actor", 'Missing required element: Schedule.actor']);
        }
        if (this["actor"]) {
            this.actor.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["planningHorizon"]) {
            results.push(...this.planningHorizon.doModelValidation());
        }
        if (this["_comment"]) {
            results.push(...this._comment.doModelValidation());
        }
        return results;
    }
}
//# sourceMappingURL=Schedule.js.map