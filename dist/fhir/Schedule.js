// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * A container for slots of time that may be available for booking appointments.
 */
export class Schedule extends fhir.DomainResource {
    /**
     * Default constructor for Schedule - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Schedule';
        if (source["active"]) {
            this.active = source.active;
        }
        if (source["_active"]) {
            this._active = new fhir.FhirElement(source._active);
        }
        this.actor = null;
        if (source["actor"]) {
            this.actor = source.actor.map((x) => new fhir.Reference(x));
        }
        if (this.actor === undefined) {
            this.actor = null;
        }
        if (source["comment"]) {
            this.comment = source.comment;
        }
        if (source["_comment"]) {
            this._comment = new fhir.FhirElement(source._comment);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["planningHorizon"]) {
            this.planningHorizon = new fhir.Period(source.planningHorizon);
        }
        if (source["serviceCategory"]) {
            this.serviceCategory = source.serviceCategory.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["serviceType"]) {
            this.serviceType = source.serviceType.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["specialty"]) {
            this.specialty = source.specialty.map((x) => new fhir.CodeableConcept(x));
        }
    }
    /**
     * Check if the current Schedule contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if ((!this["actor"]) || (this["actor"].length === 0)) {
            missingElements.push("actor");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Schedule from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new Schedule(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `Schedule is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
//# sourceMappingURL=Schedule.js.map