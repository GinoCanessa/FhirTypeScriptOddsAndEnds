// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: TerminologyCapabilities
import * as fhir from '../fhir.js';
import { PublicationStatusValueSet, } from '../fhirValueSets/PublicationStatusValueSet.js';
import { CapabilityStatementKindValueSet, } from '../fhirValueSets/CapabilityStatementKindValueSet.js';
import { CodeSearchSupportValueSet, } from '../fhirValueSets/CodeSearchSupportValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Software that is covered by this terminology capability statement.  It is used when the statement describes the capabilities of a particular software version, independent of an installation.
 */
export class TerminologyCapabilitiesSoftware extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesSoftware - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'TerminologyCapabilitiesSoftware';
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['name']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property name:fhir.FhirString fhir: TerminologyCapabilities.software.name:string", }));
        }
        if (this["name"]) {
            outcome.issue.push(...this.name.doModelValidation().issue);
        }
        if (this["version"]) {
            outcome.issue.push(...this.version.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Identifies a specific implementation instance that is described by the terminology capability statement - i.e. a particular installation, rather than the capabilities of a software program.
 */
export class TerminologyCapabilitiesImplementation extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesImplementation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'TerminologyCapabilitiesImplementation';
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        else {
            this.description = null;
        }
        if (source['url']) {
            this.url = new fhir.FhirUrl({ value: source.url });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['description']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property description:fhir.FhirString fhir: TerminologyCapabilities.implementation.description:string", }));
        }
        if (this["description"]) {
            outcome.issue.push(...this.description.doModelValidation().issue);
        }
        if (this["url"]) {
            outcome.issue.push(...this.url.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Filter Properties supported.
 */
export class TerminologyCapabilitiesCodeSystemVersionFilter extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesCodeSystemVersionFilter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'TerminologyCapabilitiesCodeSystemVersionFilter';
        /**
         * Operations supported for the property.
         */
        this.op = [];
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['op']) {
            this.op = source.op.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.op = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['code']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property code:fhir.FhirCode fhir: TerminologyCapabilities.codeSystem.version.filter.code:code", }));
        }
        if (this["code"]) {
            outcome.issue.push(...this.code.doModelValidation().issue);
        }
        if (!this['op']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property op:fhir.FhirCode[] fhir: TerminologyCapabilities.codeSystem.version.filter.op:code", }));
        }
        else if (!Array.isArray(this.op)) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue, diagnostics: "Found scalar in array property op:fhir.FhirCode[] fhir: TerminologyCapabilities.codeSystem.version.filter.op:code", }));
        }
        else if (this.op.length === 0) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property op:fhir.FhirCode[] fhir: TerminologyCapabilities.codeSystem.version.filter.op:code", }));
        }
        if (this["op"]) {
            this.op.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Language translations might not be available for all codes.
 */
export class TerminologyCapabilitiesCodeSystemVersion extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesCodeSystemVersion - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'TerminologyCapabilitiesCodeSystemVersion';
        /**
         * Language Displays supported.
         */
        this.language = [];
        /**
         * Filter Properties supported.
         */
        this.filter = [];
        /**
         * Properties supported for $lookup.
         */
        this.property = [];
        if (source['code']) {
            this.code = new fhir.FhirString({ value: source.code });
        }
        if (source['isDefault']) {
            this.isDefault = new fhir.FhirBoolean({ value: source.isDefault });
        }
        if (source['compositional']) {
            this.compositional = new fhir.FhirBoolean({ value: source.compositional });
        }
        if (source['language']) {
            this.language = source.language.map((x) => new fhir.FhirCode({ value: x }));
        }
        if (source['filter']) {
            this.filter = source.filter.map((x) => new fhir.TerminologyCapabilitiesCodeSystemVersionFilter(x));
        }
        if (source['property']) {
            this.property = source.property.map((x) => new fhir.FhirCode({ value: x }));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["code"]) {
            outcome.issue.push(...this.code.doModelValidation().issue);
        }
        if (this["isDefault"]) {
            outcome.issue.push(...this.isDefault.doModelValidation().issue);
        }
        if (this["compositional"]) {
            outcome.issue.push(...this.compositional.doModelValidation().issue);
        }
        if (this["language"]) {
            this.language.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["filter"]) {
            this.filter.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["property"]) {
            this.property.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * The code system - identified by its system URL - may also be declared explicitly as a Code System Resource at /CodeSystem, but it might not be.
 */
export class TerminologyCapabilitiesCodeSystem extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesCodeSystem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'TerminologyCapabilitiesCodeSystem';
        /**
         * Language translations might not be available for all codes.
         */
        this.version = [];
        if (source['uri']) {
            this.uri = new fhir.FhirCanonical({ value: source.uri });
        }
        if (source['version']) {
            this.version = source.version.map((x) => new fhir.TerminologyCapabilitiesCodeSystemVersion(x));
        }
        if (source['subsumption']) {
            this.subsumption = new fhir.FhirBoolean({ value: source.subsumption });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["uri"]) {
            outcome.issue.push(...this.uri.doModelValidation().issue);
        }
        if (this["version"]) {
            this.version.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["subsumption"]) {
            outcome.issue.push(...this.subsumption.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Supported expansion parameter.
 */
export class TerminologyCapabilitiesExpansionParameter extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesExpansionParameter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'TerminologyCapabilitiesExpansionParameter';
        if (source['name']) {
            this.name = new fhir.FhirCode({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirString({ value: source.documentation });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['name']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property name:fhir.FhirCode fhir: TerminologyCapabilities.expansion.parameter.name:code", }));
        }
        if (this["name"]) {
            outcome.issue.push(...this.name.doModelValidation().issue);
        }
        if (this["documentation"]) {
            outcome.issue.push(...this.documentation.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Information about the [ValueSet/$expand](valueset-operation-expand.html) operation.
 */
export class TerminologyCapabilitiesExpansion extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesExpansion - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'TerminologyCapabilitiesExpansion';
        /**
         * Supported expansion parameter.
         */
        this.parameter = [];
        if (source['hierarchical']) {
            this.hierarchical = new fhir.FhirBoolean({ value: source.hierarchical });
        }
        if (source['paging']) {
            this.paging = new fhir.FhirBoolean({ value: source.paging });
        }
        if (source['incomplete']) {
            this.incomplete = new fhir.FhirBoolean({ value: source.incomplete });
        }
        if (source['parameter']) {
            this.parameter = source.parameter.map((x) => new fhir.TerminologyCapabilitiesExpansionParameter(x));
        }
        if (source['textFilter']) {
            this.textFilter = new fhir.FhirMarkdown({ value: source.textFilter });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["hierarchical"]) {
            outcome.issue.push(...this.hierarchical.doModelValidation().issue);
        }
        if (this["paging"]) {
            outcome.issue.push(...this.paging.doModelValidation().issue);
        }
        if (this["incomplete"]) {
            outcome.issue.push(...this.incomplete.doModelValidation().issue);
        }
        if (this["parameter"]) {
            this.parameter.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["textFilter"]) {
            outcome.issue.push(...this.textFilter.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Information about the [ValueSet/$validate-code](valueset-operation-validate-code.html) operation.
 */
export class TerminologyCapabilitiesValidateCode extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesValidateCode - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'TerminologyCapabilitiesValidateCode';
        if (source['translations']) {
            this.translations = new fhir.FhirBoolean({ value: source.translations });
        }
        else {
            this.translations = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['translations']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property translations:fhir.FhirBoolean fhir: TerminologyCapabilities.validateCode.translations:boolean", }));
        }
        if (this["translations"]) {
            outcome.issue.push(...this.translations.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Information about the [ConceptMap/$translate](conceptmap-operation-translate.html) operation.
 */
export class TerminologyCapabilitiesTranslation extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesTranslation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'TerminologyCapabilitiesTranslation';
        if (source['needsMap']) {
            this.needsMap = new fhir.FhirBoolean({ value: source.needsMap });
        }
        else {
            this.needsMap = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['needsMap']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property needsMap:fhir.FhirBoolean fhir: TerminologyCapabilities.translation.needsMap:boolean", }));
        }
        if (this["needsMap"]) {
            outcome.issue.push(...this.needsMap.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Whether the $closure operation is supported.
 */
export class TerminologyCapabilitiesClosure extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesClosure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'TerminologyCapabilitiesClosure';
        if (source['translation']) {
            this.translation = new fhir.FhirBoolean({ value: source.translation });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["translation"]) {
            outcome.issue.push(...this.translation.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
export class TerminologyCapabilities extends fhir.DomainResource {
    /**
     * Default constructor for TerminologyCapabilities - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'TerminologyCapabilities';
        /**
         * May be a web site, an email address, a telephone number, etc.
         */
        this.contact = [];
        /**
         * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
         */
        this.useContext = [];
        /**
         * It may be possible for the terminology capabilities to be used in jurisdictions other than those for which it was originally designed or intended.
         */
        this.jurisdiction = [];
        /**
         * The code system - identified by its system URL - may also be declared explicitly as a Code System Resource at /CodeSystem, but it might not be.
         */
        this.codeSystem = [];
        this.resourceType = 'TerminologyCapabilities';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        else {
            this.date = null;
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['kind']) {
            this.kind = source.kind;
        }
        else {
            this.kind = null;
        }
        if (source['software']) {
            this.software = new fhir.TerminologyCapabilitiesSoftware(source.software);
        }
        if (source['implementation']) {
            this.implementation = new fhir.TerminologyCapabilitiesImplementation(source.implementation);
        }
        if (source['lockedDate']) {
            this.lockedDate = new fhir.FhirBoolean({ value: source.lockedDate });
        }
        if (source['codeSystem']) {
            this.codeSystem = source.codeSystem.map((x) => new fhir.TerminologyCapabilitiesCodeSystem(x));
        }
        if (source['expansion']) {
            this.expansion = new fhir.TerminologyCapabilitiesExpansion(source.expansion);
        }
        if (source['codeSearch']) {
            this.codeSearch = source.codeSearch;
        }
        if (source['validateCode']) {
            this.validateCode = new fhir.TerminologyCapabilitiesValidateCode(source.validateCode);
        }
        if (source['translation']) {
            this.translation = new fhir.TerminologyCapabilitiesTranslation(source.translation);
        }
        if (source['closure']) {
            this.closure = new fhir.TerminologyCapabilitiesClosure(source.closure);
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return PublicationStatusValueSet;
    }
    /**
     * Required-bound Value Set for kind
     */
    static kindRequiredValueSet() {
        return CapabilityStatementKindValueSet;
    }
    /**
     * Required-bound Value Set for codeSearch
     */
    static codeSearchRequiredValueSet() {
        return CodeSearchSupportValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'TerminologyCapabilities' fhir: TerminologyCapabilities.resourceType:'TerminologyCapabilities'", }));
        }
        if (this["url"]) {
            outcome.issue.push(...this.url.doModelValidation().issue);
        }
        if (this["version"]) {
            outcome.issue.push(...this.version.doModelValidation().issue);
        }
        if (this["name"]) {
            outcome.issue.push(...this.name.doModelValidation().issue);
        }
        if (this["title"]) {
            outcome.issue.push(...this.title.doModelValidation().issue);
        }
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:PublicationStatusValueSetEnum fhir: TerminologyCapabilities.status:code", }));
        }
        if (this["experimental"]) {
            outcome.issue.push(...this.experimental.doModelValidation().issue);
        }
        if (!this['date']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property date:fhir.FhirDateTime fhir: TerminologyCapabilities.date:dateTime", }));
        }
        if (this["date"]) {
            outcome.issue.push(...this.date.doModelValidation().issue);
        }
        if (this["publisher"]) {
            outcome.issue.push(...this.publisher.doModelValidation().issue);
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["description"]) {
            outcome.issue.push(...this.description.doModelValidation().issue);
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["purpose"]) {
            outcome.issue.push(...this.purpose.doModelValidation().issue);
        }
        if (this["copyright"]) {
            outcome.issue.push(...this.copyright.doModelValidation().issue);
        }
        if (!this['kind']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property kind:CapabilityStatementKindValueSetEnum fhir: TerminologyCapabilities.kind:code", }));
        }
        if (this["software"]) {
            outcome.issue.push(...this.software.doModelValidation().issue);
        }
        if (this["implementation"]) {
            outcome.issue.push(...this.implementation.doModelValidation().issue);
        }
        if (this["lockedDate"]) {
            outcome.issue.push(...this.lockedDate.doModelValidation().issue);
        }
        if (this["codeSystem"]) {
            this.codeSystem.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["expansion"]) {
            outcome.issue.push(...this.expansion.doModelValidation().issue);
        }
        if (this["validateCode"]) {
            outcome.issue.push(...this.validateCode.doModelValidation().issue);
        }
        if (this["translation"]) {
            outcome.issue.push(...this.translation.doModelValidation().issue);
        }
        if (this["closure"]) {
            outcome.issue.push(...this.closure.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=TerminologyCapabilities.js.map