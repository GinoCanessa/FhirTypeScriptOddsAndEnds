// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: TerminologyCapabilities
import * as fhir from '../fhir.js';
import { PublicationStatusValueSet } from '../fhirValueSets/PublicationStatusValueSet.js';
import { CapabilityStatementKindValueSet } from '../fhirValueSets/CapabilityStatementKindValueSet.js';
import { CodeSearchSupportValueSet } from '../fhirValueSets/CodeSearchSupportValueSet.js';
/**
 * Software that is covered by this terminology capability statement.  It is used when the statement describes the capabilities of a particular software version, independent of an installation.
 */
export class TerminologyCapabilitiesSoftware extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesSoftware - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['name']) {
            this.name = source.name;
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['version']) {
            this.version = source.version;
        }
        if (source['_version']) {
            this._version = new fhir.FhirElement(source._version);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["name"]) {
            results.push(["name", 'Missing required element: TerminologyCapabilities.software.name']);
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_version"]) {
            results.push(...this._version.doModelValidation());
        }
        return results;
    }
}
/**
 * Identifies a specific implementation instance that is described by the terminology capability statement - i.e. a particular installation, rather than the capabilities of a software program.
 */
export class TerminologyCapabilitiesImplementation extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesImplementation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['description']) {
            this.description = source.description;
        }
        else {
            this.description = null;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['url']) {
            this.url = source.url;
        }
        if (source['_url']) {
            this._url = new fhir.FhirElement(source._url);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["description"]) {
            results.push(["description", 'Missing required element: TerminologyCapabilities.implementation.description']);
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["_url"]) {
            results.push(...this._url.doModelValidation());
        }
        return results;
    }
}
/**
 * Filter Properties supported.
 */
export class TerminologyCapabilitiesCodeSystemVersionFilter extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesCodeSystemVersionFilter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = source.code;
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source['op']) {
            this.op = source.op.map((x) => (x));
        }
        else {
            this.op = null;
        }
        if (source['_op']) {
            this._op = source._op.map((x) => new fhir.FhirElement(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["code"]) {
            results.push(["code", 'Missing required element: TerminologyCapabilities.codeSystem.version.filter.code']);
        }
        if (this["_code"]) {
            results.push(...this._code.doModelValidation());
        }
        if ((!this["op"]) || (this["op"].length === 0)) {
            results.push(["op", 'Missing required element: TerminologyCapabilities.codeSystem.version.filter.op']);
        }
        if (this["_op"]) {
            this._op.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Language translations might not be available for all codes.
 */
export class TerminologyCapabilitiesCodeSystemVersion extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesCodeSystemVersion - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = source.code;
        }
        if (source['_code']) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source['isDefault']) {
            this.isDefault = source.isDefault;
        }
        if (source['_isDefault']) {
            this._isDefault = new fhir.FhirElement(source._isDefault);
        }
        if (source['compositional']) {
            this.compositional = source.compositional;
        }
        if (source['_compositional']) {
            this._compositional = new fhir.FhirElement(source._compositional);
        }
        if (source['language']) {
            this.language = source.language.map((x) => (x));
        }
        if (source['_language']) {
            this._language = source._language.map((x) => new fhir.FhirElement(x));
        }
        if (source['filter']) {
            this.filter = source.filter.map((x) => new fhir.TerminologyCapabilitiesCodeSystemVersionFilter(x));
        }
        if (source['property']) {
            this.property = source.property.map((x) => (x));
        }
        if (source['_property']) {
            this._property = source._property.map((x) => new fhir.FhirElement(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_code"]) {
            results.push(...this._code.doModelValidation());
        }
        if (this["_isDefault"]) {
            results.push(...this._isDefault.doModelValidation());
        }
        if (this["_compositional"]) {
            results.push(...this._compositional.doModelValidation());
        }
        if (this["_language"]) {
            this._language.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["filter"]) {
            this.filter.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_property"]) {
            this._property.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * The code system - identified by its system URL - may also be declared explicitly as a Code System Resource at /CodeSystem, but it might not be.
 */
export class TerminologyCapabilitiesCodeSystem extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesCodeSystem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['uri']) {
            this.uri = source.uri;
        }
        if (source['_uri']) {
            this._uri = new fhir.FhirElement(source._uri);
        }
        if (source['version']) {
            this.version = source.version.map((x) => new fhir.TerminologyCapabilitiesCodeSystemVersion(x));
        }
        if (source['subsumption']) {
            this.subsumption = source.subsumption;
        }
        if (source['_subsumption']) {
            this._subsumption = new fhir.FhirElement(source._subsumption);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_uri"]) {
            results.push(...this._uri.doModelValidation());
        }
        if (this["version"]) {
            this.version.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_subsumption"]) {
            results.push(...this._subsumption.doModelValidation());
        }
        return results;
    }
}
/**
 * Supported expansion parameter.
 */
export class TerminologyCapabilitiesExpansionParameter extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesExpansionParameter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['name']) {
            this.name = source.name;
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['documentation']) {
            this.documentation = source.documentation;
        }
        if (source['_documentation']) {
            this._documentation = new fhir.FhirElement(source._documentation);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["name"]) {
            results.push(["name", 'Missing required element: TerminologyCapabilities.expansion.parameter.name']);
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_documentation"]) {
            results.push(...this._documentation.doModelValidation());
        }
        return results;
    }
}
/**
 * Information about the [ValueSet/$expand](valueset-operation-expand.html) operation.
 */
export class TerminologyCapabilitiesExpansion extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesExpansion - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['hierarchical']) {
            this.hierarchical = source.hierarchical;
        }
        if (source['_hierarchical']) {
            this._hierarchical = new fhir.FhirElement(source._hierarchical);
        }
        if (source['paging']) {
            this.paging = source.paging;
        }
        if (source['_paging']) {
            this._paging = new fhir.FhirElement(source._paging);
        }
        if (source['incomplete']) {
            this.incomplete = source.incomplete;
        }
        if (source['_incomplete']) {
            this._incomplete = new fhir.FhirElement(source._incomplete);
        }
        if (source['parameter']) {
            this.parameter = source.parameter.map((x) => new fhir.TerminologyCapabilitiesExpansionParameter(x));
        }
        if (source['textFilter']) {
            this.textFilter = source.textFilter;
        }
        if (source['_textFilter']) {
            this._textFilter = new fhir.FhirElement(source._textFilter);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_hierarchical"]) {
            results.push(...this._hierarchical.doModelValidation());
        }
        if (this["_paging"]) {
            results.push(...this._paging.doModelValidation());
        }
        if (this["_incomplete"]) {
            results.push(...this._incomplete.doModelValidation());
        }
        if (this["parameter"]) {
            this.parameter.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_textFilter"]) {
            results.push(...this._textFilter.doModelValidation());
        }
        return results;
    }
}
/**
 * Information about the [ValueSet/$validate-code](valueset-operation-validate-code.html) operation.
 */
export class TerminologyCapabilitiesValidateCode extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesValidateCode - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['translations']) {
            this.translations = source.translations;
        }
        else {
            this.translations = null;
        }
        if (source['_translations']) {
            this._translations = new fhir.FhirElement(source._translations);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["translations"]) {
            results.push(["translations", 'Missing required element: TerminologyCapabilities.validateCode.translations']);
        }
        if (this["_translations"]) {
            results.push(...this._translations.doModelValidation());
        }
        return results;
    }
}
/**
 * Information about the [ConceptMap/$translate](conceptmap-operation-translate.html) operation.
 */
export class TerminologyCapabilitiesTranslation extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesTranslation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['needsMap']) {
            this.needsMap = source.needsMap;
        }
        else {
            this.needsMap = null;
        }
        if (source['_needsMap']) {
            this._needsMap = new fhir.FhirElement(source._needsMap);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["needsMap"]) {
            results.push(["needsMap", 'Missing required element: TerminologyCapabilities.translation.needsMap']);
        }
        if (this["_needsMap"]) {
            results.push(...this._needsMap.doModelValidation());
        }
        return results;
    }
}
/**
 * Whether the $closure operation is supported.
 */
export class TerminologyCapabilitiesClosure extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesClosure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['translation']) {
            this.translation = source.translation;
        }
        if (source['_translation']) {
            this._translation = new fhir.FhirElement(source._translation);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_translation"]) {
            results.push(...this._translation.doModelValidation());
        }
        return results;
    }
}
/**
 * A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
export class TerminologyCapabilities extends fhir.DomainResource {
    /**
     * Default constructor for TerminologyCapabilities - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'TerminologyCapabilities';
        if (source['url']) {
            this.url = source.url;
        }
        if (source['_url']) {
            this._url = new fhir.FhirElement(source._url);
        }
        if (source['version']) {
            this.version = source.version;
        }
        if (source['_version']) {
            this._version = new fhir.FhirElement(source._version);
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['title']) {
            this.title = source.title;
        }
        if (source['_title']) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['experimental']) {
            this.experimental = source.experimental;
        }
        if (source['_experimental']) {
            this._experimental = new fhir.FhirElement(source._experimental);
        }
        if (source['date']) {
            this.date = source.date;
        }
        else {
            this.date = null;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['publisher']) {
            this.publisher = source.publisher;
        }
        if (source['_publisher']) {
            this._publisher = new fhir.FhirElement(source._publisher);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['purpose']) {
            this.purpose = source.purpose;
        }
        if (source['_purpose']) {
            this._purpose = new fhir.FhirElement(source._purpose);
        }
        if (source['copyright']) {
            this.copyright = source.copyright;
        }
        if (source['_copyright']) {
            this._copyright = new fhir.FhirElement(source._copyright);
        }
        if (source['kind']) {
            this.kind = source.kind;
        }
        else {
            this.kind = null;
        }
        if (source['_kind']) {
            this._kind = new fhir.FhirElement(source._kind);
        }
        if (source['software']) {
            this.software = new fhir.TerminologyCapabilitiesSoftware(source.software);
        }
        if (source['implementation']) {
            this.implementation = new fhir.TerminologyCapabilitiesImplementation(source.implementation);
        }
        if (source['lockedDate']) {
            this.lockedDate = source.lockedDate;
        }
        if (source['_lockedDate']) {
            this._lockedDate = new fhir.FhirElement(source._lockedDate);
        }
        if (source['codeSystem']) {
            this.codeSystem = source.codeSystem.map((x) => new fhir.TerminologyCapabilitiesCodeSystem(x));
        }
        if (source['expansion']) {
            this.expansion = new fhir.TerminologyCapabilitiesExpansion(source.expansion);
        }
        if (source['codeSearch']) {
            this.codeSearch = source.codeSearch;
        }
        if (source['_codeSearch']) {
            this._codeSearch = new fhir.FhirElement(source._codeSearch);
        }
        if (source['validateCode']) {
            this.validateCode = new fhir.TerminologyCapabilitiesValidateCode(source.validateCode);
        }
        if (source['translation']) {
            this.translation = new fhir.TerminologyCapabilitiesTranslation(source.translation);
        }
        if (source['closure']) {
            this.closure = new fhir.TerminologyCapabilitiesClosure(source.closure);
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return PublicationStatusValueSet;
    }
    /**
     * Required-bound Value Set for kind
     */
    kindRequiredValueSet() {
        return CapabilityStatementKindValueSet;
    }
    /**
     * Required-bound Value Set for codeSearch
     */
    codeSearchRequiredValueSet() {
        return CodeSearchSupportValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: TerminologyCapabilities.resourceType']);
        }
        if (this["_url"]) {
            results.push(...this._url.doModelValidation());
        }
        if (this["_version"]) {
            results.push(...this._version.doModelValidation());
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_title"]) {
            results.push(...this._title.doModelValidation());
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: TerminologyCapabilities.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["_experimental"]) {
            results.push(...this._experimental.doModelValidation());
        }
        if (!this["date"]) {
            results.push(["date", 'Missing required element: TerminologyCapabilities.date']);
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["_publisher"]) {
            results.push(...this._publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_purpose"]) {
            results.push(...this._purpose.doModelValidation());
        }
        if (this["_copyright"]) {
            results.push(...this._copyright.doModelValidation());
        }
        if (!this["kind"]) {
            results.push(["kind", 'Missing required element: TerminologyCapabilities.kind']);
        }
        if (this["_kind"]) {
            results.push(...this._kind.doModelValidation());
        }
        if (this["software"]) {
            results.push(...this.software.doModelValidation());
        }
        if (this["implementation"]) {
            results.push(...this.implementation.doModelValidation());
        }
        if (this["_lockedDate"]) {
            results.push(...this._lockedDate.doModelValidation());
        }
        if (this["codeSystem"]) {
            this.codeSystem.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["expansion"]) {
            results.push(...this.expansion.doModelValidation());
        }
        if (this["_codeSearch"]) {
            results.push(...this._codeSearch.doModelValidation());
        }
        if (this["validateCode"]) {
            results.push(...this.validateCode.doModelValidation());
        }
        if (this["translation"]) {
            results.push(...this.translation.doModelValidation());
        }
        if (this["closure"]) {
            results.push(...this.closure.doModelValidation());
        }
        return results;
    }
}
//# sourceMappingURL=TerminologyCapabilities.js.map