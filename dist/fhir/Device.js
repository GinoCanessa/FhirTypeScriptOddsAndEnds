// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Device
import * as fhir from '../fhir.js';
import { UdiEntryTypeValueSet, } from '../fhirValueSets/UdiEntryTypeValueSet.js';
import { DeviceNametypeValueSet, } from '../fhirValueSets/DeviceNametypeValueSet.js';
import { DeviceStatusValueSet, } from '../fhirValueSets/DeviceStatusValueSet.js';
import { DeviceStatusReasonValueSet, } from '../fhirValueSets/DeviceStatusReasonValueSet.js';
import { DeviceTypeValueSet, } from '../fhirValueSets/DeviceTypeValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
 */
export class DeviceUdiCarrier extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceUdiCarrier - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'DeviceUdiCarrier';
        if (source['deviceIdentifier']) {
            this.deviceIdentifier = new fhir.FhirString({ value: source.deviceIdentifier });
        }
        if (source['issuer']) {
            this.issuer = new fhir.FhirUri({ value: source.issuer });
        }
        if (source['jurisdiction']) {
            this.jurisdiction = new fhir.FhirUri({ value: source.jurisdiction });
        }
        if (source['carrierAIDC']) {
            this.carrierAIDC = new fhir.FhirBase64Binary({ value: source.carrierAIDC });
        }
        if (source['carrierHRF']) {
            this.carrierHRF = new fhir.FhirString({ value: source.carrierHRF });
        }
        if (source['entryType']) {
            this.entryType = source.entryType;
        }
    }
    /**
     * Required-bound Value Set for entryType
     */
    static entryTypeRequiredValueSet() {
        return UdiEntryTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["deviceIdentifier"]) {
            outcome.issue.push(...this.deviceIdentifier.doModelValidation().issue);
        }
        if (this["issuer"]) {
            outcome.issue.push(...this.issuer.doModelValidation().issue);
        }
        if (this["jurisdiction"]) {
            outcome.issue.push(...this.jurisdiction.doModelValidation().issue);
        }
        if (this["carrierAIDC"]) {
            outcome.issue.push(...this.carrierAIDC.doModelValidation().issue);
        }
        if (this["carrierHRF"]) {
            outcome.issue.push(...this.carrierHRF.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
 */
export class DeviceDeviceName extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceDeviceName - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'DeviceDeviceName';
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
    }
    /**
     * Required-bound Value Set for type
     */
    static typeRequiredValueSet() {
        return DeviceNametypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['name']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property name:fhir.FhirString fhir: Device.deviceName.name:string", }));
        }
        if (this["name"]) {
            outcome.issue.push(...this.name.doModelValidation().issue);
        }
        if (!this['type']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property type:DeviceNametypeValueSetEnum fhir: Device.deviceName.type:code", }));
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
 */
export class DeviceSpecialization extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceSpecialization - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'DeviceSpecialization';
        if (source['systemType']) {
            this.systemType = new fhir.CodeableConcept(source.systemType);
        }
        else {
            this.systemType = null;
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['systemType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property systemType:fhir.CodeableConcept fhir: Device.specialization.systemType:CodeableConcept", }));
        }
        if (this["systemType"]) {
            outcome.issue.push(...this.systemType.doModelValidation().issue);
        }
        if (this["version"]) {
            outcome.issue.push(...this.version.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * The actual design of the device or software version running on the device.
 */
export class DeviceVersion extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceVersion - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'DeviceVersion';
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['component']) {
            this.component = new fhir.Identifier(source.component);
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        else {
            this.value = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["component"]) {
            outcome.issue.push(...this.component.doModelValidation().issue);
        }
        if (!this['value']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property value:fhir.FhirString fhir: Device.version.value:string", }));
        }
        if (this["value"]) {
            outcome.issue.push(...this.value.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
 */
export class DeviceProperty extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceProperty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'DeviceProperty';
        /**
         * Property value as a quantity.
         */
        this.valueQuantity = [];
        /**
         * Property value as a code, e.g., NTP4 (synced to NTP).
         */
        this.valueCode = [];
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['valueQuantity']) {
            this.valueQuantity = source.valueQuantity.map((x) => new fhir.Quantity(x));
        }
        if (source['valueCode']) {
            this.valueCode = source.valueCode.map((x) => new fhir.CodeableConcept(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['type']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property type:fhir.CodeableConcept fhir: Device.property.type:CodeableConcept", }));
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["valueQuantity"]) {
            this.valueQuantity.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["valueCode"]) {
            this.valueCode.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.
 */
export class Device extends fhir.DomainResource {
    /**
     * Default constructor for Device - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'Device';
        /**
         * The barcode string from a barcode present on a device label or package may identify the instance, include names given to the device in local usage, or may identify the type of device. If the identifier identifies the type of device, Device.type element should be used.
         */
        this.identifier = [];
        /**
         * UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
         */
        this.udiCarrier = [];
        /**
         * Reason for the dtatus of the Device availability.
         */
        this.statusReason = [];
        /**
         * This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
         */
        this.deviceName = [];
        /**
         * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
         */
        this.specialization = [];
        /**
         * The actual design of the device or software version running on the device.
         */
        this.version = [];
        /**
         * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
         */
        this.property = [];
        /**
         * used for troubleshooting etc.
         */
        this.contact = [];
        /**
         * Descriptive information, usage information or implantation information that is not captured in an existing element.
         */
        this.note = [];
        /**
         * Provides additional safety characteristics about a medical device.  For example devices containing latex.
         */
        this.safety = [];
        this.resourceType = 'Device';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['definition']) {
            this.definition = new fhir.Reference(source.definition);
        }
        if (source['udiCarrier']) {
            this.udiCarrier = source.udiCarrier.map((x) => new fhir.DeviceUdiCarrier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        if (source['statusReason']) {
            this.statusReason = source.statusReason.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['distinctIdentifier']) {
            this.distinctIdentifier = new fhir.FhirString({ value: source.distinctIdentifier });
        }
        if (source['manufacturer']) {
            this.manufacturer = new fhir.FhirString({ value: source.manufacturer });
        }
        if (source['manufactureDate']) {
            this.manufactureDate = new fhir.FhirDateTime({ value: source.manufactureDate });
        }
        if (source['expirationDate']) {
            this.expirationDate = new fhir.FhirDateTime({ value: source.expirationDate });
        }
        if (source['lotNumber']) {
            this.lotNumber = new fhir.FhirString({ value: source.lotNumber });
        }
        if (source['serialNumber']) {
            this.serialNumber = new fhir.FhirString({ value: source.serialNumber });
        }
        if (source['deviceName']) {
            this.deviceName = source.deviceName.map((x) => new fhir.DeviceDeviceName(x));
        }
        if (source['modelNumber']) {
            this.modelNumber = new fhir.FhirString({ value: source.modelNumber });
        }
        if (source['partNumber']) {
            this.partNumber = new fhir.FhirString({ value: source.partNumber });
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['specialization']) {
            this.specialization = source.specialization.map((x) => new fhir.DeviceSpecialization(x));
        }
        if (source['version']) {
            this.version = source.version.map((x) => new fhir.DeviceVersion(x));
        }
        if (source['property']) {
            this.property = source.property.map((x) => new fhir.DeviceProperty(x));
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (source['owner']) {
            this.owner = new fhir.Reference(source.owner);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactPoint(x));
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['safety']) {
            this.safety = source.safety.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['parent']) {
            this.parent = new fhir.Reference(source.parent);
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return DeviceStatusValueSet;
    }
    /**
     * Extensible-bound Value Set for statusReason
     */
    static statusReasonExtensibleValueSet() {
        return DeviceStatusReasonValueSet;
    }
    /**
     * Example-bound Value Set for type
     */
    static typeExampleValueSet() {
        return DeviceTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'Device' fhir: Device.resourceType:'Device'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["definition"]) {
            outcome.issue.push(...this.definition.doModelValidation().issue);
        }
        if (this["udiCarrier"]) {
            this.udiCarrier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["statusReason"]) {
            this.statusReason.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["distinctIdentifier"]) {
            outcome.issue.push(...this.distinctIdentifier.doModelValidation().issue);
        }
        if (this["manufacturer"]) {
            outcome.issue.push(...this.manufacturer.doModelValidation().issue);
        }
        if (this["manufactureDate"]) {
            outcome.issue.push(...this.manufactureDate.doModelValidation().issue);
        }
        if (this["expirationDate"]) {
            outcome.issue.push(...this.expirationDate.doModelValidation().issue);
        }
        if (this["lotNumber"]) {
            outcome.issue.push(...this.lotNumber.doModelValidation().issue);
        }
        if (this["serialNumber"]) {
            outcome.issue.push(...this.serialNumber.doModelValidation().issue);
        }
        if (this["deviceName"]) {
            this.deviceName.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["modelNumber"]) {
            outcome.issue.push(...this.modelNumber.doModelValidation().issue);
        }
        if (this["partNumber"]) {
            outcome.issue.push(...this.partNumber.doModelValidation().issue);
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["specialization"]) {
            this.specialization.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["version"]) {
            this.version.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["property"]) {
            this.property.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["patient"]) {
            outcome.issue.push(...this.patient.doModelValidation().issue);
        }
        if (this["owner"]) {
            outcome.issue.push(...this.owner.doModelValidation().issue);
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["location"]) {
            outcome.issue.push(...this.location.doModelValidation().issue);
        }
        if (this["url"]) {
            outcome.issue.push(...this.url.doModelValidation().issue);
        }
        if (this["note"]) {
            this.note.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["safety"]) {
            this.safety.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["parent"]) {
            outcome.issue.push(...this.parent.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=Device.js.map