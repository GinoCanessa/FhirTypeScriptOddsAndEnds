// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: List
import * as fhir from '../fhir.js';
import { ListItemFlagValueSet } from '../fhirValueSets/ListItemFlagValueSet.js';
import { ListStatusValueSet } from '../fhirValueSets/ListStatusValueSet.js';
import { ListModeValueSet } from '../fhirValueSets/ListModeValueSet.js';
import { ListExampleCodesValueSet } from '../fhirValueSets/ListExampleCodesValueSet.js';
import { ListOrderValueSet } from '../fhirValueSets/ListOrderValueSet.js';
import { ListEmptyReasonValueSet } from '../fhirValueSets/ListEmptyReasonValueSet.js';
/**
 * If there are no entries in the list, an emptyReason SHOULD be provided.
 */
export class ListEntry extends fhir.BackboneElement {
    /**
     * Default constructor for ListEntry - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['flag']) {
            this.flag = new fhir.CodeableConcept(source.flag);
        }
        if (source['deleted']) {
            this.deleted = source.deleted;
        }
        if (source['_deleted']) {
            this._deleted = new fhir.FhirElement(source._deleted);
        }
        if (source['date']) {
            this.date = source.date;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['item']) {
            this.item = new fhir.Reference(source.item);
        }
        else {
            this.item = null;
        }
    }
    /**
     * Example-bound Value Set for flag
     */
    flagExampleValueSet() {
        return ListItemFlagValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["flag"]) {
            results.push(...this.flag.doModelValidation());
        }
        if (this["_deleted"]) {
            results.push(...this._deleted.doModelValidation());
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (!this["item"]) {
            results.push(["item", 'Missing required element: List.entry.item']);
        }
        if (this["item"]) {
            results.push(...this.item.doModelValidation());
        }
        return results;
    }
}
/**
 * A list is a curated collection of resources.
 */
export class List extends fhir.DomainResource {
    /**
     * Default constructor for List - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'List';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['mode']) {
            this.mode = source.mode;
        }
        else {
            this.mode = null;
        }
        if (source['_mode']) {
            this._mode = new fhir.FhirElement(source._mode);
        }
        if (source['title']) {
            this.title = source.title;
        }
        if (source['_title']) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['date']) {
            this.date = source.date;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['source']) {
            this.source = new fhir.Reference(source.source);
        }
        if (source['orderedBy']) {
            this.orderedBy = new fhir.CodeableConcept(source.orderedBy);
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['entry']) {
            this.entry = source.entry.map((x) => new fhir.ListEntry(x));
        }
        if (source['emptyReason']) {
            this.emptyReason = new fhir.CodeableConcept(source.emptyReason);
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return ListStatusValueSet;
    }
    /**
     * Required-bound Value Set for mode
     */
    modeRequiredValueSet() {
        return ListModeValueSet;
    }
    /**
     * Example-bound Value Set for code
     */
    codeExampleValueSet() {
        return ListExampleCodesValueSet;
    }
    /**
     * Preferred-bound Value Set for orderedBy
     */
    orderedByPreferredValueSet() {
        return ListOrderValueSet;
    }
    /**
     * Preferred-bound Value Set for emptyReason
     */
    emptyReasonPreferredValueSet() {
        return ListEmptyReasonValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: List.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: List.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (!this["mode"]) {
            results.push(["mode", 'Missing required element: List.mode']);
        }
        if (this["_mode"]) {
            results.push(...this._mode.doModelValidation());
        }
        if (this["_title"]) {
            results.push(...this._title.doModelValidation());
        }
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["subject"]) {
            results.push(...this.subject.doModelValidation());
        }
        if (this["encounter"]) {
            results.push(...this.encounter.doModelValidation());
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["source"]) {
            results.push(...this.source.doModelValidation());
        }
        if (this["orderedBy"]) {
            results.push(...this.orderedBy.doModelValidation());
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["entry"]) {
            this.entry.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["emptyReason"]) {
            results.push(...this.emptyReason.doModelValidation());
        }
        return results;
    }
}
//# sourceMappingURL=List.js.map