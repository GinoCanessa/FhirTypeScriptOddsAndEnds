// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * If there are no entries in the list, an emptyReason SHOULD be provided.
 */
export class ListEntry extends fhir.BackboneElement {
    /**
     * Default constructor for ListEntry - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["date"]) {
            this.date = source.date;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["deleted"]) {
            this.deleted = source.deleted;
        }
        if (source["_deleted"]) {
            this._deleted = new fhir.FhirElement(source._deleted);
        }
        if (source["flag"]) {
            this.flag = new fhir.CodeableConcept(source.flag);
        }
        this.item = null;
        if (source["item"]) {
            this.item = new fhir.Reference(source.item);
        }
        if (this.item === undefined) {
            this.item = null;
        }
    }
    /**
     * Check if the current ListEntry contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["item"] === undefined) {
            missingElements.push("item");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ListEntry from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new ListEntry(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `ListEntry is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A list is a curated collection of resources.
 */
export class List extends fhir.DomainResource {
    /**
     * Default constructor for List - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'List';
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source["date"]) {
            this.date = source.date;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["emptyReason"]) {
            this.emptyReason = new fhir.CodeableConcept(source.emptyReason);
        }
        if (source["encounter"]) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source["entry"]) {
            this.entry = source.entry.map((x) => new fhir.ListEntry(x));
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        this.mode = null;
        if (source["mode"]) {
            this.mode = source.mode;
        }
        if (this.mode === undefined) {
            this.mode = null;
        }
        if (source["_mode"]) {
            this._mode = new fhir.FhirElement(source._mode);
        }
        if (source["note"]) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source["orderedBy"]) {
            this.orderedBy = new fhir.CodeableConcept(source.orderedBy);
        }
        if (source["source"]) {
            this.source = new fhir.Reference(source.source);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["subject"]) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source["title"]) {
            this.title = source.title;
        }
        if (source["_title"]) {
            this._title = new fhir.FhirElement(source._title);
        }
    }
    /**
     * Check if the current List contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["mode"] === undefined) {
            missingElements.push("mode");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a List from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new List(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `List is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the List.mode field
 */
export var ListModeEnum;
(function (ListModeEnum) {
    ListModeEnum["WORKING"] = "working";
    ListModeEnum["SNAPSHOT"] = "snapshot";
    ListModeEnum["CHANGES"] = "changes";
})(ListModeEnum || (ListModeEnum = {}));
/**
 * Code Values for the List.status field
 */
export var ListStatusEnum;
(function (ListStatusEnum) {
    ListStatusEnum["CURRENT"] = "current";
    ListStatusEnum["RETIRED"] = "retired";
    ListStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(ListStatusEnum || (ListStatusEnum = {}));
//# sourceMappingURL=List.js.map