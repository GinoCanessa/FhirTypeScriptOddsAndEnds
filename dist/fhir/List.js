// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: List
import * as fhir from '../fhir.js';
import { ListItemFlagValueSet, } from '../fhirValueSets/ListItemFlagValueSet.js';
import { ListStatusValueSet, } from '../fhirValueSets/ListStatusValueSet.js';
import { ListModeValueSet, } from '../fhirValueSets/ListModeValueSet.js';
import { ListExampleCodesValueSet, } from '../fhirValueSets/ListExampleCodesValueSet.js';
import { ListOrderValueSet, } from '../fhirValueSets/ListOrderValueSet.js';
import { ListEmptyReasonValueSet, } from '../fhirValueSets/ListEmptyReasonValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * If there are no entries in the list, an emptyReason SHOULD be provided.
 */
export class ListEntry extends fhir.BackboneElement {
    /**
     * Default constructor for ListEntry - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ListEntry';
        if (source['flag']) {
            this.flag = new fhir.CodeableConcept(source.flag);
        }
        if (source['deleted']) {
            this.deleted = new fhir.FhirBoolean({ value: source.deleted });
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['item']) {
            this.item = new fhir.Reference(source.item);
        }
        else {
            this.item = null;
        }
    }
    /**
     * Example-bound Value Set for flag
     */
    static flagExampleValueSet() {
        return ListItemFlagValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["flag"]) {
            outcome.issue.push(...this.flag.doModelValidation().issue);
        }
        if (this["deleted"]) {
            outcome.issue.push(...this.deleted.doModelValidation().issue);
        }
        if (this["date"]) {
            outcome.issue.push(...this.date.doModelValidation().issue);
        }
        if (!this['item']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property item:fhir.Reference fhir: List.entry.item:Reference", }));
        }
        if (this["item"]) {
            outcome.issue.push(...this.item.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * A list is a curated collection of resources.
 */
export class List extends fhir.DomainResource {
    /**
     * Default constructor for List - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'List';
        /**
         * Identifier for the List assigned for business purposes outside the context of FHIR.
         */
        this.identifier = [];
        /**
         * Comments that apply to the overall list.
         */
        this.note = [];
        /**
         * If there are no entries in the list, an emptyReason SHOULD be provided.
         */
        this.entry = [];
        this.resourceType = 'List';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['mode']) {
            this.mode = source.mode;
        }
        else {
            this.mode = null;
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['source']) {
            this.source = new fhir.Reference(source.source);
        }
        if (source['orderedBy']) {
            this.orderedBy = new fhir.CodeableConcept(source.orderedBy);
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['entry']) {
            this.entry = source.entry.map((x) => new fhir.ListEntry(x));
        }
        if (source['emptyReason']) {
            this.emptyReason = new fhir.CodeableConcept(source.emptyReason);
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return ListStatusValueSet;
    }
    /**
     * Required-bound Value Set for mode
     */
    static modeRequiredValueSet() {
        return ListModeValueSet;
    }
    /**
     * Example-bound Value Set for code
     */
    static codeExampleValueSet() {
        return ListExampleCodesValueSet;
    }
    /**
     * Preferred-bound Value Set for orderedBy
     */
    static orderedByPreferredValueSet() {
        return ListOrderValueSet;
    }
    /**
     * Preferred-bound Value Set for emptyReason
     */
    static emptyReasonPreferredValueSet() {
        return ListEmptyReasonValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'List' fhir: List.resourceType:'List'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:ListStatusValueSetEnum fhir: List.status:code", }));
        }
        if (!this['mode']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property mode:ListModeValueSetEnum fhir: List.mode:code", }));
        }
        if (this["title"]) {
            outcome.issue.push(...this.title.doModelValidation().issue);
        }
        if (this["code"]) {
            outcome.issue.push(...this.code.doModelValidation().issue);
        }
        if (this["subject"]) {
            outcome.issue.push(...this.subject.doModelValidation().issue);
        }
        if (this["encounter"]) {
            outcome.issue.push(...this.encounter.doModelValidation().issue);
        }
        if (this["date"]) {
            outcome.issue.push(...this.date.doModelValidation().issue);
        }
        if (this["source"]) {
            outcome.issue.push(...this.source.doModelValidation().issue);
        }
        if (this["orderedBy"]) {
            outcome.issue.push(...this.orderedBy.doModelValidation().issue);
        }
        if (this["note"]) {
            this.note.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["entry"]) {
            this.entry.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["emptyReason"]) {
            outcome.issue.push(...this.emptyReason.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=List.js.map