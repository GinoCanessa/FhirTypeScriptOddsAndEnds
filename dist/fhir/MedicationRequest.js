// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicationRequest
import * as fhir from '../fhir.js';
import { V3ActSubstanceAdminSubstitutionCodeValueSet } from '../fhirValueSets/V3ActSubstanceAdminSubstitutionCodeValueSet.js';
import { V3SubstanceAdminSubstitutionReasonValueSet } from '../fhirValueSets/V3SubstanceAdminSubstitutionReasonValueSet.js';
import { MedicationrequestStatusValueSet } from '../fhirValueSets/MedicationrequestStatusValueSet.js';
import { MedicationrequestStatusReasonValueSet } from '../fhirValueSets/MedicationrequestStatusReasonValueSet.js';
import { MedicationrequestIntentValueSet } from '../fhirValueSets/MedicationrequestIntentValueSet.js';
import { MedicationrequestCategoryValueSet } from '../fhirValueSets/MedicationrequestCategoryValueSet.js';
import { RequestPriorityValueSet } from '../fhirValueSets/RequestPriorityValueSet.js';
import { MedicationCodesValueSet } from '../fhirValueSets/MedicationCodesValueSet.js';
import { PerformerRoleValueSet } from '../fhirValueSets/PerformerRoleValueSet.js';
import { ConditionCodeValueSet } from '../fhirValueSets/ConditionCodeValueSet.js';
import { MedicationrequestCourseOfTherapyValueSet } from '../fhirValueSets/MedicationrequestCourseOfTherapyValueSet.js';
/**
 * If populating this element, either the quantity or the duration must be included.
 */
export class MedicationRequestDispenseRequestInitialFill extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationRequestDispenseRequestInitialFill - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['duration']) {
            this.duration = new fhir.Duration(source.duration);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["quantity"]) {
            results.push(...this.quantity.doModelValidation());
        }
        if (this["duration"]) {
            results.push(...this.duration.doModelValidation());
        }
        return results;
    }
}
/**
 * Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
 */
export class MedicationRequestDispenseRequest extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationRequestDispenseRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['initialFill']) {
            this.initialFill = new fhir.MedicationRequestDispenseRequestInitialFill(source.initialFill);
        }
        if (source['dispenseInterval']) {
            this.dispenseInterval = new fhir.Duration(source.dispenseInterval);
        }
        if (source['validityPeriod']) {
            this.validityPeriod = new fhir.Period(source.validityPeriod);
        }
        if (source['numberOfRepeatsAllowed']) {
            this.numberOfRepeatsAllowed = source.numberOfRepeatsAllowed;
        }
        if (source['_numberOfRepeatsAllowed']) {
            this._numberOfRepeatsAllowed = new fhir.FhirElement(source._numberOfRepeatsAllowed);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['expectedSupplyDuration']) {
            this.expectedSupplyDuration = new fhir.Duration(source.expectedSupplyDuration);
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["initialFill"]) {
            results.push(...this.initialFill.doModelValidation());
        }
        if (this["dispenseInterval"]) {
            results.push(...this.dispenseInterval.doModelValidation());
        }
        if (this["validityPeriod"]) {
            results.push(...this.validityPeriod.doModelValidation());
        }
        if (this["_numberOfRepeatsAllowed"]) {
            results.push(...this._numberOfRepeatsAllowed.doModelValidation());
        }
        if (this["quantity"]) {
            results.push(...this.quantity.doModelValidation());
        }
        if (this["expectedSupplyDuration"]) {
            results.push(...this.expectedSupplyDuration.doModelValidation());
        }
        if (this["performer"]) {
            results.push(...this.performer.doModelValidation());
        }
        return results;
    }
}
/**
 * Indicates whether or not substitution can or should be part of the dispense. In some cases, substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
 */
export class MedicationRequestSubstitution extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationRequestSubstitution - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['allowedBoolean']) {
            this.allowedBoolean = source.allowedBoolean;
        }
        if (source['_allowedBoolean']) {
            this._allowedBoolean = new fhir.FhirElement(source._allowedBoolean);
        }
        if (source['allowedCodeableConcept']) {
            this.allowedCodeableConcept = new fhir.CodeableConcept(source.allowedCodeableConcept);
        }
        if (source['reason']) {
            this.reason = new fhir.CodeableConcept(source.reason);
        }
    }
    /**
     * Example-bound Value Set for allowedBoolean
     */
    static allowedBooleanExampleValueSet() {
        return V3ActSubstanceAdminSubstitutionCodeValueSet;
    }
    /**
     * Example-bound Value Set for allowedCodeableConcept
     */
    static allowedCodeableConceptExampleValueSet() {
        return V3ActSubstanceAdminSubstitutionCodeValueSet;
    }
    /**
     * Example-bound Value Set for reason
     */
    static reasonExampleValueSet() {
        return V3SubstanceAdminSubstitutionReasonValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_allowedBoolean"]) {
            results.push(...this._allowedBoolean.doModelValidation());
        }
        if (this["allowedCodeableConcept"]) {
            results.push(...this.allowedCodeableConcept.doModelValidation());
        }
        if (this["reason"]) {
            results.push(...this.reason.doModelValidation());
        }
        return results;
    }
}
/**
 * An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
 */
export class MedicationRequest extends fhir.DomainResource {
    /**
     * Default constructor for MedicationRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'MedicationRequest';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['statusReason']) {
            this.statusReason = new fhir.CodeableConcept(source.statusReason);
        }
        if (source['intent']) {
            this.intent = source.intent;
        }
        else {
            this.intent = null;
        }
        if (source['_intent']) {
            this._intent = new fhir.FhirElement(source._intent);
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['priority']) {
            this.priority = source.priority;
        }
        if (source['_priority']) {
            this._priority = new fhir.FhirElement(source._priority);
        }
        if (source['doNotPerform']) {
            this.doNotPerform = source.doNotPerform;
        }
        if (source['_doNotPerform']) {
            this._doNotPerform = new fhir.FhirElement(source._doNotPerform);
        }
        if (source['reportedBoolean']) {
            this.reportedBoolean = source.reportedBoolean;
        }
        if (source['_reportedBoolean']) {
            this._reportedBoolean = new fhir.FhirElement(source._reportedBoolean);
        }
        if (source['reportedReference']) {
            this.reportedReference = new fhir.Reference(source.reportedReference);
        }
        if (source['medicationCodeableConcept']) {
            this.medicationCodeableConcept = new fhir.CodeableConcept(source.medicationCodeableConcept);
        }
        if (source['medicationReference']) {
            this.medicationReference = new fhir.Reference(source.medicationReference);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['supportingInformation']) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x));
        }
        if (source['authoredOn']) {
            this.authoredOn = source.authoredOn;
        }
        if (source['_authoredOn']) {
            this._authoredOn = new fhir.FhirElement(source._authoredOn);
        }
        if (source['requester']) {
            this.requester = new fhir.Reference(source.requester);
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer);
        }
        if (source['performerType']) {
            this.performerType = new fhir.CodeableConcept(source.performerType);
        }
        if (source['recorder']) {
            this.recorder = new fhir.Reference(source.recorder);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source['instantiatesCanonical']) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => (x));
        }
        if (source['_instantiatesCanonical']) {
            this._instantiatesCanonical = source._instantiatesCanonical.map((x) => new fhir.FhirElement(x));
        }
        if (source['instantiatesUri']) {
            this.instantiatesUri = source.instantiatesUri.map((x) => (x));
        }
        if (source['_instantiatesUri']) {
            this._instantiatesUri = source._instantiatesUri.map((x) => new fhir.FhirElement(x));
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source['groupIdentifier']) {
            this.groupIdentifier = new fhir.Identifier(source.groupIdentifier);
        }
        if (source['courseOfTherapyType']) {
            this.courseOfTherapyType = new fhir.CodeableConcept(source.courseOfTherapyType);
        }
        if (source['insurance']) {
            this.insurance = source.insurance.map((x) => new fhir.Reference(x));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['dosageInstruction']) {
            this.dosageInstruction = source.dosageInstruction.map((x) => new fhir.Dosage(x));
        }
        if (source['dispenseRequest']) {
            this.dispenseRequest = new fhir.MedicationRequestDispenseRequest(source.dispenseRequest);
        }
        if (source['substitution']) {
            this.substitution = new fhir.MedicationRequestSubstitution(source.substitution);
        }
        if (source['priorPrescription']) {
            this.priorPrescription = new fhir.Reference(source.priorPrescription);
        }
        if (source['detectedIssue']) {
            this.detectedIssue = source.detectedIssue.map((x) => new fhir.Reference(x));
        }
        if (source['eventHistory']) {
            this.eventHistory = source.eventHistory.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return MedicationrequestStatusValueSet;
    }
    /**
     * Example-bound Value Set for statusReason
     */
    static statusReasonExampleValueSet() {
        return MedicationrequestStatusReasonValueSet;
    }
    /**
     * Required-bound Value Set for intent
     */
    static intentRequiredValueSet() {
        return MedicationrequestIntentValueSet;
    }
    /**
     * Example-bound Value Set for category
     */
    static categoryExampleValueSet() {
        return MedicationrequestCategoryValueSet;
    }
    /**
     * Required-bound Value Set for priority
     */
    static priorityRequiredValueSet() {
        return RequestPriorityValueSet;
    }
    /**
     * Example-bound Value Set for medicationCodeableConcept
     */
    static medicationCodeableConceptExampleValueSet() {
        return MedicationCodesValueSet;
    }
    /**
     * Example-bound Value Set for medicationReference
     */
    static medicationReferenceExampleValueSet() {
        return MedicationCodesValueSet;
    }
    /**
     * Example-bound Value Set for performerType
     */
    static performerTypeExampleValueSet() {
        return PerformerRoleValueSet;
    }
    /**
     * Example-bound Value Set for reasonCode
     */
    static reasonCodeExampleValueSet() {
        return ConditionCodeValueSet;
    }
    /**
     * Example-bound Value Set for courseOfTherapyType
     */
    static courseOfTherapyTypeExampleValueSet() {
        return MedicationrequestCourseOfTherapyValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: MedicationRequest.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: MedicationRequest.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["statusReason"]) {
            results.push(...this.statusReason.doModelValidation());
        }
        if (!this["intent"]) {
            results.push(["intent", 'Missing required element: MedicationRequest.intent']);
        }
        if (this["_intent"]) {
            results.push(...this._intent.doModelValidation());
        }
        if (this["category"]) {
            this.category.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_priority"]) {
            results.push(...this._priority.doModelValidation());
        }
        if (this["_doNotPerform"]) {
            results.push(...this._doNotPerform.doModelValidation());
        }
        if (this["_reportedBoolean"]) {
            results.push(...this._reportedBoolean.doModelValidation());
        }
        if (this["reportedReference"]) {
            results.push(...this.reportedReference.doModelValidation());
        }
        if (this["medicationCodeableConcept"]) {
            results.push(...this.medicationCodeableConcept.doModelValidation());
        }
        if (this["medicationReference"]) {
            results.push(...this.medicationReference.doModelValidation());
        }
        if (!this["subject"]) {
            results.push(["subject", 'Missing required element: MedicationRequest.subject']);
        }
        if (this["subject"]) {
            results.push(...this.subject.doModelValidation());
        }
        if (this["encounter"]) {
            results.push(...this.encounter.doModelValidation());
        }
        if (this["supportingInformation"]) {
            this.supportingInformation.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_authoredOn"]) {
            results.push(...this._authoredOn.doModelValidation());
        }
        if (this["requester"]) {
            results.push(...this.requester.doModelValidation());
        }
        if (this["performer"]) {
            results.push(...this.performer.doModelValidation());
        }
        if (this["performerType"]) {
            results.push(...this.performerType.doModelValidation());
        }
        if (this["recorder"]) {
            results.push(...this.recorder.doModelValidation());
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_instantiatesCanonical"]) {
            this._instantiatesCanonical.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_instantiatesUri"]) {
            this._instantiatesUri.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["groupIdentifier"]) {
            results.push(...this.groupIdentifier.doModelValidation());
        }
        if (this["courseOfTherapyType"]) {
            results.push(...this.courseOfTherapyType.doModelValidation());
        }
        if (this["insurance"]) {
            this.insurance.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["dosageInstruction"]) {
            this.dosageInstruction.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["dispenseRequest"]) {
            results.push(...this.dispenseRequest.doModelValidation());
        }
        if (this["substitution"]) {
            results.push(...this.substitution.doModelValidation());
        }
        if (this["priorPrescription"]) {
            results.push(...this.priorPrescription.doModelValidation());
        }
        if (this["detectedIssue"]) {
            this.detectedIssue.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["eventHistory"]) {
            this.eventHistory.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=MedicationRequest.js.map