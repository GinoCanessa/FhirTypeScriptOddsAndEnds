// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicationRequest
import * as fhir from '../fhir.js';
import { V3SubstanceAdminSubstitutionReasonValueSet, } from '../fhirValueSets/V3SubstanceAdminSubstitutionReasonValueSet.js';
import { MedicationrequestStatusValueSet, } from '../fhirValueSets/MedicationrequestStatusValueSet.js';
import { MedicationrequestStatusReasonValueSet, } from '../fhirValueSets/MedicationrequestStatusReasonValueSet.js';
import { MedicationrequestIntentValueSet, } from '../fhirValueSets/MedicationrequestIntentValueSet.js';
import { MedicationrequestCategoryValueSet, } from '../fhirValueSets/MedicationrequestCategoryValueSet.js';
import { RequestPriorityValueSet, } from '../fhirValueSets/RequestPriorityValueSet.js';
import { PerformerRoleValueSet, } from '../fhirValueSets/PerformerRoleValueSet.js';
import { ConditionCodeValueSet, } from '../fhirValueSets/ConditionCodeValueSet.js';
import { MedicationrequestCourseOfTherapyValueSet, } from '../fhirValueSets/MedicationrequestCourseOfTherapyValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * If populating this element, either the quantity or the duration must be included.
 */
export class MedicationRequestDispenseRequestInitialFill extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationRequestDispenseRequestInitialFill - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicationRequestDispenseRequestInitialFill';
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['duration']) {
            this.duration = new fhir.Duration(source.duration);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["quantity"]) {
            outcome.issue.push(...this.quantity.doModelValidation().issue);
        }
        if (this["duration"]) {
            outcome.issue.push(...this.duration.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
 */
export class MedicationRequestDispenseRequest extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationRequestDispenseRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicationRequestDispenseRequest';
        if (source['initialFill']) {
            this.initialFill = new fhir.MedicationRequestDispenseRequestInitialFill(source.initialFill);
        }
        if (source['dispenseInterval']) {
            this.dispenseInterval = new fhir.Duration(source.dispenseInterval);
        }
        if (source['validityPeriod']) {
            this.validityPeriod = new fhir.Period(source.validityPeriod);
        }
        if (source['numberOfRepeatsAllowed']) {
            this.numberOfRepeatsAllowed = new fhir.FhirUnsignedInt({ value: source.numberOfRepeatsAllowed });
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['expectedSupplyDuration']) {
            this.expectedSupplyDuration = new fhir.Duration(source.expectedSupplyDuration);
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["initialFill"]) {
            outcome.issue.push(...this.initialFill.doModelValidation().issue);
        }
        if (this["dispenseInterval"]) {
            outcome.issue.push(...this.dispenseInterval.doModelValidation().issue);
        }
        if (this["validityPeriod"]) {
            outcome.issue.push(...this.validityPeriod.doModelValidation().issue);
        }
        if (this["numberOfRepeatsAllowed"]) {
            outcome.issue.push(...this.numberOfRepeatsAllowed.doModelValidation().issue);
        }
        if (this["quantity"]) {
            outcome.issue.push(...this.quantity.doModelValidation().issue);
        }
        if (this["expectedSupplyDuration"]) {
            outcome.issue.push(...this.expectedSupplyDuration.doModelValidation().issue);
        }
        if (this["performer"]) {
            outcome.issue.push(...this.performer.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Indicates whether or not substitution can or should be part of the dispense. In some cases, substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
 */
export class MedicationRequestSubstitution extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationRequestSubstitution - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicationRequestSubstitution';
        this.__allowedIsChoice = true;
        if (source['allowed']) {
            this.allowed = source.allowed;
        }
        else if (source['allowedBoolean']) {
            this.allowed = new fhir.FhirBoolean({ value: source.allowedBoolean });
        }
        else if (source['allowedCodeableConcept']) {
            this.allowed = new fhir.CodeableConcept(source.allowedCodeableConcept);
        }
        else {
            this.allowed = null;
        }
        if (source['reason']) {
            this.reason = new fhir.CodeableConcept(source.reason);
        }
    }
    /**
     * Example-bound Value Set for reason
     */
    static reasonExampleValueSet() {
        return V3SubstanceAdminSubstitutionReasonValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['allowed']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property allowed: fhir: MedicationRequest.substitution.allowed[x]:", }));
        }
        if (this["reason"]) {
            outcome.issue.push(...this.reason.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
 */
export class MedicationRequest extends fhir.DomainResource {
    /**
     * Default constructor for MedicationRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicationRequest';
        /**
         * This is a business identifier, not a resource identifier.
         */
        this.identifier = [];
        /**
         * The category can be used to include where the medication is expected to be consumed or other types of requests.
         */
        this.category = [];
        this.__reportedIsChoice = true;
        this.__medicationIsChoice = true;
        /**
         * Include additional information (for example, patient height and weight) that supports the ordering of the medication.
         */
        this.supportingInformation = [];
        /**
         * This could be a diagnosis code. If a full condition record exists or additional detail is needed, use reasonReference.
         */
        this.reasonCode = [];
        /**
         * This is a reference to a condition or observation that is the reason for the medication order.  If only a code exists, use reasonCode.
         */
        this.reasonReference = [];
        /**
         * The URL pointing to a protocol, guideline, orderset, or other definition that is adhered to in whole or in part by this MedicationRequest.
         */
        this.instantiatesCanonical = [];
        /**
         * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this MedicationRequest.
         */
        this.instantiatesUri = [];
        /**
         * A plan or request that is fulfilled in whole or in part by this medication request.
         */
        this.basedOn = [];
        /**
         * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service.
         */
        this.insurance = [];
        /**
         * Extra information about the prescription that could not be conveyed by the other attributes.
         */
        this.note = [];
        /**
         * There are examples where a medication request may include the option of an oral dose or an Intravenous or Intramuscular dose.  For example, "Ondansetron 8mg orally or IV twice a day as needed for nausea" or "Compazine® (prochlorperazine) 5-10mg PO or 25mg PR bid prn nausea or vomiting".  In these cases, two medication requests would be created that could be grouped together.  The decision on which dose and route of administration to use is based on the patient's condition at the time the dose is needed.
         */
        this.dosageInstruction = [];
        /**
         * This element can include a detected issue that has been identified either by a decision support system or by a clinician and may include information on the steps that were taken to address the issue.
         */
        this.detectedIssue = [];
        /**
         * This might not include provenances for all versions of the request – only those deemed “relevant” or important. This SHALL NOT include the provenance associated with this current version of the resource. (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update. Until then, it can be queried directly as the provenance that points to this version using _revinclude All Provenances should have some historical version of this Request as their subject.).
         */
        this.eventHistory = [];
        this.resourceType = 'MedicationRequest';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['statusReason']) {
            this.statusReason = new fhir.CodeableConcept(source.statusReason);
        }
        if (source['intent']) {
            this.intent = source.intent;
        }
        else {
            this.intent = null;
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['priority']) {
            this.priority = source.priority;
        }
        if (source['doNotPerform']) {
            this.doNotPerform = new fhir.FhirBoolean({ value: source.doNotPerform });
        }
        if (source['reported']) {
            this.reported = source.reported;
        }
        else if (source['reportedBoolean']) {
            this.reported = new fhir.FhirBoolean({ value: source.reportedBoolean });
        }
        else if (source['reportedReference']) {
            this.reported = new fhir.Reference(source.reportedReference);
        }
        if (source['medication']) {
            this.medication = source.medication;
        }
        else if (source['medicationCodeableConcept']) {
            this.medication = new fhir.CodeableConcept(source.medicationCodeableConcept);
        }
        else if (source['medicationReference']) {
            this.medication = new fhir.Reference(source.medicationReference);
        }
        else {
            this.medication = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['supportingInformation']) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x));
        }
        if (source['authoredOn']) {
            this.authoredOn = new fhir.FhirDateTime({ value: source.authoredOn });
        }
        if (source['requester']) {
            this.requester = new fhir.Reference(source.requester);
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer);
        }
        if (source['performerType']) {
            this.performerType = new fhir.CodeableConcept(source.performerType);
        }
        if (source['recorder']) {
            this.recorder = new fhir.Reference(source.recorder);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source['instantiatesCanonical']) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        if (source['instantiatesUri']) {
            this.instantiatesUri = source.instantiatesUri.map((x) => new fhir.FhirUri({ value: x }));
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source['groupIdentifier']) {
            this.groupIdentifier = new fhir.Identifier(source.groupIdentifier);
        }
        if (source['courseOfTherapyType']) {
            this.courseOfTherapyType = new fhir.CodeableConcept(source.courseOfTherapyType);
        }
        if (source['insurance']) {
            this.insurance = source.insurance.map((x) => new fhir.Reference(x));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['dosageInstruction']) {
            this.dosageInstruction = source.dosageInstruction.map((x) => new fhir.Dosage(x));
        }
        if (source['dispenseRequest']) {
            this.dispenseRequest = new fhir.MedicationRequestDispenseRequest(source.dispenseRequest);
        }
        if (source['substitution']) {
            this.substitution = new fhir.MedicationRequestSubstitution(source.substitution);
        }
        if (source['priorPrescription']) {
            this.priorPrescription = new fhir.Reference(source.priorPrescription);
        }
        if (source['detectedIssue']) {
            this.detectedIssue = source.detectedIssue.map((x) => new fhir.Reference(x));
        }
        if (source['eventHistory']) {
            this.eventHistory = source.eventHistory.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return MedicationrequestStatusValueSet;
    }
    /**
     * Example-bound Value Set for statusReason
     */
    static statusReasonExampleValueSet() {
        return MedicationrequestStatusReasonValueSet;
    }
    /**
     * Required-bound Value Set for intent
     */
    static intentRequiredValueSet() {
        return MedicationrequestIntentValueSet;
    }
    /**
     * Example-bound Value Set for category
     */
    static categoryExampleValueSet() {
        return MedicationrequestCategoryValueSet;
    }
    /**
     * Required-bound Value Set for priority
     */
    static priorityRequiredValueSet() {
        return RequestPriorityValueSet;
    }
    /**
     * Example-bound Value Set for performerType
     */
    static performerTypeExampleValueSet() {
        return PerformerRoleValueSet;
    }
    /**
     * Example-bound Value Set for reasonCode
     */
    static reasonCodeExampleValueSet() {
        return ConditionCodeValueSet;
    }
    /**
     * Example-bound Value Set for courseOfTherapyType
     */
    static courseOfTherapyTypeExampleValueSet() {
        return MedicationrequestCourseOfTherapyValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'MedicationRequest' fhir: MedicationRequest.resourceType:'MedicationRequest'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:MedicationrequestStatusValueSetEnum fhir: MedicationRequest.status:code", }));
        }
        if (this["statusReason"]) {
            outcome.issue.push(...this.statusReason.doModelValidation().issue);
        }
        if (!this['intent']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property intent:MedicationrequestIntentValueSetEnum fhir: MedicationRequest.intent:code", }));
        }
        if (this["category"]) {
            this.category.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["doNotPerform"]) {
            outcome.issue.push(...this.doNotPerform.doModelValidation().issue);
        }
        if (!this['medication']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property medication: fhir: MedicationRequest.medication[x]:", }));
        }
        if (!this['subject']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property subject:fhir.Reference fhir: MedicationRequest.subject:Reference", }));
        }
        if (this["subject"]) {
            outcome.issue.push(...this.subject.doModelValidation().issue);
        }
        if (this["encounter"]) {
            outcome.issue.push(...this.encounter.doModelValidation().issue);
        }
        if (this["supportingInformation"]) {
            this.supportingInformation.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["authoredOn"]) {
            outcome.issue.push(...this.authoredOn.doModelValidation().issue);
        }
        if (this["requester"]) {
            outcome.issue.push(...this.requester.doModelValidation().issue);
        }
        if (this["performer"]) {
            outcome.issue.push(...this.performer.doModelValidation().issue);
        }
        if (this["performerType"]) {
            outcome.issue.push(...this.performerType.doModelValidation().issue);
        }
        if (this["recorder"]) {
            outcome.issue.push(...this.recorder.doModelValidation().issue);
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["instantiatesCanonical"]) {
            this.instantiatesCanonical.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["instantiatesUri"]) {
            this.instantiatesUri.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["groupIdentifier"]) {
            outcome.issue.push(...this.groupIdentifier.doModelValidation().issue);
        }
        if (this["courseOfTherapyType"]) {
            outcome.issue.push(...this.courseOfTherapyType.doModelValidation().issue);
        }
        if (this["insurance"]) {
            this.insurance.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["dosageInstruction"]) {
            this.dosageInstruction.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["dispenseRequest"]) {
            outcome.issue.push(...this.dispenseRequest.doModelValidation().issue);
        }
        if (this["substitution"]) {
            outcome.issue.push(...this.substitution.doModelValidation().issue);
        }
        if (this["priorPrescription"]) {
            outcome.issue.push(...this.priorPrescription.doModelValidation().issue);
        }
        if (this["detectedIssue"]) {
            this.detectedIssue.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["eventHistory"]) {
            this.eventHistory.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=MedicationRequest.js.map