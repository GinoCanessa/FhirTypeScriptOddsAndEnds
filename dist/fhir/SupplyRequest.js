// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Specific parameters for the ordered item.  For example, the size of the indicated item.
 */
export class SupplyRequestParameter extends fhir.BackboneElement {
    /**
     * Default constructor for SupplyRequestParameter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source["valueCodeableConcept"]) {
            this.valueCodeableConcept = new fhir.CodeableConcept(source.valueCodeableConcept);
        }
        if (source["valueQuantity"]) {
            this.valueQuantity = new fhir.Quantity(source.valueQuantity);
        }
        if (source["valueRange"]) {
            this.valueRange = new fhir.Range(source.valueRange);
        }
        if (source["valueBoolean"]) {
            this.valueBoolean = source.valueBoolean;
        }
        if (source["_valueBoolean"]) {
            this._valueBoolean = new fhir.FhirElement(source._valueBoolean);
        }
    }
    /**
     * Check if the current SupplyRequestParameter contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SupplyRequestParameter from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new SupplyRequestParameter(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `SupplyRequestParameter is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A record of a request for a medication, substance or device used in the healthcare setting.
 */
export class SupplyRequest extends fhir.DomainResource {
    /**
     * Default constructor for SupplyRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'SupplyRequest';
        if (source["authoredOn"]) {
            this.authoredOn = source.authoredOn;
        }
        if (source["_authoredOn"]) {
            this._authoredOn = new fhir.FhirElement(source._authoredOn);
        }
        if (source["category"]) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source["deliverFrom"]) {
            this.deliverFrom = new fhir.Reference(source.deliverFrom);
        }
        if (source["deliverTo"]) {
            this.deliverTo = new fhir.Reference(source.deliverTo);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["itemCodeableConcept"]) {
            this.itemCodeableConcept = new fhir.CodeableConcept(source.itemCodeableConcept);
        }
        if (source["itemReference"]) {
            this.itemReference = new fhir.Reference(source.itemReference);
        }
        if (source["occurrenceDateTime"]) {
            this.occurrenceDateTime = source.occurrenceDateTime;
        }
        if (source["_occurrenceDateTime"]) {
            this._occurrenceDateTime = new fhir.FhirElement(source._occurrenceDateTime);
        }
        if (source["occurrencePeriod"]) {
            this.occurrencePeriod = new fhir.Period(source.occurrencePeriod);
        }
        if (source["occurrenceTiming"]) {
            this.occurrenceTiming = new fhir.Timing(source.occurrenceTiming);
        }
        if (source["parameter"]) {
            this.parameter = source.parameter.map((x) => new fhir.SupplyRequestParameter(x));
        }
        if (source["priority"]) {
            this.priority = source.priority;
        }
        if (source["_priority"]) {
            this._priority = new fhir.FhirElement(source._priority);
        }
        this.quantity = null;
        if (source["quantity"]) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (this.quantity === undefined) {
            this.quantity = null;
        }
        if (source["reasonCode"]) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["reasonReference"]) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source["requester"]) {
            this.requester = new fhir.Reference(source.requester);
        }
        if (source["status"]) {
            this.status = source.status;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["supplier"]) {
            this.supplier = source.supplier.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Check if the current SupplyRequest contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["quantity"] === undefined) {
            missingElements.push("quantity");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SupplyRequest from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new SupplyRequest(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `SupplyRequest is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the SupplyRequest.priority field
 */
export var SupplyRequestPriorityEnum;
(function (SupplyRequestPriorityEnum) {
    SupplyRequestPriorityEnum["ROUTINE"] = "routine";
    SupplyRequestPriorityEnum["URGENT"] = "urgent";
    SupplyRequestPriorityEnum["ASAP"] = "asap";
    SupplyRequestPriorityEnum["STAT"] = "stat";
})(SupplyRequestPriorityEnum || (SupplyRequestPriorityEnum = {}));
/**
 * Code Values for the SupplyRequest.status field
 */
export var SupplyRequestStatusEnum;
(function (SupplyRequestStatusEnum) {
    SupplyRequestStatusEnum["DRAFT"] = "draft";
    SupplyRequestStatusEnum["ACTIVE"] = "active";
    SupplyRequestStatusEnum["SUSPENDED"] = "suspended";
    SupplyRequestStatusEnum["CANCELLED"] = "cancelled";
    SupplyRequestStatusEnum["COMPLETED"] = "completed";
    SupplyRequestStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    SupplyRequestStatusEnum["UNKNOWN"] = "unknown";
})(SupplyRequestStatusEnum || (SupplyRequestStatusEnum = {}));
//# sourceMappingURL=SupplyRequest.js.map