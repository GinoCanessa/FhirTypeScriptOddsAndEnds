// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SupplyRequest
import * as fhir from '../fhir.js';
import { SupplyrequestStatusValueSet } from '../fhirValueSets/SupplyrequestStatusValueSet.js';
import { SupplyrequestKindValueSet } from '../fhirValueSets/SupplyrequestKindValueSet.js';
import { RequestPriorityValueSet } from '../fhirValueSets/RequestPriorityValueSet.js';
import { SupplyItemValueSet } from '../fhirValueSets/SupplyItemValueSet.js';
import { SupplyrequestReasonValueSet } from '../fhirValueSets/SupplyrequestReasonValueSet.js';
/**
 * Specific parameters for the ordered item.  For example, the size of the indicated item.
 */
export class SupplyRequestParameter extends fhir.BackboneElement {
    /**
     * Default constructor for SupplyRequestParameter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['valueCodeableConcept']) {
            this.valueCodeableConcept = new fhir.CodeableConcept(source.valueCodeableConcept);
        }
        if (source['valueQuantity']) {
            this.valueQuantity = new fhir.Quantity(source.valueQuantity);
        }
        if (source['valueRange']) {
            this.valueRange = new fhir.Range(source.valueRange);
        }
        if (source['valueBoolean']) {
            this.valueBoolean = source.valueBoolean;
        }
        if (source['_valueBoolean']) {
            this._valueBoolean = new fhir.FhirElement(source._valueBoolean);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["valueCodeableConcept"]) {
            results.push(...this.valueCodeableConcept.doModelValidation());
        }
        if (this["valueQuantity"]) {
            results.push(...this.valueQuantity.doModelValidation());
        }
        if (this["valueRange"]) {
            results.push(...this.valueRange.doModelValidation());
        }
        if (this["_valueBoolean"]) {
            results.push(...this._valueBoolean.doModelValidation());
        }
        return results;
    }
}
/**
 * A record of a request for a medication, substance or device used in the healthcare setting.
 */
export class SupplyRequest extends fhir.DomainResource {
    /**
     * Default constructor for SupplyRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'SupplyRequest';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['priority']) {
            this.priority = source.priority;
        }
        if (source['_priority']) {
            this._priority = new fhir.FhirElement(source._priority);
        }
        if (source['itemCodeableConcept']) {
            this.itemCodeableConcept = new fhir.CodeableConcept(source.itemCodeableConcept);
        }
        if (source['itemReference']) {
            this.itemReference = new fhir.Reference(source.itemReference);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        else {
            this.quantity = null;
        }
        if (source['parameter']) {
            this.parameter = source.parameter.map((x) => new fhir.SupplyRequestParameter(x));
        }
        if (source['occurrenceDateTime']) {
            this.occurrenceDateTime = source.occurrenceDateTime;
        }
        if (source['_occurrenceDateTime']) {
            this._occurrenceDateTime = new fhir.FhirElement(source._occurrenceDateTime);
        }
        if (source['occurrencePeriod']) {
            this.occurrencePeriod = new fhir.Period(source.occurrencePeriod);
        }
        if (source['occurrenceTiming']) {
            this.occurrenceTiming = new fhir.Timing(source.occurrenceTiming);
        }
        if (source['authoredOn']) {
            this.authoredOn = source.authoredOn;
        }
        if (source['_authoredOn']) {
            this._authoredOn = new fhir.FhirElement(source._authoredOn);
        }
        if (source['requester']) {
            this.requester = new fhir.Reference(source.requester);
        }
        if (source['supplier']) {
            this.supplier = source.supplier.map((x) => new fhir.Reference(x));
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source['deliverFrom']) {
            this.deliverFrom = new fhir.Reference(source.deliverFrom);
        }
        if (source['deliverTo']) {
            this.deliverTo = new fhir.Reference(source.deliverTo);
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return SupplyrequestStatusValueSet;
    }
    /**
     * Example-bound Value Set for category
     */
    categoryExampleValueSet() {
        return SupplyrequestKindValueSet;
    }
    /**
     * Required-bound Value Set for priority
     */
    priorityRequiredValueSet() {
        return RequestPriorityValueSet;
    }
    /**
     * Example-bound Value Set for itemCodeableConcept
     */
    itemCodeableConceptExampleValueSet() {
        return SupplyItemValueSet;
    }
    /**
     * Example-bound Value Set for itemReference
     */
    itemReferenceExampleValueSet() {
        return SupplyItemValueSet;
    }
    /**
     * Example-bound Value Set for reasonCode
     */
    reasonCodeExampleValueSet() {
        return SupplyrequestReasonValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: SupplyRequest.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["category"]) {
            results.push(...this.category.doModelValidation());
        }
        if (this["_priority"]) {
            results.push(...this._priority.doModelValidation());
        }
        if (this["itemCodeableConcept"]) {
            results.push(...this.itemCodeableConcept.doModelValidation());
        }
        if (this["itemReference"]) {
            results.push(...this.itemReference.doModelValidation());
        }
        if (!this["quantity"]) {
            results.push(["quantity", 'Missing required element: SupplyRequest.quantity']);
        }
        if (this["quantity"]) {
            results.push(...this.quantity.doModelValidation());
        }
        if (this["parameter"]) {
            this.parameter.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_occurrenceDateTime"]) {
            results.push(...this._occurrenceDateTime.doModelValidation());
        }
        if (this["occurrencePeriod"]) {
            results.push(...this.occurrencePeriod.doModelValidation());
        }
        if (this["occurrenceTiming"]) {
            results.push(...this.occurrenceTiming.doModelValidation());
        }
        if (this["_authoredOn"]) {
            results.push(...this._authoredOn.doModelValidation());
        }
        if (this["requester"]) {
            results.push(...this.requester.doModelValidation());
        }
        if (this["supplier"]) {
            this.supplier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["deliverFrom"]) {
            results.push(...this.deliverFrom.doModelValidation());
        }
        if (this["deliverTo"]) {
            results.push(...this.deliverTo.doModelValidation());
        }
        return results;
    }
}
//# sourceMappingURL=SupplyRequest.js.map