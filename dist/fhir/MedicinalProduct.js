// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Coding words or phrases of the name.
 */
export class MedicinalProductNameNamePart extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductNameNamePart - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.part = null;
        if (source["part"]) {
            this.part = source.part;
        }
        if (this.part === undefined) {
            this.part = null;
        }
        if (source["_part"]) {
            this._part = new fhir.FhirElement(source._part);
        }
        this.type = null;
        if (source["type"]) {
            this.type = new fhir.Coding(source.type);
        }
        if (this.type === undefined) {
            this.type = null;
        }
    }
    /**
     * Check if the current MedicinalProductNameNamePart contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["part"] === undefined) {
            missingElements.push("part");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicinalProductNameNamePart from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new MedicinalProductNameNamePart(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProductNameNamePart is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Country where the name applies.
 */
export class MedicinalProductNameCountryLanguage extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductNameCountryLanguage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.country = null;
        if (source["country"]) {
            this.country = new fhir.CodeableConcept(source.country);
        }
        if (this.country === undefined) {
            this.country = null;
        }
        if (source["jurisdiction"]) {
            this.jurisdiction = new fhir.CodeableConcept(source.jurisdiction);
        }
        this.language = null;
        if (source["language"]) {
            this.language = new fhir.CodeableConcept(source.language);
        }
        if (this.language === undefined) {
            this.language = null;
        }
    }
    /**
     * Check if the current MedicinalProductNameCountryLanguage contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["country"] === undefined) {
            missingElements.push("country");
        }
        if (this["language"] === undefined) {
            missingElements.push("language");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicinalProductNameCountryLanguage from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new MedicinalProductNameCountryLanguage(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProductNameCountryLanguage is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The product's name, including full name and possibly coded parts.
 */
export class MedicinalProductName extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductName - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["countryLanguage"]) {
            this.countryLanguage = source.countryLanguage.map((x) => new fhir.MedicinalProductNameCountryLanguage(x));
        }
        if (source["namePart"]) {
            this.namePart = source.namePart.map((x) => new fhir.MedicinalProductNameNamePart(x));
        }
        this.productName = null;
        if (source["productName"]) {
            this.productName = source.productName;
        }
        if (this.productName === undefined) {
            this.productName = null;
        }
        if (source["_productName"]) {
            this._productName = new fhir.FhirElement(source._productName);
        }
    }
    /**
     * Check if the current MedicinalProductName contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["productName"] === undefined) {
            missingElements.push("productName");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicinalProductName from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new MedicinalProductName(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProductName is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * An operation applied to the product, for manufacturing or adminsitrative purpose.
 */
export class MedicinalProductManufacturingBusinessOperation extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductManufacturingBusinessOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["authorisationReferenceNumber"]) {
            this.authorisationReferenceNumber = new fhir.Identifier(source.authorisationReferenceNumber);
        }
        if (source["confidentialityIndicator"]) {
            this.confidentialityIndicator = new fhir.CodeableConcept(source.confidentialityIndicator);
        }
        if (source["effectiveDate"]) {
            this.effectiveDate = source.effectiveDate;
        }
        if (source["_effectiveDate"]) {
            this._effectiveDate = new fhir.FhirElement(source._effectiveDate);
        }
        if (source["manufacturer"]) {
            this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x));
        }
        if (source["operationType"]) {
            this.operationType = new fhir.CodeableConcept(source.operationType);
        }
        if (source["regulator"]) {
            this.regulator = new fhir.Reference(source.regulator);
        }
    }
    /**
     * Check if the current MedicinalProductManufacturingBusinessOperation contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicinalProductManufacturingBusinessOperation from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new MedicinalProductManufacturingBusinessOperation(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProductManufacturingBusinessOperation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Indicates if the medicinal product has an orphan designation for the treatment of a rare disease.
 */
export class MedicinalProductSpecialDesignation extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductSpecialDesignation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["date"]) {
            this.date = source.date;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["indicationCodeableConcept"]) {
            this.indicationCodeableConcept = new fhir.CodeableConcept(source.indicationCodeableConcept);
        }
        if (source["indicationReference"]) {
            this.indicationReference = new fhir.Reference(source.indicationReference);
        }
        if (source["intendedUse"]) {
            this.intendedUse = new fhir.CodeableConcept(source.intendedUse);
        }
        if (source["species"]) {
            this.species = new fhir.CodeableConcept(source.species);
        }
        if (source["status"]) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current MedicinalProductSpecialDesignation contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicinalProductSpecialDesignation from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new MedicinalProductSpecialDesignation(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProductSpecialDesignation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).
 */
export class MedicinalProduct extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProduct - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'MedicinalProduct';
        if (source["additionalMonitoringIndicator"]) {
            this.additionalMonitoringIndicator = new fhir.CodeableConcept(source.additionalMonitoringIndicator);
        }
        if (source["attachedDocument"]) {
            this.attachedDocument = source.attachedDocument.map((x) => new fhir.Reference(x));
        }
        if (source["clinicalTrial"]) {
            this.clinicalTrial = source.clinicalTrial.map((x) => new fhir.Reference(x));
        }
        if (source["combinedPharmaceuticalDoseForm"]) {
            this.combinedPharmaceuticalDoseForm = new fhir.CodeableConcept(source.combinedPharmaceuticalDoseForm);
        }
        if (source["contact"]) {
            this.contact = source.contact.map((x) => new fhir.Reference(x));
        }
        if (source["crossReference"]) {
            this.crossReference = source.crossReference.map((x) => new fhir.Identifier(x));
        }
        if (source["domain"]) {
            this.domain = new fhir.Coding(source.domain);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["legalStatusOfSupply"]) {
            this.legalStatusOfSupply = new fhir.CodeableConcept(source.legalStatusOfSupply);
        }
        if (source["manufacturingBusinessOperation"]) {
            this.manufacturingBusinessOperation = source.manufacturingBusinessOperation.map((x) => new fhir.MedicinalProductManufacturingBusinessOperation(x));
        }
        if (source["marketingStatus"]) {
            this.marketingStatus = source.marketingStatus.map((x) => new fhir.MarketingStatus(x));
        }
        if (source["masterFile"]) {
            this.masterFile = source.masterFile.map((x) => new fhir.Reference(x));
        }
        this.name = null;
        if (source["name"]) {
            this.name = source.name.map((x) => new fhir.MedicinalProductName(x));
        }
        if (this.name === undefined) {
            this.name = null;
        }
        if (source["packagedMedicinalProduct"]) {
            this.packagedMedicinalProduct = source.packagedMedicinalProduct.map((x) => new fhir.Reference(x));
        }
        if (source["paediatricUseIndicator"]) {
            this.paediatricUseIndicator = new fhir.CodeableConcept(source.paediatricUseIndicator);
        }
        if (source["pharmaceuticalProduct"]) {
            this.pharmaceuticalProduct = source.pharmaceuticalProduct.map((x) => new fhir.Reference(x));
        }
        if (source["productClassification"]) {
            this.productClassification = source.productClassification.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["specialDesignation"]) {
            this.specialDesignation = source.specialDesignation.map((x) => new fhir.MedicinalProductSpecialDesignation(x));
        }
        if (source["specialMeasures"]) {
            this.specialMeasures = source.specialMeasures.map((x) => (x));
        }
        if (source["_specialMeasures"]) {
            this._specialMeasures = source._specialMeasures.map((x) => new fhir.FhirElement(x));
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current MedicinalProduct contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if ((!this["name"]) || (this["name"].length === 0)) {
            missingElements.push("name");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicinalProduct from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new MedicinalProduct(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProduct is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
//# sourceMappingURL=MedicinalProduct.js.map