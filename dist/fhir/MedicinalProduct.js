// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProduct
import * as fhir from '../fhir.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Coding words or phrases of the name.
 */
export class MedicinalProductNameNamePart extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductNameNamePart - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicinalProductNameNamePart';
        if (source['part']) {
            this.part = new fhir.FhirString({ value: source.part });
        }
        else {
            this.part = null;
        }
        if (source['type']) {
            this.type = new fhir.Coding(source.type);
        }
        else {
            this.type = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['part']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property part:fhir.FhirString fhir: MedicinalProduct.name.namePart.part:string", }));
        }
        if (this["part"]) {
            outcome.issue.push(...this.part.doModelValidation().issue);
        }
        if (!this['type']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property type:fhir.Coding fhir: MedicinalProduct.name.namePart.type:Coding", }));
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Country where the name applies.
 */
export class MedicinalProductNameCountryLanguage extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductNameCountryLanguage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicinalProductNameCountryLanguage';
        if (source['country']) {
            this.country = new fhir.CodeableConcept(source.country);
        }
        else {
            this.country = null;
        }
        if (source['jurisdiction']) {
            this.jurisdiction = new fhir.CodeableConcept(source.jurisdiction);
        }
        if (source['language']) {
            this.language = new fhir.CodeableConcept(source.language);
        }
        else {
            this.language = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['country']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property country:fhir.CodeableConcept fhir: MedicinalProduct.name.countryLanguage.country:CodeableConcept", }));
        }
        if (this["country"]) {
            outcome.issue.push(...this.country.doModelValidation().issue);
        }
        if (this["jurisdiction"]) {
            outcome.issue.push(...this.jurisdiction.doModelValidation().issue);
        }
        if (!this['language']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property language:fhir.CodeableConcept fhir: MedicinalProduct.name.countryLanguage.language:CodeableConcept", }));
        }
        if (this["language"]) {
            outcome.issue.push(...this.language.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * The product's name, including full name and possibly coded parts.
 */
export class MedicinalProductName extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductName - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicinalProductName';
        /**
         * Coding words or phrases of the name.
         */
        this.namePart = [];
        /**
         * Country where the name applies.
         */
        this.countryLanguage = [];
        if (source['productName']) {
            this.productName = new fhir.FhirString({ value: source.productName });
        }
        else {
            this.productName = null;
        }
        if (source['namePart']) {
            this.namePart = source.namePart.map((x) => new fhir.MedicinalProductNameNamePart(x));
        }
        if (source['countryLanguage']) {
            this.countryLanguage = source.countryLanguage.map((x) => new fhir.MedicinalProductNameCountryLanguage(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['productName']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property productName:fhir.FhirString fhir: MedicinalProduct.name.productName:string", }));
        }
        if (this["productName"]) {
            outcome.issue.push(...this.productName.doModelValidation().issue);
        }
        if (this["namePart"]) {
            this.namePart.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["countryLanguage"]) {
            this.countryLanguage.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * An operation applied to the product, for manufacturing or adminsitrative purpose.
 */
export class MedicinalProductManufacturingBusinessOperation extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductManufacturingBusinessOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicinalProductManufacturingBusinessOperation';
        /**
         * The manufacturer or establishment associated with the process.
         */
        this.manufacturer = [];
        if (source['operationType']) {
            this.operationType = new fhir.CodeableConcept(source.operationType);
        }
        if (source['authorisationReferenceNumber']) {
            this.authorisationReferenceNumber = new fhir.Identifier(source.authorisationReferenceNumber);
        }
        if (source['effectiveDate']) {
            this.effectiveDate = new fhir.FhirDateTime({ value: source.effectiveDate });
        }
        if (source['confidentialityIndicator']) {
            this.confidentialityIndicator = new fhir.CodeableConcept(source.confidentialityIndicator);
        }
        if (source['manufacturer']) {
            this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x));
        }
        if (source['regulator']) {
            this.regulator = new fhir.Reference(source.regulator);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["operationType"]) {
            outcome.issue.push(...this.operationType.doModelValidation().issue);
        }
        if (this["authorisationReferenceNumber"]) {
            outcome.issue.push(...this.authorisationReferenceNumber.doModelValidation().issue);
        }
        if (this["effectiveDate"]) {
            outcome.issue.push(...this.effectiveDate.doModelValidation().issue);
        }
        if (this["confidentialityIndicator"]) {
            outcome.issue.push(...this.confidentialityIndicator.doModelValidation().issue);
        }
        if (this["manufacturer"]) {
            this.manufacturer.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["regulator"]) {
            outcome.issue.push(...this.regulator.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Indicates if the medicinal product has an orphan designation for the treatment of a rare disease.
 */
export class MedicinalProductSpecialDesignation extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductSpecialDesignation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicinalProductSpecialDesignation';
        /**
         * Identifier for the designation, or procedure number.
         */
        this.identifier = [];
        this.__indicationIsChoice = true;
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['intendedUse']) {
            this.intendedUse = new fhir.CodeableConcept(source.intendedUse);
        }
        if (source['indication']) {
            this.indication = source.indication;
        }
        else if (source['indicationCodeableConcept']) {
            this.indication = new fhir.CodeableConcept(source.indicationCodeableConcept);
        }
        else if (source['indicationReference']) {
            this.indication = new fhir.Reference(source.indicationReference);
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['species']) {
            this.species = new fhir.CodeableConcept(source.species);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["intendedUse"]) {
            outcome.issue.push(...this.intendedUse.doModelValidation().issue);
        }
        if (this["status"]) {
            outcome.issue.push(...this.status.doModelValidation().issue);
        }
        if (this["date"]) {
            outcome.issue.push(...this.date.doModelValidation().issue);
        }
        if (this["species"]) {
            outcome.issue.push(...this.species.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).
 */
export class MedicinalProduct extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProduct - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicinalProduct';
        /**
         * Business identifier for this product. Could be an MPID.
         */
        this.identifier = [];
        /**
         * Whether the Medicinal Product is subject to special measures for regulatory reasons.
         */
        this.specialMeasures = [];
        /**
         * Allows the product to be classified by various systems.
         */
        this.productClassification = [];
        /**
         * Marketing status of the medicinal product, in contrast to marketing authorizaton.
         */
        this.marketingStatus = [];
        /**
         * Pharmaceutical aspects of product.
         */
        this.pharmaceuticalProduct = [];
        /**
         * Package representation for the product.
         */
        this.packagedMedicinalProduct = [];
        /**
         * Supporting documentation, typically for regulatory submission.
         */
        this.attachedDocument = [];
        /**
         * A master file for to the medicinal product (e.g. Pharmacovigilance System Master File).
         */
        this.masterFile = [];
        /**
         * A product specific contact, person (in a role), or an organization.
         */
        this.contact = [];
        /**
         * Clinical trials or studies that this product is involved in.
         */
        this.clinicalTrial = [];
        /**
         * The product's name, including full name and possibly coded parts.
         */
        this.name = [];
        /**
         * Reference to another product, e.g. for linking authorised to investigational product.
         */
        this.crossReference = [];
        /**
         * An operation applied to the product, for manufacturing or adminsitrative purpose.
         */
        this.manufacturingBusinessOperation = [];
        /**
         * Indicates if the medicinal product has an orphan designation for the treatment of a rare disease.
         */
        this.specialDesignation = [];
        this.resourceType = 'MedicinalProduct';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['domain']) {
            this.domain = new fhir.Coding(source.domain);
        }
        if (source['combinedPharmaceuticalDoseForm']) {
            this.combinedPharmaceuticalDoseForm = new fhir.CodeableConcept(source.combinedPharmaceuticalDoseForm);
        }
        if (source['legalStatusOfSupply']) {
            this.legalStatusOfSupply = new fhir.CodeableConcept(source.legalStatusOfSupply);
        }
        if (source['additionalMonitoringIndicator']) {
            this.additionalMonitoringIndicator = new fhir.CodeableConcept(source.additionalMonitoringIndicator);
        }
        if (source['specialMeasures']) {
            this.specialMeasures = source.specialMeasures.map((x) => new fhir.FhirString({ value: x }));
        }
        if (source['paediatricUseIndicator']) {
            this.paediatricUseIndicator = new fhir.CodeableConcept(source.paediatricUseIndicator);
        }
        if (source['productClassification']) {
            this.productClassification = source.productClassification.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['marketingStatus']) {
            this.marketingStatus = source.marketingStatus.map((x) => new fhir.MarketingStatus(x));
        }
        if (source['pharmaceuticalProduct']) {
            this.pharmaceuticalProduct = source.pharmaceuticalProduct.map((x) => new fhir.Reference(x));
        }
        if (source['packagedMedicinalProduct']) {
            this.packagedMedicinalProduct = source.packagedMedicinalProduct.map((x) => new fhir.Reference(x));
        }
        if (source['attachedDocument']) {
            this.attachedDocument = source.attachedDocument.map((x) => new fhir.Reference(x));
        }
        if (source['masterFile']) {
            this.masterFile = source.masterFile.map((x) => new fhir.Reference(x));
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.Reference(x));
        }
        if (source['clinicalTrial']) {
            this.clinicalTrial = source.clinicalTrial.map((x) => new fhir.Reference(x));
        }
        if (source['name']) {
            this.name = source.name.map((x) => new fhir.MedicinalProductName(x));
        }
        else {
            this.name = null;
        }
        if (source['crossReference']) {
            this.crossReference = source.crossReference.map((x) => new fhir.Identifier(x));
        }
        if (source['manufacturingBusinessOperation']) {
            this.manufacturingBusinessOperation = source.manufacturingBusinessOperation.map((x) => new fhir.MedicinalProductManufacturingBusinessOperation(x));
        }
        if (source['specialDesignation']) {
            this.specialDesignation = source.specialDesignation.map((x) => new fhir.MedicinalProductSpecialDesignation(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'MedicinalProduct' fhir: MedicinalProduct.resourceType:'MedicinalProduct'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["domain"]) {
            outcome.issue.push(...this.domain.doModelValidation().issue);
        }
        if (this["combinedPharmaceuticalDoseForm"]) {
            outcome.issue.push(...this.combinedPharmaceuticalDoseForm.doModelValidation().issue);
        }
        if (this["legalStatusOfSupply"]) {
            outcome.issue.push(...this.legalStatusOfSupply.doModelValidation().issue);
        }
        if (this["additionalMonitoringIndicator"]) {
            outcome.issue.push(...this.additionalMonitoringIndicator.doModelValidation().issue);
        }
        if (this["specialMeasures"]) {
            this.specialMeasures.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["paediatricUseIndicator"]) {
            outcome.issue.push(...this.paediatricUseIndicator.doModelValidation().issue);
        }
        if (this["productClassification"]) {
            this.productClassification.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["marketingStatus"]) {
            this.marketingStatus.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["pharmaceuticalProduct"]) {
            this.pharmaceuticalProduct.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["packagedMedicinalProduct"]) {
            this.packagedMedicinalProduct.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["attachedDocument"]) {
            this.attachedDocument.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["masterFile"]) {
            this.masterFile.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["clinicalTrial"]) {
            this.clinicalTrial.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['name']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property name:fhir.MedicinalProductName[] fhir: MedicinalProduct.name:name", }));
        }
        else if (!Array.isArray(this.name)) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue, diagnostics: "Found scalar in array property name:fhir.MedicinalProductName[] fhir: MedicinalProduct.name:name", }));
        }
        else if (this.name.length === 0) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property name:fhir.MedicinalProductName[] fhir: MedicinalProduct.name:name", }));
        }
        if (this["name"]) {
            this.name.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["crossReference"]) {
            this.crossReference.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["manufacturingBusinessOperation"]) {
            this.manufacturingBusinessOperation.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["specialDesignation"]) {
            this.specialDesignation.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=MedicinalProduct.js.map