// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Todo.
 */
export class SubstancePolymerMonomerSetStartingMaterial extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerMonomerSetStartingMaterial - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["amount"]) {
            this.amount = new fhir.SubstanceAmount(source.amount);
        }
        if (source["isDefining"]) {
            this.isDefining = source.isDefining;
        }
        if (source["_isDefining"]) {
            this._isDefining = new fhir.FhirElement(source._isDefining);
        }
        if (source["material"]) {
            this.material = new fhir.CodeableConcept(source.material);
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current SubstancePolymerMonomerSetStartingMaterial contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SubstancePolymerMonomerSetStartingMaterial from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new SubstancePolymerMonomerSetStartingMaterial(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstancePolymerMonomerSetStartingMaterial is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Todo.
 */
export class SubstancePolymerMonomerSet extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerMonomerSet - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["ratioType"]) {
            this.ratioType = new fhir.CodeableConcept(source.ratioType);
        }
        if (source["startingMaterial"]) {
            this.startingMaterial = source.startingMaterial.map((x) => new fhir.SubstancePolymerMonomerSetStartingMaterial(x));
        }
    }
    /**
     * Check if the current SubstancePolymerMonomerSet contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SubstancePolymerMonomerSet from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new SubstancePolymerMonomerSet(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstancePolymerMonomerSet is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Todo.
 */
export class SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["amount"]) {
            this.amount = new fhir.SubstanceAmount(source.amount);
        }
        if (source["degree"]) {
            this.degree = new fhir.CodeableConcept(source.degree);
        }
    }
    /**
     * Check if the current SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Todo.
 */
export class SubstancePolymerRepeatRepeatUnitStructuralRepresentation extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerRepeatRepeatUnitStructuralRepresentation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["attachment"]) {
            this.attachment = new fhir.Attachment(source.attachment);
        }
        if (source["representation"]) {
            this.representation = source.representation;
        }
        if (source["_representation"]) {
            this._representation = new fhir.FhirElement(source._representation);
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current SubstancePolymerRepeatRepeatUnitStructuralRepresentation contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SubstancePolymerRepeatRepeatUnitStructuralRepresentation from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new SubstancePolymerRepeatRepeatUnitStructuralRepresentation(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstancePolymerRepeatRepeatUnitStructuralRepresentation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Todo.
 */
export class SubstancePolymerRepeatRepeatUnit extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerRepeatRepeatUnit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["amount"]) {
            this.amount = new fhir.SubstanceAmount(source.amount);
        }
        if (source["degreeOfPolymerisation"]) {
            this.degreeOfPolymerisation = source.degreeOfPolymerisation.map((x) => new fhir.SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(x));
        }
        if (source["orientationOfPolymerisation"]) {
            this.orientationOfPolymerisation = new fhir.CodeableConcept(source.orientationOfPolymerisation);
        }
        if (source["repeatUnit"]) {
            this.repeatUnit = source.repeatUnit;
        }
        if (source["_repeatUnit"]) {
            this._repeatUnit = new fhir.FhirElement(source._repeatUnit);
        }
        if (source["structuralRepresentation"]) {
            this.structuralRepresentation = source.structuralRepresentation.map((x) => new fhir.SubstancePolymerRepeatRepeatUnitStructuralRepresentation(x));
        }
    }
    /**
     * Check if the current SubstancePolymerRepeatRepeatUnit contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SubstancePolymerRepeatRepeatUnit from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new SubstancePolymerRepeatRepeatUnit(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstancePolymerRepeatRepeatUnit is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Todo.
 */
export class SubstancePolymerRepeat extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerRepeat - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["averageMolecularFormula"]) {
            this.averageMolecularFormula = source.averageMolecularFormula;
        }
        if (source["_averageMolecularFormula"]) {
            this._averageMolecularFormula = new fhir.FhirElement(source._averageMolecularFormula);
        }
        if (source["numberOfUnits"]) {
            this.numberOfUnits = source.numberOfUnits;
        }
        if (source["_numberOfUnits"]) {
            this._numberOfUnits = new fhir.FhirElement(source._numberOfUnits);
        }
        if (source["repeatUnit"]) {
            this.repeatUnit = source.repeatUnit.map((x) => new fhir.SubstancePolymerRepeatRepeatUnit(x));
        }
        if (source["repeatUnitAmountType"]) {
            this.repeatUnitAmountType = new fhir.CodeableConcept(source.repeatUnitAmountType);
        }
    }
    /**
     * Check if the current SubstancePolymerRepeat contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SubstancePolymerRepeat from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new SubstancePolymerRepeat(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstancePolymerRepeat is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Todo.
 */
export class SubstancePolymer extends fhir.DomainResource {
    /**
     * Default constructor for SubstancePolymer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'SubstancePolymer';
        if (source["class"]) {
            this.class = new fhir.CodeableConcept(source.class);
        }
        if (source["copolymerConnectivity"]) {
            this.copolymerConnectivity = source.copolymerConnectivity.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["geometry"]) {
            this.geometry = new fhir.CodeableConcept(source.geometry);
        }
        if (source["modification"]) {
            this.modification = source.modification.map((x) => (x));
        }
        if (source["_modification"]) {
            this._modification = source._modification.map((x) => new fhir.FhirElement(x));
        }
        if (source["monomerSet"]) {
            this.monomerSet = source.monomerSet.map((x) => new fhir.SubstancePolymerMonomerSet(x));
        }
        if (source["repeat"]) {
            this.repeat = source.repeat.map((x) => new fhir.SubstancePolymerRepeat(x));
        }
    }
    /**
     * Check if the current SubstancePolymer contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SubstancePolymer from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new SubstancePolymer(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstancePolymer is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
//# sourceMappingURL=SubstancePolymer.js.map