// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SubstancePolymer
import * as fhir from '../fhir.js';
/**
 * Todo.
 */
export class SubstancePolymerMonomerSetStartingMaterial extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerMonomerSetStartingMaterial - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['material']) {
            this.material = new fhir.CodeableConcept(source.material);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['isDefining']) {
            this.isDefining = source.isDefining;
        }
        if (source['_isDefining']) {
            this._isDefining = new fhir.FhirElement(source._isDefining);
        }
        if (source['amount']) {
            this.amount = new fhir.SubstanceAmount(source.amount);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["material"]) {
            results.push(...this.material.doModelValidation());
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["_isDefining"]) {
            results.push(...this._isDefining.doModelValidation());
        }
        if (this["amount"]) {
            results.push(...this.amount.doModelValidation());
        }
        return results;
    }
}
/**
 * Todo.
 */
export class SubstancePolymerMonomerSet extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerMonomerSet - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['ratioType']) {
            this.ratioType = new fhir.CodeableConcept(source.ratioType);
        }
        if (source['startingMaterial']) {
            this.startingMaterial = source.startingMaterial.map((x) => new fhir.SubstancePolymerMonomerSetStartingMaterial(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["ratioType"]) {
            results.push(...this.ratioType.doModelValidation());
        }
        if (this["startingMaterial"]) {
            this.startingMaterial.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Todo.
 */
export class SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['degree']) {
            this.degree = new fhir.CodeableConcept(source.degree);
        }
        if (source['amount']) {
            this.amount = new fhir.SubstanceAmount(source.amount);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["degree"]) {
            results.push(...this.degree.doModelValidation());
        }
        if (this["amount"]) {
            results.push(...this.amount.doModelValidation());
        }
        return results;
    }
}
/**
 * Todo.
 */
export class SubstancePolymerRepeatRepeatUnitStructuralRepresentation extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerRepeatRepeatUnitStructuralRepresentation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['representation']) {
            this.representation = source.representation;
        }
        if (source['_representation']) {
            this._representation = new fhir.FhirElement(source._representation);
        }
        if (source['attachment']) {
            this.attachment = new fhir.Attachment(source.attachment);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["_representation"]) {
            results.push(...this._representation.doModelValidation());
        }
        if (this["attachment"]) {
            results.push(...this.attachment.doModelValidation());
        }
        return results;
    }
}
/**
 * Todo.
 */
export class SubstancePolymerRepeatRepeatUnit extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerRepeatRepeatUnit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['orientationOfPolymerisation']) {
            this.orientationOfPolymerisation = new fhir.CodeableConcept(source.orientationOfPolymerisation);
        }
        if (source['repeatUnit']) {
            this.repeatUnit = source.repeatUnit;
        }
        if (source['_repeatUnit']) {
            this._repeatUnit = new fhir.FhirElement(source._repeatUnit);
        }
        if (source['amount']) {
            this.amount = new fhir.SubstanceAmount(source.amount);
        }
        if (source['degreeOfPolymerisation']) {
            this.degreeOfPolymerisation = source.degreeOfPolymerisation.map((x) => new fhir.SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(x));
        }
        if (source['structuralRepresentation']) {
            this.structuralRepresentation = source.structuralRepresentation.map((x) => new fhir.SubstancePolymerRepeatRepeatUnitStructuralRepresentation(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["orientationOfPolymerisation"]) {
            results.push(...this.orientationOfPolymerisation.doModelValidation());
        }
        if (this["_repeatUnit"]) {
            results.push(...this._repeatUnit.doModelValidation());
        }
        if (this["amount"]) {
            results.push(...this.amount.doModelValidation());
        }
        if (this["degreeOfPolymerisation"]) {
            this.degreeOfPolymerisation.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["structuralRepresentation"]) {
            this.structuralRepresentation.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Todo.
 */
export class SubstancePolymerRepeat extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerRepeat - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['numberOfUnits']) {
            this.numberOfUnits = source.numberOfUnits;
        }
        if (source['_numberOfUnits']) {
            this._numberOfUnits = new fhir.FhirElement(source._numberOfUnits);
        }
        if (source['averageMolecularFormula']) {
            this.averageMolecularFormula = source.averageMolecularFormula;
        }
        if (source['_averageMolecularFormula']) {
            this._averageMolecularFormula = new fhir.FhirElement(source._averageMolecularFormula);
        }
        if (source['repeatUnitAmountType']) {
            this.repeatUnitAmountType = new fhir.CodeableConcept(source.repeatUnitAmountType);
        }
        if (source['repeatUnit']) {
            this.repeatUnit = source.repeatUnit.map((x) => new fhir.SubstancePolymerRepeatRepeatUnit(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_numberOfUnits"]) {
            results.push(...this._numberOfUnits.doModelValidation());
        }
        if (this["_averageMolecularFormula"]) {
            results.push(...this._averageMolecularFormula.doModelValidation());
        }
        if (this["repeatUnitAmountType"]) {
            results.push(...this.repeatUnitAmountType.doModelValidation());
        }
        if (this["repeatUnit"]) {
            this.repeatUnit.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Todo.
 */
export class SubstancePolymer extends fhir.DomainResource {
    /**
     * Default constructor for SubstancePolymer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'SubstancePolymer';
        if (source['class']) {
            this.class = new fhir.CodeableConcept(source.class);
        }
        if (source['geometry']) {
            this.geometry = new fhir.CodeableConcept(source.geometry);
        }
        if (source['copolymerConnectivity']) {
            this.copolymerConnectivity = source.copolymerConnectivity.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['modification']) {
            this.modification = source.modification.map((x) => (x));
        }
        if (source['_modification']) {
            this._modification = source._modification.map((x) => new fhir.FhirElement(x));
        }
        if (source['monomerSet']) {
            this.monomerSet = source.monomerSet.map((x) => new fhir.SubstancePolymerMonomerSet(x));
        }
        if (source['repeat']) {
            this.repeat = source.repeat.map((x) => new fhir.SubstancePolymerRepeat(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: SubstancePolymer.resourceType']);
        }
        if (this["class"]) {
            results.push(...this.class.doModelValidation());
        }
        if (this["geometry"]) {
            results.push(...this.geometry.doModelValidation());
        }
        if (this["copolymerConnectivity"]) {
            this.copolymerConnectivity.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_modification"]) {
            this._modification.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["monomerSet"]) {
            this.monomerSet.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["repeat"]) {
            this.repeat.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=SubstancePolymer.js.map