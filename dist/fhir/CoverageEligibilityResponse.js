// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: CoverageEligibilityResponse
import * as fhir from '../fhir.js';
import { BenefitTypeValueSet, } from '../fhirValueSets/BenefitTypeValueSet.js';
import { ExBenefitcategoryValueSet, } from '../fhirValueSets/ExBenefitcategoryValueSet.js';
import { ServiceUsclsValueSet, } from '../fhirValueSets/ServiceUsclsValueSet.js';
import { ClaimModifiersValueSet, } from '../fhirValueSets/ClaimModifiersValueSet.js';
import { BenefitNetworkValueSet, } from '../fhirValueSets/BenefitNetworkValueSet.js';
import { BenefitUnitValueSet, } from '../fhirValueSets/BenefitUnitValueSet.js';
import { BenefitTermValueSet, } from '../fhirValueSets/BenefitTermValueSet.js';
import { CoverageeligibilityresponseExAuthSupportValueSet, } from '../fhirValueSets/CoverageeligibilityresponseExAuthSupportValueSet.js';
import { AdjudicationErrorValueSet, } from '../fhirValueSets/AdjudicationErrorValueSet.js';
import { FmStatusValueSet, } from '../fhirValueSets/FmStatusValueSet.js';
import { EligibilityresponsePurposeValueSet, } from '../fhirValueSets/EligibilityresponsePurposeValueSet.js';
import { RemittanceOutcomeValueSet, } from '../fhirValueSets/RemittanceOutcomeValueSet.js';
import { FormsValueSet, } from '../fhirValueSets/FormsValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Benefits used to date.
 */
export class CoverageEligibilityResponseInsuranceItemBenefit extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityResponseInsuranceItemBenefit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'CoverageEligibilityResponseInsuranceItemBenefit';
        this.__allowedIsChoice = true;
        this.__usedIsChoice = true;
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['allowed']) {
            this.allowed = source.allowed;
        }
        else if (source['allowedUnsignedInt']) {
            this.allowed = new fhir.FhirUnsignedInt({ value: source.allowedUnsignedInt });
        }
        else if (source['allowedString']) {
            this.allowed = new fhir.FhirString({ value: source.allowedString });
        }
        else if (source['allowedMoney']) {
            this.allowed = new fhir.Money(source.allowedMoney);
        }
        if (source['used']) {
            this.used = source.used;
        }
        else if (source['usedUnsignedInt']) {
            this.used = new fhir.FhirUnsignedInt({ value: source.usedUnsignedInt });
        }
        else if (source['usedString']) {
            this.used = new fhir.FhirString({ value: source.usedString });
        }
        else if (source['usedMoney']) {
            this.used = new fhir.Money(source.usedMoney);
        }
    }
    /**
     * Example-bound Value Set for type
     */
    static typeExampleValueSet() {
        return BenefitTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['type']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property type:fhir.CodeableConcept fhir: CoverageEligibilityResponse.insurance.item.benefit.type:CodeableConcept", }));
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Benefits and optionally current balances, and authorization details by category or service.
 */
export class CoverageEligibilityResponseInsuranceItem extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityResponseInsuranceItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'CoverageEligibilityResponseInsuranceItem';
        /**
         * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
         */
        this.modifier = [];
        /**
         * Benefits used to date.
         */
        this.benefit = [];
        /**
         * Codes or comments regarding information or actions associated with the preauthorization.
         */
        this.authorizationSupporting = [];
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider);
        }
        if (source['excluded']) {
            this.excluded = new fhir.FhirBoolean({ value: source.excluded });
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['network']) {
            this.network = new fhir.CodeableConcept(source.network);
        }
        if (source['unit']) {
            this.unit = new fhir.CodeableConcept(source.unit);
        }
        if (source['term']) {
            this.term = new fhir.CodeableConcept(source.term);
        }
        if (source['benefit']) {
            this.benefit = source.benefit.map((x) => new fhir.CoverageEligibilityResponseInsuranceItemBenefit(x));
        }
        if (source['authorizationRequired']) {
            this.authorizationRequired = new fhir.FhirBoolean({ value: source.authorizationRequired });
        }
        if (source['authorizationSupporting']) {
            this.authorizationSupporting = source.authorizationSupporting.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['authorizationUrl']) {
            this.authorizationUrl = new fhir.FhirUri({ value: source.authorizationUrl });
        }
    }
    /**
     * Example-bound Value Set for category
     */
    static categoryExampleValueSet() {
        return ExBenefitcategoryValueSet;
    }
    /**
     * Example-bound Value Set for productOrService
     */
    static productOrServiceExampleValueSet() {
        return ServiceUsclsValueSet;
    }
    /**
     * Example-bound Value Set for modifier
     */
    static modifierExampleValueSet() {
        return ClaimModifiersValueSet;
    }
    /**
     * Example-bound Value Set for network
     */
    static networkExampleValueSet() {
        return BenefitNetworkValueSet;
    }
    /**
     * Example-bound Value Set for unit
     */
    static unitExampleValueSet() {
        return BenefitUnitValueSet;
    }
    /**
     * Example-bound Value Set for term
     */
    static termExampleValueSet() {
        return BenefitTermValueSet;
    }
    /**
     * Example-bound Value Set for authorizationSupporting
     */
    static authorizationSupportingExampleValueSet() {
        return CoverageeligibilityresponseExAuthSupportValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["category"]) {
            outcome.issue.push(...this.category.doModelValidation().issue);
        }
        if (this["productOrService"]) {
            outcome.issue.push(...this.productOrService.doModelValidation().issue);
        }
        if (this["modifier"]) {
            this.modifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["provider"]) {
            outcome.issue.push(...this.provider.doModelValidation().issue);
        }
        if (this["excluded"]) {
            outcome.issue.push(...this.excluded.doModelValidation().issue);
        }
        if (this["name"]) {
            outcome.issue.push(...this.name.doModelValidation().issue);
        }
        if (this["description"]) {
            outcome.issue.push(...this.description.doModelValidation().issue);
        }
        if (this["network"]) {
            outcome.issue.push(...this.network.doModelValidation().issue);
        }
        if (this["unit"]) {
            outcome.issue.push(...this.unit.doModelValidation().issue);
        }
        if (this["term"]) {
            outcome.issue.push(...this.term.doModelValidation().issue);
        }
        if (this["benefit"]) {
            this.benefit.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["authorizationRequired"]) {
            outcome.issue.push(...this.authorizationRequired.doModelValidation().issue);
        }
        if (this["authorizationSupporting"]) {
            this.authorizationSupporting.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["authorizationUrl"]) {
            outcome.issue.push(...this.authorizationUrl.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export class CoverageEligibilityResponseInsurance extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityResponseInsurance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'CoverageEligibilityResponseInsurance';
        /**
         * Benefits and optionally current balances, and authorization details by category or service.
         */
        this.item = [];
        if (source['coverage']) {
            this.coverage = new fhir.Reference(source.coverage);
        }
        else {
            this.coverage = null;
        }
        if (source['inforce']) {
            this.inforce = new fhir.FhirBoolean({ value: source.inforce });
        }
        if (source['benefitPeriod']) {
            this.benefitPeriod = new fhir.Period(source.benefitPeriod);
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.CoverageEligibilityResponseInsuranceItem(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['coverage']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property coverage:fhir.Reference fhir: CoverageEligibilityResponse.insurance.coverage:Reference", }));
        }
        if (this["coverage"]) {
            outcome.issue.push(...this.coverage.doModelValidation().issue);
        }
        if (this["inforce"]) {
            outcome.issue.push(...this.inforce.doModelValidation().issue);
        }
        if (this["benefitPeriod"]) {
            outcome.issue.push(...this.benefitPeriod.doModelValidation().issue);
        }
        if (this["item"]) {
            this.item.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Errors encountered during the processing of the request.
 */
export class CoverageEligibilityResponseError extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityResponseError - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'CoverageEligibilityResponseError';
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
    }
    /**
     * Example-bound Value Set for code
     */
    static codeExampleValueSet() {
        return AdjudicationErrorValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['code']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property code:fhir.CodeableConcept fhir: CoverageEligibilityResponse.error.code:CodeableConcept", }));
        }
        if (this["code"]) {
            outcome.issue.push(...this.code.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.
 */
export class CoverageEligibilityResponse extends fhir.DomainResource {
    /**
     * Default constructor for CoverageEligibilityResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'CoverageEligibilityResponse';
        /**
         * A unique identifier assigned to this coverage eligiblity request.
         */
        this.identifier = [];
        /**
         * Code to specify whether requesting: prior authorization requirements for some service categories or billing codes; benefits for coverages specified or discovered; discovery and return of coverages for the patient; and/or validation that the specified coverage is in-force at the date/period specified or 'now' if not specified.
         */
        this.purpose = [];
        this.__servicedIsChoice = true;
        /**
         * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
         */
        this.insurance = [];
        /**
         * Errors encountered during the processing of the request.
         */
        this.error = [];
        this.resourceType = 'CoverageEligibilityResponse';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['purpose']) {
            this.purpose = source.purpose.map((x) => x);
        }
        else {
            this.purpose = null;
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['serviced']) {
            this.serviced = source.serviced;
        }
        else if (source['servicedDate']) {
            this.serviced = new fhir.FhirDate({ value: source.servicedDate });
        }
        else if (source['servicedPeriod']) {
            this.serviced = new fhir.Period(source.servicedPeriod);
        }
        if (source['created']) {
            this.created = new fhir.FhirDateTime({ value: source.created });
        }
        else {
            this.created = null;
        }
        if (source['requestor']) {
            this.requestor = new fhir.Reference(source.requestor);
        }
        if (source['request']) {
            this.request = new fhir.Reference(source.request);
        }
        else {
            this.request = null;
        }
        if (source['outcome']) {
            this.outcome = source.outcome;
        }
        else {
            this.outcome = null;
        }
        if (source['disposition']) {
            this.disposition = new fhir.FhirString({ value: source.disposition });
        }
        if (source['insurer']) {
            this.insurer = new fhir.Reference(source.insurer);
        }
        else {
            this.insurer = null;
        }
        if (source['insurance']) {
            this.insurance = source.insurance.map((x) => new fhir.CoverageEligibilityResponseInsurance(x));
        }
        if (source['preAuthRef']) {
            this.preAuthRef = new fhir.FhirString({ value: source.preAuthRef });
        }
        if (source['form']) {
            this.form = new fhir.CodeableConcept(source.form);
        }
        if (source['error']) {
            this.error = source.error.map((x) => new fhir.CoverageEligibilityResponseError(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return FmStatusValueSet;
    }
    /**
     * Required-bound Value Set for purpose
     */
    static purposeRequiredValueSet() {
        return EligibilityresponsePurposeValueSet;
    }
    /**
     * Required-bound Value Set for outcome
     */
    static outcomeRequiredValueSet() {
        return RemittanceOutcomeValueSet;
    }
    /**
     * Example-bound Value Set for form
     */
    static formExampleValueSet() {
        return FormsValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'CoverageEligibilityResponse' fhir: CoverageEligibilityResponse.resourceType:'CoverageEligibilityResponse'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:FmStatusValueSetEnum fhir: CoverageEligibilityResponse.status:code", }));
        }
        if (!this['purpose']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property purpose:EligibilityresponsePurposeValueSetEnum[] fhir: CoverageEligibilityResponse.purpose:code", }));
        }
        else if (!Array.isArray(this.purpose)) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue, diagnostics: "Found scalar in array property purpose:EligibilityresponsePurposeValueSetEnum[] fhir: CoverageEligibilityResponse.purpose:code", }));
        }
        else if (this.purpose.length === 0) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property purpose:EligibilityresponsePurposeValueSetEnum[] fhir: CoverageEligibilityResponse.purpose:code", }));
        }
        if (!this['patient']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property patient:fhir.Reference fhir: CoverageEligibilityResponse.patient:Reference", }));
        }
        if (this["patient"]) {
            outcome.issue.push(...this.patient.doModelValidation().issue);
        }
        if (!this['created']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property created:fhir.FhirDateTime fhir: CoverageEligibilityResponse.created:dateTime", }));
        }
        if (this["created"]) {
            outcome.issue.push(...this.created.doModelValidation().issue);
        }
        if (this["requestor"]) {
            outcome.issue.push(...this.requestor.doModelValidation().issue);
        }
        if (!this['request']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property request:fhir.Reference fhir: CoverageEligibilityResponse.request:Reference", }));
        }
        if (this["request"]) {
            outcome.issue.push(...this.request.doModelValidation().issue);
        }
        if (!this['outcome']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property outcome:RemittanceOutcomeValueSetEnum fhir: CoverageEligibilityResponse.outcome:code", }));
        }
        if (this["disposition"]) {
            outcome.issue.push(...this.disposition.doModelValidation().issue);
        }
        if (!this['insurer']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property insurer:fhir.Reference fhir: CoverageEligibilityResponse.insurer:Reference", }));
        }
        if (this["insurer"]) {
            outcome.issue.push(...this.insurer.doModelValidation().issue);
        }
        if (this["insurance"]) {
            this.insurance.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["preAuthRef"]) {
            outcome.issue.push(...this.preAuthRef.doModelValidation().issue);
        }
        if (this["form"]) {
            outcome.issue.push(...this.form.doModelValidation().issue);
        }
        if (this["error"]) {
            this.error.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=CoverageEligibilityResponse.js.map