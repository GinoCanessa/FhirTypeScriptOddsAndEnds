// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: CoverageEligibilityResponse
import * as fhir from '../fhir.js';
import { BenefitTypeValueSet } from '../fhirValueSets/BenefitTypeValueSet.js';
import { ExBenefitcategoryValueSet } from '../fhirValueSets/ExBenefitcategoryValueSet.js';
import { ServiceUsclsValueSet } from '../fhirValueSets/ServiceUsclsValueSet.js';
import { ClaimModifiersValueSet } from '../fhirValueSets/ClaimModifiersValueSet.js';
import { BenefitNetworkValueSet } from '../fhirValueSets/BenefitNetworkValueSet.js';
import { BenefitUnitValueSet } from '../fhirValueSets/BenefitUnitValueSet.js';
import { BenefitTermValueSet } from '../fhirValueSets/BenefitTermValueSet.js';
import { CoverageeligibilityresponseExAuthSupportValueSet } from '../fhirValueSets/CoverageeligibilityresponseExAuthSupportValueSet.js';
import { AdjudicationErrorValueSet } from '../fhirValueSets/AdjudicationErrorValueSet.js';
import { FmStatusValueSet } from '../fhirValueSets/FmStatusValueSet.js';
import { EligibilityresponsePurposeValueSet } from '../fhirValueSets/EligibilityresponsePurposeValueSet.js';
import { RemittanceOutcomeValueSet } from '../fhirValueSets/RemittanceOutcomeValueSet.js';
import { FormsValueSet } from '../fhirValueSets/FormsValueSet.js';
/**
 * Benefits used to date.
 */
export class CoverageEligibilityResponseInsuranceItemBenefit extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityResponseInsuranceItemBenefit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['allowedUnsignedInt']) {
            this.allowedUnsignedInt = source.allowedUnsignedInt;
        }
        if (source['_allowedUnsignedInt']) {
            this._allowedUnsignedInt = new fhir.FhirElement(source._allowedUnsignedInt);
        }
        if (source['allowedString']) {
            this.allowedString = source.allowedString;
        }
        if (source['_allowedString']) {
            this._allowedString = new fhir.FhirElement(source._allowedString);
        }
        if (source['allowedMoney']) {
            this.allowedMoney = new fhir.Money(source.allowedMoney);
        }
        if (source['usedUnsignedInt']) {
            this.usedUnsignedInt = source.usedUnsignedInt;
        }
        if (source['_usedUnsignedInt']) {
            this._usedUnsignedInt = new fhir.FhirElement(source._usedUnsignedInt);
        }
        if (source['usedString']) {
            this.usedString = source.usedString;
        }
        if (source['_usedString']) {
            this._usedString = new fhir.FhirElement(source._usedString);
        }
        if (source['usedMoney']) {
            this.usedMoney = new fhir.Money(source.usedMoney);
        }
    }
    /**
     * Example-bound Value Set for type
     */
    static typeExampleValueSet() {
        return BenefitTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["type"]) {
            results.push(["type", 'Missing required element: CoverageEligibilityResponse.insurance.item.benefit.type']);
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["_allowedUnsignedInt"]) {
            results.push(...this._allowedUnsignedInt.doModelValidation());
        }
        if (this["_allowedString"]) {
            results.push(...this._allowedString.doModelValidation());
        }
        if (this["allowedMoney"]) {
            results.push(...this.allowedMoney.doModelValidation());
        }
        if (this["_usedUnsignedInt"]) {
            results.push(...this._usedUnsignedInt.doModelValidation());
        }
        if (this["_usedString"]) {
            results.push(...this._usedString.doModelValidation());
        }
        if (this["usedMoney"]) {
            results.push(...this.usedMoney.doModelValidation());
        }
        return results;
    }
}
/**
 * Benefits and optionally current balances, and authorization details by category or service.
 */
export class CoverageEligibilityResponseInsuranceItem extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityResponseInsuranceItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider);
        }
        if (source['excluded']) {
            this.excluded = source.excluded;
        }
        if (source['_excluded']) {
            this._excluded = new fhir.FhirElement(source._excluded);
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['network']) {
            this.network = new fhir.CodeableConcept(source.network);
        }
        if (source['unit']) {
            this.unit = new fhir.CodeableConcept(source.unit);
        }
        if (source['term']) {
            this.term = new fhir.CodeableConcept(source.term);
        }
        if (source['benefit']) {
            this.benefit = source.benefit.map((x) => new fhir.CoverageEligibilityResponseInsuranceItemBenefit(x));
        }
        if (source['authorizationRequired']) {
            this.authorizationRequired = source.authorizationRequired;
        }
        if (source['_authorizationRequired']) {
            this._authorizationRequired = new fhir.FhirElement(source._authorizationRequired);
        }
        if (source['authorizationSupporting']) {
            this.authorizationSupporting = source.authorizationSupporting.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['authorizationUrl']) {
            this.authorizationUrl = source.authorizationUrl;
        }
        if (source['_authorizationUrl']) {
            this._authorizationUrl = new fhir.FhirElement(source._authorizationUrl);
        }
    }
    /**
     * Example-bound Value Set for category
     */
    static categoryExampleValueSet() {
        return ExBenefitcategoryValueSet;
    }
    /**
     * Example-bound Value Set for productOrService
     */
    static productOrServiceExampleValueSet() {
        return ServiceUsclsValueSet;
    }
    /**
     * Example-bound Value Set for modifier
     */
    static modifierExampleValueSet() {
        return ClaimModifiersValueSet;
    }
    /**
     * Example-bound Value Set for network
     */
    static networkExampleValueSet() {
        return BenefitNetworkValueSet;
    }
    /**
     * Example-bound Value Set for unit
     */
    static unitExampleValueSet() {
        return BenefitUnitValueSet;
    }
    /**
     * Example-bound Value Set for term
     */
    static termExampleValueSet() {
        return BenefitTermValueSet;
    }
    /**
     * Example-bound Value Set for authorizationSupporting
     */
    static authorizationSupportingExampleValueSet() {
        return CoverageeligibilityresponseExAuthSupportValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["category"]) {
            results.push(...this.category.doModelValidation());
        }
        if (this["productOrService"]) {
            results.push(...this.productOrService.doModelValidation());
        }
        if (this["modifier"]) {
            this.modifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["provider"]) {
            results.push(...this.provider.doModelValidation());
        }
        if (this["_excluded"]) {
            results.push(...this._excluded.doModelValidation());
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["network"]) {
            results.push(...this.network.doModelValidation());
        }
        if (this["unit"]) {
            results.push(...this.unit.doModelValidation());
        }
        if (this["term"]) {
            results.push(...this.term.doModelValidation());
        }
        if (this["benefit"]) {
            this.benefit.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_authorizationRequired"]) {
            results.push(...this._authorizationRequired.doModelValidation());
        }
        if (this["authorizationSupporting"]) {
            this.authorizationSupporting.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_authorizationUrl"]) {
            results.push(...this._authorizationUrl.doModelValidation());
        }
        return results;
    }
}
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export class CoverageEligibilityResponseInsurance extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityResponseInsurance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['coverage']) {
            this.coverage = new fhir.Reference(source.coverage);
        }
        else {
            this.coverage = null;
        }
        if (source['inforce']) {
            this.inforce = source.inforce;
        }
        if (source['_inforce']) {
            this._inforce = new fhir.FhirElement(source._inforce);
        }
        if (source['benefitPeriod']) {
            this.benefitPeriod = new fhir.Period(source.benefitPeriod);
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.CoverageEligibilityResponseInsuranceItem(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["coverage"]) {
            results.push(["coverage", 'Missing required element: CoverageEligibilityResponse.insurance.coverage']);
        }
        if (this["coverage"]) {
            results.push(...this.coverage.doModelValidation());
        }
        if (this["_inforce"]) {
            results.push(...this._inforce.doModelValidation());
        }
        if (this["benefitPeriod"]) {
            results.push(...this.benefitPeriod.doModelValidation());
        }
        if (this["item"]) {
            this.item.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Errors encountered during the processing of the request.
 */
export class CoverageEligibilityResponseError extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityResponseError - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
    }
    /**
     * Example-bound Value Set for code
     */
    static codeExampleValueSet() {
        return AdjudicationErrorValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["code"]) {
            results.push(["code", 'Missing required element: CoverageEligibilityResponse.error.code']);
        }
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        return results;
    }
}
/**
 * This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.
 */
export class CoverageEligibilityResponse extends fhir.DomainResource {
    /**
     * Default constructor for CoverageEligibilityResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'CoverageEligibilityResponse';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['purpose']) {
            this.purpose = source.purpose.map((x) => (x));
        }
        else {
            this.purpose = null;
        }
        if (source['_purpose']) {
            this._purpose = source._purpose.map((x) => new fhir.FhirElement(x));
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['servicedDate']) {
            this.servicedDate = source.servicedDate;
        }
        if (source['_servicedDate']) {
            this._servicedDate = new fhir.FhirElement(source._servicedDate);
        }
        if (source['servicedPeriod']) {
            this.servicedPeriod = new fhir.Period(source.servicedPeriod);
        }
        if (source['created']) {
            this.created = source.created;
        }
        else {
            this.created = null;
        }
        if (source['_created']) {
            this._created = new fhir.FhirElement(source._created);
        }
        if (source['requestor']) {
            this.requestor = new fhir.Reference(source.requestor);
        }
        if (source['request']) {
            this.request = new fhir.Reference(source.request);
        }
        else {
            this.request = null;
        }
        if (source['outcome']) {
            this.outcome = source.outcome;
        }
        else {
            this.outcome = null;
        }
        if (source['_outcome']) {
            this._outcome = new fhir.FhirElement(source._outcome);
        }
        if (source['disposition']) {
            this.disposition = source.disposition;
        }
        if (source['_disposition']) {
            this._disposition = new fhir.FhirElement(source._disposition);
        }
        if (source['insurer']) {
            this.insurer = new fhir.Reference(source.insurer);
        }
        else {
            this.insurer = null;
        }
        if (source['insurance']) {
            this.insurance = source.insurance.map((x) => new fhir.CoverageEligibilityResponseInsurance(x));
        }
        if (source['preAuthRef']) {
            this.preAuthRef = source.preAuthRef;
        }
        if (source['_preAuthRef']) {
            this._preAuthRef = new fhir.FhirElement(source._preAuthRef);
        }
        if (source['form']) {
            this.form = new fhir.CodeableConcept(source.form);
        }
        if (source['error']) {
            this.error = source.error.map((x) => new fhir.CoverageEligibilityResponseError(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return FmStatusValueSet;
    }
    /**
     * Required-bound Value Set for purpose
     */
    static purposeRequiredValueSet() {
        return EligibilityresponsePurposeValueSet;
    }
    /**
     * Required-bound Value Set for outcome
     */
    static outcomeRequiredValueSet() {
        return RemittanceOutcomeValueSet;
    }
    /**
     * Example-bound Value Set for form
     */
    static formExampleValueSet() {
        return FormsValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: CoverageEligibilityResponse.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: CoverageEligibilityResponse.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if ((!this["purpose"]) || (this["purpose"].length === 0)) {
            results.push(["purpose", 'Missing required element: CoverageEligibilityResponse.purpose']);
        }
        if (this["_purpose"]) {
            this._purpose.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["patient"]) {
            results.push(["patient", 'Missing required element: CoverageEligibilityResponse.patient']);
        }
        if (this["patient"]) {
            results.push(...this.patient.doModelValidation());
        }
        if (this["_servicedDate"]) {
            results.push(...this._servicedDate.doModelValidation());
        }
        if (this["servicedPeriod"]) {
            results.push(...this.servicedPeriod.doModelValidation());
        }
        if (!this["created"]) {
            results.push(["created", 'Missing required element: CoverageEligibilityResponse.created']);
        }
        if (this["_created"]) {
            results.push(...this._created.doModelValidation());
        }
        if (this["requestor"]) {
            results.push(...this.requestor.doModelValidation());
        }
        if (!this["request"]) {
            results.push(["request", 'Missing required element: CoverageEligibilityResponse.request']);
        }
        if (this["request"]) {
            results.push(...this.request.doModelValidation());
        }
        if (!this["outcome"]) {
            results.push(["outcome", 'Missing required element: CoverageEligibilityResponse.outcome']);
        }
        if (this["_outcome"]) {
            results.push(...this._outcome.doModelValidation());
        }
        if (this["_disposition"]) {
            results.push(...this._disposition.doModelValidation());
        }
        if (!this["insurer"]) {
            results.push(["insurer", 'Missing required element: CoverageEligibilityResponse.insurer']);
        }
        if (this["insurer"]) {
            results.push(...this.insurer.doModelValidation());
        }
        if (this["insurance"]) {
            this.insurance.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_preAuthRef"]) {
            results.push(...this._preAuthRef.doModelValidation());
        }
        if (this["form"]) {
            results.push(...this.form.doModelValidation());
        }
        if (this["error"]) {
            this.error.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=CoverageEligibilityResponse.js.map