// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * A description of the size of the sample involved in the synthesis.
 */
export class EffectEvidenceSynthesisSampleSize extends fhir.BackboneElement {
    /**
     * Default constructor for EffectEvidenceSynthesisSampleSize - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["numberOfParticipants"]) {
            this.numberOfParticipants = source.numberOfParticipants;
        }
        if (source["_numberOfParticipants"]) {
            this._numberOfParticipants = new fhir.FhirElement(source._numberOfParticipants);
        }
        if (source["numberOfStudies"]) {
            this.numberOfStudies = source.numberOfStudies;
        }
        if (source["_numberOfStudies"]) {
            this._numberOfStudies = new fhir.FhirElement(source._numberOfStudies);
        }
    }
    /**
     * Check if the current EffectEvidenceSynthesisSampleSize contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a EffectEvidenceSynthesisSampleSize from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new EffectEvidenceSynthesisSampleSize(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `EffectEvidenceSynthesisSampleSize is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A description of the results for each exposure considered in the effect estimate.
 */
export class EffectEvidenceSynthesisResultsByExposure extends fhir.BackboneElement {
    /**
     * Default constructor for EffectEvidenceSynthesisResultsByExposure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["exposureState"]) {
            this.exposureState = source.exposureState;
        }
        if (source["_exposureState"]) {
            this._exposureState = new fhir.FhirElement(source._exposureState);
        }
        this.riskEvidenceSynthesis = null;
        if (source["riskEvidenceSynthesis"]) {
            this.riskEvidenceSynthesis = new fhir.Reference(source.riskEvidenceSynthesis);
        }
        if (this.riskEvidenceSynthesis === undefined) {
            this.riskEvidenceSynthesis = null;
        }
        if (source["variantState"]) {
            this.variantState = new fhir.CodeableConcept(source.variantState);
        }
    }
    /**
     * Check if the current EffectEvidenceSynthesisResultsByExposure contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["riskEvidenceSynthesis"] === undefined) {
            missingElements.push("riskEvidenceSynthesis");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a EffectEvidenceSynthesisResultsByExposure from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new EffectEvidenceSynthesisResultsByExposure(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `EffectEvidenceSynthesisResultsByExposure is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A description of the precision of the estimate for the effect.
 */
export class EffectEvidenceSynthesisEffectEstimatePrecisionEstimate extends fhir.BackboneElement {
    /**
     * Default constructor for EffectEvidenceSynthesisEffectEstimatePrecisionEstimate - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["from"]) {
            this.from = source.from;
        }
        if (source["_from"]) {
            this._from = new fhir.FhirElement(source._from);
        }
        if (source["level"]) {
            this.level = source.level;
        }
        if (source["_level"]) {
            this._level = new fhir.FhirElement(source._level);
        }
        if (source["to"]) {
            this.to = source.to;
        }
        if (source["_to"]) {
            this._to = new fhir.FhirElement(source._to);
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current EffectEvidenceSynthesisEffectEstimatePrecisionEstimate contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a EffectEvidenceSynthesisEffectEstimatePrecisionEstimate from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new EffectEvidenceSynthesisEffectEstimatePrecisionEstimate(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `EffectEvidenceSynthesisEffectEstimatePrecisionEstimate is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The estimated effect of the exposure variant.
 */
export class EffectEvidenceSynthesisEffectEstimate extends fhir.BackboneElement {
    /**
     * Default constructor for EffectEvidenceSynthesisEffectEstimate - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["precisionEstimate"]) {
            this.precisionEstimate = source.precisionEstimate.map((x) => new fhir.EffectEvidenceSynthesisEffectEstimatePrecisionEstimate(x));
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source["unitOfMeasure"]) {
            this.unitOfMeasure = new fhir.CodeableConcept(source.unitOfMeasure);
        }
        if (source["value"]) {
            this.value = source.value;
        }
        if (source["_value"]) {
            this._value = new fhir.FhirElement(source._value);
        }
        if (source["variantState"]) {
            this.variantState = new fhir.CodeableConcept(source.variantState);
        }
    }
    /**
     * Check if the current EffectEvidenceSynthesisEffectEstimate contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a EffectEvidenceSynthesisEffectEstimate from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new EffectEvidenceSynthesisEffectEstimate(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `EffectEvidenceSynthesisEffectEstimate is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A description of a component of the overall certainty.
 */
export class EffectEvidenceSynthesisCertaintyCertaintySubcomponent extends fhir.BackboneElement {
    /**
     * Default constructor for EffectEvidenceSynthesisCertaintyCertaintySubcomponent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["note"]) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source["rating"]) {
            this.rating = source.rating.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current EffectEvidenceSynthesisCertaintyCertaintySubcomponent contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a EffectEvidenceSynthesisCertaintyCertaintySubcomponent from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new EffectEvidenceSynthesisCertaintyCertaintySubcomponent(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `EffectEvidenceSynthesisCertaintyCertaintySubcomponent is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A description of the certainty of the effect estimate.
 */
export class EffectEvidenceSynthesisCertainty extends fhir.BackboneElement {
    /**
     * Default constructor for EffectEvidenceSynthesisCertainty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["certaintySubcomponent"]) {
            this.certaintySubcomponent = source.certaintySubcomponent.map((x) => new fhir.EffectEvidenceSynthesisCertaintyCertaintySubcomponent(x));
        }
        if (source["note"]) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source["rating"]) {
            this.rating = source.rating.map((x) => new fhir.CodeableConcept(x));
        }
    }
    /**
     * Check if the current EffectEvidenceSynthesisCertainty contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a EffectEvidenceSynthesisCertainty from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new EffectEvidenceSynthesisCertainty(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `EffectEvidenceSynthesisCertainty is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The EffectEvidenceSynthesis resource describes the difference in an outcome between exposures states in a population where the effect estimate is derived from a combination of research studies.
 */
export class EffectEvidenceSynthesis extends fhir.DomainResource {
    /**
     * Default constructor for EffectEvidenceSynthesis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'EffectEvidenceSynthesis';
        if (source["approvalDate"]) {
            this.approvalDate = source.approvalDate;
        }
        if (source["_approvalDate"]) {
            this._approvalDate = new fhir.FhirElement(source._approvalDate);
        }
        if (source["author"]) {
            this.author = source.author.map((x) => new fhir.ContactDetail(x));
        }
        if (source["certainty"]) {
            this.certainty = source.certainty.map((x) => new fhir.EffectEvidenceSynthesisCertainty(x));
        }
        if (source["contact"]) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source["copyright"]) {
            this.copyright = source.copyright;
        }
        if (source["_copyright"]) {
            this._copyright = new fhir.FhirElement(source._copyright);
        }
        if (source["date"]) {
            this.date = source.date;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["editor"]) {
            this.editor = source.editor.map((x) => new fhir.ContactDetail(x));
        }
        if (source["effectEstimate"]) {
            this.effectEstimate = source.effectEstimate.map((x) => new fhir.EffectEvidenceSynthesisEffectEstimate(x));
        }
        if (source["effectivePeriod"]) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source["endorser"]) {
            this.endorser = source.endorser.map((x) => new fhir.ContactDetail(x));
        }
        this.exposure = null;
        if (source["exposure"]) {
            this.exposure = new fhir.Reference(source.exposure);
        }
        if (this.exposure === undefined) {
            this.exposure = null;
        }
        this.exposureAlternative = null;
        if (source["exposureAlternative"]) {
            this.exposureAlternative = new fhir.Reference(source.exposureAlternative);
        }
        if (this.exposureAlternative === undefined) {
            this.exposureAlternative = null;
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["jurisdiction"]) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["lastReviewDate"]) {
            this.lastReviewDate = source.lastReviewDate;
        }
        if (source["_lastReviewDate"]) {
            this._lastReviewDate = new fhir.FhirElement(source._lastReviewDate);
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["note"]) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        this.outcome = null;
        if (source["outcome"]) {
            this.outcome = new fhir.Reference(source.outcome);
        }
        if (this.outcome === undefined) {
            this.outcome = null;
        }
        this.population = null;
        if (source["population"]) {
            this.population = new fhir.Reference(source.population);
        }
        if (this.population === undefined) {
            this.population = null;
        }
        if (source["publisher"]) {
            this.publisher = source.publisher;
        }
        if (source["_publisher"]) {
            this._publisher = new fhir.FhirElement(source._publisher);
        }
        if (source["relatedArtifact"]) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x));
        }
        if (source["resultsByExposure"]) {
            this.resultsByExposure = source.resultsByExposure.map((x) => new fhir.EffectEvidenceSynthesisResultsByExposure(x));
        }
        if (source["reviewer"]) {
            this.reviewer = source.reviewer.map((x) => new fhir.ContactDetail(x));
        }
        if (source["sampleSize"]) {
            this.sampleSize = new fhir.EffectEvidenceSynthesisSampleSize(source.sampleSize);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["studyType"]) {
            this.studyType = new fhir.CodeableConcept(source.studyType);
        }
        if (source["synthesisType"]) {
            this.synthesisType = new fhir.CodeableConcept(source.synthesisType);
        }
        if (source["title"]) {
            this.title = source.title;
        }
        if (source["_title"]) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source["topic"]) {
            this.topic = source.topic.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["url"]) {
            this.url = source.url;
        }
        if (source["_url"]) {
            this._url = new fhir.FhirElement(source._url);
        }
        if (source["useContext"]) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source["version"]) {
            this.version = source.version;
        }
        if (source["_version"]) {
            this._version = new fhir.FhirElement(source._version);
        }
    }
    /**
     * Check if the current EffectEvidenceSynthesis contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["exposure"] === undefined) {
            missingElements.push("exposure");
        }
        if (this["exposureAlternative"] === undefined) {
            missingElements.push("exposureAlternative");
        }
        if (this["outcome"] === undefined) {
            missingElements.push("outcome");
        }
        if (this["population"] === undefined) {
            missingElements.push("population");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a EffectEvidenceSynthesis from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new EffectEvidenceSynthesis(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `EffectEvidenceSynthesis is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the EffectEvidenceSynthesis.resultsByExposure.exposureState field
 */
export var EffectEvidenceSynthesisResultsByExposureExposureStateEnum;
(function (EffectEvidenceSynthesisResultsByExposureExposureStateEnum) {
    EffectEvidenceSynthesisResultsByExposureExposureStateEnum["EXPOSURE"] = "exposure";
    EffectEvidenceSynthesisResultsByExposureExposureStateEnum["EXPOSURE_ALTERNATIVE"] = "exposure-alternative";
})(EffectEvidenceSynthesisResultsByExposureExposureStateEnum || (EffectEvidenceSynthesisResultsByExposureExposureStateEnum = {}));
/**
 * Code Values for the EffectEvidenceSynthesis.status field
 */
export var EffectEvidenceSynthesisStatusEnum;
(function (EffectEvidenceSynthesisStatusEnum) {
    EffectEvidenceSynthesisStatusEnum["DRAFT"] = "draft";
    EffectEvidenceSynthesisStatusEnum["ACTIVE"] = "active";
    EffectEvidenceSynthesisStatusEnum["RETIRED"] = "retired";
    EffectEvidenceSynthesisStatusEnum["UNKNOWN"] = "unknown";
})(EffectEvidenceSynthesisStatusEnum || (EffectEvidenceSynthesisStatusEnum = {}));
//# sourceMappingURL=EffectEvidenceSynthesis.js.map