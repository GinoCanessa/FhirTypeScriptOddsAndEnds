// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: EffectEvidenceSynthesis
import * as fhir from '../fhir.js';
import { ExposureStateValueSet } from '../fhirValueSets/ExposureStateValueSet.js';
import { EvidenceVariantStateValueSet } from '../fhirValueSets/EvidenceVariantStateValueSet.js';
import { PrecisionEstimateTypeValueSet } from '../fhirValueSets/PrecisionEstimateTypeValueSet.js';
import { EffectEstimateTypeValueSet } from '../fhirValueSets/EffectEstimateTypeValueSet.js';
import { UcumUnitsValueSet } from '../fhirValueSets/UcumUnitsValueSet.js';
import { CertaintySubcomponentTypeValueSet } from '../fhirValueSets/CertaintySubcomponentTypeValueSet.js';
import { CertaintySubcomponentRatingValueSet } from '../fhirValueSets/CertaintySubcomponentRatingValueSet.js';
import { EvidenceQualityValueSet } from '../fhirValueSets/EvidenceQualityValueSet.js';
import { PublicationStatusValueSet } from '../fhirValueSets/PublicationStatusValueSet.js';
import { DefinitionTopicValueSet } from '../fhirValueSets/DefinitionTopicValueSet.js';
import { SynthesisTypeValueSet } from '../fhirValueSets/SynthesisTypeValueSet.js';
import { StudyTypeValueSet } from '../fhirValueSets/StudyTypeValueSet.js';
/**
 * A description of the size of the sample involved in the synthesis.
 */
export class EffectEvidenceSynthesisSampleSize extends fhir.BackboneElement {
    /**
     * Default constructor for EffectEvidenceSynthesisSampleSize - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['numberOfStudies']) {
            this.numberOfStudies = source.numberOfStudies;
        }
        if (source['_numberOfStudies']) {
            this._numberOfStudies = new fhir.FhirElement(source._numberOfStudies);
        }
        if (source['numberOfParticipants']) {
            this.numberOfParticipants = source.numberOfParticipants;
        }
        if (source['_numberOfParticipants']) {
            this._numberOfParticipants = new fhir.FhirElement(source._numberOfParticipants);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["_numberOfStudies"]) {
            results.push(...this._numberOfStudies.doModelValidation());
        }
        if (this["_numberOfParticipants"]) {
            results.push(...this._numberOfParticipants.doModelValidation());
        }
        return results;
    }
}
/**
 * A description of the results for each exposure considered in the effect estimate.
 */
export class EffectEvidenceSynthesisResultsByExposure extends fhir.BackboneElement {
    /**
     * Default constructor for EffectEvidenceSynthesisResultsByExposure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['exposureState']) {
            this.exposureState = source.exposureState;
        }
        if (source['_exposureState']) {
            this._exposureState = new fhir.FhirElement(source._exposureState);
        }
        if (source['variantState']) {
            this.variantState = new fhir.CodeableConcept(source.variantState);
        }
        if (source['riskEvidenceSynthesis']) {
            this.riskEvidenceSynthesis = new fhir.Reference(source.riskEvidenceSynthesis);
        }
        else {
            this.riskEvidenceSynthesis = null;
        }
    }
    /**
     * Required-bound Value Set for exposureState
     */
    exposureStateRequiredValueSet() {
        return ExposureStateValueSet;
    }
    /**
     * Extensible-bound Value Set for variantState
     */
    variantStateExtensibleValueSet() {
        return EvidenceVariantStateValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["_exposureState"]) {
            results.push(...this._exposureState.doModelValidation());
        }
        if (this["variantState"]) {
            results.push(...this.variantState.doModelValidation());
        }
        if (!this["riskEvidenceSynthesis"]) {
            results.push(["riskEvidenceSynthesis", 'Missing required element: EffectEvidenceSynthesis.resultsByExposure.riskEvidenceSynthesis']);
        }
        if (this["riskEvidenceSynthesis"]) {
            results.push(...this.riskEvidenceSynthesis.doModelValidation());
        }
        return results;
    }
}
/**
 * A description of the precision of the estimate for the effect.
 */
export class EffectEvidenceSynthesisEffectEstimatePrecisionEstimate extends fhir.BackboneElement {
    /**
     * Default constructor for EffectEvidenceSynthesisEffectEstimatePrecisionEstimate - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['level']) {
            this.level = source.level;
        }
        if (source['_level']) {
            this._level = new fhir.FhirElement(source._level);
        }
        if (source['from']) {
            this.from = source.from;
        }
        if (source['_from']) {
            this._from = new fhir.FhirElement(source._from);
        }
        if (source['to']) {
            this.to = source.to;
        }
        if (source['_to']) {
            this._to = new fhir.FhirElement(source._to);
        }
    }
    /**
     * Extensible-bound Value Set for type
     */
    typeExtensibleValueSet() {
        return PrecisionEstimateTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["_level"]) {
            results.push(...this._level.doModelValidation());
        }
        if (this["_from"]) {
            results.push(...this._from.doModelValidation());
        }
        if (this["_to"]) {
            results.push(...this._to.doModelValidation());
        }
        return results;
    }
}
/**
 * The estimated effect of the exposure variant.
 */
export class EffectEvidenceSynthesisEffectEstimate extends fhir.BackboneElement {
    /**
     * Default constructor for EffectEvidenceSynthesisEffectEstimate - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['variantState']) {
            this.variantState = new fhir.CodeableConcept(source.variantState);
        }
        if (source['value']) {
            this.value = source.value;
        }
        if (source['_value']) {
            this._value = new fhir.FhirElement(source._value);
        }
        if (source['unitOfMeasure']) {
            this.unitOfMeasure = new fhir.CodeableConcept(source.unitOfMeasure);
        }
        if (source['precisionEstimate']) {
            this.precisionEstimate = source.precisionEstimate.map((x) => new fhir.EffectEvidenceSynthesisEffectEstimatePrecisionEstimate(x));
        }
    }
    /**
     * Extensible-bound Value Set for type
     */
    typeExtensibleValueSet() {
        return EffectEstimateTypeValueSet;
    }
    /**
     * Extensible-bound Value Set for variantState
     */
    variantStateExtensibleValueSet() {
        return EvidenceVariantStateValueSet;
    }
    /**
     * Required-bound Value Set for unitOfMeasure
     */
    unitOfMeasureRequiredValueSet() {
        return UcumUnitsValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["variantState"]) {
            results.push(...this.variantState.doModelValidation());
        }
        if (this["_value"]) {
            results.push(...this._value.doModelValidation());
        }
        if (this["unitOfMeasure"]) {
            results.push(...this.unitOfMeasure.doModelValidation());
        }
        if (this["precisionEstimate"]) {
            this.precisionEstimate.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * A description of a component of the overall certainty.
 */
export class EffectEvidenceSynthesisCertaintyCertaintySubcomponent extends fhir.BackboneElement {
    /**
     * Default constructor for EffectEvidenceSynthesisCertaintyCertaintySubcomponent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['rating']) {
            this.rating = source.rating.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
    }
    /**
     * Extensible-bound Value Set for type
     */
    typeExtensibleValueSet() {
        return CertaintySubcomponentTypeValueSet;
    }
    /**
     * Extensible-bound Value Set for rating
     */
    ratingExtensibleValueSet() {
        return CertaintySubcomponentRatingValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["rating"]) {
            this.rating.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * A description of the certainty of the effect estimate.
 */
export class EffectEvidenceSynthesisCertainty extends fhir.BackboneElement {
    /**
     * Default constructor for EffectEvidenceSynthesisCertainty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['rating']) {
            this.rating = source.rating.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['certaintySubcomponent']) {
            this.certaintySubcomponent = source.certaintySubcomponent.map((x) => new fhir.EffectEvidenceSynthesisCertaintyCertaintySubcomponent(x));
        }
    }
    /**
     * Extensible-bound Value Set for rating
     */
    ratingExtensibleValueSet() {
        return EvidenceQualityValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["rating"]) {
            this.rating.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["certaintySubcomponent"]) {
            this.certaintySubcomponent.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * The EffectEvidenceSynthesis resource describes the difference in an outcome between exposures states in a population where the effect estimate is derived from a combination of research studies.
 */
export class EffectEvidenceSynthesis extends fhir.DomainResource {
    /**
     * Default constructor for EffectEvidenceSynthesis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'EffectEvidenceSynthesis';
        if (source['url']) {
            this.url = source.url;
        }
        if (source['_url']) {
            this._url = new fhir.FhirElement(source._url);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['version']) {
            this.version = source.version;
        }
        if (source['_version']) {
            this._version = new fhir.FhirElement(source._version);
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['title']) {
            this.title = source.title;
        }
        if (source['_title']) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['date']) {
            this.date = source.date;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['publisher']) {
            this.publisher = source.publisher;
        }
        if (source['_publisher']) {
            this._publisher = new fhir.FhirElement(source._publisher);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['copyright']) {
            this.copyright = source.copyright;
        }
        if (source['_copyright']) {
            this._copyright = new fhir.FhirElement(source._copyright);
        }
        if (source['approvalDate']) {
            this.approvalDate = source.approvalDate;
        }
        if (source['_approvalDate']) {
            this._approvalDate = new fhir.FhirElement(source._approvalDate);
        }
        if (source['lastReviewDate']) {
            this.lastReviewDate = source.lastReviewDate;
        }
        if (source['_lastReviewDate']) {
            this._lastReviewDate = new fhir.FhirElement(source._lastReviewDate);
        }
        if (source['effectivePeriod']) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source['topic']) {
            this.topic = source.topic.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.ContactDetail(x));
        }
        if (source['editor']) {
            this.editor = source.editor.map((x) => new fhir.ContactDetail(x));
        }
        if (source['reviewer']) {
            this.reviewer = source.reviewer.map((x) => new fhir.ContactDetail(x));
        }
        if (source['endorser']) {
            this.endorser = source.endorser.map((x) => new fhir.ContactDetail(x));
        }
        if (source['relatedArtifact']) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x));
        }
        if (source['synthesisType']) {
            this.synthesisType = new fhir.CodeableConcept(source.synthesisType);
        }
        if (source['studyType']) {
            this.studyType = new fhir.CodeableConcept(source.studyType);
        }
        if (source['population']) {
            this.population = new fhir.Reference(source.population);
        }
        else {
            this.population = null;
        }
        if (source['exposure']) {
            this.exposure = new fhir.Reference(source.exposure);
        }
        else {
            this.exposure = null;
        }
        if (source['exposureAlternative']) {
            this.exposureAlternative = new fhir.Reference(source.exposureAlternative);
        }
        else {
            this.exposureAlternative = null;
        }
        if (source['outcome']) {
            this.outcome = new fhir.Reference(source.outcome);
        }
        else {
            this.outcome = null;
        }
        if (source['sampleSize']) {
            this.sampleSize = new fhir.EffectEvidenceSynthesisSampleSize(source.sampleSize);
        }
        if (source['resultsByExposure']) {
            this.resultsByExposure = source.resultsByExposure.map((x) => new fhir.EffectEvidenceSynthesisResultsByExposure(x));
        }
        if (source['effectEstimate']) {
            this.effectEstimate = source.effectEstimate.map((x) => new fhir.EffectEvidenceSynthesisEffectEstimate(x));
        }
        if (source['certainty']) {
            this.certainty = source.certainty.map((x) => new fhir.EffectEvidenceSynthesisCertainty(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return PublicationStatusValueSet;
    }
    /**
     * Example-bound Value Set for topic
     */
    topicExampleValueSet() {
        return DefinitionTopicValueSet;
    }
    /**
     * Extensible-bound Value Set for synthesisType
     */
    synthesisTypeExtensibleValueSet() {
        return SynthesisTypeValueSet;
    }
    /**
     * Extensible-bound Value Set for studyType
     */
    studyTypeExtensibleValueSet() {
        return StudyTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: EffectEvidenceSynthesis.resourceType']);
        }
        if (this["_url"]) {
            results.push(...this._url.doModelValidation());
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_version"]) {
            results.push(...this._version.doModelValidation());
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_title"]) {
            results.push(...this._title.doModelValidation());
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: EffectEvidenceSynthesis.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["_publisher"]) {
            results.push(...this._publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_copyright"]) {
            results.push(...this._copyright.doModelValidation());
        }
        if (this["_approvalDate"]) {
            results.push(...this._approvalDate.doModelValidation());
        }
        if (this["_lastReviewDate"]) {
            results.push(...this._lastReviewDate.doModelValidation());
        }
        if (this["effectivePeriod"]) {
            results.push(...this.effectivePeriod.doModelValidation());
        }
        if (this["topic"]) {
            this.topic.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["author"]) {
            this.author.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["editor"]) {
            this.editor.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reviewer"]) {
            this.reviewer.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["endorser"]) {
            this.endorser.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["relatedArtifact"]) {
            this.relatedArtifact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["synthesisType"]) {
            results.push(...this.synthesisType.doModelValidation());
        }
        if (this["studyType"]) {
            results.push(...this.studyType.doModelValidation());
        }
        if (!this["population"]) {
            results.push(["population", 'Missing required element: EffectEvidenceSynthesis.population']);
        }
        if (this["population"]) {
            results.push(...this.population.doModelValidation());
        }
        if (!this["exposure"]) {
            results.push(["exposure", 'Missing required element: EffectEvidenceSynthesis.exposure']);
        }
        if (this["exposure"]) {
            results.push(...this.exposure.doModelValidation());
        }
        if (!this["exposureAlternative"]) {
            results.push(["exposureAlternative", 'Missing required element: EffectEvidenceSynthesis.exposureAlternative']);
        }
        if (this["exposureAlternative"]) {
            results.push(...this.exposureAlternative.doModelValidation());
        }
        if (!this["outcome"]) {
            results.push(["outcome", 'Missing required element: EffectEvidenceSynthesis.outcome']);
        }
        if (this["outcome"]) {
            results.push(...this.outcome.doModelValidation());
        }
        if (this["sampleSize"]) {
            results.push(...this.sampleSize.doModelValidation());
        }
        if (this["resultsByExposure"]) {
            this.resultsByExposure.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["effectEstimate"]) {
            this.effectEstimate.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["certainty"]) {
            this.certainty.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=EffectEvidenceSynthesis.js.map