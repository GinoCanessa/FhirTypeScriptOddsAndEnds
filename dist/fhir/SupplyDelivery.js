// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * The item that is being delivered or has been supplied.
 */
export class SupplyDeliverySuppliedItem extends fhir.BackboneElement {
    /**
     * Default constructor for SupplyDeliverySuppliedItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["itemCodeableConcept"]) {
            this.itemCodeableConcept = new fhir.CodeableConcept(source.itemCodeableConcept);
        }
        if (source["itemReference"]) {
            this.itemReference = new fhir.Reference(source.itemReference);
        }
        if (source["quantity"]) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
    }
    /**
     * Check if the current SupplyDeliverySuppliedItem contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SupplyDeliverySuppliedItem from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new SupplyDeliverySuppliedItem(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `SupplyDeliverySuppliedItem is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Record of delivery of what is supplied.
 */
export class SupplyDelivery extends fhir.DomainResource {
    /**
     * Default constructor for SupplyDelivery - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'SupplyDelivery';
        if (source["basedOn"]) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source["destination"]) {
            this.destination = new fhir.Reference(source.destination);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["occurrenceDateTime"]) {
            this.occurrenceDateTime = source.occurrenceDateTime;
        }
        if (source["_occurrenceDateTime"]) {
            this._occurrenceDateTime = new fhir.FhirElement(source._occurrenceDateTime);
        }
        if (source["occurrencePeriod"]) {
            this.occurrencePeriod = new fhir.Period(source.occurrencePeriod);
        }
        if (source["occurrenceTiming"]) {
            this.occurrenceTiming = new fhir.Timing(source.occurrenceTiming);
        }
        if (source["partOf"]) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        if (source["patient"]) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (source["receiver"]) {
            this.receiver = source.receiver.map((x) => new fhir.Reference(x));
        }
        if (source["status"]) {
            this.status = source.status;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["suppliedItem"]) {
            this.suppliedItem = new fhir.SupplyDeliverySuppliedItem(source.suppliedItem);
        }
        if (source["supplier"]) {
            this.supplier = new fhir.Reference(source.supplier);
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current SupplyDelivery contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SupplyDelivery from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new SupplyDelivery(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `SupplyDelivery is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the SupplyDelivery.status field
 */
export var SupplyDeliveryStatusEnum;
(function (SupplyDeliveryStatusEnum) {
    SupplyDeliveryStatusEnum["IN_PROGRESS"] = "in-progress";
    SupplyDeliveryStatusEnum["COMPLETED"] = "completed";
    SupplyDeliveryStatusEnum["ABANDONED"] = "abandoned";
    SupplyDeliveryStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(SupplyDeliveryStatusEnum || (SupplyDeliveryStatusEnum = {}));
//# sourceMappingURL=SupplyDelivery.js.map