// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SupplyDelivery
import * as fhir from '../fhir.js';
import { SupplyItemValueSet } from '../fhirValueSets/SupplyItemValueSet.js';
import { SupplydeliveryStatusValueSet } from '../fhirValueSets/SupplydeliveryStatusValueSet.js';
import { SupplydeliveryTypeValueSet } from '../fhirValueSets/SupplydeliveryTypeValueSet.js';
/**
 * The item that is being delivered or has been supplied.
 */
export class SupplyDeliverySuppliedItem extends fhir.BackboneElement {
    /**
     * Default constructor for SupplyDeliverySuppliedItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['itemCodeableConcept']) {
            this.itemCodeableConcept = new fhir.CodeableConcept(source.itemCodeableConcept);
        }
        if (source['itemReference']) {
            this.itemReference = new fhir.Reference(source.itemReference);
        }
    }
    /**
     * Example-bound Value Set for itemCodeableConcept
     */
    itemCodeableConceptExampleValueSet() {
        return SupplyItemValueSet;
    }
    /**
     * Example-bound Value Set for itemReference
     */
    itemReferenceExampleValueSet() {
        return SupplyItemValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["quantity"]) {
            results.push(...this.quantity.doModelValidation());
        }
        if (this["itemCodeableConcept"]) {
            results.push(...this.itemCodeableConcept.doModelValidation());
        }
        if (this["itemReference"]) {
            results.push(...this.itemReference.doModelValidation());
        }
        return results;
    }
}
/**
 * Record of delivery of what is supplied.
 */
export class SupplyDelivery extends fhir.DomainResource {
    /**
     * Default constructor for SupplyDelivery - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'SupplyDelivery';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['suppliedItem']) {
            this.suppliedItem = new fhir.SupplyDeliverySuppliedItem(source.suppliedItem);
        }
        if (source['occurrenceDateTime']) {
            this.occurrenceDateTime = source.occurrenceDateTime;
        }
        if (source['_occurrenceDateTime']) {
            this._occurrenceDateTime = new fhir.FhirElement(source._occurrenceDateTime);
        }
        if (source['occurrencePeriod']) {
            this.occurrencePeriod = new fhir.Period(source.occurrencePeriod);
        }
        if (source['occurrenceTiming']) {
            this.occurrenceTiming = new fhir.Timing(source.occurrenceTiming);
        }
        if (source['supplier']) {
            this.supplier = new fhir.Reference(source.supplier);
        }
        if (source['destination']) {
            this.destination = new fhir.Reference(source.destination);
        }
        if (source['receiver']) {
            this.receiver = source.receiver.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return SupplydeliveryStatusValueSet;
    }
    /**
     * Required-bound Value Set for type
     */
    typeRequiredValueSet() {
        return SupplydeliveryTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: SupplyDelivery.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["partOf"]) {
            this.partOf.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["patient"]) {
            results.push(...this.patient.doModelValidation());
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["suppliedItem"]) {
            results.push(...this.suppliedItem.doModelValidation());
        }
        if (this["_occurrenceDateTime"]) {
            results.push(...this._occurrenceDateTime.doModelValidation());
        }
        if (this["occurrencePeriod"]) {
            results.push(...this.occurrencePeriod.doModelValidation());
        }
        if (this["occurrenceTiming"]) {
            results.push(...this.occurrenceTiming.doModelValidation());
        }
        if (this["supplier"]) {
            results.push(...this.supplier.doModelValidation());
        }
        if (this["destination"]) {
            results.push(...this.destination.doModelValidation());
        }
        if (this["receiver"]) {
            this.receiver.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=SupplyDelivery.js.map