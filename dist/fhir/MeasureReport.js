// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MeasureReport
import * as fhir from '../fhir.js';
import { MeasurePopulationValueSet } from '../fhirValueSets/MeasurePopulationValueSet.js';
import { MeasureReportStatusValueSet } from '../fhirValueSets/MeasureReportStatusValueSet.js';
import { MeasureReportTypeValueSet } from '../fhirValueSets/MeasureReportTypeValueSet.js';
import { MeasureImprovementNotationValueSet } from '../fhirValueSets/MeasureImprovementNotationValueSet.js';
/**
 * The populations that make up the population group, one for each type of population appropriate for the measure.
 */
export class MeasureReportGroupPopulation extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureReportGroupPopulation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['count']) {
            this.count = source.count;
        }
        if (source['_count']) {
            this._count = new fhir.FhirElement(source._count);
        }
        if (source['subjectResults']) {
            this.subjectResults = new fhir.Reference(source.subjectResults);
        }
    }
    /**
     * Extensible-bound Value Set for code
     */
    codeExtensibleValueSet() {
        return MeasurePopulationValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["_count"]) {
            results.push(...this._count.doModelValidation());
        }
        if (this["subjectResults"]) {
            results.push(...this.subjectResults.doModelValidation());
        }
        return results;
    }
}
/**
 * A stratifier component value.
 */
export class MeasureReportGroupStratifierStratumComponent extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureReportGroupStratifierStratumComponent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['value']) {
            this.value = new fhir.CodeableConcept(source.value);
        }
        else {
            this.value = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["code"]) {
            results.push(["code", 'Missing required element: MeasureReport.group.stratifier.stratum.component.code']);
        }
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (!this["value"]) {
            results.push(["value", 'Missing required element: MeasureReport.group.stratifier.stratum.component.value']);
        }
        if (this["value"]) {
            results.push(...this.value.doModelValidation());
        }
        return results;
    }
}
/**
 * The populations that make up the stratum, one for each type of population appropriate to the measure.
 */
export class MeasureReportGroupStratifierStratumPopulation extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureReportGroupStratifierStratumPopulation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['count']) {
            this.count = source.count;
        }
        if (source['_count']) {
            this._count = new fhir.FhirElement(source._count);
        }
        if (source['subjectResults']) {
            this.subjectResults = new fhir.Reference(source.subjectResults);
        }
    }
    /**
     * Extensible-bound Value Set for code
     */
    codeExtensibleValueSet() {
        return MeasurePopulationValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["_count"]) {
            results.push(...this._count.doModelValidation());
        }
        if (this["subjectResults"]) {
            results.push(...this.subjectResults.doModelValidation());
        }
        return results;
    }
}
/**
 * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
 */
export class MeasureReportGroupStratifierStratum extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureReportGroupStratifierStratum - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['value']) {
            this.value = new fhir.CodeableConcept(source.value);
        }
        if (source['component']) {
            this.component = source.component.map((x) => new fhir.MeasureReportGroupStratifierStratumComponent(x));
        }
        if (source['population']) {
            this.population = source.population.map((x) => new fhir.MeasureReportGroupStratifierStratumPopulation(x));
        }
        if (source['measureScore']) {
            this.measureScore = new fhir.Quantity(source.measureScore);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["value"]) {
            results.push(...this.value.doModelValidation());
        }
        if (this["component"]) {
            this.component.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["population"]) {
            this.population.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["measureScore"]) {
            results.push(...this.measureScore.doModelValidation());
        }
        return results;
    }
}
/**
 * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
 */
export class MeasureReportGroupStratifier extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureReportGroupStratifier - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['stratum']) {
            this.stratum = source.stratum.map((x) => new fhir.MeasureReportGroupStratifierStratum(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["code"]) {
            this.code.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["stratum"]) {
            this.stratum.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * The results of the calculation, one for each population group in the measure.
 */
export class MeasureReportGroup extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureReportGroup - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['population']) {
            this.population = source.population.map((x) => new fhir.MeasureReportGroupPopulation(x));
        }
        if (source['measureScore']) {
            this.measureScore = new fhir.Quantity(source.measureScore);
        }
        if (source['stratifier']) {
            this.stratifier = source.stratifier.map((x) => new fhir.MeasureReportGroupStratifier(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["population"]) {
            this.population.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["measureScore"]) {
            results.push(...this.measureScore.doModelValidation());
        }
        if (this["stratifier"]) {
            this.stratifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.
 */
export class MeasureReport extends fhir.DomainResource {
    /**
     * Default constructor for MeasureReport - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'MeasureReport';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source['measure']) {
            this.measure = source.measure;
        }
        else {
            this.measure = null;
        }
        if (source['_measure']) {
            this._measure = new fhir.FhirElement(source._measure);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['date']) {
            this.date = source.date;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['reporter']) {
            this.reporter = new fhir.Reference(source.reporter);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        else {
            this.period = null;
        }
        if (source['improvementNotation']) {
            this.improvementNotation = new fhir.CodeableConcept(source.improvementNotation);
        }
        if (source['group']) {
            this.group = source.group.map((x) => new fhir.MeasureReportGroup(x));
        }
        if (source['evaluatedResource']) {
            this.evaluatedResource = source.evaluatedResource.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return MeasureReportStatusValueSet;
    }
    /**
     * Required-bound Value Set for type
     */
    typeRequiredValueSet() {
        return MeasureReportTypeValueSet;
    }
    /**
     * Required-bound Value Set for improvementNotation
     */
    improvementNotationRequiredValueSet() {
        return MeasureImprovementNotationValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: MeasureReport.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: MeasureReport.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (!this["type"]) {
            results.push(["type", 'Missing required element: MeasureReport.type']);
        }
        if (this["_type"]) {
            results.push(...this._type.doModelValidation());
        }
        if (!this["measure"]) {
            results.push(["measure", 'Missing required element: MeasureReport.measure']);
        }
        if (this["_measure"]) {
            results.push(...this._measure.doModelValidation());
        }
        if (this["subject"]) {
            results.push(...this.subject.doModelValidation());
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["reporter"]) {
            results.push(...this.reporter.doModelValidation());
        }
        if (!this["period"]) {
            results.push(["period", 'Missing required element: MeasureReport.period']);
        }
        if (this["period"]) {
            results.push(...this.period.doModelValidation());
        }
        if (this["improvementNotation"]) {
            results.push(...this.improvementNotation.doModelValidation());
        }
        if (this["group"]) {
            this.group.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["evaluatedResource"]) {
            this.evaluatedResource.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=MeasureReport.js.map