// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Used for example, to point to a substance, or to a device used to administer a medication.
 */
export class CatalogEntryRelatedEntry extends fhir.BackboneElement {
    /**
     * Default constructor for CatalogEntryRelatedEntry - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.item = null;
        if (source["item"]) {
            this.item = new fhir.Reference(source.item);
        }
        if (this.item === undefined) {
            this.item = null;
        }
        this.relationtype = null;
        if (source["relationtype"]) {
            this.relationtype = source.relationtype;
        }
        if (this.relationtype === undefined) {
            this.relationtype = null;
        }
        if (source["_relationtype"]) {
            this._relationtype = new fhir.FhirElement(source._relationtype);
        }
    }
    /**
     * Check if the current CatalogEntryRelatedEntry contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["item"] === undefined) {
            missingElements.push("item");
        }
        if (this["relationtype"] === undefined) {
            missingElements.push("relationtype");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a CatalogEntryRelatedEntry from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new CatalogEntryRelatedEntry(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `CatalogEntryRelatedEntry is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Catalog entries are wrappers that contextualize items included in a catalog.
 */
export class CatalogEntry extends fhir.DomainResource {
    /**
     * Default constructor for CatalogEntry - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'CatalogEntry';
        if (source["additionalCharacteristic"]) {
            this.additionalCharacteristic = source.additionalCharacteristic.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["additionalClassification"]) {
            this.additionalClassification = source.additionalClassification.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["additionalIdentifier"]) {
            this.additionalIdentifier = source.additionalIdentifier.map((x) => new fhir.Identifier(x));
        }
        if (source["classification"]) {
            this.classification = source.classification.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["lastUpdated"]) {
            this.lastUpdated = source.lastUpdated;
        }
        if (source["_lastUpdated"]) {
            this._lastUpdated = new fhir.FhirElement(source._lastUpdated);
        }
        this.orderable = null;
        if (source["orderable"]) {
            this.orderable = source.orderable;
        }
        if (this.orderable === undefined) {
            this.orderable = null;
        }
        if (source["_orderable"]) {
            this._orderable = new fhir.FhirElement(source._orderable);
        }
        this.referencedItem = null;
        if (source["referencedItem"]) {
            this.referencedItem = new fhir.Reference(source.referencedItem);
        }
        if (this.referencedItem === undefined) {
            this.referencedItem = null;
        }
        if (source["relatedEntry"]) {
            this.relatedEntry = source.relatedEntry.map((x) => new fhir.CatalogEntryRelatedEntry(x));
        }
        if (source["status"]) {
            this.status = source.status;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source["validityPeriod"]) {
            this.validityPeriod = new fhir.Period(source.validityPeriod);
        }
        if (source["validTo"]) {
            this.validTo = source.validTo;
        }
        if (source["_validTo"]) {
            this._validTo = new fhir.FhirElement(source._validTo);
        }
    }
    /**
     * Check if the current CatalogEntry contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["orderable"] === undefined) {
            missingElements.push("orderable");
        }
        if (this["referencedItem"] === undefined) {
            missingElements.push("referencedItem");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a CatalogEntry from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new CatalogEntry(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `CatalogEntry is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the CatalogEntry.relatedEntry.relationtype field
 */
export var CatalogEntryRelatedEntryRelationtypeEnum;
(function (CatalogEntryRelatedEntryRelationtypeEnum) {
    CatalogEntryRelatedEntryRelationtypeEnum["TRIGGERS"] = "triggers";
    CatalogEntryRelatedEntryRelationtypeEnum["IS_REPLACED_BY"] = "is-replaced-by";
})(CatalogEntryRelatedEntryRelationtypeEnum || (CatalogEntryRelatedEntryRelationtypeEnum = {}));
/**
 * Code Values for the CatalogEntry.status field
 */
export var CatalogEntryStatusEnum;
(function (CatalogEntryStatusEnum) {
    CatalogEntryStatusEnum["DRAFT"] = "draft";
    CatalogEntryStatusEnum["ACTIVE"] = "active";
    CatalogEntryStatusEnum["RETIRED"] = "retired";
    CatalogEntryStatusEnum["UNKNOWN"] = "unknown";
})(CatalogEntryStatusEnum || (CatalogEntryStatusEnum = {}));
//# sourceMappingURL=CatalogEntry.js.map