// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: CatalogEntry
import * as fhir from '../fhir.js';
import { RelationTypeValueSet, } from '../fhirValueSets/RelationTypeValueSet.js';
import { PublicationStatusValueSet, } from '../fhirValueSets/PublicationStatusValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Used for example, to point to a substance, or to a device used to administer a medication.
 */
export class CatalogEntryRelatedEntry extends fhir.BackboneElement {
    /**
     * Default constructor for CatalogEntryRelatedEntry - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'CatalogEntryRelatedEntry';
        if (source['relationtype']) {
            this.relationtype = source.relationtype;
        }
        else {
            this.relationtype = null;
        }
        if (source['item']) {
            this.item = new fhir.Reference(source.item);
        }
        else {
            this.item = null;
        }
    }
    /**
     * Required-bound Value Set for relationtype
     */
    static relationtypeRequiredValueSet() {
        return RelationTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['relationtype']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property relationtype:RelationTypeValueSetEnum fhir: CatalogEntry.relatedEntry.relationtype:code", }));
        }
        if (!this['item']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property item:fhir.Reference fhir: CatalogEntry.relatedEntry.item:Reference", }));
        }
        if (this["item"]) {
            outcome.issue.push(...this.item.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Catalog entries are wrappers that contextualize items included in a catalog.
 */
export class CatalogEntry extends fhir.DomainResource {
    /**
     * Default constructor for CatalogEntry - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'CatalogEntry';
        /**
         * Used in supporting different identifiers for the same product, e.g. manufacturer code and retailer code.
         */
        this.identifier = [];
        /**
         * Used in supporting related concepts, e.g. NDC to RxNorm.
         */
        this.additionalIdentifier = [];
        /**
         * Classes of devices, or ATC for medication.
         */
        this.classification = [];
        /**
         * Used for examplefor Out of Formulary, or any specifics.
         */
        this.additionalCharacteristic = [];
        /**
         * User for example for ATC classification, or.
         */
        this.additionalClassification = [];
        /**
         * Used for example, to point to a substance, or to a device used to administer a medication.
         */
        this.relatedEntry = [];
        this.resourceType = 'CatalogEntry';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['orderable']) {
            this.orderable = new fhir.FhirBoolean({ value: source.orderable });
        }
        else {
            this.orderable = null;
        }
        if (source['referencedItem']) {
            this.referencedItem = new fhir.Reference(source.referencedItem);
        }
        else {
            this.referencedItem = null;
        }
        if (source['additionalIdentifier']) {
            this.additionalIdentifier = source.additionalIdentifier.map((x) => new fhir.Identifier(x));
        }
        if (source['classification']) {
            this.classification = source.classification.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        if (source['validityPeriod']) {
            this.validityPeriod = new fhir.Period(source.validityPeriod);
        }
        if (source['validTo']) {
            this.validTo = new fhir.FhirDateTime({ value: source.validTo });
        }
        if (source['lastUpdated']) {
            this.lastUpdated = new fhir.FhirDateTime({ value: source.lastUpdated });
        }
        if (source['additionalCharacteristic']) {
            this.additionalCharacteristic = source.additionalCharacteristic.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['additionalClassification']) {
            this.additionalClassification = source.additionalClassification.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['relatedEntry']) {
            this.relatedEntry = source.relatedEntry.map((x) => new fhir.CatalogEntryRelatedEntry(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return PublicationStatusValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'CatalogEntry' fhir: CatalogEntry.resourceType:'CatalogEntry'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (!this['orderable']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property orderable:fhir.FhirBoolean fhir: CatalogEntry.orderable:boolean", }));
        }
        if (this["orderable"]) {
            outcome.issue.push(...this.orderable.doModelValidation().issue);
        }
        if (!this['referencedItem']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property referencedItem:fhir.Reference fhir: CatalogEntry.referencedItem:Reference", }));
        }
        if (this["referencedItem"]) {
            outcome.issue.push(...this.referencedItem.doModelValidation().issue);
        }
        if (this["additionalIdentifier"]) {
            this.additionalIdentifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["classification"]) {
            this.classification.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["validityPeriod"]) {
            outcome.issue.push(...this.validityPeriod.doModelValidation().issue);
        }
        if (this["validTo"]) {
            outcome.issue.push(...this.validTo.doModelValidation().issue);
        }
        if (this["lastUpdated"]) {
            outcome.issue.push(...this.lastUpdated.doModelValidation().issue);
        }
        if (this["additionalCharacteristic"]) {
            this.additionalCharacteristic.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["additionalClassification"]) {
            this.additionalClassification.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["relatedEntry"]) {
            this.relatedEntry.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=CatalogEntry.js.map