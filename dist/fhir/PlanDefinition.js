// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Indicates what should be done and within what timeframe.
 */
export class PlanDefinitionGoalTarget extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionGoalTarget - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["detailQuantity"]) {
            this.detailQuantity = new fhir.Quantity(source.detailQuantity);
        }
        if (source["detailRange"]) {
            this.detailRange = new fhir.Range(source.detailRange);
        }
        if (source["detailCodeableConcept"]) {
            this.detailCodeableConcept = new fhir.CodeableConcept(source.detailCodeableConcept);
        }
        if (source["due"]) {
            this.due = new fhir.Duration(source.due);
        }
        if (source["measure"]) {
            this.measure = new fhir.CodeableConcept(source.measure);
        }
    }
    /**
     * Check if the current PlanDefinitionGoalTarget contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a PlanDefinitionGoalTarget from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new PlanDefinitionGoalTarget(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `PlanDefinitionGoalTarget is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Goals that describe what the activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
 */
export class PlanDefinitionGoal extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionGoal - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["addresses"]) {
            this.addresses = source.addresses.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["category"]) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        this.description = null;
        if (source["description"]) {
            this.description = new fhir.CodeableConcept(source.description);
        }
        if (this.description === undefined) {
            this.description = null;
        }
        if (source["documentation"]) {
            this.documentation = source.documentation.map((x) => new fhir.RelatedArtifact(x));
        }
        if (source["priority"]) {
            this.priority = new fhir.CodeableConcept(source.priority);
        }
        if (source["start"]) {
            this.start = new fhir.CodeableConcept(source.start);
        }
        if (source["target"]) {
            this.target = source.target.map((x) => new fhir.PlanDefinitionGoalTarget(x));
        }
    }
    /**
     * Check if the current PlanDefinitionGoal contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["description"] === undefined) {
            missingElements.push("description");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a PlanDefinitionGoal from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new PlanDefinitionGoal(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `PlanDefinitionGoal is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all the conditions are true.
 */
export class PlanDefinitionActionCondition extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionActionCondition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["expression"]) {
            this.expression = new fhir.Expression(source.expression);
        }
        this.kind = null;
        if (source["kind"]) {
            this.kind = source.kind;
        }
        if (this.kind === undefined) {
            this.kind = null;
        }
        if (source["_kind"]) {
            this._kind = new fhir.FhirElement(source._kind);
        }
    }
    /**
     * Check if the current PlanDefinitionActionCondition contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["kind"] === undefined) {
            missingElements.push("kind");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a PlanDefinitionActionCondition from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new PlanDefinitionActionCondition(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `PlanDefinitionActionCondition is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * When an action depends on multiple actions, the meaning is that all actions are dependencies, rather than that any of the actions are a dependency.
 */
export class PlanDefinitionActionRelatedAction extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionActionRelatedAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.actionId = null;
        if (source["actionId"]) {
            this.actionId = source.actionId;
        }
        if (this.actionId === undefined) {
            this.actionId = null;
        }
        if (source["_actionId"]) {
            this._actionId = new fhir.FhirElement(source._actionId);
        }
        if (source["offsetDuration"]) {
            this.offsetDuration = new fhir.Duration(source.offsetDuration);
        }
        if (source["offsetRange"]) {
            this.offsetRange = new fhir.Range(source.offsetRange);
        }
        this.relationship = null;
        if (source["relationship"]) {
            this.relationship = source.relationship;
        }
        if (this.relationship === undefined) {
            this.relationship = null;
        }
        if (source["_relationship"]) {
            this._relationship = new fhir.FhirElement(source._relationship);
        }
    }
    /**
     * Check if the current PlanDefinitionActionRelatedAction contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["actionId"] === undefined) {
            missingElements.push("actionId");
        }
        if (this["relationship"] === undefined) {
            missingElements.push("relationship");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a PlanDefinitionActionRelatedAction from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new PlanDefinitionActionRelatedAction(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `PlanDefinitionActionRelatedAction is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Indicates who should participate in performing the action described.
 */
export class PlanDefinitionActionParticipant extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionActionParticipant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["role"]) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        this.type = null;
        if (source["type"]) {
            this.type = source.type;
        }
        if (this.type === undefined) {
            this.type = null;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
    }
    /**
     * Check if the current PlanDefinitionActionParticipant contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a PlanDefinitionActionParticipant from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new PlanDefinitionActionParticipant(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `PlanDefinitionActionParticipant is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Dynamic values are applied in the order in which they are defined in the PlanDefinition resource. Note that when dynamic values are also specified by a referenced ActivityDefinition, the dynamicValues from the ActivityDefinition are applied first, followed by the dynamicValues specified here. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
 */
export class PlanDefinitionActionDynamicValue extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionActionDynamicValue - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["expression"]) {
            this.expression = new fhir.Expression(source.expression);
        }
        if (source["path"]) {
            this.path = source.path;
        }
        if (source["_path"]) {
            this._path = new fhir.FhirElement(source._path);
        }
    }
    /**
     * Check if the current PlanDefinitionActionDynamicValue contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a PlanDefinitionActionDynamicValue from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new PlanDefinitionActionDynamicValue(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `PlanDefinitionActionDynamicValue is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Note that there is overlap between many of the elements defined here and the ActivityDefinition resource. When an ActivityDefinition is referenced (using the definition element), the overlapping elements in the plan override the content of the referenced ActivityDefinition unless otherwise documented in the specific elements. See the PlanDefinition resource for more detailed information.
 */
export class PlanDefinitionAction extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["action"]) {
            this.action = source.action.map((x) => new fhir.PlanDefinitionAction(x));
        }
        if (source["cardinalityBehavior"]) {
            this.cardinalityBehavior = source.cardinalityBehavior;
        }
        if (source["_cardinalityBehavior"]) {
            this._cardinalityBehavior = new fhir.FhirElement(source._cardinalityBehavior);
        }
        if (source["code"]) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["condition"]) {
            this.condition = source.condition.map((x) => new fhir.PlanDefinitionActionCondition(x));
        }
        if (source["definitionCanonical"]) {
            this.definitionCanonical = source.definitionCanonical;
        }
        if (source["_definitionCanonical"]) {
            this._definitionCanonical = new fhir.FhirElement(source._definitionCanonical);
        }
        if (source["definitionUri"]) {
            this.definitionUri = source.definitionUri;
        }
        if (source["_definitionUri"]) {
            this._definitionUri = new fhir.FhirElement(source._definitionUri);
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["documentation"]) {
            this.documentation = source.documentation.map((x) => new fhir.RelatedArtifact(x));
        }
        if (source["dynamicValue"]) {
            this.dynamicValue = source.dynamicValue.map((x) => new fhir.PlanDefinitionActionDynamicValue(x));
        }
        if (source["goalId"]) {
            this.goalId = source.goalId.map((x) => (x));
        }
        if (source["_goalId"]) {
            this._goalId = source._goalId.map((x) => new fhir.FhirElement(x));
        }
        if (source["groupingBehavior"]) {
            this.groupingBehavior = source.groupingBehavior;
        }
        if (source["_groupingBehavior"]) {
            this._groupingBehavior = new fhir.FhirElement(source._groupingBehavior);
        }
        if (source["input"]) {
            this.input = source.input.map((x) => new fhir.DataRequirement(x));
        }
        if (source["output"]) {
            this.output = source.output.map((x) => new fhir.DataRequirement(x));
        }
        if (source["participant"]) {
            this.participant = source.participant.map((x) => new fhir.PlanDefinitionActionParticipant(x));
        }
        if (source["precheckBehavior"]) {
            this.precheckBehavior = source.precheckBehavior;
        }
        if (source["_precheckBehavior"]) {
            this._precheckBehavior = new fhir.FhirElement(source._precheckBehavior);
        }
        if (source["prefix"]) {
            this.prefix = source.prefix;
        }
        if (source["_prefix"]) {
            this._prefix = new fhir.FhirElement(source._prefix);
        }
        if (source["priority"]) {
            this.priority = source.priority;
        }
        if (source["_priority"]) {
            this._priority = new fhir.FhirElement(source._priority);
        }
        if (source["reason"]) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["relatedAction"]) {
            this.relatedAction = source.relatedAction.map((x) => new fhir.PlanDefinitionActionRelatedAction(x));
        }
        if (source["requiredBehavior"]) {
            this.requiredBehavior = source.requiredBehavior;
        }
        if (source["_requiredBehavior"]) {
            this._requiredBehavior = new fhir.FhirElement(source._requiredBehavior);
        }
        if (source["selectionBehavior"]) {
            this.selectionBehavior = source.selectionBehavior;
        }
        if (source["_selectionBehavior"]) {
            this._selectionBehavior = new fhir.FhirElement(source._selectionBehavior);
        }
        if (source["subjectCodeableConcept"]) {
            this.subjectCodeableConcept = new fhir.CodeableConcept(source.subjectCodeableConcept);
        }
        if (source["subjectReference"]) {
            this.subjectReference = new fhir.Reference(source.subjectReference);
        }
        if (source["textEquivalent"]) {
            this.textEquivalent = source.textEquivalent;
        }
        if (source["_textEquivalent"]) {
            this._textEquivalent = new fhir.FhirElement(source._textEquivalent);
        }
        if (source["timingDateTime"]) {
            this.timingDateTime = source.timingDateTime;
        }
        if (source["_timingDateTime"]) {
            this._timingDateTime = new fhir.FhirElement(source._timingDateTime);
        }
        if (source["timingAge"]) {
            this.timingAge = new fhir.Age(source.timingAge);
        }
        if (source["timingPeriod"]) {
            this.timingPeriod = new fhir.Period(source.timingPeriod);
        }
        if (source["timingDuration"]) {
            this.timingDuration = new fhir.Duration(source.timingDuration);
        }
        if (source["timingRange"]) {
            this.timingRange = new fhir.Range(source.timingRange);
        }
        if (source["timingTiming"]) {
            this.timingTiming = new fhir.Timing(source.timingTiming);
        }
        if (source["title"]) {
            this.title = source.title;
        }
        if (source["_title"]) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source["transform"]) {
            this.transform = source.transform;
        }
        if (source["_transform"]) {
            this._transform = new fhir.FhirElement(source._transform);
        }
        if (source["trigger"]) {
            this.trigger = source.trigger.map((x) => new fhir.TriggerDefinition(x));
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current PlanDefinitionAction contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a PlanDefinitionAction from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new PlanDefinitionAction(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `PlanDefinitionAction is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.
 */
export class PlanDefinition extends fhir.DomainResource {
    /**
     * Default constructor for PlanDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'PlanDefinition';
        if (source["action"]) {
            this.action = source.action.map((x) => new fhir.PlanDefinitionAction(x));
        }
        if (source["approvalDate"]) {
            this.approvalDate = source.approvalDate;
        }
        if (source["_approvalDate"]) {
            this._approvalDate = new fhir.FhirElement(source._approvalDate);
        }
        if (source["author"]) {
            this.author = source.author.map((x) => new fhir.ContactDetail(x));
        }
        if (source["contact"]) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source["copyright"]) {
            this.copyright = source.copyright;
        }
        if (source["_copyright"]) {
            this._copyright = new fhir.FhirElement(source._copyright);
        }
        if (source["date"]) {
            this.date = source.date;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["editor"]) {
            this.editor = source.editor.map((x) => new fhir.ContactDetail(x));
        }
        if (source["effectivePeriod"]) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source["endorser"]) {
            this.endorser = source.endorser.map((x) => new fhir.ContactDetail(x));
        }
        if (source["experimental"]) {
            this.experimental = source.experimental;
        }
        if (source["_experimental"]) {
            this._experimental = new fhir.FhirElement(source._experimental);
        }
        if (source["goal"]) {
            this.goal = source.goal.map((x) => new fhir.PlanDefinitionGoal(x));
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["jurisdiction"]) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["lastReviewDate"]) {
            this.lastReviewDate = source.lastReviewDate;
        }
        if (source["_lastReviewDate"]) {
            this._lastReviewDate = new fhir.FhirElement(source._lastReviewDate);
        }
        if (source["library"]) {
            this.library = source.library.map((x) => (x));
        }
        if (source["_library"]) {
            this._library = source._library.map((x) => new fhir.FhirElement(x));
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["publisher"]) {
            this.publisher = source.publisher;
        }
        if (source["_publisher"]) {
            this._publisher = new fhir.FhirElement(source._publisher);
        }
        if (source["purpose"]) {
            this.purpose = source.purpose;
        }
        if (source["_purpose"]) {
            this._purpose = new fhir.FhirElement(source._purpose);
        }
        if (source["relatedArtifact"]) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x));
        }
        if (source["reviewer"]) {
            this.reviewer = source.reviewer.map((x) => new fhir.ContactDetail(x));
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["subjectCodeableConcept"]) {
            this.subjectCodeableConcept = new fhir.CodeableConcept(source.subjectCodeableConcept);
        }
        if (source["subjectReference"]) {
            this.subjectReference = new fhir.Reference(source.subjectReference);
        }
        if (source["subtitle"]) {
            this.subtitle = source.subtitle;
        }
        if (source["_subtitle"]) {
            this._subtitle = new fhir.FhirElement(source._subtitle);
        }
        if (source["title"]) {
            this.title = source.title;
        }
        if (source["_title"]) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source["topic"]) {
            this.topic = source.topic.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source["url"]) {
            this.url = source.url;
        }
        if (source["_url"]) {
            this._url = new fhir.FhirElement(source._url);
        }
        if (source["usage"]) {
            this.usage = source.usage;
        }
        if (source["_usage"]) {
            this._usage = new fhir.FhirElement(source._usage);
        }
        if (source["useContext"]) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source["version"]) {
            this.version = source.version;
        }
        if (source["_version"]) {
            this._version = new fhir.FhirElement(source._version);
        }
    }
    /**
     * Check if the current PlanDefinition contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a PlanDefinition from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new PlanDefinition(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `PlanDefinition is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the PlanDefinition.action.condition.kind field
 */
export var PlanDefinitionActionConditionKindEnum;
(function (PlanDefinitionActionConditionKindEnum) {
    PlanDefinitionActionConditionKindEnum["APPLICABILITY"] = "applicability";
    PlanDefinitionActionConditionKindEnum["START"] = "start";
    PlanDefinitionActionConditionKindEnum["STOP"] = "stop";
})(PlanDefinitionActionConditionKindEnum || (PlanDefinitionActionConditionKindEnum = {}));
/**
 * Code Values for the PlanDefinition.action.relatedAction.relationship field
 */
export var PlanDefinitionActionRelatedActionRelationshipEnum;
(function (PlanDefinitionActionRelatedActionRelationshipEnum) {
    PlanDefinitionActionRelatedActionRelationshipEnum["BEFORE_START"] = "before-start";
    PlanDefinitionActionRelatedActionRelationshipEnum["BEFORE"] = "before";
    PlanDefinitionActionRelatedActionRelationshipEnum["BEFORE_END"] = "before-end";
    PlanDefinitionActionRelatedActionRelationshipEnum["CONCURRENT_WITH_START"] = "concurrent-with-start";
    PlanDefinitionActionRelatedActionRelationshipEnum["CONCURRENT"] = "concurrent";
    PlanDefinitionActionRelatedActionRelationshipEnum["CONCURRENT_WITH_END"] = "concurrent-with-end";
    PlanDefinitionActionRelatedActionRelationshipEnum["AFTER_START"] = "after-start";
    PlanDefinitionActionRelatedActionRelationshipEnum["AFTER"] = "after";
    PlanDefinitionActionRelatedActionRelationshipEnum["AFTER_END"] = "after-end";
})(PlanDefinitionActionRelatedActionRelationshipEnum || (PlanDefinitionActionRelatedActionRelationshipEnum = {}));
/**
 * Code Values for the PlanDefinition.action.participant.type field
 */
export var PlanDefinitionActionParticipantTypeEnum;
(function (PlanDefinitionActionParticipantTypeEnum) {
    PlanDefinitionActionParticipantTypeEnum["PATIENT"] = "patient";
    PlanDefinitionActionParticipantTypeEnum["PRACTITIONER"] = "practitioner";
    PlanDefinitionActionParticipantTypeEnum["RELATED_PERSON"] = "related-person";
    PlanDefinitionActionParticipantTypeEnum["DEVICE"] = "device";
})(PlanDefinitionActionParticipantTypeEnum || (PlanDefinitionActionParticipantTypeEnum = {}));
/**
 * Code Values for the PlanDefinition.action.cardinalityBehavior field
 */
export var PlanDefinitionActionCardinalityBehaviorEnum;
(function (PlanDefinitionActionCardinalityBehaviorEnum) {
    PlanDefinitionActionCardinalityBehaviorEnum["SINGLE"] = "single";
    PlanDefinitionActionCardinalityBehaviorEnum["MULTIPLE"] = "multiple";
})(PlanDefinitionActionCardinalityBehaviorEnum || (PlanDefinitionActionCardinalityBehaviorEnum = {}));
/**
 * Code Values for the PlanDefinition.action.groupingBehavior field
 */
export var PlanDefinitionActionGroupingBehaviorEnum;
(function (PlanDefinitionActionGroupingBehaviorEnum) {
    PlanDefinitionActionGroupingBehaviorEnum["VISUAL_GROUP"] = "visual-group";
    PlanDefinitionActionGroupingBehaviorEnum["LOGICAL_GROUP"] = "logical-group";
    PlanDefinitionActionGroupingBehaviorEnum["SENTENCE_GROUP"] = "sentence-group";
})(PlanDefinitionActionGroupingBehaviorEnum || (PlanDefinitionActionGroupingBehaviorEnum = {}));
/**
 * Code Values for the PlanDefinition.action.precheckBehavior field
 */
export var PlanDefinitionActionPrecheckBehaviorEnum;
(function (PlanDefinitionActionPrecheckBehaviorEnum) {
    PlanDefinitionActionPrecheckBehaviorEnum["YES"] = "yes";
    PlanDefinitionActionPrecheckBehaviorEnum["NO"] = "no";
})(PlanDefinitionActionPrecheckBehaviorEnum || (PlanDefinitionActionPrecheckBehaviorEnum = {}));
/**
 * Code Values for the PlanDefinition.action.priority field
 */
export var PlanDefinitionActionPriorityEnum;
(function (PlanDefinitionActionPriorityEnum) {
    PlanDefinitionActionPriorityEnum["ROUTINE"] = "routine";
    PlanDefinitionActionPriorityEnum["URGENT"] = "urgent";
    PlanDefinitionActionPriorityEnum["ASAP"] = "asap";
    PlanDefinitionActionPriorityEnum["STAT"] = "stat";
})(PlanDefinitionActionPriorityEnum || (PlanDefinitionActionPriorityEnum = {}));
/**
 * Code Values for the PlanDefinition.action.requiredBehavior field
 */
export var PlanDefinitionActionRequiredBehaviorEnum;
(function (PlanDefinitionActionRequiredBehaviorEnum) {
    PlanDefinitionActionRequiredBehaviorEnum["MUST"] = "must";
    PlanDefinitionActionRequiredBehaviorEnum["COULD"] = "could";
    PlanDefinitionActionRequiredBehaviorEnum["MUST_UNLESS_DOCUMENTED"] = "must-unless-documented";
})(PlanDefinitionActionRequiredBehaviorEnum || (PlanDefinitionActionRequiredBehaviorEnum = {}));
/**
 * Code Values for the PlanDefinition.action.selectionBehavior field
 */
export var PlanDefinitionActionSelectionBehaviorEnum;
(function (PlanDefinitionActionSelectionBehaviorEnum) {
    PlanDefinitionActionSelectionBehaviorEnum["ANY"] = "any";
    PlanDefinitionActionSelectionBehaviorEnum["ALL"] = "all";
    PlanDefinitionActionSelectionBehaviorEnum["ALL_OR_NONE"] = "all-or-none";
    PlanDefinitionActionSelectionBehaviorEnum["EXACTLY_ONE"] = "exactly-one";
    PlanDefinitionActionSelectionBehaviorEnum["AT_MOST_ONE"] = "at-most-one";
    PlanDefinitionActionSelectionBehaviorEnum["ONE_OR_MORE"] = "one-or-more";
})(PlanDefinitionActionSelectionBehaviorEnum || (PlanDefinitionActionSelectionBehaviorEnum = {}));
/**
 * Code Values for the PlanDefinition.status field
 */
export var PlanDefinitionStatusEnum;
(function (PlanDefinitionStatusEnum) {
    PlanDefinitionStatusEnum["DRAFT"] = "draft";
    PlanDefinitionStatusEnum["ACTIVE"] = "active";
    PlanDefinitionStatusEnum["RETIRED"] = "retired";
    PlanDefinitionStatusEnum["UNKNOWN"] = "unknown";
})(PlanDefinitionStatusEnum || (PlanDefinitionStatusEnum = {}));
//# sourceMappingURL=PlanDefinition.js.map