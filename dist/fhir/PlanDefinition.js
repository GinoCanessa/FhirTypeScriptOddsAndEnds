// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: PlanDefinition
import * as fhir from '../fhir.js';
import { ObservationCodesValueSet } from '../fhirValueSets/ObservationCodesValueSet.js';
import { GoalCategoryValueSet } from '../fhirValueSets/GoalCategoryValueSet.js';
import { ClinicalFindingsValueSet } from '../fhirValueSets/ClinicalFindingsValueSet.js';
import { GoalPriorityValueSet } from '../fhirValueSets/GoalPriorityValueSet.js';
import { GoalStartEventValueSet } from '../fhirValueSets/GoalStartEventValueSet.js';
import { ConditionCodeValueSet } from '../fhirValueSets/ConditionCodeValueSet.js';
import { ActionConditionKindValueSet } from '../fhirValueSets/ActionConditionKindValueSet.js';
import { ActionRelationshipTypeValueSet } from '../fhirValueSets/ActionRelationshipTypeValueSet.js';
import { ActionParticipantTypeValueSet } from '../fhirValueSets/ActionParticipantTypeValueSet.js';
import { RequestPriorityValueSet } from '../fhirValueSets/RequestPriorityValueSet.js';
import { SubjectTypeValueSet } from '../fhirValueSets/SubjectTypeValueSet.js';
import { ActionTypeValueSet } from '../fhirValueSets/ActionTypeValueSet.js';
import { ActionGroupingBehaviorValueSet } from '../fhirValueSets/ActionGroupingBehaviorValueSet.js';
import { ActionSelectionBehaviorValueSet } from '../fhirValueSets/ActionSelectionBehaviorValueSet.js';
import { ActionRequiredBehaviorValueSet } from '../fhirValueSets/ActionRequiredBehaviorValueSet.js';
import { ActionPrecheckBehaviorValueSet } from '../fhirValueSets/ActionPrecheckBehaviorValueSet.js';
import { ActionCardinalityBehaviorValueSet } from '../fhirValueSets/ActionCardinalityBehaviorValueSet.js';
import { PlanDefinitionTypeValueSet } from '../fhirValueSets/PlanDefinitionTypeValueSet.js';
import { PublicationStatusValueSet } from '../fhirValueSets/PublicationStatusValueSet.js';
import { DefinitionTopicValueSet } from '../fhirValueSets/DefinitionTopicValueSet.js';
/**
 * Indicates what should be done and within what timeframe.
 */
export class PlanDefinitionGoalTarget extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionGoalTarget - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['measure']) {
            this.measure = new fhir.CodeableConcept(source.measure);
        }
        if (source['detailQuantity']) {
            this.detailQuantity = new fhir.Quantity(source.detailQuantity);
        }
        if (source['detailRange']) {
            this.detailRange = new fhir.Range(source.detailRange);
        }
        if (source['detailCodeableConcept']) {
            this.detailCodeableConcept = new fhir.CodeableConcept(source.detailCodeableConcept);
        }
        if (source['due']) {
            this.due = new fhir.Duration(source.due);
        }
    }
    /**
     * Example-bound Value Set for measure
     */
    static measureExampleValueSet() {
        return ObservationCodesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["measure"]) {
            results.push(...this.measure.doModelValidation());
        }
        if (this["detailQuantity"]) {
            results.push(...this.detailQuantity.doModelValidation());
        }
        if (this["detailRange"]) {
            results.push(...this.detailRange.doModelValidation());
        }
        if (this["detailCodeableConcept"]) {
            results.push(...this.detailCodeableConcept.doModelValidation());
        }
        if (this["due"]) {
            results.push(...this.due.doModelValidation());
        }
        return results;
    }
}
/**
 * Goals that describe what the activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
 */
export class PlanDefinitionGoal extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionGoal - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['description']) {
            this.description = new fhir.CodeableConcept(source.description);
        }
        else {
            this.description = null;
        }
        if (source['priority']) {
            this.priority = new fhir.CodeableConcept(source.priority);
        }
        if (source['start']) {
            this.start = new fhir.CodeableConcept(source.start);
        }
        if (source['addresses']) {
            this.addresses = source.addresses.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['documentation']) {
            this.documentation = source.documentation.map((x) => new fhir.RelatedArtifact(x));
        }
        if (source['target']) {
            this.target = source.target.map((x) => new fhir.PlanDefinitionGoalTarget(x));
        }
    }
    /**
     * Example-bound Value Set for category
     */
    static categoryExampleValueSet() {
        return GoalCategoryValueSet;
    }
    /**
     * Example-bound Value Set for description
     */
    static descriptionExampleValueSet() {
        return ClinicalFindingsValueSet;
    }
    /**
     * Preferred-bound Value Set for priority
     */
    static priorityPreferredValueSet() {
        return GoalPriorityValueSet;
    }
    /**
     * Example-bound Value Set for start
     */
    static startExampleValueSet() {
        return GoalStartEventValueSet;
    }
    /**
     * Example-bound Value Set for addresses
     */
    static addressesExampleValueSet() {
        return ConditionCodeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["category"]) {
            results.push(...this.category.doModelValidation());
        }
        if (!this["description"]) {
            results.push(["description", 'Missing required element: PlanDefinition.goal.description']);
        }
        if (this["description"]) {
            results.push(...this.description.doModelValidation());
        }
        if (this["priority"]) {
            results.push(...this.priority.doModelValidation());
        }
        if (this["start"]) {
            results.push(...this.start.doModelValidation());
        }
        if (this["addresses"]) {
            this.addresses.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["documentation"]) {
            this.documentation.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["target"]) {
            this.target.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all the conditions are true.
 */
export class PlanDefinitionActionCondition extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionActionCondition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['kind']) {
            this.kind = source.kind;
        }
        else {
            this.kind = null;
        }
        if (source['_kind']) {
            this._kind = new fhir.FhirElement(source._kind);
        }
        if (source['expression']) {
            this.expression = new fhir.Expression(source.expression);
        }
    }
    /**
     * Required-bound Value Set for kind
     */
    static kindRequiredValueSet() {
        return ActionConditionKindValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["kind"]) {
            results.push(["kind", 'Missing required element: PlanDefinition.action.condition.kind']);
        }
        if (this["_kind"]) {
            results.push(...this._kind.doModelValidation());
        }
        if (this["expression"]) {
            results.push(...this.expression.doModelValidation());
        }
        return results;
    }
}
/**
 * When an action depends on multiple actions, the meaning is that all actions are dependencies, rather than that any of the actions are a dependency.
 */
export class PlanDefinitionActionRelatedAction extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionActionRelatedAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['actionId']) {
            this.actionId = source.actionId;
        }
        else {
            this.actionId = null;
        }
        if (source['_actionId']) {
            this._actionId = new fhir.FhirElement(source._actionId);
        }
        if (source['relationship']) {
            this.relationship = source.relationship;
        }
        else {
            this.relationship = null;
        }
        if (source['_relationship']) {
            this._relationship = new fhir.FhirElement(source._relationship);
        }
        if (source['offsetDuration']) {
            this.offsetDuration = new fhir.Duration(source.offsetDuration);
        }
        if (source['offsetRange']) {
            this.offsetRange = new fhir.Range(source.offsetRange);
        }
    }
    /**
     * Required-bound Value Set for relationship
     */
    static relationshipRequiredValueSet() {
        return ActionRelationshipTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["actionId"]) {
            results.push(["actionId", 'Missing required element: PlanDefinition.action.relatedAction.actionId']);
        }
        if (this["_actionId"]) {
            results.push(...this._actionId.doModelValidation());
        }
        if (!this["relationship"]) {
            results.push(["relationship", 'Missing required element: PlanDefinition.action.relatedAction.relationship']);
        }
        if (this["_relationship"]) {
            results.push(...this._relationship.doModelValidation());
        }
        if (this["offsetDuration"]) {
            results.push(...this.offsetDuration.doModelValidation());
        }
        if (this["offsetRange"]) {
            results.push(...this.offsetRange.doModelValidation());
        }
        return results;
    }
}
/**
 * Indicates who should participate in performing the action described.
 */
export class PlanDefinitionActionParticipant extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionActionParticipant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
    }
    /**
     * Required-bound Value Set for type
     */
    static typeRequiredValueSet() {
        return ActionParticipantTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["type"]) {
            results.push(["type", 'Missing required element: PlanDefinition.action.participant.type']);
        }
        if (this["_type"]) {
            results.push(...this._type.doModelValidation());
        }
        if (this["role"]) {
            results.push(...this.role.doModelValidation());
        }
        return results;
    }
}
/**
 * Dynamic values are applied in the order in which they are defined in the PlanDefinition resource. Note that when dynamic values are also specified by a referenced ActivityDefinition, the dynamicValues from the ActivityDefinition are applied first, followed by the dynamicValues specified here. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
 */
export class PlanDefinitionActionDynamicValue extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionActionDynamicValue - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['path']) {
            this.path = source.path;
        }
        if (source['_path']) {
            this._path = new fhir.FhirElement(source._path);
        }
        if (source['expression']) {
            this.expression = new fhir.Expression(source.expression);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_path"]) {
            results.push(...this._path.doModelValidation());
        }
        if (this["expression"]) {
            results.push(...this.expression.doModelValidation());
        }
        return results;
    }
}
/**
 * Note that there is overlap between many of the elements defined here and the ActivityDefinition resource. When an ActivityDefinition is referenced (using the definition element), the overlapping elements in the plan override the content of the referenced ActivityDefinition unless otherwise documented in the specific elements. See the PlanDefinition resource for more detailed information.
 */
export class PlanDefinitionAction extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['prefix']) {
            this.prefix = source.prefix;
        }
        if (source['_prefix']) {
            this._prefix = new fhir.FhirElement(source._prefix);
        }
        if (source['title']) {
            this.title = source.title;
        }
        if (source['_title']) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['textEquivalent']) {
            this.textEquivalent = source.textEquivalent;
        }
        if (source['_textEquivalent']) {
            this._textEquivalent = new fhir.FhirElement(source._textEquivalent);
        }
        if (source['priority']) {
            this.priority = source.priority;
        }
        if (source['_priority']) {
            this._priority = new fhir.FhirElement(source._priority);
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['documentation']) {
            this.documentation = source.documentation.map((x) => new fhir.RelatedArtifact(x));
        }
        if (source['goalId']) {
            this.goalId = source.goalId.map((x) => (x));
        }
        if (source['_goalId']) {
            this._goalId = source._goalId.map((x) => new fhir.FhirElement(x));
        }
        if (source['subjectCodeableConcept']) {
            this.subjectCodeableConcept = new fhir.CodeableConcept(source.subjectCodeableConcept);
        }
        if (source['subjectReference']) {
            this.subjectReference = new fhir.Reference(source.subjectReference);
        }
        if (source['trigger']) {
            this.trigger = source.trigger.map((x) => new fhir.TriggerDefinition(x));
        }
        if (source['condition']) {
            this.condition = source.condition.map((x) => new fhir.PlanDefinitionActionCondition(x));
        }
        if (source['input']) {
            this.input = source.input.map((x) => new fhir.DataRequirement(x));
        }
        if (source['output']) {
            this.output = source.output.map((x) => new fhir.DataRequirement(x));
        }
        if (source['relatedAction']) {
            this.relatedAction = source.relatedAction.map((x) => new fhir.PlanDefinitionActionRelatedAction(x));
        }
        if (source['timingDateTime']) {
            this.timingDateTime = source.timingDateTime;
        }
        if (source['_timingDateTime']) {
            this._timingDateTime = new fhir.FhirElement(source._timingDateTime);
        }
        if (source['timingAge']) {
            this.timingAge = new fhir.Age(source.timingAge);
        }
        if (source['timingPeriod']) {
            this.timingPeriod = new fhir.Period(source.timingPeriod);
        }
        if (source['timingDuration']) {
            this.timingDuration = new fhir.Duration(source.timingDuration);
        }
        if (source['timingRange']) {
            this.timingRange = new fhir.Range(source.timingRange);
        }
        if (source['timingTiming']) {
            this.timingTiming = new fhir.Timing(source.timingTiming);
        }
        if (source['participant']) {
            this.participant = source.participant.map((x) => new fhir.PlanDefinitionActionParticipant(x));
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['groupingBehavior']) {
            this.groupingBehavior = source.groupingBehavior;
        }
        if (source['_groupingBehavior']) {
            this._groupingBehavior = new fhir.FhirElement(source._groupingBehavior);
        }
        if (source['selectionBehavior']) {
            this.selectionBehavior = source.selectionBehavior;
        }
        if (source['_selectionBehavior']) {
            this._selectionBehavior = new fhir.FhirElement(source._selectionBehavior);
        }
        if (source['requiredBehavior']) {
            this.requiredBehavior = source.requiredBehavior;
        }
        if (source['_requiredBehavior']) {
            this._requiredBehavior = new fhir.FhirElement(source._requiredBehavior);
        }
        if (source['precheckBehavior']) {
            this.precheckBehavior = source.precheckBehavior;
        }
        if (source['_precheckBehavior']) {
            this._precheckBehavior = new fhir.FhirElement(source._precheckBehavior);
        }
        if (source['cardinalityBehavior']) {
            this.cardinalityBehavior = source.cardinalityBehavior;
        }
        if (source['_cardinalityBehavior']) {
            this._cardinalityBehavior = new fhir.FhirElement(source._cardinalityBehavior);
        }
        if (source['definitionCanonical']) {
            this.definitionCanonical = source.definitionCanonical;
        }
        if (source['_definitionCanonical']) {
            this._definitionCanonical = new fhir.FhirElement(source._definitionCanonical);
        }
        if (source['definitionUri']) {
            this.definitionUri = source.definitionUri;
        }
        if (source['_definitionUri']) {
            this._definitionUri = new fhir.FhirElement(source._definitionUri);
        }
        if (source['transform']) {
            this.transform = source.transform;
        }
        if (source['_transform']) {
            this._transform = new fhir.FhirElement(source._transform);
        }
        if (source['dynamicValue']) {
            this.dynamicValue = source.dynamicValue.map((x) => new fhir.PlanDefinitionActionDynamicValue(x));
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.PlanDefinitionAction(x));
        }
    }
    /**
     * Required-bound Value Set for priority
     */
    static priorityRequiredValueSet() {
        return RequestPriorityValueSet;
    }
    /**
     * Extensible-bound Value Set for subjectCodeableConcept
     */
    static subjectCodeableConceptExtensibleValueSet() {
        return SubjectTypeValueSet;
    }
    /**
     * Extensible-bound Value Set for subjectReference
     */
    static subjectReferenceExtensibleValueSet() {
        return SubjectTypeValueSet;
    }
    /**
     * Extensible-bound Value Set for type
     */
    static typeExtensibleValueSet() {
        return ActionTypeValueSet;
    }
    /**
     * Required-bound Value Set for groupingBehavior
     */
    static groupingBehaviorRequiredValueSet() {
        return ActionGroupingBehaviorValueSet;
    }
    /**
     * Required-bound Value Set for selectionBehavior
     */
    static selectionBehaviorRequiredValueSet() {
        return ActionSelectionBehaviorValueSet;
    }
    /**
     * Required-bound Value Set for requiredBehavior
     */
    static requiredBehaviorRequiredValueSet() {
        return ActionRequiredBehaviorValueSet;
    }
    /**
     * Required-bound Value Set for precheckBehavior
     */
    static precheckBehaviorRequiredValueSet() {
        return ActionPrecheckBehaviorValueSet;
    }
    /**
     * Required-bound Value Set for cardinalityBehavior
     */
    static cardinalityBehaviorRequiredValueSet() {
        return ActionCardinalityBehaviorValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_prefix"]) {
            results.push(...this._prefix.doModelValidation());
        }
        if (this["_title"]) {
            results.push(...this._title.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["_textEquivalent"]) {
            results.push(...this._textEquivalent.doModelValidation());
        }
        if (this["_priority"]) {
            results.push(...this._priority.doModelValidation());
        }
        if (this["code"]) {
            this.code.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reason"]) {
            this.reason.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["documentation"]) {
            this.documentation.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_goalId"]) {
            this._goalId.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["subjectCodeableConcept"]) {
            results.push(...this.subjectCodeableConcept.doModelValidation());
        }
        if (this["subjectReference"]) {
            results.push(...this.subjectReference.doModelValidation());
        }
        if (this["trigger"]) {
            this.trigger.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["condition"]) {
            this.condition.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["input"]) {
            this.input.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["output"]) {
            this.output.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["relatedAction"]) {
            this.relatedAction.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_timingDateTime"]) {
            results.push(...this._timingDateTime.doModelValidation());
        }
        if (this["timingAge"]) {
            results.push(...this.timingAge.doModelValidation());
        }
        if (this["timingPeriod"]) {
            results.push(...this.timingPeriod.doModelValidation());
        }
        if (this["timingDuration"]) {
            results.push(...this.timingDuration.doModelValidation());
        }
        if (this["timingRange"]) {
            results.push(...this.timingRange.doModelValidation());
        }
        if (this["timingTiming"]) {
            results.push(...this.timingTiming.doModelValidation());
        }
        if (this["participant"]) {
            this.participant.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["_groupingBehavior"]) {
            results.push(...this._groupingBehavior.doModelValidation());
        }
        if (this["_selectionBehavior"]) {
            results.push(...this._selectionBehavior.doModelValidation());
        }
        if (this["_requiredBehavior"]) {
            results.push(...this._requiredBehavior.doModelValidation());
        }
        if (this["_precheckBehavior"]) {
            results.push(...this._precheckBehavior.doModelValidation());
        }
        if (this["_cardinalityBehavior"]) {
            results.push(...this._cardinalityBehavior.doModelValidation());
        }
        if (this["_definitionCanonical"]) {
            results.push(...this._definitionCanonical.doModelValidation());
        }
        if (this["_definitionUri"]) {
            results.push(...this._definitionUri.doModelValidation());
        }
        if (this["_transform"]) {
            results.push(...this._transform.doModelValidation());
        }
        if (this["dynamicValue"]) {
            this.dynamicValue.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["action"]) {
            this.action.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.
 */
export class PlanDefinition extends fhir.DomainResource {
    /**
     * Default constructor for PlanDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'PlanDefinition';
        if (source['url']) {
            this.url = source.url;
        }
        if (source['_url']) {
            this._url = new fhir.FhirElement(source._url);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['version']) {
            this.version = source.version;
        }
        if (source['_version']) {
            this._version = new fhir.FhirElement(source._version);
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['title']) {
            this.title = source.title;
        }
        if (source['_title']) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source['subtitle']) {
            this.subtitle = source.subtitle;
        }
        if (source['_subtitle']) {
            this._subtitle = new fhir.FhirElement(source._subtitle);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['experimental']) {
            this.experimental = source.experimental;
        }
        if (source['_experimental']) {
            this._experimental = new fhir.FhirElement(source._experimental);
        }
        if (source['subjectCodeableConcept']) {
            this.subjectCodeableConcept = new fhir.CodeableConcept(source.subjectCodeableConcept);
        }
        if (source['subjectReference']) {
            this.subjectReference = new fhir.Reference(source.subjectReference);
        }
        if (source['date']) {
            this.date = source.date;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['publisher']) {
            this.publisher = source.publisher;
        }
        if (source['_publisher']) {
            this._publisher = new fhir.FhirElement(source._publisher);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['purpose']) {
            this.purpose = source.purpose;
        }
        if (source['_purpose']) {
            this._purpose = new fhir.FhirElement(source._purpose);
        }
        if (source['usage']) {
            this.usage = source.usage;
        }
        if (source['_usage']) {
            this._usage = new fhir.FhirElement(source._usage);
        }
        if (source['copyright']) {
            this.copyright = source.copyright;
        }
        if (source['_copyright']) {
            this._copyright = new fhir.FhirElement(source._copyright);
        }
        if (source['approvalDate']) {
            this.approvalDate = source.approvalDate;
        }
        if (source['_approvalDate']) {
            this._approvalDate = new fhir.FhirElement(source._approvalDate);
        }
        if (source['lastReviewDate']) {
            this.lastReviewDate = source.lastReviewDate;
        }
        if (source['_lastReviewDate']) {
            this._lastReviewDate = new fhir.FhirElement(source._lastReviewDate);
        }
        if (source['effectivePeriod']) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source['topic']) {
            this.topic = source.topic.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.ContactDetail(x));
        }
        if (source['editor']) {
            this.editor = source.editor.map((x) => new fhir.ContactDetail(x));
        }
        if (source['reviewer']) {
            this.reviewer = source.reviewer.map((x) => new fhir.ContactDetail(x));
        }
        if (source['endorser']) {
            this.endorser = source.endorser.map((x) => new fhir.ContactDetail(x));
        }
        if (source['relatedArtifact']) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x));
        }
        if (source['library']) {
            this.library = source.library.map((x) => (x));
        }
        if (source['_library']) {
            this._library = source._library.map((x) => new fhir.FhirElement(x));
        }
        if (source['goal']) {
            this.goal = source.goal.map((x) => new fhir.PlanDefinitionGoal(x));
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.PlanDefinitionAction(x));
        }
    }
    /**
     * Extensible-bound Value Set for type
     */
    static typeExtensibleValueSet() {
        return PlanDefinitionTypeValueSet;
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return PublicationStatusValueSet;
    }
    /**
     * Extensible-bound Value Set for subjectCodeableConcept
     */
    static subjectCodeableConceptExtensibleValueSet() {
        return SubjectTypeValueSet;
    }
    /**
     * Extensible-bound Value Set for subjectReference
     */
    static subjectReferenceExtensibleValueSet() {
        return SubjectTypeValueSet;
    }
    /**
     * Example-bound Value Set for topic
     */
    static topicExampleValueSet() {
        return DefinitionTopicValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: PlanDefinition.resourceType']);
        }
        if (this["_url"]) {
            results.push(...this._url.doModelValidation());
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_version"]) {
            results.push(...this._version.doModelValidation());
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_title"]) {
            results.push(...this._title.doModelValidation());
        }
        if (this["_subtitle"]) {
            results.push(...this._subtitle.doModelValidation());
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: PlanDefinition.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["_experimental"]) {
            results.push(...this._experimental.doModelValidation());
        }
        if (this["subjectCodeableConcept"]) {
            results.push(...this.subjectCodeableConcept.doModelValidation());
        }
        if (this["subjectReference"]) {
            results.push(...this.subjectReference.doModelValidation());
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["_publisher"]) {
            results.push(...this._publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_purpose"]) {
            results.push(...this._purpose.doModelValidation());
        }
        if (this["_usage"]) {
            results.push(...this._usage.doModelValidation());
        }
        if (this["_copyright"]) {
            results.push(...this._copyright.doModelValidation());
        }
        if (this["_approvalDate"]) {
            results.push(...this._approvalDate.doModelValidation());
        }
        if (this["_lastReviewDate"]) {
            results.push(...this._lastReviewDate.doModelValidation());
        }
        if (this["effectivePeriod"]) {
            results.push(...this.effectivePeriod.doModelValidation());
        }
        if (this["topic"]) {
            this.topic.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["author"]) {
            this.author.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["editor"]) {
            this.editor.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reviewer"]) {
            this.reviewer.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["endorser"]) {
            this.endorser.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["relatedArtifact"]) {
            this.relatedArtifact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_library"]) {
            this._library.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["goal"]) {
            this.goal.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["action"]) {
            this.action.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=PlanDefinition.js.map