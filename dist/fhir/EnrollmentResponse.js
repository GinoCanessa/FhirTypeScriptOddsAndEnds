// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * This resource provides enrollment and plan details from the processing of an EnrollmentRequest resource.
 */
export class EnrollmentResponse extends fhir.DomainResource {
    /**
     * Default constructor for EnrollmentResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'EnrollmentResponse';
        if (source["created"]) {
            this.created = source.created;
        }
        if (source["_created"]) {
            this._created = new fhir.FhirElement(source._created);
        }
        if (source["disposition"]) {
            this.disposition = source.disposition;
        }
        if (source["_disposition"]) {
            this._disposition = new fhir.FhirElement(source._disposition);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["organization"]) {
            this.organization = new fhir.Reference(source.organization);
        }
        if (source["outcome"]) {
            this.outcome = source.outcome;
        }
        if (source["_outcome"]) {
            this._outcome = new fhir.FhirElement(source._outcome);
        }
        if (source["request"]) {
            this.request = new fhir.Reference(source.request);
        }
        if (source["requestProvider"]) {
            this.requestProvider = new fhir.Reference(source.requestProvider);
        }
        if (source["status"]) {
            this.status = source.status;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
    }
    /**
     * Check if the current EnrollmentResponse contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a EnrollmentResponse from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new EnrollmentResponse(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `EnrollmentResponse is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the EnrollmentResponse.outcome field
 */
export var EnrollmentResponseOutcomeEnum;
(function (EnrollmentResponseOutcomeEnum) {
    EnrollmentResponseOutcomeEnum["QUEUED"] = "queued";
    EnrollmentResponseOutcomeEnum["COMPLETE"] = "complete";
    EnrollmentResponseOutcomeEnum["ERROR"] = "error";
    EnrollmentResponseOutcomeEnum["PARTIAL"] = "partial";
})(EnrollmentResponseOutcomeEnum || (EnrollmentResponseOutcomeEnum = {}));
/**
 * Code Values for the EnrollmentResponse.status field
 */
export var EnrollmentResponseStatusEnum;
(function (EnrollmentResponseStatusEnum) {
    EnrollmentResponseStatusEnum["ACTIVE"] = "active";
    EnrollmentResponseStatusEnum["CANCELLED"] = "cancelled";
    EnrollmentResponseStatusEnum["DRAFT"] = "draft";
    EnrollmentResponseStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(EnrollmentResponseStatusEnum || (EnrollmentResponseStatusEnum = {}));
//# sourceMappingURL=EnrollmentResponse.js.map