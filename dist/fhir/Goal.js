// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * When multiple targets are present for a single goal instance, all targets must be met for the overall goal to be met.
 */
export class GoalTarget extends fhir.BackboneElement {
    /**
     * Default constructor for GoalTarget - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["detailQuantity"]) {
            this.detailQuantity = new fhir.Quantity(source.detailQuantity);
        }
        if (source["detailRange"]) {
            this.detailRange = new fhir.Range(source.detailRange);
        }
        if (source["detailCodeableConcept"]) {
            this.detailCodeableConcept = new fhir.CodeableConcept(source.detailCodeableConcept);
        }
        if (source["detailString"]) {
            this.detailString = source.detailString;
        }
        if (source["_detailString"]) {
            this._detailString = new fhir.FhirElement(source._detailString);
        }
        if (source["detailBoolean"]) {
            this.detailBoolean = source.detailBoolean;
        }
        if (source["_detailBoolean"]) {
            this._detailBoolean = new fhir.FhirElement(source._detailBoolean);
        }
        if (source["detailInteger"]) {
            this.detailInteger = source.detailInteger;
        }
        if (source["_detailInteger"]) {
            this._detailInteger = new fhir.FhirElement(source._detailInteger);
        }
        if (source["detailRatio"]) {
            this.detailRatio = new fhir.Ratio(source.detailRatio);
        }
        if (source["dueDate"]) {
            this.dueDate = source.dueDate;
        }
        if (source["_dueDate"]) {
            this._dueDate = new fhir.FhirElement(source._dueDate);
        }
        if (source["dueDuration"]) {
            this.dueDuration = new fhir.Duration(source.dueDuration);
        }
        if (source["measure"]) {
            this.measure = new fhir.CodeableConcept(source.measure);
        }
    }
    /**
     * Check if the current GoalTarget contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a GoalTarget from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new GoalTarget(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `GoalTarget is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
 */
export class Goal extends fhir.DomainResource {
    /**
     * Default constructor for Goal - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Goal';
        if (source["achievementStatus"]) {
            this.achievementStatus = new fhir.CodeableConcept(source.achievementStatus);
        }
        if (source["addresses"]) {
            this.addresses = source.addresses.map((x) => new fhir.Reference(x));
        }
        if (source["category"]) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        this.description = null;
        if (source["description"]) {
            this.description = new fhir.CodeableConcept(source.description);
        }
        if (this.description === undefined) {
            this.description = null;
        }
        if (source["expressedBy"]) {
            this.expressedBy = new fhir.Reference(source.expressedBy);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        this.lifecycleStatus = null;
        if (source["lifecycleStatus"]) {
            this.lifecycleStatus = source.lifecycleStatus;
        }
        if (this.lifecycleStatus === undefined) {
            this.lifecycleStatus = null;
        }
        if (source["_lifecycleStatus"]) {
            this._lifecycleStatus = new fhir.FhirElement(source._lifecycleStatus);
        }
        if (source["note"]) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source["outcomeCode"]) {
            this.outcomeCode = source.outcomeCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["outcomeReference"]) {
            this.outcomeReference = source.outcomeReference.map((x) => new fhir.Reference(x));
        }
        if (source["priority"]) {
            this.priority = new fhir.CodeableConcept(source.priority);
        }
        if (source["startDate"]) {
            this.startDate = source.startDate;
        }
        if (source["_startDate"]) {
            this._startDate = new fhir.FhirElement(source._startDate);
        }
        if (source["startCodeableConcept"]) {
            this.startCodeableConcept = new fhir.CodeableConcept(source.startCodeableConcept);
        }
        if (source["statusDate"]) {
            this.statusDate = source.statusDate;
        }
        if (source["_statusDate"]) {
            this._statusDate = new fhir.FhirElement(source._statusDate);
        }
        if (source["statusReason"]) {
            this.statusReason = source.statusReason;
        }
        if (source["_statusReason"]) {
            this._statusReason = new fhir.FhirElement(source._statusReason);
        }
        this.subject = null;
        if (source["subject"]) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (this.subject === undefined) {
            this.subject = null;
        }
        if (source["target"]) {
            this.target = source.target.map((x) => new fhir.GoalTarget(x));
        }
    }
    /**
     * Check if the current Goal contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["description"] === undefined) {
            missingElements.push("description");
        }
        if (this["lifecycleStatus"] === undefined) {
            missingElements.push("lifecycleStatus");
        }
        if (this["subject"] === undefined) {
            missingElements.push("subject");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Goal from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new Goal(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Goal is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the Goal.lifecycleStatus field
 */
export var GoalLifecycleStatusEnum;
(function (GoalLifecycleStatusEnum) {
    GoalLifecycleStatusEnum["PROPOSED"] = "proposed";
    GoalLifecycleStatusEnum["PLANNED"] = "planned";
    GoalLifecycleStatusEnum["ACCEPTED"] = "accepted";
    GoalLifecycleStatusEnum["ACTIVE"] = "active";
    GoalLifecycleStatusEnum["ON_HOLD"] = "on-hold";
    GoalLifecycleStatusEnum["COMPLETED"] = "completed";
    GoalLifecycleStatusEnum["CANCELLED"] = "cancelled";
    GoalLifecycleStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    GoalLifecycleStatusEnum["REJECTED"] = "rejected";
})(GoalLifecycleStatusEnum || (GoalLifecycleStatusEnum = {}));
//# sourceMappingURL=Goal.js.map