// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Goal
import * as fhir from '../fhir.js';
import { ObservationCodesValueSet, } from '../fhirValueSets/ObservationCodesValueSet.js';
import { GoalStatusValueSet, } from '../fhirValueSets/GoalStatusValueSet.js';
import { GoalAchievementValueSet, } from '../fhirValueSets/GoalAchievementValueSet.js';
import { GoalCategoryValueSet, } from '../fhirValueSets/GoalCategoryValueSet.js';
import { GoalPriorityValueSet, } from '../fhirValueSets/GoalPriorityValueSet.js';
import { ClinicalFindingsValueSet, } from '../fhirValueSets/ClinicalFindingsValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * When multiple targets are present for a single goal instance, all targets must be met for the overall goal to be met.
 */
export class GoalTarget extends fhir.BackboneElement {
    /**
     * Default constructor for GoalTarget - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'GoalTarget';
        this.__detailIsChoice = true;
        this.__dueIsChoice = true;
        if (source['measure']) {
            this.measure = new fhir.CodeableConcept(source.measure);
        }
        if (source['detail']) {
            this.detail = source.detail;
        }
        else if (source['detailQuantity']) {
            this.detail = new fhir.Quantity(source.detailQuantity);
        }
        else if (source['detailRange']) {
            this.detail = new fhir.Range(source.detailRange);
        }
        else if (source['detailCodeableConcept']) {
            this.detail = new fhir.CodeableConcept(source.detailCodeableConcept);
        }
        else if (source['detailString']) {
            this.detail = new fhir.FhirString({ value: source.detailString });
        }
        else if (source['detailBoolean']) {
            this.detail = new fhir.FhirBoolean({ value: source.detailBoolean });
        }
        else if (source['detailInteger']) {
            this.detail = new fhir.FhirInteger({ value: source.detailInteger });
        }
        else if (source['detailRatio']) {
            this.detail = new fhir.Ratio(source.detailRatio);
        }
        if (source['due']) {
            this.due = source.due;
        }
        else if (source['dueDate']) {
            this.due = new fhir.FhirDate({ value: source.dueDate });
        }
        else if (source['dueDuration']) {
            this.due = new fhir.Duration(source.dueDuration);
        }
    }
    /**
     * Example-bound Value Set for measure
     */
    static measureExampleValueSet() {
        return ObservationCodesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["measure"]) {
            outcome.issue.push(...this.measure.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
 */
export class Goal extends fhir.DomainResource {
    /**
     * Default constructor for Goal - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'Goal';
        /**
         * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
         */
        this.identifier = [];
        /**
         * Indicates a category the goal falls within.
         */
        this.category = [];
        this.__startIsChoice = true;
        /**
         * When multiple targets are present for a single goal instance, all targets must be met for the overall goal to be met.
         */
        this.target = [];
        /**
         * The identified conditions and other health record elements that are intended to be addressed by the goal.
         */
        this.addresses = [];
        /**
         * May be used for progress notes, concerns or other related information that doesn't actually describe the goal itself.
         */
        this.note = [];
        /**
         * Note that this should not duplicate the goal status.
         */
        this.outcomeCode = [];
        /**
         * The goal outcome is independent of the outcome of the related activities.  For example, if the Goal is to achieve a target body weight of 150 lb and a care plan activity is defined to diet, then the care planâ€™s activity outcome could be calories consumed whereas goal outcome is an observation for the actual body weight measured.
         */
        this.outcomeReference = [];
        this.resourceType = 'Goal';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['lifecycleStatus']) {
            this.lifecycleStatus = source.lifecycleStatus;
        }
        else {
            this.lifecycleStatus = null;
        }
        if (source['achievementStatus']) {
            this.achievementStatus = new fhir.CodeableConcept(source.achievementStatus);
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['priority']) {
            this.priority = new fhir.CodeableConcept(source.priority);
        }
        if (source['description']) {
            this.description = new fhir.CodeableConcept(source.description);
        }
        else {
            this.description = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['start']) {
            this.start = source.start;
        }
        else if (source['startDate']) {
            this.start = new fhir.FhirDate({ value: source.startDate });
        }
        else if (source['startCodeableConcept']) {
            this.start = new fhir.CodeableConcept(source.startCodeableConcept);
        }
        if (source['target']) {
            this.target = source.target.map((x) => new fhir.GoalTarget(x));
        }
        if (source['statusDate']) {
            this.statusDate = new fhir.FhirDate({ value: source.statusDate });
        }
        if (source['statusReason']) {
            this.statusReason = new fhir.FhirString({ value: source.statusReason });
        }
        if (source['expressedBy']) {
            this.expressedBy = new fhir.Reference(source.expressedBy);
        }
        if (source['addresses']) {
            this.addresses = source.addresses.map((x) => new fhir.Reference(x));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['outcomeCode']) {
            this.outcomeCode = source.outcomeCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['outcomeReference']) {
            this.outcomeReference = source.outcomeReference.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Required-bound Value Set for lifecycleStatus
     */
    static lifecycleStatusRequiredValueSet() {
        return GoalStatusValueSet;
    }
    /**
     * Preferred-bound Value Set for achievementStatus
     */
    static achievementStatusPreferredValueSet() {
        return GoalAchievementValueSet;
    }
    /**
     * Example-bound Value Set for category
     */
    static categoryExampleValueSet() {
        return GoalCategoryValueSet;
    }
    /**
     * Preferred-bound Value Set for priority
     */
    static priorityPreferredValueSet() {
        return GoalPriorityValueSet;
    }
    /**
     * Example-bound Value Set for description
     */
    static descriptionExampleValueSet() {
        return ClinicalFindingsValueSet;
    }
    /**
     * Example-bound Value Set for outcomeCode
     */
    static outcomeCodeExampleValueSet() {
        return ClinicalFindingsValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'Goal' fhir: Goal.resourceType:'Goal'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['lifecycleStatus']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property lifecycleStatus:GoalStatusValueSetEnum fhir: Goal.lifecycleStatus:code", }));
        }
        if (this["achievementStatus"]) {
            outcome.issue.push(...this.achievementStatus.doModelValidation().issue);
        }
        if (this["category"]) {
            this.category.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["priority"]) {
            outcome.issue.push(...this.priority.doModelValidation().issue);
        }
        if (!this['description']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property description:fhir.CodeableConcept fhir: Goal.description:CodeableConcept", }));
        }
        if (this["description"]) {
            outcome.issue.push(...this.description.doModelValidation().issue);
        }
        if (!this['subject']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property subject:fhir.Reference fhir: Goal.subject:Reference", }));
        }
        if (this["subject"]) {
            outcome.issue.push(...this.subject.doModelValidation().issue);
        }
        if (this["target"]) {
            this.target.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["statusDate"]) {
            outcome.issue.push(...this.statusDate.doModelValidation().issue);
        }
        if (this["statusReason"]) {
            outcome.issue.push(...this.statusReason.doModelValidation().issue);
        }
        if (this["expressedBy"]) {
            outcome.issue.push(...this.expressedBy.doModelValidation().issue);
        }
        if (this["addresses"]) {
            this.addresses.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["outcomeCode"]) {
            this.outcomeCode.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["outcomeReference"]) {
            this.outcomeReference.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=Goal.js.map