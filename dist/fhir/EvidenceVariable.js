// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Characteristics can be defined flexibly to accommodate different use cases for membership criteria, ranging from simple codes, all the way to using an expression language to express the criteria.
 */
export class EvidenceVariableCharacteristic extends fhir.BackboneElement {
    /**
     * Default constructor for EvidenceVariableCharacteristic - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["definitionReference"]) {
            this.definitionReference = new fhir.Reference(source.definitionReference);
        }
        if (source["definitionCanonical"]) {
            this.definitionCanonical = source.definitionCanonical;
        }
        if (source["_definitionCanonical"]) {
            this._definitionCanonical = new fhir.FhirElement(source._definitionCanonical);
        }
        if (source["definitionCodeableConcept"]) {
            this.definitionCodeableConcept = new fhir.CodeableConcept(source.definitionCodeableConcept);
        }
        if (source["definitionExpression"]) {
            this.definitionExpression = new fhir.Expression(source.definitionExpression);
        }
        if (source["definitionDataRequirement"]) {
            this.definitionDataRequirement = new fhir.DataRequirement(source.definitionDataRequirement);
        }
        if (source["definitionTriggerDefinition"]) {
            this.definitionTriggerDefinition = new fhir.TriggerDefinition(source.definitionTriggerDefinition);
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["exclude"]) {
            this.exclude = source.exclude;
        }
        if (source["_exclude"]) {
            this._exclude = new fhir.FhirElement(source._exclude);
        }
        if (source["groupMeasure"]) {
            this.groupMeasure = source.groupMeasure;
        }
        if (source["_groupMeasure"]) {
            this._groupMeasure = new fhir.FhirElement(source._groupMeasure);
        }
        if (source["participantEffectiveDateTime"]) {
            this.participantEffectiveDateTime = source.participantEffectiveDateTime;
        }
        if (source["_participantEffectiveDateTime"]) {
            this._participantEffectiveDateTime = new fhir.FhirElement(source._participantEffectiveDateTime);
        }
        if (source["participantEffectivePeriod"]) {
            this.participantEffectivePeriod = new fhir.Period(source.participantEffectivePeriod);
        }
        if (source["participantEffectiveDuration"]) {
            this.participantEffectiveDuration = new fhir.Duration(source.participantEffectiveDuration);
        }
        if (source["participantEffectiveTiming"]) {
            this.participantEffectiveTiming = new fhir.Timing(source.participantEffectiveTiming);
        }
        if (source["timeFromStart"]) {
            this.timeFromStart = new fhir.Duration(source.timeFromStart);
        }
        if (source["usageContext"]) {
            this.usageContext = source.usageContext.map((x) => new fhir.UsageContext(x));
        }
    }
    /**
     * Check if the current EvidenceVariableCharacteristic contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a EvidenceVariableCharacteristic from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new EvidenceVariableCharacteristic(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `EvidenceVariableCharacteristic is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The EvidenceVariable resource describes a "PICO" element that knowledge (evidence, assertion, recommendation) is about.
 */
export class EvidenceVariable extends fhir.DomainResource {
    /**
     * Default constructor for EvidenceVariable - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'EvidenceVariable';
        if (source["approvalDate"]) {
            this.approvalDate = source.approvalDate;
        }
        if (source["_approvalDate"]) {
            this._approvalDate = new fhir.FhirElement(source._approvalDate);
        }
        if (source["author"]) {
            this.author = source.author.map((x) => new fhir.ContactDetail(x));
        }
        this.characteristic = null;
        if (source["characteristic"]) {
            this.characteristic = source.characteristic.map((x) => new fhir.EvidenceVariableCharacteristic(x));
        }
        if (this.characteristic === undefined) {
            this.characteristic = null;
        }
        if (source["contact"]) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source["copyright"]) {
            this.copyright = source.copyright;
        }
        if (source["_copyright"]) {
            this._copyright = new fhir.FhirElement(source._copyright);
        }
        if (source["date"]) {
            this.date = source.date;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["editor"]) {
            this.editor = source.editor.map((x) => new fhir.ContactDetail(x));
        }
        if (source["effectivePeriod"]) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source["endorser"]) {
            this.endorser = source.endorser.map((x) => new fhir.ContactDetail(x));
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["jurisdiction"]) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["lastReviewDate"]) {
            this.lastReviewDate = source.lastReviewDate;
        }
        if (source["_lastReviewDate"]) {
            this._lastReviewDate = new fhir.FhirElement(source._lastReviewDate);
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["note"]) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source["publisher"]) {
            this.publisher = source.publisher;
        }
        if (source["_publisher"]) {
            this._publisher = new fhir.FhirElement(source._publisher);
        }
        if (source["relatedArtifact"]) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x));
        }
        if (source["reviewer"]) {
            this.reviewer = source.reviewer.map((x) => new fhir.ContactDetail(x));
        }
        if (source["shortTitle"]) {
            this.shortTitle = source.shortTitle;
        }
        if (source["_shortTitle"]) {
            this._shortTitle = new fhir.FhirElement(source._shortTitle);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["subtitle"]) {
            this.subtitle = source.subtitle;
        }
        if (source["_subtitle"]) {
            this._subtitle = new fhir.FhirElement(source._subtitle);
        }
        if (source["title"]) {
            this.title = source.title;
        }
        if (source["_title"]) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source["topic"]) {
            this.topic = source.topic.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["type"]) {
            this.type = source.type;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source["url"]) {
            this.url = source.url;
        }
        if (source["_url"]) {
            this._url = new fhir.FhirElement(source._url);
        }
        if (source["useContext"]) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source["version"]) {
            this.version = source.version;
        }
        if (source["_version"]) {
            this._version = new fhir.FhirElement(source._version);
        }
    }
    /**
     * Check if the current EvidenceVariable contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if ((!this["characteristic"]) || (this["characteristic"].length === 0)) {
            missingElements.push("characteristic");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a EvidenceVariable from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new EvidenceVariable(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `EvidenceVariable is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the EvidenceVariable.characteristic.groupMeasure field
 */
export var EvidenceVariableCharacteristicGroupMeasureEnum;
(function (EvidenceVariableCharacteristicGroupMeasureEnum) {
    EvidenceVariableCharacteristicGroupMeasureEnum["MEAN"] = "mean";
    EvidenceVariableCharacteristicGroupMeasureEnum["MEDIAN"] = "median";
    EvidenceVariableCharacteristicGroupMeasureEnum["MEAN_OF_MEAN"] = "mean-of-mean";
    EvidenceVariableCharacteristicGroupMeasureEnum["MEAN_OF_MEDIAN"] = "mean-of-median";
    EvidenceVariableCharacteristicGroupMeasureEnum["MEDIAN_OF_MEAN"] = "median-of-mean";
    EvidenceVariableCharacteristicGroupMeasureEnum["MEDIAN_OF_MEDIAN"] = "median-of-median";
})(EvidenceVariableCharacteristicGroupMeasureEnum || (EvidenceVariableCharacteristicGroupMeasureEnum = {}));
/**
 * Code Values for the EvidenceVariable.status field
 */
export var EvidenceVariableStatusEnum;
(function (EvidenceVariableStatusEnum) {
    EvidenceVariableStatusEnum["DRAFT"] = "draft";
    EvidenceVariableStatusEnum["ACTIVE"] = "active";
    EvidenceVariableStatusEnum["RETIRED"] = "retired";
    EvidenceVariableStatusEnum["UNKNOWN"] = "unknown";
})(EvidenceVariableStatusEnum || (EvidenceVariableStatusEnum = {}));
/**
 * Code Values for the EvidenceVariable.type field
 */
export var EvidenceVariableTypeEnum;
(function (EvidenceVariableTypeEnum) {
    EvidenceVariableTypeEnum["DICHOTOMOUS"] = "dichotomous";
    EvidenceVariableTypeEnum["CONTINUOUS"] = "continuous";
    EvidenceVariableTypeEnum["DESCRIPTIVE"] = "descriptive";
})(EvidenceVariableTypeEnum || (EvidenceVariableTypeEnum = {}));
//# sourceMappingURL=EvidenceVariable.js.map