// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Address
import * as fhir from '../fhir.js';
import { AddressUseValueSet } from '../fhirValueSets/AddressUseValueSet.js';
import { AddressTypeValueSet } from '../fhirValueSets/AddressTypeValueSet.js';
/**
 * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
 */
export class Address extends fhir.FhirElement {
    /**
     * Default constructor for Address - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['use']) {
            this.use = source.use;
        }
        if (source['_use']) {
            this._use = new fhir.FhirElement(source._use);
        }
        if (source['type']) {
            this.type = source.type;
        }
        if (source['_type']) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source['text']) {
            this.text = source.text;
        }
        if (source['_text']) {
            this._text = new fhir.FhirElement(source._text);
        }
        if (source['line']) {
            this.line = source.line.map((x) => (x));
        }
        if (source['_line']) {
            this._line = source._line.map((x) => new fhir.FhirElement(x));
        }
        if (source['city']) {
            this.city = source.city;
        }
        if (source['_city']) {
            this._city = new fhir.FhirElement(source._city);
        }
        if (source['district']) {
            this.district = source.district;
        }
        if (source['_district']) {
            this._district = new fhir.FhirElement(source._district);
        }
        if (source['state']) {
            this.state = source.state;
        }
        if (source['_state']) {
            this._state = new fhir.FhirElement(source._state);
        }
        if (source['postalCode']) {
            this.postalCode = source.postalCode;
        }
        if (source['_postalCode']) {
            this._postalCode = new fhir.FhirElement(source._postalCode);
        }
        if (source['country']) {
            this.country = source.country;
        }
        if (source['_country']) {
            this._country = new fhir.FhirElement(source._country);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Required-bound Value Set for use
     */
    static useRequiredValueSet() {
        return AddressUseValueSet;
    }
    /**
     * Required-bound Value Set for type
     */
    static typeRequiredValueSet() {
        return AddressTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_use"]) {
            results.push(...this._use.doModelValidation());
        }
        if (this["_type"]) {
            results.push(...this._type.doModelValidation());
        }
        if (this["_text"]) {
            results.push(...this._text.doModelValidation());
        }
        if (this["_line"]) {
            this._line.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_city"]) {
            results.push(...this._city.doModelValidation());
        }
        if (this["_district"]) {
            results.push(...this._district.doModelValidation());
        }
        if (this["_state"]) {
            results.push(...this._state.doModelValidation());
        }
        if (this["_postalCode"]) {
            results.push(...this._postalCode.doModelValidation());
        }
        if (this["_country"]) {
            results.push(...this._country.doModelValidation());
        }
        if (this["period"]) {
            results.push(...this.period.doModelValidation());
        }
        return results;
    }
}
//# sourceMappingURL=Address.js.map