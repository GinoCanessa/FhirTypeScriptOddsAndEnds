// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
 */
export class Address extends fhir.FhirElement {
    /**
     * Default constructor for Address - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["city"]) {
            this.city = source.city;
        }
        if (source["_city"]) {
            this._city = new fhir.FhirElement(source._city);
        }
        if (source["country"]) {
            this.country = source.country;
        }
        if (source["_country"]) {
            this._country = new fhir.FhirElement(source._country);
        }
        if (source["district"]) {
            this.district = source.district;
        }
        if (source["_district"]) {
            this._district = new fhir.FhirElement(source._district);
        }
        if (source["line"]) {
            this.line = source.line.map((x) => (x));
        }
        if (source["_line"]) {
            this._line = source._line.map((x) => new fhir.FhirElement(x));
        }
        if (source["period"]) {
            this.period = new fhir.Period(source.period);
        }
        if (source["postalCode"]) {
            this.postalCode = source.postalCode;
        }
        if (source["_postalCode"]) {
            this._postalCode = new fhir.FhirElement(source._postalCode);
        }
        if (source["state"]) {
            this.state = source.state;
        }
        if (source["_state"]) {
            this._state = new fhir.FhirElement(source._state);
        }
        if (source["text"]) {
            this.text = source.text;
        }
        if (source["_text"]) {
            this._text = new fhir.FhirElement(source._text);
        }
        if (source["type"]) {
            this.type = source.type;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source["use"]) {
            this.use = source.use;
        }
        if (source["_use"]) {
            this._use = new fhir.FhirElement(source._use);
        }
    }
    /**
     * Check if the current Address contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Address from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new Address(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `Address is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the Address.type field
 */
export var AddressTypeEnum;
(function (AddressTypeEnum) {
    AddressTypeEnum["POSTAL"] = "postal";
    AddressTypeEnum["PHYSICAL"] = "physical";
    AddressTypeEnum["BOTH"] = "both";
})(AddressTypeEnum || (AddressTypeEnum = {}));
/**
 * Code Values for the Address.use field
 */
export var AddressUseEnum;
(function (AddressUseEnum) {
    AddressUseEnum["HOME"] = "home";
    AddressUseEnum["WORK"] = "work";
    AddressUseEnum["TEMP"] = "temp";
    AddressUseEnum["OLD"] = "old";
    AddressUseEnum["BILLING"] = "billing";
})(AddressUseEnum || (AddressUseEnum = {}));
//# sourceMappingURL=Address.js.map