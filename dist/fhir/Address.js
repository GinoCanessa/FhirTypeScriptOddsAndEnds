var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Restricted to: Patient|Encounter|Observation
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
 */
var Address = /** @class */ (function (_super) {
    __extends(Address, _super);
    /**
     * Default constructor for Address - initializes required elements to null.
     */
    function Address() {
        return _super.call(this) || this;
    }
    /**
     * Factory function to create a Address from an object that MAY NOT contain all required elements.
     */
    Address.FactoryCreate = function (source) {
        var dest = _super.FactoryCreate.call(this, source);
        if (source["city"] !== undefined) {
            dest.city = source.city;
        }
        if (source["_city"] !== undefined) {
            dest._city = fhir.FhirElement.FactoryCreate(source._city);
        }
        if (source["country"] !== undefined) {
            dest.country = source.country;
        }
        if (source["_country"] !== undefined) {
            dest._country = fhir.FhirElement.FactoryCreate(source._country);
        }
        if (source["district"] !== undefined) {
            dest.district = source.district;
        }
        if (source["_district"] !== undefined) {
            dest._district = fhir.FhirElement.FactoryCreate(source._district);
        }
        if (source["line"] !== undefined) {
            dest.line = source.line.map(function (x) { return (x); });
        }
        if (source["_line"] !== undefined) {
            dest._line = source._line.map(function (x) { return fhir.FhirElement.FactoryCreate(x); });
        }
        if (source["period"] !== undefined) {
            dest.period = fhir.Period.FactoryCreate(source.period);
        }
        if (source["postalCode"] !== undefined) {
            dest.postalCode = source.postalCode;
        }
        if (source["_postalCode"] !== undefined) {
            dest._postalCode = fhir.FhirElement.FactoryCreate(source._postalCode);
        }
        if (source["state"] !== undefined) {
            dest.state = source.state;
        }
        if (source["_state"] !== undefined) {
            dest._state = fhir.FhirElement.FactoryCreate(source._state);
        }
        if (source["text"] !== undefined) {
            dest.text = source.text;
        }
        if (source["_text"] !== undefined) {
            dest._text = fhir.FhirElement.FactoryCreate(source._text);
        }
        if (source["type"] !== undefined) {
            dest.type = source.type;
        }
        if (source["_type"] !== undefined) {
            dest._type = fhir.FhirElement.FactoryCreate(source._type);
        }
        if (source["use"] !== undefined) {
            dest.use = source.use;
        }
        if (source["_use"] !== undefined) {
            dest._use = fhir.FhirElement.FactoryCreate(source._use);
        }
        return dest;
    };
    /**
     * Check if the current Address contains all required elements.
     */
    Address.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    /**
     * Factory function to create a Address from an object that MUST contain all required elements.
     */
    Address.FactoryCreateStrict = function (source) {
        var dest = this.FactoryCreate(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "Address is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    return Address;
}(fhir.FhirElement));
export { Address };
/**
 * Code Values for the Address.type field
 */
export var AddressTypeEnum;
(function (AddressTypeEnum) {
    AddressTypeEnum["POSTAL"] = "postal";
    AddressTypeEnum["PHYSICAL"] = "physical";
    AddressTypeEnum["BOTH"] = "both";
})(AddressTypeEnum || (AddressTypeEnum = {}));
/**
 * Code Values for the Address.use field
 */
export var AddressUseEnum;
(function (AddressUseEnum) {
    AddressUseEnum["HOME"] = "home";
    AddressUseEnum["WORK"] = "work";
    AddressUseEnum["TEMP"] = "temp";
    AddressUseEnum["OLD"] = "old";
    AddressUseEnum["BILLING"] = "billing";
})(AddressUseEnum || (AddressUseEnum = {}));
//# sourceMappingURL=Address.js.map