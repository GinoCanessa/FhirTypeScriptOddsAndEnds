// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: BodyStructure
import * as fhir from '../fhir.js';
import { BodystructureCodeValueSet, } from '../fhirValueSets/BodystructureCodeValueSet.js';
import { BodySiteValueSet, } from '../fhirValueSets/BodySiteValueSet.js';
import { BodystructureRelativeLocationValueSet, } from '../fhirValueSets/BodystructureRelativeLocationValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Record details about an anatomical structure.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.
 */
export class BodyStructure extends fhir.DomainResource {
    /**
     * Default constructor for BodyStructure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'BodyStructure';
        /**
         * Identifier for this instance of the anatomical structure.
         */
        this.identifier = [];
        /**
         * Qualifier to refine the anatomical location.  These include qualifiers for laterality, relative location, directionality, number, and plane.
         */
        this.locationQualifier = [];
        /**
         * Image or images used to identify a location.
         */
        this.image = [];
        this.resourceType = 'BodyStructure';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['active']) {
            this.active = new fhir.FhirBoolean({ value: source.active });
        }
        if (source['morphology']) {
            this.morphology = new fhir.CodeableConcept(source.morphology);
        }
        if (source['location']) {
            this.location = new fhir.CodeableConcept(source.location);
        }
        if (source['locationQualifier']) {
            this.locationQualifier = source.locationQualifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['image']) {
            this.image = source.image.map((x) => new fhir.Attachment(x));
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
    }
    /**
     * Example-bound Value Set for morphology
     */
    static morphologyExampleValueSet() {
        return BodystructureCodeValueSet;
    }
    /**
     * Example-bound Value Set for location
     */
    static locationExampleValueSet() {
        return BodySiteValueSet;
    }
    /**
     * Example-bound Value Set for locationQualifier
     */
    static locationQualifierExampleValueSet() {
        return BodystructureRelativeLocationValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'BodyStructure' fhir: BodyStructure.resourceType:'BodyStructure'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["active"]) {
            outcome.issue.push(...this.active.doModelValidation().issue);
        }
        if (this["morphology"]) {
            outcome.issue.push(...this.morphology.doModelValidation().issue);
        }
        if (this["location"]) {
            outcome.issue.push(...this.location.doModelValidation().issue);
        }
        if (this["locationQualifier"]) {
            this.locationQualifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["description"]) {
            outcome.issue.push(...this.description.doModelValidation().issue);
        }
        if (this["image"]) {
            this.image.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['patient']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property patient:fhir.Reference fhir: BodyStructure.patient:Reference", }));
        }
        if (this["patient"]) {
            outcome.issue.push(...this.patient.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=BodyStructure.js.map