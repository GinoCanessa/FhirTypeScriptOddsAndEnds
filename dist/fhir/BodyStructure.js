// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: BodyStructure
import * as fhir from '../fhir.js';
import { BodystructureCodeValueSet } from '../fhirValueSets/BodystructureCodeValueSet.js';
import { BodySiteValueSet } from '../fhirValueSets/BodySiteValueSet.js';
import { BodystructureRelativeLocationValueSet } from '../fhirValueSets/BodystructureRelativeLocationValueSet.js';
/**
 * Record details about an anatomical structure.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.
 */
export class BodyStructure extends fhir.DomainResource {
    /**
     * Default constructor for BodyStructure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'BodyStructure';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['active']) {
            this.active = source.active;
        }
        if (source['_active']) {
            this._active = new fhir.FhirElement(source._active);
        }
        if (source['morphology']) {
            this.morphology = new fhir.CodeableConcept(source.morphology);
        }
        if (source['location']) {
            this.location = new fhir.CodeableConcept(source.location);
        }
        if (source['locationQualifier']) {
            this.locationQualifier = source.locationQualifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['image']) {
            this.image = source.image.map((x) => new fhir.Attachment(x));
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
    }
    /**
     * Example-bound Value Set for morphology
     */
    morphologyExampleValueSet() {
        return BodystructureCodeValueSet;
    }
    /**
     * Example-bound Value Set for location
     */
    locationExampleValueSet() {
        return BodySiteValueSet;
    }
    /**
     * Example-bound Value Set for locationQualifier
     */
    locationQualifierExampleValueSet() {
        return BodystructureRelativeLocationValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: BodyStructure.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_active"]) {
            results.push(...this._active.doModelValidation());
        }
        if (this["morphology"]) {
            results.push(...this.morphology.doModelValidation());
        }
        if (this["location"]) {
            results.push(...this.location.doModelValidation());
        }
        if (this["locationQualifier"]) {
            this.locationQualifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["image"]) {
            this.image.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["patient"]) {
            results.push(["patient", 'Missing required element: BodyStructure.patient']);
        }
        if (this["patient"]) {
            results.push(...this.patient.doModelValidation());
        }
        return results;
    }
}
//# sourceMappingURL=BodyStructure.js.map