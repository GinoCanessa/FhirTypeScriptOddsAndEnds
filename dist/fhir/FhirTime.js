// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Primitive: time
import * as fhir from '../fhir.js';
import { IssueTypeValueSetEnum, IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * A time during the day, with no date specified
 */
export class FhirTime extends fhir.FhirPrimitive {
    /**
       * Create a FhirTime
       * @param value A time during the day, with no date specified
       * @param id Unique id for inter-element referencing (uncommon on primitives)
       * @param extension Additional content defined by implementations
       * @param options Options to pass to extension constructors
    */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'Time';
        this.__jsonType = 'string';
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if ((this.value) && (!FhirTime.__regex.test(this.value))) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.InvalidContent, diagnostics: "Invalid value in primitive type time", }));
        }
        return outcome;
    }
    /**
     * Returns a string representation of a string.
     */
    toString() { var _a; return ((_a = this.value) !== null && _a !== void 0 ? _a : '').toString(); }
    /**
     * Returns the character at the specified index.
     * @param pos The zero-based index of the desired character.
     */
    charAt(pos) { var _a; return ((_a = this.value) !== null && _a !== void 0 ? _a : '').charAt(pos); }
    /**
     * Returns the Unicode value of the character at the specified location.
     * @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.
     */
    charCodeAt(index) { var _a; return ((_a = this.value) !== null && _a !== void 0 ? _a : '').charCodeAt(index); }
    /**
     * Returns a string that contains the concatenation of two or more strings.
     * @param strings The strings to append to the end of the string.
     */
    concat(...strings) { var _a; return ((_a = this.value) !== null && _a !== void 0 ? _a : '').concat(...strings); }
    /**
     * Returns the position of the first occurrence of a substring.
     * @param searchString The substring to search for in the string
     * @param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.
     */
    indexOf(searchString, position) { var _a; return ((_a = this.value) !== null && _a !== void 0 ? _a : '').indexOf(searchString, position); }
    /**
     * Returns the last occurrence of a substring in the string.
     * @param searchString The substring to search for.
     * @param position The index at which to begin searching. If omitted, the search begins at the end of the string.
     */
    lastIndexOf(searchString, position) { var _a; return ((_a = this.value) !== null && _a !== void 0 ? _a : '').lastIndexOf(searchString, position); }
    /**
     * Determines whether two strings are equivalent in the current locale.
     * @param that String to compare to target string
     */
    localeCompare(that) { var _a; return ((_a = this.value) !== null && _a !== void 0 ? _a : '').localeCompare(that); }
    /**
     * Matches a string with a regular expression, and returns an array containing the results of that search.
     * @param regexp A variable name or string literal containing the regular expression pattern and flags.
     */
    match(regexp) { var _a; return ((_a = this.value) !== null && _a !== void 0 ? _a : '').match(regexp); }
    /**
     * Replaces text in a string, using a regular expression or search string.
     * @param searchValue A string to search for.
     * @param replaceValue A string containing the text to replace for every successful match of searchValue in this string.
     */
    replace(searchValue, replaceValue) { var _a; return ((_a = this.value) !== null && _a !== void 0 ? _a : '').replace(searchValue, replaceValue); }
    /**
     * Finds the first substring match in a regular expression search.
     * @param regexp The regular expression pattern and applicable flags.
     */
    search(regexp) { var _a; return ((_a = this.value) !== null && _a !== void 0 ? _a : '').search(regexp); }
    /**
     * Returns a section of a string.
     * @param start The index to the beginning of the specified portion of stringObj.
     * @param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.
     * If this value is not specified, the substring continues to the end of stringObj.
     */
    slice(start, end) { var _a; return ((_a = this.value) !== null && _a !== void 0 ? _a : '').slice(start, end); }
    /**
     * Split a string into substrings using the specified separator and return them as an array.
     * @param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.
     * @param limit A value used to limit the number of elements returned in the array.
     */
    split(separator, limit) { var _a; return ((_a = this.value) !== null && _a !== void 0 ? _a : '').split(separator, limit); }
    /**
     * Returns the substring at the specified location within a String object.
     * @param start The zero-based index number indicating the beginning of the substring.
     * @param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.
     * If end is omitted, the characters from start through the end of the original string are returned.
     */
    substring(start, end) { var _a; return ((_a = this.value) !== null && _a !== void 0 ? _a : '').substring(start, end); }
    /**
     * Converts all the alphabetic characters in a string to lowercase.
     */
    toLowerCase() { var _a; return ((_a = this.value) !== null && _a !== void 0 ? _a : '').toLowerCase(); }
    /**
     * Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.
     */
    toLocaleLowerCase(locales) { var _a; return ((_a = this.value) !== null && _a !== void 0 ? _a : '').toLocaleLowerCase(locales); }
    /**
     * Converts all the alphabetic characters in a string to uppercase.
     */
    toUpperCase() { var _a; return ((_a = this.value) !== null && _a !== void 0 ? _a : '').toUpperCase(); }
    /**
     * Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.
     */
    toLocaleUpperCase(locales) { var _a; return ((_a = this.value) !== null && _a !== void 0 ? _a : '').toLocaleUpperCase(locales); }
    /**
     * Removes the leading and trailing white space and line terminator characters from a string.
     */
    trim() { var _a; return ((_a = this.value) !== null && _a !== void 0 ? _a : '').trim(); }
    /**
     * Returns the length of a String object.
     */
    get length() { var _a, _b; return (_b = (_a = this.value) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0; }
    ;
    /**
     * Returns the primitive value of the specified object.
     */
    valueOf() { var _a; return (_a = this.value) !== null && _a !== void 0 ? _a : ''; }
}
// published regex: ([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?
FhirTime.__regex = /^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?$/;
//# sourceMappingURL=FhirTime.js.map