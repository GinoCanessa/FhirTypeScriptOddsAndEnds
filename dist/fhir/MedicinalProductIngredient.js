// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProductIngredient
import * as fhir from '../fhir.js';
/**
 * Strength expressed in terms of a reference substance.
 */
export class MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['substance']) {
            this.substance = new fhir.CodeableConcept(source.substance);
        }
        if (source['strength']) {
            this.strength = new fhir.Ratio(source.strength);
        }
        else {
            this.strength = null;
        }
        if (source['strengthLowLimit']) {
            this.strengthLowLimit = new fhir.Ratio(source.strengthLowLimit);
        }
        if (source['measurementPoint']) {
            this.measurementPoint = source.measurementPoint;
        }
        if (source['_measurementPoint']) {
            this._measurementPoint = new fhir.FhirElement(source._measurementPoint);
        }
        if (source['country']) {
            this.country = source.country.map((x) => new fhir.CodeableConcept(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["substance"]) {
            results.push(...this.substance.doModelValidation());
        }
        if (!this["strength"]) {
            results.push(["strength", 'Missing required element: MedicinalProductIngredient.specifiedSubstance.strength.referenceStrength.strength']);
        }
        if (this["strength"]) {
            results.push(...this.strength.doModelValidation());
        }
        if (this["strengthLowLimit"]) {
            results.push(...this.strengthLowLimit.doModelValidation());
        }
        if (this["_measurementPoint"]) {
            results.push(...this._measurementPoint.doModelValidation());
        }
        if (this["country"]) {
            this.country.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
 */
export class MedicinalProductIngredientSpecifiedSubstanceStrength extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductIngredientSpecifiedSubstanceStrength - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['presentation']) {
            this.presentation = new fhir.Ratio(source.presentation);
        }
        else {
            this.presentation = null;
        }
        if (source['presentationLowLimit']) {
            this.presentationLowLimit = new fhir.Ratio(source.presentationLowLimit);
        }
        if (source['concentration']) {
            this.concentration = new fhir.Ratio(source.concentration);
        }
        if (source['concentrationLowLimit']) {
            this.concentrationLowLimit = new fhir.Ratio(source.concentrationLowLimit);
        }
        if (source['measurementPoint']) {
            this.measurementPoint = source.measurementPoint;
        }
        if (source['_measurementPoint']) {
            this._measurementPoint = new fhir.FhirElement(source._measurementPoint);
        }
        if (source['country']) {
            this.country = source.country.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['referenceStrength']) {
            this.referenceStrength = source.referenceStrength.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["presentation"]) {
            results.push(["presentation", 'Missing required element: MedicinalProductIngredient.specifiedSubstance.strength.presentation']);
        }
        if (this["presentation"]) {
            results.push(...this.presentation.doModelValidation());
        }
        if (this["presentationLowLimit"]) {
            results.push(...this.presentationLowLimit.doModelValidation());
        }
        if (this["concentration"]) {
            results.push(...this.concentration.doModelValidation());
        }
        if (this["concentrationLowLimit"]) {
            results.push(...this.concentrationLowLimit.doModelValidation());
        }
        if (this["_measurementPoint"]) {
            results.push(...this._measurementPoint.doModelValidation());
        }
        if (this["country"]) {
            this.country.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["referenceStrength"]) {
            this.referenceStrength.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * A specified substance that comprises this ingredient.
 */
export class MedicinalProductIngredientSpecifiedSubstance extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductIngredientSpecifiedSubstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['group']) {
            this.group = new fhir.CodeableConcept(source.group);
        }
        else {
            this.group = null;
        }
        if (source['confidentiality']) {
            this.confidentiality = new fhir.CodeableConcept(source.confidentiality);
        }
        if (source['strength']) {
            this.strength = source.strength.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrength(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["code"]) {
            results.push(["code", 'Missing required element: MedicinalProductIngredient.specifiedSubstance.code']);
        }
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (!this["group"]) {
            results.push(["group", 'Missing required element: MedicinalProductIngredient.specifiedSubstance.group']);
        }
        if (this["group"]) {
            results.push(...this.group.doModelValidation());
        }
        if (this["confidentiality"]) {
            results.push(...this.confidentiality.doModelValidation());
        }
        if (this["strength"]) {
            this.strength.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * The ingredient substance.
 */
export class MedicinalProductIngredientSubstance extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductIngredientSubstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['strength']) {
            this.strength = source.strength.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrength(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["code"]) {
            results.push(["code", 'Missing required element: MedicinalProductIngredient.substance.code']);
        }
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["strength"]) {
            this.strength.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * An ingredient of a manufactured item or pharmaceutical product.
 */
export class MedicinalProductIngredient extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProductIngredient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'MedicinalProductIngredient';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        else {
            this.role = null;
        }
        if (source['allergenicIndicator']) {
            this.allergenicIndicator = source.allergenicIndicator;
        }
        if (source['_allergenicIndicator']) {
            this._allergenicIndicator = new fhir.FhirElement(source._allergenicIndicator);
        }
        if (source['manufacturer']) {
            this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x));
        }
        if (source['specifiedSubstance']) {
            this.specifiedSubstance = source.specifiedSubstance.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstance(x));
        }
        if (source['substance']) {
            this.substance = new fhir.MedicinalProductIngredientSubstance(source.substance);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: MedicinalProductIngredient.resourceType']);
        }
        if (this["identifier"]) {
            results.push(...this.identifier.doModelValidation());
        }
        if (!this["role"]) {
            results.push(["role", 'Missing required element: MedicinalProductIngredient.role']);
        }
        if (this["role"]) {
            results.push(...this.role.doModelValidation());
        }
        if (this["_allergenicIndicator"]) {
            results.push(...this._allergenicIndicator.doModelValidation());
        }
        if (this["manufacturer"]) {
            this.manufacturer.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["specifiedSubstance"]) {
            this.specifiedSubstance.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["substance"]) {
            results.push(...this.substance.doModelValidation());
        }
        return results;
    }
}
//# sourceMappingURL=MedicinalProductIngredient.js.map