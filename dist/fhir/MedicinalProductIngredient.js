// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Strength expressed in terms of a reference substance.
 */
export class MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["country"]) {
            this.country = source.country.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["measurementPoint"]) {
            this.measurementPoint = source.measurementPoint;
        }
        if (source["_measurementPoint"]) {
            this._measurementPoint = new fhir.FhirElement(source._measurementPoint);
        }
        this.strength = null;
        if (source["strength"]) {
            this.strength = new fhir.Ratio(source.strength);
        }
        if (this.strength === undefined) {
            this.strength = null;
        }
        if (source["strengthLowLimit"]) {
            this.strengthLowLimit = new fhir.Ratio(source.strengthLowLimit);
        }
        if (source["substance"]) {
            this.substance = new fhir.CodeableConcept(source.substance);
        }
    }
    /**
     * Check if the current MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["strength"] === undefined) {
            missingElements.push("strength");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
 */
export class MedicinalProductIngredientSpecifiedSubstanceStrength extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductIngredientSpecifiedSubstanceStrength - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["concentration"]) {
            this.concentration = new fhir.Ratio(source.concentration);
        }
        if (source["concentrationLowLimit"]) {
            this.concentrationLowLimit = new fhir.Ratio(source.concentrationLowLimit);
        }
        if (source["country"]) {
            this.country = source.country.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["measurementPoint"]) {
            this.measurementPoint = source.measurementPoint;
        }
        if (source["_measurementPoint"]) {
            this._measurementPoint = new fhir.FhirElement(source._measurementPoint);
        }
        this.presentation = null;
        if (source["presentation"]) {
            this.presentation = new fhir.Ratio(source.presentation);
        }
        if (this.presentation === undefined) {
            this.presentation = null;
        }
        if (source["presentationLowLimit"]) {
            this.presentationLowLimit = new fhir.Ratio(source.presentationLowLimit);
        }
        if (source["referenceStrength"]) {
            this.referenceStrength = source.referenceStrength.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(x));
        }
    }
    /**
     * Check if the current MedicinalProductIngredientSpecifiedSubstanceStrength contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["presentation"] === undefined) {
            missingElements.push("presentation");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicinalProductIngredientSpecifiedSubstanceStrength from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new MedicinalProductIngredientSpecifiedSubstanceStrength(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProductIngredientSpecifiedSubstanceStrength is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A specified substance that comprises this ingredient.
 */
export class MedicinalProductIngredientSpecifiedSubstance extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductIngredientSpecifiedSubstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.code = null;
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (this.code === undefined) {
            this.code = null;
        }
        if (source["confidentiality"]) {
            this.confidentiality = new fhir.CodeableConcept(source.confidentiality);
        }
        this.group = null;
        if (source["group"]) {
            this.group = new fhir.CodeableConcept(source.group);
        }
        if (this.group === undefined) {
            this.group = null;
        }
        if (source["strength"]) {
            this.strength = source.strength.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrength(x));
        }
    }
    /**
     * Check if the current MedicinalProductIngredientSpecifiedSubstance contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        if (this["group"] === undefined) {
            missingElements.push("group");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicinalProductIngredientSpecifiedSubstance from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new MedicinalProductIngredientSpecifiedSubstance(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProductIngredientSpecifiedSubstance is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The ingredient substance.
 */
export class MedicinalProductIngredientSubstance extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductIngredientSubstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.code = null;
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (this.code === undefined) {
            this.code = null;
        }
        if (source["strength"]) {
            this.strength = source.strength.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrength(x));
        }
    }
    /**
     * Check if the current MedicinalProductIngredientSubstance contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicinalProductIngredientSubstance from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new MedicinalProductIngredientSubstance(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProductIngredientSubstance is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * An ingredient of a manufactured item or pharmaceutical product.
 */
export class MedicinalProductIngredient extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProductIngredient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'MedicinalProductIngredient';
        if (source["allergenicIndicator"]) {
            this.allergenicIndicator = source.allergenicIndicator;
        }
        if (source["_allergenicIndicator"]) {
            this._allergenicIndicator = new fhir.FhirElement(source._allergenicIndicator);
        }
        if (source["identifier"]) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source["manufacturer"]) {
            this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x));
        }
        this.role = null;
        if (source["role"]) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        if (this.role === undefined) {
            this.role = null;
        }
        if (source["specifiedSubstance"]) {
            this.specifiedSubstance = source.specifiedSubstance.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstance(x));
        }
        if (source["substance"]) {
            this.substance = new fhir.MedicinalProductIngredientSubstance(source.substance);
        }
    }
    /**
     * Check if the current MedicinalProductIngredient contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["role"] === undefined) {
            missingElements.push("role");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicinalProductIngredient from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new MedicinalProductIngredient(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProductIngredient is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
//# sourceMappingURL=MedicinalProductIngredient.js.map