// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
 */
export class ParameterDefinition extends fhir.FhirElement {
    /**
     * Default constructor for ParameterDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["documentation"]) {
            this.documentation = source.documentation;
        }
        if (source["_documentation"]) {
            this._documentation = new fhir.FhirElement(source._documentation);
        }
        if (source["max"]) {
            this.max = source.max;
        }
        if (source["_max"]) {
            this._max = new fhir.FhirElement(source._max);
        }
        if (source["min"]) {
            this.min = source.min;
        }
        if (source["_min"]) {
            this._min = new fhir.FhirElement(source._min);
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["profile"]) {
            this.profile = source.profile;
        }
        if (source["_profile"]) {
            this._profile = new fhir.FhirElement(source._profile);
        }
        this.type = null;
        if (source["type"]) {
            this.type = source.type;
        }
        if (this.type === undefined) {
            this.type = null;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
        this.use = null;
        if (source["use"]) {
            this.use = source.use;
        }
        if (this.use === undefined) {
            this.use = null;
        }
        if (source["_use"]) {
            this._use = new fhir.FhirElement(source._use);
        }
    }
    /**
     * Check if the current ParameterDefinition contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        if (this["use"] === undefined) {
            missingElements.push("use");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ParameterDefinition from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ParameterDefinition(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ParameterDefinition is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the ParameterDefinition.use field
 */
export var ParameterDefinitionUseEnum;
(function (ParameterDefinitionUseEnum) {
    ParameterDefinitionUseEnum["IN"] = "in";
    ParameterDefinitionUseEnum["OUT"] = "out";
})(ParameterDefinitionUseEnum || (ParameterDefinitionUseEnum = {}));
//# sourceMappingURL=ParameterDefinition.js.map