// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: ParameterDefinition
import * as fhir from '../fhir.js';
import { OperationParameterUseValueSet } from '../fhirValueSets/OperationParameterUseValueSet.js';
import { AllTypesValueSet } from '../fhirValueSets/AllTypesValueSet.js';
/**
 * The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
 */
export class ParameterDefinition extends fhir.FhirElement {
    /**
     * Default constructor for ParameterDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['use']) {
            this.use = source.use;
        }
        else {
            this.use = null;
        }
        if (source['_use']) {
            this._use = new fhir.FhirElement(source._use);
        }
        if (source['min']) {
            this.min = source.min;
        }
        if (source['_min']) {
            this._min = new fhir.FhirElement(source._min);
        }
        if (source['max']) {
            this.max = source.max;
        }
        if (source['_max']) {
            this._max = new fhir.FhirElement(source._max);
        }
        if (source['documentation']) {
            this.documentation = source.documentation;
        }
        if (source['_documentation']) {
            this._documentation = new fhir.FhirElement(source._documentation);
        }
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source['profile']) {
            this.profile = source.profile;
        }
        if (source['_profile']) {
            this._profile = new fhir.FhirElement(source._profile);
        }
    }
    /**
     * Required-bound Value Set for use
     */
    useRequiredValueSet() {
        return OperationParameterUseValueSet;
    }
    /**
     * Required-bound Value Set for type
     */
    typeRequiredValueSet() {
        return AllTypesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (!this["use"]) {
            results.push(["use", 'Missing required element: ParameterDefinition.use']);
        }
        if (this["_use"]) {
            results.push(...this._use.doModelValidation());
        }
        if (this["_min"]) {
            results.push(...this._min.doModelValidation());
        }
        if (this["_max"]) {
            results.push(...this._max.doModelValidation());
        }
        if (this["_documentation"]) {
            results.push(...this._documentation.doModelValidation());
        }
        if (!this["type"]) {
            results.push(["type", 'Missing required element: ParameterDefinition.type']);
        }
        if (this["_type"]) {
            results.push(...this._type.doModelValidation());
        }
        if (this["_profile"]) {
            results.push(...this._profile.doModelValidation());
        }
        return results;
    }
}
//# sourceMappingURL=ParameterDefinition.js.map