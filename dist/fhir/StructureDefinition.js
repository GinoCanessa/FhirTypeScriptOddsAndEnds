// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: StructureDefinition
import * as fhir from '../fhir.js';
import { ExtensionContextTypeValueSet } from '../fhirValueSets/ExtensionContextTypeValueSet.js';
import { PublicationStatusValueSet } from '../fhirValueSets/PublicationStatusValueSet.js';
import { DefinitionUseValueSet } from '../fhirValueSets/DefinitionUseValueSet.js';
import { FHIRVersionValueSet } from '../fhirValueSets/FHIRVersionValueSet.js';
import { StructureDefinitionKindValueSet } from '../fhirValueSets/StructureDefinitionKindValueSet.js';
import { DefinedTypesValueSet } from '../fhirValueSets/DefinedTypesValueSet.js';
import { TypeDerivationRuleValueSet } from '../fhirValueSets/TypeDerivationRuleValueSet.js';
/**
 * An external specification that the content is mapped to.
 */
export class StructureDefinitionMapping extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionMapping - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['identity']) {
            this.identity = source.identity;
        }
        else {
            this.identity = null;
        }
        if (source['_identity']) {
            this._identity = new fhir.FhirElement(source._identity);
        }
        if (source['uri']) {
            this.uri = source.uri;
        }
        if (source['_uri']) {
            this._uri = new fhir.FhirElement(source._uri);
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['comment']) {
            this.comment = source.comment;
        }
        if (source['_comment']) {
            this._comment = new fhir.FhirElement(source._comment);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["identity"]) {
            results.push(["identity", 'Missing required element: StructureDefinition.mapping.identity']);
        }
        if (this["_identity"]) {
            results.push(...this._identity.doModelValidation());
        }
        if (this["_uri"]) {
            results.push(...this._uri.doModelValidation());
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_comment"]) {
            results.push(...this._comment.doModelValidation());
        }
        return results;
    }
}
/**
 * Identifies the types of resource or data type elements to which the extension can be applied.
 */
export class StructureDefinitionContext extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionContext - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source['expression']) {
            this.expression = source.expression;
        }
        else {
            this.expression = null;
        }
        if (source['_expression']) {
            this._expression = new fhir.FhirElement(source._expression);
        }
    }
    /**
     * Required-bound Value Set for type
     */
    typeRequiredValueSet() {
        return ExtensionContextTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["type"]) {
            results.push(["type", 'Missing required element: StructureDefinition.context.type']);
        }
        if (this["_type"]) {
            results.push(...this._type.doModelValidation());
        }
        if (!this["expression"]) {
            results.push(["expression", 'Missing required element: StructureDefinition.context.expression']);
        }
        if (this["_expression"]) {
            results.push(...this._expression.doModelValidation());
        }
        return results;
    }
}
/**
 * A snapshot view is expressed in a standalone form that can be used and interpreted without considering the base StructureDefinition.
 */
export class StructureDefinitionSnapshot extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionSnapshot - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['element']) {
            this.element = source.element.map((x) => new fhir.ElementDefinition(x));
        }
        else {
            this.element = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if ((!this["element"]) || (this["element"].length === 0)) {
            results.push(["element", 'Missing required element: StructureDefinition.snapshot.element']);
        }
        if (this["element"]) {
            this.element.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
 */
export class StructureDefinitionDifferential extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionDifferential - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['element']) {
            this.element = source.element.map((x) => new fhir.ElementDefinition(x));
        }
        else {
            this.element = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if ((!this["element"]) || (this["element"].length === 0)) {
            results.push(["element", 'Missing required element: StructureDefinition.differential.element']);
        }
        if (this["element"]) {
            this.element.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.
 */
export class StructureDefinition extends fhir.DomainResource {
    /**
     * Default constructor for StructureDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'StructureDefinition';
        if (source['url']) {
            this.url = source.url;
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            this._url = new fhir.FhirElement(source._url);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['version']) {
            this.version = source.version;
        }
        if (source['_version']) {
            this._version = new fhir.FhirElement(source._version);
        }
        if (source['name']) {
            this.name = source.name;
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['title']) {
            this.title = source.title;
        }
        if (source['_title']) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['experimental']) {
            this.experimental = source.experimental;
        }
        if (source['_experimental']) {
            this._experimental = new fhir.FhirElement(source._experimental);
        }
        if (source['date']) {
            this.date = source.date;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['publisher']) {
            this.publisher = source.publisher;
        }
        if (source['_publisher']) {
            this._publisher = new fhir.FhirElement(source._publisher);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['purpose']) {
            this.purpose = source.purpose;
        }
        if (source['_purpose']) {
            this._purpose = new fhir.FhirElement(source._purpose);
        }
        if (source['copyright']) {
            this.copyright = source.copyright;
        }
        if (source['_copyright']) {
            this._copyright = new fhir.FhirElement(source._copyright);
        }
        if (source['keyword']) {
            this.keyword = source.keyword.map((x) => new fhir.Coding(x));
        }
        if (source['fhirVersion']) {
            this.fhirVersion = source.fhirVersion;
        }
        if (source['_fhirVersion']) {
            this._fhirVersion = new fhir.FhirElement(source._fhirVersion);
        }
        if (source['mapping']) {
            this.mapping = source.mapping.map((x) => new fhir.StructureDefinitionMapping(x));
        }
        if (source['kind']) {
            this.kind = source.kind;
        }
        else {
            this.kind = null;
        }
        if (source['_kind']) {
            this._kind = new fhir.FhirElement(source._kind);
        }
        if (source['abstract']) {
            this.abstract = source.abstract;
        }
        else {
            this.abstract = null;
        }
        if (source['_abstract']) {
            this._abstract = new fhir.FhirElement(source._abstract);
        }
        if (source['context']) {
            this.context = source.context.map((x) => new fhir.StructureDefinitionContext(x));
        }
        if (source['contextInvariant']) {
            this.contextInvariant = source.contextInvariant.map((x) => (x));
        }
        if (source['_contextInvariant']) {
            this._contextInvariant = source._contextInvariant.map((x) => new fhir.FhirElement(x));
        }
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source['baseDefinition']) {
            this.baseDefinition = source.baseDefinition;
        }
        if (source['_baseDefinition']) {
            this._baseDefinition = new fhir.FhirElement(source._baseDefinition);
        }
        if (source['derivation']) {
            this.derivation = source.derivation;
        }
        if (source['_derivation']) {
            this._derivation = new fhir.FhirElement(source._derivation);
        }
        if (source['snapshot']) {
            this.snapshot = new fhir.StructureDefinitionSnapshot(source.snapshot);
        }
        if (source['differential']) {
            this.differential = new fhir.StructureDefinitionDifferential(source.differential);
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return PublicationStatusValueSet;
    }
    /**
     * Extensible-bound Value Set for keyword
     */
    keywordExtensibleValueSet() {
        return DefinitionUseValueSet;
    }
    /**
     * Required-bound Value Set for fhirVersion
     */
    fhirVersionRequiredValueSet() {
        return FHIRVersionValueSet;
    }
    /**
     * Required-bound Value Set for kind
     */
    kindRequiredValueSet() {
        return StructureDefinitionKindValueSet;
    }
    /**
     * Extensible-bound Value Set for type
     */
    typeExtensibleValueSet() {
        return DefinedTypesValueSet;
    }
    /**
     * Required-bound Value Set for derivation
     */
    derivationRequiredValueSet() {
        return TypeDerivationRuleValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: StructureDefinition.resourceType']);
        }
        if (!this["url"]) {
            results.push(["url", 'Missing required element: StructureDefinition.url']);
        }
        if (this["_url"]) {
            results.push(...this._url.doModelValidation());
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_version"]) {
            results.push(...this._version.doModelValidation());
        }
        if (!this["name"]) {
            results.push(["name", 'Missing required element: StructureDefinition.name']);
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_title"]) {
            results.push(...this._title.doModelValidation());
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: StructureDefinition.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["_experimental"]) {
            results.push(...this._experimental.doModelValidation());
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["_publisher"]) {
            results.push(...this._publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_purpose"]) {
            results.push(...this._purpose.doModelValidation());
        }
        if (this["_copyright"]) {
            results.push(...this._copyright.doModelValidation());
        }
        if (this["keyword"]) {
            this.keyword.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_fhirVersion"]) {
            results.push(...this._fhirVersion.doModelValidation());
        }
        if (this["mapping"]) {
            this.mapping.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["kind"]) {
            results.push(["kind", 'Missing required element: StructureDefinition.kind']);
        }
        if (this["_kind"]) {
            results.push(...this._kind.doModelValidation());
        }
        if (!this["abstract"]) {
            results.push(["abstract", 'Missing required element: StructureDefinition.abstract']);
        }
        if (this["_abstract"]) {
            results.push(...this._abstract.doModelValidation());
        }
        if (this["context"]) {
            this.context.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_contextInvariant"]) {
            this._contextInvariant.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["type"]) {
            results.push(["type", 'Missing required element: StructureDefinition.type']);
        }
        if (this["_type"]) {
            results.push(...this._type.doModelValidation());
        }
        if (this["_baseDefinition"]) {
            results.push(...this._baseDefinition.doModelValidation());
        }
        if (this["_derivation"]) {
            results.push(...this._derivation.doModelValidation());
        }
        if (this["snapshot"]) {
            results.push(...this.snapshot.doModelValidation());
        }
        if (this["differential"]) {
            results.push(...this.differential.doModelValidation());
        }
        return results;
    }
}
//# sourceMappingURL=StructureDefinition.js.map