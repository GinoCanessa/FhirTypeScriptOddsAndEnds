// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * An external specification that the content is mapped to.
 */
export class StructureDefinitionMapping extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionMapping - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["comment"]) {
            this.comment = source.comment;
        }
        if (source["_comment"]) {
            this._comment = new fhir.FhirElement(source._comment);
        }
        this.identity = null;
        if (source["identity"]) {
            this.identity = source.identity;
        }
        if (this.identity === undefined) {
            this.identity = null;
        }
        if (source["_identity"]) {
            this._identity = new fhir.FhirElement(source._identity);
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["uri"]) {
            this.uri = source.uri;
        }
        if (source["_uri"]) {
            this._uri = new fhir.FhirElement(source._uri);
        }
    }
    /**
     * Check if the current StructureDefinitionMapping contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["identity"] === undefined) {
            missingElements.push("identity");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a StructureDefinitionMapping from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new StructureDefinitionMapping(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `StructureDefinitionMapping is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Identifies the types of resource or data type elements to which the extension can be applied.
 */
export class StructureDefinitionContext extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionContext - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.expression = null;
        if (source["expression"]) {
            this.expression = source.expression;
        }
        if (this.expression === undefined) {
            this.expression = null;
        }
        if (source["_expression"]) {
            this._expression = new fhir.FhirElement(source._expression);
        }
        this.type = null;
        if (source["type"]) {
            this.type = source.type;
        }
        if (this.type === undefined) {
            this.type = null;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
    }
    /**
     * Check if the current StructureDefinitionContext contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["expression"] === undefined) {
            missingElements.push("expression");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a StructureDefinitionContext from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new StructureDefinitionContext(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `StructureDefinitionContext is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A snapshot view is expressed in a standalone form that can be used and interpreted without considering the base StructureDefinition.
 */
export class StructureDefinitionSnapshot extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionSnapshot - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.element = null;
        if (source["element"]) {
            this.element = source.element.map((x) => new fhir.ElementDefinition(x));
        }
        if (this.element === undefined) {
            this.element = null;
        }
    }
    /**
     * Check if the current StructureDefinitionSnapshot contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if ((!this["element"]) || (this["element"].length === 0)) {
            missingElements.push("element");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a StructureDefinitionSnapshot from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new StructureDefinitionSnapshot(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `StructureDefinitionSnapshot is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
 */
export class StructureDefinitionDifferential extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionDifferential - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.element = null;
        if (source["element"]) {
            this.element = source.element.map((x) => new fhir.ElementDefinition(x));
        }
        if (this.element === undefined) {
            this.element = null;
        }
    }
    /**
     * Check if the current StructureDefinitionDifferential contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if ((!this["element"]) || (this["element"].length === 0)) {
            missingElements.push("element");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a StructureDefinitionDifferential from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new StructureDefinitionDifferential(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `StructureDefinitionDifferential is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.
 */
export class StructureDefinition extends fhir.DomainResource {
    /**
     * Default constructor for StructureDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'StructureDefinition';
        this.abstract = null;
        if (source["abstract"]) {
            this.abstract = source.abstract;
        }
        if (this.abstract === undefined) {
            this.abstract = null;
        }
        if (source["_abstract"]) {
            this._abstract = new fhir.FhirElement(source._abstract);
        }
        if (source["baseDefinition"]) {
            this.baseDefinition = source.baseDefinition;
        }
        if (source["_baseDefinition"]) {
            this._baseDefinition = new fhir.FhirElement(source._baseDefinition);
        }
        if (source["contact"]) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source["context"]) {
            this.context = source.context.map((x) => new fhir.StructureDefinitionContext(x));
        }
        if (source["contextInvariant"]) {
            this.contextInvariant = source.contextInvariant.map((x) => (x));
        }
        if (source["_contextInvariant"]) {
            this._contextInvariant = source._contextInvariant.map((x) => new fhir.FhirElement(x));
        }
        if (source["copyright"]) {
            this.copyright = source.copyright;
        }
        if (source["_copyright"]) {
            this._copyright = new fhir.FhirElement(source._copyright);
        }
        if (source["date"]) {
            this.date = source.date;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["derivation"]) {
            this.derivation = source.derivation;
        }
        if (source["_derivation"]) {
            this._derivation = new fhir.FhirElement(source._derivation);
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["differential"]) {
            this.differential = new fhir.StructureDefinitionDifferential(source.differential);
        }
        if (source["experimental"]) {
            this.experimental = source.experimental;
        }
        if (source["_experimental"]) {
            this._experimental = new fhir.FhirElement(source._experimental);
        }
        if (source["fhirVersion"]) {
            this.fhirVersion = source.fhirVersion;
        }
        if (source["_fhirVersion"]) {
            this._fhirVersion = new fhir.FhirElement(source._fhirVersion);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["jurisdiction"]) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["keyword"]) {
            this.keyword = source.keyword.map((x) => new fhir.Coding(x));
        }
        this.kind = null;
        if (source["kind"]) {
            this.kind = source.kind;
        }
        if (this.kind === undefined) {
            this.kind = null;
        }
        if (source["_kind"]) {
            this._kind = new fhir.FhirElement(source._kind);
        }
        if (source["mapping"]) {
            this.mapping = source.mapping.map((x) => new fhir.StructureDefinitionMapping(x));
        }
        this.name = null;
        if (source["name"]) {
            this.name = source.name;
        }
        if (this.name === undefined) {
            this.name = null;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["publisher"]) {
            this.publisher = source.publisher;
        }
        if (source["_publisher"]) {
            this._publisher = new fhir.FhirElement(source._publisher);
        }
        if (source["purpose"]) {
            this.purpose = source.purpose;
        }
        if (source["_purpose"]) {
            this._purpose = new fhir.FhirElement(source._purpose);
        }
        if (source["snapshot"]) {
            this.snapshot = new fhir.StructureDefinitionSnapshot(source.snapshot);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["title"]) {
            this.title = source.title;
        }
        if (source["_title"]) {
            this._title = new fhir.FhirElement(source._title);
        }
        this.type = null;
        if (source["type"]) {
            this.type = source.type;
        }
        if (this.type === undefined) {
            this.type = null;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
        this.url = null;
        if (source["url"]) {
            this.url = source.url;
        }
        if (this.url === undefined) {
            this.url = null;
        }
        if (source["_url"]) {
            this._url = new fhir.FhirElement(source._url);
        }
        if (source["useContext"]) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source["version"]) {
            this.version = source.version;
        }
        if (source["_version"]) {
            this._version = new fhir.FhirElement(source._version);
        }
    }
    /**
     * Check if the current StructureDefinition contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["abstract"] === undefined) {
            missingElements.push("abstract");
        }
        if (this["kind"] === undefined) {
            missingElements.push("kind");
        }
        if (this["name"] === undefined) {
            missingElements.push("name");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        if (this["url"] === undefined) {
            missingElements.push("url");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a StructureDefinition from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new StructureDefinition(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `StructureDefinition is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the StructureDefinition.context.type field
 */
export var StructureDefinitionContextTypeEnum;
(function (StructureDefinitionContextTypeEnum) {
    StructureDefinitionContextTypeEnum["FHIRPATH"] = "fhirpath";
    StructureDefinitionContextTypeEnum["ELEMENT"] = "element";
    StructureDefinitionContextTypeEnum["EXTENSION"] = "extension";
})(StructureDefinitionContextTypeEnum || (StructureDefinitionContextTypeEnum = {}));
/**
 * Code Values for the StructureDefinition.derivation field
 */
export var StructureDefinitionDerivationEnum;
(function (StructureDefinitionDerivationEnum) {
    StructureDefinitionDerivationEnum["SPECIALIZATION"] = "specialization";
    StructureDefinitionDerivationEnum["CONSTRAINT"] = "constraint";
})(StructureDefinitionDerivationEnum || (StructureDefinitionDerivationEnum = {}));
/**
 * Code Values for the StructureDefinition.kind field
 */
export var StructureDefinitionKindEnum;
(function (StructureDefinitionKindEnum) {
    StructureDefinitionKindEnum["PRIMITIVE_TYPE"] = "primitive-type";
    StructureDefinitionKindEnum["COMPLEX_TYPE"] = "complex-type";
    StructureDefinitionKindEnum["RESOURCE"] = "resource";
    StructureDefinitionKindEnum["LOGICAL"] = "logical";
})(StructureDefinitionKindEnum || (StructureDefinitionKindEnum = {}));
/**
 * Code Values for the StructureDefinition.status field
 */
export var StructureDefinitionStatusEnum;
(function (StructureDefinitionStatusEnum) {
    StructureDefinitionStatusEnum["DRAFT"] = "draft";
    StructureDefinitionStatusEnum["ACTIVE"] = "active";
    StructureDefinitionStatusEnum["RETIRED"] = "retired";
    StructureDefinitionStatusEnum["UNKNOWN"] = "unknown";
})(StructureDefinitionStatusEnum || (StructureDefinitionStatusEnum = {}));
//# sourceMappingURL=StructureDefinition.js.map