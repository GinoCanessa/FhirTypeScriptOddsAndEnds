// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
export class CoverageEligibilityRequestSupportingInfo extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityRequestSupportingInfo - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["appliesToAll"]) {
            this.appliesToAll = source.appliesToAll;
        }
        if (source["_appliesToAll"]) {
            this._appliesToAll = new fhir.FhirElement(source._appliesToAll);
        }
        this.information = null;
        if (source["information"]) {
            this.information = new fhir.Reference(source.information);
        }
        if (this.information === undefined) {
            this.information = null;
        }
        this.sequence = null;
        if (source["sequence"]) {
            this.sequence = source.sequence;
        }
        if (this.sequence === undefined) {
            this.sequence = null;
        }
        if (source["_sequence"]) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
    }
    /**
     * Check if the current CoverageEligibilityRequestSupportingInfo contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["information"] === undefined) {
            missingElements.push("information");
        }
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a CoverageEligibilityRequestSupportingInfo from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new CoverageEligibilityRequestSupportingInfo(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `CoverageEligibilityRequestSupportingInfo is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export class CoverageEligibilityRequestInsurance extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityRequestInsurance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["businessArrangement"]) {
            this.businessArrangement = source.businessArrangement;
        }
        if (source["_businessArrangement"]) {
            this._businessArrangement = new fhir.FhirElement(source._businessArrangement);
        }
        this.coverage = null;
        if (source["coverage"]) {
            this.coverage = new fhir.Reference(source.coverage);
        }
        if (this.coverage === undefined) {
            this.coverage = null;
        }
        if (source["focal"]) {
            this.focal = source.focal;
        }
        if (source["_focal"]) {
            this._focal = new fhir.FhirElement(source._focal);
        }
    }
    /**
     * Check if the current CoverageEligibilityRequestInsurance contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["coverage"] === undefined) {
            missingElements.push("coverage");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a CoverageEligibilityRequestInsurance from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new CoverageEligibilityRequestInsurance(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `CoverageEligibilityRequestInsurance is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Patient diagnosis for which care is sought.
 */
export class CoverageEligibilityRequestItemDiagnosis extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityRequestItemDiagnosis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["diagnosisCodeableConcept"]) {
            this.diagnosisCodeableConcept = new fhir.CodeableConcept(source.diagnosisCodeableConcept);
        }
        if (source["diagnosisReference"]) {
            this.diagnosisReference = new fhir.Reference(source.diagnosisReference);
        }
    }
    /**
     * Check if the current CoverageEligibilityRequestItemDiagnosis contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a CoverageEligibilityRequestItemDiagnosis from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new CoverageEligibilityRequestItemDiagnosis(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `CoverageEligibilityRequestItemDiagnosis is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Service categories or billable services for which benefit details and/or an authorization prior to service delivery may be required by the payor.
 */
export class CoverageEligibilityRequestItem extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityRequestItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["category"]) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source["detail"]) {
            this.detail = source.detail.map((x) => new fhir.Reference(x));
        }
        if (source["diagnosis"]) {
            this.diagnosis = source.diagnosis.map((x) => new fhir.CoverageEligibilityRequestItemDiagnosis(x));
        }
        if (source["facility"]) {
            this.facility = new fhir.Reference(source.facility);
        }
        if (source["modifier"]) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["productOrService"]) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        if (source["provider"]) {
            this.provider = new fhir.Reference(source.provider);
        }
        if (source["quantity"]) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source["supportingInfoSequence"]) {
            this.supportingInfoSequence = source.supportingInfoSequence.map((x) => (x));
        }
        if (source["_supportingInfoSequence"]) {
            this._supportingInfoSequence = source._supportingInfoSequence.map((x) => new fhir.FhirElement(x));
        }
        if (source["unitPrice"]) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
    }
    /**
     * Check if the current CoverageEligibilityRequestItem contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a CoverageEligibilityRequestItem from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new CoverageEligibilityRequestItem(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `CoverageEligibilityRequestItem is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.
 */
export class CoverageEligibilityRequest extends fhir.DomainResource {
    /**
     * Default constructor for CoverageEligibilityRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'CoverageEligibilityRequest';
        this.created = null;
        if (source["created"]) {
            this.created = source.created;
        }
        if (this.created === undefined) {
            this.created = null;
        }
        if (source["_created"]) {
            this._created = new fhir.FhirElement(source._created);
        }
        if (source["enterer"]) {
            this.enterer = new fhir.Reference(source.enterer);
        }
        if (source["facility"]) {
            this.facility = new fhir.Reference(source.facility);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["insurance"]) {
            this.insurance = source.insurance.map((x) => new fhir.CoverageEligibilityRequestInsurance(x));
        }
        this.insurer = null;
        if (source["insurer"]) {
            this.insurer = new fhir.Reference(source.insurer);
        }
        if (this.insurer === undefined) {
            this.insurer = null;
        }
        if (source["item"]) {
            this.item = source.item.map((x) => new fhir.CoverageEligibilityRequestItem(x));
        }
        this.patient = null;
        if (source["patient"]) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (this.patient === undefined) {
            this.patient = null;
        }
        if (source["priority"]) {
            this.priority = new fhir.CodeableConcept(source.priority);
        }
        if (source["provider"]) {
            this.provider = new fhir.Reference(source.provider);
        }
        this.purpose = null;
        if (source["purpose"]) {
            this.purpose = source.purpose.map((x) => (x));
        }
        if (this.purpose === undefined) {
            this.purpose = null;
        }
        if (source["_purpose"]) {
            this._purpose = source._purpose.map((x) => new fhir.FhirElement(x));
        }
        if (source["servicedDate"]) {
            this.servicedDate = source.servicedDate;
        }
        if (source["_servicedDate"]) {
            this._servicedDate = new fhir.FhirElement(source._servicedDate);
        }
        if (source["servicedPeriod"]) {
            this.servicedPeriod = new fhir.Period(source.servicedPeriod);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["supportingInfo"]) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.CoverageEligibilityRequestSupportingInfo(x));
        }
    }
    /**
     * Check if the current CoverageEligibilityRequest contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["created"] === undefined) {
            missingElements.push("created");
        }
        if (this["insurer"] === undefined) {
            missingElements.push("insurer");
        }
        if (this["patient"] === undefined) {
            missingElements.push("patient");
        }
        if ((!this["purpose"]) || (this["purpose"].length === 0)) {
            missingElements.push("purpose");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a CoverageEligibilityRequest from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new CoverageEligibilityRequest(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `CoverageEligibilityRequest is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the CoverageEligibilityRequest.purpose field
 */
export var CoverageEligibilityRequestPurposeEnum;
(function (CoverageEligibilityRequestPurposeEnum) {
    CoverageEligibilityRequestPurposeEnum["AUTH_REQUIREMENTS"] = "auth-requirements";
    CoverageEligibilityRequestPurposeEnum["BENEFITS"] = "benefits";
    CoverageEligibilityRequestPurposeEnum["DISCOVERY"] = "discovery";
    CoverageEligibilityRequestPurposeEnum["VALIDATION"] = "validation";
})(CoverageEligibilityRequestPurposeEnum || (CoverageEligibilityRequestPurposeEnum = {}));
/**
 * Code Values for the CoverageEligibilityRequest.status field
 */
export var CoverageEligibilityRequestStatusEnum;
(function (CoverageEligibilityRequestStatusEnum) {
    CoverageEligibilityRequestStatusEnum["ACTIVE"] = "active";
    CoverageEligibilityRequestStatusEnum["CANCELLED"] = "cancelled";
    CoverageEligibilityRequestStatusEnum["DRAFT"] = "draft";
    CoverageEligibilityRequestStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(CoverageEligibilityRequestStatusEnum || (CoverageEligibilityRequestStatusEnum = {}));
//# sourceMappingURL=CoverageEligibilityRequest.js.map