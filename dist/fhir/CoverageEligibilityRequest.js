// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: CoverageEligibilityRequest
import * as fhir from '../fhir.js';
import { ExBenefitcategoryValueSet, } from '../fhirValueSets/ExBenefitcategoryValueSet.js';
import { ServiceUsclsValueSet, } from '../fhirValueSets/ServiceUsclsValueSet.js';
import { ClaimModifiersValueSet, } from '../fhirValueSets/ClaimModifiersValueSet.js';
import { FmStatusValueSet, } from '../fhirValueSets/FmStatusValueSet.js';
import { ProcessPriorityValueSet, } from '../fhirValueSets/ProcessPriorityValueSet.js';
import { EligibilityrequestPurposeValueSet, } from '../fhirValueSets/EligibilityrequestPurposeValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
export class CoverageEligibilityRequestSupportingInfo extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityRequestSupportingInfo - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'CoverageEligibilityRequestSupportingInfo';
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['information']) {
            this.information = new fhir.Reference(source.information);
        }
        else {
            this.information = null;
        }
        if (source['appliesToAll']) {
            this.appliesToAll = new fhir.FhirBoolean({ value: source.appliesToAll });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['sequence']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property sequence:fhir.FhirPositiveInt fhir: CoverageEligibilityRequest.supportingInfo.sequence:positiveInt", }));
        }
        if (this["sequence"]) {
            outcome.issue.push(...this.sequence.doModelValidation().issue);
        }
        if (!this['information']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property information:fhir.Reference fhir: CoverageEligibilityRequest.supportingInfo.information:Reference", }));
        }
        if (this["information"]) {
            outcome.issue.push(...this.information.doModelValidation().issue);
        }
        if (this["appliesToAll"]) {
            outcome.issue.push(...this.appliesToAll.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export class CoverageEligibilityRequestInsurance extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityRequestInsurance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'CoverageEligibilityRequestInsurance';
        if (source['focal']) {
            this.focal = new fhir.FhirBoolean({ value: source.focal });
        }
        if (source['coverage']) {
            this.coverage = new fhir.Reference(source.coverage);
        }
        else {
            this.coverage = null;
        }
        if (source['businessArrangement']) {
            this.businessArrangement = new fhir.FhirString({ value: source.businessArrangement });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["focal"]) {
            outcome.issue.push(...this.focal.doModelValidation().issue);
        }
        if (!this['coverage']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property coverage:fhir.Reference fhir: CoverageEligibilityRequest.insurance.coverage:Reference", }));
        }
        if (this["coverage"]) {
            outcome.issue.push(...this.coverage.doModelValidation().issue);
        }
        if (this["businessArrangement"]) {
            outcome.issue.push(...this.businessArrangement.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Patient diagnosis for which care is sought.
 */
export class CoverageEligibilityRequestItemDiagnosis extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityRequestItemDiagnosis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'CoverageEligibilityRequestItemDiagnosis';
        this.__diagnosisIsChoice = true;
        if (source['diagnosis']) {
            this.diagnosis = source.diagnosis;
        }
        else if (source['diagnosisCodeableConcept']) {
            this.diagnosis = new fhir.CodeableConcept(source.diagnosisCodeableConcept);
        }
        else if (source['diagnosisReference']) {
            this.diagnosis = new fhir.Reference(source.diagnosisReference);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Service categories or billable services for which benefit details and/or an authorization prior to service delivery may be required by the payor.
 */
export class CoverageEligibilityRequestItem extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityRequestItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'CoverageEligibilityRequestItem';
        /**
         * Exceptions, special conditions and supporting information applicable for this service or product line.
         */
        this.supportingInfoSequence = [];
        /**
         * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
         */
        this.modifier = [];
        /**
         * Patient diagnosis for which care is sought.
         */
        this.diagnosis = [];
        /**
         * The plan/proposal/order describing the proposed service in detail.
         */
        this.detail = [];
        if (source['supportingInfoSequence']) {
            this.supportingInfoSequence = source.supportingInfoSequence.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['facility']) {
            this.facility = new fhir.Reference(source.facility);
        }
        if (source['diagnosis']) {
            this.diagnosis = source.diagnosis.map((x) => new fhir.CoverageEligibilityRequestItemDiagnosis(x));
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Example-bound Value Set for category
     */
    static categoryExampleValueSet() {
        return ExBenefitcategoryValueSet;
    }
    /**
     * Example-bound Value Set for productOrService
     */
    static productOrServiceExampleValueSet() {
        return ServiceUsclsValueSet;
    }
    /**
     * Example-bound Value Set for modifier
     */
    static modifierExampleValueSet() {
        return ClaimModifiersValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["supportingInfoSequence"]) {
            this.supportingInfoSequence.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["category"]) {
            outcome.issue.push(...this.category.doModelValidation().issue);
        }
        if (this["productOrService"]) {
            outcome.issue.push(...this.productOrService.doModelValidation().issue);
        }
        if (this["modifier"]) {
            this.modifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["provider"]) {
            outcome.issue.push(...this.provider.doModelValidation().issue);
        }
        if (this["quantity"]) {
            outcome.issue.push(...this.quantity.doModelValidation().issue);
        }
        if (this["unitPrice"]) {
            outcome.issue.push(...this.unitPrice.doModelValidation().issue);
        }
        if (this["facility"]) {
            outcome.issue.push(...this.facility.doModelValidation().issue);
        }
        if (this["diagnosis"]) {
            this.diagnosis.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["detail"]) {
            this.detail.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.
 */
export class CoverageEligibilityRequest extends fhir.DomainResource {
    /**
     * Default constructor for CoverageEligibilityRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'CoverageEligibilityRequest';
        /**
         * A unique identifier assigned to this coverage eligiblity request.
         */
        this.identifier = [];
        /**
         * Code to specify whether requesting: prior authorization requirements for some service categories or billing codes; benefits for coverages specified or discovered; discovery and return of coverages for the patient; and/or validation that the specified coverage is in-force at the date/period specified or 'now' if not specified.
         */
        this.purpose = [];
        this.__servicedIsChoice = true;
        /**
         * Often there are multiple jurisdiction specific valuesets which are required.
         */
        this.supportingInfo = [];
        /**
         * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
         */
        this.insurance = [];
        /**
         * Service categories or billable services for which benefit details and/or an authorization prior to service delivery may be required by the payor.
         */
        this.item = [];
        this.resourceType = 'CoverageEligibilityRequest';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['priority']) {
            this.priority = new fhir.CodeableConcept(source.priority);
        }
        if (source['purpose']) {
            this.purpose = source.purpose.map((x) => x);
        }
        else {
            this.purpose = null;
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['serviced']) {
            this.serviced = source.serviced;
        }
        else if (source['servicedDate']) {
            this.serviced = new fhir.FhirDate({ value: source.servicedDate });
        }
        else if (source['servicedPeriod']) {
            this.serviced = new fhir.Period(source.servicedPeriod);
        }
        if (source['created']) {
            this.created = new fhir.FhirDateTime({ value: source.created });
        }
        else {
            this.created = null;
        }
        if (source['enterer']) {
            this.enterer = new fhir.Reference(source.enterer);
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider);
        }
        if (source['insurer']) {
            this.insurer = new fhir.Reference(source.insurer);
        }
        else {
            this.insurer = null;
        }
        if (source['facility']) {
            this.facility = new fhir.Reference(source.facility);
        }
        if (source['supportingInfo']) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.CoverageEligibilityRequestSupportingInfo(x));
        }
        if (source['insurance']) {
            this.insurance = source.insurance.map((x) => new fhir.CoverageEligibilityRequestInsurance(x));
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.CoverageEligibilityRequestItem(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return FmStatusValueSet;
    }
    /**
     * Example-bound Value Set for priority
     */
    static priorityExampleValueSet() {
        return ProcessPriorityValueSet;
    }
    /**
     * Required-bound Value Set for purpose
     */
    static purposeRequiredValueSet() {
        return EligibilityrequestPurposeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'CoverageEligibilityRequest' fhir: CoverageEligibilityRequest.resourceType:'CoverageEligibilityRequest'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:FmStatusValueSetEnum fhir: CoverageEligibilityRequest.status:code", }));
        }
        if (this["priority"]) {
            outcome.issue.push(...this.priority.doModelValidation().issue);
        }
        if (!this['purpose']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property purpose:EligibilityrequestPurposeValueSetEnum[] fhir: CoverageEligibilityRequest.purpose:code", }));
        }
        else if (!Array.isArray(this.purpose)) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue, diagnostics: "Found scalar in array property purpose:EligibilityrequestPurposeValueSetEnum[] fhir: CoverageEligibilityRequest.purpose:code", }));
        }
        else if (this.purpose.length === 0) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property purpose:EligibilityrequestPurposeValueSetEnum[] fhir: CoverageEligibilityRequest.purpose:code", }));
        }
        if (!this['patient']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property patient:fhir.Reference fhir: CoverageEligibilityRequest.patient:Reference", }));
        }
        if (this["patient"]) {
            outcome.issue.push(...this.patient.doModelValidation().issue);
        }
        if (!this['created']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property created:fhir.FhirDateTime fhir: CoverageEligibilityRequest.created:dateTime", }));
        }
        if (this["created"]) {
            outcome.issue.push(...this.created.doModelValidation().issue);
        }
        if (this["enterer"]) {
            outcome.issue.push(...this.enterer.doModelValidation().issue);
        }
        if (this["provider"]) {
            outcome.issue.push(...this.provider.doModelValidation().issue);
        }
        if (!this['insurer']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property insurer:fhir.Reference fhir: CoverageEligibilityRequest.insurer:Reference", }));
        }
        if (this["insurer"]) {
            outcome.issue.push(...this.insurer.doModelValidation().issue);
        }
        if (this["facility"]) {
            outcome.issue.push(...this.facility.doModelValidation().issue);
        }
        if (this["supportingInfo"]) {
            this.supportingInfo.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["insurance"]) {
            this.insurance.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["item"]) {
            this.item.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=CoverageEligibilityRequest.js.map