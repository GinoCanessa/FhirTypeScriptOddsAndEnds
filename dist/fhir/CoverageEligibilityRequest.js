// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: CoverageEligibilityRequest
import * as fhir from '../fhir.js';
import { ExBenefitcategoryValueSet } from '../fhirValueSets/ExBenefitcategoryValueSet.js';
import { ServiceUsclsValueSet } from '../fhirValueSets/ServiceUsclsValueSet.js';
import { ClaimModifiersValueSet } from '../fhirValueSets/ClaimModifiersValueSet.js';
import { FmStatusValueSet } from '../fhirValueSets/FmStatusValueSet.js';
import { ProcessPriorityValueSet } from '../fhirValueSets/ProcessPriorityValueSet.js';
import { EligibilityrequestPurposeValueSet } from '../fhirValueSets/EligibilityrequestPurposeValueSet.js';
/**
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
export class CoverageEligibilityRequestSupportingInfo extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityRequestSupportingInfo - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['sequence']) {
            this.sequence = source.sequence;
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source['information']) {
            this.information = new fhir.Reference(source.information);
        }
        else {
            this.information = null;
        }
        if (source['appliesToAll']) {
            this.appliesToAll = source.appliesToAll;
        }
        if (source['_appliesToAll']) {
            this._appliesToAll = new fhir.FhirElement(source._appliesToAll);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["sequence"]) {
            results.push(["sequence", 'Missing required element: CoverageEligibilityRequest.supportingInfo.sequence']);
        }
        if (this["_sequence"]) {
            results.push(...this._sequence.doModelValidation());
        }
        if (!this["information"]) {
            results.push(["information", 'Missing required element: CoverageEligibilityRequest.supportingInfo.information']);
        }
        if (this["information"]) {
            results.push(...this.information.doModelValidation());
        }
        if (this["_appliesToAll"]) {
            results.push(...this._appliesToAll.doModelValidation());
        }
        return results;
    }
}
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export class CoverageEligibilityRequestInsurance extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityRequestInsurance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['focal']) {
            this.focal = source.focal;
        }
        if (source['_focal']) {
            this._focal = new fhir.FhirElement(source._focal);
        }
        if (source['coverage']) {
            this.coverage = new fhir.Reference(source.coverage);
        }
        else {
            this.coverage = null;
        }
        if (source['businessArrangement']) {
            this.businessArrangement = source.businessArrangement;
        }
        if (source['_businessArrangement']) {
            this._businessArrangement = new fhir.FhirElement(source._businessArrangement);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_focal"]) {
            results.push(...this._focal.doModelValidation());
        }
        if (!this["coverage"]) {
            results.push(["coverage", 'Missing required element: CoverageEligibilityRequest.insurance.coverage']);
        }
        if (this["coverage"]) {
            results.push(...this.coverage.doModelValidation());
        }
        if (this["_businessArrangement"]) {
            results.push(...this._businessArrangement.doModelValidation());
        }
        return results;
    }
}
/**
 * Patient diagnosis for which care is sought.
 */
export class CoverageEligibilityRequestItemDiagnosis extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityRequestItemDiagnosis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['diagnosisCodeableConcept']) {
            this.diagnosisCodeableConcept = new fhir.CodeableConcept(source.diagnosisCodeableConcept);
        }
        if (source['diagnosisReference']) {
            this.diagnosisReference = new fhir.Reference(source.diagnosisReference);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["diagnosisCodeableConcept"]) {
            results.push(...this.diagnosisCodeableConcept.doModelValidation());
        }
        if (this["diagnosisReference"]) {
            results.push(...this.diagnosisReference.doModelValidation());
        }
        return results;
    }
}
/**
 * Service categories or billable services for which benefit details and/or an authorization prior to service delivery may be required by the payor.
 */
export class CoverageEligibilityRequestItem extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityRequestItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['supportingInfoSequence']) {
            this.supportingInfoSequence = source.supportingInfoSequence.map((x) => (x));
        }
        if (source['_supportingInfoSequence']) {
            this._supportingInfoSequence = source._supportingInfoSequence.map((x) => new fhir.FhirElement(x));
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['facility']) {
            this.facility = new fhir.Reference(source.facility);
        }
        if (source['diagnosis']) {
            this.diagnosis = source.diagnosis.map((x) => new fhir.CoverageEligibilityRequestItemDiagnosis(x));
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Example-bound Value Set for category
     */
    static categoryExampleValueSet() {
        return ExBenefitcategoryValueSet;
    }
    /**
     * Example-bound Value Set for productOrService
     */
    static productOrServiceExampleValueSet() {
        return ServiceUsclsValueSet;
    }
    /**
     * Example-bound Value Set for modifier
     */
    static modifierExampleValueSet() {
        return ClaimModifiersValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_supportingInfoSequence"]) {
            this._supportingInfoSequence.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["category"]) {
            results.push(...this.category.doModelValidation());
        }
        if (this["productOrService"]) {
            results.push(...this.productOrService.doModelValidation());
        }
        if (this["modifier"]) {
            this.modifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["provider"]) {
            results.push(...this.provider.doModelValidation());
        }
        if (this["quantity"]) {
            results.push(...this.quantity.doModelValidation());
        }
        if (this["unitPrice"]) {
            results.push(...this.unitPrice.doModelValidation());
        }
        if (this["facility"]) {
            results.push(...this.facility.doModelValidation());
        }
        if (this["diagnosis"]) {
            this.diagnosis.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["detail"]) {
            this.detail.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.
 */
export class CoverageEligibilityRequest extends fhir.DomainResource {
    /**
     * Default constructor for CoverageEligibilityRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'CoverageEligibilityRequest';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['priority']) {
            this.priority = new fhir.CodeableConcept(source.priority);
        }
        if (source['purpose']) {
            this.purpose = source.purpose.map((x) => (x));
        }
        else {
            this.purpose = null;
        }
        if (source['_purpose']) {
            this._purpose = source._purpose.map((x) => new fhir.FhirElement(x));
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['servicedDate']) {
            this.servicedDate = source.servicedDate;
        }
        if (source['_servicedDate']) {
            this._servicedDate = new fhir.FhirElement(source._servicedDate);
        }
        if (source['servicedPeriod']) {
            this.servicedPeriod = new fhir.Period(source.servicedPeriod);
        }
        if (source['created']) {
            this.created = source.created;
        }
        else {
            this.created = null;
        }
        if (source['_created']) {
            this._created = new fhir.FhirElement(source._created);
        }
        if (source['enterer']) {
            this.enterer = new fhir.Reference(source.enterer);
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider);
        }
        if (source['insurer']) {
            this.insurer = new fhir.Reference(source.insurer);
        }
        else {
            this.insurer = null;
        }
        if (source['facility']) {
            this.facility = new fhir.Reference(source.facility);
        }
        if (source['supportingInfo']) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.CoverageEligibilityRequestSupportingInfo(x));
        }
        if (source['insurance']) {
            this.insurance = source.insurance.map((x) => new fhir.CoverageEligibilityRequestInsurance(x));
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.CoverageEligibilityRequestItem(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return FmStatusValueSet;
    }
    /**
     * Example-bound Value Set for priority
     */
    static priorityExampleValueSet() {
        return ProcessPriorityValueSet;
    }
    /**
     * Required-bound Value Set for purpose
     */
    static purposeRequiredValueSet() {
        return EligibilityrequestPurposeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: CoverageEligibilityRequest.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: CoverageEligibilityRequest.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["priority"]) {
            results.push(...this.priority.doModelValidation());
        }
        if ((!this["purpose"]) || (this["purpose"].length === 0)) {
            results.push(["purpose", 'Missing required element: CoverageEligibilityRequest.purpose']);
        }
        if (this["_purpose"]) {
            this._purpose.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["patient"]) {
            results.push(["patient", 'Missing required element: CoverageEligibilityRequest.patient']);
        }
        if (this["patient"]) {
            results.push(...this.patient.doModelValidation());
        }
        if (this["_servicedDate"]) {
            results.push(...this._servicedDate.doModelValidation());
        }
        if (this["servicedPeriod"]) {
            results.push(...this.servicedPeriod.doModelValidation());
        }
        if (!this["created"]) {
            results.push(["created", 'Missing required element: CoverageEligibilityRequest.created']);
        }
        if (this["_created"]) {
            results.push(...this._created.doModelValidation());
        }
        if (this["enterer"]) {
            results.push(...this.enterer.doModelValidation());
        }
        if (this["provider"]) {
            results.push(...this.provider.doModelValidation());
        }
        if (!this["insurer"]) {
            results.push(["insurer", 'Missing required element: CoverageEligibilityRequest.insurer']);
        }
        if (this["insurer"]) {
            results.push(...this.insurer.doModelValidation());
        }
        if (this["facility"]) {
            results.push(...this.facility.doModelValidation());
        }
        if (this["supportingInfo"]) {
            this.supportingInfo.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["insurance"]) {
            this.insurance.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["item"]) {
            this.item.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=CoverageEligibilityRequest.js.map