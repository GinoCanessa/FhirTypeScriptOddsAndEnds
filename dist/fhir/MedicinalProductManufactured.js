// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * The manufactured item as contained in the packaged medicinal product.
 */
export class MedicinalProductManufactured extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProductManufactured - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'MedicinalProductManufactured';
        if (source["ingredient"]) {
            this.ingredient = source.ingredient.map((x) => new fhir.Reference(x));
        }
        this.manufacturedDoseForm = null;
        if (source["manufacturedDoseForm"]) {
            this.manufacturedDoseForm = new fhir.CodeableConcept(source.manufacturedDoseForm);
        }
        if (this.manufacturedDoseForm === undefined) {
            this.manufacturedDoseForm = null;
        }
        if (source["manufacturer"]) {
            this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x));
        }
        if (source["otherCharacteristics"]) {
            this.otherCharacteristics = source.otherCharacteristics.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["physicalCharacteristics"]) {
            this.physicalCharacteristics = new fhir.ProdCharacteristic(source.physicalCharacteristics);
        }
        this.quantity = null;
        if (source["quantity"]) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (this.quantity === undefined) {
            this.quantity = null;
        }
        if (source["unitOfPresentation"]) {
            this.unitOfPresentation = new fhir.CodeableConcept(source.unitOfPresentation);
        }
    }
    /**
     * Check if the current MedicinalProductManufactured contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["manufacturedDoseForm"] === undefined) {
            missingElements.push("manufacturedDoseForm");
        }
        if (this["quantity"] === undefined) {
            missingElements.push("quantity");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MedicinalProductManufactured from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new MedicinalProductManufactured(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `MedicinalProductManufactured is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
//# sourceMappingURL=MedicinalProductManufactured.js.map