// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProductManufactured
import * as fhir from '../fhir.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * The manufactured item as contained in the packaged medicinal product.
 */
export class MedicinalProductManufactured extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProductManufactured - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MedicinalProductManufactured';
        /**
         * Manufacturer of the item (Note that this should be named "manufacturer" but it currently causes technical issues).
         */
        this.manufacturer = [];
        /**
         * Ingredient.
         */
        this.ingredient = [];
        /**
         * Other codeable characteristics.
         */
        this.otherCharacteristics = [];
        this.resourceType = 'MedicinalProductManufactured';
        if (source['manufacturedDoseForm']) {
            this.manufacturedDoseForm = new fhir.CodeableConcept(source.manufacturedDoseForm);
        }
        else {
            this.manufacturedDoseForm = null;
        }
        if (source['unitOfPresentation']) {
            this.unitOfPresentation = new fhir.CodeableConcept(source.unitOfPresentation);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        else {
            this.quantity = null;
        }
        if (source['manufacturer']) {
            this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x));
        }
        if (source['ingredient']) {
            this.ingredient = source.ingredient.map((x) => new fhir.Reference(x));
        }
        if (source['physicalCharacteristics']) {
            this.physicalCharacteristics = new fhir.ProdCharacteristic(source.physicalCharacteristics);
        }
        if (source['otherCharacteristics']) {
            this.otherCharacteristics = source.otherCharacteristics.map((x) => new fhir.CodeableConcept(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'MedicinalProductManufactured' fhir: MedicinalProductManufactured.resourceType:'MedicinalProductManufactured'", }));
        }
        if (!this['manufacturedDoseForm']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property manufacturedDoseForm:fhir.CodeableConcept fhir: MedicinalProductManufactured.manufacturedDoseForm:CodeableConcept", }));
        }
        if (this["manufacturedDoseForm"]) {
            outcome.issue.push(...this.manufacturedDoseForm.doModelValidation().issue);
        }
        if (this["unitOfPresentation"]) {
            outcome.issue.push(...this.unitOfPresentation.doModelValidation().issue);
        }
        if (!this['quantity']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property quantity:fhir.Quantity fhir: MedicinalProductManufactured.quantity:Quantity", }));
        }
        if (this["quantity"]) {
            outcome.issue.push(...this.quantity.doModelValidation().issue);
        }
        if (this["manufacturer"]) {
            this.manufacturer.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["ingredient"]) {
            this.ingredient.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["physicalCharacteristics"]) {
            outcome.issue.push(...this.physicalCharacteristics.doModelValidation().issue);
        }
        if (this["otherCharacteristics"]) {
            this.otherCharacteristics.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=MedicinalProductManufactured.js.map