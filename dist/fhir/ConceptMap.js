// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.
 */
export class ConceptMapGroupElementTargetDependsOn extends fhir.BackboneElement {
    /**
     * Default constructor for ConceptMapGroupElementTargetDependsOn - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["display"]) {
            this.display = source.display;
        }
        if (source["_display"]) {
            this._display = new fhir.FhirElement(source._display);
        }
        this.property = null;
        if (source["property"]) {
            this.property = source.property;
        }
        if (this.property === undefined) {
            this.property = null;
        }
        if (source["_property"]) {
            this._property = new fhir.FhirElement(source._property);
        }
        if (source["system"]) {
            this.system = source.system;
        }
        if (source["_system"]) {
            this._system = new fhir.FhirElement(source._system);
        }
        this.value = null;
        if (source["value"]) {
            this.value = source.value;
        }
        if (this.value === undefined) {
            this.value = null;
        }
        if (source["_value"]) {
            this._value = new fhir.FhirElement(source._value);
        }
    }
    /**
     * Check if the current ConceptMapGroupElementTargetDependsOn contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["property"] === undefined) {
            missingElements.push("property");
        }
        if (this["value"] === undefined) {
            missingElements.push("value");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ConceptMapGroupElementTargetDependsOn from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ConceptMapGroupElementTargetDependsOn(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ConceptMapGroupElementTargetDependsOn is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Ideally there would only be one map, with equal or equivalent mapping. But multiple maps are allowed for several narrower options, or to assert that other concepts are unmatched.
 */
export class ConceptMapGroupElementTarget extends fhir.BackboneElement {
    /**
     * Default constructor for ConceptMapGroupElementTarget - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["code"]) {
            this.code = source.code;
        }
        if (source["_code"]) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source["comment"]) {
            this.comment = source.comment;
        }
        if (source["_comment"]) {
            this._comment = new fhir.FhirElement(source._comment);
        }
        if (source["dependsOn"]) {
            this.dependsOn = source.dependsOn.map((x) => new fhir.ConceptMapGroupElementTargetDependsOn(x));
        }
        if (source["display"]) {
            this.display = source.display;
        }
        if (source["_display"]) {
            this._display = new fhir.FhirElement(source._display);
        }
        this.equivalence = null;
        if (source["equivalence"]) {
            this.equivalence = source.equivalence;
        }
        if (this.equivalence === undefined) {
            this.equivalence = null;
        }
        if (source["_equivalence"]) {
            this._equivalence = new fhir.FhirElement(source._equivalence);
        }
        if (source["product"]) {
            this.product = source.product.map((x) => new fhir.ConceptMapGroupElementTargetDependsOn(x));
        }
    }
    /**
     * Check if the current ConceptMapGroupElementTarget contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["equivalence"] === undefined) {
            missingElements.push("equivalence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ConceptMapGroupElementTarget from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ConceptMapGroupElementTarget(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ConceptMapGroupElementTarget is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Generally, the ideal is that there would only be one mapping for each concept in the source value set, but a given concept may be mapped multiple times with different comments or dependencies.
 */
export class ConceptMapGroupElement extends fhir.BackboneElement {
    /**
     * Default constructor for ConceptMapGroupElement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["code"]) {
            this.code = source.code;
        }
        if (source["_code"]) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source["display"]) {
            this.display = source.display;
        }
        if (source["_display"]) {
            this._display = new fhir.FhirElement(source._display);
        }
        if (source["target"]) {
            this.target = source.target.map((x) => new fhir.ConceptMapGroupElementTarget(x));
        }
    }
    /**
     * Check if the current ConceptMapGroupElement contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ConceptMapGroupElement from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ConceptMapGroupElement(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ConceptMapGroupElement is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * This only applies if the source code has a system value that matches the system defined for the group.
 */
export class ConceptMapGroupUnmapped extends fhir.BackboneElement {
    /**
     * Default constructor for ConceptMapGroupUnmapped - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["code"]) {
            this.code = source.code;
        }
        if (source["_code"]) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source["display"]) {
            this.display = source.display;
        }
        if (source["_display"]) {
            this._display = new fhir.FhirElement(source._display);
        }
        this.mode = null;
        if (source["mode"]) {
            this.mode = source.mode;
        }
        if (this.mode === undefined) {
            this.mode = null;
        }
        if (source["_mode"]) {
            this._mode = new fhir.FhirElement(source._mode);
        }
        if (source["url"]) {
            this.url = source.url;
        }
        if (source["_url"]) {
            this._url = new fhir.FhirElement(source._url);
        }
    }
    /**
     * Check if the current ConceptMapGroupUnmapped contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["mode"] === undefined) {
            missingElements.push("mode");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ConceptMapGroupUnmapped from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ConceptMapGroupUnmapped(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ConceptMapGroupUnmapped is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A group of mappings that all have the same source and target system.
 */
export class ConceptMapGroup extends fhir.BackboneElement {
    /**
     * Default constructor for ConceptMapGroup - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.element = null;
        if (source["element"]) {
            this.element = source.element.map((x) => new fhir.ConceptMapGroupElement(x));
        }
        if (this.element === undefined) {
            this.element = null;
        }
        if (source["source"]) {
            this.source = source.source;
        }
        if (source["_source"]) {
            this._source = new fhir.FhirElement(source._source);
        }
        if (source["sourceVersion"]) {
            this.sourceVersion = source.sourceVersion;
        }
        if (source["_sourceVersion"]) {
            this._sourceVersion = new fhir.FhirElement(source._sourceVersion);
        }
        if (source["target"]) {
            this.target = source.target;
        }
        if (source["_target"]) {
            this._target = new fhir.FhirElement(source._target);
        }
        if (source["targetVersion"]) {
            this.targetVersion = source.targetVersion;
        }
        if (source["_targetVersion"]) {
            this._targetVersion = new fhir.FhirElement(source._targetVersion);
        }
        if (source["unmapped"]) {
            this.unmapped = new fhir.ConceptMapGroupUnmapped(source.unmapped);
        }
    }
    /**
     * Check if the current ConceptMapGroup contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if ((!this["element"]) || (this["element"].length === 0)) {
            missingElements.push("element");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ConceptMapGroup from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ConceptMapGroup(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ConceptMapGroup is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.
 */
export class ConceptMap extends fhir.DomainResource {
    /**
     * Default constructor for ConceptMap - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'ConceptMap';
        if (source["contact"]) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source["copyright"]) {
            this.copyright = source.copyright;
        }
        if (source["_copyright"]) {
            this._copyright = new fhir.FhirElement(source._copyright);
        }
        if (source["date"]) {
            this.date = source.date;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["experimental"]) {
            this.experimental = source.experimental;
        }
        if (source["_experimental"]) {
            this._experimental = new fhir.FhirElement(source._experimental);
        }
        if (source["group"]) {
            this.group = source.group.map((x) => new fhir.ConceptMapGroup(x));
        }
        if (source["identifier"]) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source["jurisdiction"]) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["publisher"]) {
            this.publisher = source.publisher;
        }
        if (source["_publisher"]) {
            this._publisher = new fhir.FhirElement(source._publisher);
        }
        if (source["purpose"]) {
            this.purpose = source.purpose;
        }
        if (source["_purpose"]) {
            this._purpose = new fhir.FhirElement(source._purpose);
        }
        if (source["sourceUri"]) {
            this.sourceUri = source.sourceUri;
        }
        if (source["_sourceUri"]) {
            this._sourceUri = new fhir.FhirElement(source._sourceUri);
        }
        if (source["sourceCanonical"]) {
            this.sourceCanonical = source.sourceCanonical;
        }
        if (source["_sourceCanonical"]) {
            this._sourceCanonical = new fhir.FhirElement(source._sourceCanonical);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["targetUri"]) {
            this.targetUri = source.targetUri;
        }
        if (source["_targetUri"]) {
            this._targetUri = new fhir.FhirElement(source._targetUri);
        }
        if (source["targetCanonical"]) {
            this.targetCanonical = source.targetCanonical;
        }
        if (source["_targetCanonical"]) {
            this._targetCanonical = new fhir.FhirElement(source._targetCanonical);
        }
        if (source["title"]) {
            this.title = source.title;
        }
        if (source["_title"]) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source["url"]) {
            this.url = source.url;
        }
        if (source["_url"]) {
            this._url = new fhir.FhirElement(source._url);
        }
        if (source["useContext"]) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source["version"]) {
            this.version = source.version;
        }
        if (source["_version"]) {
            this._version = new fhir.FhirElement(source._version);
        }
    }
    /**
     * Check if the current ConceptMap contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ConceptMap from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ConceptMap(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ConceptMap is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the ConceptMap.group.element.target.equivalence field
 */
export var ConceptMapGroupElementTargetEquivalenceEnum;
(function (ConceptMapGroupElementTargetEquivalenceEnum) {
    ConceptMapGroupElementTargetEquivalenceEnum["RELATEDTO"] = "relatedto";
    ConceptMapGroupElementTargetEquivalenceEnum["EQUIVALENT"] = "equivalent";
    ConceptMapGroupElementTargetEquivalenceEnum["EQUAL"] = "equal";
    ConceptMapGroupElementTargetEquivalenceEnum["WIDER"] = "wider";
    ConceptMapGroupElementTargetEquivalenceEnum["SUBSUMES"] = "subsumes";
    ConceptMapGroupElementTargetEquivalenceEnum["NARROWER"] = "narrower";
    ConceptMapGroupElementTargetEquivalenceEnum["SPECIALIZES"] = "specializes";
    ConceptMapGroupElementTargetEquivalenceEnum["INEXACT"] = "inexact";
    ConceptMapGroupElementTargetEquivalenceEnum["UNMATCHED"] = "unmatched";
    ConceptMapGroupElementTargetEquivalenceEnum["DISJOINT"] = "disjoint";
})(ConceptMapGroupElementTargetEquivalenceEnum || (ConceptMapGroupElementTargetEquivalenceEnum = {}));
/**
 * Code Values for the ConceptMap.group.unmapped.mode field
 */
export var ConceptMapGroupUnmappedModeEnum;
(function (ConceptMapGroupUnmappedModeEnum) {
    ConceptMapGroupUnmappedModeEnum["PROVIDED"] = "provided";
    ConceptMapGroupUnmappedModeEnum["FIXED"] = "fixed";
    ConceptMapGroupUnmappedModeEnum["OTHER_MAP"] = "other-map";
})(ConceptMapGroupUnmappedModeEnum || (ConceptMapGroupUnmappedModeEnum = {}));
/**
 * Code Values for the ConceptMap.status field
 */
export var ConceptMapStatusEnum;
(function (ConceptMapStatusEnum) {
    ConceptMapStatusEnum["DRAFT"] = "draft";
    ConceptMapStatusEnum["ACTIVE"] = "active";
    ConceptMapStatusEnum["RETIRED"] = "retired";
    ConceptMapStatusEnum["UNKNOWN"] = "unknown";
})(ConceptMapStatusEnum || (ConceptMapStatusEnum = {}));
//# sourceMappingURL=ConceptMap.js.map