// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Related artifacts such as additional documentation, justification, or bibliographic references.
 */
export class RelatedArtifact extends fhir.FhirElement {
    /**
     * Default constructor for RelatedArtifact - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["citation"]) {
            this.citation = source.citation;
        }
        if (source["_citation"]) {
            this._citation = new fhir.FhirElement(source._citation);
        }
        if (source["display"]) {
            this.display = source.display;
        }
        if (source["_display"]) {
            this._display = new fhir.FhirElement(source._display);
        }
        if (source["document"]) {
            this.document = new fhir.Attachment(source.document);
        }
        if (source["label"]) {
            this.label = source.label;
        }
        if (source["_label"]) {
            this._label = new fhir.FhirElement(source._label);
        }
        if (source["resource"]) {
            this.resource = source.resource;
        }
        if (source["_resource"]) {
            this._resource = new fhir.FhirElement(source._resource);
        }
        this.type = null;
        if (source["type"]) {
            this.type = source.type;
        }
        if (this.type === undefined) {
            this.type = null;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source["url"]) {
            this.url = source.url;
        }
        if (source["_url"]) {
            this._url = new fhir.FhirElement(source._url);
        }
    }
    /**
     * Check if the current RelatedArtifact contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a RelatedArtifact from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new RelatedArtifact(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `RelatedArtifact is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the RelatedArtifact.type field
 */
export var RelatedArtifactTypeEnum;
(function (RelatedArtifactTypeEnum) {
    RelatedArtifactTypeEnum["DOCUMENTATION"] = "documentation";
    RelatedArtifactTypeEnum["JUSTIFICATION"] = "justification";
    RelatedArtifactTypeEnum["CITATION"] = "citation";
    RelatedArtifactTypeEnum["PREDECESSOR"] = "predecessor";
    RelatedArtifactTypeEnum["SUCCESSOR"] = "successor";
    RelatedArtifactTypeEnum["DERIVED_FROM"] = "derived-from";
    RelatedArtifactTypeEnum["DEPENDS_ON"] = "depends-on";
    RelatedArtifactTypeEnum["COMPOSED_OF"] = "composed-of";
})(RelatedArtifactTypeEnum || (RelatedArtifactTypeEnum = {}));
//# sourceMappingURL=RelatedArtifact.js.map