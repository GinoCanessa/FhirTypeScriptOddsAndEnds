// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * One or more sets of investigations (signs, symptoms, etc.). The actual grouping of investigations varies greatly depending on the type and context of the assessment. These investigations may include data generated during the assessment process, or data previously generated and recorded that is pertinent to the outcomes.
 */
export class ClinicalImpressionInvestigation extends fhir.BackboneElement {
    /**
     * Default constructor for ClinicalImpressionInvestigation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.code = null;
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (this.code === undefined) {
            this.code = null;
        }
        if (source["item"]) {
            this.item = source.item.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Check if the current ClinicalImpressionInvestigation contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClinicalImpressionInvestigation from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new ClinicalImpressionInvestigation(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClinicalImpressionInvestigation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Specific findings or diagnoses that were considered likely or relevant to ongoing treatment.
 */
export class ClinicalImpressionFinding extends fhir.BackboneElement {
    /**
     * Default constructor for ClinicalImpressionFinding - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["basis"]) {
            this.basis = source.basis;
        }
        if (source["_basis"]) {
            this._basis = new fhir.FhirElement(source._basis);
        }
        if (source["itemCodeableConcept"]) {
            this.itemCodeableConcept = new fhir.CodeableConcept(source.itemCodeableConcept);
        }
        if (source["itemReference"]) {
            this.itemReference = new fhir.Reference(source.itemReference);
        }
    }
    /**
     * Check if the current ClinicalImpressionFinding contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClinicalImpressionFinding from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new ClinicalImpressionFinding(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClinicalImpressionFinding is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score.
 */
export class ClinicalImpression extends fhir.DomainResource {
    /**
     * Default constructor for ClinicalImpression - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'ClinicalImpression';
        if (source["assessor"]) {
            this.assessor = new fhir.Reference(source.assessor);
        }
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source["date"]) {
            this.date = source.date;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["effectiveDateTime"]) {
            this.effectiveDateTime = source.effectiveDateTime;
        }
        if (source["_effectiveDateTime"]) {
            this._effectiveDateTime = new fhir.FhirElement(source._effectiveDateTime);
        }
        if (source["effectivePeriod"]) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source["encounter"]) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source["finding"]) {
            this.finding = source.finding.map((x) => new fhir.ClinicalImpressionFinding(x));
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["investigation"]) {
            this.investigation = source.investigation.map((x) => new fhir.ClinicalImpressionInvestigation(x));
        }
        if (source["note"]) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source["previous"]) {
            this.previous = new fhir.Reference(source.previous);
        }
        if (source["problem"]) {
            this.problem = source.problem.map((x) => new fhir.Reference(x));
        }
        if (source["prognosisCodeableConcept"]) {
            this.prognosisCodeableConcept = source.prognosisCodeableConcept.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["prognosisReference"]) {
            this.prognosisReference = source.prognosisReference.map((x) => new fhir.Reference(x));
        }
        if (source["protocol"]) {
            this.protocol = source.protocol.map((x) => (x));
        }
        if (source["_protocol"]) {
            this._protocol = source._protocol.map((x) => new fhir.FhirElement(x));
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["statusReason"]) {
            this.statusReason = new fhir.CodeableConcept(source.statusReason);
        }
        this.subject = null;
        if (source["subject"]) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (this.subject === undefined) {
            this.subject = null;
        }
        if (source["summary"]) {
            this.summary = source.summary;
        }
        if (source["_summary"]) {
            this._summary = new fhir.FhirElement(source._summary);
        }
        if (source["supportingInfo"]) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Check if the current ClinicalImpression contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["subject"] === undefined) {
            missingElements.push("subject");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClinicalImpression from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new ClinicalImpression(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClinicalImpression is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the ClinicalImpression.status field
 */
export var ClinicalImpressionStatusEnum;
(function (ClinicalImpressionStatusEnum) {
    ClinicalImpressionStatusEnum["IN_PROGRESS"] = "in-progress";
    ClinicalImpressionStatusEnum["COMPLETED"] = "completed";
    ClinicalImpressionStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(ClinicalImpressionStatusEnum || (ClinicalImpressionStatusEnum = {}));
//# sourceMappingURL=ClinicalImpression.js.map