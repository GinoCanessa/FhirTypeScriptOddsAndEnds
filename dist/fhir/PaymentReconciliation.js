// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Distribution of the payment amount for a previously acknowledged payable.
 */
export class PaymentReconciliationDetail extends fhir.BackboneElement {
    /**
     * Default constructor for PaymentReconciliationDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["amount"]) {
            this.amount = new fhir.Money(source.amount);
        }
        if (source["date"]) {
            this.date = source.date;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["identifier"]) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source["payee"]) {
            this.payee = new fhir.Reference(source.payee);
        }
        if (source["predecessor"]) {
            this.predecessor = new fhir.Identifier(source.predecessor);
        }
        if (source["request"]) {
            this.request = new fhir.Reference(source.request);
        }
        if (source["response"]) {
            this.response = new fhir.Reference(source.response);
        }
        if (source["responsible"]) {
            this.responsible = new fhir.Reference(source.responsible);
        }
        if (source["submitter"]) {
            this.submitter = new fhir.Reference(source.submitter);
        }
        this.type = null;
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (this.type === undefined) {
            this.type = null;
        }
    }
    /**
     * Check if the current PaymentReconciliationDetail contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a PaymentReconciliationDetail from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new PaymentReconciliationDetail(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `PaymentReconciliationDetail is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A note that describes or explains the processing in a human readable form.
 */
export class PaymentReconciliationProcessNote extends fhir.BackboneElement {
    /**
     * Default constructor for PaymentReconciliationProcessNote - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["text"]) {
            this.text = source.text;
        }
        if (source["_text"]) {
            this._text = new fhir.FhirElement(source._text);
        }
        if (source["type"]) {
            this.type = source.type;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
    }
    /**
     * Check if the current PaymentReconciliationProcessNote contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a PaymentReconciliationProcessNote from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new PaymentReconciliationProcessNote(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `PaymentReconciliationProcessNote is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * This resource provides the details including amount of a payment and allocates the payment items being paid.
 */
export class PaymentReconciliation extends fhir.DomainResource {
    /**
     * Default constructor for PaymentReconciliation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'PaymentReconciliation';
        this.created = null;
        if (source["created"]) {
            this.created = source.created;
        }
        if (this.created === undefined) {
            this.created = null;
        }
        if (source["_created"]) {
            this._created = new fhir.FhirElement(source._created);
        }
        if (source["detail"]) {
            this.detail = source.detail.map((x) => new fhir.PaymentReconciliationDetail(x));
        }
        if (source["disposition"]) {
            this.disposition = source.disposition;
        }
        if (source["_disposition"]) {
            this._disposition = new fhir.FhirElement(source._disposition);
        }
        if (source["formCode"]) {
            this.formCode = new fhir.CodeableConcept(source.formCode);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["outcome"]) {
            this.outcome = source.outcome;
        }
        if (source["_outcome"]) {
            this._outcome = new fhir.FhirElement(source._outcome);
        }
        this.paymentAmount = null;
        if (source["paymentAmount"]) {
            this.paymentAmount = new fhir.Money(source.paymentAmount);
        }
        if (this.paymentAmount === undefined) {
            this.paymentAmount = null;
        }
        this.paymentDate = null;
        if (source["paymentDate"]) {
            this.paymentDate = source.paymentDate;
        }
        if (this.paymentDate === undefined) {
            this.paymentDate = null;
        }
        if (source["_paymentDate"]) {
            this._paymentDate = new fhir.FhirElement(source._paymentDate);
        }
        if (source["paymentIdentifier"]) {
            this.paymentIdentifier = new fhir.Identifier(source.paymentIdentifier);
        }
        if (source["paymentIssuer"]) {
            this.paymentIssuer = new fhir.Reference(source.paymentIssuer);
        }
        if (source["period"]) {
            this.period = new fhir.Period(source.period);
        }
        if (source["processNote"]) {
            this.processNote = source.processNote.map((x) => new fhir.PaymentReconciliationProcessNote(x));
        }
        if (source["request"]) {
            this.request = new fhir.Reference(source.request);
        }
        if (source["requestor"]) {
            this.requestor = new fhir.Reference(source.requestor);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
    }
    /**
     * Check if the current PaymentReconciliation contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["created"] === undefined) {
            missingElements.push("created");
        }
        if (this["paymentAmount"] === undefined) {
            missingElements.push("paymentAmount");
        }
        if (this["paymentDate"] === undefined) {
            missingElements.push("paymentDate");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a PaymentReconciliation from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new PaymentReconciliation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `PaymentReconciliation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the PaymentReconciliation.processNote.type field
 */
export var PaymentReconciliationProcessNoteTypeEnum;
(function (PaymentReconciliationProcessNoteTypeEnum) {
    PaymentReconciliationProcessNoteTypeEnum["DISPLAY"] = "display";
    PaymentReconciliationProcessNoteTypeEnum["PRINT"] = "print";
    PaymentReconciliationProcessNoteTypeEnum["PRINTOPER"] = "printoper";
})(PaymentReconciliationProcessNoteTypeEnum || (PaymentReconciliationProcessNoteTypeEnum = {}));
/**
 * Code Values for the PaymentReconciliation.outcome field
 */
export var PaymentReconciliationOutcomeEnum;
(function (PaymentReconciliationOutcomeEnum) {
    PaymentReconciliationOutcomeEnum["QUEUED"] = "queued";
    PaymentReconciliationOutcomeEnum["COMPLETE"] = "complete";
    PaymentReconciliationOutcomeEnum["ERROR"] = "error";
    PaymentReconciliationOutcomeEnum["PARTIAL"] = "partial";
})(PaymentReconciliationOutcomeEnum || (PaymentReconciliationOutcomeEnum = {}));
/**
 * Code Values for the PaymentReconciliation.status field
 */
export var PaymentReconciliationStatusEnum;
(function (PaymentReconciliationStatusEnum) {
    PaymentReconciliationStatusEnum["ACTIVE"] = "active";
    PaymentReconciliationStatusEnum["CANCELLED"] = "cancelled";
    PaymentReconciliationStatusEnum["DRAFT"] = "draft";
    PaymentReconciliationStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(PaymentReconciliationStatusEnum || (PaymentReconciliationStatusEnum = {}));
//# sourceMappingURL=PaymentReconciliation.js.map