// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * This is the base resource type for everything.
 */
export class Resource {
    /**
     * Default constructor for Resource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        this.resourceType = 'Resource';
        if (source["id"]) {
            this.id = source.id;
        }
        if (source["_id"]) {
            this._id = new fhir.FhirElement(source._id);
        }
        if (source["implicitRules"]) {
            this.implicitRules = source.implicitRules;
        }
        if (source["_implicitRules"]) {
            this._implicitRules = new fhir.FhirElement(source._implicitRules);
        }
        if (source["language"]) {
            this.language = source.language;
        }
        if (source["_language"]) {
            this._language = new fhir.FhirElement(source._language);
        }
        if (source["meta"]) {
            this.meta = new fhir.Meta(source.meta);
        }
    }
    /**
     * Check if the current Resource contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        return missingElements;
    }
    /**
     * Factory function to create a Resource from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new Resource(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `Resource is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
//# sourceMappingURL=Resource.js.map