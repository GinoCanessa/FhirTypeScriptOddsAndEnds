// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Resource
import * as fhir from '../fhir.js';
import { LanguagesValueSet, } from '../fhirValueSets/LanguagesValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * This is the base resource type for everything.
 */
export class Resource {
    /**
     * Default constructor for Resource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        this.__dataType = 'Resource';
        if (options.allowUnknownElements === true) {
            Object.assign(this, source);
        }
        this.resourceType = 'Resource';
        if (source['id']) {
            this.id = new fhir.FhirId({ value: source.id });
        }
        if (source['meta']) {
            this.meta = new fhir.Meta(source.meta);
        }
        if (source['implicitRules']) {
            this.implicitRules = new fhir.FhirUri({ value: source.implicitRules });
        }
        if (source['language']) {
            this.language = new fhir.FhirCode({ value: source.language });
        }
    }
    /**
     * Preferred-bound Value Set for language
     */
    static languagePreferredValueSet() {
        return LanguagesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = new fhir.OperationOutcome({ issue: [] });
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:string fhir: Resource.resourceType:string", }));
        }
        if (this["id"]) {
            outcome.issue.push(...this.id.doModelValidation().issue);
        }
        if (this["meta"]) {
            outcome.issue.push(...this.meta.doModelValidation().issue);
        }
        if (this["implicitRules"]) {
            outcome.issue.push(...this.implicitRules.doModelValidation().issue);
        }
        if (this["language"]) {
            outcome.issue.push(...this.language.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=Resource.js.map