// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Both Bundle.link and Bundle.entry.link are defined to support providing additional context when Bundles are used (e.g. [HATEOAS](http://en.wikipedia.org/wiki/HATEOAS)).
 * Bundle.entry.link corresponds to links found in the HTTP header if the resource in the entry was [read](http.html#read) directly.
 * This specification defines some specific uses of Bundle.link for [searching](search.html#conformance) and [paging](http.html#paging), but no specific uses for Bundle.entry.link, and no defined function in a transaction - the meaning is implementation specific.
 */
export class BundleLink extends fhir.BackboneElement {
    /**
     * Default constructor for BundleLink - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.relation = null;
        if (source["relation"]) {
            this.relation = source.relation;
        }
        if (this.relation === undefined) {
            this.relation = null;
        }
        if (source["_relation"]) {
            this._relation = new fhir.FhirElement(source._relation);
        }
        this.url = null;
        if (source["url"]) {
            this.url = source.url;
        }
        if (this.url === undefined) {
            this.url = null;
        }
        if (source["_url"]) {
            this._url = new fhir.FhirElement(source._url);
        }
    }
    /**
     * Check if the current BundleLink contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["relation"] === undefined) {
            missingElements.push("relation");
        }
        if (this["url"] === undefined) {
            missingElements.push("url");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a BundleLink from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new BundleLink(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `BundleLink is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Information about the search process that lead to the creation of this entry.
 */
export class BundleEntrySearch extends fhir.BackboneElement {
    /**
     * Default constructor for BundleEntrySearch - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["mode"]) {
            this.mode = source.mode;
        }
        if (source["_mode"]) {
            this._mode = new fhir.FhirElement(source._mode);
        }
        if (source["score"]) {
            this.score = source.score;
        }
        if (source["_score"]) {
            this._score = new fhir.FhirElement(source._score);
        }
    }
    /**
     * Check if the current BundleEntrySearch contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a BundleEntrySearch from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new BundleEntrySearch(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `BundleEntrySearch is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Additional information about how this entry should be processed as part of a transaction or batch.  For history, it shows how the entry was processed to create the version contained in the entry.
 */
export class BundleEntryRequest extends fhir.BackboneElement {
    /**
     * Default constructor for BundleEntryRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["ifMatch"]) {
            this.ifMatch = source.ifMatch;
        }
        if (source["_ifMatch"]) {
            this._ifMatch = new fhir.FhirElement(source._ifMatch);
        }
        if (source["ifModifiedSince"]) {
            this.ifModifiedSince = source.ifModifiedSince;
        }
        if (source["_ifModifiedSince"]) {
            this._ifModifiedSince = new fhir.FhirElement(source._ifModifiedSince);
        }
        if (source["ifNoneExist"]) {
            this.ifNoneExist = source.ifNoneExist;
        }
        if (source["_ifNoneExist"]) {
            this._ifNoneExist = new fhir.FhirElement(source._ifNoneExist);
        }
        if (source["ifNoneMatch"]) {
            this.ifNoneMatch = source.ifNoneMatch;
        }
        if (source["_ifNoneMatch"]) {
            this._ifNoneMatch = new fhir.FhirElement(source._ifNoneMatch);
        }
        this.method = null;
        if (source["method"]) {
            this.method = source.method;
        }
        if (this.method === undefined) {
            this.method = null;
        }
        if (source["_method"]) {
            this._method = new fhir.FhirElement(source._method);
        }
        this.url = null;
        if (source["url"]) {
            this.url = source.url;
        }
        if (this.url === undefined) {
            this.url = null;
        }
        if (source["_url"]) {
            this._url = new fhir.FhirElement(source._url);
        }
    }
    /**
     * Check if the current BundleEntryRequest contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["method"] === undefined) {
            missingElements.push("method");
        }
        if (this["url"] === undefined) {
            missingElements.push("url");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a BundleEntryRequest from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new BundleEntryRequest(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `BundleEntryRequest is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Indicates the results of processing the corresponding 'request' entry in the batch or transaction being responded to or what the results of an operation where when returning history.
 */
export class BundleEntryResponse extends fhir.BackboneElement {
    /**
     * Default constructor for BundleEntryResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        var _a;
        super(source);
        if (source["etag"]) {
            this.etag = source.etag;
        }
        if (source["_etag"]) {
            this._etag = new fhir.FhirElement(source._etag);
        }
        if (source["lastModified"]) {
            this.lastModified = source.lastModified;
        }
        if (source["_lastModified"]) {
            this._lastModified = new fhir.FhirElement(source._lastModified);
        }
        if (source["location"]) {
            this.location = source.location;
        }
        if (source["_location"]) {
            this._location = new fhir.FhirElement(source._location);
        }
        if (source["outcome"]) {
            this.outcome = ((_a = fhir.fhirResourceFactory(source.outcome)) !== null && _a !== void 0 ? _a : undefined);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
    }
    /**
     * Check if the current BundleEntryResponse contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a BundleEntryResponse from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new BundleEntryResponse(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `BundleEntryResponse is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * An entry in a bundle resource - will either contain a resource or information about a resource (transactions and history only).
 */
export class BundleEntry extends fhir.BackboneElement {
    /**
     * Default constructor for BundleEntry - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        var _a;
        super(source);
        if (source["fullUrl"]) {
            this.fullUrl = source.fullUrl;
        }
        if (source["_fullUrl"]) {
            this._fullUrl = new fhir.FhirElement(source._fullUrl);
        }
        if (source["link"]) {
            this.link = source.link.map((x) => new fhir.BundleLink(x));
        }
        if (source["request"]) {
            this.request = new fhir.BundleEntryRequest(source.request);
        }
        if (source["resource"]) {
            this.resource = ((_a = fhir.fhirResourceFactory(source.resource)) !== null && _a !== void 0 ? _a : undefined);
        }
        if (source["response"]) {
            this.response = new fhir.BundleEntryResponse(source.response);
        }
        if (source["search"]) {
            this.search = new fhir.BundleEntrySearch(source.search);
        }
    }
    /**
     * Check if the current BundleEntry contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a BundleEntry from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new BundleEntry(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `BundleEntry is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A container for a collection of resources.
 */
export class Bundle extends fhir.Resource {
    /**
     * Default constructor for Bundle - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Bundle';
        if (source["entry"]) {
            this.entry = source.entry.map((x) => new fhir.BundleEntry(x));
        }
        if (source["identifier"]) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source["link"]) {
            this.link = source.link.map((x) => new fhir.BundleLink(x));
        }
        if (source["signature"]) {
            this.signature = new fhir.Signature(source.signature);
        }
        if (source["timestamp"]) {
            this.timestamp = source.timestamp;
        }
        if (source["_timestamp"]) {
            this._timestamp = new fhir.FhirElement(source._timestamp);
        }
        if (source["total"]) {
            this.total = source.total;
        }
        if (source["_total"]) {
            this._total = new fhir.FhirElement(source._total);
        }
        this.type = null;
        if (source["type"]) {
            this.type = source.type;
        }
        if (this.type === undefined) {
            this.type = null;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
    }
    /**
     * Check if the current Bundle contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Bundle from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new Bundle(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Bundle is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the Bundle.entry.search.mode field
 */
export var BundleEntrySearchModeEnum;
(function (BundleEntrySearchModeEnum) {
    BundleEntrySearchModeEnum["MATCH"] = "match";
    BundleEntrySearchModeEnum["INCLUDE"] = "include";
    BundleEntrySearchModeEnum["OUTCOME"] = "outcome";
})(BundleEntrySearchModeEnum || (BundleEntrySearchModeEnum = {}));
/**
 * Code Values for the Bundle.entry.request.method field
 */
export var BundleEntryRequestMethodEnum;
(function (BundleEntryRequestMethodEnum) {
    BundleEntryRequestMethodEnum["GET"] = "GET";
    BundleEntryRequestMethodEnum["HEAD"] = "HEAD";
    BundleEntryRequestMethodEnum["POST"] = "POST";
    BundleEntryRequestMethodEnum["PUT"] = "PUT";
    BundleEntryRequestMethodEnum["DELETE"] = "DELETE";
    BundleEntryRequestMethodEnum["PATCH"] = "PATCH";
})(BundleEntryRequestMethodEnum || (BundleEntryRequestMethodEnum = {}));
/**
 * Code Values for the Bundle.type field
 */
export var BundleTypeEnum;
(function (BundleTypeEnum) {
    BundleTypeEnum["DOCUMENT"] = "document";
    BundleTypeEnum["MESSAGE"] = "message";
    BundleTypeEnum["TRANSACTION"] = "transaction";
    BundleTypeEnum["TRANSACTION_RESPONSE"] = "transaction-response";
    BundleTypeEnum["BATCH"] = "batch";
    BundleTypeEnum["BATCH_RESPONSE"] = "batch-response";
    BundleTypeEnum["HISTORY"] = "history";
    BundleTypeEnum["SEARCHSET"] = "searchset";
    BundleTypeEnum["COLLECTION"] = "collection";
})(BundleTypeEnum || (BundleTypeEnum = {}));
//# sourceMappingURL=Bundle.js.map