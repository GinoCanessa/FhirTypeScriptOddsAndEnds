// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Bundle
import * as fhir from '../fhir.js';
import { SearchEntryModeValueSet } from '../fhirValueSets/SearchEntryModeValueSet.js';
import { HttpVerbValueSet } from '../fhirValueSets/HttpVerbValueSet.js';
import { BundleTypeValueSet } from '../fhirValueSets/BundleTypeValueSet.js';
/**
 * Both Bundle.link and Bundle.entry.link are defined to support providing additional context when Bundles are used (e.g. [HATEOAS](http://en.wikipedia.org/wiki/HATEOAS)).
 * Bundle.entry.link corresponds to links found in the HTTP header if the resource in the entry was [read](http.html#read) directly.
 * This specification defines some specific uses of Bundle.link for [searching](search.html#conformance) and [paging](http.html#paging), but no specific uses for Bundle.entry.link, and no defined function in a transaction - the meaning is implementation specific.
 */
export class BundleLink extends fhir.BackboneElement {
    /**
     * Default constructor for BundleLink - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['relation']) {
            this.relation = source.relation;
        }
        else {
            this.relation = null;
        }
        if (source['_relation']) {
            this._relation = new fhir.FhirElement(source._relation);
        }
        if (source['url']) {
            this.url = source.url;
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            this._url = new fhir.FhirElement(source._url);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["relation"]) {
            results.push(["relation", 'Missing required element: Bundle.link.relation']);
        }
        if (this["_relation"]) {
            results.push(...this._relation.doModelValidation());
        }
        if (!this["url"]) {
            results.push(["url", 'Missing required element: Bundle.link.url']);
        }
        if (this["_url"]) {
            results.push(...this._url.doModelValidation());
        }
        return results;
    }
}
/**
 * Information about the search process that lead to the creation of this entry.
 */
export class BundleEntrySearch extends fhir.BackboneElement {
    /**
     * Default constructor for BundleEntrySearch - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['mode']) {
            this.mode = source.mode;
        }
        if (source['_mode']) {
            this._mode = new fhir.FhirElement(source._mode);
        }
        if (source['score']) {
            this.score = source.score;
        }
        if (source['_score']) {
            this._score = new fhir.FhirElement(source._score);
        }
    }
    /**
     * Required-bound Value Set for mode
     */
    modeRequiredValueSet() {
        return SearchEntryModeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_mode"]) {
            results.push(...this._mode.doModelValidation());
        }
        if (this["_score"]) {
            results.push(...this._score.doModelValidation());
        }
        return results;
    }
}
/**
 * Additional information about how this entry should be processed as part of a transaction or batch.  For history, it shows how the entry was processed to create the version contained in the entry.
 */
export class BundleEntryRequest extends fhir.BackboneElement {
    /**
     * Default constructor for BundleEntryRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['method']) {
            this.method = source.method;
        }
        else {
            this.method = null;
        }
        if (source['_method']) {
            this._method = new fhir.FhirElement(source._method);
        }
        if (source['url']) {
            this.url = source.url;
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            this._url = new fhir.FhirElement(source._url);
        }
        if (source['ifNoneMatch']) {
            this.ifNoneMatch = source.ifNoneMatch;
        }
        if (source['_ifNoneMatch']) {
            this._ifNoneMatch = new fhir.FhirElement(source._ifNoneMatch);
        }
        if (source['ifModifiedSince']) {
            this.ifModifiedSince = source.ifModifiedSince;
        }
        if (source['_ifModifiedSince']) {
            this._ifModifiedSince = new fhir.FhirElement(source._ifModifiedSince);
        }
        if (source['ifMatch']) {
            this.ifMatch = source.ifMatch;
        }
        if (source['_ifMatch']) {
            this._ifMatch = new fhir.FhirElement(source._ifMatch);
        }
        if (source['ifNoneExist']) {
            this.ifNoneExist = source.ifNoneExist;
        }
        if (source['_ifNoneExist']) {
            this._ifNoneExist = new fhir.FhirElement(source._ifNoneExist);
        }
    }
    /**
     * Required-bound Value Set for method
     */
    methodRequiredValueSet() {
        return HttpVerbValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["method"]) {
            results.push(["method", 'Missing required element: Bundle.entry.request.method']);
        }
        if (this["_method"]) {
            results.push(...this._method.doModelValidation());
        }
        if (!this["url"]) {
            results.push(["url", 'Missing required element: Bundle.entry.request.url']);
        }
        if (this["_url"]) {
            results.push(...this._url.doModelValidation());
        }
        if (this["_ifNoneMatch"]) {
            results.push(...this._ifNoneMatch.doModelValidation());
        }
        if (this["_ifModifiedSince"]) {
            results.push(...this._ifModifiedSince.doModelValidation());
        }
        if (this["_ifMatch"]) {
            results.push(...this._ifMatch.doModelValidation());
        }
        if (this["_ifNoneExist"]) {
            results.push(...this._ifNoneExist.doModelValidation());
        }
        return results;
    }
}
/**
 * Indicates the results of processing the corresponding 'request' entry in the batch or transaction being responded to or what the results of an operation where when returning history.
 */
export class BundleEntryResponse extends fhir.BackboneElement {
    /**
     * Default constructor for BundleEntryResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        var _a;
        super(source);
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['location']) {
            this.location = source.location;
        }
        if (source['_location']) {
            this._location = new fhir.FhirElement(source._location);
        }
        if (source['etag']) {
            this.etag = source.etag;
        }
        if (source['_etag']) {
            this._etag = new fhir.FhirElement(source._etag);
        }
        if (source['lastModified']) {
            this.lastModified = source.lastModified;
        }
        if (source['_lastModified']) {
            this._lastModified = new fhir.FhirElement(source._lastModified);
        }
        if (source['outcome']) {
            this.outcome = ((_a = fhir.resourceFactory(source.outcome)) !== null && _a !== void 0 ? _a : undefined);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["status"]) {
            results.push(["status", 'Missing required element: Bundle.entry.response.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["_location"]) {
            results.push(...this._location.doModelValidation());
        }
        if (this["_etag"]) {
            results.push(...this._etag.doModelValidation());
        }
        if (this["_lastModified"]) {
            results.push(...this._lastModified.doModelValidation());
        }
        if (this["outcome"]) {
            results.push(...this.outcome.doModelValidation());
        }
        return results;
    }
}
/**
 * An entry in a bundle resource - will either contain a resource or information about a resource (transactions and history only).
 */
export class BundleEntry extends fhir.BackboneElement {
    /**
     * Default constructor for BundleEntry - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        var _a;
        super(source);
        if (source['link']) {
            this.link = source.link.map((x) => new fhir.BundleLink(x));
        }
        if (source['fullUrl']) {
            this.fullUrl = source.fullUrl;
        }
        if (source['_fullUrl']) {
            this._fullUrl = new fhir.FhirElement(source._fullUrl);
        }
        if (source['resource']) {
            this.resource = ((_a = fhir.resourceFactory(source.resource)) !== null && _a !== void 0 ? _a : undefined);
        }
        if (source['search']) {
            this.search = new fhir.BundleEntrySearch(source.search);
        }
        if (source['request']) {
            this.request = new fhir.BundleEntryRequest(source.request);
        }
        if (source['response']) {
            this.response = new fhir.BundleEntryResponse(source.response);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["link"]) {
            this.link.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_fullUrl"]) {
            results.push(...this._fullUrl.doModelValidation());
        }
        if (this["resource"]) {
            results.push(...this.resource.doModelValidation());
        }
        if (this["search"]) {
            results.push(...this.search.doModelValidation());
        }
        if (this["request"]) {
            results.push(...this.request.doModelValidation());
        }
        if (this["response"]) {
            results.push(...this.response.doModelValidation());
        }
        return results;
    }
    /**
     * Access a bundle.entry[].resource as a typed resource
     */
    resourceAs() {
        return this.resource;
    }
}
/**
 * A container for a collection of resources.
 */
export class Bundle extends fhir.Resource {
    /**
     * Default constructor for Bundle - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Bundle';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source['timestamp']) {
            this.timestamp = source.timestamp;
        }
        if (source['_timestamp']) {
            this._timestamp = new fhir.FhirElement(source._timestamp);
        }
        if (source['total']) {
            this.total = source.total;
        }
        if (source['_total']) {
            this._total = new fhir.FhirElement(source._total);
        }
        if (source['link']) {
            this.link = source.link.map((x) => new fhir.BundleLink(x));
        }
        if (source['entry']) {
            this.entry = source.entry.map((x) => new fhir.BundleEntry(x));
        }
        if (source['signature']) {
            this.signature = new fhir.Signature(source.signature);
        }
    }
    /**
     * Required-bound Value Set for type
     */
    typeRequiredValueSet() {
        return BundleTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: Bundle.resourceType']);
        }
        if (this["identifier"]) {
            results.push(...this.identifier.doModelValidation());
        }
        if (!this["type"]) {
            results.push(["type", 'Missing required element: Bundle.type']);
        }
        if (this["_type"]) {
            results.push(...this._type.doModelValidation());
        }
        if (this["_timestamp"]) {
            results.push(...this._timestamp.doModelValidation());
        }
        if (this["_total"]) {
            results.push(...this._total.doModelValidation());
        }
        if (this["link"]) {
            this.link.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["entry"]) {
            this.entry.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["signature"]) {
            results.push(...this.signature.doModelValidation());
        }
        return results;
    }
}
//# sourceMappingURL=Bundle.js.map