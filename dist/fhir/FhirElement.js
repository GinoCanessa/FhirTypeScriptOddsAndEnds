// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Element
import * as fhir from '../fhir.js';
/**
 * Base definition for all elements in a resource.
 */
export class FhirElement {
    /**
     * Default constructor for FhirElement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        this.__dataType = 'Element';
        /**
         * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
         */
        this.extension = [];
        if (options.allowUnknownElements === true) {
            Object.assign(this, source);
        }
        if (source['id']) {
            this.id = new fhir.FhirString({ value: source.id });
        }
        if (source['extension']) {
            this.extension = source.extension.map((x) => new fhir.Extension(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = new fhir.OperationOutcome({ issue: [] });
        if (this["id"]) {
            outcome.issue.push(...this.id.doModelValidation().issue);
        }
        if (this["extension"]) {
            this.extension.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=FhirElement.js.map