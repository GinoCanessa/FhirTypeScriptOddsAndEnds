// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Base definition for all elements in a resource.
 */
export class FhirElement {
    /**
     * Default constructor for FhirElement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        if (source["extension"]) {
            this.extension = source.extension.map((x) => new fhir.Extension(x));
        }
        if (source["id"]) {
            this.id = source.id;
        }
        if (source["_id"]) {
            this._id = new fhir.FhirElement(source._id);
        }
    }
    /**
     * Check if the current FhirElement contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        return missingElements;
    }
    /**
     * Factory function to create a FhirElement from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new FhirElement(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `FhirElement is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
//# sourceMappingURL=FhirElement.js.map