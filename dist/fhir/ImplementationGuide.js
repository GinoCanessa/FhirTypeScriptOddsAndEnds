// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ImplementationGuide
import * as fhir from '../fhir.js';
import { ResourceTypesValueSet } from '../fhirValueSets/ResourceTypesValueSet.js';
import { FHIRVersionValueSet } from '../fhirValueSets/FHIRVersionValueSet.js';
import { GuidePageGenerationValueSet } from '../fhirValueSets/GuidePageGenerationValueSet.js';
import { GuideParameterCodeValueSet } from '../fhirValueSets/GuideParameterCodeValueSet.js';
import { PublicationStatusValueSet } from '../fhirValueSets/PublicationStatusValueSet.js';
import { SpdxLicenseValueSet } from '../fhirValueSets/SpdxLicenseValueSet.js';
/**
 * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
 */
export class ImplementationGuideDependsOn extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideDependsOn - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['uri']) {
            this.uri = source.uri;
        }
        else {
            this.uri = null;
        }
        if (source['_uri']) {
            this._uri = new fhir.FhirElement(source._uri);
        }
        if (source['packageId']) {
            this.packageId = source.packageId;
        }
        if (source['_packageId']) {
            this._packageId = new fhir.FhirElement(source._packageId);
        }
        if (source['version']) {
            this.version = source.version;
        }
        if (source['_version']) {
            this._version = new fhir.FhirElement(source._version);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["uri"]) {
            results.push(["uri", 'Missing required element: ImplementationGuide.dependsOn.uri']);
        }
        if (this["_uri"]) {
            results.push(...this._uri.doModelValidation());
        }
        if (this["_packageId"]) {
            results.push(...this._packageId.doModelValidation());
        }
        if (this["_version"]) {
            results.push(...this._version.doModelValidation());
        }
        return results;
    }
}
/**
 * See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.
 */
export class ImplementationGuideGlobal extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideGlobal - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source['profile']) {
            this.profile = source.profile;
        }
        else {
            this.profile = null;
        }
        if (source['_profile']) {
            this._profile = new fhir.FhirElement(source._profile);
        }
    }
    /**
     * Required-bound Value Set for type
     */
    static typeRequiredValueSet() {
        return ResourceTypesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["type"]) {
            results.push(["type", 'Missing required element: ImplementationGuide.global.type']);
        }
        if (this["_type"]) {
            results.push(...this._type.doModelValidation());
        }
        if (!this["profile"]) {
            results.push(["profile", 'Missing required element: ImplementationGuide.global.profile']);
        }
        if (this["_profile"]) {
            results.push(...this._profile.doModelValidation());
        }
        return results;
    }
}
/**
 * Groupings are arbitrary sub-divisions of content. Typically, they are used to help build Table of Contents automatically.
 */
export class ImplementationGuideDefinitionGrouping extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideDefinitionGrouping - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['name']) {
            this.name = source.name;
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["name"]) {
            results.push(["name", 'Missing required element: ImplementationGuide.definition.grouping.name']);
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        return results;
    }
}
/**
 * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
 */
export class ImplementationGuideDefinitionResource extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideDefinitionResource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['reference']) {
            this.reference = new fhir.Reference(source.reference);
        }
        else {
            this.reference = null;
        }
        if (source['fhirVersion']) {
            this.fhirVersion = source.fhirVersion.map((x) => (x));
        }
        if (source['_fhirVersion']) {
            this._fhirVersion = source._fhirVersion.map((x) => new fhir.FhirElement(x));
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['exampleBoolean']) {
            this.exampleBoolean = source.exampleBoolean;
        }
        if (source['_exampleBoolean']) {
            this._exampleBoolean = new fhir.FhirElement(source._exampleBoolean);
        }
        if (source['exampleCanonical']) {
            this.exampleCanonical = source.exampleCanonical;
        }
        if (source['_exampleCanonical']) {
            this._exampleCanonical = new fhir.FhirElement(source._exampleCanonical);
        }
        if (source['groupingId']) {
            this.groupingId = source.groupingId;
        }
        if (source['_groupingId']) {
            this._groupingId = new fhir.FhirElement(source._groupingId);
        }
    }
    /**
     * Required-bound Value Set for fhirVersion
     */
    static fhirVersionRequiredValueSet() {
        return FHIRVersionValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["reference"]) {
            results.push(["reference", 'Missing required element: ImplementationGuide.definition.resource.reference']);
        }
        if (this["reference"]) {
            results.push(...this.reference.doModelValidation());
        }
        if (this["_fhirVersion"]) {
            this._fhirVersion.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["_exampleBoolean"]) {
            results.push(...this._exampleBoolean.doModelValidation());
        }
        if (this["_exampleCanonical"]) {
            results.push(...this._exampleCanonical.doModelValidation());
        }
        if (this["_groupingId"]) {
            results.push(...this._groupingId.doModelValidation());
        }
        return results;
    }
}
/**
 * Pages automatically become sections if they have sub-pages. By convention, the home page is called index.html.
 */
export class ImplementationGuideDefinitionPage extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideDefinitionPage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['nameUrl']) {
            this.nameUrl = source.nameUrl;
        }
        if (source['_nameUrl']) {
            this._nameUrl = new fhir.FhirElement(source._nameUrl);
        }
        if (source['nameReference']) {
            this.nameReference = new fhir.Reference(source.nameReference);
        }
        if (source['title']) {
            this.title = source.title;
        }
        else {
            this.title = null;
        }
        if (source['_title']) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source['generation']) {
            this.generation = source.generation;
        }
        else {
            this.generation = null;
        }
        if (source['_generation']) {
            this._generation = new fhir.FhirElement(source._generation);
        }
        if (source['page']) {
            this.page = source.page.map((x) => new fhir.ImplementationGuideDefinitionPage(x));
        }
    }
    /**
     * Required-bound Value Set for generation
     */
    static generationRequiredValueSet() {
        return GuidePageGenerationValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_nameUrl"]) {
            results.push(...this._nameUrl.doModelValidation());
        }
        if (this["nameReference"]) {
            results.push(...this.nameReference.doModelValidation());
        }
        if (!this["title"]) {
            results.push(["title", 'Missing required element: ImplementationGuide.definition.page.title']);
        }
        if (this["_title"]) {
            results.push(...this._title.doModelValidation());
        }
        if (!this["generation"]) {
            results.push(["generation", 'Missing required element: ImplementationGuide.definition.page.generation']);
        }
        if (this["_generation"]) {
            results.push(...this._generation.doModelValidation());
        }
        if (this["page"]) {
            this.page.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Defines how IG is built by tools.
 */
export class ImplementationGuideDefinitionParameter extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideDefinitionParameter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = source.code;
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source['value']) {
            this.value = source.value;
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            this._value = new fhir.FhirElement(source._value);
        }
    }
    /**
     * Required-bound Value Set for code
     */
    static codeRequiredValueSet() {
        return GuideParameterCodeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["code"]) {
            results.push(["code", 'Missing required element: ImplementationGuide.definition.parameter.code']);
        }
        if (this["_code"]) {
            results.push(...this._code.doModelValidation());
        }
        if (!this["value"]) {
            results.push(["value", 'Missing required element: ImplementationGuide.definition.parameter.value']);
        }
        if (this["_value"]) {
            results.push(...this._value.doModelValidation());
        }
        return results;
    }
}
/**
 * A template for building resources.
 */
export class ImplementationGuideDefinitionTemplate extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideDefinitionTemplate - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = source.code;
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source['source']) {
            this.source = source.source;
        }
        else {
            this.source = null;
        }
        if (source['_source']) {
            this._source = new fhir.FhirElement(source._source);
        }
        if (source['scope']) {
            this.scope = source.scope;
        }
        if (source['_scope']) {
            this._scope = new fhir.FhirElement(source._scope);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["code"]) {
            results.push(["code", 'Missing required element: ImplementationGuide.definition.template.code']);
        }
        if (this["_code"]) {
            results.push(...this._code.doModelValidation());
        }
        if (!this["source"]) {
            results.push(["source", 'Missing required element: ImplementationGuide.definition.template.source']);
        }
        if (this["_source"]) {
            results.push(...this._source.doModelValidation());
        }
        if (this["_scope"]) {
            results.push(...this._scope.doModelValidation());
        }
        return results;
    }
}
/**
 * Principally, this consists of information abuot source resource and file locations, and build parameters and templates.
 */
export class ImplementationGuideDefinition extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['grouping']) {
            this.grouping = source.grouping.map((x) => new fhir.ImplementationGuideDefinitionGrouping(x));
        }
        if (source['resource']) {
            this.resource = source.resource.map((x) => new fhir.ImplementationGuideDefinitionResource(x));
        }
        else {
            this.resource = null;
        }
        if (source['page']) {
            this.page = new fhir.ImplementationGuideDefinitionPage(source.page);
        }
        if (source['parameter']) {
            this.parameter = source.parameter.map((x) => new fhir.ImplementationGuideDefinitionParameter(x));
        }
        if (source['template']) {
            this.template = source.template.map((x) => new fhir.ImplementationGuideDefinitionTemplate(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["grouping"]) {
            this.grouping.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if ((!this["resource"]) || (this["resource"].length === 0)) {
            results.push(["resource", 'Missing required element: ImplementationGuide.definition.resource']);
        }
        if (this["resource"]) {
            this.resource.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["page"]) {
            results.push(...this.page.doModelValidation());
        }
        if (this["parameter"]) {
            this.parameter.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["template"]) {
            this.template.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
 */
export class ImplementationGuideManifestResource extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideManifestResource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['reference']) {
            this.reference = new fhir.Reference(source.reference);
        }
        else {
            this.reference = null;
        }
        if (source['exampleBoolean']) {
            this.exampleBoolean = source.exampleBoolean;
        }
        if (source['_exampleBoolean']) {
            this._exampleBoolean = new fhir.FhirElement(source._exampleBoolean);
        }
        if (source['exampleCanonical']) {
            this.exampleCanonical = source.exampleCanonical;
        }
        if (source['_exampleCanonical']) {
            this._exampleCanonical = new fhir.FhirElement(source._exampleCanonical);
        }
        if (source['relativePath']) {
            this.relativePath = source.relativePath;
        }
        if (source['_relativePath']) {
            this._relativePath = new fhir.FhirElement(source._relativePath);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["reference"]) {
            results.push(["reference", 'Missing required element: ImplementationGuide.manifest.resource.reference']);
        }
        if (this["reference"]) {
            results.push(...this.reference.doModelValidation());
        }
        if (this["_exampleBoolean"]) {
            results.push(...this._exampleBoolean.doModelValidation());
        }
        if (this["_exampleCanonical"]) {
            results.push(...this._exampleCanonical.doModelValidation());
        }
        if (this["_relativePath"]) {
            results.push(...this._relativePath.doModelValidation());
        }
        return results;
    }
}
/**
 * Information about a page within the IG.
 */
export class ImplementationGuideManifestPage extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideManifestPage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['name']) {
            this.name = source.name;
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['title']) {
            this.title = source.title;
        }
        if (source['_title']) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source['anchor']) {
            this.anchor = source.anchor.map((x) => (x));
        }
        if (source['_anchor']) {
            this._anchor = source._anchor.map((x) => new fhir.FhirElement(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["name"]) {
            results.push(["name", 'Missing required element: ImplementationGuide.manifest.page.name']);
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_title"]) {
            results.push(...this._title.doModelValidation());
        }
        if (this["_anchor"]) {
            this._anchor.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Information about an assembled implementation guide, created by the publication tooling.
 */
export class ImplementationGuideManifest extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideManifest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['rendering']) {
            this.rendering = source.rendering;
        }
        if (source['_rendering']) {
            this._rendering = new fhir.FhirElement(source._rendering);
        }
        if (source['resource']) {
            this.resource = source.resource.map((x) => new fhir.ImplementationGuideManifestResource(x));
        }
        else {
            this.resource = null;
        }
        if (source['page']) {
            this.page = source.page.map((x) => new fhir.ImplementationGuideManifestPage(x));
        }
        if (source['image']) {
            this.image = source.image.map((x) => (x));
        }
        if (source['_image']) {
            this._image = source._image.map((x) => new fhir.FhirElement(x));
        }
        if (source['other']) {
            this.other = source.other.map((x) => (x));
        }
        if (source['_other']) {
            this._other = source._other.map((x) => new fhir.FhirElement(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_rendering"]) {
            results.push(...this._rendering.doModelValidation());
        }
        if ((!this["resource"]) || (this["resource"].length === 0)) {
            results.push(["resource", 'Missing required element: ImplementationGuide.manifest.resource']);
        }
        if (this["resource"]) {
            this.resource.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["page"]) {
            this.page.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_image"]) {
            this._image.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_other"]) {
            this._other.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
 */
export class ImplementationGuide extends fhir.DomainResource {
    /**
     * Default constructor for ImplementationGuide - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'ImplementationGuide';
        if (source['url']) {
            this.url = source.url;
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            this._url = new fhir.FhirElement(source._url);
        }
        if (source['version']) {
            this.version = source.version;
        }
        if (source['_version']) {
            this._version = new fhir.FhirElement(source._version);
        }
        if (source['name']) {
            this.name = source.name;
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['title']) {
            this.title = source.title;
        }
        if (source['_title']) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['experimental']) {
            this.experimental = source.experimental;
        }
        if (source['_experimental']) {
            this._experimental = new fhir.FhirElement(source._experimental);
        }
        if (source['date']) {
            this.date = source.date;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['publisher']) {
            this.publisher = source.publisher;
        }
        if (source['_publisher']) {
            this._publisher = new fhir.FhirElement(source._publisher);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['copyright']) {
            this.copyright = source.copyright;
        }
        if (source['_copyright']) {
            this._copyright = new fhir.FhirElement(source._copyright);
        }
        if (source['packageId']) {
            this.packageId = source.packageId;
        }
        else {
            this.packageId = null;
        }
        if (source['_packageId']) {
            this._packageId = new fhir.FhirElement(source._packageId);
        }
        if (source['license']) {
            this.license = source.license;
        }
        if (source['_license']) {
            this._license = new fhir.FhirElement(source._license);
        }
        if (source['fhirVersion']) {
            this.fhirVersion = source.fhirVersion.map((x) => (x));
        }
        else {
            this.fhirVersion = null;
        }
        if (source['_fhirVersion']) {
            this._fhirVersion = source._fhirVersion.map((x) => new fhir.FhirElement(x));
        }
        if (source['dependsOn']) {
            this.dependsOn = source.dependsOn.map((x) => new fhir.ImplementationGuideDependsOn(x));
        }
        if (source['global']) {
            this.global = source.global.map((x) => new fhir.ImplementationGuideGlobal(x));
        }
        if (source['definition']) {
            this.definition = new fhir.ImplementationGuideDefinition(source.definition);
        }
        if (source['manifest']) {
            this.manifest = new fhir.ImplementationGuideManifest(source.manifest);
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return PublicationStatusValueSet;
    }
    /**
     * Required-bound Value Set for license
     */
    static licenseRequiredValueSet() {
        return SpdxLicenseValueSet;
    }
    /**
     * Required-bound Value Set for fhirVersion
     */
    static fhirVersionRequiredValueSet() {
        return FHIRVersionValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: ImplementationGuide.resourceType']);
        }
        if (!this["url"]) {
            results.push(["url", 'Missing required element: ImplementationGuide.url']);
        }
        if (this["_url"]) {
            results.push(...this._url.doModelValidation());
        }
        if (this["_version"]) {
            results.push(...this._version.doModelValidation());
        }
        if (!this["name"]) {
            results.push(["name", 'Missing required element: ImplementationGuide.name']);
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_title"]) {
            results.push(...this._title.doModelValidation());
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: ImplementationGuide.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["_experimental"]) {
            results.push(...this._experimental.doModelValidation());
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["_publisher"]) {
            results.push(...this._publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_copyright"]) {
            results.push(...this._copyright.doModelValidation());
        }
        if (!this["packageId"]) {
            results.push(["packageId", 'Missing required element: ImplementationGuide.packageId']);
        }
        if (this["_packageId"]) {
            results.push(...this._packageId.doModelValidation());
        }
        if (this["_license"]) {
            results.push(...this._license.doModelValidation());
        }
        if ((!this["fhirVersion"]) || (this["fhirVersion"].length === 0)) {
            results.push(["fhirVersion", 'Missing required element: ImplementationGuide.fhirVersion']);
        }
        if (this["_fhirVersion"]) {
            this._fhirVersion.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["dependsOn"]) {
            this.dependsOn.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["global"]) {
            this.global.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["definition"]) {
            results.push(...this.definition.doModelValidation());
        }
        if (this["manifest"]) {
            results.push(...this.manifest.doModelValidation());
        }
        return results;
    }
}
//# sourceMappingURL=ImplementationGuide.js.map