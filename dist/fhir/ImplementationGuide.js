// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ImplementationGuide
import * as fhir from '../fhir.js';
import { ResourceTypesValueSet, } from '../fhirValueSets/ResourceTypesValueSet.js';
import { FHIRVersionValueSet, } from '../fhirValueSets/FHIRVersionValueSet.js';
import { GuidePageGenerationValueSet, } from '../fhirValueSets/GuidePageGenerationValueSet.js';
import { GuideParameterCodeValueSet, } from '../fhirValueSets/GuideParameterCodeValueSet.js';
import { PublicationStatusValueSet, } from '../fhirValueSets/PublicationStatusValueSet.js';
import { SpdxLicenseValueSet, } from '../fhirValueSets/SpdxLicenseValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
 */
export class ImplementationGuideDependsOn extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideDependsOn - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ImplementationGuideDependsOn';
        if (source['uri']) {
            this.uri = new fhir.FhirCanonical({ value: source.uri });
        }
        else {
            this.uri = null;
        }
        if (source['packageId']) {
            this.packageId = new fhir.FhirId({ value: source.packageId });
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['uri']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property uri:fhir.FhirCanonical fhir: ImplementationGuide.dependsOn.uri:canonical", }));
        }
        if (this["uri"]) {
            outcome.issue.push(...this.uri.doModelValidation().issue);
        }
        if (this["packageId"]) {
            outcome.issue.push(...this.packageId.doModelValidation().issue);
        }
        if (this["version"]) {
            outcome.issue.push(...this.version.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.
 */
export class ImplementationGuideGlobal extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideGlobal - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ImplementationGuideGlobal';
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['profile']) {
            this.profile = new fhir.FhirCanonical({ value: source.profile });
        }
        else {
            this.profile = null;
        }
    }
    /**
     * Required-bound Value Set for type
     */
    static typeRequiredValueSet() {
        return ResourceTypesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['type']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property type:fhir.FhirCode fhir: ImplementationGuide.global.type:code", }));
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (!this['profile']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property profile:fhir.FhirCanonical fhir: ImplementationGuide.global.profile:canonical", }));
        }
        if (this["profile"]) {
            outcome.issue.push(...this.profile.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Groupings are arbitrary sub-divisions of content. Typically, they are used to help build Table of Contents automatically.
 */
export class ImplementationGuideDefinitionGrouping extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideDefinitionGrouping - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ImplementationGuideDefinitionGrouping';
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['name']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property name:fhir.FhirString fhir: ImplementationGuide.definition.grouping.name:string", }));
        }
        if (this["name"]) {
            outcome.issue.push(...this.name.doModelValidation().issue);
        }
        if (this["description"]) {
            outcome.issue.push(...this.description.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
 */
export class ImplementationGuideDefinitionResource extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideDefinitionResource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ImplementationGuideDefinitionResource';
        /**
         * The resource SHALL be valid against all the versions it is specified to apply to. If the resource referred to is a StructureDefinition, the fhirVersion stated in the StructureDefinition cannot disagree with the version specified here; the specified versions SHALL include the version specified by the StructureDefinition, and may include additional versions using the [applicable-version](extension-structuredefinition-applicable-version.html) extension.
         */
        this.fhirVersion = [];
        this.__exampleIsChoice = true;
        if (source['reference']) {
            this.reference = new fhir.Reference(source.reference);
        }
        else {
            this.reference = null;
        }
        if (source['fhirVersion']) {
            this.fhirVersion = source.fhirVersion.map((x) => new fhir.FhirCode({ value: x }));
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['example']) {
            this.example = source.example;
        }
        else if (source['exampleBoolean']) {
            this.example = new fhir.FhirBoolean({ value: source.exampleBoolean });
        }
        else if (source['exampleCanonical']) {
            this.example = new fhir.FhirCanonical({ value: source.exampleCanonical });
        }
        if (source['groupingId']) {
            this.groupingId = new fhir.FhirId({ value: source.groupingId });
        }
    }
    /**
     * Required-bound Value Set for fhirVersion
     */
    static fhirVersionRequiredValueSet() {
        return FHIRVersionValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['reference']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property reference:fhir.Reference fhir: ImplementationGuide.definition.resource.reference:Reference", }));
        }
        if (this["reference"]) {
            outcome.issue.push(...this.reference.doModelValidation().issue);
        }
        if (this["fhirVersion"]) {
            this.fhirVersion.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["name"]) {
            outcome.issue.push(...this.name.doModelValidation().issue);
        }
        if (this["description"]) {
            outcome.issue.push(...this.description.doModelValidation().issue);
        }
        if (this["groupingId"]) {
            outcome.issue.push(...this.groupingId.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Pages automatically become sections if they have sub-pages. By convention, the home page is called index.html.
 */
export class ImplementationGuideDefinitionPage extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideDefinitionPage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ImplementationGuideDefinitionPage';
        this.__nameIsChoice = true;
        /**
         * The implementation guide breadcrumbs are generated from this structure.
         */
        this.page = [];
        if (source['name']) {
            this.name = source.name;
        }
        else if (source['nameUrl']) {
            this.name = new fhir.FhirUrl({ value: source.nameUrl });
        }
        else if (source['nameReference']) {
            this.name = new fhir.Reference(source.nameReference);
        }
        else {
            this.name = null;
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        else {
            this.title = null;
        }
        if (source['generation']) {
            this.generation = source.generation;
        }
        else {
            this.generation = null;
        }
        if (source['page']) {
            this.page = source.page.map((x) => new fhir.ImplementationGuideDefinitionPage(x));
        }
    }
    /**
     * Required-bound Value Set for generation
     */
    static generationRequiredValueSet() {
        return GuidePageGenerationValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['name']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property name: fhir: ImplementationGuide.definition.page.name[x]:", }));
        }
        if (!this['title']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property title:fhir.FhirString fhir: ImplementationGuide.definition.page.title:string", }));
        }
        if (this["title"]) {
            outcome.issue.push(...this.title.doModelValidation().issue);
        }
        if (!this['generation']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property generation:GuidePageGenerationValueSetEnum fhir: ImplementationGuide.definition.page.generation:code", }));
        }
        if (this["page"]) {
            this.page.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Defines how IG is built by tools.
 */
export class ImplementationGuideDefinitionParameter extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideDefinitionParameter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ImplementationGuideDefinitionParameter';
        if (source['code']) {
            this.code = source.code;
        }
        else {
            this.code = null;
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        else {
            this.value = null;
        }
    }
    /**
     * Required-bound Value Set for code
     */
    static codeRequiredValueSet() {
        return GuideParameterCodeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['code']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property code:GuideParameterCodeValueSetEnum fhir: ImplementationGuide.definition.parameter.code:code", }));
        }
        if (!this['value']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property value:fhir.FhirString fhir: ImplementationGuide.definition.parameter.value:string", }));
        }
        if (this["value"]) {
            outcome.issue.push(...this.value.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * A template for building resources.
 */
export class ImplementationGuideDefinitionTemplate extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideDefinitionTemplate - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ImplementationGuideDefinitionTemplate';
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['source']) {
            this.source = new fhir.FhirString({ value: source.source });
        }
        else {
            this.source = null;
        }
        if (source['scope']) {
            this.scope = new fhir.FhirString({ value: source.scope });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['code']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property code:fhir.FhirCode fhir: ImplementationGuide.definition.template.code:code", }));
        }
        if (this["code"]) {
            outcome.issue.push(...this.code.doModelValidation().issue);
        }
        if (!this['source']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property source:fhir.FhirString fhir: ImplementationGuide.definition.template.source:string", }));
        }
        if (this["source"]) {
            outcome.issue.push(...this.source.doModelValidation().issue);
        }
        if (this["scope"]) {
            outcome.issue.push(...this.scope.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Principally, this consists of information abuot source resource and file locations, and build parameters and templates.
 */
export class ImplementationGuideDefinition extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ImplementationGuideDefinition';
        /**
         * Groupings are arbitrary sub-divisions of content. Typically, they are used to help build Table of Contents automatically.
         */
        this.grouping = [];
        /**
         * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
         */
        this.resource = [];
        /**
         * Defines how IG is built by tools.
         */
        this.parameter = [];
        /**
         * A template for building resources.
         */
        this.template = [];
        if (source['grouping']) {
            this.grouping = source.grouping.map((x) => new fhir.ImplementationGuideDefinitionGrouping(x));
        }
        if (source['resource']) {
            this.resource = source.resource.map((x) => new fhir.ImplementationGuideDefinitionResource(x));
        }
        else {
            this.resource = null;
        }
        if (source['page']) {
            this.page = new fhir.ImplementationGuideDefinitionPage(source.page);
        }
        if (source['parameter']) {
            this.parameter = source.parameter.map((x) => new fhir.ImplementationGuideDefinitionParameter(x));
        }
        if (source['template']) {
            this.template = source.template.map((x) => new fhir.ImplementationGuideDefinitionTemplate(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["grouping"]) {
            this.grouping.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['resource']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resource:fhir.ImplementationGuideDefinitionResource[] fhir: ImplementationGuide.definition.resource:resource", }));
        }
        else if (!Array.isArray(this.resource)) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue, diagnostics: "Found scalar in array property resource:fhir.ImplementationGuideDefinitionResource[] fhir: ImplementationGuide.definition.resource:resource", }));
        }
        else if (this.resource.length === 0) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resource:fhir.ImplementationGuideDefinitionResource[] fhir: ImplementationGuide.definition.resource:resource", }));
        }
        if (this["resource"]) {
            this.resource.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["page"]) {
            outcome.issue.push(...this.page.doModelValidation().issue);
        }
        if (this["parameter"]) {
            this.parameter.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["template"]) {
            this.template.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
 */
export class ImplementationGuideManifestResource extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideManifestResource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ImplementationGuideManifestResource';
        this.__exampleIsChoice = true;
        if (source['reference']) {
            this.reference = new fhir.Reference(source.reference);
        }
        else {
            this.reference = null;
        }
        if (source['example']) {
            this.example = source.example;
        }
        else if (source['exampleBoolean']) {
            this.example = new fhir.FhirBoolean({ value: source.exampleBoolean });
        }
        else if (source['exampleCanonical']) {
            this.example = new fhir.FhirCanonical({ value: source.exampleCanonical });
        }
        if (source['relativePath']) {
            this.relativePath = new fhir.FhirUrl({ value: source.relativePath });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['reference']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property reference:fhir.Reference fhir: ImplementationGuide.manifest.resource.reference:Reference", }));
        }
        if (this["reference"]) {
            outcome.issue.push(...this.reference.doModelValidation().issue);
        }
        if (this["relativePath"]) {
            outcome.issue.push(...this.relativePath.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Information about a page within the IG.
 */
export class ImplementationGuideManifestPage extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideManifestPage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ImplementationGuideManifestPage';
        /**
         * Appending 'rendering' + "/" + page.name + "#" + page.anchor should resolve to the anchor.
         */
        this.anchor = [];
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['anchor']) {
            this.anchor = source.anchor.map((x) => new fhir.FhirString({ value: x }));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['name']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property name:fhir.FhirString fhir: ImplementationGuide.manifest.page.name:string", }));
        }
        if (this["name"]) {
            outcome.issue.push(...this.name.doModelValidation().issue);
        }
        if (this["title"]) {
            outcome.issue.push(...this.title.doModelValidation().issue);
        }
        if (this["anchor"]) {
            this.anchor.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Information about an assembled implementation guide, created by the publication tooling.
 */
export class ImplementationGuideManifest extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideManifest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ImplementationGuideManifest';
        /**
         * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
         */
        this.resource = [];
        /**
         * Information about a page within the IG.
         */
        this.page = [];
        /**
         * Indicates a relative path to an image that exists within the IG.
         */
        this.image = [];
        /**
         * Indicates the relative path of an additional non-page, non-image file that is part of the IG - e.g. zip, jar and similar files that could be the target of a hyperlink in a derived IG.
         */
        this.other = [];
        if (source['rendering']) {
            this.rendering = new fhir.FhirUrl({ value: source.rendering });
        }
        if (source['resource']) {
            this.resource = source.resource.map((x) => new fhir.ImplementationGuideManifestResource(x));
        }
        else {
            this.resource = null;
        }
        if (source['page']) {
            this.page = source.page.map((x) => new fhir.ImplementationGuideManifestPage(x));
        }
        if (source['image']) {
            this.image = source.image.map((x) => new fhir.FhirString({ value: x }));
        }
        if (source['other']) {
            this.other = source.other.map((x) => new fhir.FhirString({ value: x }));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["rendering"]) {
            outcome.issue.push(...this.rendering.doModelValidation().issue);
        }
        if (!this['resource']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resource:fhir.ImplementationGuideManifestResource[] fhir: ImplementationGuide.manifest.resource:resource", }));
        }
        else if (!Array.isArray(this.resource)) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue, diagnostics: "Found scalar in array property resource:fhir.ImplementationGuideManifestResource[] fhir: ImplementationGuide.manifest.resource:resource", }));
        }
        else if (this.resource.length === 0) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resource:fhir.ImplementationGuideManifestResource[] fhir: ImplementationGuide.manifest.resource:resource", }));
        }
        if (this["resource"]) {
            this.resource.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["page"]) {
            this.page.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["image"]) {
            this.image.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["other"]) {
            this.other.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
 */
export class ImplementationGuide extends fhir.DomainResource {
    /**
     * Default constructor for ImplementationGuide - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ImplementationGuide';
        /**
         * May be a web site, an email address, a telephone number, etc.
         */
        this.contact = [];
        /**
         * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
         */
        this.useContext = [];
        /**
         * It may be possible for the implementation guide to be used in jurisdictions other than those for which it was originally designed or intended.
         */
        this.jurisdiction = [];
        /**
         * Most implementation guides target a single version - e.g. they describe how to use a particular version, and the profiles and examples etc are valid for that version. But some implementation guides describe how to use multiple different versions of FHIR to solve the same problem, or in concert with each other. Typically, the requirement to support multiple versions arises as implementation matures and different implementation communities are stuck at different versions by regulation or market dynamics.
         */
        this.fhirVersion = [];
        /**
         * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
         */
        this.dependsOn = [];
        /**
         * See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.
         */
        this.global = [];
        this.resourceType = 'ImplementationGuide';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        else {
            this.url = null;
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['packageId']) {
            this.packageId = new fhir.FhirId({ value: source.packageId });
        }
        else {
            this.packageId = null;
        }
        if (source['license']) {
            this.license = new fhir.FhirCode({ value: source.license });
        }
        if (source['fhirVersion']) {
            this.fhirVersion = source.fhirVersion.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.fhirVersion = null;
        }
        if (source['dependsOn']) {
            this.dependsOn = source.dependsOn.map((x) => new fhir.ImplementationGuideDependsOn(x));
        }
        if (source['global']) {
            this.global = source.global.map((x) => new fhir.ImplementationGuideGlobal(x));
        }
        if (source['definition']) {
            this.definition = new fhir.ImplementationGuideDefinition(source.definition);
        }
        if (source['manifest']) {
            this.manifest = new fhir.ImplementationGuideManifest(source.manifest);
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return PublicationStatusValueSet;
    }
    /**
     * Required-bound Value Set for license
     */
    static licenseRequiredValueSet() {
        return SpdxLicenseValueSet;
    }
    /**
     * Required-bound Value Set for fhirVersion
     */
    static fhirVersionRequiredValueSet() {
        return FHIRVersionValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'ImplementationGuide' fhir: ImplementationGuide.resourceType:'ImplementationGuide'", }));
        }
        if (!this['url']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property url:fhir.FhirUri fhir: ImplementationGuide.url:uri", }));
        }
        if (this["url"]) {
            outcome.issue.push(...this.url.doModelValidation().issue);
        }
        if (this["version"]) {
            outcome.issue.push(...this.version.doModelValidation().issue);
        }
        if (!this['name']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property name:fhir.FhirString fhir: ImplementationGuide.name:string", }));
        }
        if (this["name"]) {
            outcome.issue.push(...this.name.doModelValidation().issue);
        }
        if (this["title"]) {
            outcome.issue.push(...this.title.doModelValidation().issue);
        }
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:PublicationStatusValueSetEnum fhir: ImplementationGuide.status:code", }));
        }
        if (this["experimental"]) {
            outcome.issue.push(...this.experimental.doModelValidation().issue);
        }
        if (this["date"]) {
            outcome.issue.push(...this.date.doModelValidation().issue);
        }
        if (this["publisher"]) {
            outcome.issue.push(...this.publisher.doModelValidation().issue);
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["description"]) {
            outcome.issue.push(...this.description.doModelValidation().issue);
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["copyright"]) {
            outcome.issue.push(...this.copyright.doModelValidation().issue);
        }
        if (!this['packageId']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property packageId:fhir.FhirId fhir: ImplementationGuide.packageId:id", }));
        }
        if (this["packageId"]) {
            outcome.issue.push(...this.packageId.doModelValidation().issue);
        }
        if (this["license"]) {
            outcome.issue.push(...this.license.doModelValidation().issue);
        }
        if (!this['fhirVersion']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property fhirVersion:fhir.FhirCode[] fhir: ImplementationGuide.fhirVersion:code", }));
        }
        else if (!Array.isArray(this.fhirVersion)) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue, diagnostics: "Found scalar in array property fhirVersion:fhir.FhirCode[] fhir: ImplementationGuide.fhirVersion:code", }));
        }
        else if (this.fhirVersion.length === 0) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property fhirVersion:fhir.FhirCode[] fhir: ImplementationGuide.fhirVersion:code", }));
        }
        if (this["fhirVersion"]) {
            this.fhirVersion.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["dependsOn"]) {
            this.dependsOn.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["global"]) {
            this.global.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["definition"]) {
            outcome.issue.push(...this.definition.doModelValidation().issue);
        }
        if (this["manifest"]) {
            outcome.issue.push(...this.manifest.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=ImplementationGuide.js.map