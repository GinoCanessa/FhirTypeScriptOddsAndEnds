// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Note that filters defined in code systems usually require custom code on the part of any terminology engine that will make them available for use in value set filters. For this reason, they are generally only seen in high value published terminologies.
 */
export class CodeSystemFilter extends fhir.BackboneElement {
    /**
     * Default constructor for CodeSystemFilter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.code = null;
        if (source["code"]) {
            this.code = source.code;
        }
        if (this.code === undefined) {
            this.code = null;
        }
        if (source["_code"]) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        this.operator = null;
        if (source["operator"]) {
            this.operator = source.operator.map((x) => (x));
        }
        if (this.operator === undefined) {
            this.operator = null;
        }
        if (source["_operator"]) {
            this._operator = source._operator.map((x) => new fhir.FhirElement(x));
        }
        this.value = null;
        if (source["value"]) {
            this.value = source.value;
        }
        if (this.value === undefined) {
            this.value = null;
        }
        if (source["_value"]) {
            this._value = new fhir.FhirElement(source._value);
        }
    }
    /**
     * Check if the current CodeSystemFilter contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        if ((!this["operator"]) || (this["operator"].length === 0)) {
            missingElements.push("operator");
        }
        if (this["value"] === undefined) {
            missingElements.push("value");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a CodeSystemFilter from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new CodeSystemFilter(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `CodeSystemFilter is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A property defines an additional slot through which additional information can be provided about a concept.
 */
export class CodeSystemProperty extends fhir.BackboneElement {
    /**
     * Default constructor for CodeSystemProperty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.code = null;
        if (source["code"]) {
            this.code = source.code;
        }
        if (this.code === undefined) {
            this.code = null;
        }
        if (source["_code"]) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        this.type = null;
        if (source["type"]) {
            this.type = source.type;
        }
        if (this.type === undefined) {
            this.type = null;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source["uri"]) {
            this.uri = source.uri;
        }
        if (source["_uri"]) {
            this._uri = new fhir.FhirElement(source._uri);
        }
    }
    /**
     * Check if the current CodeSystemProperty contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a CodeSystemProperty from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new CodeSystemProperty(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `CodeSystemProperty is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
 */
export class CodeSystemConceptDesignation extends fhir.BackboneElement {
    /**
     * Default constructor for CodeSystemConceptDesignation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["language"]) {
            this.language = source.language;
        }
        if (source["_language"]) {
            this._language = new fhir.FhirElement(source._language);
        }
        if (source["use"]) {
            this.use = new fhir.Coding(source.use);
        }
        this.value = null;
        if (source["value"]) {
            this.value = source.value;
        }
        if (this.value === undefined) {
            this.value = null;
        }
        if (source["_value"]) {
            this._value = new fhir.FhirElement(source._value);
        }
    }
    /**
     * Check if the current CodeSystemConceptDesignation contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["value"] === undefined) {
            missingElements.push("value");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a CodeSystemConceptDesignation from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new CodeSystemConceptDesignation(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `CodeSystemConceptDesignation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A property value for this concept.
 */
export class CodeSystemConceptProperty extends fhir.BackboneElement {
    /**
     * Default constructor for CodeSystemConceptProperty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.code = null;
        if (source["code"]) {
            this.code = source.code;
        }
        if (this.code === undefined) {
            this.code = null;
        }
        if (source["_code"]) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source["valueCode"]) {
            this.valueCode = source.valueCode;
        }
        if (source["_valueCode"]) {
            this._valueCode = new fhir.FhirElement(source._valueCode);
        }
        if (source["valueCoding"]) {
            this.valueCoding = new fhir.Coding(source.valueCoding);
        }
        if (source["valueString"]) {
            this.valueString = source.valueString;
        }
        if (source["_valueString"]) {
            this._valueString = new fhir.FhirElement(source._valueString);
        }
        if (source["valueInteger"]) {
            this.valueInteger = source.valueInteger;
        }
        if (source["_valueInteger"]) {
            this._valueInteger = new fhir.FhirElement(source._valueInteger);
        }
        if (source["valueBoolean"]) {
            this.valueBoolean = source.valueBoolean;
        }
        if (source["_valueBoolean"]) {
            this._valueBoolean = new fhir.FhirElement(source._valueBoolean);
        }
        if (source["valueDateTime"]) {
            this.valueDateTime = source.valueDateTime;
        }
        if (source["_valueDateTime"]) {
            this._valueDateTime = new fhir.FhirElement(source._valueDateTime);
        }
        if (source["valueDecimal"]) {
            this.valueDecimal = source.valueDecimal;
        }
        if (source["_valueDecimal"]) {
            this._valueDecimal = new fhir.FhirElement(source._valueDecimal);
        }
    }
    /**
     * Check if the current CodeSystemConceptProperty contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a CodeSystemConceptProperty from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new CodeSystemConceptProperty(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `CodeSystemConceptProperty is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * If this is empty, it means that the code system resource does not represent the content of the code system.
 */
export class CodeSystemConcept extends fhir.BackboneElement {
    /**
     * Default constructor for CodeSystemConcept - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.code = null;
        if (source["code"]) {
            this.code = source.code;
        }
        if (this.code === undefined) {
            this.code = null;
        }
        if (source["_code"]) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source["concept"]) {
            this.concept = source.concept.map((x) => new fhir.CodeSystemConcept(x));
        }
        if (source["definition"]) {
            this.definition = source.definition;
        }
        if (source["_definition"]) {
            this._definition = new fhir.FhirElement(source._definition);
        }
        if (source["designation"]) {
            this.designation = source.designation.map((x) => new fhir.CodeSystemConceptDesignation(x));
        }
        if (source["display"]) {
            this.display = source.display;
        }
        if (source["_display"]) {
            this._display = new fhir.FhirElement(source._display);
        }
        if (source["property"]) {
            this.property = source.property.map((x) => new fhir.CodeSystemConceptProperty(x));
        }
    }
    /**
     * Check if the current CodeSystemConcept contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a CodeSystemConcept from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new CodeSystemConcept(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `CodeSystemConcept is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.
 */
export class CodeSystem extends fhir.DomainResource {
    /**
     * Default constructor for CodeSystem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'CodeSystem';
        if (source["caseSensitive"]) {
            this.caseSensitive = source.caseSensitive;
        }
        if (source["_caseSensitive"]) {
            this._caseSensitive = new fhir.FhirElement(source._caseSensitive);
        }
        if (source["compositional"]) {
            this.compositional = source.compositional;
        }
        if (source["_compositional"]) {
            this._compositional = new fhir.FhirElement(source._compositional);
        }
        if (source["concept"]) {
            this.concept = source.concept.map((x) => new fhir.CodeSystemConcept(x));
        }
        if (source["contact"]) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        this.content = null;
        if (source["content"]) {
            this.content = source.content;
        }
        if (this.content === undefined) {
            this.content = null;
        }
        if (source["_content"]) {
            this._content = new fhir.FhirElement(source._content);
        }
        if (source["copyright"]) {
            this.copyright = source.copyright;
        }
        if (source["_copyright"]) {
            this._copyright = new fhir.FhirElement(source._copyright);
        }
        if (source["count"]) {
            this.count = source.count;
        }
        if (source["_count"]) {
            this._count = new fhir.FhirElement(source._count);
        }
        if (source["date"]) {
            this.date = source.date;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["experimental"]) {
            this.experimental = source.experimental;
        }
        if (source["_experimental"]) {
            this._experimental = new fhir.FhirElement(source._experimental);
        }
        if (source["filter"]) {
            this.filter = source.filter.map((x) => new fhir.CodeSystemFilter(x));
        }
        if (source["hierarchyMeaning"]) {
            this.hierarchyMeaning = source.hierarchyMeaning;
        }
        if (source["_hierarchyMeaning"]) {
            this._hierarchyMeaning = new fhir.FhirElement(source._hierarchyMeaning);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["jurisdiction"]) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["property"]) {
            this.property = source.property.map((x) => new fhir.CodeSystemProperty(x));
        }
        if (source["publisher"]) {
            this.publisher = source.publisher;
        }
        if (source["_publisher"]) {
            this._publisher = new fhir.FhirElement(source._publisher);
        }
        if (source["purpose"]) {
            this.purpose = source.purpose;
        }
        if (source["_purpose"]) {
            this._purpose = new fhir.FhirElement(source._purpose);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["supplements"]) {
            this.supplements = source.supplements;
        }
        if (source["_supplements"]) {
            this._supplements = new fhir.FhirElement(source._supplements);
        }
        if (source["title"]) {
            this.title = source.title;
        }
        if (source["_title"]) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source["url"]) {
            this.url = source.url;
        }
        if (source["_url"]) {
            this._url = new fhir.FhirElement(source._url);
        }
        if (source["useContext"]) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source["valueSet"]) {
            this.valueSet = source.valueSet;
        }
        if (source["_valueSet"]) {
            this._valueSet = new fhir.FhirElement(source._valueSet);
        }
        if (source["version"]) {
            this.version = source.version;
        }
        if (source["_version"]) {
            this._version = new fhir.FhirElement(source._version);
        }
        if (source["versionNeeded"]) {
            this.versionNeeded = source.versionNeeded;
        }
        if (source["_versionNeeded"]) {
            this._versionNeeded = new fhir.FhirElement(source._versionNeeded);
        }
    }
    /**
     * Check if the current CodeSystem contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["content"] === undefined) {
            missingElements.push("content");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a CodeSystem from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new CodeSystem(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `CodeSystem is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the CodeSystem.filter.operator field
 */
export var CodeSystemFilterOperatorEnum;
(function (CodeSystemFilterOperatorEnum) {
    CodeSystemFilterOperatorEnum["EQUALS"] = "=";
    CodeSystemFilterOperatorEnum["IS_A"] = "is-a";
    CodeSystemFilterOperatorEnum["DESCENDENT_OF"] = "descendent-of";
    CodeSystemFilterOperatorEnum["IS_NOT_A"] = "is-not-a";
    CodeSystemFilterOperatorEnum["REGEX"] = "regex";
    CodeSystemFilterOperatorEnum["IN"] = "in";
    CodeSystemFilterOperatorEnum["NOT_IN"] = "not-in";
    CodeSystemFilterOperatorEnum["GENERALIZES"] = "generalizes";
    CodeSystemFilterOperatorEnum["EXISTS"] = "exists";
})(CodeSystemFilterOperatorEnum || (CodeSystemFilterOperatorEnum = {}));
/**
 * Code Values for the CodeSystem.property.type field
 */
export var CodeSystemPropertyTypeEnum;
(function (CodeSystemPropertyTypeEnum) {
    CodeSystemPropertyTypeEnum["CODE"] = "code";
    CodeSystemPropertyTypeEnum["CODING"] = "Coding";
    CodeSystemPropertyTypeEnum["STRING"] = "string";
    CodeSystemPropertyTypeEnum["INTEGER"] = "integer";
    CodeSystemPropertyTypeEnum["BOOLEAN"] = "boolean";
    CodeSystemPropertyTypeEnum["DATETIME"] = "dateTime";
    CodeSystemPropertyTypeEnum["DECIMAL"] = "decimal";
})(CodeSystemPropertyTypeEnum || (CodeSystemPropertyTypeEnum = {}));
/**
 * Code Values for the CodeSystem.content field
 */
export var CodeSystemContentEnum;
(function (CodeSystemContentEnum) {
    CodeSystemContentEnum["NOT_PRESENT"] = "not-present";
    CodeSystemContentEnum["EXAMPLE"] = "example";
    CodeSystemContentEnum["FRAGMENT"] = "fragment";
    CodeSystemContentEnum["COMPLETE"] = "complete";
    CodeSystemContentEnum["SUPPLEMENT"] = "supplement";
})(CodeSystemContentEnum || (CodeSystemContentEnum = {}));
/**
 * Code Values for the CodeSystem.hierarchyMeaning field
 */
export var CodeSystemHierarchyMeaningEnum;
(function (CodeSystemHierarchyMeaningEnum) {
    CodeSystemHierarchyMeaningEnum["GROUPED_BY"] = "grouped-by";
    CodeSystemHierarchyMeaningEnum["IS_A"] = "is-a";
    CodeSystemHierarchyMeaningEnum["PART_OF"] = "part-of";
    CodeSystemHierarchyMeaningEnum["CLASSIFIED_WITH"] = "classified-with";
})(CodeSystemHierarchyMeaningEnum || (CodeSystemHierarchyMeaningEnum = {}));
/**
 * Code Values for the CodeSystem.status field
 */
export var CodeSystemStatusEnum;
(function (CodeSystemStatusEnum) {
    CodeSystemStatusEnum["DRAFT"] = "draft";
    CodeSystemStatusEnum["ACTIVE"] = "active";
    CodeSystemStatusEnum["RETIRED"] = "retired";
    CodeSystemStatusEnum["UNKNOWN"] = "unknown";
})(CodeSystemStatusEnum || (CodeSystemStatusEnum = {}));
//# sourceMappingURL=CodeSystem.js.map