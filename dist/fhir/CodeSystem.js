// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: CodeSystem
import * as fhir from '../fhir.js';
import { FilterOperatorValueSet } from '../fhirValueSets/FilterOperatorValueSet.js';
import { ConceptPropertyTypeValueSet } from '../fhirValueSets/ConceptPropertyTypeValueSet.js';
import { LanguagesValueSet } from '../fhirValueSets/LanguagesValueSet.js';
import { DesignationUseValueSet } from '../fhirValueSets/DesignationUseValueSet.js';
import { PublicationStatusValueSet } from '../fhirValueSets/PublicationStatusValueSet.js';
import { CodesystemHierarchyMeaningValueSet } from '../fhirValueSets/CodesystemHierarchyMeaningValueSet.js';
import { CodesystemContentModeValueSet } from '../fhirValueSets/CodesystemContentModeValueSet.js';
/**
 * Note that filters defined in code systems usually require custom code on the part of any terminology engine that will make them available for use in value set filters. For this reason, they are generally only seen in high value published terminologies.
 */
export class CodeSystemFilter extends fhir.BackboneElement {
    /**
     * Default constructor for CodeSystemFilter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = source.code;
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['operator']) {
            this.operator = source.operator.map((x) => (x));
        }
        else {
            this.operator = null;
        }
        if (source['_operator']) {
            this._operator = source._operator.map((x) => new fhir.FhirElement(x));
        }
        if (source['value']) {
            this.value = source.value;
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            this._value = new fhir.FhirElement(source._value);
        }
    }
    /**
     * Required-bound Value Set for operator
     */
    operatorRequiredValueSet() {
        return FilterOperatorValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["code"]) {
            results.push(["code", 'Missing required element: CodeSystem.filter.code']);
        }
        if (this["_code"]) {
            results.push(...this._code.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if ((!this["operator"]) || (this["operator"].length === 0)) {
            results.push(["operator", 'Missing required element: CodeSystem.filter.operator']);
        }
        if (this["_operator"]) {
            this._operator.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["value"]) {
            results.push(["value", 'Missing required element: CodeSystem.filter.value']);
        }
        if (this["_value"]) {
            results.push(...this._value.doModelValidation());
        }
        return results;
    }
}
/**
 * A property defines an additional slot through which additional information can be provided about a concept.
 */
export class CodeSystemProperty extends fhir.BackboneElement {
    /**
     * Default constructor for CodeSystemProperty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = source.code;
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source['uri']) {
            this.uri = source.uri;
        }
        if (source['_uri']) {
            this._uri = new fhir.FhirElement(source._uri);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            this._type = new fhir.FhirElement(source._type);
        }
    }
    /**
     * Required-bound Value Set for type
     */
    typeRequiredValueSet() {
        return ConceptPropertyTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["code"]) {
            results.push(["code", 'Missing required element: CodeSystem.property.code']);
        }
        if (this["_code"]) {
            results.push(...this._code.doModelValidation());
        }
        if (this["_uri"]) {
            results.push(...this._uri.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (!this["type"]) {
            results.push(["type", 'Missing required element: CodeSystem.property.type']);
        }
        if (this["_type"]) {
            results.push(...this._type.doModelValidation());
        }
        return results;
    }
}
/**
 * Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
 */
export class CodeSystemConceptDesignation extends fhir.BackboneElement {
    /**
     * Default constructor for CodeSystemConceptDesignation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['language']) {
            this.language = source.language;
        }
        if (source['_language']) {
            this._language = new fhir.FhirElement(source._language);
        }
        if (source['use']) {
            this.use = new fhir.Coding(source.use);
        }
        if (source['value']) {
            this.value = source.value;
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            this._value = new fhir.FhirElement(source._value);
        }
    }
    /**
     * Preferred-bound Value Set for language
     */
    languagePreferredValueSet() {
        return LanguagesValueSet;
    }
    /**
     * Extensible-bound Value Set for use
     */
    useExtensibleValueSet() {
        return DesignationUseValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_language"]) {
            results.push(...this._language.doModelValidation());
        }
        if (this["use"]) {
            results.push(...this.use.doModelValidation());
        }
        if (!this["value"]) {
            results.push(["value", 'Missing required element: CodeSystem.concept.designation.value']);
        }
        if (this["_value"]) {
            results.push(...this._value.doModelValidation());
        }
        return results;
    }
}
/**
 * A property value for this concept.
 */
export class CodeSystemConceptProperty extends fhir.BackboneElement {
    /**
     * Default constructor for CodeSystemConceptProperty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = source.code;
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source['valueCode']) {
            this.valueCode = source.valueCode;
        }
        if (source['_valueCode']) {
            this._valueCode = new fhir.FhirElement(source._valueCode);
        }
        if (source['valueCoding']) {
            this.valueCoding = new fhir.Coding(source.valueCoding);
        }
        if (source['valueString']) {
            this.valueString = source.valueString;
        }
        if (source['_valueString']) {
            this._valueString = new fhir.FhirElement(source._valueString);
        }
        if (source['valueInteger']) {
            this.valueInteger = source.valueInteger;
        }
        if (source['_valueInteger']) {
            this._valueInteger = new fhir.FhirElement(source._valueInteger);
        }
        if (source['valueBoolean']) {
            this.valueBoolean = source.valueBoolean;
        }
        if (source['_valueBoolean']) {
            this._valueBoolean = new fhir.FhirElement(source._valueBoolean);
        }
        if (source['valueDateTime']) {
            this.valueDateTime = source.valueDateTime;
        }
        if (source['_valueDateTime']) {
            this._valueDateTime = new fhir.FhirElement(source._valueDateTime);
        }
        if (source['valueDecimal']) {
            this.valueDecimal = source.valueDecimal;
        }
        if (source['_valueDecimal']) {
            this._valueDecimal = new fhir.FhirElement(source._valueDecimal);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["code"]) {
            results.push(["code", 'Missing required element: CodeSystem.concept.property.code']);
        }
        if (this["_code"]) {
            results.push(...this._code.doModelValidation());
        }
        if (this["_valueCode"]) {
            results.push(...this._valueCode.doModelValidation());
        }
        if (this["valueCoding"]) {
            results.push(...this.valueCoding.doModelValidation());
        }
        if (this["_valueString"]) {
            results.push(...this._valueString.doModelValidation());
        }
        if (this["_valueInteger"]) {
            results.push(...this._valueInteger.doModelValidation());
        }
        if (this["_valueBoolean"]) {
            results.push(...this._valueBoolean.doModelValidation());
        }
        if (this["_valueDateTime"]) {
            results.push(...this._valueDateTime.doModelValidation());
        }
        if (this["_valueDecimal"]) {
            results.push(...this._valueDecimal.doModelValidation());
        }
        return results;
    }
}
/**
 * If this is empty, it means that the code system resource does not represent the content of the code system.
 */
export class CodeSystemConcept extends fhir.BackboneElement {
    /**
     * Default constructor for CodeSystemConcept - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = source.code;
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source['display']) {
            this.display = source.display;
        }
        if (source['_display']) {
            this._display = new fhir.FhirElement(source._display);
        }
        if (source['definition']) {
            this.definition = source.definition;
        }
        if (source['_definition']) {
            this._definition = new fhir.FhirElement(source._definition);
        }
        if (source['designation']) {
            this.designation = source.designation.map((x) => new fhir.CodeSystemConceptDesignation(x));
        }
        if (source['property']) {
            this.property = source.property.map((x) => new fhir.CodeSystemConceptProperty(x));
        }
        if (source['concept']) {
            this.concept = source.concept.map((x) => new fhir.CodeSystemConcept(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["code"]) {
            results.push(["code", 'Missing required element: CodeSystem.concept.code']);
        }
        if (this["_code"]) {
            results.push(...this._code.doModelValidation());
        }
        if (this["_display"]) {
            results.push(...this._display.doModelValidation());
        }
        if (this["_definition"]) {
            results.push(...this._definition.doModelValidation());
        }
        if (this["designation"]) {
            this.designation.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["property"]) {
            this.property.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["concept"]) {
            this.concept.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.
 */
export class CodeSystem extends fhir.DomainResource {
    /**
     * Default constructor for CodeSystem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'CodeSystem';
        if (source['url']) {
            this.url = source.url;
        }
        if (source['_url']) {
            this._url = new fhir.FhirElement(source._url);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['version']) {
            this.version = source.version;
        }
        if (source['_version']) {
            this._version = new fhir.FhirElement(source._version);
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['title']) {
            this.title = source.title;
        }
        if (source['_title']) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['experimental']) {
            this.experimental = source.experimental;
        }
        if (source['_experimental']) {
            this._experimental = new fhir.FhirElement(source._experimental);
        }
        if (source['date']) {
            this.date = source.date;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['publisher']) {
            this.publisher = source.publisher;
        }
        if (source['_publisher']) {
            this._publisher = new fhir.FhirElement(source._publisher);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['purpose']) {
            this.purpose = source.purpose;
        }
        if (source['_purpose']) {
            this._purpose = new fhir.FhirElement(source._purpose);
        }
        if (source['copyright']) {
            this.copyright = source.copyright;
        }
        if (source['_copyright']) {
            this._copyright = new fhir.FhirElement(source._copyright);
        }
        if (source['caseSensitive']) {
            this.caseSensitive = source.caseSensitive;
        }
        if (source['_caseSensitive']) {
            this._caseSensitive = new fhir.FhirElement(source._caseSensitive);
        }
        if (source['valueSet']) {
            this.valueSet = source.valueSet;
        }
        if (source['_valueSet']) {
            this._valueSet = new fhir.FhirElement(source._valueSet);
        }
        if (source['hierarchyMeaning']) {
            this.hierarchyMeaning = source.hierarchyMeaning;
        }
        if (source['_hierarchyMeaning']) {
            this._hierarchyMeaning = new fhir.FhirElement(source._hierarchyMeaning);
        }
        if (source['compositional']) {
            this.compositional = source.compositional;
        }
        if (source['_compositional']) {
            this._compositional = new fhir.FhirElement(source._compositional);
        }
        if (source['versionNeeded']) {
            this.versionNeeded = source.versionNeeded;
        }
        if (source['_versionNeeded']) {
            this._versionNeeded = new fhir.FhirElement(source._versionNeeded);
        }
        if (source['content']) {
            this.content = source.content;
        }
        else {
            this.content = null;
        }
        if (source['_content']) {
            this._content = new fhir.FhirElement(source._content);
        }
        if (source['supplements']) {
            this.supplements = source.supplements;
        }
        if (source['_supplements']) {
            this._supplements = new fhir.FhirElement(source._supplements);
        }
        if (source['count']) {
            this.count = source.count;
        }
        if (source['_count']) {
            this._count = new fhir.FhirElement(source._count);
        }
        if (source['filter']) {
            this.filter = source.filter.map((x) => new fhir.CodeSystemFilter(x));
        }
        if (source['property']) {
            this.property = source.property.map((x) => new fhir.CodeSystemProperty(x));
        }
        if (source['concept']) {
            this.concept = source.concept.map((x) => new fhir.CodeSystemConcept(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return PublicationStatusValueSet;
    }
    /**
     * Required-bound Value Set for hierarchyMeaning
     */
    hierarchyMeaningRequiredValueSet() {
        return CodesystemHierarchyMeaningValueSet;
    }
    /**
     * Required-bound Value Set for content
     */
    contentRequiredValueSet() {
        return CodesystemContentModeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: CodeSystem.resourceType']);
        }
        if (this["_url"]) {
            results.push(...this._url.doModelValidation());
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_version"]) {
            results.push(...this._version.doModelValidation());
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_title"]) {
            results.push(...this._title.doModelValidation());
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: CodeSystem.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["_experimental"]) {
            results.push(...this._experimental.doModelValidation());
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["_publisher"]) {
            results.push(...this._publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_purpose"]) {
            results.push(...this._purpose.doModelValidation());
        }
        if (this["_copyright"]) {
            results.push(...this._copyright.doModelValidation());
        }
        if (this["_caseSensitive"]) {
            results.push(...this._caseSensitive.doModelValidation());
        }
        if (this["_valueSet"]) {
            results.push(...this._valueSet.doModelValidation());
        }
        if (this["_hierarchyMeaning"]) {
            results.push(...this._hierarchyMeaning.doModelValidation());
        }
        if (this["_compositional"]) {
            results.push(...this._compositional.doModelValidation());
        }
        if (this["_versionNeeded"]) {
            results.push(...this._versionNeeded.doModelValidation());
        }
        if (!this["content"]) {
            results.push(["content", 'Missing required element: CodeSystem.content']);
        }
        if (this["_content"]) {
            results.push(...this._content.doModelValidation());
        }
        if (this["_supplements"]) {
            results.push(...this._supplements.doModelValidation());
        }
        if (this["_count"]) {
            results.push(...this._count.doModelValidation());
        }
        if (this["filter"]) {
            this.filter.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["property"]) {
            this.property.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["concept"]) {
            this.concept.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=CodeSystem.js.map