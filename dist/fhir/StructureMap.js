// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: StructureMap
import * as fhir from '../fhir.js';
import { MapModelModeValueSet } from '../fhirValueSets/MapModelModeValueSet.js';
import { MapInputModeValueSet } from '../fhirValueSets/MapInputModeValueSet.js';
import { MapSourceListModeValueSet } from '../fhirValueSets/MapSourceListModeValueSet.js';
import { MapContextTypeValueSet } from '../fhirValueSets/MapContextTypeValueSet.js';
import { MapTargetListModeValueSet } from '../fhirValueSets/MapTargetListModeValueSet.js';
import { MapTransformValueSet } from '../fhirValueSets/MapTransformValueSet.js';
import { MapGroupTypeModeValueSet } from '../fhirValueSets/MapGroupTypeModeValueSet.js';
import { PublicationStatusValueSet } from '../fhirValueSets/PublicationStatusValueSet.js';
/**
 * It is not necessary for a structure map to identify any dependent structures, though not listing them may restrict its usefulness.
 */
export class StructureMapStructure extends fhir.BackboneElement {
    /**
     * Default constructor for StructureMapStructure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['url']) {
            this.url = source.url;
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            this._url = new fhir.FhirElement(source._url);
        }
        if (source['mode']) {
            this.mode = source.mode;
        }
        else {
            this.mode = null;
        }
        if (source['_mode']) {
            this._mode = new fhir.FhirElement(source._mode);
        }
        if (source['alias']) {
            this.alias = source.alias;
        }
        if (source['_alias']) {
            this._alias = new fhir.FhirElement(source._alias);
        }
        if (source['documentation']) {
            this.documentation = source.documentation;
        }
        if (source['_documentation']) {
            this._documentation = new fhir.FhirElement(source._documentation);
        }
    }
    /**
     * Required-bound Value Set for mode
     */
    static modeRequiredValueSet() {
        return MapModelModeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["url"]) {
            results.push(["url", 'Missing required element: StructureMap.structure.url']);
        }
        if (this["_url"]) {
            results.push(...this._url.doModelValidation());
        }
        if (!this["mode"]) {
            results.push(["mode", 'Missing required element: StructureMap.structure.mode']);
        }
        if (this["_mode"]) {
            results.push(...this._mode.doModelValidation());
        }
        if (this["_alias"]) {
            results.push(...this._alias.doModelValidation());
        }
        if (this["_documentation"]) {
            results.push(...this._documentation.doModelValidation());
        }
        return results;
    }
}
/**
 * If no inputs are named, then the entry mappings are type based.
 */
export class StructureMapGroupInput extends fhir.BackboneElement {
    /**
     * Default constructor for StructureMapGroupInput - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['name']) {
            this.name = source.name;
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['type']) {
            this.type = source.type;
        }
        if (source['_type']) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source['mode']) {
            this.mode = source.mode;
        }
        else {
            this.mode = null;
        }
        if (source['_mode']) {
            this._mode = new fhir.FhirElement(source._mode);
        }
        if (source['documentation']) {
            this.documentation = source.documentation;
        }
        if (source['_documentation']) {
            this._documentation = new fhir.FhirElement(source._documentation);
        }
    }
    /**
     * Required-bound Value Set for mode
     */
    static modeRequiredValueSet() {
        return MapInputModeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["name"]) {
            results.push(["name", 'Missing required element: StructureMap.group.input.name']);
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_type"]) {
            results.push(...this._type.doModelValidation());
        }
        if (!this["mode"]) {
            results.push(["mode", 'Missing required element: StructureMap.group.input.mode']);
        }
        if (this["_mode"]) {
            results.push(...this._mode.doModelValidation());
        }
        if (this["_documentation"]) {
            results.push(...this._documentation.doModelValidation());
        }
        return results;
    }
}
/**
 * Source inputs to the mapping.
 */
export class StructureMapGroupRuleSource extends fhir.BackboneElement {
    /**
     * Default constructor for StructureMapGroupRuleSource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['context']) {
            this.context = source.context;
        }
        else {
            this.context = null;
        }
        if (source['_context']) {
            this._context = new fhir.FhirElement(source._context);
        }
        if (source['min']) {
            this.min = source.min;
        }
        if (source['_min']) {
            this._min = new fhir.FhirElement(source._min);
        }
        if (source['max']) {
            this.max = source.max;
        }
        if (source['_max']) {
            this._max = new fhir.FhirElement(source._max);
        }
        if (source['type']) {
            this.type = source.type;
        }
        if (source['_type']) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source['defaultValueBase64Binary']) {
            this.defaultValueBase64Binary = source.defaultValueBase64Binary;
        }
        if (source['_defaultValueBase64Binary']) {
            this._defaultValueBase64Binary = new fhir.FhirElement(source._defaultValueBase64Binary);
        }
        if (source['defaultValueBoolean']) {
            this.defaultValueBoolean = source.defaultValueBoolean;
        }
        if (source['_defaultValueBoolean']) {
            this._defaultValueBoolean = new fhir.FhirElement(source._defaultValueBoolean);
        }
        if (source['defaultValueCanonical']) {
            this.defaultValueCanonical = source.defaultValueCanonical;
        }
        if (source['_defaultValueCanonical']) {
            this._defaultValueCanonical = new fhir.FhirElement(source._defaultValueCanonical);
        }
        if (source['defaultValueCode']) {
            this.defaultValueCode = source.defaultValueCode;
        }
        if (source['_defaultValueCode']) {
            this._defaultValueCode = new fhir.FhirElement(source._defaultValueCode);
        }
        if (source['defaultValueDate']) {
            this.defaultValueDate = source.defaultValueDate;
        }
        if (source['_defaultValueDate']) {
            this._defaultValueDate = new fhir.FhirElement(source._defaultValueDate);
        }
        if (source['defaultValueDateTime']) {
            this.defaultValueDateTime = source.defaultValueDateTime;
        }
        if (source['_defaultValueDateTime']) {
            this._defaultValueDateTime = new fhir.FhirElement(source._defaultValueDateTime);
        }
        if (source['defaultValueDecimal']) {
            this.defaultValueDecimal = source.defaultValueDecimal;
        }
        if (source['_defaultValueDecimal']) {
            this._defaultValueDecimal = new fhir.FhirElement(source._defaultValueDecimal);
        }
        if (source['defaultValueId']) {
            this.defaultValueId = source.defaultValueId;
        }
        if (source['_defaultValueId']) {
            this._defaultValueId = new fhir.FhirElement(source._defaultValueId);
        }
        if (source['defaultValueInstant']) {
            this.defaultValueInstant = source.defaultValueInstant;
        }
        if (source['_defaultValueInstant']) {
            this._defaultValueInstant = new fhir.FhirElement(source._defaultValueInstant);
        }
        if (source['defaultValueInteger']) {
            this.defaultValueInteger = source.defaultValueInteger;
        }
        if (source['_defaultValueInteger']) {
            this._defaultValueInteger = new fhir.FhirElement(source._defaultValueInteger);
        }
        if (source['defaultValueMarkdown']) {
            this.defaultValueMarkdown = source.defaultValueMarkdown;
        }
        if (source['_defaultValueMarkdown']) {
            this._defaultValueMarkdown = new fhir.FhirElement(source._defaultValueMarkdown);
        }
        if (source['defaultValueOid']) {
            this.defaultValueOid = source.defaultValueOid;
        }
        if (source['_defaultValueOid']) {
            this._defaultValueOid = new fhir.FhirElement(source._defaultValueOid);
        }
        if (source['defaultValuePositiveInt']) {
            this.defaultValuePositiveInt = source.defaultValuePositiveInt;
        }
        if (source['_defaultValuePositiveInt']) {
            this._defaultValuePositiveInt = new fhir.FhirElement(source._defaultValuePositiveInt);
        }
        if (source['defaultValueString']) {
            this.defaultValueString = source.defaultValueString;
        }
        if (source['_defaultValueString']) {
            this._defaultValueString = new fhir.FhirElement(source._defaultValueString);
        }
        if (source['defaultValueTime']) {
            this.defaultValueTime = source.defaultValueTime;
        }
        if (source['_defaultValueTime']) {
            this._defaultValueTime = new fhir.FhirElement(source._defaultValueTime);
        }
        if (source['defaultValueUnsignedInt']) {
            this.defaultValueUnsignedInt = source.defaultValueUnsignedInt;
        }
        if (source['_defaultValueUnsignedInt']) {
            this._defaultValueUnsignedInt = new fhir.FhirElement(source._defaultValueUnsignedInt);
        }
        if (source['defaultValueUri']) {
            this.defaultValueUri = source.defaultValueUri;
        }
        if (source['_defaultValueUri']) {
            this._defaultValueUri = new fhir.FhirElement(source._defaultValueUri);
        }
        if (source['defaultValueUrl']) {
            this.defaultValueUrl = source.defaultValueUrl;
        }
        if (source['_defaultValueUrl']) {
            this._defaultValueUrl = new fhir.FhirElement(source._defaultValueUrl);
        }
        if (source['defaultValueUuid']) {
            this.defaultValueUuid = source.defaultValueUuid;
        }
        if (source['_defaultValueUuid']) {
            this._defaultValueUuid = new fhir.FhirElement(source._defaultValueUuid);
        }
        if (source['defaultValueAddress']) {
            this.defaultValueAddress = new fhir.Address(source.defaultValueAddress);
        }
        if (source['defaultValueAge']) {
            this.defaultValueAge = new fhir.Age(source.defaultValueAge);
        }
        if (source['defaultValueAnnotation']) {
            this.defaultValueAnnotation = new fhir.Annotation(source.defaultValueAnnotation);
        }
        if (source['defaultValueAttachment']) {
            this.defaultValueAttachment = new fhir.Attachment(source.defaultValueAttachment);
        }
        if (source['defaultValueCodeableConcept']) {
            this.defaultValueCodeableConcept = new fhir.CodeableConcept(source.defaultValueCodeableConcept);
        }
        if (source['defaultValueCoding']) {
            this.defaultValueCoding = new fhir.Coding(source.defaultValueCoding);
        }
        if (source['defaultValueContactPoint']) {
            this.defaultValueContactPoint = new fhir.ContactPoint(source.defaultValueContactPoint);
        }
        if (source['defaultValueCount']) {
            this.defaultValueCount = new fhir.Count(source.defaultValueCount);
        }
        if (source['defaultValueDistance']) {
            this.defaultValueDistance = new fhir.Distance(source.defaultValueDistance);
        }
        if (source['defaultValueDuration']) {
            this.defaultValueDuration = new fhir.Duration(source.defaultValueDuration);
        }
        if (source['defaultValueHumanName']) {
            this.defaultValueHumanName = new fhir.HumanName(source.defaultValueHumanName);
        }
        if (source['defaultValueIdentifier']) {
            this.defaultValueIdentifier = new fhir.Identifier(source.defaultValueIdentifier);
        }
        if (source['defaultValueMoney']) {
            this.defaultValueMoney = new fhir.Money(source.defaultValueMoney);
        }
        if (source['defaultValuePeriod']) {
            this.defaultValuePeriod = new fhir.Period(source.defaultValuePeriod);
        }
        if (source['defaultValueQuantity']) {
            this.defaultValueQuantity = new fhir.Quantity(source.defaultValueQuantity);
        }
        if (source['defaultValueRange']) {
            this.defaultValueRange = new fhir.Range(source.defaultValueRange);
        }
        if (source['defaultValueRatio']) {
            this.defaultValueRatio = new fhir.Ratio(source.defaultValueRatio);
        }
        if (source['defaultValueReference']) {
            this.defaultValueReference = new fhir.Reference(source.defaultValueReference);
        }
        if (source['defaultValueSampledData']) {
            this.defaultValueSampledData = new fhir.SampledData(source.defaultValueSampledData);
        }
        if (source['defaultValueSignature']) {
            this.defaultValueSignature = new fhir.Signature(source.defaultValueSignature);
        }
        if (source['defaultValueTiming']) {
            this.defaultValueTiming = new fhir.Timing(source.defaultValueTiming);
        }
        if (source['defaultValueContactDetail']) {
            this.defaultValueContactDetail = new fhir.ContactDetail(source.defaultValueContactDetail);
        }
        if (source['defaultValueContributor']) {
            this.defaultValueContributor = new fhir.Contributor(source.defaultValueContributor);
        }
        if (source['defaultValueDataRequirement']) {
            this.defaultValueDataRequirement = new fhir.DataRequirement(source.defaultValueDataRequirement);
        }
        if (source['defaultValueExpression']) {
            this.defaultValueExpression = new fhir.Expression(source.defaultValueExpression);
        }
        if (source['defaultValueParameterDefinition']) {
            this.defaultValueParameterDefinition = new fhir.ParameterDefinition(source.defaultValueParameterDefinition);
        }
        if (source['defaultValueRelatedArtifact']) {
            this.defaultValueRelatedArtifact = new fhir.RelatedArtifact(source.defaultValueRelatedArtifact);
        }
        if (source['defaultValueTriggerDefinition']) {
            this.defaultValueTriggerDefinition = new fhir.TriggerDefinition(source.defaultValueTriggerDefinition);
        }
        if (source['defaultValueUsageContext']) {
            this.defaultValueUsageContext = new fhir.UsageContext(source.defaultValueUsageContext);
        }
        if (source['defaultValueDosage']) {
            this.defaultValueDosage = new fhir.Dosage(source.defaultValueDosage);
        }
        if (source['defaultValueMeta']) {
            this.defaultValueMeta = new fhir.Meta(source.defaultValueMeta);
        }
        if (source['element']) {
            this.element = source.element;
        }
        if (source['_element']) {
            this._element = new fhir.FhirElement(source._element);
        }
        if (source['listMode']) {
            this.listMode = source.listMode;
        }
        if (source['_listMode']) {
            this._listMode = new fhir.FhirElement(source._listMode);
        }
        if (source['variable']) {
            this.variable = source.variable;
        }
        if (source['_variable']) {
            this._variable = new fhir.FhirElement(source._variable);
        }
        if (source['condition']) {
            this.condition = source.condition;
        }
        if (source['_condition']) {
            this._condition = new fhir.FhirElement(source._condition);
        }
        if (source['check']) {
            this.check = source.check;
        }
        if (source['_check']) {
            this._check = new fhir.FhirElement(source._check);
        }
        if (source['logMessage']) {
            this.logMessage = source.logMessage;
        }
        if (source['_logMessage']) {
            this._logMessage = new fhir.FhirElement(source._logMessage);
        }
    }
    /**
     * Required-bound Value Set for listMode
     */
    static listModeRequiredValueSet() {
        return MapSourceListModeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["context"]) {
            results.push(["context", 'Missing required element: StructureMap.group.rule.source.context']);
        }
        if (this["_context"]) {
            results.push(...this._context.doModelValidation());
        }
        if (this["_min"]) {
            results.push(...this._min.doModelValidation());
        }
        if (this["_max"]) {
            results.push(...this._max.doModelValidation());
        }
        if (this["_type"]) {
            results.push(...this._type.doModelValidation());
        }
        if (this["_defaultValueBase64Binary"]) {
            results.push(...this._defaultValueBase64Binary.doModelValidation());
        }
        if (this["_defaultValueBoolean"]) {
            results.push(...this._defaultValueBoolean.doModelValidation());
        }
        if (this["_defaultValueCanonical"]) {
            results.push(...this._defaultValueCanonical.doModelValidation());
        }
        if (this["_defaultValueCode"]) {
            results.push(...this._defaultValueCode.doModelValidation());
        }
        if (this["_defaultValueDate"]) {
            results.push(...this._defaultValueDate.doModelValidation());
        }
        if (this["_defaultValueDateTime"]) {
            results.push(...this._defaultValueDateTime.doModelValidation());
        }
        if (this["_defaultValueDecimal"]) {
            results.push(...this._defaultValueDecimal.doModelValidation());
        }
        if (this["_defaultValueId"]) {
            results.push(...this._defaultValueId.doModelValidation());
        }
        if (this["_defaultValueInstant"]) {
            results.push(...this._defaultValueInstant.doModelValidation());
        }
        if (this["_defaultValueInteger"]) {
            results.push(...this._defaultValueInteger.doModelValidation());
        }
        if (this["_defaultValueMarkdown"]) {
            results.push(...this._defaultValueMarkdown.doModelValidation());
        }
        if (this["_defaultValueOid"]) {
            results.push(...this._defaultValueOid.doModelValidation());
        }
        if (this["_defaultValuePositiveInt"]) {
            results.push(...this._defaultValuePositiveInt.doModelValidation());
        }
        if (this["_defaultValueString"]) {
            results.push(...this._defaultValueString.doModelValidation());
        }
        if (this["_defaultValueTime"]) {
            results.push(...this._defaultValueTime.doModelValidation());
        }
        if (this["_defaultValueUnsignedInt"]) {
            results.push(...this._defaultValueUnsignedInt.doModelValidation());
        }
        if (this["_defaultValueUri"]) {
            results.push(...this._defaultValueUri.doModelValidation());
        }
        if (this["_defaultValueUrl"]) {
            results.push(...this._defaultValueUrl.doModelValidation());
        }
        if (this["_defaultValueUuid"]) {
            results.push(...this._defaultValueUuid.doModelValidation());
        }
        if (this["defaultValueAddress"]) {
            results.push(...this.defaultValueAddress.doModelValidation());
        }
        if (this["defaultValueAge"]) {
            results.push(...this.defaultValueAge.doModelValidation());
        }
        if (this["defaultValueAnnotation"]) {
            results.push(...this.defaultValueAnnotation.doModelValidation());
        }
        if (this["defaultValueAttachment"]) {
            results.push(...this.defaultValueAttachment.doModelValidation());
        }
        if (this["defaultValueCodeableConcept"]) {
            results.push(...this.defaultValueCodeableConcept.doModelValidation());
        }
        if (this["defaultValueCoding"]) {
            results.push(...this.defaultValueCoding.doModelValidation());
        }
        if (this["defaultValueContactPoint"]) {
            results.push(...this.defaultValueContactPoint.doModelValidation());
        }
        if (this["defaultValueCount"]) {
            results.push(...this.defaultValueCount.doModelValidation());
        }
        if (this["defaultValueDistance"]) {
            results.push(...this.defaultValueDistance.doModelValidation());
        }
        if (this["defaultValueDuration"]) {
            results.push(...this.defaultValueDuration.doModelValidation());
        }
        if (this["defaultValueHumanName"]) {
            results.push(...this.defaultValueHumanName.doModelValidation());
        }
        if (this["defaultValueIdentifier"]) {
            results.push(...this.defaultValueIdentifier.doModelValidation());
        }
        if (this["defaultValueMoney"]) {
            results.push(...this.defaultValueMoney.doModelValidation());
        }
        if (this["defaultValuePeriod"]) {
            results.push(...this.defaultValuePeriod.doModelValidation());
        }
        if (this["defaultValueQuantity"]) {
            results.push(...this.defaultValueQuantity.doModelValidation());
        }
        if (this["defaultValueRange"]) {
            results.push(...this.defaultValueRange.doModelValidation());
        }
        if (this["defaultValueRatio"]) {
            results.push(...this.defaultValueRatio.doModelValidation());
        }
        if (this["defaultValueReference"]) {
            results.push(...this.defaultValueReference.doModelValidation());
        }
        if (this["defaultValueSampledData"]) {
            results.push(...this.defaultValueSampledData.doModelValidation());
        }
        if (this["defaultValueSignature"]) {
            results.push(...this.defaultValueSignature.doModelValidation());
        }
        if (this["defaultValueTiming"]) {
            results.push(...this.defaultValueTiming.doModelValidation());
        }
        if (this["defaultValueContactDetail"]) {
            results.push(...this.defaultValueContactDetail.doModelValidation());
        }
        if (this["defaultValueContributor"]) {
            results.push(...this.defaultValueContributor.doModelValidation());
        }
        if (this["defaultValueDataRequirement"]) {
            results.push(...this.defaultValueDataRequirement.doModelValidation());
        }
        if (this["defaultValueExpression"]) {
            results.push(...this.defaultValueExpression.doModelValidation());
        }
        if (this["defaultValueParameterDefinition"]) {
            results.push(...this.defaultValueParameterDefinition.doModelValidation());
        }
        if (this["defaultValueRelatedArtifact"]) {
            results.push(...this.defaultValueRelatedArtifact.doModelValidation());
        }
        if (this["defaultValueTriggerDefinition"]) {
            results.push(...this.defaultValueTriggerDefinition.doModelValidation());
        }
        if (this["defaultValueUsageContext"]) {
            results.push(...this.defaultValueUsageContext.doModelValidation());
        }
        if (this["defaultValueDosage"]) {
            results.push(...this.defaultValueDosage.doModelValidation());
        }
        if (this["defaultValueMeta"]) {
            results.push(...this.defaultValueMeta.doModelValidation());
        }
        if (this["_element"]) {
            results.push(...this._element.doModelValidation());
        }
        if (this["_listMode"]) {
            results.push(...this._listMode.doModelValidation());
        }
        if (this["_variable"]) {
            results.push(...this._variable.doModelValidation());
        }
        if (this["_condition"]) {
            results.push(...this._condition.doModelValidation());
        }
        if (this["_check"]) {
            results.push(...this._check.doModelValidation());
        }
        if (this["_logMessage"]) {
            results.push(...this._logMessage.doModelValidation());
        }
        return results;
    }
}
/**
 * Parameters to the transform.
 */
export class StructureMapGroupRuleTargetParameter extends fhir.BackboneElement {
    /**
     * Default constructor for StructureMapGroupRuleTargetParameter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['valueId']) {
            this.valueId = source.valueId;
        }
        if (source['_valueId']) {
            this._valueId = new fhir.FhirElement(source._valueId);
        }
        if (source['valueString']) {
            this.valueString = source.valueString;
        }
        if (source['_valueString']) {
            this._valueString = new fhir.FhirElement(source._valueString);
        }
        if (source['valueBoolean']) {
            this.valueBoolean = source.valueBoolean;
        }
        if (source['_valueBoolean']) {
            this._valueBoolean = new fhir.FhirElement(source._valueBoolean);
        }
        if (source['valueInteger']) {
            this.valueInteger = source.valueInteger;
        }
        if (source['_valueInteger']) {
            this._valueInteger = new fhir.FhirElement(source._valueInteger);
        }
        if (source['valueDecimal']) {
            this.valueDecimal = source.valueDecimal;
        }
        if (source['_valueDecimal']) {
            this._valueDecimal = new fhir.FhirElement(source._valueDecimal);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_valueId"]) {
            results.push(...this._valueId.doModelValidation());
        }
        if (this["_valueString"]) {
            results.push(...this._valueString.doModelValidation());
        }
        if (this["_valueBoolean"]) {
            results.push(...this._valueBoolean.doModelValidation());
        }
        if (this["_valueInteger"]) {
            results.push(...this._valueInteger.doModelValidation());
        }
        if (this["_valueDecimal"]) {
            results.push(...this._valueDecimal.doModelValidation());
        }
        return results;
    }
}
/**
 * Content to create because of this mapping rule.
 */
export class StructureMapGroupRuleTarget extends fhir.BackboneElement {
    /**
     * Default constructor for StructureMapGroupRuleTarget - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['context']) {
            this.context = source.context;
        }
        if (source['_context']) {
            this._context = new fhir.FhirElement(source._context);
        }
        if (source['contextType']) {
            this.contextType = source.contextType;
        }
        if (source['_contextType']) {
            this._contextType = new fhir.FhirElement(source._contextType);
        }
        if (source['element']) {
            this.element = source.element;
        }
        if (source['_element']) {
            this._element = new fhir.FhirElement(source._element);
        }
        if (source['variable']) {
            this.variable = source.variable;
        }
        if (source['_variable']) {
            this._variable = new fhir.FhirElement(source._variable);
        }
        if (source['listMode']) {
            this.listMode = source.listMode.map((x) => (x));
        }
        if (source['_listMode']) {
            this._listMode = source._listMode.map((x) => new fhir.FhirElement(x));
        }
        if (source['listRuleId']) {
            this.listRuleId = source.listRuleId;
        }
        if (source['_listRuleId']) {
            this._listRuleId = new fhir.FhirElement(source._listRuleId);
        }
        if (source['transform']) {
            this.transform = source.transform;
        }
        if (source['_transform']) {
            this._transform = new fhir.FhirElement(source._transform);
        }
        if (source['parameter']) {
            this.parameter = source.parameter.map((x) => new fhir.StructureMapGroupRuleTargetParameter(x));
        }
    }
    /**
     * Required-bound Value Set for contextType
     */
    static contextTypeRequiredValueSet() {
        return MapContextTypeValueSet;
    }
    /**
     * Required-bound Value Set for listMode
     */
    static listModeRequiredValueSet() {
        return MapTargetListModeValueSet;
    }
    /**
     * Required-bound Value Set for transform
     */
    static transformRequiredValueSet() {
        return MapTransformValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_context"]) {
            results.push(...this._context.doModelValidation());
        }
        if (this["_contextType"]) {
            results.push(...this._contextType.doModelValidation());
        }
        if (this["_element"]) {
            results.push(...this._element.doModelValidation());
        }
        if (this["_variable"]) {
            results.push(...this._variable.doModelValidation());
        }
        if (this["_listMode"]) {
            this._listMode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_listRuleId"]) {
            results.push(...this._listRuleId.doModelValidation());
        }
        if (this["_transform"]) {
            results.push(...this._transform.doModelValidation());
        }
        if (this["parameter"]) {
            this.parameter.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Which other rules to apply in the context of this rule.
 */
export class StructureMapGroupRuleDependent extends fhir.BackboneElement {
    /**
     * Default constructor for StructureMapGroupRuleDependent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['name']) {
            this.name = source.name;
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['variable']) {
            this.variable = source.variable.map((x) => (x));
        }
        else {
            this.variable = null;
        }
        if (source['_variable']) {
            this._variable = source._variable.map((x) => new fhir.FhirElement(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["name"]) {
            results.push(["name", 'Missing required element: StructureMap.group.rule.dependent.name']);
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if ((!this["variable"]) || (this["variable"].length === 0)) {
            results.push(["variable", 'Missing required element: StructureMap.group.rule.dependent.variable']);
        }
        if (this["_variable"]) {
            this._variable.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Transform Rule from source to target.
 */
export class StructureMapGroupRule extends fhir.BackboneElement {
    /**
     * Default constructor for StructureMapGroupRule - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['name']) {
            this.name = source.name;
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.StructureMapGroupRuleSource(x));
        }
        else {
            this.source = null;
        }
        if (source['target']) {
            this.target = source.target.map((x) => new fhir.StructureMapGroupRuleTarget(x));
        }
        if (source['rule']) {
            this.rule = source.rule.map((x) => new fhir.StructureMapGroupRule(x));
        }
        if (source['dependent']) {
            this.dependent = source.dependent.map((x) => new fhir.StructureMapGroupRuleDependent(x));
        }
        if (source['documentation']) {
            this.documentation = source.documentation;
        }
        if (source['_documentation']) {
            this._documentation = new fhir.FhirElement(source._documentation);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["name"]) {
            results.push(["name", 'Missing required element: StructureMap.group.rule.name']);
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if ((!this["source"]) || (this["source"].length === 0)) {
            results.push(["source", 'Missing required element: StructureMap.group.rule.source']);
        }
        if (this["source"]) {
            this.source.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["target"]) {
            this.target.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["rule"]) {
            this.rule.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["dependent"]) {
            this.dependent.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_documentation"]) {
            results.push(...this._documentation.doModelValidation());
        }
        return results;
    }
}
/**
 * Organizes the mapping into manageable chunks for human review/ease of maintenance.
 */
export class StructureMapGroup extends fhir.BackboneElement {
    /**
     * Default constructor for StructureMapGroup - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['name']) {
            this.name = source.name;
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['extends']) {
            this.extends = source.extends;
        }
        if (source['_extends']) {
            this._extends = new fhir.FhirElement(source._extends);
        }
        if (source['typeMode']) {
            this.typeMode = source.typeMode;
        }
        else {
            this.typeMode = null;
        }
        if (source['_typeMode']) {
            this._typeMode = new fhir.FhirElement(source._typeMode);
        }
        if (source['documentation']) {
            this.documentation = source.documentation;
        }
        if (source['_documentation']) {
            this._documentation = new fhir.FhirElement(source._documentation);
        }
        if (source['input']) {
            this.input = source.input.map((x) => new fhir.StructureMapGroupInput(x));
        }
        else {
            this.input = null;
        }
        if (source['rule']) {
            this.rule = source.rule.map((x) => new fhir.StructureMapGroupRule(x));
        }
        else {
            this.rule = null;
        }
    }
    /**
     * Required-bound Value Set for typeMode
     */
    static typeModeRequiredValueSet() {
        return MapGroupTypeModeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["name"]) {
            results.push(["name", 'Missing required element: StructureMap.group.name']);
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_extends"]) {
            results.push(...this._extends.doModelValidation());
        }
        if (!this["typeMode"]) {
            results.push(["typeMode", 'Missing required element: StructureMap.group.typeMode']);
        }
        if (this["_typeMode"]) {
            results.push(...this._typeMode.doModelValidation());
        }
        if (this["_documentation"]) {
            results.push(...this._documentation.doModelValidation());
        }
        if ((!this["input"]) || (this["input"].length === 0)) {
            results.push(["input", 'Missing required element: StructureMap.group.input']);
        }
        if (this["input"]) {
            this.input.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if ((!this["rule"]) || (this["rule"].length === 0)) {
            results.push(["rule", 'Missing required element: StructureMap.group.rule']);
        }
        if (this["rule"]) {
            this.rule.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * A Map of relationships between 2 structures that can be used to transform data.
 */
export class StructureMap extends fhir.DomainResource {
    /**
     * Default constructor for StructureMap - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'StructureMap';
        if (source['url']) {
            this.url = source.url;
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            this._url = new fhir.FhirElement(source._url);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['version']) {
            this.version = source.version;
        }
        if (source['_version']) {
            this._version = new fhir.FhirElement(source._version);
        }
        if (source['name']) {
            this.name = source.name;
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['title']) {
            this.title = source.title;
        }
        if (source['_title']) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['experimental']) {
            this.experimental = source.experimental;
        }
        if (source['_experimental']) {
            this._experimental = new fhir.FhirElement(source._experimental);
        }
        if (source['date']) {
            this.date = source.date;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['publisher']) {
            this.publisher = source.publisher;
        }
        if (source['_publisher']) {
            this._publisher = new fhir.FhirElement(source._publisher);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['purpose']) {
            this.purpose = source.purpose;
        }
        if (source['_purpose']) {
            this._purpose = new fhir.FhirElement(source._purpose);
        }
        if (source['copyright']) {
            this.copyright = source.copyright;
        }
        if (source['_copyright']) {
            this._copyright = new fhir.FhirElement(source._copyright);
        }
        if (source['structure']) {
            this.structure = source.structure.map((x) => new fhir.StructureMapStructure(x));
        }
        if (source['import']) {
            this.import = source.import.map((x) => (x));
        }
        if (source['_import']) {
            this._import = source._import.map((x) => new fhir.FhirElement(x));
        }
        if (source['group']) {
            this.group = source.group.map((x) => new fhir.StructureMapGroup(x));
        }
        else {
            this.group = null;
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return PublicationStatusValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: StructureMap.resourceType']);
        }
        if (!this["url"]) {
            results.push(["url", 'Missing required element: StructureMap.url']);
        }
        if (this["_url"]) {
            results.push(...this._url.doModelValidation());
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_version"]) {
            results.push(...this._version.doModelValidation());
        }
        if (!this["name"]) {
            results.push(["name", 'Missing required element: StructureMap.name']);
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_title"]) {
            results.push(...this._title.doModelValidation());
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: StructureMap.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["_experimental"]) {
            results.push(...this._experimental.doModelValidation());
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["_publisher"]) {
            results.push(...this._publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_purpose"]) {
            results.push(...this._purpose.doModelValidation());
        }
        if (this["_copyright"]) {
            results.push(...this._copyright.doModelValidation());
        }
        if (this["structure"]) {
            this.structure.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_import"]) {
            this._import.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if ((!this["group"]) || (this["group"].length === 0)) {
            results.push(["group", 'Missing required element: StructureMap.group']);
        }
        if (this["group"]) {
            this.group.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=StructureMap.js.map