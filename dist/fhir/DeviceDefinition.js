// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: DeviceDefinition
import * as fhir from '../fhir.js';
import { DeviceNametypeValueSet } from '../fhirValueSets/DeviceNametypeValueSet.js';
import { DeviceKindValueSet } from '../fhirValueSets/DeviceKindValueSet.js';
/**
 * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
 */
export class DeviceDefinitionUdiDeviceIdentifier extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionUdiDeviceIdentifier - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['deviceIdentifier']) {
            this.deviceIdentifier = source.deviceIdentifier;
        }
        else {
            this.deviceIdentifier = null;
        }
        if (source['_deviceIdentifier']) {
            this._deviceIdentifier = new fhir.FhirElement(source._deviceIdentifier);
        }
        if (source['issuer']) {
            this.issuer = source.issuer;
        }
        else {
            this.issuer = null;
        }
        if (source['_issuer']) {
            this._issuer = new fhir.FhirElement(source._issuer);
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction;
        }
        else {
            this.jurisdiction = null;
        }
        if (source['_jurisdiction']) {
            this._jurisdiction = new fhir.FhirElement(source._jurisdiction);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["deviceIdentifier"]) {
            results.push(["deviceIdentifier", 'Missing required element: DeviceDefinition.udiDeviceIdentifier.deviceIdentifier']);
        }
        if (this["_deviceIdentifier"]) {
            results.push(...this._deviceIdentifier.doModelValidation());
        }
        if (!this["issuer"]) {
            results.push(["issuer", 'Missing required element: DeviceDefinition.udiDeviceIdentifier.issuer']);
        }
        if (this["_issuer"]) {
            results.push(...this._issuer.doModelValidation());
        }
        if (!this["jurisdiction"]) {
            results.push(["jurisdiction", 'Missing required element: DeviceDefinition.udiDeviceIdentifier.jurisdiction']);
        }
        if (this["_jurisdiction"]) {
            results.push(...this._jurisdiction.doModelValidation());
        }
        return results;
    }
}
/**
 * A name given to the device to identify it.
 */
export class DeviceDefinitionDeviceName extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionDeviceName - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['name']) {
            this.name = source.name;
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            this._type = new fhir.FhirElement(source._type);
        }
    }
    /**
     * Required-bound Value Set for type
     */
    typeRequiredValueSet() {
        return DeviceNametypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["name"]) {
            results.push(["name", 'Missing required element: DeviceDefinition.deviceName.name']);
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (!this["type"]) {
            results.push(["type", 'Missing required element: DeviceDefinition.deviceName.type']);
        }
        if (this["_type"]) {
            results.push(...this._type.doModelValidation());
        }
        return results;
    }
}
/**
 * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
 */
export class DeviceDefinitionSpecialization extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionSpecialization - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['systemType']) {
            this.systemType = source.systemType;
        }
        else {
            this.systemType = null;
        }
        if (source['_systemType']) {
            this._systemType = new fhir.FhirElement(source._systemType);
        }
        if (source['version']) {
            this.version = source.version;
        }
        if (source['_version']) {
            this._version = new fhir.FhirElement(source._version);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["systemType"]) {
            results.push(["systemType", 'Missing required element: DeviceDefinition.specialization.systemType']);
        }
        if (this["_systemType"]) {
            results.push(...this._systemType.doModelValidation());
        }
        if (this["_version"]) {
            results.push(...this._version.doModelValidation());
        }
        return results;
    }
}
/**
 * Device capabilities.
 */
export class DeviceDefinitionCapability extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionCapability - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['description']) {
            this.description = source.description.map((x) => new fhir.CodeableConcept(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["type"]) {
            results.push(["type", 'Missing required element: DeviceDefinition.capability.type']);
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["description"]) {
            this.description.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
 */
export class DeviceDefinitionProperty extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionProperty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['valueQuantity']) {
            this.valueQuantity = source.valueQuantity.map((x) => new fhir.Quantity(x));
        }
        if (source['valueCode']) {
            this.valueCode = source.valueCode.map((x) => new fhir.CodeableConcept(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["type"]) {
            results.push(["type", 'Missing required element: DeviceDefinition.property.type']);
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["valueQuantity"]) {
            this.valueQuantity.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["valueCode"]) {
            this.valueCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * A substance used to create the material(s) of which the device is made.
 */
export class DeviceDefinitionMaterial extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionMaterial - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['substance']) {
            this.substance = new fhir.CodeableConcept(source.substance);
        }
        else {
            this.substance = null;
        }
        if (source['alternate']) {
            this.alternate = source.alternate;
        }
        if (source['_alternate']) {
            this._alternate = new fhir.FhirElement(source._alternate);
        }
        if (source['allergenicIndicator']) {
            this.allergenicIndicator = source.allergenicIndicator;
        }
        if (source['_allergenicIndicator']) {
            this._allergenicIndicator = new fhir.FhirElement(source._allergenicIndicator);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["substance"]) {
            results.push(["substance", 'Missing required element: DeviceDefinition.material.substance']);
        }
        if (this["substance"]) {
            results.push(...this.substance.doModelValidation());
        }
        if (this["_alternate"]) {
            results.push(...this._alternate.doModelValidation());
        }
        if (this["_allergenicIndicator"]) {
            results.push(...this._allergenicIndicator.doModelValidation());
        }
        return results;
    }
}
/**
 * The characteristics, operational status and capabilities of a medical-related component of a medical device.
 */
export class DeviceDefinition extends fhir.DomainResource {
    /**
     * Default constructor for DeviceDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'DeviceDefinition';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['udiDeviceIdentifier']) {
            this.udiDeviceIdentifier = source.udiDeviceIdentifier.map((x) => new fhir.DeviceDefinitionUdiDeviceIdentifier(x));
        }
        if (source['manufacturerString']) {
            this.manufacturerString = source.manufacturerString;
        }
        if (source['_manufacturerString']) {
            this._manufacturerString = new fhir.FhirElement(source._manufacturerString);
        }
        if (source['manufacturerReference']) {
            this.manufacturerReference = new fhir.Reference(source.manufacturerReference);
        }
        if (source['deviceName']) {
            this.deviceName = source.deviceName.map((x) => new fhir.DeviceDefinitionDeviceName(x));
        }
        if (source['modelNumber']) {
            this.modelNumber = source.modelNumber;
        }
        if (source['_modelNumber']) {
            this._modelNumber = new fhir.FhirElement(source._modelNumber);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['specialization']) {
            this.specialization = source.specialization.map((x) => new fhir.DeviceDefinitionSpecialization(x));
        }
        if (source['version']) {
            this.version = source.version.map((x) => (x));
        }
        if (source['_version']) {
            this._version = source._version.map((x) => new fhir.FhirElement(x));
        }
        if (source['safety']) {
            this.safety = source.safety.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['shelfLifeStorage']) {
            this.shelfLifeStorage = source.shelfLifeStorage.map((x) => new fhir.ProductShelfLife(x));
        }
        if (source['physicalCharacteristics']) {
            this.physicalCharacteristics = new fhir.ProdCharacteristic(source.physicalCharacteristics);
        }
        if (source['languageCode']) {
            this.languageCode = source.languageCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['capability']) {
            this.capability = source.capability.map((x) => new fhir.DeviceDefinitionCapability(x));
        }
        if (source['property']) {
            this.property = source.property.map((x) => new fhir.DeviceDefinitionProperty(x));
        }
        if (source['owner']) {
            this.owner = new fhir.Reference(source.owner);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactPoint(x));
        }
        if (source['url']) {
            this.url = source.url;
        }
        if (source['_url']) {
            this._url = new fhir.FhirElement(source._url);
        }
        if (source['onlineInformation']) {
            this.onlineInformation = source.onlineInformation;
        }
        if (source['_onlineInformation']) {
            this._onlineInformation = new fhir.FhirElement(source._onlineInformation);
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['parentDevice']) {
            this.parentDevice = new fhir.Reference(source.parentDevice);
        }
        if (source['material']) {
            this.material = source.material.map((x) => new fhir.DeviceDefinitionMaterial(x));
        }
    }
    /**
     * Example-bound Value Set for type
     */
    typeExampleValueSet() {
        return DeviceKindValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: DeviceDefinition.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["udiDeviceIdentifier"]) {
            this.udiDeviceIdentifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_manufacturerString"]) {
            results.push(...this._manufacturerString.doModelValidation());
        }
        if (this["manufacturerReference"]) {
            results.push(...this.manufacturerReference.doModelValidation());
        }
        if (this["deviceName"]) {
            this.deviceName.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_modelNumber"]) {
            results.push(...this._modelNumber.doModelValidation());
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["specialization"]) {
            this.specialization.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_version"]) {
            this._version.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["safety"]) {
            this.safety.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["shelfLifeStorage"]) {
            this.shelfLifeStorage.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["physicalCharacteristics"]) {
            results.push(...this.physicalCharacteristics.doModelValidation());
        }
        if (this["languageCode"]) {
            this.languageCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["capability"]) {
            this.capability.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["property"]) {
            this.property.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["owner"]) {
            results.push(...this.owner.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_url"]) {
            results.push(...this._url.doModelValidation());
        }
        if (this["_onlineInformation"]) {
            results.push(...this._onlineInformation.doModelValidation());
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["quantity"]) {
            results.push(...this.quantity.doModelValidation());
        }
        if (this["parentDevice"]) {
            results.push(...this.parentDevice.doModelValidation());
        }
        if (this["material"]) {
            this.material.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=DeviceDefinition.js.map