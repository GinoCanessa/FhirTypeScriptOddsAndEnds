// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Contract
import * as fhir from '../fhir.js';
import { ContractDefinitionTypeValueSet, } from '../fhirValueSets/ContractDefinitionTypeValueSet.js';
import { ContractDefinitionSubtypeValueSet, } from '../fhirValueSets/ContractDefinitionSubtypeValueSet.js';
import { ContractPublicationstatusValueSet, } from '../fhirValueSets/ContractPublicationstatusValueSet.js';
import { ContractSecurityClassificationValueSet, } from '../fhirValueSets/ContractSecurityClassificationValueSet.js';
import { ContractSecurityCategoryValueSet, } from '../fhirValueSets/ContractSecurityCategoryValueSet.js';
import { ContractSecurityControlValueSet, } from '../fhirValueSets/ContractSecurityControlValueSet.js';
import { ContractPartyRoleValueSet, } from '../fhirValueSets/ContractPartyRoleValueSet.js';
import { ContractTermTypeValueSet, } from '../fhirValueSets/ContractTermTypeValueSet.js';
import { V3ActConsentDirectiveValueSet, } from '../fhirValueSets/V3ActConsentDirectiveValueSet.js';
import { ContractDecisionModeValueSet, } from '../fhirValueSets/ContractDecisionModeValueSet.js';
import { ContractAssetcontextValueSet, } from '../fhirValueSets/ContractAssetcontextValueSet.js';
import { ContractAssetscopeValueSet, } from '../fhirValueSets/ContractAssetscopeValueSet.js';
import { ContractAssettypeValueSet, } from '../fhirValueSets/ContractAssettypeValueSet.js';
import { ContractAssetsubtypeValueSet, } from '../fhirValueSets/ContractAssetsubtypeValueSet.js';
import { ConsentContentClassValueSet, } from '../fhirValueSets/ConsentContentClassValueSet.js';
import { AssetAvailabilityValueSet, } from '../fhirValueSets/AssetAvailabilityValueSet.js';
import { ContractActorroleValueSet, } from '../fhirValueSets/ContractActorroleValueSet.js';
import { ContractActionValueSet, } from '../fhirValueSets/ContractActionValueSet.js';
import { V3PurposeOfUseValueSet, } from '../fhirValueSets/V3PurposeOfUseValueSet.js';
import { ContractActionstatusValueSet, } from '../fhirValueSets/ContractActionstatusValueSet.js';
import { ProvenanceAgentTypeValueSet, } from '../fhirValueSets/ProvenanceAgentTypeValueSet.js';
import { ProvenanceAgentRoleValueSet, } from '../fhirValueSets/ProvenanceAgentRoleValueSet.js';
import { ContractTermSubtypeValueSet, } from '../fhirValueSets/ContractTermSubtypeValueSet.js';
import { ContractSignerTypeValueSet, } from '../fhirValueSets/ContractSignerTypeValueSet.js';
import { ContractStatusValueSet, } from '../fhirValueSets/ContractStatusValueSet.js';
import { ContractLegalstateValueSet, } from '../fhirValueSets/ContractLegalstateValueSet.js';
import { ContractContentDerivativeValueSet, } from '../fhirValueSets/ContractContentDerivativeValueSet.js';
import { ContractExpirationTypeValueSet, } from '../fhirValueSets/ContractExpirationTypeValueSet.js';
import { ContractScopeValueSet, } from '../fhirValueSets/ContractScopeValueSet.js';
import { ContractTypeValueSet, } from '../fhirValueSets/ContractTypeValueSet.js';
import { ContractSubtypeValueSet, } from '../fhirValueSets/ContractSubtypeValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Precusory content developed with a focus and intent of supporting the formation a Contract instance, which may be associated with and transformable into a Contract.
 */
export class ContractContentDefinition extends fhir.BackboneElement {
    /**
     * Default constructor for ContractContentDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ContractContentDefinition';
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['subType']) {
            this.subType = new fhir.CodeableConcept(source.subType);
        }
        if (source['publisher']) {
            this.publisher = new fhir.Reference(source.publisher);
        }
        if (source['publicationDate']) {
            this.publicationDate = new fhir.FhirDateTime({ value: source.publicationDate });
        }
        if (source['publicationStatus']) {
            this.publicationStatus = source.publicationStatus;
        }
        else {
            this.publicationStatus = null;
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
    }
    /**
     * Example-bound Value Set for type
     */
    static typeExampleValueSet() {
        return ContractDefinitionTypeValueSet;
    }
    /**
     * Example-bound Value Set for subType
     */
    static subTypeExampleValueSet() {
        return ContractDefinitionSubtypeValueSet;
    }
    /**
     * Required-bound Value Set for publicationStatus
     */
    static publicationStatusRequiredValueSet() {
        return ContractPublicationstatusValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['type']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property type:fhir.CodeableConcept fhir: Contract.contentDefinition.type:CodeableConcept", }));
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["subType"]) {
            outcome.issue.push(...this.subType.doModelValidation().issue);
        }
        if (this["publisher"]) {
            outcome.issue.push(...this.publisher.doModelValidation().issue);
        }
        if (this["publicationDate"]) {
            outcome.issue.push(...this.publicationDate.doModelValidation().issue);
        }
        if (!this['publicationStatus']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property publicationStatus:ContractPublicationstatusValueSetEnum fhir: Contract.contentDefinition.publicationStatus:code", }));
        }
        if (this["copyright"]) {
            outcome.issue.push(...this.copyright.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Security labels that protect the handling of information about the term and its elements, which may be specifically identified..
 */
export class ContractTermSecurityLabel extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermSecurityLabel - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ContractTermSecurityLabel';
        /**
         * Number used to link this term or term element to the applicable Security Label.
         */
        this.number = [];
        /**
         * Security label privacy tag that species the applicable privacy and security policies governing this term and/or term elements.
         */
        this.category = [];
        /**
         * Security label privacy tag that species the manner in which term and/or term elements are to be protected.
         */
        this.control = [];
        if (source['number']) {
            this.number = source.number.map((x) => new fhir.FhirUnsignedInt({ value: x }));
        }
        if (source['classification']) {
            this.classification = new fhir.Coding(source.classification);
        }
        else {
            this.classification = null;
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.Coding(x));
        }
        if (source['control']) {
            this.control = source.control.map((x) => new fhir.Coding(x));
        }
    }
    /**
     * Example-bound Value Set for classification
     */
    static classificationExampleValueSet() {
        return ContractSecurityClassificationValueSet;
    }
    /**
     * Example-bound Value Set for category
     */
    static categoryExampleValueSet() {
        return ContractSecurityCategoryValueSet;
    }
    /**
     * Example-bound Value Set for control
     */
    static controlExampleValueSet() {
        return ContractSecurityControlValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["number"]) {
            this.number.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['classification']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property classification:fhir.Coding fhir: Contract.term.securityLabel.classification:Coding", }));
        }
        if (this["classification"]) {
            outcome.issue.push(...this.classification.doModelValidation().issue);
        }
        if (this["category"]) {
            this.category.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["control"]) {
            this.control.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Offer Recipient.
 */
export class ContractTermOfferParty extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermOfferParty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ContractTermOfferParty';
        /**
         * Participant in the offer.
         */
        this.reference = [];
        if (source['reference']) {
            this.reference = source.reference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reference = null;
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        else {
            this.role = null;
        }
    }
    /**
     * Example-bound Value Set for role
     */
    static roleExampleValueSet() {
        return ContractPartyRoleValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['reference']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property reference:fhir.Reference[] fhir: Contract.term.offer.party.reference:Reference", }));
        }
        else if (!Array.isArray(this.reference)) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue, diagnostics: "Found scalar in array property reference:fhir.Reference[] fhir: Contract.term.offer.party.reference:Reference", }));
        }
        else if (this.reference.length === 0) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property reference:fhir.Reference[] fhir: Contract.term.offer.party.reference:Reference", }));
        }
        if (this["reference"]) {
            this.reference.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['role']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property role:fhir.CodeableConcept fhir: Contract.term.offer.party.role:CodeableConcept", }));
        }
        if (this["role"]) {
            outcome.issue.push(...this.role.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Response to offer text.
 */
export class ContractTermOfferAnswer extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermOfferAnswer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ContractTermOfferAnswer';
        this.__valueIsChoice = true;
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueBoolean']) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueDecimal']) {
            this.value = new fhir.FhirDecimal({ value: source.valueDecimal });
        }
        else if (source['valueInteger']) {
            this.value = new fhir.FhirInteger({ value: source.valueInteger });
        }
        else if (source['valueDate']) {
            this.value = new fhir.FhirDate({ value: source.valueDate });
        }
        else if (source['valueDateTime']) {
            this.value = new fhir.FhirDateTime({ value: source.valueDateTime });
        }
        else if (source['valueTime']) {
            this.value = new fhir.FhirTime({ value: source.valueTime });
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueUri']) {
            this.value = new fhir.FhirUri({ value: source.valueUri });
        }
        else if (source['valueAttachment']) {
            this.value = new fhir.Attachment(source.valueAttachment);
        }
        else if (source['valueCoding']) {
            this.value = new fhir.Coding(source.valueCoding);
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueReference']) {
            this.value = new fhir.Reference(source.valueReference);
        }
        else {
            this.value = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['value']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property value: fhir: Contract.term.offer.answer.value[x]:", }));
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * The matter of concern in the context of this provision of the agrement.
 */
export class ContractTermOffer extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermOffer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ContractTermOffer';
        /**
         * Unique identifier for this particular Contract Provision.
         */
        this.identifier = [];
        /**
         * Offer Recipient.
         */
        this.party = [];
        /**
         * How the decision about a Contract was conveyed.
         */
        this.decisionMode = [];
        /**
         * Response to offer text.
         */
        this.answer = [];
        /**
         * The id of the clause or question text of the offer in the referenced questionnaire/response.
         */
        this.linkId = [];
        /**
         * Security labels that protects the offer.
         */
        this.securityLabelNumber = [];
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['party']) {
            this.party = source.party.map((x) => new fhir.ContractTermOfferParty(x));
        }
        if (source['topic']) {
            this.topic = new fhir.Reference(source.topic);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['decision']) {
            this.decision = new fhir.CodeableConcept(source.decision);
        }
        if (source['decisionMode']) {
            this.decisionMode = source.decisionMode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['answer']) {
            this.answer = source.answer.map((x) => new fhir.ContractTermOfferAnswer(x));
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['linkId']) {
            this.linkId = source.linkId.map((x) => new fhir.FhirString({ value: x }));
        }
        if (source['securityLabelNumber']) {
            this.securityLabelNumber = source.securityLabelNumber.map((x) => new fhir.FhirUnsignedInt({ value: x }));
        }
    }
    /**
     * Example-bound Value Set for type
     */
    static typeExampleValueSet() {
        return ContractTermTypeValueSet;
    }
    /**
     * Extensible-bound Value Set for decision
     */
    static decisionExtensibleValueSet() {
        return V3ActConsentDirectiveValueSet;
    }
    /**
     * Example-bound Value Set for decisionMode
     */
    static decisionModeExampleValueSet() {
        return ContractDecisionModeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["party"]) {
            this.party.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["topic"]) {
            outcome.issue.push(...this.topic.doModelValidation().issue);
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["decision"]) {
            outcome.issue.push(...this.decision.doModelValidation().issue);
        }
        if (this["decisionMode"]) {
            this.decisionMode.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["answer"]) {
            this.answer.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["text"]) {
            outcome.issue.push(...this.text.doModelValidation().issue);
        }
        if (this["linkId"]) {
            this.linkId.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["securityLabelNumber"]) {
            this.securityLabelNumber.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Circumstance of the asset.
 */
export class ContractTermAssetContext extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermAssetContext - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ContractTermAssetContext';
        /**
         * Coded representation of the context generally or of the Referenced entity, such as the asset holder type or location.
         */
        this.code = [];
        if (source['reference']) {
            this.reference = new fhir.Reference(source.reference);
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
    }
    /**
     * Example-bound Value Set for code
     */
    static codeExampleValueSet() {
        return ContractAssetcontextValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["reference"]) {
            outcome.issue.push(...this.reference.doModelValidation().issue);
        }
        if (this["code"]) {
            this.code.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["text"]) {
            outcome.issue.push(...this.text.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Contract Valued Item List.
 */
export class ContractTermAssetValuedItem extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermAssetValuedItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ContractTermAssetValuedItem';
        this.__entityIsChoice = true;
        /**
         * Id  of the clause or question text related to the context of this valuedItem in the referenced form or QuestionnaireResponse.
         */
        this.linkId = [];
        /**
         * A set of security labels that define which terms are controlled by this condition.
         */
        this.securityLabelNumber = [];
        if (source['entity']) {
            this.entity = source.entity;
        }
        else if (source['entityCodeableConcept']) {
            this.entity = new fhir.CodeableConcept(source.entityCodeableConcept);
        }
        else if (source['entityReference']) {
            this.entity = new fhir.Reference(source.entityReference);
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['effectiveTime']) {
            this.effectiveTime = new fhir.FhirDateTime({ value: source.effectiveTime });
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['points']) {
            this.points = new fhir.FhirDecimal({ value: source.points });
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['payment']) {
            this.payment = new fhir.FhirString({ value: source.payment });
        }
        if (source['paymentDate']) {
            this.paymentDate = new fhir.FhirDateTime({ value: source.paymentDate });
        }
        if (source['responsible']) {
            this.responsible = new fhir.Reference(source.responsible);
        }
        if (source['recipient']) {
            this.recipient = new fhir.Reference(source.recipient);
        }
        if (source['linkId']) {
            this.linkId = source.linkId.map((x) => new fhir.FhirString({ value: x }));
        }
        if (source['securityLabelNumber']) {
            this.securityLabelNumber = source.securityLabelNumber.map((x) => new fhir.FhirUnsignedInt({ value: x }));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["identifier"]) {
            outcome.issue.push(...this.identifier.doModelValidation().issue);
        }
        if (this["effectiveTime"]) {
            outcome.issue.push(...this.effectiveTime.doModelValidation().issue);
        }
        if (this["quantity"]) {
            outcome.issue.push(...this.quantity.doModelValidation().issue);
        }
        if (this["unitPrice"]) {
            outcome.issue.push(...this.unitPrice.doModelValidation().issue);
        }
        if (this["factor"]) {
            outcome.issue.push(...this.factor.doModelValidation().issue);
        }
        if (this["points"]) {
            outcome.issue.push(...this.points.doModelValidation().issue);
        }
        if (this["net"]) {
            outcome.issue.push(...this.net.doModelValidation().issue);
        }
        if (this["payment"]) {
            outcome.issue.push(...this.payment.doModelValidation().issue);
        }
        if (this["paymentDate"]) {
            outcome.issue.push(...this.paymentDate.doModelValidation().issue);
        }
        if (this["responsible"]) {
            outcome.issue.push(...this.responsible.doModelValidation().issue);
        }
        if (this["recipient"]) {
            outcome.issue.push(...this.recipient.doModelValidation().issue);
        }
        if (this["linkId"]) {
            this.linkId.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["securityLabelNumber"]) {
            this.securityLabelNumber.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Contract Term Asset List.
 */
export class ContractTermAsset extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermAsset - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ContractTermAsset';
        /**
         * Target entity type about which the term may be concerned.
         */
        this.type = [];
        /**
         * Associated entities.
         */
        this.typeReference = [];
        /**
         * May be a subtype or part of an offered asset.
         */
        this.subtype = [];
        /**
         * Circumstance of the asset.
         */
        this.context = [];
        /**
         * Type of Asset availability for use or ownership.
         */
        this.periodType = [];
        /**
         * Asset relevant contractual time period.
         */
        this.period = [];
        /**
         * Time period of asset use.
         */
        this.usePeriod = [];
        /**
         * Id [identifier??] of the clause or question text about the asset in the referenced form or QuestionnaireResponse.
         */
        this.linkId = [];
        /**
         * Response to assets.
         */
        this.answer = [];
        /**
         * Security labels that protects the asset.
         */
        this.securityLabelNumber = [];
        /**
         * Contract Valued Item List.
         */
        this.valuedItem = [];
        if (source['scope']) {
            this.scope = new fhir.CodeableConcept(source.scope);
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['typeReference']) {
            this.typeReference = source.typeReference.map((x) => new fhir.Reference(x));
        }
        if (source['subtype']) {
            this.subtype = source.subtype.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['relationship']) {
            this.relationship = new fhir.Coding(source.relationship);
        }
        if (source['context']) {
            this.context = source.context.map((x) => new fhir.ContractTermAssetContext(x));
        }
        if (source['condition']) {
            this.condition = new fhir.FhirString({ value: source.condition });
        }
        if (source['periodType']) {
            this.periodType = source.periodType.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['period']) {
            this.period = source.period.map((x) => new fhir.Period(x));
        }
        if (source['usePeriod']) {
            this.usePeriod = source.usePeriod.map((x) => new fhir.Period(x));
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['linkId']) {
            this.linkId = source.linkId.map((x) => new fhir.FhirString({ value: x }));
        }
        if (source['answer']) {
            this.answer = source.answer.map((x) => new fhir.ContractTermOfferAnswer(x));
        }
        if (source['securityLabelNumber']) {
            this.securityLabelNumber = source.securityLabelNumber.map((x) => new fhir.FhirUnsignedInt({ value: x }));
        }
        if (source['valuedItem']) {
            this.valuedItem = source.valuedItem.map((x) => new fhir.ContractTermAssetValuedItem(x));
        }
    }
    /**
     * Example-bound Value Set for scope
     */
    static scopeExampleValueSet() {
        return ContractAssetscopeValueSet;
    }
    /**
     * Example-bound Value Set for type
     */
    static typeExampleValueSet() {
        return ContractAssettypeValueSet;
    }
    /**
     * Example-bound Value Set for subtype
     */
    static subtypeExampleValueSet() {
        return ContractAssetsubtypeValueSet;
    }
    /**
     * Extensible-bound Value Set for relationship
     */
    static relationshipExtensibleValueSet() {
        return ConsentContentClassValueSet;
    }
    /**
     * Example-bound Value Set for periodType
     */
    static periodTypeExampleValueSet() {
        return AssetAvailabilityValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["scope"]) {
            outcome.issue.push(...this.scope.doModelValidation().issue);
        }
        if (this["type"]) {
            this.type.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["typeReference"]) {
            this.typeReference.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["subtype"]) {
            this.subtype.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["relationship"]) {
            outcome.issue.push(...this.relationship.doModelValidation().issue);
        }
        if (this["context"]) {
            this.context.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["condition"]) {
            outcome.issue.push(...this.condition.doModelValidation().issue);
        }
        if (this["periodType"]) {
            this.periodType.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["period"]) {
            this.period.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["usePeriod"]) {
            this.usePeriod.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["text"]) {
            outcome.issue.push(...this.text.doModelValidation().issue);
        }
        if (this["linkId"]) {
            this.linkId.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["answer"]) {
            this.answer.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["securityLabelNumber"]) {
            this.securityLabelNumber.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["valuedItem"]) {
            this.valuedItem.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Entity of the action.
 */
export class ContractTermActionSubject extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermActionSubject - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ContractTermActionSubject';
        /**
         * The entity the action is performed or not performed on or for.
         */
        this.reference = [];
        if (source['reference']) {
            this.reference = source.reference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reference = null;
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
    }
    /**
     * Example-bound Value Set for role
     */
    static roleExampleValueSet() {
        return ContractActorroleValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['reference']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property reference:fhir.Reference[] fhir: Contract.term.action.subject.reference:Reference", }));
        }
        else if (!Array.isArray(this.reference)) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue, diagnostics: "Found scalar in array property reference:fhir.Reference[] fhir: Contract.term.action.subject.reference:Reference", }));
        }
        else if (this.reference.length === 0) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property reference:fhir.Reference[] fhir: Contract.term.action.subject.reference:Reference", }));
        }
        if (this["reference"]) {
            this.reference.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["role"]) {
            outcome.issue.push(...this.role.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
 * For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
 */
export class ContractTermAction extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ContractTermAction';
        /**
         * Entity of the action.
         */
        this.subject = [];
        /**
         * Id [identifier??] of the clause or question text related to this action in the referenced form or QuestionnaireResponse.
         */
        this.linkId = [];
        /**
         * Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.
         */
        this.contextLinkId = [];
        this.__occurrenceIsChoice = true;
        /**
         * Who or what initiated the action and has responsibility for its activation.
         */
        this.requester = [];
        /**
         * Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.
         */
        this.requesterLinkId = [];
        /**
         * The type of individual that is desired or required to perform or not perform the action.
         */
        this.performerType = [];
        /**
         * Id [identifier??] of the clause or question text related to the reason type or reference of this  action in the referenced form or QuestionnaireResponse.
         */
        this.performerLinkId = [];
        /**
         * Rationale for the action to be performed or not performed. Describes why the action is permitted or prohibited.
         */
        this.reasonCode = [];
        /**
         * Indicates another resource whose existence justifies permitting or not permitting this action.
         */
        this.reasonReference = [];
        /**
         * Describes why the action is to be performed or not performed in textual form.
         */
        this.reason = [];
        /**
         * Id [identifier??] of the clause or question text related to the reason type or reference of this  action in the referenced form or QuestionnaireResponse.
         */
        this.reasonLinkId = [];
        /**
         * Comments made about the term action made by the requester, performer, subject or other participants.
         */
        this.note = [];
        /**
         * Security labels that protects the action.
         */
        this.securityLabelNumber = [];
        if (source['doNotPerform']) {
            this.doNotPerform = new fhir.FhirBoolean({ value: source.doNotPerform });
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['subject']) {
            this.subject = source.subject.map((x) => new fhir.ContractTermActionSubject(x));
        }
        if (source['intent']) {
            this.intent = new fhir.CodeableConcept(source.intent);
        }
        else {
            this.intent = null;
        }
        if (source['linkId']) {
            this.linkId = source.linkId.map((x) => new fhir.FhirString({ value: x }));
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        else {
            this.status = null;
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context);
        }
        if (source['contextLinkId']) {
            this.contextLinkId = source.contextLinkId.map((x) => new fhir.FhirString({ value: x }));
        }
        if (source['occurrence']) {
            this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime']) {
            this.occurrence = new fhir.FhirDateTime({ value: source.occurrenceDateTime });
        }
        else if (source['occurrencePeriod']) {
            this.occurrence = new fhir.Period(source.occurrencePeriod);
        }
        else if (source['occurrenceTiming']) {
            this.occurrence = new fhir.Timing(source.occurrenceTiming);
        }
        if (source['requester']) {
            this.requester = source.requester.map((x) => new fhir.Reference(x));
        }
        if (source['requesterLinkId']) {
            this.requesterLinkId = source.requesterLinkId.map((x) => new fhir.FhirString({ value: x }));
        }
        if (source['performerType']) {
            this.performerType = source.performerType.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['performerRole']) {
            this.performerRole = new fhir.CodeableConcept(source.performerRole);
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer);
        }
        if (source['performerLinkId']) {
            this.performerLinkId = source.performerLinkId.map((x) => new fhir.FhirString({ value: x }));
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.FhirString({ value: x }));
        }
        if (source['reasonLinkId']) {
            this.reasonLinkId = source.reasonLinkId.map((x) => new fhir.FhirString({ value: x }));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['securityLabelNumber']) {
            this.securityLabelNumber = source.securityLabelNumber.map((x) => new fhir.FhirUnsignedInt({ value: x }));
        }
    }
    /**
     * Example-bound Value Set for type
     */
    static typeExampleValueSet() {
        return ContractActionValueSet;
    }
    /**
     * Example-bound Value Set for intent
     */
    static intentExampleValueSet() {
        return V3PurposeOfUseValueSet;
    }
    /**
     * Example-bound Value Set for status
     */
    static statusExampleValueSet() {
        return ContractActionstatusValueSet;
    }
    /**
     * Example-bound Value Set for performerType
     */
    static performerTypeExampleValueSet() {
        return ProvenanceAgentTypeValueSet;
    }
    /**
     * Example-bound Value Set for performerRole
     */
    static performerRoleExampleValueSet() {
        return ProvenanceAgentRoleValueSet;
    }
    /**
     * Example-bound Value Set for reasonCode
     */
    static reasonCodeExampleValueSet() {
        return V3PurposeOfUseValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["doNotPerform"]) {
            outcome.issue.push(...this.doNotPerform.doModelValidation().issue);
        }
        if (!this['type']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property type:fhir.CodeableConcept fhir: Contract.term.action.type:CodeableConcept", }));
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["subject"]) {
            this.subject.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['intent']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property intent:fhir.CodeableConcept fhir: Contract.term.action.intent:CodeableConcept", }));
        }
        if (this["intent"]) {
            outcome.issue.push(...this.intent.doModelValidation().issue);
        }
        if (this["linkId"]) {
            this.linkId.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:fhir.CodeableConcept fhir: Contract.term.action.status:CodeableConcept", }));
        }
        if (this["status"]) {
            outcome.issue.push(...this.status.doModelValidation().issue);
        }
        if (this["context"]) {
            outcome.issue.push(...this.context.doModelValidation().issue);
        }
        if (this["contextLinkId"]) {
            this.contextLinkId.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["requester"]) {
            this.requester.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["requesterLinkId"]) {
            this.requesterLinkId.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["performerType"]) {
            this.performerType.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["performerRole"]) {
            outcome.issue.push(...this.performerRole.doModelValidation().issue);
        }
        if (this["performer"]) {
            outcome.issue.push(...this.performer.doModelValidation().issue);
        }
        if (this["performerLinkId"]) {
            this.performerLinkId.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["reason"]) {
            this.reason.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["reasonLinkId"]) {
            this.reasonLinkId.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["securityLabelNumber"]) {
            this.securityLabelNumber.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
 */
export class ContractTerm extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTerm - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ContractTerm';
        this.__topicIsChoice = true;
        /**
         * Security labels that protect the handling of information about the term and its elements, which may be specifically identified..
         */
        this.securityLabel = [];
        /**
         * Contract Term Asset List.
         */
        this.asset = [];
        /**
         * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
         * For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
         */
        this.action = [];
        /**
         * Nested group of Contract Provisions.
         */
        this.group = [];
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['issued']) {
            this.issued = new fhir.FhirDateTime({ value: source.issued });
        }
        if (source['applies']) {
            this.applies = new fhir.Period(source.applies);
        }
        if (source['topic']) {
            this.topic = source.topic;
        }
        else if (source['topicCodeableConcept']) {
            this.topic = new fhir.CodeableConcept(source.topicCodeableConcept);
        }
        else if (source['topicReference']) {
            this.topic = new fhir.Reference(source.topicReference);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['subType']) {
            this.subType = new fhir.CodeableConcept(source.subType);
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['securityLabel']) {
            this.securityLabel = source.securityLabel.map((x) => new fhir.ContractTermSecurityLabel(x));
        }
        if (source['offer']) {
            this.offer = new fhir.ContractTermOffer(source.offer);
        }
        else {
            this.offer = null;
        }
        if (source['asset']) {
            this.asset = source.asset.map((x) => new fhir.ContractTermAsset(x));
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.ContractTermAction(x));
        }
        if (source['group']) {
            this.group = source.group.map((x) => new fhir.ContractTerm(x));
        }
    }
    /**
     * Example-bound Value Set for type
     */
    static typeExampleValueSet() {
        return ContractTermTypeValueSet;
    }
    /**
     * Example-bound Value Set for subType
     */
    static subTypeExampleValueSet() {
        return ContractTermSubtypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["identifier"]) {
            outcome.issue.push(...this.identifier.doModelValidation().issue);
        }
        if (this["issued"]) {
            outcome.issue.push(...this.issued.doModelValidation().issue);
        }
        if (this["applies"]) {
            outcome.issue.push(...this.applies.doModelValidation().issue);
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["subType"]) {
            outcome.issue.push(...this.subType.doModelValidation().issue);
        }
        if (this["text"]) {
            outcome.issue.push(...this.text.doModelValidation().issue);
        }
        if (this["securityLabel"]) {
            this.securityLabel.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['offer']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property offer:fhir.ContractTermOffer fhir: Contract.term.offer:offer", }));
        }
        if (this["offer"]) {
            outcome.issue.push(...this.offer.doModelValidation().issue);
        }
        if (this["asset"]) {
            this.asset.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["action"]) {
            this.action.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["group"]) {
            this.group.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Signers who are principal parties to the contract are bound by the Contract.activity related to the Contract.topic, and the Contract.term(s), which either extend or restrict the overall action on the topic by, for example, stipulating specific policies or obligations constraining actions, action reason, or agents with respect to some or all of the topic.
 * For example, specifying how policies or obligations shall constrain actions and action reasons permitted or denied on all or a subset of the Contract.topic (e.g., all or a portion of property being transferred by the contract), agents (e.g., who can resell, assign interests, or alter the property being transferred by the contract), actions, and action reasons; or with respect to Contract.terms, stipulating, extending, or limiting the Contract.period of applicability or valuation of items under consideration.
 */
export class ContractSigner extends fhir.BackboneElement {
    /**
     * Default constructor for ContractSigner - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ContractSigner';
        /**
         * Legally binding Contract DSIG signature contents in Base64.
         */
        this.signature = [];
        if (source['type']) {
            this.type = new fhir.Coding(source.type);
        }
        else {
            this.type = null;
        }
        if (source['party']) {
            this.party = new fhir.Reference(source.party);
        }
        else {
            this.party = null;
        }
        if (source['signature']) {
            this.signature = source.signature.map((x) => new fhir.Signature(x));
        }
        else {
            this.signature = null;
        }
    }
    /**
     * Preferred-bound Value Set for type
     */
    static typePreferredValueSet() {
        return ContractSignerTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['type']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property type:fhir.Coding fhir: Contract.signer.type:Coding", }));
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (!this['party']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property party:fhir.Reference fhir: Contract.signer.party:Reference", }));
        }
        if (this["party"]) {
            outcome.issue.push(...this.party.doModelValidation().issue);
        }
        if (!this['signature']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property signature:fhir.Signature[] fhir: Contract.signer.signature:Signature", }));
        }
        else if (!Array.isArray(this.signature)) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue, diagnostics: "Found scalar in array property signature:fhir.Signature[] fhir: Contract.signer.signature:Signature", }));
        }
        else if (this.signature.length === 0) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property signature:fhir.Signature[] fhir: Contract.signer.signature:Signature", }));
        }
        if (this["signature"]) {
            this.signature.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
 */
export class ContractFriendly extends fhir.BackboneElement {
    /**
     * Default constructor for ContractFriendly - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ContractFriendly';
        this.__contentIsChoice = true;
        if (source['content']) {
            this.content = source.content;
        }
        else if (source['contentAttachment']) {
            this.content = new fhir.Attachment(source.contentAttachment);
        }
        else if (source['contentReference']) {
            this.content = new fhir.Reference(source.contentReference);
        }
        else {
            this.content = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['content']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property content: fhir: Contract.friendly.content[x]:", }));
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * List of Legal expressions or representations of this Contract.
 */
export class ContractLegal extends fhir.BackboneElement {
    /**
     * Default constructor for ContractLegal - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ContractLegal';
        this.__contentIsChoice = true;
        if (source['content']) {
            this.content = source.content;
        }
        else if (source['contentAttachment']) {
            this.content = new fhir.Attachment(source.contentAttachment);
        }
        else if (source['contentReference']) {
            this.content = new fhir.Reference(source.contentReference);
        }
        else {
            this.content = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['content']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property content: fhir: Contract.legal.content[x]:", }));
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * List of Computable Policy Rule Language Representations of this Contract.
 */
export class ContractRule extends fhir.BackboneElement {
    /**
     * Default constructor for ContractRule - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ContractRule';
        this.__contentIsChoice = true;
        if (source['content']) {
            this.content = source.content;
        }
        else if (source['contentAttachment']) {
            this.content = new fhir.Attachment(source.contentAttachment);
        }
        else if (source['contentReference']) {
            this.content = new fhir.Reference(source.contentReference);
        }
        else {
            this.content = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['content']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property content: fhir: Contract.rule.content[x]:", }));
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
 */
export class Contract extends fhir.DomainResource {
    /**
     * Default constructor for Contract - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'Contract';
        /**
         * Unique identifier for this Contract or a derivative that references a Source Contract.
         */
        this.identifier = [];
        /**
         * The Contract.subject is an entity that has some role with respect to the Contract.topic and Contract.topic.term, which is of focal interest to the parties to the contract and likely impacted in a significant way by the Contract.action/Contract.action.reason and the Contract.term.action/Contract.action.reason.
         * In many cases, the Contract.subject is a Contract.signer if the subject is an adult; has a legal interest in the contract; and incompetent to participate in the contract agreement.
         */
        this.subject = [];
        /**
         * A formally or informally recognized grouping of people, principals, organizations, or jurisdictions formed for the purpose of achieving some form of collective action such as the promulgation, administration and enforcement of contracts and policies.
         */
        this.authority = [];
        /**
         * Recognized governance framework or system operating with a circumscribed scope in accordance with specified principles, policies, processes or procedures for managing rights, actions, or behaviors of parties or principals relative to resources.
         */
        this.domain = [];
        /**
         * Sites in which the contract is complied with,  exercised, or in force.
         */
        this.site = [];
        /**
         * Alternative representation of the title for this Contract definition, derivative, or instance in any legal state., e.g., a domain specific contract number related to legislation.
         */
        this.alias = [];
        this.__topicIsChoice = true;
        /**
         * Sub-category for the Contract that distinguishes the kinds of systems that would be interested in the Contract within the context of the Contract's scope.
         */
        this.subType = [];
        /**
         * One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
         */
        this.term = [];
        /**
         * Information that may be needed by/relevant to the performer in their execution of this term action.
         */
        this.supportingInfo = [];
        /**
         * Links to Provenance records for past versions of this Contract definition, derivative, or instance, which identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the Contract.  The Provence.entity indicates the target that was changed in the update. http://build.fhir.org/provenance-definitions.html#Provenance.entity.
         */
        this.relevantHistory = [];
        /**
         * Signers who are principal parties to the contract are bound by the Contract.activity related to the Contract.topic, and the Contract.term(s), which either extend or restrict the overall action on the topic by, for example, stipulating specific policies or obligations constraining actions, action reason, or agents with respect to some or all of the topic.
         * For example, specifying how policies or obligations shall constrain actions and action reasons permitted or denied on all or a subset of the Contract.topic (e.g., all or a portion of property being transferred by the contract), agents (e.g., who can resell, assign interests, or alter the property being transferred by the contract), actions, and action reasons; or with respect to Contract.terms, stipulating, extending, or limiting the Contract.period of applicability or valuation of items under consideration.
         */
        this.signer = [];
        /**
         * The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
         */
        this.friendly = [];
        /**
         * List of Legal expressions or representations of this Contract.
         */
        this.legal = [];
        /**
         * List of Computable Policy Rule Language Representations of this Contract.
         */
        this.rule = [];
        this.__legallyBindingIsChoice = true;
        this.resourceType = 'Contract';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['status']) {
            this.status = source.status;
        }
        if (source['legalState']) {
            this.legalState = new fhir.CodeableConcept(source.legalState);
        }
        if (source['instantiatesCanonical']) {
            this.instantiatesCanonical = new fhir.Reference(source.instantiatesCanonical);
        }
        if (source['instantiatesUri']) {
            this.instantiatesUri = new fhir.FhirUri({ value: source.instantiatesUri });
        }
        if (source['contentDerivative']) {
            this.contentDerivative = new fhir.CodeableConcept(source.contentDerivative);
        }
        if (source['issued']) {
            this.issued = new fhir.FhirDateTime({ value: source.issued });
        }
        if (source['applies']) {
            this.applies = new fhir.Period(source.applies);
        }
        if (source['expirationType']) {
            this.expirationType = new fhir.CodeableConcept(source.expirationType);
        }
        if (source['subject']) {
            this.subject = source.subject.map((x) => new fhir.Reference(x));
        }
        if (source['authority']) {
            this.authority = source.authority.map((x) => new fhir.Reference(x));
        }
        if (source['domain']) {
            this.domain = source.domain.map((x) => new fhir.Reference(x));
        }
        if (source['site']) {
            this.site = source.site.map((x) => new fhir.Reference(x));
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['subtitle']) {
            this.subtitle = new fhir.FhirString({ value: source.subtitle });
        }
        if (source['alias']) {
            this.alias = source.alias.map((x) => new fhir.FhirString({ value: x }));
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author);
        }
        if (source['scope']) {
            this.scope = new fhir.CodeableConcept(source.scope);
        }
        if (source['topic']) {
            this.topic = source.topic;
        }
        else if (source['topicCodeableConcept']) {
            this.topic = new fhir.CodeableConcept(source.topicCodeableConcept);
        }
        else if (source['topicReference']) {
            this.topic = new fhir.Reference(source.topicReference);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['subType']) {
            this.subType = source.subType.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['contentDefinition']) {
            this.contentDefinition = new fhir.ContractContentDefinition(source.contentDefinition);
        }
        if (source['term']) {
            this.term = source.term.map((x) => new fhir.ContractTerm(x));
        }
        if (source['supportingInfo']) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.Reference(x));
        }
        if (source['relevantHistory']) {
            this.relevantHistory = source.relevantHistory.map((x) => new fhir.Reference(x));
        }
        if (source['signer']) {
            this.signer = source.signer.map((x) => new fhir.ContractSigner(x));
        }
        if (source['friendly']) {
            this.friendly = source.friendly.map((x) => new fhir.ContractFriendly(x));
        }
        if (source['legal']) {
            this.legal = source.legal.map((x) => new fhir.ContractLegal(x));
        }
        if (source['rule']) {
            this.rule = source.rule.map((x) => new fhir.ContractRule(x));
        }
        if (source['legallyBinding']) {
            this.legallyBinding = source.legallyBinding;
        }
        else if (source['legallyBindingAttachment']) {
            this.legallyBinding = new fhir.Attachment(source.legallyBindingAttachment);
        }
        else if (source['legallyBindingReference']) {
            this.legallyBinding = new fhir.Reference(source.legallyBindingReference);
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return ContractStatusValueSet;
    }
    /**
     * Extensible-bound Value Set for legalState
     */
    static legalStateExtensibleValueSet() {
        return ContractLegalstateValueSet;
    }
    /**
     * Example-bound Value Set for contentDerivative
     */
    static contentDerivativeExampleValueSet() {
        return ContractContentDerivativeValueSet;
    }
    /**
     * Example-bound Value Set for expirationType
     */
    static expirationTypeExampleValueSet() {
        return ContractExpirationTypeValueSet;
    }
    /**
     * Example-bound Value Set for scope
     */
    static scopeExampleValueSet() {
        return ContractScopeValueSet;
    }
    /**
     * Example-bound Value Set for type
     */
    static typeExampleValueSet() {
        return ContractTypeValueSet;
    }
    /**
     * Example-bound Value Set for subType
     */
    static subTypeExampleValueSet() {
        return ContractSubtypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'Contract' fhir: Contract.resourceType:'Contract'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["url"]) {
            outcome.issue.push(...this.url.doModelValidation().issue);
        }
        if (this["version"]) {
            outcome.issue.push(...this.version.doModelValidation().issue);
        }
        if (this["legalState"]) {
            outcome.issue.push(...this.legalState.doModelValidation().issue);
        }
        if (this["instantiatesCanonical"]) {
            outcome.issue.push(...this.instantiatesCanonical.doModelValidation().issue);
        }
        if (this["instantiatesUri"]) {
            outcome.issue.push(...this.instantiatesUri.doModelValidation().issue);
        }
        if (this["contentDerivative"]) {
            outcome.issue.push(...this.contentDerivative.doModelValidation().issue);
        }
        if (this["issued"]) {
            outcome.issue.push(...this.issued.doModelValidation().issue);
        }
        if (this["applies"]) {
            outcome.issue.push(...this.applies.doModelValidation().issue);
        }
        if (this["expirationType"]) {
            outcome.issue.push(...this.expirationType.doModelValidation().issue);
        }
        if (this["subject"]) {
            this.subject.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["authority"]) {
            this.authority.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["domain"]) {
            this.domain.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["site"]) {
            this.site.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["name"]) {
            outcome.issue.push(...this.name.doModelValidation().issue);
        }
        if (this["title"]) {
            outcome.issue.push(...this.title.doModelValidation().issue);
        }
        if (this["subtitle"]) {
            outcome.issue.push(...this.subtitle.doModelValidation().issue);
        }
        if (this["alias"]) {
            this.alias.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["author"]) {
            outcome.issue.push(...this.author.doModelValidation().issue);
        }
        if (this["scope"]) {
            outcome.issue.push(...this.scope.doModelValidation().issue);
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["subType"]) {
            this.subType.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["contentDefinition"]) {
            outcome.issue.push(...this.contentDefinition.doModelValidation().issue);
        }
        if (this["term"]) {
            this.term.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["supportingInfo"]) {
            this.supportingInfo.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["relevantHistory"]) {
            this.relevantHistory.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["signer"]) {
            this.signer.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["friendly"]) {
            this.friendly.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["legal"]) {
            this.legal.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["rule"]) {
            this.rule.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=Contract.js.map