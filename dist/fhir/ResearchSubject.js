// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ResearchSubject
import * as fhir from '../fhir.js';
import { ResearchSubjectStatusValueSet, } from '../fhirValueSets/ResearchSubjectStatusValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * A physical entity which is the primary unit of operational and/or administrative interest in a study.
 */
export class ResearchSubject extends fhir.DomainResource {
    /**
     * Default constructor for ResearchSubject - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ResearchSubject';
        /**
         * Identifiers assigned to this research subject for a study.
         */
        this.identifier = [];
        this.resourceType = 'ResearchSubject';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['study']) {
            this.study = new fhir.Reference(source.study);
        }
        else {
            this.study = null;
        }
        if (source['individual']) {
            this.individual = new fhir.Reference(source.individual);
        }
        else {
            this.individual = null;
        }
        if (source['assignedArm']) {
            this.assignedArm = new fhir.FhirString({ value: source.assignedArm });
        }
        if (source['actualArm']) {
            this.actualArm = new fhir.FhirString({ value: source.actualArm });
        }
        if (source['consent']) {
            this.consent = new fhir.Reference(source.consent);
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return ResearchSubjectStatusValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'ResearchSubject' fhir: ResearchSubject.resourceType:'ResearchSubject'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:ResearchSubjectStatusValueSetEnum fhir: ResearchSubject.status:code", }));
        }
        if (this["period"]) {
            outcome.issue.push(...this.period.doModelValidation().issue);
        }
        if (!this['study']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property study:fhir.Reference fhir: ResearchSubject.study:Reference", }));
        }
        if (this["study"]) {
            outcome.issue.push(...this.study.doModelValidation().issue);
        }
        if (!this['individual']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property individual:fhir.Reference fhir: ResearchSubject.individual:Reference", }));
        }
        if (this["individual"]) {
            outcome.issue.push(...this.individual.doModelValidation().issue);
        }
        if (this["assignedArm"]) {
            outcome.issue.push(...this.assignedArm.doModelValidation().issue);
        }
        if (this["actualArm"]) {
            outcome.issue.push(...this.actualArm.doModelValidation().issue);
        }
        if (this["consent"]) {
            outcome.issue.push(...this.consent.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=ResearchSubject.js.map