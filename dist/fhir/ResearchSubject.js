// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * A physical entity which is the primary unit of operational and/or administrative interest in a study.
 */
export class ResearchSubject extends fhir.DomainResource {
    /**
     * Default constructor for ResearchSubject - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'ResearchSubject';
        if (source["actualArm"]) {
            this.actualArm = source.actualArm;
        }
        if (source["_actualArm"]) {
            this._actualArm = new fhir.FhirElement(source._actualArm);
        }
        if (source["assignedArm"]) {
            this.assignedArm = source.assignedArm;
        }
        if (source["_assignedArm"]) {
            this._assignedArm = new fhir.FhirElement(source._assignedArm);
        }
        if (source["consent"]) {
            this.consent = new fhir.Reference(source.consent);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        this.individual = null;
        if (source["individual"]) {
            this.individual = new fhir.Reference(source.individual);
        }
        if (this.individual === undefined) {
            this.individual = null;
        }
        if (source["period"]) {
            this.period = new fhir.Period(source.period);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        this.study = null;
        if (source["study"]) {
            this.study = new fhir.Reference(source.study);
        }
        if (this.study === undefined) {
            this.study = null;
        }
    }
    /**
     * Check if the current ResearchSubject contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["individual"] === undefined) {
            missingElements.push("individual");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["study"] === undefined) {
            missingElements.push("study");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ResearchSubject from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new ResearchSubject(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `ResearchSubject is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the ResearchSubject.status field
 */
export var ResearchSubjectStatusEnum;
(function (ResearchSubjectStatusEnum) {
    ResearchSubjectStatusEnum["CANDIDATE"] = "candidate";
    ResearchSubjectStatusEnum["ELIGIBLE"] = "eligible";
    ResearchSubjectStatusEnum["FOLLOW_UP"] = "follow-up";
    ResearchSubjectStatusEnum["INELIGIBLE"] = "ineligible";
    ResearchSubjectStatusEnum["NOT_REGISTERED"] = "not-registered";
    ResearchSubjectStatusEnum["OFF_STUDY"] = "off-study";
    ResearchSubjectStatusEnum["ON_STUDY"] = "on-study";
    ResearchSubjectStatusEnum["ON_STUDY_INTERVENTION"] = "on-study-intervention";
    ResearchSubjectStatusEnum["ON_STUDY_OBSERVATION"] = "on-study-observation";
    ResearchSubjectStatusEnum["PENDING_ON_STUDY"] = "pending-on-study";
    ResearchSubjectStatusEnum["POTENTIAL_CANDIDATE"] = "potential-candidate";
    ResearchSubjectStatusEnum["SCREENING"] = "screening";
    ResearchSubjectStatusEnum["WITHDRAWN"] = "withdrawn";
})(ResearchSubjectStatusEnum || (ResearchSubjectStatusEnum = {}));
//# sourceMappingURL=ResearchSubject.js.map