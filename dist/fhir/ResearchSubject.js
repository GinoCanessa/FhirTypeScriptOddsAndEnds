// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ResearchSubject
import * as fhir from '../fhir.js';
import { ResearchSubjectStatusValueSet } from '../fhirValueSets/ResearchSubjectStatusValueSet.js';
/**
 * A physical entity which is the primary unit of operational and/or administrative interest in a study.
 */
export class ResearchSubject extends fhir.DomainResource {
    /**
     * Default constructor for ResearchSubject - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'ResearchSubject';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['study']) {
            this.study = new fhir.Reference(source.study);
        }
        else {
            this.study = null;
        }
        if (source['individual']) {
            this.individual = new fhir.Reference(source.individual);
        }
        else {
            this.individual = null;
        }
        if (source['assignedArm']) {
            this.assignedArm = source.assignedArm;
        }
        if (source['_assignedArm']) {
            this._assignedArm = new fhir.FhirElement(source._assignedArm);
        }
        if (source['actualArm']) {
            this.actualArm = source.actualArm;
        }
        if (source['_actualArm']) {
            this._actualArm = new fhir.FhirElement(source._actualArm);
        }
        if (source['consent']) {
            this.consent = new fhir.Reference(source.consent);
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return ResearchSubjectStatusValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: ResearchSubject.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: ResearchSubject.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["period"]) {
            results.push(...this.period.doModelValidation());
        }
        if (!this["study"]) {
            results.push(["study", 'Missing required element: ResearchSubject.study']);
        }
        if (this["study"]) {
            results.push(...this.study.doModelValidation());
        }
        if (!this["individual"]) {
            results.push(["individual", 'Missing required element: ResearchSubject.individual']);
        }
        if (this["individual"]) {
            results.push(...this.individual.doModelValidation());
        }
        if (this["_assignedArm"]) {
            results.push(...this._assignedArm.doModelValidation());
        }
        if (this["_actualArm"]) {
            results.push(...this._actualArm.doModelValidation());
        }
        if (this["consent"]) {
            results.push(...this.consent.doModelValidation());
        }
        return results;
    }
}
//# sourceMappingURL=ResearchSubject.js.map