// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all of the conditions are true.
 */
export class RequestGroupActionCondition extends fhir.BackboneElement {
    /**
     * Default constructor for RequestGroupActionCondition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["expression"]) {
            this.expression = new fhir.Expression(source.expression);
        }
        this.kind = null;
        if (source["kind"]) {
            this.kind = source.kind;
        }
        if (this.kind === undefined) {
            this.kind = null;
        }
        if (source["_kind"]) {
            this._kind = new fhir.FhirElement(source._kind);
        }
    }
    /**
     * Check if the current RequestGroupActionCondition contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["kind"] === undefined) {
            missingElements.push("kind");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a RequestGroupActionCondition from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new RequestGroupActionCondition(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `RequestGroupActionCondition is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A relationship to another action such as "before" or "30-60 minutes after start of".
 */
export class RequestGroupActionRelatedAction extends fhir.BackboneElement {
    /**
     * Default constructor for RequestGroupActionRelatedAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.actionId = null;
        if (source["actionId"]) {
            this.actionId = source.actionId;
        }
        if (this.actionId === undefined) {
            this.actionId = null;
        }
        if (source["_actionId"]) {
            this._actionId = new fhir.FhirElement(source._actionId);
        }
        if (source["offsetDuration"]) {
            this.offsetDuration = new fhir.Duration(source.offsetDuration);
        }
        if (source["offsetRange"]) {
            this.offsetRange = new fhir.Range(source.offsetRange);
        }
        this.relationship = null;
        if (source["relationship"]) {
            this.relationship = source.relationship;
        }
        if (this.relationship === undefined) {
            this.relationship = null;
        }
        if (source["_relationship"]) {
            this._relationship = new fhir.FhirElement(source._relationship);
        }
    }
    /**
     * Check if the current RequestGroupActionRelatedAction contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["actionId"] === undefined) {
            missingElements.push("actionId");
        }
        if (this["relationship"] === undefined) {
            missingElements.push("relationship");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a RequestGroupActionRelatedAction from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new RequestGroupActionRelatedAction(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `RequestGroupActionRelatedAction is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The actions, if any, produced by the evaluation of the artifact.
 */
export class RequestGroupAction extends fhir.BackboneElement {
    /**
     * Default constructor for RequestGroupAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["action"]) {
            this.action = source.action.map((x) => new fhir.RequestGroupAction(x));
        }
        if (source["cardinalityBehavior"]) {
            this.cardinalityBehavior = source.cardinalityBehavior;
        }
        if (source["_cardinalityBehavior"]) {
            this._cardinalityBehavior = new fhir.FhirElement(source._cardinalityBehavior);
        }
        if (source["code"]) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["condition"]) {
            this.condition = source.condition.map((x) => new fhir.RequestGroupActionCondition(x));
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["documentation"]) {
            this.documentation = source.documentation.map((x) => new fhir.RelatedArtifact(x));
        }
        if (source["groupingBehavior"]) {
            this.groupingBehavior = source.groupingBehavior;
        }
        if (source["_groupingBehavior"]) {
            this._groupingBehavior = new fhir.FhirElement(source._groupingBehavior);
        }
        if (source["participant"]) {
            this.participant = source.participant.map((x) => new fhir.Reference(x));
        }
        if (source["precheckBehavior"]) {
            this.precheckBehavior = source.precheckBehavior;
        }
        if (source["_precheckBehavior"]) {
            this._precheckBehavior = new fhir.FhirElement(source._precheckBehavior);
        }
        if (source["prefix"]) {
            this.prefix = source.prefix;
        }
        if (source["_prefix"]) {
            this._prefix = new fhir.FhirElement(source._prefix);
        }
        if (source["priority"]) {
            this.priority = source.priority;
        }
        if (source["_priority"]) {
            this._priority = new fhir.FhirElement(source._priority);
        }
        if (source["relatedAction"]) {
            this.relatedAction = source.relatedAction.map((x) => new fhir.RequestGroupActionRelatedAction(x));
        }
        if (source["requiredBehavior"]) {
            this.requiredBehavior = source.requiredBehavior;
        }
        if (source["_requiredBehavior"]) {
            this._requiredBehavior = new fhir.FhirElement(source._requiredBehavior);
        }
        if (source["resource"]) {
            this.resource = new fhir.Reference(source.resource);
        }
        if (source["selectionBehavior"]) {
            this.selectionBehavior = source.selectionBehavior;
        }
        if (source["_selectionBehavior"]) {
            this._selectionBehavior = new fhir.FhirElement(source._selectionBehavior);
        }
        if (source["textEquivalent"]) {
            this.textEquivalent = source.textEquivalent;
        }
        if (source["_textEquivalent"]) {
            this._textEquivalent = new fhir.FhirElement(source._textEquivalent);
        }
        if (source["timingDateTime"]) {
            this.timingDateTime = source.timingDateTime;
        }
        if (source["_timingDateTime"]) {
            this._timingDateTime = new fhir.FhirElement(source._timingDateTime);
        }
        if (source["timingAge"]) {
            this.timingAge = new fhir.Age(source.timingAge);
        }
        if (source["timingPeriod"]) {
            this.timingPeriod = new fhir.Period(source.timingPeriod);
        }
        if (source["timingDuration"]) {
            this.timingDuration = new fhir.Duration(source.timingDuration);
        }
        if (source["timingRange"]) {
            this.timingRange = new fhir.Range(source.timingRange);
        }
        if (source["timingTiming"]) {
            this.timingTiming = new fhir.Timing(source.timingTiming);
        }
        if (source["title"]) {
            this.title = source.title;
        }
        if (source["_title"]) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current RequestGroupAction contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a RequestGroupAction from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new RequestGroupAction(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `RequestGroupAction is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A group of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one".
 */
export class RequestGroup extends fhir.DomainResource {
    /**
     * Default constructor for RequestGroup - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'RequestGroup';
        if (source["action"]) {
            this.action = source.action.map((x) => new fhir.RequestGroupAction(x));
        }
        if (source["author"]) {
            this.author = new fhir.Reference(source.author);
        }
        if (source["authoredOn"]) {
            this.authoredOn = source.authoredOn;
        }
        if (source["_authoredOn"]) {
            this._authoredOn = new fhir.FhirElement(source._authoredOn);
        }
        if (source["basedOn"]) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source["encounter"]) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source["groupIdentifier"]) {
            this.groupIdentifier = new fhir.Identifier(source.groupIdentifier);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["instantiatesCanonical"]) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => (x));
        }
        if (source["_instantiatesCanonical"]) {
            this._instantiatesCanonical = source._instantiatesCanonical.map((x) => new fhir.FhirElement(x));
        }
        if (source["instantiatesUri"]) {
            this.instantiatesUri = source.instantiatesUri.map((x) => (x));
        }
        if (source["_instantiatesUri"]) {
            this._instantiatesUri = source._instantiatesUri.map((x) => new fhir.FhirElement(x));
        }
        this.intent = null;
        if (source["intent"]) {
            this.intent = source.intent;
        }
        if (this.intent === undefined) {
            this.intent = null;
        }
        if (source["_intent"]) {
            this._intent = new fhir.FhirElement(source._intent);
        }
        if (source["note"]) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source["priority"]) {
            this.priority = source.priority;
        }
        if (source["_priority"]) {
            this._priority = new fhir.FhirElement(source._priority);
        }
        if (source["reasonCode"]) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["reasonReference"]) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source["replaces"]) {
            this.replaces = source.replaces.map((x) => new fhir.Reference(x));
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["subject"]) {
            this.subject = new fhir.Reference(source.subject);
        }
    }
    /**
     * Check if the current RequestGroup contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["intent"] === undefined) {
            missingElements.push("intent");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a RequestGroup from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new RequestGroup(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `RequestGroup is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the RequestGroup.action.condition.kind field
 */
export var RequestGroupActionConditionKindEnum;
(function (RequestGroupActionConditionKindEnum) {
    RequestGroupActionConditionKindEnum["APPLICABILITY"] = "applicability";
    RequestGroupActionConditionKindEnum["START"] = "start";
    RequestGroupActionConditionKindEnum["STOP"] = "stop";
})(RequestGroupActionConditionKindEnum || (RequestGroupActionConditionKindEnum = {}));
/**
 * Code Values for the RequestGroup.action.relatedAction.relationship field
 */
export var RequestGroupActionRelatedActionRelationshipEnum;
(function (RequestGroupActionRelatedActionRelationshipEnum) {
    RequestGroupActionRelatedActionRelationshipEnum["BEFORE_START"] = "before-start";
    RequestGroupActionRelatedActionRelationshipEnum["BEFORE"] = "before";
    RequestGroupActionRelatedActionRelationshipEnum["BEFORE_END"] = "before-end";
    RequestGroupActionRelatedActionRelationshipEnum["CONCURRENT_WITH_START"] = "concurrent-with-start";
    RequestGroupActionRelatedActionRelationshipEnum["CONCURRENT"] = "concurrent";
    RequestGroupActionRelatedActionRelationshipEnum["CONCURRENT_WITH_END"] = "concurrent-with-end";
    RequestGroupActionRelatedActionRelationshipEnum["AFTER_START"] = "after-start";
    RequestGroupActionRelatedActionRelationshipEnum["AFTER"] = "after";
    RequestGroupActionRelatedActionRelationshipEnum["AFTER_END"] = "after-end";
})(RequestGroupActionRelatedActionRelationshipEnum || (RequestGroupActionRelatedActionRelationshipEnum = {}));
/**
 * Code Values for the RequestGroup.action.cardinalityBehavior field
 */
export var RequestGroupActionCardinalityBehaviorEnum;
(function (RequestGroupActionCardinalityBehaviorEnum) {
    RequestGroupActionCardinalityBehaviorEnum["SINGLE"] = "single";
    RequestGroupActionCardinalityBehaviorEnum["MULTIPLE"] = "multiple";
})(RequestGroupActionCardinalityBehaviorEnum || (RequestGroupActionCardinalityBehaviorEnum = {}));
/**
 * Code Values for the RequestGroup.action.groupingBehavior field
 */
export var RequestGroupActionGroupingBehaviorEnum;
(function (RequestGroupActionGroupingBehaviorEnum) {
    RequestGroupActionGroupingBehaviorEnum["VISUAL_GROUP"] = "visual-group";
    RequestGroupActionGroupingBehaviorEnum["LOGICAL_GROUP"] = "logical-group";
    RequestGroupActionGroupingBehaviorEnum["SENTENCE_GROUP"] = "sentence-group";
})(RequestGroupActionGroupingBehaviorEnum || (RequestGroupActionGroupingBehaviorEnum = {}));
/**
 * Code Values for the RequestGroup.action.precheckBehavior field
 */
export var RequestGroupActionPrecheckBehaviorEnum;
(function (RequestGroupActionPrecheckBehaviorEnum) {
    RequestGroupActionPrecheckBehaviorEnum["YES"] = "yes";
    RequestGroupActionPrecheckBehaviorEnum["NO"] = "no";
})(RequestGroupActionPrecheckBehaviorEnum || (RequestGroupActionPrecheckBehaviorEnum = {}));
/**
 * Code Values for the RequestGroup.action.priority field
 */
export var RequestGroupActionPriorityEnum;
(function (RequestGroupActionPriorityEnum) {
    RequestGroupActionPriorityEnum["ROUTINE"] = "routine";
    RequestGroupActionPriorityEnum["URGENT"] = "urgent";
    RequestGroupActionPriorityEnum["ASAP"] = "asap";
    RequestGroupActionPriorityEnum["STAT"] = "stat";
})(RequestGroupActionPriorityEnum || (RequestGroupActionPriorityEnum = {}));
/**
 * Code Values for the RequestGroup.action.requiredBehavior field
 */
export var RequestGroupActionRequiredBehaviorEnum;
(function (RequestGroupActionRequiredBehaviorEnum) {
    RequestGroupActionRequiredBehaviorEnum["MUST"] = "must";
    RequestGroupActionRequiredBehaviorEnum["COULD"] = "could";
    RequestGroupActionRequiredBehaviorEnum["MUST_UNLESS_DOCUMENTED"] = "must-unless-documented";
})(RequestGroupActionRequiredBehaviorEnum || (RequestGroupActionRequiredBehaviorEnum = {}));
/**
 * Code Values for the RequestGroup.action.selectionBehavior field
 */
export var RequestGroupActionSelectionBehaviorEnum;
(function (RequestGroupActionSelectionBehaviorEnum) {
    RequestGroupActionSelectionBehaviorEnum["ANY"] = "any";
    RequestGroupActionSelectionBehaviorEnum["ALL"] = "all";
    RequestGroupActionSelectionBehaviorEnum["ALL_OR_NONE"] = "all-or-none";
    RequestGroupActionSelectionBehaviorEnum["EXACTLY_ONE"] = "exactly-one";
    RequestGroupActionSelectionBehaviorEnum["AT_MOST_ONE"] = "at-most-one";
    RequestGroupActionSelectionBehaviorEnum["ONE_OR_MORE"] = "one-or-more";
})(RequestGroupActionSelectionBehaviorEnum || (RequestGroupActionSelectionBehaviorEnum = {}));
/**
 * Code Values for the RequestGroup.intent field
 */
export var RequestGroupIntentEnum;
(function (RequestGroupIntentEnum) {
    RequestGroupIntentEnum["PROPOSAL"] = "proposal";
    RequestGroupIntentEnum["PLAN"] = "plan";
    RequestGroupIntentEnum["DIRECTIVE"] = "directive";
    RequestGroupIntentEnum["ORDER"] = "order";
    RequestGroupIntentEnum["ORIGINAL_ORDER"] = "original-order";
    RequestGroupIntentEnum["REFLEX_ORDER"] = "reflex-order";
    RequestGroupIntentEnum["FILLER_ORDER"] = "filler-order";
    RequestGroupIntentEnum["INSTANCE_ORDER"] = "instance-order";
    RequestGroupIntentEnum["OPTION"] = "option";
})(RequestGroupIntentEnum || (RequestGroupIntentEnum = {}));
/**
 * Code Values for the RequestGroup.priority field
 */
export var RequestGroupPriorityEnum;
(function (RequestGroupPriorityEnum) {
    RequestGroupPriorityEnum["ROUTINE"] = "routine";
    RequestGroupPriorityEnum["URGENT"] = "urgent";
    RequestGroupPriorityEnum["ASAP"] = "asap";
    RequestGroupPriorityEnum["STAT"] = "stat";
})(RequestGroupPriorityEnum || (RequestGroupPriorityEnum = {}));
/**
 * Code Values for the RequestGroup.status field
 */
export var RequestGroupStatusEnum;
(function (RequestGroupStatusEnum) {
    RequestGroupStatusEnum["DRAFT"] = "draft";
    RequestGroupStatusEnum["ACTIVE"] = "active";
    RequestGroupStatusEnum["ON_HOLD"] = "on-hold";
    RequestGroupStatusEnum["REVOKED"] = "revoked";
    RequestGroupStatusEnum["COMPLETED"] = "completed";
    RequestGroupStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    RequestGroupStatusEnum["UNKNOWN"] = "unknown";
})(RequestGroupStatusEnum || (RequestGroupStatusEnum = {}));
//# sourceMappingURL=RequestGroup.js.map