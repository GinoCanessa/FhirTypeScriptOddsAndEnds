// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: RequestGroup
import * as fhir from '../fhir.js';
import { ActionConditionKindValueSet } from '../fhirValueSets/ActionConditionKindValueSet.js';
import { ActionRelationshipTypeValueSet } from '../fhirValueSets/ActionRelationshipTypeValueSet.js';
import { RequestPriorityValueSet } from '../fhirValueSets/RequestPriorityValueSet.js';
import { ActionTypeValueSet } from '../fhirValueSets/ActionTypeValueSet.js';
import { ActionGroupingBehaviorValueSet } from '../fhirValueSets/ActionGroupingBehaviorValueSet.js';
import { ActionSelectionBehaviorValueSet } from '../fhirValueSets/ActionSelectionBehaviorValueSet.js';
import { ActionRequiredBehaviorValueSet } from '../fhirValueSets/ActionRequiredBehaviorValueSet.js';
import { ActionPrecheckBehaviorValueSet } from '../fhirValueSets/ActionPrecheckBehaviorValueSet.js';
import { ActionCardinalityBehaviorValueSet } from '../fhirValueSets/ActionCardinalityBehaviorValueSet.js';
import { RequestStatusValueSet } from '../fhirValueSets/RequestStatusValueSet.js';
import { RequestIntentValueSet } from '../fhirValueSets/RequestIntentValueSet.js';
/**
 * When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all of the conditions are true.
 */
export class RequestGroupActionCondition extends fhir.BackboneElement {
    /**
     * Default constructor for RequestGroupActionCondition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['kind']) {
            this.kind = source.kind;
        }
        else {
            this.kind = null;
        }
        if (source['_kind']) {
            this._kind = new fhir.FhirElement(source._kind);
        }
        if (source['expression']) {
            this.expression = new fhir.Expression(source.expression);
        }
    }
    /**
     * Required-bound Value Set for kind
     */
    static kindRequiredValueSet() {
        return ActionConditionKindValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["kind"]) {
            results.push(["kind", 'Missing required element: RequestGroup.action.condition.kind']);
        }
        if (this["_kind"]) {
            results.push(...this._kind.doModelValidation());
        }
        if (this["expression"]) {
            results.push(...this.expression.doModelValidation());
        }
        return results;
    }
}
/**
 * A relationship to another action such as "before" or "30-60 minutes after start of".
 */
export class RequestGroupActionRelatedAction extends fhir.BackboneElement {
    /**
     * Default constructor for RequestGroupActionRelatedAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['actionId']) {
            this.actionId = source.actionId;
        }
        else {
            this.actionId = null;
        }
        if (source['_actionId']) {
            this._actionId = new fhir.FhirElement(source._actionId);
        }
        if (source['relationship']) {
            this.relationship = source.relationship;
        }
        else {
            this.relationship = null;
        }
        if (source['_relationship']) {
            this._relationship = new fhir.FhirElement(source._relationship);
        }
        if (source['offsetDuration']) {
            this.offsetDuration = new fhir.Duration(source.offsetDuration);
        }
        if (source['offsetRange']) {
            this.offsetRange = new fhir.Range(source.offsetRange);
        }
    }
    /**
     * Required-bound Value Set for relationship
     */
    static relationshipRequiredValueSet() {
        return ActionRelationshipTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["actionId"]) {
            results.push(["actionId", 'Missing required element: RequestGroup.action.relatedAction.actionId']);
        }
        if (this["_actionId"]) {
            results.push(...this._actionId.doModelValidation());
        }
        if (!this["relationship"]) {
            results.push(["relationship", 'Missing required element: RequestGroup.action.relatedAction.relationship']);
        }
        if (this["_relationship"]) {
            results.push(...this._relationship.doModelValidation());
        }
        if (this["offsetDuration"]) {
            results.push(...this.offsetDuration.doModelValidation());
        }
        if (this["offsetRange"]) {
            results.push(...this.offsetRange.doModelValidation());
        }
        return results;
    }
}
/**
 * The actions, if any, produced by the evaluation of the artifact.
 */
export class RequestGroupAction extends fhir.BackboneElement {
    /**
     * Default constructor for RequestGroupAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['prefix']) {
            this.prefix = source.prefix;
        }
        if (source['_prefix']) {
            this._prefix = new fhir.FhirElement(source._prefix);
        }
        if (source['title']) {
            this.title = source.title;
        }
        if (source['_title']) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['textEquivalent']) {
            this.textEquivalent = source.textEquivalent;
        }
        if (source['_textEquivalent']) {
            this._textEquivalent = new fhir.FhirElement(source._textEquivalent);
        }
        if (source['priority']) {
            this.priority = source.priority;
        }
        if (source['_priority']) {
            this._priority = new fhir.FhirElement(source._priority);
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['documentation']) {
            this.documentation = source.documentation.map((x) => new fhir.RelatedArtifact(x));
        }
        if (source['condition']) {
            this.condition = source.condition.map((x) => new fhir.RequestGroupActionCondition(x));
        }
        if (source['relatedAction']) {
            this.relatedAction = source.relatedAction.map((x) => new fhir.RequestGroupActionRelatedAction(x));
        }
        if (source['timingDateTime']) {
            this.timingDateTime = source.timingDateTime;
        }
        if (source['_timingDateTime']) {
            this._timingDateTime = new fhir.FhirElement(source._timingDateTime);
        }
        if (source['timingAge']) {
            this.timingAge = new fhir.Age(source.timingAge);
        }
        if (source['timingPeriod']) {
            this.timingPeriod = new fhir.Period(source.timingPeriod);
        }
        if (source['timingDuration']) {
            this.timingDuration = new fhir.Duration(source.timingDuration);
        }
        if (source['timingRange']) {
            this.timingRange = new fhir.Range(source.timingRange);
        }
        if (source['timingTiming']) {
            this.timingTiming = new fhir.Timing(source.timingTiming);
        }
        if (source['participant']) {
            this.participant = source.participant.map((x) => new fhir.Reference(x));
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['groupingBehavior']) {
            this.groupingBehavior = source.groupingBehavior;
        }
        if (source['_groupingBehavior']) {
            this._groupingBehavior = new fhir.FhirElement(source._groupingBehavior);
        }
        if (source['selectionBehavior']) {
            this.selectionBehavior = source.selectionBehavior;
        }
        if (source['_selectionBehavior']) {
            this._selectionBehavior = new fhir.FhirElement(source._selectionBehavior);
        }
        if (source['requiredBehavior']) {
            this.requiredBehavior = source.requiredBehavior;
        }
        if (source['_requiredBehavior']) {
            this._requiredBehavior = new fhir.FhirElement(source._requiredBehavior);
        }
        if (source['precheckBehavior']) {
            this.precheckBehavior = source.precheckBehavior;
        }
        if (source['_precheckBehavior']) {
            this._precheckBehavior = new fhir.FhirElement(source._precheckBehavior);
        }
        if (source['cardinalityBehavior']) {
            this.cardinalityBehavior = source.cardinalityBehavior;
        }
        if (source['_cardinalityBehavior']) {
            this._cardinalityBehavior = new fhir.FhirElement(source._cardinalityBehavior);
        }
        if (source['resource']) {
            this.resource = new fhir.Reference(source.resource);
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.RequestGroupAction(x));
        }
    }
    /**
     * Required-bound Value Set for priority
     */
    static priorityRequiredValueSet() {
        return RequestPriorityValueSet;
    }
    /**
     * Extensible-bound Value Set for type
     */
    static typeExtensibleValueSet() {
        return ActionTypeValueSet;
    }
    /**
     * Required-bound Value Set for groupingBehavior
     */
    static groupingBehaviorRequiredValueSet() {
        return ActionGroupingBehaviorValueSet;
    }
    /**
     * Required-bound Value Set for selectionBehavior
     */
    static selectionBehaviorRequiredValueSet() {
        return ActionSelectionBehaviorValueSet;
    }
    /**
     * Required-bound Value Set for requiredBehavior
     */
    static requiredBehaviorRequiredValueSet() {
        return ActionRequiredBehaviorValueSet;
    }
    /**
     * Required-bound Value Set for precheckBehavior
     */
    static precheckBehaviorRequiredValueSet() {
        return ActionPrecheckBehaviorValueSet;
    }
    /**
     * Required-bound Value Set for cardinalityBehavior
     */
    static cardinalityBehaviorRequiredValueSet() {
        return ActionCardinalityBehaviorValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_prefix"]) {
            results.push(...this._prefix.doModelValidation());
        }
        if (this["_title"]) {
            results.push(...this._title.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["_textEquivalent"]) {
            results.push(...this._textEquivalent.doModelValidation());
        }
        if (this["_priority"]) {
            results.push(...this._priority.doModelValidation());
        }
        if (this["code"]) {
            this.code.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["documentation"]) {
            this.documentation.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["condition"]) {
            this.condition.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["relatedAction"]) {
            this.relatedAction.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_timingDateTime"]) {
            results.push(...this._timingDateTime.doModelValidation());
        }
        if (this["timingAge"]) {
            results.push(...this.timingAge.doModelValidation());
        }
        if (this["timingPeriod"]) {
            results.push(...this.timingPeriod.doModelValidation());
        }
        if (this["timingDuration"]) {
            results.push(...this.timingDuration.doModelValidation());
        }
        if (this["timingRange"]) {
            results.push(...this.timingRange.doModelValidation());
        }
        if (this["timingTiming"]) {
            results.push(...this.timingTiming.doModelValidation());
        }
        if (this["participant"]) {
            this.participant.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["_groupingBehavior"]) {
            results.push(...this._groupingBehavior.doModelValidation());
        }
        if (this["_selectionBehavior"]) {
            results.push(...this._selectionBehavior.doModelValidation());
        }
        if (this["_requiredBehavior"]) {
            results.push(...this._requiredBehavior.doModelValidation());
        }
        if (this["_precheckBehavior"]) {
            results.push(...this._precheckBehavior.doModelValidation());
        }
        if (this["_cardinalityBehavior"]) {
            results.push(...this._cardinalityBehavior.doModelValidation());
        }
        if (this["resource"]) {
            results.push(...this.resource.doModelValidation());
        }
        if (this["action"]) {
            this.action.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * A group of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one".
 */
export class RequestGroup extends fhir.DomainResource {
    /**
     * Default constructor for RequestGroup - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'RequestGroup';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['instantiatesCanonical']) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => (x));
        }
        if (source['_instantiatesCanonical']) {
            this._instantiatesCanonical = source._instantiatesCanonical.map((x) => new fhir.FhirElement(x));
        }
        if (source['instantiatesUri']) {
            this.instantiatesUri = source.instantiatesUri.map((x) => (x));
        }
        if (source['_instantiatesUri']) {
            this._instantiatesUri = source._instantiatesUri.map((x) => new fhir.FhirElement(x));
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source['replaces']) {
            this.replaces = source.replaces.map((x) => new fhir.Reference(x));
        }
        if (source['groupIdentifier']) {
            this.groupIdentifier = new fhir.Identifier(source.groupIdentifier);
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['intent']) {
            this.intent = source.intent;
        }
        else {
            this.intent = null;
        }
        if (source['_intent']) {
            this._intent = new fhir.FhirElement(source._intent);
        }
        if (source['priority']) {
            this.priority = source.priority;
        }
        if (source['_priority']) {
            this._priority = new fhir.FhirElement(source._priority);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['authoredOn']) {
            this.authoredOn = source.authoredOn;
        }
        if (source['_authoredOn']) {
            this._authoredOn = new fhir.FhirElement(source._authoredOn);
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.RequestGroupAction(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return RequestStatusValueSet;
    }
    /**
     * Required-bound Value Set for intent
     */
    static intentRequiredValueSet() {
        return RequestIntentValueSet;
    }
    /**
     * Required-bound Value Set for priority
     */
    static priorityRequiredValueSet() {
        return RequestPriorityValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: RequestGroup.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_instantiatesCanonical"]) {
            this._instantiatesCanonical.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_instantiatesUri"]) {
            this._instantiatesUri.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["replaces"]) {
            this.replaces.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["groupIdentifier"]) {
            results.push(...this.groupIdentifier.doModelValidation());
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: RequestGroup.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (!this["intent"]) {
            results.push(["intent", 'Missing required element: RequestGroup.intent']);
        }
        if (this["_intent"]) {
            results.push(...this._intent.doModelValidation());
        }
        if (this["_priority"]) {
            results.push(...this._priority.doModelValidation());
        }
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["subject"]) {
            results.push(...this.subject.doModelValidation());
        }
        if (this["encounter"]) {
            results.push(...this.encounter.doModelValidation());
        }
        if (this["_authoredOn"]) {
            results.push(...this._authoredOn.doModelValidation());
        }
        if (this["author"]) {
            results.push(...this.author.doModelValidation());
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["action"]) {
            this.action.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=RequestGroup.js.map