// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Logical network location for application activity, if the activity has a network location.
 */
export class AuditEventAgentNetwork extends fhir.BackboneElement {
    /**
     * Default constructor for AuditEventAgentNetwork - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["address"]) {
            this.address = source.address;
        }
        if (source["_address"]) {
            this._address = new fhir.FhirElement(source._address);
        }
        if (source["type"]) {
            this.type = source.type;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
    }
    /**
     * Check if the current AuditEventAgentNetwork contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a AuditEventAgentNetwork from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new AuditEventAgentNetwork(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `AuditEventAgentNetwork is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Several agents may be associated (i.e. have some responsibility for an activity) with an event or activity.
 * For example, an activity may be initiated by one user for other users or involve more than one user. However, only one user may be the initiator/requestor for the activity.
 */
export class AuditEventAgent extends fhir.BackboneElement {
    /**
     * Default constructor for AuditEventAgent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["altId"]) {
            this.altId = source.altId;
        }
        if (source["_altId"]) {
            this._altId = new fhir.FhirElement(source._altId);
        }
        if (source["location"]) {
            this.location = new fhir.Reference(source.location);
        }
        if (source["media"]) {
            this.media = new fhir.Coding(source.media);
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["network"]) {
            this.network = new fhir.AuditEventAgentNetwork(source.network);
        }
        if (source["policy"]) {
            this.policy = source.policy.map((x) => (x));
        }
        if (source["_policy"]) {
            this._policy = source._policy.map((x) => new fhir.FhirElement(x));
        }
        if (source["purposeOfUse"]) {
            this.purposeOfUse = source.purposeOfUse.map((x) => new fhir.CodeableConcept(x));
        }
        this.requestor = null;
        if (source["requestor"]) {
            this.requestor = source.requestor;
        }
        if (this.requestor === undefined) {
            this.requestor = null;
        }
        if (source["_requestor"]) {
            this._requestor = new fhir.FhirElement(source._requestor);
        }
        if (source["role"]) {
            this.role = source.role.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source["who"]) {
            this.who = new fhir.Reference(source.who);
        }
    }
    /**
     * Check if the current AuditEventAgent contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["requestor"] === undefined) {
            missingElements.push("requestor");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a AuditEventAgent from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new AuditEventAgent(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `AuditEventAgent is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Since multi-tier, distributed, or composite applications make source identification ambiguous, this collection of fields may repeat for each application or process actively involved in the event. For example, multiple value-sets can identify participating web servers, application processes, and database server threads in an n-tier distributed application. Passive event participants (e.g. low-level network transports) need not be identified.
 */
export class AuditEventSource extends fhir.BackboneElement {
    /**
     * Default constructor for AuditEventSource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.observer = null;
        if (source["observer"]) {
            this.observer = new fhir.Reference(source.observer);
        }
        if (this.observer === undefined) {
            this.observer = null;
        }
        if (source["site"]) {
            this.site = source.site;
        }
        if (source["_site"]) {
            this._site = new fhir.FhirElement(source._site);
        }
        if (source["type"]) {
            this.type = source.type.map((x) => new fhir.Coding(x));
        }
    }
    /**
     * Check if the current AuditEventSource contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["observer"] === undefined) {
            missingElements.push("observer");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a AuditEventSource from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new AuditEventSource(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `AuditEventSource is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Tagged value pairs for conveying additional information about the entity.
 */
export class AuditEventEntityDetail extends fhir.BackboneElement {
    /**
     * Default constructor for AuditEventEntityDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.type = null;
        if (source["type"]) {
            this.type = source.type;
        }
        if (this.type === undefined) {
            this.type = null;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source["valueString"]) {
            this.valueString = source.valueString;
        }
        if (source["_valueString"]) {
            this._valueString = new fhir.FhirElement(source._valueString);
        }
        if (source["valueBase64Binary"]) {
            this.valueBase64Binary = source.valueBase64Binary;
        }
        if (source["_valueBase64Binary"]) {
            this._valueBase64Binary = new fhir.FhirElement(source._valueBase64Binary);
        }
    }
    /**
     * Check if the current AuditEventEntityDetail contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a AuditEventEntityDetail from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new AuditEventEntityDetail(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `AuditEventEntityDetail is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Required unless the values for event identification, agent identification, and audit source identification are sufficient to document the entire auditable event. Because events may have more than one entity, this group can be a repeating set of values.
 */
export class AuditEventEntity extends fhir.BackboneElement {
    /**
     * Default constructor for AuditEventEntity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["detail"]) {
            this.detail = source.detail.map((x) => new fhir.AuditEventEntityDetail(x));
        }
        if (source["lifecycle"]) {
            this.lifecycle = new fhir.Coding(source.lifecycle);
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["query"]) {
            this.query = source.query;
        }
        if (source["_query"]) {
            this._query = new fhir.FhirElement(source._query);
        }
        if (source["role"]) {
            this.role = new fhir.Coding(source.role);
        }
        if (source["securityLabel"]) {
            this.securityLabel = source.securityLabel.map((x) => new fhir.Coding(x));
        }
        if (source["type"]) {
            this.type = new fhir.Coding(source.type);
        }
        if (source["what"]) {
            this.what = new fhir.Reference(source.what);
        }
    }
    /**
     * Check if the current AuditEventEntity contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a AuditEventEntity from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new AuditEventEntity(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `AuditEventEntity is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
 */
export class AuditEvent extends fhir.DomainResource {
    /**
     * Default constructor for AuditEvent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'AuditEvent';
        if (source["action"]) {
            this.action = source.action;
        }
        if (source["_action"]) {
            this._action = new fhir.FhirElement(source._action);
        }
        this.agent = null;
        if (source["agent"]) {
            this.agent = source.agent.map((x) => new fhir.AuditEventAgent(x));
        }
        if (this.agent === undefined) {
            this.agent = null;
        }
        if (source["entity"]) {
            this.entity = source.entity.map((x) => new fhir.AuditEventEntity(x));
        }
        if (source["outcome"]) {
            this.outcome = source.outcome;
        }
        if (source["_outcome"]) {
            this._outcome = new fhir.FhirElement(source._outcome);
        }
        if (source["outcomeDesc"]) {
            this.outcomeDesc = source.outcomeDesc;
        }
        if (source["_outcomeDesc"]) {
            this._outcomeDesc = new fhir.FhirElement(source._outcomeDesc);
        }
        if (source["period"]) {
            this.period = new fhir.Period(source.period);
        }
        if (source["purposeOfEvent"]) {
            this.purposeOfEvent = source.purposeOfEvent.map((x) => new fhir.CodeableConcept(x));
        }
        this.recorded = null;
        if (source["recorded"]) {
            this.recorded = source.recorded;
        }
        if (this.recorded === undefined) {
            this.recorded = null;
        }
        if (source["_recorded"]) {
            this._recorded = new fhir.FhirElement(source._recorded);
        }
        this.source = null;
        if (source["source"]) {
            this.source = new fhir.AuditEventSource(source.source);
        }
        if (this.source === undefined) {
            this.source = null;
        }
        if (source["subtype"]) {
            this.subtype = source.subtype.map((x) => new fhir.Coding(x));
        }
        this.type = null;
        if (source["type"]) {
            this.type = new fhir.Coding(source.type);
        }
        if (this.type === undefined) {
            this.type = null;
        }
    }
    /**
     * Check if the current AuditEvent contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if ((!this["agent"]) || (this["agent"].length === 0)) {
            missingElements.push("agent");
        }
        if (this["recorded"] === undefined) {
            missingElements.push("recorded");
        }
        if (this["source"] === undefined) {
            missingElements.push("source");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a AuditEvent from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new AuditEvent(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `AuditEvent is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
//# sourceMappingURL=AuditEvent.js.map