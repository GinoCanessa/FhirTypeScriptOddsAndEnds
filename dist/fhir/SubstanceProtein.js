// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SubstanceProtein
import * as fhir from '../fhir.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * This subclause refers to the description of each subunit constituting the SubstanceProtein. A subunit is a linear sequence of amino acids linked through peptide bonds. The Subunit information shall be provided when the finished SubstanceProtein is a complex of multiple sequences; subunits are not used to delineate domains within a single sequence. Subunits are listed in order of decreasing length; sequences of the same length will be ordered by decreasing molecular weight; subunits that have identical sequences will be repeated multiple times.
 */
export class SubstanceProteinSubunit extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceProteinSubunit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'SubstanceProteinSubunit';
        if (source['subunit']) {
            this.subunit = new fhir.FhirInteger({ value: source.subunit });
        }
        if (source['sequence']) {
            this.sequence = new fhir.FhirString({ value: source.sequence });
        }
        if (source['length']) {
            this.length = new fhir.FhirInteger({ value: source.length });
        }
        if (source['sequenceAttachment']) {
            this.sequenceAttachment = new fhir.Attachment(source.sequenceAttachment);
        }
        if (source['nTerminalModificationId']) {
            this.nTerminalModificationId = new fhir.Identifier(source.nTerminalModificationId);
        }
        if (source['nTerminalModification']) {
            this.nTerminalModification = new fhir.FhirString({ value: source.nTerminalModification });
        }
        if (source['cTerminalModificationId']) {
            this.cTerminalModificationId = new fhir.Identifier(source.cTerminalModificationId);
        }
        if (source['cTerminalModification']) {
            this.cTerminalModification = new fhir.FhirString({ value: source.cTerminalModification });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["subunit"]) {
            outcome.issue.push(...this.subunit.doModelValidation().issue);
        }
        if (this["sequence"]) {
            outcome.issue.push(...this.sequence.doModelValidation().issue);
        }
        if (this["length"]) {
            outcome.issue.push(...this.length.doModelValidation().issue);
        }
        if (this["sequenceAttachment"]) {
            outcome.issue.push(...this.sequenceAttachment.doModelValidation().issue);
        }
        if (this["nTerminalModificationId"]) {
            outcome.issue.push(...this.nTerminalModificationId.doModelValidation().issue);
        }
        if (this["nTerminalModification"]) {
            outcome.issue.push(...this.nTerminalModification.doModelValidation().issue);
        }
        if (this["cTerminalModificationId"]) {
            outcome.issue.push(...this.cTerminalModificationId.doModelValidation().issue);
        }
        if (this["cTerminalModification"]) {
            outcome.issue.push(...this.cTerminalModification.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * A SubstanceProtein is defined as a single unit of a linear amino acid sequence, or a combination of subunits that are either covalently linked or have a defined invariant stoichiometric relationship. This includes all synthetic, recombinant and purified SubstanceProteins of defined sequence, whether the use is therapeutic or prophylactic. This set of elements will be used to describe albumins, coagulation factors, cytokines, growth factors, peptide/SubstanceProtein hormones, enzymes, toxins, toxoids, recombinant vaccines, and immunomodulators.
 */
export class SubstanceProtein extends fhir.DomainResource {
    /**
     * Default constructor for SubstanceProtein - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'SubstanceProtein';
        /**
         * The disulphide bond between two cysteine residues either on the same subunit or on two different subunits shall be described. The position of the disulfide bonds in the SubstanceProtein shall be listed in increasing order of subunit number and position within subunit followed by the abbreviation of the amino acids involved. The disulfide linkage positions shall actually contain the amino acid Cysteine at the respective positions.
         */
        this.disulfideLinkage = [];
        /**
         * This subclause refers to the description of each subunit constituting the SubstanceProtein. A subunit is a linear sequence of amino acids linked through peptide bonds. The Subunit information shall be provided when the finished SubstanceProtein is a complex of multiple sequences; subunits are not used to delineate domains within a single sequence. Subunits are listed in order of decreasing length; sequences of the same length will be ordered by decreasing molecular weight; subunits that have identical sequences will be repeated multiple times.
         */
        this.subunit = [];
        this.resourceType = 'SubstanceProtein';
        if (source['sequenceType']) {
            this.sequenceType = new fhir.CodeableConcept(source.sequenceType);
        }
        if (source['numberOfSubunits']) {
            this.numberOfSubunits = new fhir.FhirInteger({ value: source.numberOfSubunits });
        }
        if (source['disulfideLinkage']) {
            this.disulfideLinkage = source.disulfideLinkage.map((x) => new fhir.FhirString({ value: x }));
        }
        if (source['subunit']) {
            this.subunit = source.subunit.map((x) => new fhir.SubstanceProteinSubunit(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'SubstanceProtein' fhir: SubstanceProtein.resourceType:'SubstanceProtein'", }));
        }
        if (this["sequenceType"]) {
            outcome.issue.push(...this.sequenceType.doModelValidation().issue);
        }
        if (this["numberOfSubunits"]) {
            outcome.issue.push(...this.numberOfSubunits.doModelValidation().issue);
        }
        if (this["disulfideLinkage"]) {
            this.disulfideLinkage.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["subunit"]) {
            this.subunit.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=SubstanceProtein.js.map