// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Substance
import * as fhir from '../fhir.js';
import { SubstanceCodeValueSet } from '../fhirValueSets/SubstanceCodeValueSet.js';
import { SubstanceStatusValueSet } from '../fhirValueSets/SubstanceStatusValueSet.js';
import { SubstanceCategoryValueSet } from '../fhirValueSets/SubstanceCategoryValueSet.js';
/**
 * Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.
 */
export class SubstanceInstance extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceInstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['expiry']) {
            this.expiry = source.expiry;
        }
        if (source['_expiry']) {
            this._expiry = new fhir.FhirElement(source._expiry);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["identifier"]) {
            results.push(...this.identifier.doModelValidation());
        }
        if (this["_expiry"]) {
            results.push(...this._expiry.doModelValidation());
        }
        if (this["quantity"]) {
            results.push(...this.quantity.doModelValidation());
        }
        return results;
    }
}
/**
 * A substance can be composed of other substances.
 */
export class SubstanceIngredient extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceIngredient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['quantity']) {
            this.quantity = new fhir.Ratio(source.quantity);
        }
        if (source['substanceCodeableConcept']) {
            this.substanceCodeableConcept = new fhir.CodeableConcept(source.substanceCodeableConcept);
        }
        if (source['substanceReference']) {
            this.substanceReference = new fhir.Reference(source.substanceReference);
        }
    }
    /**
     * Example-bound Value Set for substanceCodeableConcept
     */
    substanceCodeableConceptExampleValueSet() {
        return SubstanceCodeValueSet;
    }
    /**
     * Example-bound Value Set for substanceReference
     */
    substanceReferenceExampleValueSet() {
        return SubstanceCodeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["quantity"]) {
            results.push(...this.quantity.doModelValidation());
        }
        if (this["substanceCodeableConcept"]) {
            results.push(...this.substanceCodeableConcept.doModelValidation());
        }
        if (this["substanceReference"]) {
            results.push(...this.substanceReference.doModelValidation());
        }
        return results;
    }
}
/**
 * A homogeneous material with a definite composition.
 */
export class Substance extends fhir.DomainResource {
    /**
     * Default constructor for Substance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Substance';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['instance']) {
            this.instance = source.instance.map((x) => new fhir.SubstanceInstance(x));
        }
        if (source['ingredient']) {
            this.ingredient = source.ingredient.map((x) => new fhir.SubstanceIngredient(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return SubstanceStatusValueSet;
    }
    /**
     * Extensible-bound Value Set for category
     */
    categoryExtensibleValueSet() {
        return SubstanceCategoryValueSet;
    }
    /**
     * Example-bound Value Set for code
     */
    codeExampleValueSet() {
        return SubstanceCodeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: Substance.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["category"]) {
            this.category.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["code"]) {
            results.push(["code", 'Missing required element: Substance.code']);
        }
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["instance"]) {
            this.instance.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["ingredient"]) {
            this.ingredient.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=Substance.js.map