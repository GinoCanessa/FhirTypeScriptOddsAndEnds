// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.
 */
export class SubstanceInstance extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceInstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["expiry"]) {
            this.expiry = source.expiry;
        }
        if (source["_expiry"]) {
            this._expiry = new fhir.FhirElement(source._expiry);
        }
        if (source["identifier"]) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source["quantity"]) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
    }
    /**
     * Check if the current SubstanceInstance contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SubstanceInstance from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new SubstanceInstance(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstanceInstance is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A substance can be composed of other substances.
 */
export class SubstanceIngredient extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceIngredient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["quantity"]) {
            this.quantity = new fhir.Ratio(source.quantity);
        }
        if (source["substanceCodeableConcept"]) {
            this.substanceCodeableConcept = new fhir.CodeableConcept(source.substanceCodeableConcept);
        }
        if (source["substanceReference"]) {
            this.substanceReference = new fhir.Reference(source.substanceReference);
        }
    }
    /**
     * Check if the current SubstanceIngredient contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SubstanceIngredient from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new SubstanceIngredient(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstanceIngredient is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A homogeneous material with a definite composition.
 */
export class Substance extends fhir.DomainResource {
    /**
     * Default constructor for Substance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Substance';
        if (source["category"]) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        this.code = null;
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (this.code === undefined) {
            this.code = null;
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["ingredient"]) {
            this.ingredient = source.ingredient.map((x) => new fhir.SubstanceIngredient(x));
        }
        if (source["instance"]) {
            this.instance = source.instance.map((x) => new fhir.SubstanceInstance(x));
        }
        if (source["status"]) {
            this.status = source.status;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
    }
    /**
     * Check if the current Substance contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Substance from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new Substance(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `Substance is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the Substance.status field
 */
export var SubstanceStatusEnum;
(function (SubstanceStatusEnum) {
    SubstanceStatusEnum["ACTIVE"] = "active";
    SubstanceStatusEnum["INACTIVE"] = "inactive";
    SubstanceStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(SubstanceStatusEnum || (SubstanceStatusEnum = {}));
//# sourceMappingURL=Substance.js.map