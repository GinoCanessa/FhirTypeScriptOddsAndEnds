// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
 */
export class Quantity extends fhir.FhirElement {
    /**
     * Default constructor for Quantity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["code"]) {
            this.code = source.code;
        }
        if (source["_code"]) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source["comparator"]) {
            this.comparator = source.comparator;
        }
        if (source["_comparator"]) {
            this._comparator = new fhir.FhirElement(source._comparator);
        }
        if (source["system"]) {
            this.system = source.system;
        }
        if (source["_system"]) {
            this._system = new fhir.FhirElement(source._system);
        }
        if (source["unit"]) {
            this.unit = source.unit;
        }
        if (source["_unit"]) {
            this._unit = new fhir.FhirElement(source._unit);
        }
        if (source["value"]) {
            this.value = source.value;
        }
        if (source["_value"]) {
            this._value = new fhir.FhirElement(source._value);
        }
    }
    /**
     * Check if the current Quantity contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Quantity from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new Quantity(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Quantity is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the Quantity.comparator field
 */
export var QuantityComparatorEnum;
(function (QuantityComparatorEnum) {
    QuantityComparatorEnum["LESS_THAN"] = "<";
    QuantityComparatorEnum["LESS_THAN_OR_EQUALS"] = "<=";
    QuantityComparatorEnum["GREATER_THAN_OR_EQUALS"] = ">=";
    QuantityComparatorEnum["GREATER_THAN"] = ">";
})(QuantityComparatorEnum || (QuantityComparatorEnum = {}));
//# sourceMappingURL=Quantity.js.map