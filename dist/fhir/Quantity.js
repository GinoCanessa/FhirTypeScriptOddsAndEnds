// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Quantity
import * as fhir from '../fhir.js';
import { QuantityComparatorValueSet } from '../fhirValueSets/QuantityComparatorValueSet.js';
/**
 * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
 */
export class Quantity extends fhir.FhirElement {
    /**
     * Default constructor for Quantity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['value']) {
            this.value = source.value;
        }
        if (source['_value']) {
            this._value = new fhir.FhirElement(source._value);
        }
        if (source['comparator']) {
            this.comparator = source.comparator;
        }
        if (source['_comparator']) {
            this._comparator = new fhir.FhirElement(source._comparator);
        }
        if (source['unit']) {
            this.unit = source.unit;
        }
        if (source['_unit']) {
            this._unit = new fhir.FhirElement(source._unit);
        }
        if (source['system']) {
            this.system = source.system;
        }
        if (source['_system']) {
            this._system = new fhir.FhirElement(source._system);
        }
        if (source['code']) {
            this.code = source.code;
        }
        if (source['_code']) {
            this._code = new fhir.FhirElement(source._code);
        }
    }
    /**
     * Required-bound Value Set for comparator
     */
    static comparatorRequiredValueSet() {
        return QuantityComparatorValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_value"]) {
            results.push(...this._value.doModelValidation());
        }
        if (this["_comparator"]) {
            results.push(...this._comparator.doModelValidation());
        }
        if (this["_unit"]) {
            results.push(...this._unit.doModelValidation());
        }
        if (this["_system"]) {
            results.push(...this._system.doModelValidation());
        }
        if (this["_code"]) {
            results.push(...this._code.doModelValidation());
        }
        return results;
    }
}
//# sourceMappingURL=Quantity.js.map