// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Quantity
import * as fhir from '../fhir.js';
import { QuantityComparatorValueSet, } from '../fhirValueSets/QuantityComparatorValueSet.js';
/**
 * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
 */
export class Quantity extends fhir.FhirElement {
    /**
     * Default constructor for Quantity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'Quantity';
        if (source['value']) {
            this.value = new fhir.FhirDecimal({ value: source.value });
        }
        if (source['comparator']) {
            this.comparator = source.comparator;
        }
        if (source['unit']) {
            this.unit = new fhir.FhirString({ value: source.unit });
        }
        if (source['system']) {
            this.system = new fhir.FhirUri({ value: source.system });
        }
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
    }
    /**
     * Required-bound Value Set for comparator
     */
    static comparatorRequiredValueSet() {
        return QuantityComparatorValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["value"]) {
            outcome.issue.push(...this.value.doModelValidation().issue);
        }
        if (this["unit"]) {
            outcome.issue.push(...this.unit.doModelValidation().issue);
        }
        if (this["system"]) {
            outcome.issue.push(...this.system.doModelValidation().issue);
        }
        if (this["code"]) {
            outcome.issue.push(...this.code.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=Quantity.js.map