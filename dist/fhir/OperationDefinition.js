// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
 */
export class OperationDefinitionParameterBinding extends fhir.BackboneElement {
    /**
     * Default constructor for OperationDefinitionParameterBinding - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.strength = null;
        if (source["strength"]) {
            this.strength = source.strength;
        }
        if (this.strength === undefined) {
            this.strength = null;
        }
        if (source["_strength"]) {
            this._strength = new fhir.FhirElement(source._strength);
        }
        this.valueSet = null;
        if (source["valueSet"]) {
            this.valueSet = source.valueSet;
        }
        if (this.valueSet === undefined) {
            this.valueSet = null;
        }
        if (source["_valueSet"]) {
            this._valueSet = new fhir.FhirElement(source._valueSet);
        }
    }
    /**
     * Check if the current OperationDefinitionParameterBinding contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["strength"] === undefined) {
            missingElements.push("strength");
        }
        if (this["valueSet"] === undefined) {
            missingElements.push("valueSet");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a OperationDefinitionParameterBinding from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new OperationDefinitionParameterBinding(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `OperationDefinitionParameterBinding is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Resolution applies if the referenced parameter exists.
 */
export class OperationDefinitionParameterReferencedFrom extends fhir.BackboneElement {
    /**
     * Default constructor for OperationDefinitionParameterReferencedFrom - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.source = null;
        if (source["source"]) {
            this.source = source.source;
        }
        if (this.source === undefined) {
            this.source = null;
        }
        if (source["_source"]) {
            this._source = new fhir.FhirElement(source._source);
        }
        if (source["sourceId"]) {
            this.sourceId = source.sourceId;
        }
        if (source["_sourceId"]) {
            this._sourceId = new fhir.FhirElement(source._sourceId);
        }
    }
    /**
     * Check if the current OperationDefinitionParameterReferencedFrom contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["source"] === undefined) {
            missingElements.push("source");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a OperationDefinitionParameterReferencedFrom from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new OperationDefinitionParameterReferencedFrom(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `OperationDefinitionParameterReferencedFrom is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Query Definitions only have one output parameter, named "result". This might not be described, but can be to allow a profile to be defined.
 */
export class OperationDefinitionParameter extends fhir.BackboneElement {
    /**
     * Default constructor for OperationDefinitionParameter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["binding"]) {
            this.binding = new fhir.OperationDefinitionParameterBinding(source.binding);
        }
        if (source["documentation"]) {
            this.documentation = source.documentation;
        }
        if (source["_documentation"]) {
            this._documentation = new fhir.FhirElement(source._documentation);
        }
        this.max = null;
        if (source["max"]) {
            this.max = source.max;
        }
        if (this.max === undefined) {
            this.max = null;
        }
        if (source["_max"]) {
            this._max = new fhir.FhirElement(source._max);
        }
        this.min = null;
        if (source["min"]) {
            this.min = source.min;
        }
        if (this.min === undefined) {
            this.min = null;
        }
        if (source["_min"]) {
            this._min = new fhir.FhirElement(source._min);
        }
        this.name = null;
        if (source["name"]) {
            this.name = source.name;
        }
        if (this.name === undefined) {
            this.name = null;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["part"]) {
            this.part = source.part.map((x) => new fhir.OperationDefinitionParameter(x));
        }
        if (source["referencedFrom"]) {
            this.referencedFrom = source.referencedFrom.map((x) => new fhir.OperationDefinitionParameterReferencedFrom(x));
        }
        if (source["searchType"]) {
            this.searchType = source.searchType;
        }
        if (source["_searchType"]) {
            this._searchType = new fhir.FhirElement(source._searchType);
        }
        if (source["targetProfile"]) {
            this.targetProfile = source.targetProfile.map((x) => (x));
        }
        if (source["_targetProfile"]) {
            this._targetProfile = source._targetProfile.map((x) => new fhir.FhirElement(x));
        }
        if (source["type"]) {
            this.type = source.type;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
        this.use = null;
        if (source["use"]) {
            this.use = source.use;
        }
        if (this.use === undefined) {
            this.use = null;
        }
        if (source["_use"]) {
            this._use = new fhir.FhirElement(source._use);
        }
    }
    /**
     * Check if the current OperationDefinitionParameter contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["max"] === undefined) {
            missingElements.push("max");
        }
        if (this["min"] === undefined) {
            missingElements.push("min");
        }
        if (this["name"] === undefined) {
            missingElements.push("name");
        }
        if (this["use"] === undefined) {
            missingElements.push("use");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a OperationDefinitionParameter from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new OperationDefinitionParameter(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `OperationDefinitionParameter is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The combinations are suggestions as to which sets of parameters to use together, but the combinations are not intended to be authoritative.
 */
export class OperationDefinitionOverload extends fhir.BackboneElement {
    /**
     * Default constructor for OperationDefinitionOverload - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["comment"]) {
            this.comment = source.comment;
        }
        if (source["_comment"]) {
            this._comment = new fhir.FhirElement(source._comment);
        }
        if (source["parameterName"]) {
            this.parameterName = source.parameterName.map((x) => (x));
        }
        if (source["_parameterName"]) {
            this._parameterName = source._parameterName.map((x) => new fhir.FhirElement(x));
        }
    }
    /**
     * Check if the current OperationDefinitionOverload contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a OperationDefinitionOverload from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new OperationDefinitionOverload(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `OperationDefinitionOverload is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
 */
export class OperationDefinition extends fhir.DomainResource {
    /**
     * Default constructor for OperationDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'OperationDefinition';
        if (source["affectsState"]) {
            this.affectsState = source.affectsState;
        }
        if (source["_affectsState"]) {
            this._affectsState = new fhir.FhirElement(source._affectsState);
        }
        if (source["base"]) {
            this.base = source.base;
        }
        if (source["_base"]) {
            this._base = new fhir.FhirElement(source._base);
        }
        this.code = null;
        if (source["code"]) {
            this.code = source.code;
        }
        if (this.code === undefined) {
            this.code = null;
        }
        if (source["_code"]) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source["comment"]) {
            this.comment = source.comment;
        }
        if (source["_comment"]) {
            this._comment = new fhir.FhirElement(source._comment);
        }
        if (source["contact"]) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source["date"]) {
            this.date = source.date;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["experimental"]) {
            this.experimental = source.experimental;
        }
        if (source["_experimental"]) {
            this._experimental = new fhir.FhirElement(source._experimental);
        }
        if (source["inputProfile"]) {
            this.inputProfile = source.inputProfile;
        }
        if (source["_inputProfile"]) {
            this._inputProfile = new fhir.FhirElement(source._inputProfile);
        }
        this.instance = null;
        if (source["instance"]) {
            this.instance = source.instance;
        }
        if (this.instance === undefined) {
            this.instance = null;
        }
        if (source["_instance"]) {
            this._instance = new fhir.FhirElement(source._instance);
        }
        if (source["jurisdiction"]) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        this.kind = null;
        if (source["kind"]) {
            this.kind = source.kind;
        }
        if (this.kind === undefined) {
            this.kind = null;
        }
        if (source["_kind"]) {
            this._kind = new fhir.FhirElement(source._kind);
        }
        this.name = null;
        if (source["name"]) {
            this.name = source.name;
        }
        if (this.name === undefined) {
            this.name = null;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["outputProfile"]) {
            this.outputProfile = source.outputProfile;
        }
        if (source["_outputProfile"]) {
            this._outputProfile = new fhir.FhirElement(source._outputProfile);
        }
        if (source["overload"]) {
            this.overload = source.overload.map((x) => new fhir.OperationDefinitionOverload(x));
        }
        if (source["parameter"]) {
            this.parameter = source.parameter.map((x) => new fhir.OperationDefinitionParameter(x));
        }
        if (source["publisher"]) {
            this.publisher = source.publisher;
        }
        if (source["_publisher"]) {
            this._publisher = new fhir.FhirElement(source._publisher);
        }
        if (source["purpose"]) {
            this.purpose = source.purpose;
        }
        if (source["_purpose"]) {
            this._purpose = new fhir.FhirElement(source._purpose);
        }
        if (source["resource"]) {
            this.resource = source.resource.map((x) => (x));
        }
        if (source["_resource"]) {
            this._resource = source._resource.map((x) => new fhir.FhirElement(x));
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        this.system = null;
        if (source["system"]) {
            this.system = source.system;
        }
        if (this.system === undefined) {
            this.system = null;
        }
        if (source["_system"]) {
            this._system = new fhir.FhirElement(source._system);
        }
        if (source["title"]) {
            this.title = source.title;
        }
        if (source["_title"]) {
            this._title = new fhir.FhirElement(source._title);
        }
        this.type = null;
        if (source["type"]) {
            this.type = source.type;
        }
        if (this.type === undefined) {
            this.type = null;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source["url"]) {
            this.url = source.url;
        }
        if (source["_url"]) {
            this._url = new fhir.FhirElement(source._url);
        }
        if (source["useContext"]) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source["version"]) {
            this.version = source.version;
        }
        if (source["_version"]) {
            this._version = new fhir.FhirElement(source._version);
        }
    }
    /**
     * Check if the current OperationDefinition contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        if (this["instance"] === undefined) {
            missingElements.push("instance");
        }
        if (this["kind"] === undefined) {
            missingElements.push("kind");
        }
        if (this["name"] === undefined) {
            missingElements.push("name");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["system"] === undefined) {
            missingElements.push("system");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a OperationDefinition from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new OperationDefinition(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `OperationDefinition is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the OperationDefinition.parameter.binding.strength field
 */
export var OperationDefinitionParameterBindingStrengthEnum;
(function (OperationDefinitionParameterBindingStrengthEnum) {
    OperationDefinitionParameterBindingStrengthEnum["REQUIRED"] = "required";
    OperationDefinitionParameterBindingStrengthEnum["EXTENSIBLE"] = "extensible";
    OperationDefinitionParameterBindingStrengthEnum["PREFERRED"] = "preferred";
    OperationDefinitionParameterBindingStrengthEnum["EXAMPLE"] = "example";
})(OperationDefinitionParameterBindingStrengthEnum || (OperationDefinitionParameterBindingStrengthEnum = {}));
/**
 * Code Values for the OperationDefinition.parameter.searchType field
 */
export var OperationDefinitionParameterSearchTypeEnum;
(function (OperationDefinitionParameterSearchTypeEnum) {
    OperationDefinitionParameterSearchTypeEnum["NUMBER"] = "number";
    OperationDefinitionParameterSearchTypeEnum["DATE"] = "date";
    OperationDefinitionParameterSearchTypeEnum["STRING"] = "string";
    OperationDefinitionParameterSearchTypeEnum["TOKEN"] = "token";
    OperationDefinitionParameterSearchTypeEnum["REFERENCE"] = "reference";
    OperationDefinitionParameterSearchTypeEnum["COMPOSITE"] = "composite";
    OperationDefinitionParameterSearchTypeEnum["QUANTITY"] = "quantity";
    OperationDefinitionParameterSearchTypeEnum["URI"] = "uri";
    OperationDefinitionParameterSearchTypeEnum["SPECIAL"] = "special";
})(OperationDefinitionParameterSearchTypeEnum || (OperationDefinitionParameterSearchTypeEnum = {}));
/**
 * Code Values for the OperationDefinition.parameter.use field
 */
export var OperationDefinitionParameterUseEnum;
(function (OperationDefinitionParameterUseEnum) {
    OperationDefinitionParameterUseEnum["IN"] = "in";
    OperationDefinitionParameterUseEnum["OUT"] = "out";
})(OperationDefinitionParameterUseEnum || (OperationDefinitionParameterUseEnum = {}));
/**
 * Code Values for the OperationDefinition.kind field
 */
export var OperationDefinitionKindEnum;
(function (OperationDefinitionKindEnum) {
    OperationDefinitionKindEnum["OPERATION"] = "operation";
    OperationDefinitionKindEnum["QUERY"] = "query";
})(OperationDefinitionKindEnum || (OperationDefinitionKindEnum = {}));
/**
 * Code Values for the OperationDefinition.status field
 */
export var OperationDefinitionStatusEnum;
(function (OperationDefinitionStatusEnum) {
    OperationDefinitionStatusEnum["DRAFT"] = "draft";
    OperationDefinitionStatusEnum["ACTIVE"] = "active";
    OperationDefinitionStatusEnum["RETIRED"] = "retired";
    OperationDefinitionStatusEnum["UNKNOWN"] = "unknown";
})(OperationDefinitionStatusEnum || (OperationDefinitionStatusEnum = {}));
//# sourceMappingURL=OperationDefinition.js.map