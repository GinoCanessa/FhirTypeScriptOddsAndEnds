// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * A slot of time on a schedule that may be available for booking appointments.
 */
export class Slot extends fhir.DomainResource {
    /**
     * Default constructor for Slot - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Slot';
        if (source["appointmentType"]) {
            this.appointmentType = new fhir.CodeableConcept(source.appointmentType);
        }
        if (source["comment"]) {
            this.comment = source.comment;
        }
        if (source["_comment"]) {
            this._comment = new fhir.FhirElement(source._comment);
        }
        this.end = null;
        if (source["end"]) {
            this.end = source.end;
        }
        if (this.end === undefined) {
            this.end = null;
        }
        if (source["_end"]) {
            this._end = new fhir.FhirElement(source._end);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["overbooked"]) {
            this.overbooked = source.overbooked;
        }
        if (source["_overbooked"]) {
            this._overbooked = new fhir.FhirElement(source._overbooked);
        }
        this.schedule = null;
        if (source["schedule"]) {
            this.schedule = new fhir.Reference(source.schedule);
        }
        if (this.schedule === undefined) {
            this.schedule = null;
        }
        if (source["serviceCategory"]) {
            this.serviceCategory = source.serviceCategory.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["serviceType"]) {
            this.serviceType = source.serviceType.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["specialty"]) {
            this.specialty = source.specialty.map((x) => new fhir.CodeableConcept(x));
        }
        this.start = null;
        if (source["start"]) {
            this.start = source.start;
        }
        if (this.start === undefined) {
            this.start = null;
        }
        if (source["_start"]) {
            this._start = new fhir.FhirElement(source._start);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
    }
    /**
     * Check if the current Slot contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["end"] === undefined) {
            missingElements.push("end");
        }
        if (this["schedule"] === undefined) {
            missingElements.push("schedule");
        }
        if (this["start"] === undefined) {
            missingElements.push("start");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Slot from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new Slot(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `Slot is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the Slot.status field
 */
export var SlotStatusEnum;
(function (SlotStatusEnum) {
    SlotStatusEnum["BUSY"] = "busy";
    SlotStatusEnum["FREE"] = "free";
    SlotStatusEnum["BUSY_UNAVAILABLE"] = "busy-unavailable";
    SlotStatusEnum["BUSY_TENTATIVE"] = "busy-tentative";
    SlotStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(SlotStatusEnum || (SlotStatusEnum = {}));
//# sourceMappingURL=Slot.js.map