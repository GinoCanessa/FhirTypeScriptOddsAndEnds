// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Slot
import * as fhir from '../fhir.js';
import { ServiceCategoryValueSet } from '../fhirValueSets/ServiceCategoryValueSet.js';
import { ServiceTypeValueSet } from '../fhirValueSets/ServiceTypeValueSet.js';
import { C80PracticeCodesValueSet } from '../fhirValueSets/C80PracticeCodesValueSet.js';
import { V20276ValueSet } from '../fhirValueSets/V20276ValueSet.js';
import { SlotstatusValueSet } from '../fhirValueSets/SlotstatusValueSet.js';
/**
 * A slot of time on a schedule that may be available for booking appointments.
 */
export class Slot extends fhir.DomainResource {
    /**
     * Default constructor for Slot - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Slot';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['serviceCategory']) {
            this.serviceCategory = source.serviceCategory.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['serviceType']) {
            this.serviceType = source.serviceType.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['specialty']) {
            this.specialty = source.specialty.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['appointmentType']) {
            this.appointmentType = new fhir.CodeableConcept(source.appointmentType);
        }
        if (source['schedule']) {
            this.schedule = new fhir.Reference(source.schedule);
        }
        else {
            this.schedule = null;
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['start']) {
            this.start = source.start;
        }
        else {
            this.start = null;
        }
        if (source['_start']) {
            this._start = new fhir.FhirElement(source._start);
        }
        if (source['end']) {
            this.end = source.end;
        }
        else {
            this.end = null;
        }
        if (source['_end']) {
            this._end = new fhir.FhirElement(source._end);
        }
        if (source['overbooked']) {
            this.overbooked = source.overbooked;
        }
        if (source['_overbooked']) {
            this._overbooked = new fhir.FhirElement(source._overbooked);
        }
        if (source['comment']) {
            this.comment = source.comment;
        }
        if (source['_comment']) {
            this._comment = new fhir.FhirElement(source._comment);
        }
    }
    /**
     * Example-bound Value Set for serviceCategory
     */
    serviceCategoryExampleValueSet() {
        return ServiceCategoryValueSet;
    }
    /**
     * Example-bound Value Set for serviceType
     */
    serviceTypeExampleValueSet() {
        return ServiceTypeValueSet;
    }
    /**
     * Preferred-bound Value Set for specialty
     */
    specialtyPreferredValueSet() {
        return C80PracticeCodesValueSet;
    }
    /**
     * Preferred-bound Value Set for appointmentType
     */
    appointmentTypePreferredValueSet() {
        return V20276ValueSet;
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return SlotstatusValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: Slot.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["serviceCategory"]) {
            this.serviceCategory.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["serviceType"]) {
            this.serviceType.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["specialty"]) {
            this.specialty.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["appointmentType"]) {
            results.push(...this.appointmentType.doModelValidation());
        }
        if (!this["schedule"]) {
            results.push(["schedule", 'Missing required element: Slot.schedule']);
        }
        if (this["schedule"]) {
            results.push(...this.schedule.doModelValidation());
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: Slot.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (!this["start"]) {
            results.push(["start", 'Missing required element: Slot.start']);
        }
        if (this["_start"]) {
            results.push(...this._start.doModelValidation());
        }
        if (!this["end"]) {
            results.push(["end", 'Missing required element: Slot.end']);
        }
        if (this["_end"]) {
            results.push(...this._end.doModelValidation());
        }
        if (this["_overbooked"]) {
            results.push(...this._overbooked.doModelValidation());
        }
        if (this["_comment"]) {
            results.push(...this._comment.doModelValidation());
        }
        return results;
    }
}
//# sourceMappingURL=Slot.js.map