// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Meta
import * as fhir from '../fhir.js';
import { SecurityLabelsValueSet } from '../fhirValueSets/SecurityLabelsValueSet.js';
import { CommonTagsValueSet } from '../fhirValueSets/CommonTagsValueSet.js';
/**
 * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
 */
export class Meta extends fhir.FhirElement {
    /**
     * Default constructor for Meta - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['versionId']) {
            this.versionId = source.versionId;
        }
        if (source['_versionId']) {
            this._versionId = new fhir.FhirElement(source._versionId);
        }
        if (source['lastUpdated']) {
            this.lastUpdated = source.lastUpdated;
        }
        if (source['_lastUpdated']) {
            this._lastUpdated = new fhir.FhirElement(source._lastUpdated);
        }
        if (source['source']) {
            this.source = source.source;
        }
        if (source['_source']) {
            this._source = new fhir.FhirElement(source._source);
        }
        if (source['profile']) {
            this.profile = source.profile.map((x) => (x));
        }
        if (source['_profile']) {
            this._profile = source._profile.map((x) => new fhir.FhirElement(x));
        }
        if (source['security']) {
            this.security = source.security.map((x) => new fhir.Coding(x));
        }
        if (source['tag']) {
            this.tag = source.tag.map((x) => new fhir.Coding(x));
        }
    }
    /**
     * Extensible-bound Value Set for security
     */
    static securityExtensibleValueSet() {
        return SecurityLabelsValueSet;
    }
    /**
     * Example-bound Value Set for tag
     */
    static tagExampleValueSet() {
        return CommonTagsValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_versionId"]) {
            results.push(...this._versionId.doModelValidation());
        }
        if (this["_lastUpdated"]) {
            results.push(...this._lastUpdated.doModelValidation());
        }
        if (this["_source"]) {
            results.push(...this._source.doModelValidation());
        }
        if (this["_profile"]) {
            this._profile.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["security"]) {
            this.security.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["tag"]) {
            this.tag.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=Meta.js.map