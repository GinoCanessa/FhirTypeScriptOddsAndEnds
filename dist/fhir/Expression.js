// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
 */
export class Expression extends fhir.FhirElement {
    /**
     * Default constructor for Expression - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["expression"]) {
            this.expression = source.expression;
        }
        if (source["_expression"]) {
            this._expression = new fhir.FhirElement(source._expression);
        }
        this.language = null;
        if (source["language"]) {
            this.language = source.language;
        }
        if (this.language === undefined) {
            this.language = null;
        }
        if (source["_language"]) {
            this._language = new fhir.FhirElement(source._language);
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["reference"]) {
            this.reference = source.reference;
        }
        if (source["_reference"]) {
            this._reference = new fhir.FhirElement(source._reference);
        }
    }
    /**
     * Check if the current Expression contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["language"] === undefined) {
            missingElements.push("language");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Expression from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new Expression(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Expression is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the Expression.language field
 */
export var ExpressionLanguageEnum;
(function (ExpressionLanguageEnum) {
    ExpressionLanguageEnum["TEXT_CQL"] = "text/cql";
    ExpressionLanguageEnum["TEXT_FHIRPATH"] = "text/fhirpath";
    ExpressionLanguageEnum["APPLICATION_X_FHIR_QUERY"] = "application/x-fhir-query";
})(ExpressionLanguageEnum || (ExpressionLanguageEnum = {}));
//# sourceMappingURL=Expression.js.map