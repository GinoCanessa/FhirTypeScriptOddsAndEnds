// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: DataRequirement
import * as fhir from '../fhir.js';
import { SortDirectionValueSet } from '../fhirValueSets/SortDirectionValueSet.js';
import { AllTypesValueSet } from '../fhirValueSets/AllTypesValueSet.js';
import { SubjectTypeValueSet } from '../fhirValueSets/SubjectTypeValueSet.js';
/**
 * Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.
 */
export class DataRequirementCodeFilter extends fhir.FhirElement {
    /**
     * Default constructor for DataRequirementCodeFilter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['path']) {
            this.path = source.path;
        }
        if (source['_path']) {
            this._path = new fhir.FhirElement(source._path);
        }
        if (source['searchParam']) {
            this.searchParam = source.searchParam;
        }
        if (source['_searchParam']) {
            this._searchParam = new fhir.FhirElement(source._searchParam);
        }
        if (source['valueSet']) {
            this.valueSet = source.valueSet;
        }
        if (source['_valueSet']) {
            this._valueSet = new fhir.FhirElement(source._valueSet);
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.Coding(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_path"]) {
            results.push(...this._path.doModelValidation());
        }
        if (this["_searchParam"]) {
            results.push(...this._searchParam.doModelValidation());
        }
        if (this["_valueSet"]) {
            results.push(...this._valueSet.doModelValidation());
        }
        if (this["code"]) {
            this.code.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.
 */
export class DataRequirementDateFilter extends fhir.FhirElement {
    /**
     * Default constructor for DataRequirementDateFilter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['path']) {
            this.path = source.path;
        }
        if (source['_path']) {
            this._path = new fhir.FhirElement(source._path);
        }
        if (source['searchParam']) {
            this.searchParam = source.searchParam;
        }
        if (source['_searchParam']) {
            this._searchParam = new fhir.FhirElement(source._searchParam);
        }
        if (source['valueDateTime']) {
            this.valueDateTime = source.valueDateTime;
        }
        if (source['_valueDateTime']) {
            this._valueDateTime = new fhir.FhirElement(source._valueDateTime);
        }
        if (source['valuePeriod']) {
            this.valuePeriod = new fhir.Period(source.valuePeriod);
        }
        if (source['valueDuration']) {
            this.valueDuration = new fhir.Duration(source.valueDuration);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_path"]) {
            results.push(...this._path.doModelValidation());
        }
        if (this["_searchParam"]) {
            results.push(...this._searchParam.doModelValidation());
        }
        if (this["_valueDateTime"]) {
            results.push(...this._valueDateTime.doModelValidation());
        }
        if (this["valuePeriod"]) {
            results.push(...this.valuePeriod.doModelValidation());
        }
        if (this["valueDuration"]) {
            results.push(...this.valueDuration.doModelValidation());
        }
        return results;
    }
}
/**
 * This element can be used in combination with the sort element to specify quota requirements such as "the most recent 5" or "the highest 5". When multiple sorts are specified, they are applied in the order they appear in the resource.
 */
export class DataRequirementSort extends fhir.FhirElement {
    /**
     * Default constructor for DataRequirementSort - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['path']) {
            this.path = source.path;
        }
        else {
            this.path = null;
        }
        if (source['_path']) {
            this._path = new fhir.FhirElement(source._path);
        }
        if (source['direction']) {
            this.direction = source.direction;
        }
        else {
            this.direction = null;
        }
        if (source['_direction']) {
            this._direction = new fhir.FhirElement(source._direction);
        }
    }
    /**
     * Required-bound Value Set for direction
     */
    directionRequiredValueSet() {
        return SortDirectionValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["path"]) {
            results.push(["path", 'Missing required element: DataRequirement.sort.path']);
        }
        if (this["_path"]) {
            results.push(...this._path.doModelValidation());
        }
        if (!this["direction"]) {
            results.push(["direction", 'Missing required element: DataRequirement.sort.direction']);
        }
        if (this["_direction"]) {
            results.push(...this._direction.doModelValidation());
        }
        return results;
    }
}
/**
 * Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
 */
export class DataRequirement extends fhir.FhirElement {
    /**
     * Default constructor for DataRequirement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source['profile']) {
            this.profile = source.profile.map((x) => (x));
        }
        if (source['_profile']) {
            this._profile = source._profile.map((x) => new fhir.FhirElement(x));
        }
        if (source['subjectCodeableConcept']) {
            this.subjectCodeableConcept = new fhir.CodeableConcept(source.subjectCodeableConcept);
        }
        if (source['subjectReference']) {
            this.subjectReference = new fhir.Reference(source.subjectReference);
        }
        if (source['mustSupport']) {
            this.mustSupport = source.mustSupport.map((x) => (x));
        }
        if (source['_mustSupport']) {
            this._mustSupport = source._mustSupport.map((x) => new fhir.FhirElement(x));
        }
        if (source['codeFilter']) {
            this.codeFilter = source.codeFilter.map((x) => new fhir.DataRequirementCodeFilter(x));
        }
        if (source['dateFilter']) {
            this.dateFilter = source.dateFilter.map((x) => new fhir.DataRequirementDateFilter(x));
        }
        if (source['limit']) {
            this.limit = source.limit;
        }
        if (source['_limit']) {
            this._limit = new fhir.FhirElement(source._limit);
        }
        if (source['sort']) {
            this.sort = source.sort.map((x) => new fhir.DataRequirementSort(x));
        }
    }
    /**
     * Required-bound Value Set for type
     */
    typeRequiredValueSet() {
        return AllTypesValueSet;
    }
    /**
     * Extensible-bound Value Set for subjectCodeableConcept
     */
    subjectCodeableConceptExtensibleValueSet() {
        return SubjectTypeValueSet;
    }
    /**
     * Extensible-bound Value Set for subjectReference
     */
    subjectReferenceExtensibleValueSet() {
        return SubjectTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["type"]) {
            results.push(["type", 'Missing required element: DataRequirement.type']);
        }
        if (this["_type"]) {
            results.push(...this._type.doModelValidation());
        }
        if (this["_profile"]) {
            this._profile.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["subjectCodeableConcept"]) {
            results.push(...this.subjectCodeableConcept.doModelValidation());
        }
        if (this["subjectReference"]) {
            results.push(...this.subjectReference.doModelValidation());
        }
        if (this["_mustSupport"]) {
            this._mustSupport.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["codeFilter"]) {
            this.codeFilter.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["dateFilter"]) {
            this.dateFilter.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_limit"]) {
            results.push(...this._limit.doModelValidation());
        }
        if (this["sort"]) {
            this.sort.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=DataRequirement.js.map