// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.
 */
export class DataRequirementCodeFilter extends fhir.FhirElement {
    /**
     * Default constructor for DataRequirementCodeFilter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["code"]) {
            this.code = source.code.map((x) => new fhir.Coding(x));
        }
        if (source["path"]) {
            this.path = source.path;
        }
        if (source["_path"]) {
            this._path = new fhir.FhirElement(source._path);
        }
        if (source["searchParam"]) {
            this.searchParam = source.searchParam;
        }
        if (source["_searchParam"]) {
            this._searchParam = new fhir.FhirElement(source._searchParam);
        }
        if (source["valueSet"]) {
            this.valueSet = source.valueSet;
        }
        if (source["_valueSet"]) {
            this._valueSet = new fhir.FhirElement(source._valueSet);
        }
    }
    /**
     * Check if the current DataRequirementCodeFilter contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a DataRequirementCodeFilter from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new DataRequirementCodeFilter(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `DataRequirementCodeFilter is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.
 */
export class DataRequirementDateFilter extends fhir.FhirElement {
    /**
     * Default constructor for DataRequirementDateFilter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["path"]) {
            this.path = source.path;
        }
        if (source["_path"]) {
            this._path = new fhir.FhirElement(source._path);
        }
        if (source["searchParam"]) {
            this.searchParam = source.searchParam;
        }
        if (source["_searchParam"]) {
            this._searchParam = new fhir.FhirElement(source._searchParam);
        }
        if (source["valueDateTime"]) {
            this.valueDateTime = source.valueDateTime;
        }
        if (source["_valueDateTime"]) {
            this._valueDateTime = new fhir.FhirElement(source._valueDateTime);
        }
        if (source["valuePeriod"]) {
            this.valuePeriod = new fhir.Period(source.valuePeriod);
        }
        if (source["valueDuration"]) {
            this.valueDuration = new fhir.Duration(source.valueDuration);
        }
    }
    /**
     * Check if the current DataRequirementDateFilter contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a DataRequirementDateFilter from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new DataRequirementDateFilter(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `DataRequirementDateFilter is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * This element can be used in combination with the sort element to specify quota requirements such as "the most recent 5" or "the highest 5". When multiple sorts are specified, they are applied in the order they appear in the resource.
 */
export class DataRequirementSort extends fhir.FhirElement {
    /**
     * Default constructor for DataRequirementSort - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.direction = null;
        if (source["direction"]) {
            this.direction = source.direction;
        }
        if (this.direction === undefined) {
            this.direction = null;
        }
        if (source["_direction"]) {
            this._direction = new fhir.FhirElement(source._direction);
        }
        this.path = null;
        if (source["path"]) {
            this.path = source.path;
        }
        if (this.path === undefined) {
            this.path = null;
        }
        if (source["_path"]) {
            this._path = new fhir.FhirElement(source._path);
        }
    }
    /**
     * Check if the current DataRequirementSort contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["direction"] === undefined) {
            missingElements.push("direction");
        }
        if (this["path"] === undefined) {
            missingElements.push("path");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a DataRequirementSort from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new DataRequirementSort(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `DataRequirementSort is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
 */
export class DataRequirement extends fhir.FhirElement {
    /**
     * Default constructor for DataRequirement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["codeFilter"]) {
            this.codeFilter = source.codeFilter.map((x) => new fhir.DataRequirementCodeFilter(x));
        }
        if (source["dateFilter"]) {
            this.dateFilter = source.dateFilter.map((x) => new fhir.DataRequirementDateFilter(x));
        }
        if (source["limit"]) {
            this.limit = source.limit;
        }
        if (source["_limit"]) {
            this._limit = new fhir.FhirElement(source._limit);
        }
        if (source["mustSupport"]) {
            this.mustSupport = source.mustSupport.map((x) => (x));
        }
        if (source["_mustSupport"]) {
            this._mustSupport = source._mustSupport.map((x) => new fhir.FhirElement(x));
        }
        if (source["profile"]) {
            this.profile = source.profile.map((x) => (x));
        }
        if (source["_profile"]) {
            this._profile = source._profile.map((x) => new fhir.FhirElement(x));
        }
        if (source["sort"]) {
            this.sort = source.sort.map((x) => new fhir.DataRequirementSort(x));
        }
        if (source["subjectCodeableConcept"]) {
            this.subjectCodeableConcept = new fhir.CodeableConcept(source.subjectCodeableConcept);
        }
        if (source["subjectReference"]) {
            this.subjectReference = new fhir.Reference(source.subjectReference);
        }
        this.type = null;
        if (source["type"]) {
            this.type = source.type;
        }
        if (this.type === undefined) {
            this.type = null;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
    }
    /**
     * Check if the current DataRequirement contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a DataRequirement from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new DataRequirement(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `DataRequirement is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the DataRequirement.sort.direction field
 */
export var DataRequirementSortDirectionEnum;
(function (DataRequirementSortDirectionEnum) {
    DataRequirementSortDirectionEnum["ASCENDING"] = "ascending";
    DataRequirementSortDirectionEnum["DESCENDING"] = "descending";
})(DataRequirementSortDirectionEnum || (DataRequirementSortDirectionEnum = {}));
//# sourceMappingURL=DataRequirement.js.map