// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SubstanceNucleicAcid
import * as fhir from '../fhir.js';
/**
 * The linkages between sugar residues will also be captured.
 */
export class SubstanceNucleicAcidSubunitLinkage extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceNucleicAcidSubunitLinkage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['connectivity']) {
            this.connectivity = source.connectivity;
        }
        if (source['_connectivity']) {
            this._connectivity = new fhir.FhirElement(source._connectivity);
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['residueSite']) {
            this.residueSite = source.residueSite;
        }
        if (source['_residueSite']) {
            this._residueSite = new fhir.FhirElement(source._residueSite);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_connectivity"]) {
            results.push(...this._connectivity.doModelValidation());
        }
        if (this["identifier"]) {
            results.push(...this.identifier.doModelValidation());
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_residueSite"]) {
            results.push(...this._residueSite.doModelValidation());
        }
        return results;
    }
}
/**
 * 5.3.6.8.1 Sugar ID (Mandatory).
 */
export class SubstanceNucleicAcidSubunitSugar extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceNucleicAcidSubunitSugar - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['residueSite']) {
            this.residueSite = source.residueSite;
        }
        if (source['_residueSite']) {
            this._residueSite = new fhir.FhirElement(source._residueSite);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["identifier"]) {
            results.push(...this.identifier.doModelValidation());
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_residueSite"]) {
            results.push(...this._residueSite.doModelValidation());
        }
        return results;
    }
}
/**
 * Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times.
 */
export class SubstanceNucleicAcidSubunit extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceNucleicAcidSubunit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['subunit']) {
            this.subunit = source.subunit;
        }
        if (source['_subunit']) {
            this._subunit = new fhir.FhirElement(source._subunit);
        }
        if (source['sequence']) {
            this.sequence = source.sequence;
        }
        if (source['_sequence']) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source['length']) {
            this.length = source.length;
        }
        if (source['_length']) {
            this._length = new fhir.FhirElement(source._length);
        }
        if (source['sequenceAttachment']) {
            this.sequenceAttachment = new fhir.Attachment(source.sequenceAttachment);
        }
        if (source['fivePrime']) {
            this.fivePrime = new fhir.CodeableConcept(source.fivePrime);
        }
        if (source['threePrime']) {
            this.threePrime = new fhir.CodeableConcept(source.threePrime);
        }
        if (source['linkage']) {
            this.linkage = source.linkage.map((x) => new fhir.SubstanceNucleicAcidSubunitLinkage(x));
        }
        if (source['sugar']) {
            this.sugar = source.sugar.map((x) => new fhir.SubstanceNucleicAcidSubunitSugar(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_subunit"]) {
            results.push(...this._subunit.doModelValidation());
        }
        if (this["_sequence"]) {
            results.push(...this._sequence.doModelValidation());
        }
        if (this["_length"]) {
            results.push(...this._length.doModelValidation());
        }
        if (this["sequenceAttachment"]) {
            results.push(...this.sequenceAttachment.doModelValidation());
        }
        if (this["fivePrime"]) {
            results.push(...this.fivePrime.doModelValidation());
        }
        if (this["threePrime"]) {
            results.push(...this.threePrime.doModelValidation());
        }
        if (this["linkage"]) {
            this.linkage.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["sugar"]) {
            this.sugar.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction.
 */
export class SubstanceNucleicAcid extends fhir.DomainResource {
    /**
     * Default constructor for SubstanceNucleicAcid - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'SubstanceNucleicAcid';
        if (source['sequenceType']) {
            this.sequenceType = new fhir.CodeableConcept(source.sequenceType);
        }
        if (source['numberOfSubunits']) {
            this.numberOfSubunits = source.numberOfSubunits;
        }
        if (source['_numberOfSubunits']) {
            this._numberOfSubunits = new fhir.FhirElement(source._numberOfSubunits);
        }
        if (source['areaOfHybridisation']) {
            this.areaOfHybridisation = source.areaOfHybridisation;
        }
        if (source['_areaOfHybridisation']) {
            this._areaOfHybridisation = new fhir.FhirElement(source._areaOfHybridisation);
        }
        if (source['oligoNucleotideType']) {
            this.oligoNucleotideType = new fhir.CodeableConcept(source.oligoNucleotideType);
        }
        if (source['subunit']) {
            this.subunit = source.subunit.map((x) => new fhir.SubstanceNucleicAcidSubunit(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: SubstanceNucleicAcid.resourceType']);
        }
        if (this["sequenceType"]) {
            results.push(...this.sequenceType.doModelValidation());
        }
        if (this["_numberOfSubunits"]) {
            results.push(...this._numberOfSubunits.doModelValidation());
        }
        if (this["_areaOfHybridisation"]) {
            results.push(...this._areaOfHybridisation.doModelValidation());
        }
        if (this["oligoNucleotideType"]) {
            results.push(...this.oligoNucleotideType.doModelValidation());
        }
        if (this["subunit"]) {
            this.subunit.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=SubstanceNucleicAcid.js.map