// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SubstanceNucleicAcid
import * as fhir from '../fhir.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * The linkages between sugar residues will also be captured.
 */
export class SubstanceNucleicAcidSubunitLinkage extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceNucleicAcidSubunitLinkage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'SubstanceNucleicAcidSubunitLinkage';
        if (source['connectivity']) {
            this.connectivity = new fhir.FhirString({ value: source.connectivity });
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['residueSite']) {
            this.residueSite = new fhir.FhirString({ value: source.residueSite });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["connectivity"]) {
            outcome.issue.push(...this.connectivity.doModelValidation().issue);
        }
        if (this["identifier"]) {
            outcome.issue.push(...this.identifier.doModelValidation().issue);
        }
        if (this["name"]) {
            outcome.issue.push(...this.name.doModelValidation().issue);
        }
        if (this["residueSite"]) {
            outcome.issue.push(...this.residueSite.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * 5.3.6.8.1 Sugar ID (Mandatory).
 */
export class SubstanceNucleicAcidSubunitSugar extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceNucleicAcidSubunitSugar - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'SubstanceNucleicAcidSubunitSugar';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['residueSite']) {
            this.residueSite = new fhir.FhirString({ value: source.residueSite });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["identifier"]) {
            outcome.issue.push(...this.identifier.doModelValidation().issue);
        }
        if (this["name"]) {
            outcome.issue.push(...this.name.doModelValidation().issue);
        }
        if (this["residueSite"]) {
            outcome.issue.push(...this.residueSite.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times.
 */
export class SubstanceNucleicAcidSubunit extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceNucleicAcidSubunit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'SubstanceNucleicAcidSubunit';
        /**
         * The linkages between sugar residues will also be captured.
         */
        this.linkage = [];
        /**
         * 5.3.6.8.1 Sugar ID (Mandatory).
         */
        this.sugar = [];
        if (source['subunit']) {
            this.subunit = new fhir.FhirInteger({ value: source.subunit });
        }
        if (source['sequence']) {
            this.sequence = new fhir.FhirString({ value: source.sequence });
        }
        if (source['length']) {
            this.length = new fhir.FhirInteger({ value: source.length });
        }
        if (source['sequenceAttachment']) {
            this.sequenceAttachment = new fhir.Attachment(source.sequenceAttachment);
        }
        if (source['fivePrime']) {
            this.fivePrime = new fhir.CodeableConcept(source.fivePrime);
        }
        if (source['threePrime']) {
            this.threePrime = new fhir.CodeableConcept(source.threePrime);
        }
        if (source['linkage']) {
            this.linkage = source.linkage.map((x) => new fhir.SubstanceNucleicAcidSubunitLinkage(x));
        }
        if (source['sugar']) {
            this.sugar = source.sugar.map((x) => new fhir.SubstanceNucleicAcidSubunitSugar(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["subunit"]) {
            outcome.issue.push(...this.subunit.doModelValidation().issue);
        }
        if (this["sequence"]) {
            outcome.issue.push(...this.sequence.doModelValidation().issue);
        }
        if (this["length"]) {
            outcome.issue.push(...this.length.doModelValidation().issue);
        }
        if (this["sequenceAttachment"]) {
            outcome.issue.push(...this.sequenceAttachment.doModelValidation().issue);
        }
        if (this["fivePrime"]) {
            outcome.issue.push(...this.fivePrime.doModelValidation().issue);
        }
        if (this["threePrime"]) {
            outcome.issue.push(...this.threePrime.doModelValidation().issue);
        }
        if (this["linkage"]) {
            this.linkage.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["sugar"]) {
            this.sugar.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction.
 */
export class SubstanceNucleicAcid extends fhir.DomainResource {
    /**
     * Default constructor for SubstanceNucleicAcid - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'SubstanceNucleicAcid';
        /**
         * Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times.
         */
        this.subunit = [];
        this.resourceType = 'SubstanceNucleicAcid';
        if (source['sequenceType']) {
            this.sequenceType = new fhir.CodeableConcept(source.sequenceType);
        }
        if (source['numberOfSubunits']) {
            this.numberOfSubunits = new fhir.FhirInteger({ value: source.numberOfSubunits });
        }
        if (source['areaOfHybridisation']) {
            this.areaOfHybridisation = new fhir.FhirString({ value: source.areaOfHybridisation });
        }
        if (source['oligoNucleotideType']) {
            this.oligoNucleotideType = new fhir.CodeableConcept(source.oligoNucleotideType);
        }
        if (source['subunit']) {
            this.subunit = source.subunit.map((x) => new fhir.SubstanceNucleicAcidSubunit(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'SubstanceNucleicAcid' fhir: SubstanceNucleicAcid.resourceType:'SubstanceNucleicAcid'", }));
        }
        if (this["sequenceType"]) {
            outcome.issue.push(...this.sequenceType.doModelValidation().issue);
        }
        if (this["numberOfSubunits"]) {
            outcome.issue.push(...this.numberOfSubunits.doModelValidation().issue);
        }
        if (this["areaOfHybridisation"]) {
            outcome.issue.push(...this.areaOfHybridisation.doModelValidation().issue);
        }
        if (this["oligoNucleotideType"]) {
            outcome.issue.push(...this.oligoNucleotideType.doModelValidation().issue);
        }
        if (this["subunit"]) {
            this.subunit.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=SubstanceNucleicAcid.js.map