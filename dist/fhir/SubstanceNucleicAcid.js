// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * The linkages between sugar residues will also be captured.
 */
export class SubstanceNucleicAcidSubunitLinkage extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceNucleicAcidSubunitLinkage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["connectivity"]) {
            this.connectivity = source.connectivity;
        }
        if (source["_connectivity"]) {
            this._connectivity = new fhir.FhirElement(source._connectivity);
        }
        if (source["identifier"]) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["residueSite"]) {
            this.residueSite = source.residueSite;
        }
        if (source["_residueSite"]) {
            this._residueSite = new fhir.FhirElement(source._residueSite);
        }
    }
    /**
     * Check if the current SubstanceNucleicAcidSubunitLinkage contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SubstanceNucleicAcidSubunitLinkage from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new SubstanceNucleicAcidSubunitLinkage(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstanceNucleicAcidSubunitLinkage is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * 5.3.6.8.1 Sugar ID (Mandatory).
 */
export class SubstanceNucleicAcidSubunitSugar extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceNucleicAcidSubunitSugar - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["identifier"]) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["residueSite"]) {
            this.residueSite = source.residueSite;
        }
        if (source["_residueSite"]) {
            this._residueSite = new fhir.FhirElement(source._residueSite);
        }
    }
    /**
     * Check if the current SubstanceNucleicAcidSubunitSugar contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SubstanceNucleicAcidSubunitSugar from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new SubstanceNucleicAcidSubunitSugar(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstanceNucleicAcidSubunitSugar is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times.
 */
export class SubstanceNucleicAcidSubunit extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceNucleicAcidSubunit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["fivePrime"]) {
            this.fivePrime = new fhir.CodeableConcept(source.fivePrime);
        }
        if (source["length"]) {
            this.length = source.length;
        }
        if (source["_length"]) {
            this._length = new fhir.FhirElement(source._length);
        }
        if (source["linkage"]) {
            this.linkage = source.linkage.map((x) => new fhir.SubstanceNucleicAcidSubunitLinkage(x));
        }
        if (source["sequence"]) {
            this.sequence = source.sequence;
        }
        if (source["_sequence"]) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source["sequenceAttachment"]) {
            this.sequenceAttachment = new fhir.Attachment(source.sequenceAttachment);
        }
        if (source["subunit"]) {
            this.subunit = source.subunit;
        }
        if (source["_subunit"]) {
            this._subunit = new fhir.FhirElement(source._subunit);
        }
        if (source["sugar"]) {
            this.sugar = source.sugar.map((x) => new fhir.SubstanceNucleicAcidSubunitSugar(x));
        }
        if (source["threePrime"]) {
            this.threePrime = new fhir.CodeableConcept(source.threePrime);
        }
    }
    /**
     * Check if the current SubstanceNucleicAcidSubunit contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SubstanceNucleicAcidSubunit from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new SubstanceNucleicAcidSubunit(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstanceNucleicAcidSubunit is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction.
 */
export class SubstanceNucleicAcid extends fhir.DomainResource {
    /**
     * Default constructor for SubstanceNucleicAcid - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'SubstanceNucleicAcid';
        if (source["areaOfHybridisation"]) {
            this.areaOfHybridisation = source.areaOfHybridisation;
        }
        if (source["_areaOfHybridisation"]) {
            this._areaOfHybridisation = new fhir.FhirElement(source._areaOfHybridisation);
        }
        if (source["numberOfSubunits"]) {
            this.numberOfSubunits = source.numberOfSubunits;
        }
        if (source["_numberOfSubunits"]) {
            this._numberOfSubunits = new fhir.FhirElement(source._numberOfSubunits);
        }
        if (source["oligoNucleotideType"]) {
            this.oligoNucleotideType = new fhir.CodeableConcept(source.oligoNucleotideType);
        }
        if (source["sequenceType"]) {
            this.sequenceType = new fhir.CodeableConcept(source.sequenceType);
        }
        if (source["subunit"]) {
            this.subunit = source.subunit.map((x) => new fhir.SubstanceNucleicAcidSubunit(x));
        }
    }
    /**
     * Check if the current SubstanceNucleicAcid contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SubstanceNucleicAcid from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new SubstanceNucleicAcid(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubstanceNucleicAcid is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
//# sourceMappingURL=SubstanceNucleicAcid.js.map