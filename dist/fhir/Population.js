// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * A populatioof people with some set of grouping criteria.
 */
export class Population extends fhir.BackboneElement {
    /**
     * Default constructor for Population - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["ageRange"]) {
            this.ageRange = new fhir.Range(source.ageRange);
        }
        if (source["ageCodeableConcept"]) {
            this.ageCodeableConcept = new fhir.CodeableConcept(source.ageCodeableConcept);
        }
        if (source["gender"]) {
            this.gender = new fhir.CodeableConcept(source.gender);
        }
        if (source["physiologicalCondition"]) {
            this.physiologicalCondition = new fhir.CodeableConcept(source.physiologicalCondition);
        }
        if (source["race"]) {
            this.race = new fhir.CodeableConcept(source.race);
        }
    }
    /**
     * Check if the current Population contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Population from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new Population(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Population is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
//# sourceMappingURL=Population.js.map