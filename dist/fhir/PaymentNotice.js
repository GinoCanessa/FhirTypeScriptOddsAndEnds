// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: PaymentNotice
import * as fhir from '../fhir.js';
import { FmStatusValueSet, } from '../fhirValueSets/FmStatusValueSet.js';
import { PaymentStatusValueSet, } from '../fhirValueSets/PaymentStatusValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * This resource provides the status of the payment for goods and services rendered, and the request and response resource references.
 */
export class PaymentNotice extends fhir.DomainResource {
    /**
     * Default constructor for PaymentNotice - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'PaymentNotice';
        /**
         * A unique identifier assigned to this payment notice.
         */
        this.identifier = [];
        this.resourceType = 'PaymentNotice';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['request']) {
            this.request = new fhir.Reference(source.request);
        }
        if (source['response']) {
            this.response = new fhir.Reference(source.response);
        }
        if (source['created']) {
            this.created = new fhir.FhirDateTime({ value: source.created });
        }
        else {
            this.created = null;
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider);
        }
        if (source['payment']) {
            this.payment = new fhir.Reference(source.payment);
        }
        else {
            this.payment = null;
        }
        if (source['paymentDate']) {
            this.paymentDate = new fhir.FhirDate({ value: source.paymentDate });
        }
        if (source['payee']) {
            this.payee = new fhir.Reference(source.payee);
        }
        if (source['recipient']) {
            this.recipient = new fhir.Reference(source.recipient);
        }
        else {
            this.recipient = null;
        }
        if (source['amount']) {
            this.amount = new fhir.Money(source.amount);
        }
        else {
            this.amount = null;
        }
        if (source['paymentStatus']) {
            this.paymentStatus = new fhir.CodeableConcept(source.paymentStatus);
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return FmStatusValueSet;
    }
    /**
     * Example-bound Value Set for paymentStatus
     */
    static paymentStatusExampleValueSet() {
        return PaymentStatusValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'PaymentNotice' fhir: PaymentNotice.resourceType:'PaymentNotice'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:FmStatusValueSetEnum fhir: PaymentNotice.status:code", }));
        }
        if (this["request"]) {
            outcome.issue.push(...this.request.doModelValidation().issue);
        }
        if (this["response"]) {
            outcome.issue.push(...this.response.doModelValidation().issue);
        }
        if (!this['created']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property created:fhir.FhirDateTime fhir: PaymentNotice.created:dateTime", }));
        }
        if (this["created"]) {
            outcome.issue.push(...this.created.doModelValidation().issue);
        }
        if (this["provider"]) {
            outcome.issue.push(...this.provider.doModelValidation().issue);
        }
        if (!this['payment']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property payment:fhir.Reference fhir: PaymentNotice.payment:Reference", }));
        }
        if (this["payment"]) {
            outcome.issue.push(...this.payment.doModelValidation().issue);
        }
        if (this["paymentDate"]) {
            outcome.issue.push(...this.paymentDate.doModelValidation().issue);
        }
        if (this["payee"]) {
            outcome.issue.push(...this.payee.doModelValidation().issue);
        }
        if (!this['recipient']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property recipient:fhir.Reference fhir: PaymentNotice.recipient:Reference", }));
        }
        if (this["recipient"]) {
            outcome.issue.push(...this.recipient.doModelValidation().issue);
        }
        if (!this['amount']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property amount:fhir.Money fhir: PaymentNotice.amount:Money", }));
        }
        if (this["amount"]) {
            outcome.issue.push(...this.amount.doModelValidation().issue);
        }
        if (this["paymentStatus"]) {
            outcome.issue.push(...this.paymentStatus.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=PaymentNotice.js.map