// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * This resource provides the status of the payment for goods and services rendered, and the request and response resource references.
 */
export class PaymentNotice extends fhir.DomainResource {
    /**
     * Default constructor for PaymentNotice - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'PaymentNotice';
        this.amount = null;
        if (source["amount"]) {
            this.amount = new fhir.Money(source.amount);
        }
        if (this.amount === undefined) {
            this.amount = null;
        }
        this.created = null;
        if (source["created"]) {
            this.created = source.created;
        }
        if (this.created === undefined) {
            this.created = null;
        }
        if (source["_created"]) {
            this._created = new fhir.FhirElement(source._created);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["payee"]) {
            this.payee = new fhir.Reference(source.payee);
        }
        this.payment = null;
        if (source["payment"]) {
            this.payment = new fhir.Reference(source.payment);
        }
        if (this.payment === undefined) {
            this.payment = null;
        }
        if (source["paymentDate"]) {
            this.paymentDate = source.paymentDate;
        }
        if (source["_paymentDate"]) {
            this._paymentDate = new fhir.FhirElement(source._paymentDate);
        }
        if (source["paymentStatus"]) {
            this.paymentStatus = new fhir.CodeableConcept(source.paymentStatus);
        }
        if (source["provider"]) {
            this.provider = new fhir.Reference(source.provider);
        }
        this.recipient = null;
        if (source["recipient"]) {
            this.recipient = new fhir.Reference(source.recipient);
        }
        if (this.recipient === undefined) {
            this.recipient = null;
        }
        if (source["request"]) {
            this.request = new fhir.Reference(source.request);
        }
        if (source["response"]) {
            this.response = new fhir.Reference(source.response);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
    }
    /**
     * Check if the current PaymentNotice contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["amount"] === undefined) {
            missingElements.push("amount");
        }
        if (this["created"] === undefined) {
            missingElements.push("created");
        }
        if (this["payment"] === undefined) {
            missingElements.push("payment");
        }
        if (this["recipient"] === undefined) {
            missingElements.push("recipient");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a PaymentNotice from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new PaymentNotice(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `PaymentNotice is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the PaymentNotice.status field
 */
export var PaymentNoticeStatusEnum;
(function (PaymentNoticeStatusEnum) {
    PaymentNoticeStatusEnum["ACTIVE"] = "active";
    PaymentNoticeStatusEnum["CANCELLED"] = "cancelled";
    PaymentNoticeStatusEnum["DRAFT"] = "draft";
    PaymentNoticeStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(PaymentNoticeStatusEnum || (PaymentNoticeStatusEnum = {}));
//# sourceMappingURL=PaymentNotice.js.map