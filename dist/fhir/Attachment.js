// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Attachment
import * as fhir from '../fhir.js';
import { LanguagesValueSet, } from '../fhirValueSets/LanguagesValueSet.js';
/**
 * For referring to data content defined in other formats.
 */
export class Attachment extends fhir.FhirElement {
    /**
     * Default constructor for Attachment - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'Attachment';
        if (source['contentType']) {
            this.contentType = new fhir.FhirCode({ value: source.contentType });
        }
        if (source['language']) {
            this.language = new fhir.FhirCode({ value: source.language });
        }
        if (source['data']) {
            this.data = new fhir.FhirBase64Binary({ value: source.data });
        }
        if (source['url']) {
            this.url = new fhir.FhirUrl({ value: source.url });
        }
        if (source['size']) {
            this.size = new fhir.FhirUnsignedInt({ value: source.size });
        }
        if (source['hash']) {
            this.hash = new fhir.FhirBase64Binary({ value: source.hash });
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['creation']) {
            this.creation = new fhir.FhirDateTime({ value: source.creation });
        }
    }
    /**
     * Preferred-bound Value Set for language
     */
    static languagePreferredValueSet() {
        return LanguagesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["contentType"]) {
            outcome.issue.push(...this.contentType.doModelValidation().issue);
        }
        if (this["language"]) {
            outcome.issue.push(...this.language.doModelValidation().issue);
        }
        if (this["data"]) {
            outcome.issue.push(...this.data.doModelValidation().issue);
        }
        if (this["url"]) {
            outcome.issue.push(...this.url.doModelValidation().issue);
        }
        if (this["size"]) {
            outcome.issue.push(...this.size.doModelValidation().issue);
        }
        if (this["hash"]) {
            outcome.issue.push(...this.hash.doModelValidation().issue);
        }
        if (this["title"]) {
            outcome.issue.push(...this.title.doModelValidation().issue);
        }
        if (this["creation"]) {
            outcome.issue.push(...this.creation.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=Attachment.js.map