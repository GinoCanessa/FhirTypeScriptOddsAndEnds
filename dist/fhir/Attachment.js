var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Restricted to: Patient|Encounter|Observation
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * For referring to data content defined in other formats.
 */
var Attachment = /** @class */ (function (_super) {
    __extends(Attachment, _super);
    /**
     * Default constructor for Attachment - initializes required elements to null.
     */
    function Attachment() {
        return _super.call(this) || this;
    }
    /**
     * Factory function to create a Attachment from an object that MAY NOT contain all required elements.
     */
    Attachment.FactoryCreate = function (source) {
        var dest = _super.FactoryCreate.call(this, source);
        if (source["contentType"] !== undefined) {
            dest.contentType = source.contentType;
        }
        if (source["_contentType"] !== undefined) {
            dest._contentType = fhir.FhirElement.FactoryCreate(source._contentType);
        }
        if (source["creation"] !== undefined) {
            dest.creation = source.creation;
        }
        if (source["_creation"] !== undefined) {
            dest._creation = fhir.FhirElement.FactoryCreate(source._creation);
        }
        if (source["data"] !== undefined) {
            dest.data = source.data;
        }
        if (source["_data"] !== undefined) {
            dest._data = fhir.FhirElement.FactoryCreate(source._data);
        }
        if (source["hash"] !== undefined) {
            dest.hash = source.hash;
        }
        if (source["_hash"] !== undefined) {
            dest._hash = fhir.FhirElement.FactoryCreate(source._hash);
        }
        if (source["language"] !== undefined) {
            dest.language = source.language;
        }
        if (source["_language"] !== undefined) {
            dest._language = fhir.FhirElement.FactoryCreate(source._language);
        }
        if (source["size"] !== undefined) {
            dest.size = source.size;
        }
        if (source["_size"] !== undefined) {
            dest._size = fhir.FhirElement.FactoryCreate(source._size);
        }
        if (source["title"] !== undefined) {
            dest.title = source.title;
        }
        if (source["_title"] !== undefined) {
            dest._title = fhir.FhirElement.FactoryCreate(source._title);
        }
        if (source["url"] !== undefined) {
            dest.url = source.url;
        }
        if (source["_url"] !== undefined) {
            dest._url = fhir.FhirElement.FactoryCreate(source._url);
        }
        return dest;
    };
    /**
     * Check if the current Attachment contains all required elements.
     */
    Attachment.prototype.checkRequiredElements = function () {
        var missingElements = [];
        var parentMissing = _super.prototype.checkRequiredElements.call(this);
        missingElements.push.apply(missingElements, parentMissing);
        return missingElements;
    };
    /**
     * Factory function to create a Attachment from an object that MUST contain all required elements.
     */
    Attachment.FactoryCreateStrict = function (source) {
        var dest = this.FactoryCreate(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw "Attachment is missing elements: ".concat(missingElements.join(", "));
        }
        return dest;
    };
    return Attachment;
}(fhir.FhirElement));
export { Attachment };
//# sourceMappingURL=Attachment.js.map