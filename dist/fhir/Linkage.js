// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
 */
export class LinkageItem extends fhir.BackboneElement {
    /**
     * Default constructor for LinkageItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resource = null;
        if (source["resource"]) {
            this.resource = new fhir.Reference(source.resource);
        }
        if (this.resource === undefined) {
            this.resource = null;
        }
        this.type = null;
        if (source["type"]) {
            this.type = source.type;
        }
        if (this.type === undefined) {
            this.type = null;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
    }
    /**
     * Check if the current LinkageItem contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["resource"] === undefined) {
            missingElements.push("resource");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a LinkageItem from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new LinkageItem(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `LinkageItem is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Identifies two or more records (resource instances) that refer to the same real-world "occurrence".
 */
export class Linkage extends fhir.DomainResource {
    /**
     * Default constructor for Linkage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Linkage';
        if (source["active"]) {
            this.active = source.active;
        }
        if (source["_active"]) {
            this._active = new fhir.FhirElement(source._active);
        }
        if (source["author"]) {
            this.author = new fhir.Reference(source.author);
        }
        this.item = null;
        if (source["item"]) {
            this.item = source.item.map((x) => new fhir.LinkageItem(x));
        }
        if (this.item === undefined) {
            this.item = null;
        }
    }
    /**
     * Check if the current Linkage contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if ((!this["item"]) || (this["item"].length === 0)) {
            missingElements.push("item");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Linkage from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new Linkage(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Linkage is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the Linkage.item.type field
 */
export var LinkageItemTypeEnum;
(function (LinkageItemTypeEnum) {
    LinkageItemTypeEnum["SOURCE"] = "source";
    LinkageItemTypeEnum["ALTERNATE"] = "alternate";
    LinkageItemTypeEnum["HISTORICAL"] = "historical";
})(LinkageItemTypeEnum || (LinkageItemTypeEnum = {}));
//# sourceMappingURL=Linkage.js.map