// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: AllergyIntolerance
import * as fhir from '../fhir.js';
import { SubstanceCodeValueSet, } from '../fhirValueSets/SubstanceCodeValueSet.js';
import { ClinicalFindingsValueSet, } from '../fhirValueSets/ClinicalFindingsValueSet.js';
import { ReactionEventSeverityValueSet, } from '../fhirValueSets/ReactionEventSeverityValueSet.js';
import { RouteCodesValueSet, } from '../fhirValueSets/RouteCodesValueSet.js';
import { AllergyintoleranceClinicalValueSet, } from '../fhirValueSets/AllergyintoleranceClinicalValueSet.js';
import { AllergyintoleranceVerificationValueSet, } from '../fhirValueSets/AllergyintoleranceVerificationValueSet.js';
import { AllergyIntoleranceTypeValueSet, } from '../fhirValueSets/AllergyIntoleranceTypeValueSet.js';
import { AllergyIntoleranceCategoryValueSet, } from '../fhirValueSets/AllergyIntoleranceCategoryValueSet.js';
import { AllergyIntoleranceCriticalityValueSet, } from '../fhirValueSets/AllergyIntoleranceCriticalityValueSet.js';
import { AllergyintoleranceCodeValueSet, } from '../fhirValueSets/AllergyintoleranceCodeValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Details about each adverse reaction event linked to exposure to the identified substance.
 */
export class AllergyIntoleranceReaction extends fhir.BackboneElement {
    /**
     * Default constructor for AllergyIntoleranceReaction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'AllergyIntoleranceReaction';
        /**
         * Manifestation can be expressed as a single word, phrase or brief description. For example: nausea, rash or no reaction. It is preferable that manifestation should be coded with a terminology, where possible. The values entered here may be used to display on an application screen as part of a list of adverse reactions, as recommended in the UK NHS CUI guidelines.  Terminologies commonly used include, but are not limited to, SNOMED CT or ICD10.
         */
        this.manifestation = [];
        /**
         * Use this field to record information indirectly related to a particular event and not captured in the description. For example: Clinical records are no longer available, recorded based on information provided to the patient by her mother and her mother is deceased.
         */
        this.note = [];
        if (source['substance']) {
            this.substance = new fhir.CodeableConcept(source.substance);
        }
        if (source['manifestation']) {
            this.manifestation = source.manifestation.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.manifestation = null;
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['onset']) {
            this.onset = new fhir.FhirDateTime({ value: source.onset });
        }
        if (source['severity']) {
            this.severity = source.severity;
        }
        if (source['exposureRoute']) {
            this.exposureRoute = new fhir.CodeableConcept(source.exposureRoute);
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
    }
    /**
     * Example-bound Value Set for substance
     */
    static substanceExampleValueSet() {
        return SubstanceCodeValueSet;
    }
    /**
     * Example-bound Value Set for manifestation
     */
    static manifestationExampleValueSet() {
        return ClinicalFindingsValueSet;
    }
    /**
     * Required-bound Value Set for severity
     */
    static severityRequiredValueSet() {
        return ReactionEventSeverityValueSet;
    }
    /**
     * Example-bound Value Set for exposureRoute
     */
    static exposureRouteExampleValueSet() {
        return RouteCodesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["substance"]) {
            outcome.issue.push(...this.substance.doModelValidation().issue);
        }
        if (!this['manifestation']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property manifestation:fhir.CodeableConcept[] fhir: AllergyIntolerance.reaction.manifestation:CodeableConcept", }));
        }
        else if (!Array.isArray(this.manifestation)) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue, diagnostics: "Found scalar in array property manifestation:fhir.CodeableConcept[] fhir: AllergyIntolerance.reaction.manifestation:CodeableConcept", }));
        }
        else if (this.manifestation.length === 0) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property manifestation:fhir.CodeableConcept[] fhir: AllergyIntolerance.reaction.manifestation:CodeableConcept", }));
        }
        if (this["manifestation"]) {
            this.manifestation.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["description"]) {
            outcome.issue.push(...this.description.doModelValidation().issue);
        }
        if (this["onset"]) {
            outcome.issue.push(...this.onset.doModelValidation().issue);
        }
        if (this["exposureRoute"]) {
            outcome.issue.push(...this.exposureRoute.doModelValidation().issue);
        }
        if (this["note"]) {
            this.note.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
 */
export class AllergyIntolerance extends fhir.DomainResource {
    /**
     * Default constructor for AllergyIntolerance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'AllergyIntolerance';
        /**
         * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
         */
        this.identifier = [];
        /**
         * This data element has been included because it is currently being captured in some clinical systems. This data can be derived from the substance where coding systems are used, and is effectively redundant in that situation.  When searching on category, consider the implications of AllergyIntolerance resources without a category.  For example, when searching on category = medication, medication allergies that don't have a category valued will not be returned.  Refer to [search](search.html) for more information on how to search category with a :missing modifier to get allergies that don't have a category.  Additionally, category should be used with caution because category can be subjective based on the sender.
         */
        this.category = [];
        this.__onsetIsChoice = true;
        /**
         * For example: including reason for flagging a seriousness of 'High Risk'; and instructions related to future exposure or administration of the substance, such as administration within an Intensive Care Unit or under corticosteroid cover. The notes should be related to an allergy or intolerance as a condition in general and not related to any particular episode of it. For episode notes and descriptions, use AllergyIntolerance.event.description and  AllergyIntolerance.event.notes.
         */
        this.note = [];
        /**
         * Details about each adverse reaction event linked to exposure to the identified substance.
         */
        this.reaction = [];
        this.resourceType = 'AllergyIntolerance';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['clinicalStatus']) {
            this.clinicalStatus = new fhir.CodeableConcept(source.clinicalStatus);
        }
        if (source['verificationStatus']) {
            this.verificationStatus = new fhir.CodeableConcept(source.verificationStatus);
        }
        if (source['type']) {
            this.type = source.type;
        }
        if (source['category']) {
            this.category = source.category.map((x) => x);
        }
        if (source['criticality']) {
            this.criticality = source.criticality;
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['onset']) {
            this.onset = source.onset;
        }
        else if (source['onsetDateTime']) {
            this.onset = new fhir.FhirDateTime({ value: source.onsetDateTime });
        }
        else if (source['onsetAge']) {
            this.onset = new fhir.Age(source.onsetAge);
        }
        else if (source['onsetPeriod']) {
            this.onset = new fhir.Period(source.onsetPeriod);
        }
        else if (source['onsetRange']) {
            this.onset = new fhir.Range(source.onsetRange);
        }
        else if (source['onsetString']) {
            this.onset = new fhir.FhirString({ value: source.onsetString });
        }
        if (source['recordedDate']) {
            this.recordedDate = new fhir.FhirDateTime({ value: source.recordedDate });
        }
        if (source['recorder']) {
            this.recorder = new fhir.Reference(source.recorder);
        }
        if (source['asserter']) {
            this.asserter = new fhir.Reference(source.asserter);
        }
        if (source['lastOccurrence']) {
            this.lastOccurrence = new fhir.FhirDateTime({ value: source.lastOccurrence });
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['reaction']) {
            this.reaction = source.reaction.map((x) => new fhir.AllergyIntoleranceReaction(x));
        }
    }
    /**
     * Required-bound Value Set for clinicalStatus
     */
    static clinicalStatusRequiredValueSet() {
        return AllergyintoleranceClinicalValueSet;
    }
    /**
     * Required-bound Value Set for verificationStatus
     */
    static verificationStatusRequiredValueSet() {
        return AllergyintoleranceVerificationValueSet;
    }
    /**
     * Required-bound Value Set for type
     */
    static typeRequiredValueSet() {
        return AllergyIntoleranceTypeValueSet;
    }
    /**
     * Required-bound Value Set for category
     */
    static categoryRequiredValueSet() {
        return AllergyIntoleranceCategoryValueSet;
    }
    /**
     * Required-bound Value Set for criticality
     */
    static criticalityRequiredValueSet() {
        return AllergyIntoleranceCriticalityValueSet;
    }
    /**
     * Example-bound Value Set for code
     */
    static codeExampleValueSet() {
        return AllergyintoleranceCodeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'AllergyIntolerance' fhir: AllergyIntolerance.resourceType:'AllergyIntolerance'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["clinicalStatus"]) {
            outcome.issue.push(...this.clinicalStatus.doModelValidation().issue);
        }
        if (this["verificationStatus"]) {
            outcome.issue.push(...this.verificationStatus.doModelValidation().issue);
        }
        if (this["code"]) {
            outcome.issue.push(...this.code.doModelValidation().issue);
        }
        if (!this['patient']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property patient:fhir.Reference fhir: AllergyIntolerance.patient:Reference", }));
        }
        if (this["patient"]) {
            outcome.issue.push(...this.patient.doModelValidation().issue);
        }
        if (this["encounter"]) {
            outcome.issue.push(...this.encounter.doModelValidation().issue);
        }
        if (this["recordedDate"]) {
            outcome.issue.push(...this.recordedDate.doModelValidation().issue);
        }
        if (this["recorder"]) {
            outcome.issue.push(...this.recorder.doModelValidation().issue);
        }
        if (this["asserter"]) {
            outcome.issue.push(...this.asserter.doModelValidation().issue);
        }
        if (this["lastOccurrence"]) {
            outcome.issue.push(...this.lastOccurrence.doModelValidation().issue);
        }
        if (this["note"]) {
            this.note.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["reaction"]) {
            this.reaction.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=AllergyIntolerance.js.map