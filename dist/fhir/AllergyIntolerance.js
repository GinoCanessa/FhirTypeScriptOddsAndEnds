// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Details about each adverse reaction event linked to exposure to the identified substance.
 */
export class AllergyIntoleranceReaction extends fhir.BackboneElement {
    /**
     * Default constructor for AllergyIntoleranceReaction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["exposureRoute"]) {
            this.exposureRoute = new fhir.CodeableConcept(source.exposureRoute);
        }
        this.manifestation = null;
        if (source["manifestation"]) {
            this.manifestation = source.manifestation.map((x) => new fhir.CodeableConcept(x));
        }
        if (this.manifestation === undefined) {
            this.manifestation = null;
        }
        if (source["note"]) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source["onset"]) {
            this.onset = source.onset;
        }
        if (source["_onset"]) {
            this._onset = new fhir.FhirElement(source._onset);
        }
        if (source["severity"]) {
            this.severity = source.severity;
        }
        if (source["_severity"]) {
            this._severity = new fhir.FhirElement(source._severity);
        }
        if (source["substance"]) {
            this.substance = new fhir.CodeableConcept(source.substance);
        }
    }
    /**
     * Check if the current AllergyIntoleranceReaction contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if ((!this["manifestation"]) || (this["manifestation"].length === 0)) {
            missingElements.push("manifestation");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a AllergyIntoleranceReaction from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new AllergyIntoleranceReaction(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `AllergyIntoleranceReaction is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
 */
export class AllergyIntolerance extends fhir.DomainResource {
    /**
     * Default constructor for AllergyIntolerance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'AllergyIntolerance';
        if (source["asserter"]) {
            this.asserter = new fhir.Reference(source.asserter);
        }
        if (source["category"]) {
            this.category = source.category.map((x) => (x));
        }
        if (source["_category"]) {
            this._category = source._category.map((x) => new fhir.FhirElement(x));
        }
        if (source["clinicalStatus"]) {
            this.clinicalStatus = new fhir.CodeableConcept(source.clinicalStatus);
        }
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source["criticality"]) {
            this.criticality = source.criticality;
        }
        if (source["_criticality"]) {
            this._criticality = new fhir.FhirElement(source._criticality);
        }
        if (source["encounter"]) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["lastOccurrence"]) {
            this.lastOccurrence = source.lastOccurrence;
        }
        if (source["_lastOccurrence"]) {
            this._lastOccurrence = new fhir.FhirElement(source._lastOccurrence);
        }
        if (source["note"]) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source["onsetDateTime"]) {
            this.onsetDateTime = source.onsetDateTime;
        }
        if (source["_onsetDateTime"]) {
            this._onsetDateTime = new fhir.FhirElement(source._onsetDateTime);
        }
        if (source["onsetAge"]) {
            this.onsetAge = new fhir.Age(source.onsetAge);
        }
        if (source["onsetPeriod"]) {
            this.onsetPeriod = new fhir.Period(source.onsetPeriod);
        }
        if (source["onsetRange"]) {
            this.onsetRange = new fhir.Range(source.onsetRange);
        }
        if (source["onsetString"]) {
            this.onsetString = source.onsetString;
        }
        if (source["_onsetString"]) {
            this._onsetString = new fhir.FhirElement(source._onsetString);
        }
        this.patient = null;
        if (source["patient"]) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (this.patient === undefined) {
            this.patient = null;
        }
        if (source["reaction"]) {
            this.reaction = source.reaction.map((x) => new fhir.AllergyIntoleranceReaction(x));
        }
        if (source["recordedDate"]) {
            this.recordedDate = source.recordedDate;
        }
        if (source["_recordedDate"]) {
            this._recordedDate = new fhir.FhirElement(source._recordedDate);
        }
        if (source["recorder"]) {
            this.recorder = new fhir.Reference(source.recorder);
        }
        if (source["type"]) {
            this.type = source.type;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source["verificationStatus"]) {
            this.verificationStatus = new fhir.CodeableConcept(source.verificationStatus);
        }
    }
    /**
     * Check if the current AllergyIntolerance contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["patient"] === undefined) {
            missingElements.push("patient");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a AllergyIntolerance from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new AllergyIntolerance(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `AllergyIntolerance is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the AllergyIntolerance.reaction.severity field
 */
export var AllergyIntoleranceReactionSeverityEnum;
(function (AllergyIntoleranceReactionSeverityEnum) {
    AllergyIntoleranceReactionSeverityEnum["MILD"] = "mild";
    AllergyIntoleranceReactionSeverityEnum["MODERATE"] = "moderate";
    AllergyIntoleranceReactionSeverityEnum["SEVERE"] = "severe";
})(AllergyIntoleranceReactionSeverityEnum || (AllergyIntoleranceReactionSeverityEnum = {}));
/**
 * Code Values for the AllergyIntolerance.category field
 */
export var AllergyIntoleranceCategoryEnum;
(function (AllergyIntoleranceCategoryEnum) {
    AllergyIntoleranceCategoryEnum["FOOD"] = "food";
    AllergyIntoleranceCategoryEnum["MEDICATION"] = "medication";
    AllergyIntoleranceCategoryEnum["ENVIRONMENT"] = "environment";
    AllergyIntoleranceCategoryEnum["BIOLOGIC"] = "biologic";
})(AllergyIntoleranceCategoryEnum || (AllergyIntoleranceCategoryEnum = {}));
/**
 * Code Values for the AllergyIntolerance.criticality field
 */
export var AllergyIntoleranceCriticalityEnum;
(function (AllergyIntoleranceCriticalityEnum) {
    AllergyIntoleranceCriticalityEnum["LOW"] = "low";
    AllergyIntoleranceCriticalityEnum["HIGH"] = "high";
    AllergyIntoleranceCriticalityEnum["UNABLE_TO_ASSESS"] = "unable-to-assess";
})(AllergyIntoleranceCriticalityEnum || (AllergyIntoleranceCriticalityEnum = {}));
/**
 * Code Values for the AllergyIntolerance.type field
 */
export var AllergyIntoleranceTypeEnum;
(function (AllergyIntoleranceTypeEnum) {
    AllergyIntoleranceTypeEnum["ALLERGY"] = "allergy";
    AllergyIntoleranceTypeEnum["INTOLERANCE"] = "intolerance";
})(AllergyIntoleranceTypeEnum || (AllergyIntoleranceTypeEnum = {}));
//# sourceMappingURL=AllergyIntolerance.js.map