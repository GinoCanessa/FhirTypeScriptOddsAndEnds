// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Immunization
import * as fhir from '../fhir.js';
import { ImmunizationFunctionValueSet, } from '../fhirValueSets/ImmunizationFunctionValueSet.js';
import { ImmunizationTargetDiseaseValueSet, } from '../fhirValueSets/ImmunizationTargetDiseaseValueSet.js';
import { ImmunizationStatusValueSet, } from '../fhirValueSets/ImmunizationStatusValueSet.js';
import { ImmunizationStatusReasonValueSet, } from '../fhirValueSets/ImmunizationStatusReasonValueSet.js';
import { VaccineCodeValueSet, } from '../fhirValueSets/VaccineCodeValueSet.js';
import { ImmunizationOriginValueSet, } from '../fhirValueSets/ImmunizationOriginValueSet.js';
import { ImmunizationSiteValueSet, } from '../fhirValueSets/ImmunizationSiteValueSet.js';
import { ImmunizationRouteValueSet, } from '../fhirValueSets/ImmunizationRouteValueSet.js';
import { ImmunizationReasonValueSet, } from '../fhirValueSets/ImmunizationReasonValueSet.js';
import { ImmunizationSubpotentReasonValueSet, } from '../fhirValueSets/ImmunizationSubpotentReasonValueSet.js';
import { ImmunizationProgramEligibilityValueSet, } from '../fhirValueSets/ImmunizationProgramEligibilityValueSet.js';
import { ImmunizationFundingSourceValueSet, } from '../fhirValueSets/ImmunizationFundingSourceValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Indicates who performed the immunization event.
 */
export class ImmunizationPerformer extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationPerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ImmunizationPerformer';
        if (source['function']) {
            this.function = new fhir.CodeableConcept(source.function);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        else {
            this.actor = null;
        }
    }
    /**
     * Extensible-bound Value Set for function
     */
    static functionExtensibleValueSet() {
        return ImmunizationFunctionValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["function"]) {
            outcome.issue.push(...this.function.doModelValidation().issue);
        }
        if (!this['actor']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property actor:fhir.Reference fhir: Immunization.performer.actor:Reference", }));
        }
        if (this["actor"]) {
            outcome.issue.push(...this.actor.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Educational material presented to the patient (or guardian) at the time of vaccine administration.
 */
export class ImmunizationEducation extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationEducation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ImmunizationEducation';
        if (source['documentType']) {
            this.documentType = new fhir.FhirString({ value: source.documentType });
        }
        if (source['reference']) {
            this.reference = new fhir.FhirUri({ value: source.reference });
        }
        if (source['publicationDate']) {
            this.publicationDate = new fhir.FhirDateTime({ value: source.publicationDate });
        }
        if (source['presentationDate']) {
            this.presentationDate = new fhir.FhirDateTime({ value: source.presentationDate });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["documentType"]) {
            outcome.issue.push(...this.documentType.doModelValidation().issue);
        }
        if (this["reference"]) {
            outcome.issue.push(...this.reference.doModelValidation().issue);
        }
        if (this["publicationDate"]) {
            outcome.issue.push(...this.publicationDate.doModelValidation().issue);
        }
        if (this["presentationDate"]) {
            outcome.issue.push(...this.presentationDate.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
 */
export class ImmunizationReaction extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationReaction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ImmunizationReaction';
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['detail']) {
            this.detail = new fhir.Reference(source.detail);
        }
        if (source['reported']) {
            this.reported = new fhir.FhirBoolean({ value: source.reported });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["date"]) {
            outcome.issue.push(...this.date.doModelValidation().issue);
        }
        if (this["detail"]) {
            outcome.issue.push(...this.detail.doModelValidation().issue);
        }
        if (this["reported"]) {
            outcome.issue.push(...this.reported.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * The protocol (set of recommendations) being followed by the provider who administered the dose.
 */
export class ImmunizationProtocolApplied extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationProtocolApplied - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ImmunizationProtocolApplied';
        /**
         * The vaccine preventable disease the dose is being administered against.
         */
        this.targetDisease = [];
        this.__doseNumberIsChoice = true;
        this.__seriesDosesIsChoice = true;
        if (source['series']) {
            this.series = new fhir.FhirString({ value: source.series });
        }
        if (source['authority']) {
            this.authority = new fhir.Reference(source.authority);
        }
        if (source['targetDisease']) {
            this.targetDisease = source.targetDisease.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['doseNumber']) {
            this.doseNumber = source.doseNumber;
        }
        else if (source['doseNumberPositiveInt']) {
            this.doseNumber = new fhir.FhirPositiveInt({ value: source.doseNumberPositiveInt });
        }
        else if (source['doseNumberString']) {
            this.doseNumber = new fhir.FhirString({ value: source.doseNumberString });
        }
        else {
            this.doseNumber = null;
        }
        if (source['seriesDoses']) {
            this.seriesDoses = source.seriesDoses;
        }
        else if (source['seriesDosesPositiveInt']) {
            this.seriesDoses = new fhir.FhirPositiveInt({ value: source.seriesDosesPositiveInt });
        }
        else if (source['seriesDosesString']) {
            this.seriesDoses = new fhir.FhirString({ value: source.seriesDosesString });
        }
    }
    /**
     * Example-bound Value Set for targetDisease
     */
    static targetDiseaseExampleValueSet() {
        return ImmunizationTargetDiseaseValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["series"]) {
            outcome.issue.push(...this.series.doModelValidation().issue);
        }
        if (this["authority"]) {
            outcome.issue.push(...this.authority.doModelValidation().issue);
        }
        if (this["targetDisease"]) {
            this.targetDisease.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['doseNumber']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property doseNumber: fhir: Immunization.protocolApplied.doseNumber[x]:", }));
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
 */
export class Immunization extends fhir.DomainResource {
    /**
     * Default constructor for Immunization - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'Immunization';
        /**
         * A unique identifier assigned to this immunization record.
         */
        this.identifier = [];
        this.__occurrenceIsChoice = true;
        /**
         * Indicates who performed the immunization event.
         */
        this.performer = [];
        /**
         * Extra information about the immunization that is not conveyed by the other attributes.
         */
        this.note = [];
        /**
         * Reasons why the vaccine was administered.
         */
        this.reasonCode = [];
        /**
         * Condition, Observation or DiagnosticReport that supports why the immunization was administered.
         */
        this.reasonReference = [];
        /**
         * Reason why a dose is considered to be subpotent.
         */
        this.subpotentReason = [];
        /**
         * Educational material presented to the patient (or guardian) at the time of vaccine administration.
         */
        this.education = [];
        /**
         * Indicates a patient's eligibility for a funding program.
         */
        this.programEligibility = [];
        /**
         * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
         */
        this.reaction = [];
        /**
         * The protocol (set of recommendations) being followed by the provider who administered the dose.
         */
        this.protocolApplied = [];
        this.resourceType = 'Immunization';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['statusReason']) {
            this.statusReason = new fhir.CodeableConcept(source.statusReason);
        }
        if (source['vaccineCode']) {
            this.vaccineCode = new fhir.CodeableConcept(source.vaccineCode);
        }
        else {
            this.vaccineCode = null;
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['occurrence']) {
            this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime']) {
            this.occurrence = new fhir.FhirDateTime({ value: source.occurrenceDateTime });
        }
        else if (source['occurrenceString']) {
            this.occurrence = new fhir.FhirString({ value: source.occurrenceString });
        }
        else {
            this.occurrence = null;
        }
        if (source['recorded']) {
            this.recorded = new fhir.FhirDateTime({ value: source.recorded });
        }
        if (source['primarySource']) {
            this.primarySource = new fhir.FhirBoolean({ value: source.primarySource });
        }
        if (source['reportOrigin']) {
            this.reportOrigin = new fhir.CodeableConcept(source.reportOrigin);
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['manufacturer']) {
            this.manufacturer = new fhir.Reference(source.manufacturer);
        }
        if (source['lotNumber']) {
            this.lotNumber = new fhir.FhirString({ value: source.lotNumber });
        }
        if (source['expirationDate']) {
            this.expirationDate = new fhir.FhirDate({ value: source.expirationDate });
        }
        if (source['site']) {
            this.site = new fhir.CodeableConcept(source.site);
        }
        if (source['route']) {
            this.route = new fhir.CodeableConcept(source.route);
        }
        if (source['doseQuantity']) {
            this.doseQuantity = new fhir.Quantity(source.doseQuantity);
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.ImmunizationPerformer(x));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source['isSubpotent']) {
            this.isSubpotent = new fhir.FhirBoolean({ value: source.isSubpotent });
        }
        if (source['subpotentReason']) {
            this.subpotentReason = source.subpotentReason.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['education']) {
            this.education = source.education.map((x) => new fhir.ImmunizationEducation(x));
        }
        if (source['programEligibility']) {
            this.programEligibility = source.programEligibility.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['fundingSource']) {
            this.fundingSource = new fhir.CodeableConcept(source.fundingSource);
        }
        if (source['reaction']) {
            this.reaction = source.reaction.map((x) => new fhir.ImmunizationReaction(x));
        }
        if (source['protocolApplied']) {
            this.protocolApplied = source.protocolApplied.map((x) => new fhir.ImmunizationProtocolApplied(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return ImmunizationStatusValueSet;
    }
    /**
     * Example-bound Value Set for statusReason
     */
    static statusReasonExampleValueSet() {
        return ImmunizationStatusReasonValueSet;
    }
    /**
     * Example-bound Value Set for vaccineCode
     */
    static vaccineCodeExampleValueSet() {
        return VaccineCodeValueSet;
    }
    /**
     * Example-bound Value Set for reportOrigin
     */
    static reportOriginExampleValueSet() {
        return ImmunizationOriginValueSet;
    }
    /**
     * Example-bound Value Set for site
     */
    static siteExampleValueSet() {
        return ImmunizationSiteValueSet;
    }
    /**
     * Example-bound Value Set for route
     */
    static routeExampleValueSet() {
        return ImmunizationRouteValueSet;
    }
    /**
     * Example-bound Value Set for reasonCode
     */
    static reasonCodeExampleValueSet() {
        return ImmunizationReasonValueSet;
    }
    /**
     * Example-bound Value Set for subpotentReason
     */
    static subpotentReasonExampleValueSet() {
        return ImmunizationSubpotentReasonValueSet;
    }
    /**
     * Example-bound Value Set for programEligibility
     */
    static programEligibilityExampleValueSet() {
        return ImmunizationProgramEligibilityValueSet;
    }
    /**
     * Example-bound Value Set for fundingSource
     */
    static fundingSourceExampleValueSet() {
        return ImmunizationFundingSourceValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'Immunization' fhir: Immunization.resourceType:'Immunization'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:ImmunizationStatusValueSetEnum fhir: Immunization.status:code", }));
        }
        if (this["statusReason"]) {
            outcome.issue.push(...this.statusReason.doModelValidation().issue);
        }
        if (!this['vaccineCode']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property vaccineCode:fhir.CodeableConcept fhir: Immunization.vaccineCode:CodeableConcept", }));
        }
        if (this["vaccineCode"]) {
            outcome.issue.push(...this.vaccineCode.doModelValidation().issue);
        }
        if (!this['patient']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property patient:fhir.Reference fhir: Immunization.patient:Reference", }));
        }
        if (this["patient"]) {
            outcome.issue.push(...this.patient.doModelValidation().issue);
        }
        if (this["encounter"]) {
            outcome.issue.push(...this.encounter.doModelValidation().issue);
        }
        if (!this['occurrence']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property occurrence: fhir: Immunization.occurrence[x]:", }));
        }
        if (this["recorded"]) {
            outcome.issue.push(...this.recorded.doModelValidation().issue);
        }
        if (this["primarySource"]) {
            outcome.issue.push(...this.primarySource.doModelValidation().issue);
        }
        if (this["reportOrigin"]) {
            outcome.issue.push(...this.reportOrigin.doModelValidation().issue);
        }
        if (this["location"]) {
            outcome.issue.push(...this.location.doModelValidation().issue);
        }
        if (this["manufacturer"]) {
            outcome.issue.push(...this.manufacturer.doModelValidation().issue);
        }
        if (this["lotNumber"]) {
            outcome.issue.push(...this.lotNumber.doModelValidation().issue);
        }
        if (this["expirationDate"]) {
            outcome.issue.push(...this.expirationDate.doModelValidation().issue);
        }
        if (this["site"]) {
            outcome.issue.push(...this.site.doModelValidation().issue);
        }
        if (this["route"]) {
            outcome.issue.push(...this.route.doModelValidation().issue);
        }
        if (this["doseQuantity"]) {
            outcome.issue.push(...this.doseQuantity.doModelValidation().issue);
        }
        if (this["performer"]) {
            this.performer.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["isSubpotent"]) {
            outcome.issue.push(...this.isSubpotent.doModelValidation().issue);
        }
        if (this["subpotentReason"]) {
            this.subpotentReason.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["education"]) {
            this.education.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["programEligibility"]) {
            this.programEligibility.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["fundingSource"]) {
            outcome.issue.push(...this.fundingSource.doModelValidation().issue);
        }
        if (this["reaction"]) {
            this.reaction.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["protocolApplied"]) {
            this.protocolApplied.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=Immunization.js.map