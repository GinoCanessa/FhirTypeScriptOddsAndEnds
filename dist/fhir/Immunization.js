// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Indicates who performed the immunization event.
 */
export class ImmunizationPerformer extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationPerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.actor = null;
        if (source["actor"]) {
            this.actor = new fhir.Reference(source.actor);
        }
        if (this.actor === undefined) {
            this.actor = null;
        }
        if (source["function"]) {
            this.function = new fhir.CodeableConcept(source.function);
        }
    }
    /**
     * Check if the current ImmunizationPerformer contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["actor"] === undefined) {
            missingElements.push("actor");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ImmunizationPerformer from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new ImmunizationPerformer(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `ImmunizationPerformer is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Educational material presented to the patient (or guardian) at the time of vaccine administration.
 */
export class ImmunizationEducation extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationEducation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["documentType"]) {
            this.documentType = source.documentType;
        }
        if (source["_documentType"]) {
            this._documentType = new fhir.FhirElement(source._documentType);
        }
        if (source["presentationDate"]) {
            this.presentationDate = source.presentationDate;
        }
        if (source["_presentationDate"]) {
            this._presentationDate = new fhir.FhirElement(source._presentationDate);
        }
        if (source["publicationDate"]) {
            this.publicationDate = source.publicationDate;
        }
        if (source["_publicationDate"]) {
            this._publicationDate = new fhir.FhirElement(source._publicationDate);
        }
        if (source["reference"]) {
            this.reference = source.reference;
        }
        if (source["_reference"]) {
            this._reference = new fhir.FhirElement(source._reference);
        }
    }
    /**
     * Check if the current ImmunizationEducation contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ImmunizationEducation from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new ImmunizationEducation(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `ImmunizationEducation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
 */
export class ImmunizationReaction extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationReaction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["date"]) {
            this.date = source.date;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["detail"]) {
            this.detail = new fhir.Reference(source.detail);
        }
        if (source["reported"]) {
            this.reported = source.reported;
        }
        if (source["_reported"]) {
            this._reported = new fhir.FhirElement(source._reported);
        }
    }
    /**
     * Check if the current ImmunizationReaction contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ImmunizationReaction from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new ImmunizationReaction(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `ImmunizationReaction is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The protocol (set of recommendations) being followed by the provider who administered the dose.
 */
export class ImmunizationProtocolApplied extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationProtocolApplied - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["authority"]) {
            this.authority = new fhir.Reference(source.authority);
        }
        if (source["doseNumberPositiveInt"]) {
            this.doseNumberPositiveInt = source.doseNumberPositiveInt;
        }
        if (source["_doseNumberPositiveInt"]) {
            this._doseNumberPositiveInt = new fhir.FhirElement(source._doseNumberPositiveInt);
        }
        if (source["doseNumberString"]) {
            this.doseNumberString = source.doseNumberString;
        }
        if (source["_doseNumberString"]) {
            this._doseNumberString = new fhir.FhirElement(source._doseNumberString);
        }
        if (source["series"]) {
            this.series = source.series;
        }
        if (source["_series"]) {
            this._series = new fhir.FhirElement(source._series);
        }
        if (source["seriesDosesPositiveInt"]) {
            this.seriesDosesPositiveInt = source.seriesDosesPositiveInt;
        }
        if (source["_seriesDosesPositiveInt"]) {
            this._seriesDosesPositiveInt = new fhir.FhirElement(source._seriesDosesPositiveInt);
        }
        if (source["seriesDosesString"]) {
            this.seriesDosesString = source.seriesDosesString;
        }
        if (source["_seriesDosesString"]) {
            this._seriesDosesString = new fhir.FhirElement(source._seriesDosesString);
        }
        if (source["targetDisease"]) {
            this.targetDisease = source.targetDisease.map((x) => new fhir.CodeableConcept(x));
        }
    }
    /**
     * Check if the current ImmunizationProtocolApplied contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ImmunizationProtocolApplied from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new ImmunizationProtocolApplied(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `ImmunizationProtocolApplied is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
 */
export class Immunization extends fhir.DomainResource {
    /**
     * Default constructor for Immunization - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Immunization';
        if (source["doseQuantity"]) {
            this.doseQuantity = new fhir.Quantity(source.doseQuantity);
        }
        if (source["education"]) {
            this.education = source.education.map((x) => new fhir.ImmunizationEducation(x));
        }
        if (source["encounter"]) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source["expirationDate"]) {
            this.expirationDate = source.expirationDate;
        }
        if (source["_expirationDate"]) {
            this._expirationDate = new fhir.FhirElement(source._expirationDate);
        }
        if (source["fundingSource"]) {
            this.fundingSource = new fhir.CodeableConcept(source.fundingSource);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["isSubpotent"]) {
            this.isSubpotent = source.isSubpotent;
        }
        if (source["_isSubpotent"]) {
            this._isSubpotent = new fhir.FhirElement(source._isSubpotent);
        }
        if (source["location"]) {
            this.location = new fhir.Reference(source.location);
        }
        if (source["lotNumber"]) {
            this.lotNumber = source.lotNumber;
        }
        if (source["_lotNumber"]) {
            this._lotNumber = new fhir.FhirElement(source._lotNumber);
        }
        if (source["manufacturer"]) {
            this.manufacturer = new fhir.Reference(source.manufacturer);
        }
        if (source["note"]) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source["occurrenceDateTime"]) {
            this.occurrenceDateTime = source.occurrenceDateTime;
        }
        if (source["_occurrenceDateTime"]) {
            this._occurrenceDateTime = new fhir.FhirElement(source._occurrenceDateTime);
        }
        if (source["occurrenceString"]) {
            this.occurrenceString = source.occurrenceString;
        }
        if (source["_occurrenceString"]) {
            this._occurrenceString = new fhir.FhirElement(source._occurrenceString);
        }
        this.patient = null;
        if (source["patient"]) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (this.patient === undefined) {
            this.patient = null;
        }
        if (source["performer"]) {
            this.performer = source.performer.map((x) => new fhir.ImmunizationPerformer(x));
        }
        if (source["primarySource"]) {
            this.primarySource = source.primarySource;
        }
        if (source["_primarySource"]) {
            this._primarySource = new fhir.FhirElement(source._primarySource);
        }
        if (source["programEligibility"]) {
            this.programEligibility = source.programEligibility.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["protocolApplied"]) {
            this.protocolApplied = source.protocolApplied.map((x) => new fhir.ImmunizationProtocolApplied(x));
        }
        if (source["reaction"]) {
            this.reaction = source.reaction.map((x) => new fhir.ImmunizationReaction(x));
        }
        if (source["reasonCode"]) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["reasonReference"]) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source["recorded"]) {
            this.recorded = source.recorded;
        }
        if (source["_recorded"]) {
            this._recorded = new fhir.FhirElement(source._recorded);
        }
        if (source["reportOrigin"]) {
            this.reportOrigin = new fhir.CodeableConcept(source.reportOrigin);
        }
        if (source["route"]) {
            this.route = new fhir.CodeableConcept(source.route);
        }
        if (source["site"]) {
            this.site = new fhir.CodeableConcept(source.site);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["statusReason"]) {
            this.statusReason = new fhir.CodeableConcept(source.statusReason);
        }
        if (source["subpotentReason"]) {
            this.subpotentReason = source.subpotentReason.map((x) => new fhir.CodeableConcept(x));
        }
        this.vaccineCode = null;
        if (source["vaccineCode"]) {
            this.vaccineCode = new fhir.CodeableConcept(source.vaccineCode);
        }
        if (this.vaccineCode === undefined) {
            this.vaccineCode = null;
        }
    }
    /**
     * Check if the current Immunization contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["patient"] === undefined) {
            missingElements.push("patient");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["vaccineCode"] === undefined) {
            missingElements.push("vaccineCode");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Immunization from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new Immunization(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `Immunization is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the Immunization.status field
 */
export var ImmunizationStatusEnum;
(function (ImmunizationStatusEnum) {
    ImmunizationStatusEnum["COMPLETED"] = "completed";
    ImmunizationStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    ImmunizationStatusEnum["NOT_DONE"] = "not-done";
})(ImmunizationStatusEnum || (ImmunizationStatusEnum = {}));
//# sourceMappingURL=Immunization.js.map