// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Immunization
import * as fhir from '../fhir.js';
import { ImmunizationFunctionValueSet } from '../fhirValueSets/ImmunizationFunctionValueSet.js';
import { ImmunizationTargetDiseaseValueSet } from '../fhirValueSets/ImmunizationTargetDiseaseValueSet.js';
import { ImmunizationStatusValueSet } from '../fhirValueSets/ImmunizationStatusValueSet.js';
import { ImmunizationStatusReasonValueSet } from '../fhirValueSets/ImmunizationStatusReasonValueSet.js';
import { VaccineCodeValueSet } from '../fhirValueSets/VaccineCodeValueSet.js';
import { ImmunizationOriginValueSet } from '../fhirValueSets/ImmunizationOriginValueSet.js';
import { ImmunizationSiteValueSet } from '../fhirValueSets/ImmunizationSiteValueSet.js';
import { ImmunizationRouteValueSet } from '../fhirValueSets/ImmunizationRouteValueSet.js';
import { ImmunizationReasonValueSet } from '../fhirValueSets/ImmunizationReasonValueSet.js';
import { ImmunizationSubpotentReasonValueSet } from '../fhirValueSets/ImmunizationSubpotentReasonValueSet.js';
import { ImmunizationProgramEligibilityValueSet } from '../fhirValueSets/ImmunizationProgramEligibilityValueSet.js';
import { ImmunizationFundingSourceValueSet } from '../fhirValueSets/ImmunizationFundingSourceValueSet.js';
/**
 * Indicates who performed the immunization event.
 */
export class ImmunizationPerformer extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationPerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['function']) {
            this.function = new fhir.CodeableConcept(source.function);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        else {
            this.actor = null;
        }
    }
    /**
     * Extensible-bound Value Set for function
     */
    static functionExtensibleValueSet() {
        return ImmunizationFunctionValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["function"]) {
            results.push(...this.function.doModelValidation());
        }
        if (!this["actor"]) {
            results.push(["actor", 'Missing required element: Immunization.performer.actor']);
        }
        if (this["actor"]) {
            results.push(...this.actor.doModelValidation());
        }
        return results;
    }
}
/**
 * Educational material presented to the patient (or guardian) at the time of vaccine administration.
 */
export class ImmunizationEducation extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationEducation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['documentType']) {
            this.documentType = source.documentType;
        }
        if (source['_documentType']) {
            this._documentType = new fhir.FhirElement(source._documentType);
        }
        if (source['reference']) {
            this.reference = source.reference;
        }
        if (source['_reference']) {
            this._reference = new fhir.FhirElement(source._reference);
        }
        if (source['publicationDate']) {
            this.publicationDate = source.publicationDate;
        }
        if (source['_publicationDate']) {
            this._publicationDate = new fhir.FhirElement(source._publicationDate);
        }
        if (source['presentationDate']) {
            this.presentationDate = source.presentationDate;
        }
        if (source['_presentationDate']) {
            this._presentationDate = new fhir.FhirElement(source._presentationDate);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_documentType"]) {
            results.push(...this._documentType.doModelValidation());
        }
        if (this["_reference"]) {
            results.push(...this._reference.doModelValidation());
        }
        if (this["_publicationDate"]) {
            results.push(...this._publicationDate.doModelValidation());
        }
        if (this["_presentationDate"]) {
            results.push(...this._presentationDate.doModelValidation());
        }
        return results;
    }
}
/**
 * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
 */
export class ImmunizationReaction extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationReaction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['date']) {
            this.date = source.date;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['detail']) {
            this.detail = new fhir.Reference(source.detail);
        }
        if (source['reported']) {
            this.reported = source.reported;
        }
        if (source['_reported']) {
            this._reported = new fhir.FhirElement(source._reported);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["detail"]) {
            results.push(...this.detail.doModelValidation());
        }
        if (this["_reported"]) {
            results.push(...this._reported.doModelValidation());
        }
        return results;
    }
}
/**
 * The protocol (set of recommendations) being followed by the provider who administered the dose.
 */
export class ImmunizationProtocolApplied extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationProtocolApplied - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['series']) {
            this.series = source.series;
        }
        if (source['_series']) {
            this._series = new fhir.FhirElement(source._series);
        }
        if (source['authority']) {
            this.authority = new fhir.Reference(source.authority);
        }
        if (source['targetDisease']) {
            this.targetDisease = source.targetDisease.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['doseNumberPositiveInt']) {
            this.doseNumberPositiveInt = source.doseNumberPositiveInt;
        }
        if (source['_doseNumberPositiveInt']) {
            this._doseNumberPositiveInt = new fhir.FhirElement(source._doseNumberPositiveInt);
        }
        if (source['doseNumberString']) {
            this.doseNumberString = source.doseNumberString;
        }
        if (source['_doseNumberString']) {
            this._doseNumberString = new fhir.FhirElement(source._doseNumberString);
        }
        if (source['seriesDosesPositiveInt']) {
            this.seriesDosesPositiveInt = source.seriesDosesPositiveInt;
        }
        if (source['_seriesDosesPositiveInt']) {
            this._seriesDosesPositiveInt = new fhir.FhirElement(source._seriesDosesPositiveInt);
        }
        if (source['seriesDosesString']) {
            this.seriesDosesString = source.seriesDosesString;
        }
        if (source['_seriesDosesString']) {
            this._seriesDosesString = new fhir.FhirElement(source._seriesDosesString);
        }
    }
    /**
     * Example-bound Value Set for targetDisease
     */
    static targetDiseaseExampleValueSet() {
        return ImmunizationTargetDiseaseValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_series"]) {
            results.push(...this._series.doModelValidation());
        }
        if (this["authority"]) {
            results.push(...this.authority.doModelValidation());
        }
        if (this["targetDisease"]) {
            this.targetDisease.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_doseNumberPositiveInt"]) {
            results.push(...this._doseNumberPositiveInt.doModelValidation());
        }
        if (this["_doseNumberString"]) {
            results.push(...this._doseNumberString.doModelValidation());
        }
        if (this["_seriesDosesPositiveInt"]) {
            results.push(...this._seriesDosesPositiveInt.doModelValidation());
        }
        if (this["_seriesDosesString"]) {
            results.push(...this._seriesDosesString.doModelValidation());
        }
        return results;
    }
}
/**
 * Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
 */
export class Immunization extends fhir.DomainResource {
    /**
     * Default constructor for Immunization - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Immunization';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['statusReason']) {
            this.statusReason = new fhir.CodeableConcept(source.statusReason);
        }
        if (source['vaccineCode']) {
            this.vaccineCode = new fhir.CodeableConcept(source.vaccineCode);
        }
        else {
            this.vaccineCode = null;
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['occurrenceDateTime']) {
            this.occurrenceDateTime = source.occurrenceDateTime;
        }
        if (source['_occurrenceDateTime']) {
            this._occurrenceDateTime = new fhir.FhirElement(source._occurrenceDateTime);
        }
        if (source['occurrenceString']) {
            this.occurrenceString = source.occurrenceString;
        }
        if (source['_occurrenceString']) {
            this._occurrenceString = new fhir.FhirElement(source._occurrenceString);
        }
        if (source['recorded']) {
            this.recorded = source.recorded;
        }
        if (source['_recorded']) {
            this._recorded = new fhir.FhirElement(source._recorded);
        }
        if (source['primarySource']) {
            this.primarySource = source.primarySource;
        }
        if (source['_primarySource']) {
            this._primarySource = new fhir.FhirElement(source._primarySource);
        }
        if (source['reportOrigin']) {
            this.reportOrigin = new fhir.CodeableConcept(source.reportOrigin);
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['manufacturer']) {
            this.manufacturer = new fhir.Reference(source.manufacturer);
        }
        if (source['lotNumber']) {
            this.lotNumber = source.lotNumber;
        }
        if (source['_lotNumber']) {
            this._lotNumber = new fhir.FhirElement(source._lotNumber);
        }
        if (source['expirationDate']) {
            this.expirationDate = source.expirationDate;
        }
        if (source['_expirationDate']) {
            this._expirationDate = new fhir.FhirElement(source._expirationDate);
        }
        if (source['site']) {
            this.site = new fhir.CodeableConcept(source.site);
        }
        if (source['route']) {
            this.route = new fhir.CodeableConcept(source.route);
        }
        if (source['doseQuantity']) {
            this.doseQuantity = new fhir.Quantity(source.doseQuantity);
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.ImmunizationPerformer(x));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source['isSubpotent']) {
            this.isSubpotent = source.isSubpotent;
        }
        if (source['_isSubpotent']) {
            this._isSubpotent = new fhir.FhirElement(source._isSubpotent);
        }
        if (source['subpotentReason']) {
            this.subpotentReason = source.subpotentReason.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['education']) {
            this.education = source.education.map((x) => new fhir.ImmunizationEducation(x));
        }
        if (source['programEligibility']) {
            this.programEligibility = source.programEligibility.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['fundingSource']) {
            this.fundingSource = new fhir.CodeableConcept(source.fundingSource);
        }
        if (source['reaction']) {
            this.reaction = source.reaction.map((x) => new fhir.ImmunizationReaction(x));
        }
        if (source['protocolApplied']) {
            this.protocolApplied = source.protocolApplied.map((x) => new fhir.ImmunizationProtocolApplied(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return ImmunizationStatusValueSet;
    }
    /**
     * Example-bound Value Set for statusReason
     */
    static statusReasonExampleValueSet() {
        return ImmunizationStatusReasonValueSet;
    }
    /**
     * Example-bound Value Set for vaccineCode
     */
    static vaccineCodeExampleValueSet() {
        return VaccineCodeValueSet;
    }
    /**
     * Example-bound Value Set for reportOrigin
     */
    static reportOriginExampleValueSet() {
        return ImmunizationOriginValueSet;
    }
    /**
     * Example-bound Value Set for site
     */
    static siteExampleValueSet() {
        return ImmunizationSiteValueSet;
    }
    /**
     * Example-bound Value Set for route
     */
    static routeExampleValueSet() {
        return ImmunizationRouteValueSet;
    }
    /**
     * Example-bound Value Set for reasonCode
     */
    static reasonCodeExampleValueSet() {
        return ImmunizationReasonValueSet;
    }
    /**
     * Example-bound Value Set for subpotentReason
     */
    static subpotentReasonExampleValueSet() {
        return ImmunizationSubpotentReasonValueSet;
    }
    /**
     * Example-bound Value Set for programEligibility
     */
    static programEligibilityExampleValueSet() {
        return ImmunizationProgramEligibilityValueSet;
    }
    /**
     * Example-bound Value Set for fundingSource
     */
    static fundingSourceExampleValueSet() {
        return ImmunizationFundingSourceValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: Immunization.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: Immunization.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["statusReason"]) {
            results.push(...this.statusReason.doModelValidation());
        }
        if (!this["vaccineCode"]) {
            results.push(["vaccineCode", 'Missing required element: Immunization.vaccineCode']);
        }
        if (this["vaccineCode"]) {
            results.push(...this.vaccineCode.doModelValidation());
        }
        if (!this["patient"]) {
            results.push(["patient", 'Missing required element: Immunization.patient']);
        }
        if (this["patient"]) {
            results.push(...this.patient.doModelValidation());
        }
        if (this["encounter"]) {
            results.push(...this.encounter.doModelValidation());
        }
        if (this["_occurrenceDateTime"]) {
            results.push(...this._occurrenceDateTime.doModelValidation());
        }
        if (this["_occurrenceString"]) {
            results.push(...this._occurrenceString.doModelValidation());
        }
        if (this["_recorded"]) {
            results.push(...this._recorded.doModelValidation());
        }
        if (this["_primarySource"]) {
            results.push(...this._primarySource.doModelValidation());
        }
        if (this["reportOrigin"]) {
            results.push(...this.reportOrigin.doModelValidation());
        }
        if (this["location"]) {
            results.push(...this.location.doModelValidation());
        }
        if (this["manufacturer"]) {
            results.push(...this.manufacturer.doModelValidation());
        }
        if (this["_lotNumber"]) {
            results.push(...this._lotNumber.doModelValidation());
        }
        if (this["_expirationDate"]) {
            results.push(...this._expirationDate.doModelValidation());
        }
        if (this["site"]) {
            results.push(...this.site.doModelValidation());
        }
        if (this["route"]) {
            results.push(...this.route.doModelValidation());
        }
        if (this["doseQuantity"]) {
            results.push(...this.doseQuantity.doModelValidation());
        }
        if (this["performer"]) {
            this.performer.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_isSubpotent"]) {
            results.push(...this._isSubpotent.doModelValidation());
        }
        if (this["subpotentReason"]) {
            this.subpotentReason.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["education"]) {
            this.education.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["programEligibility"]) {
            this.programEligibility.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["fundingSource"]) {
            results.push(...this.fundingSource.doModelValidation());
        }
        if (this["reaction"]) {
            this.reaction.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["protocolApplied"]) {
            this.protocolApplied.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=Immunization.js.map