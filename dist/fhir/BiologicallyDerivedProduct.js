// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: BiologicallyDerivedProduct
import * as fhir from '../fhir.js';
import { ProcedureCodeValueSet, } from '../fhirValueSets/ProcedureCodeValueSet.js';
import { ProductStorageScaleValueSet, } from '../fhirValueSets/ProductStorageScaleValueSet.js';
import { ProductCategoryValueSet, } from '../fhirValueSets/ProductCategoryValueSet.js';
import { ProductStatusValueSet, } from '../fhirValueSets/ProductStatusValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * How this product was collected.
 */
export class BiologicallyDerivedProductCollection extends fhir.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductCollection - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'BiologicallyDerivedProductCollection';
        this.__collectedIsChoice = true;
        if (source['collector']) {
            this.collector = new fhir.Reference(source.collector);
        }
        if (source['source']) {
            this.source = new fhir.Reference(source.source);
        }
        if (source['collected']) {
            this.collected = source.collected;
        }
        else if (source['collectedDateTime']) {
            this.collected = new fhir.FhirDateTime({ value: source.collectedDateTime });
        }
        else if (source['collectedPeriod']) {
            this.collected = new fhir.Period(source.collectedPeriod);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["collector"]) {
            outcome.issue.push(...this.collector.doModelValidation().issue);
        }
        if (this["source"]) {
            outcome.issue.push(...this.source.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
 */
export class BiologicallyDerivedProductProcessing extends fhir.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductProcessing - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'BiologicallyDerivedProductProcessing';
        this.__timeIsChoice = true;
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['procedure']) {
            this.procedure = new fhir.CodeableConcept(source.procedure);
        }
        if (source['additive']) {
            this.additive = new fhir.Reference(source.additive);
        }
        if (source['time']) {
            this.time = source.time;
        }
        else if (source['timeDateTime']) {
            this.time = new fhir.FhirDateTime({ value: source.timeDateTime });
        }
        else if (source['timePeriod']) {
            this.time = new fhir.Period(source.timePeriod);
        }
    }
    /**
     * Example-bound Value Set for procedure
     */
    static procedureExampleValueSet() {
        return ProcedureCodeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["description"]) {
            outcome.issue.push(...this.description.doModelValidation().issue);
        }
        if (this["procedure"]) {
            outcome.issue.push(...this.procedure.doModelValidation().issue);
        }
        if (this["additive"]) {
            outcome.issue.push(...this.additive.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Any manipulation of product post-collection that is intended to alter the product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
 */
export class BiologicallyDerivedProductManipulation extends fhir.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductManipulation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'BiologicallyDerivedProductManipulation';
        this.__timeIsChoice = true;
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['time']) {
            this.time = source.time;
        }
        else if (source['timeDateTime']) {
            this.time = new fhir.FhirDateTime({ value: source.timeDateTime });
        }
        else if (source['timePeriod']) {
            this.time = new fhir.Period(source.timePeriod);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["description"]) {
            outcome.issue.push(...this.description.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Product storage.
 */
export class BiologicallyDerivedProductStorage extends fhir.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductStorage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'BiologicallyDerivedProductStorage';
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['temperature']) {
            this.temperature = new fhir.FhirDecimal({ value: source.temperature });
        }
        if (source['scale']) {
            this.scale = source.scale;
        }
        if (source['duration']) {
            this.duration = new fhir.Period(source.duration);
        }
    }
    /**
     * Required-bound Value Set for scale
     */
    static scaleRequiredValueSet() {
        return ProductStorageScaleValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["description"]) {
            outcome.issue.push(...this.description.doModelValidation().issue);
        }
        if (this["temperature"]) {
            outcome.issue.push(...this.temperature.doModelValidation().issue);
        }
        if (this["duration"]) {
            outcome.issue.push(...this.duration.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * A material substance originating from a biological entity intended to be transplanted or infused
 * into another (possibly the same) biological entity.
 */
export class BiologicallyDerivedProduct extends fhir.DomainResource {
    /**
     * Default constructor for BiologicallyDerivedProduct - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'BiologicallyDerivedProduct';
        /**
         * This records identifiers associated with this biologically derived product instance that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
         */
        this.identifier = [];
        /**
         * Procedure request to obtain this biologically derived product.
         */
        this.request = [];
        /**
         * For products that have multiple collections. For example Peripheral Blood Stem Cells may be collected over several days from a single donor and the donation split into in multiple containers which must be linked to the parent donation.
         */
        this.parent = [];
        /**
         * Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
         */
        this.processing = [];
        /**
         * Product storage.
         */
        this.storage = [];
        this.resourceType = 'BiologicallyDerivedProduct';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['productCategory']) {
            this.productCategory = source.productCategory;
        }
        if (source['productCode']) {
            this.productCode = new fhir.CodeableConcept(source.productCode);
        }
        if (source['status']) {
            this.status = source.status;
        }
        if (source['request']) {
            this.request = source.request.map((x) => new fhir.Reference(x));
        }
        if (source['quantity']) {
            this.quantity = new fhir.FhirInteger({ value: source.quantity });
        }
        if (source['parent']) {
            this.parent = source.parent.map((x) => new fhir.Reference(x));
        }
        if (source['collection']) {
            this.collection = new fhir.BiologicallyDerivedProductCollection(source.collection);
        }
        if (source['processing']) {
            this.processing = source.processing.map((x) => new fhir.BiologicallyDerivedProductProcessing(x));
        }
        if (source['manipulation']) {
            this.manipulation = new fhir.BiologicallyDerivedProductManipulation(source.manipulation);
        }
        if (source['storage']) {
            this.storage = source.storage.map((x) => new fhir.BiologicallyDerivedProductStorage(x));
        }
    }
    /**
     * Required-bound Value Set for productCategory
     */
    static productCategoryRequiredValueSet() {
        return ProductCategoryValueSet;
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return ProductStatusValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'BiologicallyDerivedProduct' fhir: BiologicallyDerivedProduct.resourceType:'BiologicallyDerivedProduct'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["productCode"]) {
            outcome.issue.push(...this.productCode.doModelValidation().issue);
        }
        if (this["request"]) {
            this.request.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["quantity"]) {
            outcome.issue.push(...this.quantity.doModelValidation().issue);
        }
        if (this["parent"]) {
            this.parent.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["collection"]) {
            outcome.issue.push(...this.collection.doModelValidation().issue);
        }
        if (this["processing"]) {
            this.processing.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["manipulation"]) {
            outcome.issue.push(...this.manipulation.doModelValidation().issue);
        }
        if (this["storage"]) {
            this.storage.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=BiologicallyDerivedProduct.js.map