// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * How this product was collected.
 */
export class BiologicallyDerivedProductCollection extends fhir.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductCollection - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["collectedDateTime"]) {
            this.collectedDateTime = source.collectedDateTime;
        }
        if (source["_collectedDateTime"]) {
            this._collectedDateTime = new fhir.FhirElement(source._collectedDateTime);
        }
        if (source["collectedPeriod"]) {
            this.collectedPeriod = new fhir.Period(source.collectedPeriod);
        }
        if (source["collector"]) {
            this.collector = new fhir.Reference(source.collector);
        }
        if (source["source"]) {
            this.source = new fhir.Reference(source.source);
        }
    }
    /**
     * Check if the current BiologicallyDerivedProductCollection contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a BiologicallyDerivedProductCollection from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new BiologicallyDerivedProductCollection(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `BiologicallyDerivedProductCollection is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
 */
export class BiologicallyDerivedProductProcessing extends fhir.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductProcessing - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["additive"]) {
            this.additive = new fhir.Reference(source.additive);
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["procedure"]) {
            this.procedure = new fhir.CodeableConcept(source.procedure);
        }
        if (source["timeDateTime"]) {
            this.timeDateTime = source.timeDateTime;
        }
        if (source["_timeDateTime"]) {
            this._timeDateTime = new fhir.FhirElement(source._timeDateTime);
        }
        if (source["timePeriod"]) {
            this.timePeriod = new fhir.Period(source.timePeriod);
        }
    }
    /**
     * Check if the current BiologicallyDerivedProductProcessing contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a BiologicallyDerivedProductProcessing from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new BiologicallyDerivedProductProcessing(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `BiologicallyDerivedProductProcessing is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Any manipulation of product post-collection that is intended to alter the product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
 */
export class BiologicallyDerivedProductManipulation extends fhir.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductManipulation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["timeDateTime"]) {
            this.timeDateTime = source.timeDateTime;
        }
        if (source["_timeDateTime"]) {
            this._timeDateTime = new fhir.FhirElement(source._timeDateTime);
        }
        if (source["timePeriod"]) {
            this.timePeriod = new fhir.Period(source.timePeriod);
        }
    }
    /**
     * Check if the current BiologicallyDerivedProductManipulation contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a BiologicallyDerivedProductManipulation from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new BiologicallyDerivedProductManipulation(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `BiologicallyDerivedProductManipulation is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Product storage.
 */
export class BiologicallyDerivedProductStorage extends fhir.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductStorage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["duration"]) {
            this.duration = new fhir.Period(source.duration);
        }
        if (source["scale"]) {
            this.scale = source.scale;
        }
        if (source["_scale"]) {
            this._scale = new fhir.FhirElement(source._scale);
        }
        if (source["temperature"]) {
            this.temperature = source.temperature;
        }
        if (source["_temperature"]) {
            this._temperature = new fhir.FhirElement(source._temperature);
        }
    }
    /**
     * Check if the current BiologicallyDerivedProductStorage contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a BiologicallyDerivedProductStorage from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new BiologicallyDerivedProductStorage(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `BiologicallyDerivedProductStorage is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A material substance originating from a biological entity intended to be transplanted or infused
 * into another (possibly the same) biological entity.
 */
export class BiologicallyDerivedProduct extends fhir.DomainResource {
    /**
     * Default constructor for BiologicallyDerivedProduct - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'BiologicallyDerivedProduct';
        if (source["collection"]) {
            this.collection = new fhir.BiologicallyDerivedProductCollection(source.collection);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["manipulation"]) {
            this.manipulation = new fhir.BiologicallyDerivedProductManipulation(source.manipulation);
        }
        if (source["parent"]) {
            this.parent = source.parent.map((x) => new fhir.Reference(x));
        }
        if (source["processing"]) {
            this.processing = source.processing.map((x) => new fhir.BiologicallyDerivedProductProcessing(x));
        }
        if (source["productCategory"]) {
            this.productCategory = source.productCategory;
        }
        if (source["_productCategory"]) {
            this._productCategory = new fhir.FhirElement(source._productCategory);
        }
        if (source["productCode"]) {
            this.productCode = new fhir.CodeableConcept(source.productCode);
        }
        if (source["quantity"]) {
            this.quantity = source.quantity;
        }
        if (source["_quantity"]) {
            this._quantity = new fhir.FhirElement(source._quantity);
        }
        if (source["request"]) {
            this.request = source.request.map((x) => new fhir.Reference(x));
        }
        if (source["status"]) {
            this.status = source.status;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["storage"]) {
            this.storage = source.storage.map((x) => new fhir.BiologicallyDerivedProductStorage(x));
        }
    }
    /**
     * Check if the current BiologicallyDerivedProduct contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a BiologicallyDerivedProduct from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new BiologicallyDerivedProduct(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `BiologicallyDerivedProduct is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the BiologicallyDerivedProduct.storage.scale field
 */
export var BiologicallyDerivedProductStorageScaleEnum;
(function (BiologicallyDerivedProductStorageScaleEnum) {
    BiologicallyDerivedProductStorageScaleEnum["FARENHEIT"] = "farenheit";
    BiologicallyDerivedProductStorageScaleEnum["CELSIUS"] = "celsius";
    BiologicallyDerivedProductStorageScaleEnum["KELVIN"] = "kelvin";
})(BiologicallyDerivedProductStorageScaleEnum || (BiologicallyDerivedProductStorageScaleEnum = {}));
/**
 * Code Values for the BiologicallyDerivedProduct.productCategory field
 */
export var BiologicallyDerivedProductProductCategoryEnum;
(function (BiologicallyDerivedProductProductCategoryEnum) {
    BiologicallyDerivedProductProductCategoryEnum["ORGAN"] = "organ";
    BiologicallyDerivedProductProductCategoryEnum["TISSUE"] = "tissue";
    BiologicallyDerivedProductProductCategoryEnum["FLUID"] = "fluid";
    BiologicallyDerivedProductProductCategoryEnum["CELLS"] = "cells";
    BiologicallyDerivedProductProductCategoryEnum["BIOLOGICALAGENT"] = "biologicalAgent";
})(BiologicallyDerivedProductProductCategoryEnum || (BiologicallyDerivedProductProductCategoryEnum = {}));
/**
 * Code Values for the BiologicallyDerivedProduct.status field
 */
export var BiologicallyDerivedProductStatusEnum;
(function (BiologicallyDerivedProductStatusEnum) {
    BiologicallyDerivedProductStatusEnum["AVAILABLE"] = "available";
    BiologicallyDerivedProductStatusEnum["UNAVAILABLE"] = "unavailable";
})(BiologicallyDerivedProductStatusEnum || (BiologicallyDerivedProductStatusEnum = {}));
//# sourceMappingURL=BiologicallyDerivedProduct.js.map