// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: BiologicallyDerivedProduct
import * as fhir from '../fhir.js';
import { ProcedureCodeValueSet } from '../fhirValueSets/ProcedureCodeValueSet.js';
import { ProductStorageScaleValueSet } from '../fhirValueSets/ProductStorageScaleValueSet.js';
import { ProductCategoryValueSet } from '../fhirValueSets/ProductCategoryValueSet.js';
import { ProductStatusValueSet } from '../fhirValueSets/ProductStatusValueSet.js';
/**
 * How this product was collected.
 */
export class BiologicallyDerivedProductCollection extends fhir.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductCollection - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['collector']) {
            this.collector = new fhir.Reference(source.collector);
        }
        if (source['source']) {
            this.source = new fhir.Reference(source.source);
        }
        if (source['collectedDateTime']) {
            this.collectedDateTime = source.collectedDateTime;
        }
        if (source['_collectedDateTime']) {
            this._collectedDateTime = new fhir.FhirElement(source._collectedDateTime);
        }
        if (source['collectedPeriod']) {
            this.collectedPeriod = new fhir.Period(source.collectedPeriod);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["collector"]) {
            results.push(...this.collector.doModelValidation());
        }
        if (this["source"]) {
            results.push(...this.source.doModelValidation());
        }
        if (this["_collectedDateTime"]) {
            results.push(...this._collectedDateTime.doModelValidation());
        }
        if (this["collectedPeriod"]) {
            results.push(...this.collectedPeriod.doModelValidation());
        }
        return results;
    }
}
/**
 * Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
 */
export class BiologicallyDerivedProductProcessing extends fhir.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductProcessing - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['procedure']) {
            this.procedure = new fhir.CodeableConcept(source.procedure);
        }
        if (source['additive']) {
            this.additive = new fhir.Reference(source.additive);
        }
        if (source['timeDateTime']) {
            this.timeDateTime = source.timeDateTime;
        }
        if (source['_timeDateTime']) {
            this._timeDateTime = new fhir.FhirElement(source._timeDateTime);
        }
        if (source['timePeriod']) {
            this.timePeriod = new fhir.Period(source.timePeriod);
        }
    }
    /**
     * Example-bound Value Set for procedure
     */
    static procedureExampleValueSet() {
        return ProcedureCodeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["procedure"]) {
            results.push(...this.procedure.doModelValidation());
        }
        if (this["additive"]) {
            results.push(...this.additive.doModelValidation());
        }
        if (this["_timeDateTime"]) {
            results.push(...this._timeDateTime.doModelValidation());
        }
        if (this["timePeriod"]) {
            results.push(...this.timePeriod.doModelValidation());
        }
        return results;
    }
}
/**
 * Any manipulation of product post-collection that is intended to alter the product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
 */
export class BiologicallyDerivedProductManipulation extends fhir.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductManipulation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['timeDateTime']) {
            this.timeDateTime = source.timeDateTime;
        }
        if (source['_timeDateTime']) {
            this._timeDateTime = new fhir.FhirElement(source._timeDateTime);
        }
        if (source['timePeriod']) {
            this.timePeriod = new fhir.Period(source.timePeriod);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["_timeDateTime"]) {
            results.push(...this._timeDateTime.doModelValidation());
        }
        if (this["timePeriod"]) {
            results.push(...this.timePeriod.doModelValidation());
        }
        return results;
    }
}
/**
 * Product storage.
 */
export class BiologicallyDerivedProductStorage extends fhir.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductStorage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['temperature']) {
            this.temperature = source.temperature;
        }
        if (source['_temperature']) {
            this._temperature = new fhir.FhirElement(source._temperature);
        }
        if (source['scale']) {
            this.scale = source.scale;
        }
        if (source['_scale']) {
            this._scale = new fhir.FhirElement(source._scale);
        }
        if (source['duration']) {
            this.duration = new fhir.Period(source.duration);
        }
    }
    /**
     * Required-bound Value Set for scale
     */
    static scaleRequiredValueSet() {
        return ProductStorageScaleValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["_temperature"]) {
            results.push(...this._temperature.doModelValidation());
        }
        if (this["_scale"]) {
            results.push(...this._scale.doModelValidation());
        }
        if (this["duration"]) {
            results.push(...this.duration.doModelValidation());
        }
        return results;
    }
}
/**
 * A material substance originating from a biological entity intended to be transplanted or infused
 * into another (possibly the same) biological entity.
 */
export class BiologicallyDerivedProduct extends fhir.DomainResource {
    /**
     * Default constructor for BiologicallyDerivedProduct - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'BiologicallyDerivedProduct';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['productCategory']) {
            this.productCategory = source.productCategory;
        }
        if (source['_productCategory']) {
            this._productCategory = new fhir.FhirElement(source._productCategory);
        }
        if (source['productCode']) {
            this.productCode = new fhir.CodeableConcept(source.productCode);
        }
        if (source['status']) {
            this.status = source.status;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['request']) {
            this.request = source.request.map((x) => new fhir.Reference(x));
        }
        if (source['quantity']) {
            this.quantity = source.quantity;
        }
        if (source['_quantity']) {
            this._quantity = new fhir.FhirElement(source._quantity);
        }
        if (source['parent']) {
            this.parent = source.parent.map((x) => new fhir.Reference(x));
        }
        if (source['collection']) {
            this.collection = new fhir.BiologicallyDerivedProductCollection(source.collection);
        }
        if (source['processing']) {
            this.processing = source.processing.map((x) => new fhir.BiologicallyDerivedProductProcessing(x));
        }
        if (source['manipulation']) {
            this.manipulation = new fhir.BiologicallyDerivedProductManipulation(source.manipulation);
        }
        if (source['storage']) {
            this.storage = source.storage.map((x) => new fhir.BiologicallyDerivedProductStorage(x));
        }
    }
    /**
     * Required-bound Value Set for productCategory
     */
    static productCategoryRequiredValueSet() {
        return ProductCategoryValueSet;
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return ProductStatusValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: BiologicallyDerivedProduct.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_productCategory"]) {
            results.push(...this._productCategory.doModelValidation());
        }
        if (this["productCode"]) {
            results.push(...this.productCode.doModelValidation());
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["request"]) {
            this.request.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_quantity"]) {
            results.push(...this._quantity.doModelValidation());
        }
        if (this["parent"]) {
            this.parent.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["collection"]) {
            results.push(...this.collection.doModelValidation());
        }
        if (this["processing"]) {
            this.processing.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["manipulation"]) {
            results.push(...this.manipulation.doModelValidation());
        }
        if (this["storage"]) {
            this.storage.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=BiologicallyDerivedProduct.js.map