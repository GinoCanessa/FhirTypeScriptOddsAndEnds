// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Dosage
import * as fhir from '../fhir.js';
import { DoseRateTypeValueSet, } from '../fhirValueSets/DoseRateTypeValueSet.js';
import { ApproachSiteCodesValueSet, } from '../fhirValueSets/ApproachSiteCodesValueSet.js';
import { RouteCodesValueSet, } from '../fhirValueSets/RouteCodesValueSet.js';
import { AdministrationMethodCodesValueSet, } from '../fhirValueSets/AdministrationMethodCodesValueSet.js';
/**
 * The amount of medication administered.
 */
export class DosageDoseAndRate extends fhir.FhirElement {
    /**
     * Default constructor for DosageDoseAndRate - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'DosageDoseAndRate';
        this.__doseIsChoice = true;
        this.__rateIsChoice = true;
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['dose']) {
            this.dose = source.dose;
        }
        else if (source['doseRange']) {
            this.dose = new fhir.Range(source.doseRange);
        }
        else if (source['doseQuantity']) {
            this.dose = new fhir.Quantity(source.doseQuantity);
        }
        if (source['rate']) {
            this.rate = source.rate;
        }
        else if (source['rateRatio']) {
            this.rate = new fhir.Ratio(source.rateRatio);
        }
        else if (source['rateRange']) {
            this.rate = new fhir.Range(source.rateRange);
        }
        else if (source['rateQuantity']) {
            this.rate = new fhir.Quantity(source.rateQuantity);
        }
    }
    /**
     * Example-bound Value Set for type
     */
    static typeExampleValueSet() {
        return DoseRateTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Indicates how the medication is/was taken or should be taken by the patient.
 */
export class Dosage extends fhir.BackboneElement {
    /**
     * Default constructor for Dosage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'Dosage';
        /**
         * Information about administration or preparation of the medication (e.g. "infuse as rapidly as possibly via intraperitoneal port" or "immediately following drug x") should be populated in dosage.text.
         */
        this.additionalInstruction = [];
        this.__asNeededIsChoice = true;
        /**
         * The amount of medication administered.
         */
        this.doseAndRate = [];
        if (source['sequence']) {
            this.sequence = new fhir.FhirInteger({ value: source.sequence });
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['additionalInstruction']) {
            this.additionalInstruction = source.additionalInstruction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['patientInstruction']) {
            this.patientInstruction = new fhir.FhirString({ value: source.patientInstruction });
        }
        if (source['timing']) {
            this.timing = new fhir.Timing(source.timing);
        }
        if (source['asNeeded']) {
            this.asNeeded = source.asNeeded;
        }
        else if (source['asNeededBoolean']) {
            this.asNeeded = new fhir.FhirBoolean({ value: source.asNeededBoolean });
        }
        else if (source['asNeededCodeableConcept']) {
            this.asNeeded = new fhir.CodeableConcept(source.asNeededCodeableConcept);
        }
        if (source['site']) {
            this.site = new fhir.CodeableConcept(source.site);
        }
        if (source['route']) {
            this.route = new fhir.CodeableConcept(source.route);
        }
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source['doseAndRate']) {
            this.doseAndRate = source.doseAndRate.map((x) => new fhir.DosageDoseAndRate(x));
        }
        if (source['maxDosePerPeriod']) {
            this.maxDosePerPeriod = new fhir.Ratio(source.maxDosePerPeriod);
        }
        if (source['maxDosePerAdministration']) {
            this.maxDosePerAdministration = new fhir.Quantity(source.maxDosePerAdministration);
        }
        if (source['maxDosePerLifetime']) {
            this.maxDosePerLifetime = new fhir.Quantity(source.maxDosePerLifetime);
        }
    }
    /**
     * Example-bound Value Set for site
     */
    static siteExampleValueSet() {
        return ApproachSiteCodesValueSet;
    }
    /**
     * Example-bound Value Set for route
     */
    static routeExampleValueSet() {
        return RouteCodesValueSet;
    }
    /**
     * Example-bound Value Set for method
     */
    static methodExampleValueSet() {
        return AdministrationMethodCodesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["sequence"]) {
            outcome.issue.push(...this.sequence.doModelValidation().issue);
        }
        if (this["text"]) {
            outcome.issue.push(...this.text.doModelValidation().issue);
        }
        if (this["additionalInstruction"]) {
            this.additionalInstruction.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["patientInstruction"]) {
            outcome.issue.push(...this.patientInstruction.doModelValidation().issue);
        }
        if (this["timing"]) {
            outcome.issue.push(...this.timing.doModelValidation().issue);
        }
        if (this["site"]) {
            outcome.issue.push(...this.site.doModelValidation().issue);
        }
        if (this["route"]) {
            outcome.issue.push(...this.route.doModelValidation().issue);
        }
        if (this["method"]) {
            outcome.issue.push(...this.method.doModelValidation().issue);
        }
        if (this["doseAndRate"]) {
            this.doseAndRate.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["maxDosePerPeriod"]) {
            outcome.issue.push(...this.maxDosePerPeriod.doModelValidation().issue);
        }
        if (this["maxDosePerAdministration"]) {
            outcome.issue.push(...this.maxDosePerAdministration.doModelValidation().issue);
        }
        if (this["maxDosePerLifetime"]) {
            outcome.issue.push(...this.maxDosePerLifetime.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=Dosage.js.map