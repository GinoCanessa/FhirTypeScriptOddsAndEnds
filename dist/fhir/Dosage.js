// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Dosage
import * as fhir from '../fhir.js';
import { DoseRateTypeValueSet } from '../fhirValueSets/DoseRateTypeValueSet.js';
import { MedicationAsNeededReasonValueSet } from '../fhirValueSets/MedicationAsNeededReasonValueSet.js';
import { ApproachSiteCodesValueSet } from '../fhirValueSets/ApproachSiteCodesValueSet.js';
import { RouteCodesValueSet } from '../fhirValueSets/RouteCodesValueSet.js';
import { AdministrationMethodCodesValueSet } from '../fhirValueSets/AdministrationMethodCodesValueSet.js';
/**
 * The amount of medication administered.
 */
export class DosageDoseAndRate extends fhir.FhirElement {
    /**
     * Default constructor for DosageDoseAndRate - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['doseRange']) {
            this.doseRange = new fhir.Range(source.doseRange);
        }
        if (source['doseQuantity']) {
            this.doseQuantity = new fhir.Quantity(source.doseQuantity);
        }
        if (source['rateRatio']) {
            this.rateRatio = new fhir.Ratio(source.rateRatio);
        }
        if (source['rateRange']) {
            this.rateRange = new fhir.Range(source.rateRange);
        }
        if (source['rateQuantity']) {
            this.rateQuantity = new fhir.Quantity(source.rateQuantity);
        }
    }
    /**
     * Example-bound Value Set for type
     */
    typeExampleValueSet() {
        return DoseRateTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["doseRange"]) {
            results.push(...this.doseRange.doModelValidation());
        }
        if (this["doseQuantity"]) {
            results.push(...this.doseQuantity.doModelValidation());
        }
        if (this["rateRatio"]) {
            results.push(...this.rateRatio.doModelValidation());
        }
        if (this["rateRange"]) {
            results.push(...this.rateRange.doModelValidation());
        }
        if (this["rateQuantity"]) {
            results.push(...this.rateQuantity.doModelValidation());
        }
        return results;
    }
}
/**
 * Indicates how the medication is/was taken or should be taken by the patient.
 */
export class Dosage extends fhir.BackboneElement {
    /**
     * Default constructor for Dosage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['sequence']) {
            this.sequence = source.sequence;
        }
        if (source['_sequence']) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source['text']) {
            this.text = source.text;
        }
        if (source['_text']) {
            this._text = new fhir.FhirElement(source._text);
        }
        if (source['additionalInstruction']) {
            this.additionalInstruction = source.additionalInstruction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['patientInstruction']) {
            this.patientInstruction = source.patientInstruction;
        }
        if (source['_patientInstruction']) {
            this._patientInstruction = new fhir.FhirElement(source._patientInstruction);
        }
        if (source['timing']) {
            this.timing = new fhir.Timing(source.timing);
        }
        if (source['asNeededBoolean']) {
            this.asNeededBoolean = source.asNeededBoolean;
        }
        if (source['_asNeededBoolean']) {
            this._asNeededBoolean = new fhir.FhirElement(source._asNeededBoolean);
        }
        if (source['asNeededCodeableConcept']) {
            this.asNeededCodeableConcept = new fhir.CodeableConcept(source.asNeededCodeableConcept);
        }
        if (source['site']) {
            this.site = new fhir.CodeableConcept(source.site);
        }
        if (source['route']) {
            this.route = new fhir.CodeableConcept(source.route);
        }
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source['doseAndRate']) {
            this.doseAndRate = source.doseAndRate.map((x) => new fhir.DosageDoseAndRate(x));
        }
        if (source['maxDosePerPeriod']) {
            this.maxDosePerPeriod = new fhir.Ratio(source.maxDosePerPeriod);
        }
        if (source['maxDosePerAdministration']) {
            this.maxDosePerAdministration = new fhir.Quantity(source.maxDosePerAdministration);
        }
        if (source['maxDosePerLifetime']) {
            this.maxDosePerLifetime = new fhir.Quantity(source.maxDosePerLifetime);
        }
    }
    /**
     * Example-bound Value Set for asNeededBoolean
     */
    asNeededBooleanExampleValueSet() {
        return MedicationAsNeededReasonValueSet;
    }
    /**
     * Example-bound Value Set for asNeededCodeableConcept
     */
    asNeededCodeableConceptExampleValueSet() {
        return MedicationAsNeededReasonValueSet;
    }
    /**
     * Example-bound Value Set for site
     */
    siteExampleValueSet() {
        return ApproachSiteCodesValueSet;
    }
    /**
     * Example-bound Value Set for route
     */
    routeExampleValueSet() {
        return RouteCodesValueSet;
    }
    /**
     * Example-bound Value Set for method
     */
    methodExampleValueSet() {
        return AdministrationMethodCodesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_sequence"]) {
            results.push(...this._sequence.doModelValidation());
        }
        if (this["_text"]) {
            results.push(...this._text.doModelValidation());
        }
        if (this["additionalInstruction"]) {
            this.additionalInstruction.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_patientInstruction"]) {
            results.push(...this._patientInstruction.doModelValidation());
        }
        if (this["timing"]) {
            results.push(...this.timing.doModelValidation());
        }
        if (this["_asNeededBoolean"]) {
            results.push(...this._asNeededBoolean.doModelValidation());
        }
        if (this["asNeededCodeableConcept"]) {
            results.push(...this.asNeededCodeableConcept.doModelValidation());
        }
        if (this["site"]) {
            results.push(...this.site.doModelValidation());
        }
        if (this["route"]) {
            results.push(...this.route.doModelValidation());
        }
        if (this["method"]) {
            results.push(...this.method.doModelValidation());
        }
        if (this["doseAndRate"]) {
            this.doseAndRate.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["maxDosePerPeriod"]) {
            results.push(...this.maxDosePerPeriod.doModelValidation());
        }
        if (this["maxDosePerAdministration"]) {
            results.push(...this.maxDosePerAdministration.doModelValidation());
        }
        if (this["maxDosePerLifetime"]) {
            results.push(...this.maxDosePerLifetime.doModelValidation());
        }
        return results;
    }
}
//# sourceMappingURL=Dosage.js.map