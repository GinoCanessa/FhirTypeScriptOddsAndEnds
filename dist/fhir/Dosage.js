// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * The amount of medication administered.
 */
export class DosageDoseAndRate extends fhir.FhirElement {
    /**
     * Default constructor for DosageDoseAndRate - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["doseRange"]) {
            this.doseRange = new fhir.Range(source.doseRange);
        }
        if (source["doseQuantity"]) {
            this.doseQuantity = new fhir.Quantity(source.doseQuantity);
        }
        if (source["rateRatio"]) {
            this.rateRatio = new fhir.Ratio(source.rateRatio);
        }
        if (source["rateRange"]) {
            this.rateRange = new fhir.Range(source.rateRange);
        }
        if (source["rateQuantity"]) {
            this.rateQuantity = new fhir.Quantity(source.rateQuantity);
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current DosageDoseAndRate contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a DosageDoseAndRate from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new DosageDoseAndRate(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `DosageDoseAndRate is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Indicates how the medication is/was taken or should be taken by the patient.
 */
export class Dosage extends fhir.BackboneElement {
    /**
     * Default constructor for Dosage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["additionalInstruction"]) {
            this.additionalInstruction = source.additionalInstruction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["asNeededBoolean"]) {
            this.asNeededBoolean = source.asNeededBoolean;
        }
        if (source["_asNeededBoolean"]) {
            this._asNeededBoolean = new fhir.FhirElement(source._asNeededBoolean);
        }
        if (source["asNeededCodeableConcept"]) {
            this.asNeededCodeableConcept = new fhir.CodeableConcept(source.asNeededCodeableConcept);
        }
        if (source["doseAndRate"]) {
            this.doseAndRate = source.doseAndRate.map((x) => new fhir.DosageDoseAndRate(x));
        }
        if (source["maxDosePerAdministration"]) {
            this.maxDosePerAdministration = new fhir.Quantity(source.maxDosePerAdministration);
        }
        if (source["maxDosePerLifetime"]) {
            this.maxDosePerLifetime = new fhir.Quantity(source.maxDosePerLifetime);
        }
        if (source["maxDosePerPeriod"]) {
            this.maxDosePerPeriod = new fhir.Ratio(source.maxDosePerPeriod);
        }
        if (source["method"]) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source["patientInstruction"]) {
            this.patientInstruction = source.patientInstruction;
        }
        if (source["_patientInstruction"]) {
            this._patientInstruction = new fhir.FhirElement(source._patientInstruction);
        }
        if (source["route"]) {
            this.route = new fhir.CodeableConcept(source.route);
        }
        if (source["sequence"]) {
            this.sequence = source.sequence;
        }
        if (source["_sequence"]) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source["site"]) {
            this.site = new fhir.CodeableConcept(source.site);
        }
        if (source["text"]) {
            this.text = source.text;
        }
        if (source["_text"]) {
            this._text = new fhir.FhirElement(source._text);
        }
        if (source["timing"]) {
            this.timing = new fhir.Timing(source.timing);
        }
    }
    /**
     * Check if the current Dosage contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Dosage from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new Dosage(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `Dosage is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
//# sourceMappingURL=Dosage.js.map