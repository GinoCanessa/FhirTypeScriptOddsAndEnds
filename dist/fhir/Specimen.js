// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Specimen
import * as fhir from '../fhir.js';
import { SpecimenCollectionMethodValueSet } from '../fhirValueSets/SpecimenCollectionMethodValueSet.js';
import { BodySiteValueSet } from '../fhirValueSets/BodySiteValueSet.js';
import { V20916ValueSet } from '../fhirValueSets/V20916ValueSet.js';
import { SpecimenProcessingProcedureValueSet } from '../fhirValueSets/SpecimenProcessingProcedureValueSet.js';
import { SpecimenContainerTypeValueSet } from '../fhirValueSets/SpecimenContainerTypeValueSet.js';
import { V20371ValueSet } from '../fhirValueSets/V20371ValueSet.js';
import { SpecimenStatusValueSet } from '../fhirValueSets/SpecimenStatusValueSet.js';
import { V20487ValueSet } from '../fhirValueSets/V20487ValueSet.js';
import { V20493ValueSet } from '../fhirValueSets/V20493ValueSet.js';
/**
 * Details concerning the specimen collection.
 */
export class SpecimenCollection extends fhir.BackboneElement {
    /**
     * Default constructor for SpecimenCollection - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['collector']) {
            this.collector = new fhir.Reference(source.collector);
        }
        if (source['collectedDateTime']) {
            this.collectedDateTime = source.collectedDateTime;
        }
        if (source['_collectedDateTime']) {
            this._collectedDateTime = new fhir.FhirElement(source._collectedDateTime);
        }
        if (source['collectedPeriod']) {
            this.collectedPeriod = new fhir.Period(source.collectedPeriod);
        }
        if (source['duration']) {
            this.duration = new fhir.Duration(source.duration);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite);
        }
        if (source['fastingStatusCodeableConcept']) {
            this.fastingStatusCodeableConcept = new fhir.CodeableConcept(source.fastingStatusCodeableConcept);
        }
        if (source['fastingStatusDuration']) {
            this.fastingStatusDuration = new fhir.Duration(source.fastingStatusDuration);
        }
    }
    /**
     * Example-bound Value Set for method
     */
    static methodExampleValueSet() {
        return SpecimenCollectionMethodValueSet;
    }
    /**
     * Example-bound Value Set for bodySite
     */
    static bodySiteExampleValueSet() {
        return BodySiteValueSet;
    }
    /**
     * Extensible-bound Value Set for fastingStatusCodeableConcept
     */
    static fastingStatusCodeableConceptExtensibleValueSet() {
        return V20916ValueSet;
    }
    /**
     * Extensible-bound Value Set for fastingStatusDuration
     */
    static fastingStatusDurationExtensibleValueSet() {
        return V20916ValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["collector"]) {
            results.push(...this.collector.doModelValidation());
        }
        if (this["_collectedDateTime"]) {
            results.push(...this._collectedDateTime.doModelValidation());
        }
        if (this["collectedPeriod"]) {
            results.push(...this.collectedPeriod.doModelValidation());
        }
        if (this["duration"]) {
            results.push(...this.duration.doModelValidation());
        }
        if (this["quantity"]) {
            results.push(...this.quantity.doModelValidation());
        }
        if (this["method"]) {
            results.push(...this.method.doModelValidation());
        }
        if (this["bodySite"]) {
            results.push(...this.bodySite.doModelValidation());
        }
        if (this["fastingStatusCodeableConcept"]) {
            results.push(...this.fastingStatusCodeableConcept.doModelValidation());
        }
        if (this["fastingStatusDuration"]) {
            results.push(...this.fastingStatusDuration.doModelValidation());
        }
        return results;
    }
}
/**
 * Details concerning processing and processing steps for the specimen.
 */
export class SpecimenProcessing extends fhir.BackboneElement {
    /**
     * Default constructor for SpecimenProcessing - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['procedure']) {
            this.procedure = new fhir.CodeableConcept(source.procedure);
        }
        if (source['additive']) {
            this.additive = source.additive.map((x) => new fhir.Reference(x));
        }
        if (source['timeDateTime']) {
            this.timeDateTime = source.timeDateTime;
        }
        if (source['_timeDateTime']) {
            this._timeDateTime = new fhir.FhirElement(source._timeDateTime);
        }
        if (source['timePeriod']) {
            this.timePeriod = new fhir.Period(source.timePeriod);
        }
    }
    /**
     * Example-bound Value Set for procedure
     */
    static procedureExampleValueSet() {
        return SpecimenProcessingProcedureValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["procedure"]) {
            results.push(...this.procedure.doModelValidation());
        }
        if (this["additive"]) {
            this.additive.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_timeDateTime"]) {
            results.push(...this._timeDateTime.doModelValidation());
        }
        if (this["timePeriod"]) {
            results.push(...this.timePeriod.doModelValidation());
        }
        return results;
    }
}
/**
 * The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.
 */
export class SpecimenContainer extends fhir.BackboneElement {
    /**
     * Default constructor for SpecimenContainer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['capacity']) {
            this.capacity = new fhir.Quantity(source.capacity);
        }
        if (source['specimenQuantity']) {
            this.specimenQuantity = new fhir.Quantity(source.specimenQuantity);
        }
        if (source['additiveCodeableConcept']) {
            this.additiveCodeableConcept = new fhir.CodeableConcept(source.additiveCodeableConcept);
        }
        if (source['additiveReference']) {
            this.additiveReference = new fhir.Reference(source.additiveReference);
        }
    }
    /**
     * Example-bound Value Set for type
     */
    static typeExampleValueSet() {
        return SpecimenContainerTypeValueSet;
    }
    /**
     * Example-bound Value Set for additiveCodeableConcept
     */
    static additiveCodeableConceptExampleValueSet() {
        return V20371ValueSet;
    }
    /**
     * Example-bound Value Set for additiveReference
     */
    static additiveReferenceExampleValueSet() {
        return V20371ValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["capacity"]) {
            results.push(...this.capacity.doModelValidation());
        }
        if (this["specimenQuantity"]) {
            results.push(...this.specimenQuantity.doModelValidation());
        }
        if (this["additiveCodeableConcept"]) {
            results.push(...this.additiveCodeableConcept.doModelValidation());
        }
        if (this["additiveReference"]) {
            results.push(...this.additiveReference.doModelValidation());
        }
        return results;
    }
}
/**
 * A sample to be used for analysis.
 */
export class Specimen extends fhir.DomainResource {
    /**
     * Default constructor for Specimen - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Specimen';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['accessionIdentifier']) {
            this.accessionIdentifier = new fhir.Identifier(source.accessionIdentifier);
        }
        if (source['status']) {
            this.status = source.status;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['receivedTime']) {
            this.receivedTime = source.receivedTime;
        }
        if (source['_receivedTime']) {
            this._receivedTime = new fhir.FhirElement(source._receivedTime);
        }
        if (source['parent']) {
            this.parent = source.parent.map((x) => new fhir.Reference(x));
        }
        if (source['request']) {
            this.request = source.request.map((x) => new fhir.Reference(x));
        }
        if (source['collection']) {
            this.collection = new fhir.SpecimenCollection(source.collection);
        }
        if (source['processing']) {
            this.processing = source.processing.map((x) => new fhir.SpecimenProcessing(x));
        }
        if (source['container']) {
            this.container = source.container.map((x) => new fhir.SpecimenContainer(x));
        }
        if (source['condition']) {
            this.condition = source.condition.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return SpecimenStatusValueSet;
    }
    /**
     * Example-bound Value Set for type
     */
    static typeExampleValueSet() {
        return V20487ValueSet;
    }
    /**
     * Extensible-bound Value Set for condition
     */
    static conditionExtensibleValueSet() {
        return V20493ValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: Specimen.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["accessionIdentifier"]) {
            results.push(...this.accessionIdentifier.doModelValidation());
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["subject"]) {
            results.push(...this.subject.doModelValidation());
        }
        if (this["_receivedTime"]) {
            results.push(...this._receivedTime.doModelValidation());
        }
        if (this["parent"]) {
            this.parent.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["request"]) {
            this.request.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["collection"]) {
            results.push(...this.collection.doModelValidation());
        }
        if (this["processing"]) {
            this.processing.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["container"]) {
            this.container.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["condition"]) {
            this.condition.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=Specimen.js.map