// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
 */
export class ClaimResponseItemAdjudication extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseItemAdjudication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["amount"]) {
            this.amount = new fhir.Money(source.amount);
        }
        this.category = null;
        if (source["category"]) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (this.category === undefined) {
            this.category = null;
        }
        if (source["reason"]) {
            this.reason = new fhir.CodeableConcept(source.reason);
        }
        if (source["value"]) {
            this.value = source.value;
        }
        if (source["_value"]) {
            this._value = new fhir.FhirElement(source._value);
        }
    }
    /**
     * Check if the current ClaimResponseItemAdjudication contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["category"] === undefined) {
            missingElements.push("category");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClaimResponseItemAdjudication from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ClaimResponseItemAdjudication(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimResponseItemAdjudication is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A sub-detail adjudication of a simple product or service.
 */
export class ClaimResponseItemDetailSubDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseItemDetailSubDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["adjudication"]) {
            this.adjudication = source.adjudication.map((x) => new fhir.ClaimResponseItemAdjudication(x));
        }
        if (source["noteNumber"]) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source["_noteNumber"]) {
            this._noteNumber = source._noteNumber.map((x) => new fhir.FhirElement(x));
        }
        this.subDetailSequence = null;
        if (source["subDetailSequence"]) {
            this.subDetailSequence = source.subDetailSequence;
        }
        if (this.subDetailSequence === undefined) {
            this.subDetailSequence = null;
        }
        if (source["_subDetailSequence"]) {
            this._subDetailSequence = new fhir.FhirElement(source._subDetailSequence);
        }
    }
    /**
     * Check if the current ClaimResponseItemDetailSubDetail contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["subDetailSequence"] === undefined) {
            missingElements.push("subDetailSequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClaimResponseItemDetailSubDetail from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ClaimResponseItemDetailSubDetail(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimResponseItemDetailSubDetail is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A claim detail. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
export class ClaimResponseItemDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseItemDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.adjudication = null;
        if (source["adjudication"]) {
            this.adjudication = source.adjudication.map((x) => new fhir.ClaimResponseItemAdjudication(x));
        }
        if (this.adjudication === undefined) {
            this.adjudication = null;
        }
        this.detailSequence = null;
        if (source["detailSequence"]) {
            this.detailSequence = source.detailSequence;
        }
        if (this.detailSequence === undefined) {
            this.detailSequence = null;
        }
        if (source["_detailSequence"]) {
            this._detailSequence = new fhir.FhirElement(source._detailSequence);
        }
        if (source["noteNumber"]) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source["_noteNumber"]) {
            this._noteNumber = source._noteNumber.map((x) => new fhir.FhirElement(x));
        }
        if (source["subDetail"]) {
            this.subDetail = source.subDetail.map((x) => new fhir.ClaimResponseItemDetailSubDetail(x));
        }
    }
    /**
     * Check if the current ClaimResponseItemDetail contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if ((!this["adjudication"]) || (this["adjudication"].length === 0)) {
            missingElements.push("adjudication");
        }
        if (this["detailSequence"] === undefined) {
            missingElements.push("detailSequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClaimResponseItemDetail from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ClaimResponseItemDetail(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimResponseItemDetail is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
 */
export class ClaimResponseItem extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.adjudication = null;
        if (source["adjudication"]) {
            this.adjudication = source.adjudication.map((x) => new fhir.ClaimResponseItemAdjudication(x));
        }
        if (this.adjudication === undefined) {
            this.adjudication = null;
        }
        if (source["detail"]) {
            this.detail = source.detail.map((x) => new fhir.ClaimResponseItemDetail(x));
        }
        this.itemSequence = null;
        if (source["itemSequence"]) {
            this.itemSequence = source.itemSequence;
        }
        if (this.itemSequence === undefined) {
            this.itemSequence = null;
        }
        if (source["_itemSequence"]) {
            this._itemSequence = new fhir.FhirElement(source._itemSequence);
        }
        if (source["noteNumber"]) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source["_noteNumber"]) {
            this._noteNumber = source._noteNumber.map((x) => new fhir.FhirElement(x));
        }
    }
    /**
     * Check if the current ClaimResponseItem contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if ((!this["adjudication"]) || (this["adjudication"].length === 0)) {
            missingElements.push("adjudication");
        }
        if (this["itemSequence"] === undefined) {
            missingElements.push("itemSequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClaimResponseItem from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ClaimResponseItem(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimResponseItem is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The third-tier service adjudications for payor added services.
 */
export class ClaimResponseAddItemDetailSubDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseAddItemDetailSubDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.adjudication = null;
        if (source["adjudication"]) {
            this.adjudication = source.adjudication.map((x) => new fhir.ClaimResponseItemAdjudication(x));
        }
        if (this.adjudication === undefined) {
            this.adjudication = null;
        }
        if (source["factor"]) {
            this.factor = source.factor;
        }
        if (source["_factor"]) {
            this._factor = new fhir.FhirElement(source._factor);
        }
        if (source["modifier"]) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["net"]) {
            this.net = new fhir.Money(source.net);
        }
        if (source["noteNumber"]) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source["_noteNumber"]) {
            this._noteNumber = source._noteNumber.map((x) => new fhir.FhirElement(x));
        }
        this.productOrService = null;
        if (source["productOrService"]) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        if (this.productOrService === undefined) {
            this.productOrService = null;
        }
        if (source["quantity"]) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source["unitPrice"]) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
    }
    /**
     * Check if the current ClaimResponseAddItemDetailSubDetail contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if ((!this["adjudication"]) || (this["adjudication"].length === 0)) {
            missingElements.push("adjudication");
        }
        if (this["productOrService"] === undefined) {
            missingElements.push("productOrService");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClaimResponseAddItemDetailSubDetail from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ClaimResponseAddItemDetailSubDetail(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimResponseAddItemDetailSubDetail is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The second-tier service adjudications for payor added services.
 */
export class ClaimResponseAddItemDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseAddItemDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.adjudication = null;
        if (source["adjudication"]) {
            this.adjudication = source.adjudication.map((x) => new fhir.ClaimResponseItemAdjudication(x));
        }
        if (this.adjudication === undefined) {
            this.adjudication = null;
        }
        if (source["factor"]) {
            this.factor = source.factor;
        }
        if (source["_factor"]) {
            this._factor = new fhir.FhirElement(source._factor);
        }
        if (source["modifier"]) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["net"]) {
            this.net = new fhir.Money(source.net);
        }
        if (source["noteNumber"]) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source["_noteNumber"]) {
            this._noteNumber = source._noteNumber.map((x) => new fhir.FhirElement(x));
        }
        this.productOrService = null;
        if (source["productOrService"]) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        if (this.productOrService === undefined) {
            this.productOrService = null;
        }
        if (source["quantity"]) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source["subDetail"]) {
            this.subDetail = source.subDetail.map((x) => new fhir.ClaimResponseAddItemDetailSubDetail(x));
        }
        if (source["unitPrice"]) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
    }
    /**
     * Check if the current ClaimResponseAddItemDetail contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if ((!this["adjudication"]) || (this["adjudication"].length === 0)) {
            missingElements.push("adjudication");
        }
        if (this["productOrService"] === undefined) {
            missingElements.push("productOrService");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClaimResponseAddItemDetail from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ClaimResponseAddItemDetail(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimResponseAddItemDetail is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The first-tier service adjudications for payor added product or service lines.
 */
export class ClaimResponseAddItem extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseAddItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.adjudication = null;
        if (source["adjudication"]) {
            this.adjudication = source.adjudication.map((x) => new fhir.ClaimResponseItemAdjudication(x));
        }
        if (this.adjudication === undefined) {
            this.adjudication = null;
        }
        if (source["bodySite"]) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite);
        }
        if (source["detail"]) {
            this.detail = source.detail.map((x) => new fhir.ClaimResponseAddItemDetail(x));
        }
        if (source["detailSequence"]) {
            this.detailSequence = source.detailSequence.map((x) => (x));
        }
        if (source["_detailSequence"]) {
            this._detailSequence = source._detailSequence.map((x) => new fhir.FhirElement(x));
        }
        if (source["factor"]) {
            this.factor = source.factor;
        }
        if (source["_factor"]) {
            this._factor = new fhir.FhirElement(source._factor);
        }
        if (source["itemSequence"]) {
            this.itemSequence = source.itemSequence.map((x) => (x));
        }
        if (source["_itemSequence"]) {
            this._itemSequence = source._itemSequence.map((x) => new fhir.FhirElement(x));
        }
        if (source["locationCodeableConcept"]) {
            this.locationCodeableConcept = new fhir.CodeableConcept(source.locationCodeableConcept);
        }
        if (source["locationAddress"]) {
            this.locationAddress = new fhir.Address(source.locationAddress);
        }
        if (source["locationReference"]) {
            this.locationReference = new fhir.Reference(source.locationReference);
        }
        if (source["modifier"]) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["net"]) {
            this.net = new fhir.Money(source.net);
        }
        if (source["noteNumber"]) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source["_noteNumber"]) {
            this._noteNumber = source._noteNumber.map((x) => new fhir.FhirElement(x));
        }
        this.productOrService = null;
        if (source["productOrService"]) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        if (this.productOrService === undefined) {
            this.productOrService = null;
        }
        if (source["programCode"]) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["provider"]) {
            this.provider = source.provider.map((x) => new fhir.Reference(x));
        }
        if (source["quantity"]) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source["servicedDate"]) {
            this.servicedDate = source.servicedDate;
        }
        if (source["_servicedDate"]) {
            this._servicedDate = new fhir.FhirElement(source._servicedDate);
        }
        if (source["servicedPeriod"]) {
            this.servicedPeriod = new fhir.Period(source.servicedPeriod);
        }
        if (source["subdetailSequence"]) {
            this.subdetailSequence = source.subdetailSequence.map((x) => (x));
        }
        if (source["_subdetailSequence"]) {
            this._subdetailSequence = source._subdetailSequence.map((x) => new fhir.FhirElement(x));
        }
        if (source["subSite"]) {
            this.subSite = source.subSite.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["unitPrice"]) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
    }
    /**
     * Check if the current ClaimResponseAddItem contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if ((!this["adjudication"]) || (this["adjudication"].length === 0)) {
            missingElements.push("adjudication");
        }
        if (this["productOrService"] === undefined) {
            missingElements.push("productOrService");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClaimResponseAddItem from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ClaimResponseAddItem(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimResponseAddItem is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Totals for amounts submitted, co-pays, benefits payable etc.
 */
export class ClaimResponseTotal extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseTotal - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.amount = null;
        if (source["amount"]) {
            this.amount = new fhir.Money(source.amount);
        }
        if (this.amount === undefined) {
            this.amount = null;
        }
        this.category = null;
        if (source["category"]) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (this.category === undefined) {
            this.category = null;
        }
    }
    /**
     * Check if the current ClaimResponseTotal contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["amount"] === undefined) {
            missingElements.push("amount");
        }
        if (this["category"] === undefined) {
            missingElements.push("category");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClaimResponseTotal from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ClaimResponseTotal(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimResponseTotal is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Payment details for the adjudication of the claim.
 */
export class ClaimResponsePayment extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponsePayment - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["adjustment"]) {
            this.adjustment = new fhir.Money(source.adjustment);
        }
        if (source["adjustmentReason"]) {
            this.adjustmentReason = new fhir.CodeableConcept(source.adjustmentReason);
        }
        this.amount = null;
        if (source["amount"]) {
            this.amount = new fhir.Money(source.amount);
        }
        if (this.amount === undefined) {
            this.amount = null;
        }
        if (source["date"]) {
            this.date = source.date;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["identifier"]) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        this.type = null;
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (this.type === undefined) {
            this.type = null;
        }
    }
    /**
     * Check if the current ClaimResponsePayment contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["amount"] === undefined) {
            missingElements.push("amount");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClaimResponsePayment from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ClaimResponsePayment(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimResponsePayment is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A note that describes or explains adjudication results in a human readable form.
 */
export class ClaimResponseProcessNote extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseProcessNote - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["language"]) {
            this.language = new fhir.CodeableConcept(source.language);
        }
        if (source["number"]) {
            this.number = source.number;
        }
        if (source["_number"]) {
            this._number = new fhir.FhirElement(source._number);
        }
        this.text = null;
        if (source["text"]) {
            this.text = source.text;
        }
        if (this.text === undefined) {
            this.text = null;
        }
        if (source["_text"]) {
            this._text = new fhir.FhirElement(source._text);
        }
        if (source["type"]) {
            this.type = source.type;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
    }
    /**
     * Check if the current ClaimResponseProcessNote contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["text"] === undefined) {
            missingElements.push("text");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClaimResponseProcessNote from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ClaimResponseProcessNote(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimResponseProcessNote is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export class ClaimResponseInsurance extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseInsurance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["businessArrangement"]) {
            this.businessArrangement = source.businessArrangement;
        }
        if (source["_businessArrangement"]) {
            this._businessArrangement = new fhir.FhirElement(source._businessArrangement);
        }
        if (source["claimResponse"]) {
            this.claimResponse = new fhir.Reference(source.claimResponse);
        }
        this.coverage = null;
        if (source["coverage"]) {
            this.coverage = new fhir.Reference(source.coverage);
        }
        if (this.coverage === undefined) {
            this.coverage = null;
        }
        this.focal = null;
        if (source["focal"]) {
            this.focal = source.focal;
        }
        if (this.focal === undefined) {
            this.focal = null;
        }
        if (source["_focal"]) {
            this._focal = new fhir.FhirElement(source._focal);
        }
        this.sequence = null;
        if (source["sequence"]) {
            this.sequence = source.sequence;
        }
        if (this.sequence === undefined) {
            this.sequence = null;
        }
        if (source["_sequence"]) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
    }
    /**
     * Check if the current ClaimResponseInsurance contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["coverage"] === undefined) {
            missingElements.push("coverage");
        }
        if (this["focal"] === undefined) {
            missingElements.push("focal");
        }
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClaimResponseInsurance from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ClaimResponseInsurance(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimResponseInsurance is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * If the request contains errors then an error element should be provided and no adjudication related sections (item, addItem, or payment) should be present.
 */
export class ClaimResponseError extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseError - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.code = null;
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (this.code === undefined) {
            this.code = null;
        }
        if (source["detailSequence"]) {
            this.detailSequence = source.detailSequence;
        }
        if (source["_detailSequence"]) {
            this._detailSequence = new fhir.FhirElement(source._detailSequence);
        }
        if (source["itemSequence"]) {
            this.itemSequence = source.itemSequence;
        }
        if (source["_itemSequence"]) {
            this._itemSequence = new fhir.FhirElement(source._itemSequence);
        }
        if (source["subDetailSequence"]) {
            this.subDetailSequence = source.subDetailSequence;
        }
        if (source["_subDetailSequence"]) {
            this._subDetailSequence = new fhir.FhirElement(source._subDetailSequence);
        }
    }
    /**
     * Check if the current ClaimResponseError contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClaimResponseError from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ClaimResponseError(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimResponseError is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * This resource provides the adjudication details from the processing of a Claim resource.
 */
export class ClaimResponse extends fhir.DomainResource {
    /**
     * Default constructor for ClaimResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'ClaimResponse';
        if (source["addItem"]) {
            this.addItem = source.addItem.map((x) => new fhir.ClaimResponseAddItem(x));
        }
        if (source["adjudication"]) {
            this.adjudication = source.adjudication.map((x) => new fhir.ClaimResponseItemAdjudication(x));
        }
        if (source["communicationRequest"]) {
            this.communicationRequest = source.communicationRequest.map((x) => new fhir.Reference(x));
        }
        this.created = null;
        if (source["created"]) {
            this.created = source.created;
        }
        if (this.created === undefined) {
            this.created = null;
        }
        if (source["_created"]) {
            this._created = new fhir.FhirElement(source._created);
        }
        if (source["disposition"]) {
            this.disposition = source.disposition;
        }
        if (source["_disposition"]) {
            this._disposition = new fhir.FhirElement(source._disposition);
        }
        if (source["error"]) {
            this.error = source.error.map((x) => new fhir.ClaimResponseError(x));
        }
        if (source["form"]) {
            this.form = new fhir.Attachment(source.form);
        }
        if (source["formCode"]) {
            this.formCode = new fhir.CodeableConcept(source.formCode);
        }
        if (source["fundsReserve"]) {
            this.fundsReserve = new fhir.CodeableConcept(source.fundsReserve);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["insurance"]) {
            this.insurance = source.insurance.map((x) => new fhir.ClaimResponseInsurance(x));
        }
        this.insurer = null;
        if (source["insurer"]) {
            this.insurer = new fhir.Reference(source.insurer);
        }
        if (this.insurer === undefined) {
            this.insurer = null;
        }
        if (source["item"]) {
            this.item = source.item.map((x) => new fhir.ClaimResponseItem(x));
        }
        this.outcome = null;
        if (source["outcome"]) {
            this.outcome = source.outcome;
        }
        if (this.outcome === undefined) {
            this.outcome = null;
        }
        if (source["_outcome"]) {
            this._outcome = new fhir.FhirElement(source._outcome);
        }
        this.patient = null;
        if (source["patient"]) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (this.patient === undefined) {
            this.patient = null;
        }
        if (source["payeeType"]) {
            this.payeeType = new fhir.CodeableConcept(source.payeeType);
        }
        if (source["payment"]) {
            this.payment = new fhir.ClaimResponsePayment(source.payment);
        }
        if (source["preAuthPeriod"]) {
            this.preAuthPeriod = new fhir.Period(source.preAuthPeriod);
        }
        if (source["preAuthRef"]) {
            this.preAuthRef = source.preAuthRef;
        }
        if (source["_preAuthRef"]) {
            this._preAuthRef = new fhir.FhirElement(source._preAuthRef);
        }
        if (source["processNote"]) {
            this.processNote = source.processNote.map((x) => new fhir.ClaimResponseProcessNote(x));
        }
        if (source["request"]) {
            this.request = new fhir.Reference(source.request);
        }
        if (source["requestor"]) {
            this.requestor = new fhir.Reference(source.requestor);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["subType"]) {
            this.subType = new fhir.CodeableConcept(source.subType);
        }
        if (source["total"]) {
            this.total = source.total.map((x) => new fhir.ClaimResponseTotal(x));
        }
        this.type = null;
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (this.type === undefined) {
            this.type = null;
        }
        this.use = null;
        if (source["use"]) {
            this.use = source.use;
        }
        if (this.use === undefined) {
            this.use = null;
        }
        if (source["_use"]) {
            this._use = new fhir.FhirElement(source._use);
        }
    }
    /**
     * Check if the current ClaimResponse contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["created"] === undefined) {
            missingElements.push("created");
        }
        if (this["insurer"] === undefined) {
            missingElements.push("insurer");
        }
        if (this["outcome"] === undefined) {
            missingElements.push("outcome");
        }
        if (this["patient"] === undefined) {
            missingElements.push("patient");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        if (this["use"] === undefined) {
            missingElements.push("use");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ClaimResponse from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ClaimResponse(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ClaimResponse is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the ClaimResponse.processNote.type field
 */
export var ClaimResponseProcessNoteTypeEnum;
(function (ClaimResponseProcessNoteTypeEnum) {
    ClaimResponseProcessNoteTypeEnum["DISPLAY"] = "display";
    ClaimResponseProcessNoteTypeEnum["PRINT"] = "print";
    ClaimResponseProcessNoteTypeEnum["PRINTOPER"] = "printoper";
})(ClaimResponseProcessNoteTypeEnum || (ClaimResponseProcessNoteTypeEnum = {}));
/**
 * Code Values for the ClaimResponse.outcome field
 */
export var ClaimResponseOutcomeEnum;
(function (ClaimResponseOutcomeEnum) {
    ClaimResponseOutcomeEnum["QUEUED"] = "queued";
    ClaimResponseOutcomeEnum["COMPLETE"] = "complete";
    ClaimResponseOutcomeEnum["ERROR"] = "error";
    ClaimResponseOutcomeEnum["PARTIAL"] = "partial";
})(ClaimResponseOutcomeEnum || (ClaimResponseOutcomeEnum = {}));
/**
 * Code Values for the ClaimResponse.status field
 */
export var ClaimResponseStatusEnum;
(function (ClaimResponseStatusEnum) {
    ClaimResponseStatusEnum["ACTIVE"] = "active";
    ClaimResponseStatusEnum["CANCELLED"] = "cancelled";
    ClaimResponseStatusEnum["DRAFT"] = "draft";
    ClaimResponseStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(ClaimResponseStatusEnum || (ClaimResponseStatusEnum = {}));
/**
 * Code Values for the ClaimResponse.use field
 */
export var ClaimResponseUseEnum;
(function (ClaimResponseUseEnum) {
    ClaimResponseUseEnum["CLAIM"] = "claim";
    ClaimResponseUseEnum["PREAUTHORIZATION"] = "preauthorization";
    ClaimResponseUseEnum["PREDETERMINATION"] = "predetermination";
})(ClaimResponseUseEnum || (ClaimResponseUseEnum = {}));
//# sourceMappingURL=ClaimResponse.js.map