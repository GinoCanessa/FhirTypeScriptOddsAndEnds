// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ClaimResponse
import * as fhir from '../fhir.js';
import { AdjudicationValueSet, } from '../fhirValueSets/AdjudicationValueSet.js';
import { AdjudicationReasonValueSet, } from '../fhirValueSets/AdjudicationReasonValueSet.js';
import { ServiceUsclsValueSet, } from '../fhirValueSets/ServiceUsclsValueSet.js';
import { ClaimModifiersValueSet, } from '../fhirValueSets/ClaimModifiersValueSet.js';
import { ExProgramCodeValueSet, } from '../fhirValueSets/ExProgramCodeValueSet.js';
import { ToothValueSet, } from '../fhirValueSets/ToothValueSet.js';
import { SurfaceValueSet, } from '../fhirValueSets/SurfaceValueSet.js';
import { ExPaymenttypeValueSet, } from '../fhirValueSets/ExPaymenttypeValueSet.js';
import { PaymentAdjustmentReasonValueSet, } from '../fhirValueSets/PaymentAdjustmentReasonValueSet.js';
import { NoteTypeValueSet, } from '../fhirValueSets/NoteTypeValueSet.js';
import { LanguagesValueSet, } from '../fhirValueSets/LanguagesValueSet.js';
import { AdjudicationErrorValueSet, } from '../fhirValueSets/AdjudicationErrorValueSet.js';
import { FmStatusValueSet, } from '../fhirValueSets/FmStatusValueSet.js';
import { ClaimTypeValueSet, } from '../fhirValueSets/ClaimTypeValueSet.js';
import { ClaimSubtypeValueSet, } from '../fhirValueSets/ClaimSubtypeValueSet.js';
import { ClaimUseValueSet, } from '../fhirValueSets/ClaimUseValueSet.js';
import { RemittanceOutcomeValueSet, } from '../fhirValueSets/RemittanceOutcomeValueSet.js';
import { PayeetypeValueSet, } from '../fhirValueSets/PayeetypeValueSet.js';
import { FundsreserveValueSet, } from '../fhirValueSets/FundsreserveValueSet.js';
import { FormsValueSet, } from '../fhirValueSets/FormsValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
 */
export class ClaimResponseItemAdjudication extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseItemAdjudication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ClaimResponseItemAdjudication';
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        else {
            this.category = null;
        }
        if (source['reason']) {
            this.reason = new fhir.CodeableConcept(source.reason);
        }
        if (source['amount']) {
            this.amount = new fhir.Money(source.amount);
        }
        if (source['value']) {
            this.value = new fhir.FhirDecimal({ value: source.value });
        }
    }
    /**
     * Example-bound Value Set for category
     */
    static categoryExampleValueSet() {
        return AdjudicationValueSet;
    }
    /**
     * Example-bound Value Set for reason
     */
    static reasonExampleValueSet() {
        return AdjudicationReasonValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['category']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property category:fhir.CodeableConcept fhir: ClaimResponse.item.adjudication.category:CodeableConcept", }));
        }
        if (this["category"]) {
            outcome.issue.push(...this.category.doModelValidation().issue);
        }
        if (this["reason"]) {
            outcome.issue.push(...this.reason.doModelValidation().issue);
        }
        if (this["amount"]) {
            outcome.issue.push(...this.amount.doModelValidation().issue);
        }
        if (this["value"]) {
            outcome.issue.push(...this.value.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * A sub-detail adjudication of a simple product or service.
 */
export class ClaimResponseItemDetailSubDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseItemDetailSubDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ClaimResponseItemDetailSubDetail';
        /**
         * The numbers associated with notes below which apply to the adjudication of this item.
         */
        this.noteNumber = [];
        /**
         * The adjudication results.
         */
        this.adjudication = [];
        if (source['subDetailSequence']) {
            this.subDetailSequence = new fhir.FhirPositiveInt({ value: source.subDetailSequence });
        }
        else {
            this.subDetailSequence = null;
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ClaimResponseItemAdjudication(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['subDetailSequence']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property subDetailSequence:fhir.FhirPositiveInt fhir: ClaimResponse.item.detail.subDetail.subDetailSequence:positiveInt", }));
        }
        if (this["subDetailSequence"]) {
            outcome.issue.push(...this.subDetailSequence.doModelValidation().issue);
        }
        if (this["noteNumber"]) {
            this.noteNumber.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["adjudication"]) {
            this.adjudication.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * A claim detail. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
export class ClaimResponseItemDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseItemDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ClaimResponseItemDetail';
        /**
         * The numbers associated with notes below which apply to the adjudication of this item.
         */
        this.noteNumber = [];
        /**
         * The adjudication results.
         */
        this.adjudication = [];
        /**
         * A sub-detail adjudication of a simple product or service.
         */
        this.subDetail = [];
        if (source['detailSequence']) {
            this.detailSequence = new fhir.FhirPositiveInt({ value: source.detailSequence });
        }
        else {
            this.detailSequence = null;
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ClaimResponseItemAdjudication(x));
        }
        else {
            this.adjudication = null;
        }
        if (source['subDetail']) {
            this.subDetail = source.subDetail.map((x) => new fhir.ClaimResponseItemDetailSubDetail(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['detailSequence']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property detailSequence:fhir.FhirPositiveInt fhir: ClaimResponse.item.detail.detailSequence:positiveInt", }));
        }
        if (this["detailSequence"]) {
            outcome.issue.push(...this.detailSequence.doModelValidation().issue);
        }
        if (this["noteNumber"]) {
            this.noteNumber.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['adjudication']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.item.detail.adjudication:ClaimResponse.item.adjudication", }));
        }
        else if (!Array.isArray(this.adjudication)) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue, diagnostics: "Found scalar in array property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.item.detail.adjudication:ClaimResponse.item.adjudication", }));
        }
        else if (this.adjudication.length === 0) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.item.detail.adjudication:ClaimResponse.item.adjudication", }));
        }
        if (this["adjudication"]) {
            this.adjudication.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["subDetail"]) {
            this.subDetail.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
 */
export class ClaimResponseItem extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ClaimResponseItem';
        /**
         * The numbers associated with notes below which apply to the adjudication of this item.
         */
        this.noteNumber = [];
        /**
         * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
         */
        this.adjudication = [];
        /**
         * A claim detail. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
         */
        this.detail = [];
        if (source['itemSequence']) {
            this.itemSequence = new fhir.FhirPositiveInt({ value: source.itemSequence });
        }
        else {
            this.itemSequence = null;
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ClaimResponseItemAdjudication(x));
        }
        else {
            this.adjudication = null;
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.ClaimResponseItemDetail(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['itemSequence']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property itemSequence:fhir.FhirPositiveInt fhir: ClaimResponse.item.itemSequence:positiveInt", }));
        }
        if (this["itemSequence"]) {
            outcome.issue.push(...this.itemSequence.doModelValidation().issue);
        }
        if (this["noteNumber"]) {
            this.noteNumber.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['adjudication']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.item.adjudication:adjudication", }));
        }
        else if (!Array.isArray(this.adjudication)) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue, diagnostics: "Found scalar in array property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.item.adjudication:adjudication", }));
        }
        else if (this.adjudication.length === 0) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.item.adjudication:adjudication", }));
        }
        if (this["adjudication"]) {
            this.adjudication.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["detail"]) {
            this.detail.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * The third-tier service adjudications for payor added services.
 */
export class ClaimResponseAddItemDetailSubDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseAddItemDetailSubDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ClaimResponseAddItemDetailSubDetail';
        /**
         * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
         */
        this.modifier = [];
        /**
         * The numbers associated with notes below which apply to the adjudication of this item.
         */
        this.noteNumber = [];
        /**
         * The adjudication results.
         */
        this.adjudication = [];
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ClaimResponseItemAdjudication(x));
        }
        else {
            this.adjudication = null;
        }
    }
    /**
     * Example-bound Value Set for productOrService
     */
    static productOrServiceExampleValueSet() {
        return ServiceUsclsValueSet;
    }
    /**
     * Example-bound Value Set for modifier
     */
    static modifierExampleValueSet() {
        return ClaimModifiersValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['productOrService']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property productOrService:fhir.CodeableConcept fhir: ClaimResponse.addItem.detail.subDetail.productOrService:CodeableConcept", }));
        }
        if (this["productOrService"]) {
            outcome.issue.push(...this.productOrService.doModelValidation().issue);
        }
        if (this["modifier"]) {
            this.modifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["quantity"]) {
            outcome.issue.push(...this.quantity.doModelValidation().issue);
        }
        if (this["unitPrice"]) {
            outcome.issue.push(...this.unitPrice.doModelValidation().issue);
        }
        if (this["factor"]) {
            outcome.issue.push(...this.factor.doModelValidation().issue);
        }
        if (this["net"]) {
            outcome.issue.push(...this.net.doModelValidation().issue);
        }
        if (this["noteNumber"]) {
            this.noteNumber.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['adjudication']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.detail.subDetail.adjudication:ClaimResponse.item.adjudication", }));
        }
        else if (!Array.isArray(this.adjudication)) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue, diagnostics: "Found scalar in array property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.detail.subDetail.adjudication:ClaimResponse.item.adjudication", }));
        }
        else if (this.adjudication.length === 0) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.detail.subDetail.adjudication:ClaimResponse.item.adjudication", }));
        }
        if (this["adjudication"]) {
            this.adjudication.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * The second-tier service adjudications for payor added services.
 */
export class ClaimResponseAddItemDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseAddItemDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ClaimResponseAddItemDetail';
        /**
         * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
         */
        this.modifier = [];
        /**
         * The numbers associated with notes below which apply to the adjudication of this item.
         */
        this.noteNumber = [];
        /**
         * The adjudication results.
         */
        this.adjudication = [];
        /**
         * The third-tier service adjudications for payor added services.
         */
        this.subDetail = [];
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ClaimResponseItemAdjudication(x));
        }
        else {
            this.adjudication = null;
        }
        if (source['subDetail']) {
            this.subDetail = source.subDetail.map((x) => new fhir.ClaimResponseAddItemDetailSubDetail(x));
        }
    }
    /**
     * Example-bound Value Set for productOrService
     */
    static productOrServiceExampleValueSet() {
        return ServiceUsclsValueSet;
    }
    /**
     * Example-bound Value Set for modifier
     */
    static modifierExampleValueSet() {
        return ClaimModifiersValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['productOrService']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property productOrService:fhir.CodeableConcept fhir: ClaimResponse.addItem.detail.productOrService:CodeableConcept", }));
        }
        if (this["productOrService"]) {
            outcome.issue.push(...this.productOrService.doModelValidation().issue);
        }
        if (this["modifier"]) {
            this.modifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["quantity"]) {
            outcome.issue.push(...this.quantity.doModelValidation().issue);
        }
        if (this["unitPrice"]) {
            outcome.issue.push(...this.unitPrice.doModelValidation().issue);
        }
        if (this["factor"]) {
            outcome.issue.push(...this.factor.doModelValidation().issue);
        }
        if (this["net"]) {
            outcome.issue.push(...this.net.doModelValidation().issue);
        }
        if (this["noteNumber"]) {
            this.noteNumber.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['adjudication']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.detail.adjudication:ClaimResponse.item.adjudication", }));
        }
        else if (!Array.isArray(this.adjudication)) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue, diagnostics: "Found scalar in array property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.detail.adjudication:ClaimResponse.item.adjudication", }));
        }
        else if (this.adjudication.length === 0) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.detail.adjudication:ClaimResponse.item.adjudication", }));
        }
        if (this["adjudication"]) {
            this.adjudication.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["subDetail"]) {
            this.subDetail.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * The first-tier service adjudications for payor added product or service lines.
 */
export class ClaimResponseAddItem extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseAddItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ClaimResponseAddItem';
        /**
         * Claim items which this service line is intended to replace.
         */
        this.itemSequence = [];
        /**
         * The sequence number of the details within the claim item which this line is intended to replace.
         */
        this.detailSequence = [];
        /**
         * The sequence number of the sub-details within the details within the claim item which this line is intended to replace.
         */
        this.subdetailSequence = [];
        /**
         * The providers who are authorized for the services rendered to the patient.
         */
        this.provider = [];
        /**
         * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
         */
        this.modifier = [];
        /**
         * For example: Neonatal program, child dental program or drug users recovery program.
         */
        this.programCode = [];
        this.__servicedIsChoice = true;
        this.__locationIsChoice = true;
        /**
         * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
         */
        this.subSite = [];
        /**
         * The numbers associated with notes below which apply to the adjudication of this item.
         */
        this.noteNumber = [];
        /**
         * The adjudication results.
         */
        this.adjudication = [];
        /**
         * The second-tier service adjudications for payor added services.
         */
        this.detail = [];
        if (source['itemSequence']) {
            this.itemSequence = source.itemSequence.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        if (source['detailSequence']) {
            this.detailSequence = source.detailSequence.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        if (source['subdetailSequence']) {
            this.subdetailSequence = source.subdetailSequence.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        if (source['provider']) {
            this.provider = source.provider.map((x) => new fhir.Reference(x));
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['programCode']) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['serviced']) {
            this.serviced = source.serviced;
        }
        else if (source['servicedDate']) {
            this.serviced = new fhir.FhirDate({ value: source.servicedDate });
        }
        else if (source['servicedPeriod']) {
            this.serviced = new fhir.Period(source.servicedPeriod);
        }
        if (source['location']) {
            this.location = source.location;
        }
        else if (source['locationCodeableConcept']) {
            this.location = new fhir.CodeableConcept(source.locationCodeableConcept);
        }
        else if (source['locationAddress']) {
            this.location = new fhir.Address(source.locationAddress);
        }
        else if (source['locationReference']) {
            this.location = new fhir.Reference(source.locationReference);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite);
        }
        if (source['subSite']) {
            this.subSite = source.subSite.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ClaimResponseItemAdjudication(x));
        }
        else {
            this.adjudication = null;
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.ClaimResponseAddItemDetail(x));
        }
    }
    /**
     * Example-bound Value Set for productOrService
     */
    static productOrServiceExampleValueSet() {
        return ServiceUsclsValueSet;
    }
    /**
     * Example-bound Value Set for modifier
     */
    static modifierExampleValueSet() {
        return ClaimModifiersValueSet;
    }
    /**
     * Example-bound Value Set for programCode
     */
    static programCodeExampleValueSet() {
        return ExProgramCodeValueSet;
    }
    /**
     * Example-bound Value Set for bodySite
     */
    static bodySiteExampleValueSet() {
        return ToothValueSet;
    }
    /**
     * Example-bound Value Set for subSite
     */
    static subSiteExampleValueSet() {
        return SurfaceValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["itemSequence"]) {
            this.itemSequence.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["detailSequence"]) {
            this.detailSequence.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["subdetailSequence"]) {
            this.subdetailSequence.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["provider"]) {
            this.provider.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['productOrService']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property productOrService:fhir.CodeableConcept fhir: ClaimResponse.addItem.productOrService:CodeableConcept", }));
        }
        if (this["productOrService"]) {
            outcome.issue.push(...this.productOrService.doModelValidation().issue);
        }
        if (this["modifier"]) {
            this.modifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["programCode"]) {
            this.programCode.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["quantity"]) {
            outcome.issue.push(...this.quantity.doModelValidation().issue);
        }
        if (this["unitPrice"]) {
            outcome.issue.push(...this.unitPrice.doModelValidation().issue);
        }
        if (this["factor"]) {
            outcome.issue.push(...this.factor.doModelValidation().issue);
        }
        if (this["net"]) {
            outcome.issue.push(...this.net.doModelValidation().issue);
        }
        if (this["bodySite"]) {
            outcome.issue.push(...this.bodySite.doModelValidation().issue);
        }
        if (this["subSite"]) {
            this.subSite.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["noteNumber"]) {
            this.noteNumber.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['adjudication']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.adjudication:ClaimResponse.item.adjudication", }));
        }
        else if (!Array.isArray(this.adjudication)) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue, diagnostics: "Found scalar in array property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.adjudication:ClaimResponse.item.adjudication", }));
        }
        else if (this.adjudication.length === 0) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.adjudication:ClaimResponse.item.adjudication", }));
        }
        if (this["adjudication"]) {
            this.adjudication.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["detail"]) {
            this.detail.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Totals for amounts submitted, co-pays, benefits payable etc.
 */
export class ClaimResponseTotal extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseTotal - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ClaimResponseTotal';
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        else {
            this.category = null;
        }
        if (source['amount']) {
            this.amount = new fhir.Money(source.amount);
        }
        else {
            this.amount = null;
        }
    }
    /**
     * Example-bound Value Set for category
     */
    static categoryExampleValueSet() {
        return AdjudicationValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['category']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property category:fhir.CodeableConcept fhir: ClaimResponse.total.category:CodeableConcept", }));
        }
        if (this["category"]) {
            outcome.issue.push(...this.category.doModelValidation().issue);
        }
        if (!this['amount']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property amount:fhir.Money fhir: ClaimResponse.total.amount:Money", }));
        }
        if (this["amount"]) {
            outcome.issue.push(...this.amount.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Payment details for the adjudication of the claim.
 */
export class ClaimResponsePayment extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponsePayment - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ClaimResponsePayment';
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['adjustment']) {
            this.adjustment = new fhir.Money(source.adjustment);
        }
        if (source['adjustmentReason']) {
            this.adjustmentReason = new fhir.CodeableConcept(source.adjustmentReason);
        }
        if (source['date']) {
            this.date = new fhir.FhirDate({ value: source.date });
        }
        if (source['amount']) {
            this.amount = new fhir.Money(source.amount);
        }
        else {
            this.amount = null;
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
    }
    /**
     * Example-bound Value Set for type
     */
    static typeExampleValueSet() {
        return ExPaymenttypeValueSet;
    }
    /**
     * Example-bound Value Set for adjustmentReason
     */
    static adjustmentReasonExampleValueSet() {
        return PaymentAdjustmentReasonValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['type']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property type:fhir.CodeableConcept fhir: ClaimResponse.payment.type:CodeableConcept", }));
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["adjustment"]) {
            outcome.issue.push(...this.adjustment.doModelValidation().issue);
        }
        if (this["adjustmentReason"]) {
            outcome.issue.push(...this.adjustmentReason.doModelValidation().issue);
        }
        if (this["date"]) {
            outcome.issue.push(...this.date.doModelValidation().issue);
        }
        if (!this['amount']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property amount:fhir.Money fhir: ClaimResponse.payment.amount:Money", }));
        }
        if (this["amount"]) {
            outcome.issue.push(...this.amount.doModelValidation().issue);
        }
        if (this["identifier"]) {
            outcome.issue.push(...this.identifier.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * A note that describes or explains adjudication results in a human readable form.
 */
export class ClaimResponseProcessNote extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseProcessNote - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ClaimResponseProcessNote';
        if (source['number']) {
            this.number = new fhir.FhirPositiveInt({ value: source.number });
        }
        if (source['type']) {
            this.type = source.type;
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        else {
            this.text = null;
        }
        if (source['language']) {
            this.language = new fhir.CodeableConcept(source.language);
        }
    }
    /**
     * Required-bound Value Set for type
     */
    static typeRequiredValueSet() {
        return NoteTypeValueSet;
    }
    /**
     * Preferred-bound Value Set for language
     */
    static languagePreferredValueSet() {
        return LanguagesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["number"]) {
            outcome.issue.push(...this.number.doModelValidation().issue);
        }
        if (!this['text']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property text:fhir.FhirString fhir: ClaimResponse.processNote.text:string", }));
        }
        if (this["text"]) {
            outcome.issue.push(...this.text.doModelValidation().issue);
        }
        if (this["language"]) {
            outcome.issue.push(...this.language.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export class ClaimResponseInsurance extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseInsurance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ClaimResponseInsurance';
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['focal']) {
            this.focal = new fhir.FhirBoolean({ value: source.focal });
        }
        else {
            this.focal = null;
        }
        if (source['coverage']) {
            this.coverage = new fhir.Reference(source.coverage);
        }
        else {
            this.coverage = null;
        }
        if (source['businessArrangement']) {
            this.businessArrangement = new fhir.FhirString({ value: source.businessArrangement });
        }
        if (source['claimResponse']) {
            this.claimResponse = new fhir.Reference(source.claimResponse);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['sequence']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property sequence:fhir.FhirPositiveInt fhir: ClaimResponse.insurance.sequence:positiveInt", }));
        }
        if (this["sequence"]) {
            outcome.issue.push(...this.sequence.doModelValidation().issue);
        }
        if (!this['focal']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property focal:fhir.FhirBoolean fhir: ClaimResponse.insurance.focal:boolean", }));
        }
        if (this["focal"]) {
            outcome.issue.push(...this.focal.doModelValidation().issue);
        }
        if (!this['coverage']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property coverage:fhir.Reference fhir: ClaimResponse.insurance.coverage:Reference", }));
        }
        if (this["coverage"]) {
            outcome.issue.push(...this.coverage.doModelValidation().issue);
        }
        if (this["businessArrangement"]) {
            outcome.issue.push(...this.businessArrangement.doModelValidation().issue);
        }
        if (this["claimResponse"]) {
            outcome.issue.push(...this.claimResponse.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * If the request contains errors then an error element should be provided and no adjudication related sections (item, addItem, or payment) should be present.
 */
export class ClaimResponseError extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseError - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ClaimResponseError';
        if (source['itemSequence']) {
            this.itemSequence = new fhir.FhirPositiveInt({ value: source.itemSequence });
        }
        if (source['detailSequence']) {
            this.detailSequence = new fhir.FhirPositiveInt({ value: source.detailSequence });
        }
        if (source['subDetailSequence']) {
            this.subDetailSequence = new fhir.FhirPositiveInt({ value: source.subDetailSequence });
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
    }
    /**
     * Example-bound Value Set for code
     */
    static codeExampleValueSet() {
        return AdjudicationErrorValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["itemSequence"]) {
            outcome.issue.push(...this.itemSequence.doModelValidation().issue);
        }
        if (this["detailSequence"]) {
            outcome.issue.push(...this.detailSequence.doModelValidation().issue);
        }
        if (this["subDetailSequence"]) {
            outcome.issue.push(...this.subDetailSequence.doModelValidation().issue);
        }
        if (!this['code']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property code:fhir.CodeableConcept fhir: ClaimResponse.error.code:CodeableConcept", }));
        }
        if (this["code"]) {
            outcome.issue.push(...this.code.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * This resource provides the adjudication details from the processing of a Claim resource.
 */
export class ClaimResponse extends fhir.DomainResource {
    /**
     * Default constructor for ClaimResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ClaimResponse';
        /**
         * A unique identifier assigned to this claim response.
         */
        this.identifier = [];
        /**
         * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
         */
        this.item = [];
        /**
         * The first-tier service adjudications for payor added product or service lines.
         */
        this.addItem = [];
        /**
         * The adjudication results which are presented at the header level rather than at the line-item or add-item levels.
         */
        this.adjudication = [];
        /**
         * Totals for amounts submitted, co-pays, benefits payable etc.
         */
        this.total = [];
        /**
         * A note that describes or explains adjudication results in a human readable form.
         */
        this.processNote = [];
        /**
         * For example: professional reports, documents, images, clinical resources, or accident reports.
         */
        this.communicationRequest = [];
        /**
         * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
         */
        this.insurance = [];
        /**
         * If the request contains errors then an error element should be provided and no adjudication related sections (item, addItem, or payment) should be present.
         */
        this.error = [];
        this.resourceType = 'ClaimResponse';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['subType']) {
            this.subType = new fhir.CodeableConcept(source.subType);
        }
        if (source['use']) {
            this.use = source.use;
        }
        else {
            this.use = null;
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['created']) {
            this.created = new fhir.FhirDateTime({ value: source.created });
        }
        else {
            this.created = null;
        }
        if (source['insurer']) {
            this.insurer = new fhir.Reference(source.insurer);
        }
        else {
            this.insurer = null;
        }
        if (source['requestor']) {
            this.requestor = new fhir.Reference(source.requestor);
        }
        if (source['request']) {
            this.request = new fhir.Reference(source.request);
        }
        if (source['outcome']) {
            this.outcome = source.outcome;
        }
        else {
            this.outcome = null;
        }
        if (source['disposition']) {
            this.disposition = new fhir.FhirString({ value: source.disposition });
        }
        if (source['preAuthRef']) {
            this.preAuthRef = new fhir.FhirString({ value: source.preAuthRef });
        }
        if (source['preAuthPeriod']) {
            this.preAuthPeriod = new fhir.Period(source.preAuthPeriod);
        }
        if (source['payeeType']) {
            this.payeeType = new fhir.CodeableConcept(source.payeeType);
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.ClaimResponseItem(x));
        }
        if (source['addItem']) {
            this.addItem = source.addItem.map((x) => new fhir.ClaimResponseAddItem(x));
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ClaimResponseItemAdjudication(x));
        }
        if (source['total']) {
            this.total = source.total.map((x) => new fhir.ClaimResponseTotal(x));
        }
        if (source['payment']) {
            this.payment = new fhir.ClaimResponsePayment(source.payment);
        }
        if (source['fundsReserve']) {
            this.fundsReserve = new fhir.CodeableConcept(source.fundsReserve);
        }
        if (source['formCode']) {
            this.formCode = new fhir.CodeableConcept(source.formCode);
        }
        if (source['form']) {
            this.form = new fhir.Attachment(source.form);
        }
        if (source['processNote']) {
            this.processNote = source.processNote.map((x) => new fhir.ClaimResponseProcessNote(x));
        }
        if (source['communicationRequest']) {
            this.communicationRequest = source.communicationRequest.map((x) => new fhir.Reference(x));
        }
        if (source['insurance']) {
            this.insurance = source.insurance.map((x) => new fhir.ClaimResponseInsurance(x));
        }
        if (source['error']) {
            this.error = source.error.map((x) => new fhir.ClaimResponseError(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return FmStatusValueSet;
    }
    /**
     * Extensible-bound Value Set for type
     */
    static typeExtensibleValueSet() {
        return ClaimTypeValueSet;
    }
    /**
     * Example-bound Value Set for subType
     */
    static subTypeExampleValueSet() {
        return ClaimSubtypeValueSet;
    }
    /**
     * Required-bound Value Set for use
     */
    static useRequiredValueSet() {
        return ClaimUseValueSet;
    }
    /**
     * Required-bound Value Set for outcome
     */
    static outcomeRequiredValueSet() {
        return RemittanceOutcomeValueSet;
    }
    /**
     * Example-bound Value Set for payeeType
     */
    static payeeTypeExampleValueSet() {
        return PayeetypeValueSet;
    }
    /**
     * Example-bound Value Set for fundsReserve
     */
    static fundsReserveExampleValueSet() {
        return FundsreserveValueSet;
    }
    /**
     * Example-bound Value Set for formCode
     */
    static formCodeExampleValueSet() {
        return FormsValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'ClaimResponse' fhir: ClaimResponse.resourceType:'ClaimResponse'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:FmStatusValueSetEnum fhir: ClaimResponse.status:code", }));
        }
        if (!this['type']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property type:fhir.CodeableConcept fhir: ClaimResponse.type:CodeableConcept", }));
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["subType"]) {
            outcome.issue.push(...this.subType.doModelValidation().issue);
        }
        if (!this['use']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property use:ClaimUseValueSetEnum fhir: ClaimResponse.use:code", }));
        }
        if (!this['patient']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property patient:fhir.Reference fhir: ClaimResponse.patient:Reference", }));
        }
        if (this["patient"]) {
            outcome.issue.push(...this.patient.doModelValidation().issue);
        }
        if (!this['created']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property created:fhir.FhirDateTime fhir: ClaimResponse.created:dateTime", }));
        }
        if (this["created"]) {
            outcome.issue.push(...this.created.doModelValidation().issue);
        }
        if (!this['insurer']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property insurer:fhir.Reference fhir: ClaimResponse.insurer:Reference", }));
        }
        if (this["insurer"]) {
            outcome.issue.push(...this.insurer.doModelValidation().issue);
        }
        if (this["requestor"]) {
            outcome.issue.push(...this.requestor.doModelValidation().issue);
        }
        if (this["request"]) {
            outcome.issue.push(...this.request.doModelValidation().issue);
        }
        if (!this['outcome']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property outcome:RemittanceOutcomeValueSetEnum fhir: ClaimResponse.outcome:code", }));
        }
        if (this["disposition"]) {
            outcome.issue.push(...this.disposition.doModelValidation().issue);
        }
        if (this["preAuthRef"]) {
            outcome.issue.push(...this.preAuthRef.doModelValidation().issue);
        }
        if (this["preAuthPeriod"]) {
            outcome.issue.push(...this.preAuthPeriod.doModelValidation().issue);
        }
        if (this["payeeType"]) {
            outcome.issue.push(...this.payeeType.doModelValidation().issue);
        }
        if (this["item"]) {
            this.item.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["addItem"]) {
            this.addItem.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["adjudication"]) {
            this.adjudication.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["total"]) {
            this.total.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["payment"]) {
            outcome.issue.push(...this.payment.doModelValidation().issue);
        }
        if (this["fundsReserve"]) {
            outcome.issue.push(...this.fundsReserve.doModelValidation().issue);
        }
        if (this["formCode"]) {
            outcome.issue.push(...this.formCode.doModelValidation().issue);
        }
        if (this["form"]) {
            outcome.issue.push(...this.form.doModelValidation().issue);
        }
        if (this["processNote"]) {
            this.processNote.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["communicationRequest"]) {
            this.communicationRequest.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["insurance"]) {
            this.insurance.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["error"]) {
            this.error.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=ClaimResponse.js.map