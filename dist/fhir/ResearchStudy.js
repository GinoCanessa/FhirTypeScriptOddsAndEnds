// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Describes an expected sequence of events for one of the participants of a study.  E.g. Exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up.
 */
export class ResearchStudyArm extends fhir.BackboneElement {
    /**
     * Default constructor for ResearchStudyArm - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        this.name = null;
        if (source["name"]) {
            this.name = source.name;
        }
        if (this.name === undefined) {
            this.name = null;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current ResearchStudyArm contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["name"] === undefined) {
            missingElements.push("name");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ResearchStudyArm from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new ResearchStudyArm(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `ResearchStudyArm is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A goal that the study is aiming to achieve in terms of a scientific question to be answered by the analysis of data collected during the study.
 */
export class ResearchStudyObjective extends fhir.BackboneElement {
    /**
     * Default constructor for ResearchStudyObjective - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current ResearchStudyObjective contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ResearchStudyObjective from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new ResearchStudyObjective(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `ResearchStudyObjective is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A process where a researcher or organization plans and then executes a series of steps intended to increase the field of healthcare-related knowledge.  This includes studies of safety, efficacy, comparative effectiveness and other information about medications, devices, therapies and other interventional and investigative techniques.  A ResearchStudy involves the gathering of information about human or animal subjects.
 */
export class ResearchStudy extends fhir.DomainResource {
    /**
     * Default constructor for ResearchStudy - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'ResearchStudy';
        if (source["arm"]) {
            this.arm = source.arm.map((x) => new fhir.ResearchStudyArm(x));
        }
        if (source["category"]) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["condition"]) {
            this.condition = source.condition.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["contact"]) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["enrollment"]) {
            this.enrollment = source.enrollment.map((x) => new fhir.Reference(x));
        }
        if (source["focus"]) {
            this.focus = source.focus.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["keyword"]) {
            this.keyword = source.keyword.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["location"]) {
            this.location = source.location.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["note"]) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source["objective"]) {
            this.objective = source.objective.map((x) => new fhir.ResearchStudyObjective(x));
        }
        if (source["partOf"]) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        if (source["period"]) {
            this.period = new fhir.Period(source.period);
        }
        if (source["phase"]) {
            this.phase = new fhir.CodeableConcept(source.phase);
        }
        if (source["primaryPurposeType"]) {
            this.primaryPurposeType = new fhir.CodeableConcept(source.primaryPurposeType);
        }
        if (source["principalInvestigator"]) {
            this.principalInvestigator = new fhir.Reference(source.principalInvestigator);
        }
        if (source["protocol"]) {
            this.protocol = source.protocol.map((x) => new fhir.Reference(x));
        }
        if (source["reasonStopped"]) {
            this.reasonStopped = new fhir.CodeableConcept(source.reasonStopped);
        }
        if (source["relatedArtifact"]) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x));
        }
        if (source["site"]) {
            this.site = source.site.map((x) => new fhir.Reference(x));
        }
        if (source["sponsor"]) {
            this.sponsor = new fhir.Reference(source.sponsor);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["title"]) {
            this.title = source.title;
        }
        if (source["_title"]) {
            this._title = new fhir.FhirElement(source._title);
        }
    }
    /**
     * Check if the current ResearchStudy contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ResearchStudy from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new ResearchStudy(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `ResearchStudy is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the ResearchStudy.status field
 */
export var ResearchStudyStatusEnum;
(function (ResearchStudyStatusEnum) {
    ResearchStudyStatusEnum["ACTIVE"] = "active";
    ResearchStudyStatusEnum["ADMINISTRATIVELY_COMPLETED"] = "administratively-completed";
    ResearchStudyStatusEnum["APPROVED"] = "approved";
    ResearchStudyStatusEnum["CLOSED_TO_ACCRUAL"] = "closed-to-accrual";
    ResearchStudyStatusEnum["CLOSED_TO_ACCRUAL_AND_INTERVENTION"] = "closed-to-accrual-and-intervention";
    ResearchStudyStatusEnum["COMPLETED"] = "completed";
    ResearchStudyStatusEnum["DISAPPROVED"] = "disapproved";
    ResearchStudyStatusEnum["IN_REVIEW"] = "in-review";
    ResearchStudyStatusEnum["TEMPORARILY_CLOSED_TO_ACCRUAL"] = "temporarily-closed-to-accrual";
    ResearchStudyStatusEnum["TEMPORARILY_CLOSED_TO_ACCRUAL_AND_INTERVENTION"] = "temporarily-closed-to-accrual-and-intervention";
    ResearchStudyStatusEnum["WITHDRAWN"] = "withdrawn";
})(ResearchStudyStatusEnum || (ResearchStudyStatusEnum = {}));
//# sourceMappingURL=ResearchStudy.js.map