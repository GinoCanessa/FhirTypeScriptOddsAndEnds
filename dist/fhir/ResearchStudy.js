// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ResearchStudy
import * as fhir from '../fhir.js';
import { ResearchStudyObjectiveTypeValueSet } from '../fhirValueSets/ResearchStudyObjectiveTypeValueSet.js';
import { ResearchStudyStatusValueSet } from '../fhirValueSets/ResearchStudyStatusValueSet.js';
import { ResearchStudyPrimPurpTypeValueSet } from '../fhirValueSets/ResearchStudyPrimPurpTypeValueSet.js';
import { ResearchStudyPhaseValueSet } from '../fhirValueSets/ResearchStudyPhaseValueSet.js';
import { ConditionCodeValueSet } from '../fhirValueSets/ConditionCodeValueSet.js';
import { ResearchStudyReasonStoppedValueSet } from '../fhirValueSets/ResearchStudyReasonStoppedValueSet.js';
/**
 * Describes an expected sequence of events for one of the participants of a study.  E.g. Exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up.
 */
export class ResearchStudyArm extends fhir.BackboneElement {
    /**
     * Default constructor for ResearchStudyArm - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['name']) {
            this.name = source.name;
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["name"]) {
            results.push(["name", 'Missing required element: ResearchStudy.arm.name']);
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        return results;
    }
}
/**
 * A goal that the study is aiming to achieve in terms of a scientific question to be answered by the analysis of data collected during the study.
 */
export class ResearchStudyObjective extends fhir.BackboneElement {
    /**
     * Default constructor for ResearchStudyObjective - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Preferred-bound Value Set for type
     */
    static typePreferredValueSet() {
        return ResearchStudyObjectiveTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        return results;
    }
}
/**
 * A process where a researcher or organization plans and then executes a series of steps intended to increase the field of healthcare-related knowledge.  This includes studies of safety, efficacy, comparative effectiveness and other information about medications, devices, therapies and other interventional and investigative techniques.  A ResearchStudy involves the gathering of information about human or animal subjects.
 */
export class ResearchStudy extends fhir.DomainResource {
    /**
     * Default constructor for ResearchStudy - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'ResearchStudy';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['title']) {
            this.title = source.title;
        }
        if (source['_title']) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source['protocol']) {
            this.protocol = source.protocol.map((x) => new fhir.Reference(x));
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['primaryPurposeType']) {
            this.primaryPurposeType = new fhir.CodeableConcept(source.primaryPurposeType);
        }
        if (source['phase']) {
            this.phase = new fhir.CodeableConcept(source.phase);
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['focus']) {
            this.focus = source.focus.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['condition']) {
            this.condition = source.condition.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source['relatedArtifact']) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x));
        }
        if (source['keyword']) {
            this.keyword = source.keyword.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['location']) {
            this.location = source.location.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['enrollment']) {
            this.enrollment = source.enrollment.map((x) => new fhir.Reference(x));
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['sponsor']) {
            this.sponsor = new fhir.Reference(source.sponsor);
        }
        if (source['principalInvestigator']) {
            this.principalInvestigator = new fhir.Reference(source.principalInvestigator);
        }
        if (source['site']) {
            this.site = source.site.map((x) => new fhir.Reference(x));
        }
        if (source['reasonStopped']) {
            this.reasonStopped = new fhir.CodeableConcept(source.reasonStopped);
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source['arm']) {
            this.arm = source.arm.map((x) => new fhir.ResearchStudyArm(x));
        }
        if (source['objective']) {
            this.objective = source.objective.map((x) => new fhir.ResearchStudyObjective(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return ResearchStudyStatusValueSet;
    }
    /**
     * Extensible-bound Value Set for primaryPurposeType
     */
    static primaryPurposeTypeExtensibleValueSet() {
        return ResearchStudyPrimPurpTypeValueSet;
    }
    /**
     * Example-bound Value Set for phase
     */
    static phaseExampleValueSet() {
        return ResearchStudyPhaseValueSet;
    }
    /**
     * Example-bound Value Set for condition
     */
    static conditionExampleValueSet() {
        return ConditionCodeValueSet;
    }
    /**
     * Example-bound Value Set for reasonStopped
     */
    static reasonStoppedExampleValueSet() {
        return ResearchStudyReasonStoppedValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: ResearchStudy.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_title"]) {
            results.push(...this._title.doModelValidation());
        }
        if (this["protocol"]) {
            this.protocol.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["partOf"]) {
            this.partOf.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: ResearchStudy.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["primaryPurposeType"]) {
            results.push(...this.primaryPurposeType.doModelValidation());
        }
        if (this["phase"]) {
            results.push(...this.phase.doModelValidation());
        }
        if (this["category"]) {
            this.category.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["focus"]) {
            this.focus.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["condition"]) {
            this.condition.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["relatedArtifact"]) {
            this.relatedArtifact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["keyword"]) {
            this.keyword.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["location"]) {
            this.location.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["enrollment"]) {
            this.enrollment.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["period"]) {
            results.push(...this.period.doModelValidation());
        }
        if (this["sponsor"]) {
            results.push(...this.sponsor.doModelValidation());
        }
        if (this["principalInvestigator"]) {
            results.push(...this.principalInvestigator.doModelValidation());
        }
        if (this["site"]) {
            this.site.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["reasonStopped"]) {
            results.push(...this.reasonStopped.doModelValidation());
        }
        if (this["note"]) {
            this.note.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["arm"]) {
            this.arm.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["objective"]) {
            this.objective.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=ResearchStudy.js.map