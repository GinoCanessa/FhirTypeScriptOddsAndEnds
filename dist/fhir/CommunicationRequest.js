// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Text, attachment(s), or resource(s) to be communicated to the recipient.
 */
export class CommunicationRequestPayload extends fhir.BackboneElement {
    /**
     * Default constructor for CommunicationRequestPayload - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["contentString"]) {
            this.contentString = source.contentString;
        }
        if (source["_contentString"]) {
            this._contentString = new fhir.FhirElement(source._contentString);
        }
        if (source["contentAttachment"]) {
            this.contentAttachment = new fhir.Attachment(source.contentAttachment);
        }
        if (source["contentReference"]) {
            this.contentReference = new fhir.Reference(source.contentReference);
        }
    }
    /**
     * Check if the current CommunicationRequestPayload contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a CommunicationRequestPayload from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new CommunicationRequestPayload(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `CommunicationRequestPayload is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.
 */
export class CommunicationRequest extends fhir.DomainResource {
    /**
     * Default constructor for CommunicationRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'CommunicationRequest';
        if (source["about"]) {
            this.about = source.about.map((x) => new fhir.Reference(x));
        }
        if (source["authoredOn"]) {
            this.authoredOn = source.authoredOn;
        }
        if (source["_authoredOn"]) {
            this._authoredOn = new fhir.FhirElement(source._authoredOn);
        }
        if (source["basedOn"]) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source["category"]) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["doNotPerform"]) {
            this.doNotPerform = source.doNotPerform;
        }
        if (source["_doNotPerform"]) {
            this._doNotPerform = new fhir.FhirElement(source._doNotPerform);
        }
        if (source["encounter"]) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source["groupIdentifier"]) {
            this.groupIdentifier = new fhir.Identifier(source.groupIdentifier);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["medium"]) {
            this.medium = source.medium.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["note"]) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        if (source["occurrenceDateTime"]) {
            this.occurrenceDateTime = source.occurrenceDateTime;
        }
        if (source["_occurrenceDateTime"]) {
            this._occurrenceDateTime = new fhir.FhirElement(source._occurrenceDateTime);
        }
        if (source["occurrencePeriod"]) {
            this.occurrencePeriod = new fhir.Period(source.occurrencePeriod);
        }
        if (source["payload"]) {
            this.payload = source.payload.map((x) => new fhir.CommunicationRequestPayload(x));
        }
        if (source["priority"]) {
            this.priority = source.priority;
        }
        if (source["_priority"]) {
            this._priority = new fhir.FhirElement(source._priority);
        }
        if (source["reasonCode"]) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["reasonReference"]) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        if (source["recipient"]) {
            this.recipient = source.recipient.map((x) => new fhir.Reference(x));
        }
        if (source["replaces"]) {
            this.replaces = source.replaces.map((x) => new fhir.Reference(x));
        }
        if (source["requester"]) {
            this.requester = new fhir.Reference(source.requester);
        }
        if (source["sender"]) {
            this.sender = new fhir.Reference(source.sender);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["statusReason"]) {
            this.statusReason = new fhir.CodeableConcept(source.statusReason);
        }
        if (source["subject"]) {
            this.subject = new fhir.Reference(source.subject);
        }
    }
    /**
     * Check if the current CommunicationRequest contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a CommunicationRequest from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new CommunicationRequest(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `CommunicationRequest is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the CommunicationRequest.priority field
 */
export var CommunicationRequestPriorityEnum;
(function (CommunicationRequestPriorityEnum) {
    CommunicationRequestPriorityEnum["ROUTINE"] = "routine";
    CommunicationRequestPriorityEnum["URGENT"] = "urgent";
    CommunicationRequestPriorityEnum["ASAP"] = "asap";
    CommunicationRequestPriorityEnum["STAT"] = "stat";
})(CommunicationRequestPriorityEnum || (CommunicationRequestPriorityEnum = {}));
/**
 * Code Values for the CommunicationRequest.status field
 */
export var CommunicationRequestStatusEnum;
(function (CommunicationRequestStatusEnum) {
    CommunicationRequestStatusEnum["DRAFT"] = "draft";
    CommunicationRequestStatusEnum["ACTIVE"] = "active";
    CommunicationRequestStatusEnum["ON_HOLD"] = "on-hold";
    CommunicationRequestStatusEnum["REVOKED"] = "revoked";
    CommunicationRequestStatusEnum["COMPLETED"] = "completed";
    CommunicationRequestStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
    CommunicationRequestStatusEnum["UNKNOWN"] = "unknown";
})(CommunicationRequestStatusEnum || (CommunicationRequestStatusEnum = {}));
//# sourceMappingURL=CommunicationRequest.js.map