// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: HealthcareService
import * as fhir from '../fhir.js';
import { DaysOfWeekValueSet } from '../fhirValueSets/DaysOfWeekValueSet.js';
import { ServiceCategoryValueSet } from '../fhirValueSets/ServiceCategoryValueSet.js';
import { ServiceTypeValueSet } from '../fhirValueSets/ServiceTypeValueSet.js';
import { C80PracticeCodesValueSet } from '../fhirValueSets/C80PracticeCodesValueSet.js';
import { ServiceProvisionConditionsValueSet } from '../fhirValueSets/ServiceProvisionConditionsValueSet.js';
import { ProgramValueSet } from '../fhirValueSets/ProgramValueSet.js';
import { LanguagesValueSet } from '../fhirValueSets/LanguagesValueSet.js';
import { ServiceReferralMethodValueSet } from '../fhirValueSets/ServiceReferralMethodValueSet.js';
/**
 * Does this service have specific eligibility requirements that need to be met in order to use the service?
 */
export class HealthcareServiceEligibility extends fhir.BackboneElement {
    /**
     * Default constructor for HealthcareServiceEligibility - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['comment']) {
            this.comment = source.comment;
        }
        if (source['_comment']) {
            this._comment = new fhir.FhirElement(source._comment);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["_comment"]) {
            results.push(...this._comment.doModelValidation());
        }
        return results;
    }
}
/**
 * More detailed availability information may be provided in associated Schedule/Slot resources.
 */
export class HealthcareServiceAvailableTime extends fhir.BackboneElement {
    /**
     * Default constructor for HealthcareServiceAvailableTime - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['daysOfWeek']) {
            this.daysOfWeek = source.daysOfWeek.map((x) => (x));
        }
        if (source['_daysOfWeek']) {
            this._daysOfWeek = source._daysOfWeek.map((x) => new fhir.FhirElement(x));
        }
        if (source['allDay']) {
            this.allDay = source.allDay;
        }
        if (source['_allDay']) {
            this._allDay = new fhir.FhirElement(source._allDay);
        }
        if (source['availableStartTime']) {
            this.availableStartTime = source.availableStartTime;
        }
        if (source['_availableStartTime']) {
            this._availableStartTime = new fhir.FhirElement(source._availableStartTime);
        }
        if (source['availableEndTime']) {
            this.availableEndTime = source.availableEndTime;
        }
        if (source['_availableEndTime']) {
            this._availableEndTime = new fhir.FhirElement(source._availableEndTime);
        }
    }
    /**
     * Required-bound Value Set for daysOfWeek
     */
    static daysOfWeekRequiredValueSet() {
        return DaysOfWeekValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_daysOfWeek"]) {
            this._daysOfWeek.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_allDay"]) {
            results.push(...this._allDay.doModelValidation());
        }
        if (this["_availableStartTime"]) {
            results.push(...this._availableStartTime.doModelValidation());
        }
        if (this["_availableEndTime"]) {
            results.push(...this._availableEndTime.doModelValidation());
        }
        return results;
    }
}
/**
 * The HealthcareService is not available during this period of time due to the provided reason.
 */
export class HealthcareServiceNotAvailable extends fhir.BackboneElement {
    /**
     * Default constructor for HealthcareServiceNotAvailable - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['description']) {
            this.description = source.description;
        }
        else {
            this.description = null;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['during']) {
            this.during = new fhir.Period(source.during);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["description"]) {
            results.push(["description", 'Missing required element: HealthcareService.notAvailable.description']);
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["during"]) {
            results.push(...this.during.doModelValidation());
        }
        return results;
    }
}
/**
 * The details of a healthcare service available at a location.
 */
export class HealthcareService extends fhir.DomainResource {
    /**
     * Default constructor for HealthcareService - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'HealthcareService';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['active']) {
            this.active = source.active;
        }
        if (source['_active']) {
            this._active = new fhir.FhirElement(source._active);
        }
        if (source['providedBy']) {
            this.providedBy = new fhir.Reference(source.providedBy);
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['specialty']) {
            this.specialty = source.specialty.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['location']) {
            this.location = source.location.map((x) => new fhir.Reference(x));
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['comment']) {
            this.comment = source.comment;
        }
        if (source['_comment']) {
            this._comment = new fhir.FhirElement(source._comment);
        }
        if (source['extraDetails']) {
            this.extraDetails = source.extraDetails;
        }
        if (source['_extraDetails']) {
            this._extraDetails = new fhir.FhirElement(source._extraDetails);
        }
        if (source['photo']) {
            this.photo = new fhir.Attachment(source.photo);
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        if (source['coverageArea']) {
            this.coverageArea = source.coverageArea.map((x) => new fhir.Reference(x));
        }
        if (source['serviceProvisionCode']) {
            this.serviceProvisionCode = source.serviceProvisionCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['eligibility']) {
            this.eligibility = source.eligibility.map((x) => new fhir.HealthcareServiceEligibility(x));
        }
        if (source['program']) {
            this.program = source.program.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['characteristic']) {
            this.characteristic = source.characteristic.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['communication']) {
            this.communication = source.communication.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['referralMethod']) {
            this.referralMethod = source.referralMethod.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['appointmentRequired']) {
            this.appointmentRequired = source.appointmentRequired;
        }
        if (source['_appointmentRequired']) {
            this._appointmentRequired = new fhir.FhirElement(source._appointmentRequired);
        }
        if (source['availableTime']) {
            this.availableTime = source.availableTime.map((x) => new fhir.HealthcareServiceAvailableTime(x));
        }
        if (source['notAvailable']) {
            this.notAvailable = source.notAvailable.map((x) => new fhir.HealthcareServiceNotAvailable(x));
        }
        if (source['availabilityExceptions']) {
            this.availabilityExceptions = source.availabilityExceptions;
        }
        if (source['_availabilityExceptions']) {
            this._availabilityExceptions = new fhir.FhirElement(source._availabilityExceptions);
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Example-bound Value Set for category
     */
    static categoryExampleValueSet() {
        return ServiceCategoryValueSet;
    }
    /**
     * Example-bound Value Set for type
     */
    static typeExampleValueSet() {
        return ServiceTypeValueSet;
    }
    /**
     * Preferred-bound Value Set for specialty
     */
    static specialtyPreferredValueSet() {
        return C80PracticeCodesValueSet;
    }
    /**
     * Example-bound Value Set for serviceProvisionCode
     */
    static serviceProvisionCodeExampleValueSet() {
        return ServiceProvisionConditionsValueSet;
    }
    /**
     * Example-bound Value Set for program
     */
    static programExampleValueSet() {
        return ProgramValueSet;
    }
    /**
     * Preferred-bound Value Set for communication
     */
    static communicationPreferredValueSet() {
        return LanguagesValueSet;
    }
    /**
     * Example-bound Value Set for referralMethod
     */
    static referralMethodExampleValueSet() {
        return ServiceReferralMethodValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: HealthcareService.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_active"]) {
            results.push(...this._active.doModelValidation());
        }
        if (this["providedBy"]) {
            results.push(...this.providedBy.doModelValidation());
        }
        if (this["category"]) {
            this.category.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["type"]) {
            this.type.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["specialty"]) {
            this.specialty.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["location"]) {
            this.location.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_comment"]) {
            results.push(...this._comment.doModelValidation());
        }
        if (this["_extraDetails"]) {
            results.push(...this._extraDetails.doModelValidation());
        }
        if (this["photo"]) {
            results.push(...this.photo.doModelValidation());
        }
        if (this["telecom"]) {
            this.telecom.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["coverageArea"]) {
            this.coverageArea.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["serviceProvisionCode"]) {
            this.serviceProvisionCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["eligibility"]) {
            this.eligibility.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["program"]) {
            this.program.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["characteristic"]) {
            this.characteristic.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["communication"]) {
            this.communication.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["referralMethod"]) {
            this.referralMethod.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_appointmentRequired"]) {
            results.push(...this._appointmentRequired.doModelValidation());
        }
        if (this["availableTime"]) {
            this.availableTime.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["notAvailable"]) {
            this.notAvailable.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_availabilityExceptions"]) {
            results.push(...this._availabilityExceptions.doModelValidation());
        }
        if (this["endpoint"]) {
            this.endpoint.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=HealthcareService.js.map