// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: HumanName
import * as fhir from '../fhir.js';
import { NameUseValueSet, } from '../fhirValueSets/NameUseValueSet.js';
/**
 * A human's name with the ability to identify parts and usage.
 */
export class HumanName extends fhir.FhirElement {
    /**
     * Default constructor for HumanName - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'HumanName';
        /**
         * If only initials are recorded, they may be used in place of the full name parts. Initials may be separated into multiple given names but often aren't due to paractical limitations.  This element is not called "first name" since given names do not always come first.
         */
        this.given = [];
        /**
         * Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.
         */
        this.prefix = [];
        /**
         * Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.
         */
        this.suffix = [];
        if (source['use']) {
            this.use = source.use;
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['family']) {
            this.family = new fhir.FhirString({ value: source.family });
        }
        if (source['given']) {
            this.given = source.given.map((x) => new fhir.FhirString({ value: x }));
        }
        if (source['prefix']) {
            this.prefix = source.prefix.map((x) => new fhir.FhirString({ value: x }));
        }
        if (source['suffix']) {
            this.suffix = source.suffix.map((x) => new fhir.FhirString({ value: x }));
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Required-bound Value Set for use
     */
    static useRequiredValueSet() {
        return NameUseValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["text"]) {
            outcome.issue.push(...this.text.doModelValidation().issue);
        }
        if (this["family"]) {
            outcome.issue.push(...this.family.doModelValidation().issue);
        }
        if (this["given"]) {
            this.given.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["prefix"]) {
            this.prefix.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["suffix"]) {
            this.suffix.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["period"]) {
            outcome.issue.push(...this.period.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
    /**
     * Convert a HumanName into a displayable string
     */
    toDisplay(familyFirst = true, includeAnnotations = false) {
        if ((this.text) && (this.text.length > 0)) {
            return this.text.toString();
        }
        var val = '';
        if (familyFirst) {
            if (this.family) {
                val = this.family.toString();
            }
            if (this.given) {
                val += (val.length > 0 ? ', ' : '') + this.given.join(' ');
            }
            if (includeAnnotations) {
                if (this.suffix) {
                    val += (val.length > 0 ? ', ' : '') + this.suffix.join(', ');
                }
                if (this.prefix) {
                    val += (val.length > 0 ? ', ' : '') + this.prefix.join(', ');
                }
            }
            return val;
        }
        if ((includeAnnotations) && (this.prefix)) {
            val += this.prefix.join(', ');
        }
        if (this.given) {
            val = (val.length > 0 ? ' ' : '') + this.given.join(' ');
        }
        if (this.family) {
            val += (val.length > 0 ? ' ' : '') + this.family;
        }
        if ((includeAnnotations) && (this.suffix)) {
            val += (val.length > 0 ? ', ' : '') + this.suffix.join(', ');
        }
        return val;
    }
}
//# sourceMappingURL=HumanName.js.map