// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: HumanName
import * as fhir from '../fhir.js';
import { NameUseValueSet } from '../fhirValueSets/NameUseValueSet.js';
/**
 * A human's name with the ability to identify parts and usage.
 */
export class HumanName extends fhir.FhirElement {
    /**
     * Default constructor for HumanName - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['use']) {
            this.use = source.use;
        }
        if (source['_use']) {
            this._use = new fhir.FhirElement(source._use);
        }
        if (source['text']) {
            this.text = source.text;
        }
        if (source['_text']) {
            this._text = new fhir.FhirElement(source._text);
        }
        if (source['family']) {
            this.family = source.family;
        }
        if (source['_family']) {
            this._family = new fhir.FhirElement(source._family);
        }
        if (source['given']) {
            this.given = source.given.map((x) => (x));
        }
        if (source['_given']) {
            this._given = source._given.map((x) => new fhir.FhirElement(x));
        }
        if (source['prefix']) {
            this.prefix = source.prefix.map((x) => (x));
        }
        if (source['_prefix']) {
            this._prefix = source._prefix.map((x) => new fhir.FhirElement(x));
        }
        if (source['suffix']) {
            this.suffix = source.suffix.map((x) => (x));
        }
        if (source['_suffix']) {
            this._suffix = source._suffix.map((x) => new fhir.FhirElement(x));
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Required-bound Value Set for use
     */
    useRequiredValueSet() {
        return NameUseValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_use"]) {
            results.push(...this._use.doModelValidation());
        }
        if (this["_text"]) {
            results.push(...this._text.doModelValidation());
        }
        if (this["_family"]) {
            results.push(...this._family.doModelValidation());
        }
        if (this["_given"]) {
            this._given.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_prefix"]) {
            this._prefix.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_suffix"]) {
            this._suffix.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["period"]) {
            results.push(...this.period.doModelValidation());
        }
        return results;
    }
    /**
     * Convert a HumanName into a displayable string
     */
    toDisplay(familyFirst = true, includeAnnotations = false) {
        if ((this.text) && (this.text.length > 0)) {
            return this.text;
        }
        var val = '';
        if (familyFirst) {
            if (this.family) {
                val = this.family;
            }
            if (this.given) {
                val += (val.length > 0 ? ', ' : '') + this.given.join(' ');
            }
            if (includeAnnotations) {
                if (this.suffix) {
                    val += (val.length > 0 ? ', ' : '') + this.suffix.join(', ');
                }
                if (this.prefix) {
                    val += (val.length > 0 ? ', ' : '') + this.prefix.join(', ');
                }
            }
            return val;
        }
        if ((includeAnnotations) && (this.prefix)) {
            val += this.prefix.join(', ');
        }
        if (this.given) {
            val = (val.length > 0 ? ' ' : '') + this.given.join(' ');
        }
        if (this.family) {
            val += (val.length > 0 ? ' ' : '') + this.family;
        }
        if ((includeAnnotations) && (this.suffix)) {
            val += (val.length > 0 ? ', ' : '') + this.suffix.join(', ');
        }
        return val;
    }
}
//# sourceMappingURL=HumanName.js.map