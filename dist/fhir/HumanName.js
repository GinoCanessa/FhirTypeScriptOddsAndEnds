// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * A human's name with the ability to identify parts and usage.
 */
export class HumanName extends fhir.FhirElement {
    /**
     * Default constructor for HumanName - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["family"]) {
            this.family = source.family;
        }
        if (source["_family"]) {
            this._family = new fhir.FhirElement(source._family);
        }
        if (source["given"]) {
            this.given = source.given.map((x) => (x));
        }
        if (source["_given"]) {
            this._given = source._given.map((x) => new fhir.FhirElement(x));
        }
        if (source["period"]) {
            this.period = new fhir.Period(source.period);
        }
        if (source["prefix"]) {
            this.prefix = source.prefix.map((x) => (x));
        }
        if (source["_prefix"]) {
            this._prefix = source._prefix.map((x) => new fhir.FhirElement(x));
        }
        if (source["suffix"]) {
            this.suffix = source.suffix.map((x) => (x));
        }
        if (source["_suffix"]) {
            this._suffix = source._suffix.map((x) => new fhir.FhirElement(x));
        }
        if (source["text"]) {
            this.text = source.text;
        }
        if (source["_text"]) {
            this._text = new fhir.FhirElement(source._text);
        }
        if (source["use"]) {
            this.use = source.use;
        }
        if (source["_use"]) {
            this._use = new fhir.FhirElement(source._use);
        }
    }
    /**
     * Check if the current HumanName contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a HumanName from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new HumanName(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `HumanName is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
    /**
     * Convert a HumanName into a displayable string
     */
    toDisplay(familyFirst = true, includeAnnotations = false) {
        if ((this.text) && (this.text.length > 0)) {
            return this.text;
        }
        var val = '';
        if (familyFirst) {
            if (this.family) {
                val = this.family;
            }
            if (this.given) {
                val += (val.length > 0 ? ', ' : '') + this.given.join(' ');
            }
            if (includeAnnotations) {
                if (this.suffix) {
                    val += (val.length > 0 ? ', ' : '') + this.suffix.join(', ');
                }
                if (this.prefix) {
                    val += (val.length > 0 ? ', ' : '') + this.prefix.join(', ');
                }
            }
            return val;
        }
        if ((includeAnnotations) && (this.prefix)) {
            val += this.prefix.join(', ');
        }
        if (this.given) {
            val = (val.length > 0 ? ' ' : '') + this.given.join(' ');
        }
        if (this.family) {
            val += (val.length > 0 ? ' ' : '') + this.family;
        }
        if ((includeAnnotations) && (this.suffix)) {
            val += (val.length > 0 ? ', ' : '') + this.suffix.join(', ');
        }
        return val;
    }
}
/**
 * Code Values for the HumanName.use field
 */
export var HumanNameUseEnum;
(function (HumanNameUseEnum) {
    HumanNameUseEnum["USUAL"] = "usual";
    HumanNameUseEnum["OFFICIAL"] = "official";
    HumanNameUseEnum["TEMP"] = "temp";
    HumanNameUseEnum["NICKNAME"] = "nickname";
    HumanNameUseEnum["ANONYMOUS"] = "anonymous";
    HumanNameUseEnum["OLD"] = "old";
    HumanNameUseEnum["MAIDEN"] = "maiden";
})(HumanNameUseEnum || (HumanNameUseEnum = {}));
//# sourceMappingURL=HumanName.js.map