// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Details where to send notifications when resources are received that meet the criteria.
 */
export class SubscriptionChannel extends fhir.BackboneElement {
    /**
     * Default constructor for SubscriptionChannel - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["endpoint"]) {
            this.endpoint = source.endpoint;
        }
        if (source["_endpoint"]) {
            this._endpoint = new fhir.FhirElement(source._endpoint);
        }
        if (source["header"]) {
            this.header = source.header.map((x) => (x));
        }
        if (source["_header"]) {
            this._header = source._header.map((x) => new fhir.FhirElement(x));
        }
        if (source["payload"]) {
            this.payload = source.payload;
        }
        if (source["_payload"]) {
            this._payload = new fhir.FhirElement(source._payload);
        }
        this.type = null;
        if (source["type"]) {
            this.type = source.type;
        }
        if (this.type === undefined) {
            this.type = null;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
    }
    /**
     * Check if the current SubscriptionChannel contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a SubscriptionChannel from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new SubscriptionChannel(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `SubscriptionChannel is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The subscription resource is used to define a push-based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system can take an appropriate action.
 */
export class Subscription extends fhir.DomainResource {
    /**
     * Default constructor for Subscription - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Subscription';
        this.channel = null;
        if (source["channel"]) {
            this.channel = new fhir.SubscriptionChannel(source.channel);
        }
        if (this.channel === undefined) {
            this.channel = null;
        }
        if (source["contact"]) {
            this.contact = source.contact.map((x) => new fhir.ContactPoint(x));
        }
        this.criteria = null;
        if (source["criteria"]) {
            this.criteria = source.criteria;
        }
        if (this.criteria === undefined) {
            this.criteria = null;
        }
        if (source["_criteria"]) {
            this._criteria = new fhir.FhirElement(source._criteria);
        }
        if (source["end"]) {
            this.end = source.end;
        }
        if (source["_end"]) {
            this._end = new fhir.FhirElement(source._end);
        }
        if (source["error"]) {
            this.error = source.error;
        }
        if (source["_error"]) {
            this._error = new fhir.FhirElement(source._error);
        }
        this.reason = null;
        if (source["reason"]) {
            this.reason = source.reason;
        }
        if (this.reason === undefined) {
            this.reason = null;
        }
        if (source["_reason"]) {
            this._reason = new fhir.FhirElement(source._reason);
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
    }
    /**
     * Check if the current Subscription contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["channel"] === undefined) {
            missingElements.push("channel");
        }
        if (this["criteria"] === undefined) {
            missingElements.push("criteria");
        }
        if (this["reason"] === undefined) {
            missingElements.push("reason");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Subscription from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new Subscription(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Subscription is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the Subscription.channel.type field
 */
export var SubscriptionChannelTypeEnum;
(function (SubscriptionChannelTypeEnum) {
    SubscriptionChannelTypeEnum["REST_HOOK"] = "rest-hook";
    SubscriptionChannelTypeEnum["WEBSOCKET"] = "websocket";
    SubscriptionChannelTypeEnum["EMAIL"] = "email";
    SubscriptionChannelTypeEnum["SMS"] = "sms";
    SubscriptionChannelTypeEnum["MESSAGE"] = "message";
})(SubscriptionChannelTypeEnum || (SubscriptionChannelTypeEnum = {}));
/**
 * Code Values for the Subscription.status field
 */
export var SubscriptionStatusEnum;
(function (SubscriptionStatusEnum) {
    SubscriptionStatusEnum["REQUESTED"] = "requested";
    SubscriptionStatusEnum["ACTIVE"] = "active";
    SubscriptionStatusEnum["ERROR"] = "error";
    SubscriptionStatusEnum["OFF"] = "off";
})(SubscriptionStatusEnum || (SubscriptionStatusEnum = {}));
//# sourceMappingURL=Subscription.js.map