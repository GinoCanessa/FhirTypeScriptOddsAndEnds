// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Subscription
import * as fhir from '../fhir.js';
import { SubscriptionChannelTypeValueSet } from '../fhirValueSets/SubscriptionChannelTypeValueSet.js';
import { SubscriptionStatusValueSet } from '../fhirValueSets/SubscriptionStatusValueSet.js';
/**
 * Details where to send notifications when resources are received that meet the criteria.
 */
export class SubscriptionChannel extends fhir.BackboneElement {
    /**
     * Default constructor for SubscriptionChannel - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint;
        }
        if (source['_endpoint']) {
            this._endpoint = new fhir.FhirElement(source._endpoint);
        }
        if (source['payload']) {
            this.payload = source.payload;
        }
        if (source['_payload']) {
            this._payload = new fhir.FhirElement(source._payload);
        }
        if (source['header']) {
            this.header = source.header.map((x) => (x));
        }
        if (source['_header']) {
            this._header = source._header.map((x) => new fhir.FhirElement(x));
        }
    }
    /**
     * Required-bound Value Set for type
     */
    typeRequiredValueSet() {
        return SubscriptionChannelTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["type"]) {
            results.push(["type", 'Missing required element: Subscription.channel.type']);
        }
        if (this["_type"]) {
            results.push(...this._type.doModelValidation());
        }
        if (this["_endpoint"]) {
            results.push(...this._endpoint.doModelValidation());
        }
        if (this["_payload"]) {
            results.push(...this._payload.doModelValidation());
        }
        if (this["_header"]) {
            this._header.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * The subscription resource is used to define a push-based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system can take an appropriate action.
 */
export class Subscription extends fhir.DomainResource {
    /**
     * Default constructor for Subscription - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Subscription';
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactPoint(x));
        }
        if (source['end']) {
            this.end = source.end;
        }
        if (source['_end']) {
            this._end = new fhir.FhirElement(source._end);
        }
        if (source['reason']) {
            this.reason = source.reason;
        }
        else {
            this.reason = null;
        }
        if (source['_reason']) {
            this._reason = new fhir.FhirElement(source._reason);
        }
        if (source['criteria']) {
            this.criteria = source.criteria;
        }
        else {
            this.criteria = null;
        }
        if (source['_criteria']) {
            this._criteria = new fhir.FhirElement(source._criteria);
        }
        if (source['error']) {
            this.error = source.error;
        }
        if (source['_error']) {
            this._error = new fhir.FhirElement(source._error);
        }
        if (source['channel']) {
            this.channel = new fhir.SubscriptionChannel(source.channel);
        }
        else {
            this.channel = null;
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return SubscriptionStatusValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: Subscription.resourceType']);
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: Subscription.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_end"]) {
            results.push(...this._end.doModelValidation());
        }
        if (!this["reason"]) {
            results.push(["reason", 'Missing required element: Subscription.reason']);
        }
        if (this["_reason"]) {
            results.push(...this._reason.doModelValidation());
        }
        if (!this["criteria"]) {
            results.push(["criteria", 'Missing required element: Subscription.criteria']);
        }
        if (this["_criteria"]) {
            results.push(...this._criteria.doModelValidation());
        }
        if (this["_error"]) {
            results.push(...this._error.doModelValidation());
        }
        if (!this["channel"]) {
            results.push(["channel", 'Missing required element: Subscription.channel']);
        }
        if (this["channel"]) {
            results.push(...this.channel.doModelValidation());
        }
        return results;
    }
}
//# sourceMappingURL=Subscription.js.map