// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SubstanceSourceMaterial
import * as fhir from '../fhir.js';
/**
 * Many complex materials are fractions of parts of plants, animals, or minerals. Fraction elements are often necessary to define both Substances and Specified Group 1 Substances. For substances derived from Plants, fraction information will be captured at the Substance information level ( . Oils, Juices and Exudates). Additional information for Extracts, such as extraction solvent composition, will be captured at the Specified Substance Group 1 information level. For plasma-derived products fraction information will be captured at the Substance and the Specified Substance Group 1 levels.
 */
export class SubstanceSourceMaterialFractionDescription extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSourceMaterialFractionDescription - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['fraction']) {
            this.fraction = source.fraction;
        }
        if (source['_fraction']) {
            this._fraction = new fhir.FhirElement(source._fraction);
        }
        if (source['materialType']) {
            this.materialType = new fhir.CodeableConcept(source.materialType);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_fraction"]) {
            results.push(...this._fraction.doModelValidation());
        }
        if (this["materialType"]) {
            results.push(...this.materialType.doModelValidation());
        }
        return results;
    }
}
/**
 * 4.9.13.6.1 Author type (Conditional).
 */
export class SubstanceSourceMaterialOrganismAuthor extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSourceMaterialOrganismAuthor - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['authorType']) {
            this.authorType = new fhir.CodeableConcept(source.authorType);
        }
        if (source['authorDescription']) {
            this.authorDescription = source.authorDescription;
        }
        if (source['_authorDescription']) {
            this._authorDescription = new fhir.FhirElement(source._authorDescription);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["authorType"]) {
            results.push(...this.authorType.doModelValidation());
        }
        if (this["_authorDescription"]) {
            results.push(...this._authorDescription.doModelValidation());
        }
        return results;
    }
}
/**
 * 4.9.13.8.1 Hybrid species maternal organism ID (Optional).
 */
export class SubstanceSourceMaterialOrganismHybrid extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSourceMaterialOrganismHybrid - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['maternalOrganismId']) {
            this.maternalOrganismId = source.maternalOrganismId;
        }
        if (source['_maternalOrganismId']) {
            this._maternalOrganismId = new fhir.FhirElement(source._maternalOrganismId);
        }
        if (source['maternalOrganismName']) {
            this.maternalOrganismName = source.maternalOrganismName;
        }
        if (source['_maternalOrganismName']) {
            this._maternalOrganismName = new fhir.FhirElement(source._maternalOrganismName);
        }
        if (source['paternalOrganismId']) {
            this.paternalOrganismId = source.paternalOrganismId;
        }
        if (source['_paternalOrganismId']) {
            this._paternalOrganismId = new fhir.FhirElement(source._paternalOrganismId);
        }
        if (source['paternalOrganismName']) {
            this.paternalOrganismName = source.paternalOrganismName;
        }
        if (source['_paternalOrganismName']) {
            this._paternalOrganismName = new fhir.FhirElement(source._paternalOrganismName);
        }
        if (source['hybridType']) {
            this.hybridType = new fhir.CodeableConcept(source.hybridType);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_maternalOrganismId"]) {
            results.push(...this._maternalOrganismId.doModelValidation());
        }
        if (this["_maternalOrganismName"]) {
            results.push(...this._maternalOrganismName.doModelValidation());
        }
        if (this["_paternalOrganismId"]) {
            results.push(...this._paternalOrganismId.doModelValidation());
        }
        if (this["_paternalOrganismName"]) {
            results.push(...this._paternalOrganismName.doModelValidation());
        }
        if (this["hybridType"]) {
            results.push(...this.hybridType.doModelValidation());
        }
        return results;
    }
}
/**
 * 4.9.13.7.1 Kingdom (Conditional).
 */
export class SubstanceSourceMaterialOrganismOrganismGeneral extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSourceMaterialOrganismOrganismGeneral - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['kingdom']) {
            this.kingdom = new fhir.CodeableConcept(source.kingdom);
        }
        if (source['phylum']) {
            this.phylum = new fhir.CodeableConcept(source.phylum);
        }
        if (source['class']) {
            this.class = new fhir.CodeableConcept(source.class);
        }
        if (source['order']) {
            this.order = new fhir.CodeableConcept(source.order);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["kingdom"]) {
            results.push(...this.kingdom.doModelValidation());
        }
        if (this["phylum"]) {
            results.push(...this.phylum.doModelValidation());
        }
        if (this["class"]) {
            results.push(...this.class.doModelValidation());
        }
        if (this["order"]) {
            results.push(...this.order.doModelValidation());
        }
        return results;
    }
}
/**
 * This subclause describes the organism which the substance is derived from. For vaccines, the parent organism shall be specified based on these subclause elements. As an example, full taxonomy will be described for the Substance Name: ., Leaf.
 */
export class SubstanceSourceMaterialOrganism extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSourceMaterialOrganism - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['family']) {
            this.family = new fhir.CodeableConcept(source.family);
        }
        if (source['genus']) {
            this.genus = new fhir.CodeableConcept(source.genus);
        }
        if (source['species']) {
            this.species = new fhir.CodeableConcept(source.species);
        }
        if (source['intraspecificType']) {
            this.intraspecificType = new fhir.CodeableConcept(source.intraspecificType);
        }
        if (source['intraspecificDescription']) {
            this.intraspecificDescription = source.intraspecificDescription;
        }
        if (source['_intraspecificDescription']) {
            this._intraspecificDescription = new fhir.FhirElement(source._intraspecificDescription);
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.SubstanceSourceMaterialOrganismAuthor(x));
        }
        if (source['hybrid']) {
            this.hybrid = new fhir.SubstanceSourceMaterialOrganismHybrid(source.hybrid);
        }
        if (source['organismGeneral']) {
            this.organismGeneral = new fhir.SubstanceSourceMaterialOrganismOrganismGeneral(source.organismGeneral);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["family"]) {
            results.push(...this.family.doModelValidation());
        }
        if (this["genus"]) {
            results.push(...this.genus.doModelValidation());
        }
        if (this["species"]) {
            results.push(...this.species.doModelValidation());
        }
        if (this["intraspecificType"]) {
            results.push(...this.intraspecificType.doModelValidation());
        }
        if (this["_intraspecificDescription"]) {
            results.push(...this._intraspecificDescription.doModelValidation());
        }
        if (this["author"]) {
            this.author.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["hybrid"]) {
            results.push(...this.hybrid.doModelValidation());
        }
        if (this["organismGeneral"]) {
            results.push(...this.organismGeneral.doModelValidation());
        }
        return results;
    }
}
/**
 * To do.
 */
export class SubstanceSourceMaterialPartDescription extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSourceMaterialPartDescription - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['part']) {
            this.part = new fhir.CodeableConcept(source.part);
        }
        if (source['partLocation']) {
            this.partLocation = new fhir.CodeableConcept(source.partLocation);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["part"]) {
            results.push(...this.part.doModelValidation());
        }
        if (this["partLocation"]) {
            results.push(...this.partLocation.doModelValidation());
        }
        return results;
    }
}
/**
 * Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.
 */
export class SubstanceSourceMaterial extends fhir.DomainResource {
    /**
     * Default constructor for SubstanceSourceMaterial - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'SubstanceSourceMaterial';
        if (source['sourceMaterialClass']) {
            this.sourceMaterialClass = new fhir.CodeableConcept(source.sourceMaterialClass);
        }
        if (source['sourceMaterialType']) {
            this.sourceMaterialType = new fhir.CodeableConcept(source.sourceMaterialType);
        }
        if (source['sourceMaterialState']) {
            this.sourceMaterialState = new fhir.CodeableConcept(source.sourceMaterialState);
        }
        if (source['organismId']) {
            this.organismId = new fhir.Identifier(source.organismId);
        }
        if (source['organismName']) {
            this.organismName = source.organismName;
        }
        if (source['_organismName']) {
            this._organismName = new fhir.FhirElement(source._organismName);
        }
        if (source['parentSubstanceId']) {
            this.parentSubstanceId = source.parentSubstanceId.map((x) => new fhir.Identifier(x));
        }
        if (source['parentSubstanceName']) {
            this.parentSubstanceName = source.parentSubstanceName.map((x) => (x));
        }
        if (source['_parentSubstanceName']) {
            this._parentSubstanceName = source._parentSubstanceName.map((x) => new fhir.FhirElement(x));
        }
        if (source['countryOfOrigin']) {
            this.countryOfOrigin = source.countryOfOrigin.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['geographicalLocation']) {
            this.geographicalLocation = source.geographicalLocation.map((x) => (x));
        }
        if (source['_geographicalLocation']) {
            this._geographicalLocation = source._geographicalLocation.map((x) => new fhir.FhirElement(x));
        }
        if (source['developmentStage']) {
            this.developmentStage = new fhir.CodeableConcept(source.developmentStage);
        }
        if (source['fractionDescription']) {
            this.fractionDescription = source.fractionDescription.map((x) => new fhir.SubstanceSourceMaterialFractionDescription(x));
        }
        if (source['organism']) {
            this.organism = new fhir.SubstanceSourceMaterialOrganism(source.organism);
        }
        if (source['partDescription']) {
            this.partDescription = source.partDescription.map((x) => new fhir.SubstanceSourceMaterialPartDescription(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: SubstanceSourceMaterial.resourceType']);
        }
        if (this["sourceMaterialClass"]) {
            results.push(...this.sourceMaterialClass.doModelValidation());
        }
        if (this["sourceMaterialType"]) {
            results.push(...this.sourceMaterialType.doModelValidation());
        }
        if (this["sourceMaterialState"]) {
            results.push(...this.sourceMaterialState.doModelValidation());
        }
        if (this["organismId"]) {
            results.push(...this.organismId.doModelValidation());
        }
        if (this["_organismName"]) {
            results.push(...this._organismName.doModelValidation());
        }
        if (this["parentSubstanceId"]) {
            this.parentSubstanceId.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_parentSubstanceName"]) {
            this._parentSubstanceName.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["countryOfOrigin"]) {
            this.countryOfOrigin.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_geographicalLocation"]) {
            this._geographicalLocation.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["developmentStage"]) {
            results.push(...this.developmentStage.doModelValidation());
        }
        if (this["fractionDescription"]) {
            this.fractionDescription.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["organism"]) {
            results.push(...this.organism.doModelValidation());
        }
        if (this["partDescription"]) {
            this.partDescription.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=SubstanceSourceMaterial.js.map