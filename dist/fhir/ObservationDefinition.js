// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * Characteristics for quantitative results of this observation.
 */
export class ObservationDefinitionQuantitativeDetails extends fhir.BackboneElement {
    /**
     * Default constructor for ObservationDefinitionQuantitativeDetails - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["conversionFactor"]) {
            this.conversionFactor = source.conversionFactor;
        }
        if (source["_conversionFactor"]) {
            this._conversionFactor = new fhir.FhirElement(source._conversionFactor);
        }
        if (source["customaryUnit"]) {
            this.customaryUnit = new fhir.CodeableConcept(source.customaryUnit);
        }
        if (source["decimalPrecision"]) {
            this.decimalPrecision = source.decimalPrecision;
        }
        if (source["_decimalPrecision"]) {
            this._decimalPrecision = new fhir.FhirElement(source._decimalPrecision);
        }
        if (source["unit"]) {
            this.unit = new fhir.CodeableConcept(source.unit);
        }
    }
    /**
     * Check if the current ObservationDefinitionQuantitativeDetails contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ObservationDefinitionQuantitativeDetails from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new ObservationDefinitionQuantitativeDetails(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `ObservationDefinitionQuantitativeDetails is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Multiple  ranges of results qualified by different contexts for ordinal or continuous observations conforming to this ObservationDefinition.
 */
export class ObservationDefinitionQualifiedInterval extends fhir.BackboneElement {
    /**
     * Default constructor for ObservationDefinitionQualifiedInterval - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["age"]) {
            this.age = new fhir.Range(source.age);
        }
        if (source["appliesTo"]) {
            this.appliesTo = source.appliesTo.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["category"]) {
            this.category = source.category;
        }
        if (source["_category"]) {
            this._category = new fhir.FhirElement(source._category);
        }
        if (source["condition"]) {
            this.condition = source.condition;
        }
        if (source["_condition"]) {
            this._condition = new fhir.FhirElement(source._condition);
        }
        if (source["context"]) {
            this.context = new fhir.CodeableConcept(source.context);
        }
        if (source["gender"]) {
            this.gender = source.gender;
        }
        if (source["_gender"]) {
            this._gender = new fhir.FhirElement(source._gender);
        }
        if (source["gestationalAge"]) {
            this.gestationalAge = new fhir.Range(source.gestationalAge);
        }
        if (source["range"]) {
            this.range = new fhir.Range(source.range);
        }
    }
    /**
     * Check if the current ObservationDefinitionQualifiedInterval contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ObservationDefinitionQualifiedInterval from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new ObservationDefinitionQualifiedInterval(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `ObservationDefinitionQualifiedInterval is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service.
 */
export class ObservationDefinition extends fhir.DomainResource {
    /**
     * Default constructor for ObservationDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'ObservationDefinition';
        if (source["abnormalCodedValueSet"]) {
            this.abnormalCodedValueSet = new fhir.Reference(source.abnormalCodedValueSet);
        }
        if (source["category"]) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        this.code = null;
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (this.code === undefined) {
            this.code = null;
        }
        if (source["criticalCodedValueSet"]) {
            this.criticalCodedValueSet = new fhir.Reference(source.criticalCodedValueSet);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source["method"]) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source["multipleResultsAllowed"]) {
            this.multipleResultsAllowed = source.multipleResultsAllowed;
        }
        if (source["_multipleResultsAllowed"]) {
            this._multipleResultsAllowed = new fhir.FhirElement(source._multipleResultsAllowed);
        }
        if (source["normalCodedValueSet"]) {
            this.normalCodedValueSet = new fhir.Reference(source.normalCodedValueSet);
        }
        if (source["permittedDataType"]) {
            this.permittedDataType = source.permittedDataType.map((x) => (x));
        }
        if (source["_permittedDataType"]) {
            this._permittedDataType = source._permittedDataType.map((x) => new fhir.FhirElement(x));
        }
        if (source["preferredReportName"]) {
            this.preferredReportName = source.preferredReportName;
        }
        if (source["_preferredReportName"]) {
            this._preferredReportName = new fhir.FhirElement(source._preferredReportName);
        }
        if (source["qualifiedInterval"]) {
            this.qualifiedInterval = source.qualifiedInterval.map((x) => new fhir.ObservationDefinitionQualifiedInterval(x));
        }
        if (source["quantitativeDetails"]) {
            this.quantitativeDetails = new fhir.ObservationDefinitionQuantitativeDetails(source.quantitativeDetails);
        }
        if (source["validCodedValueSet"]) {
            this.validCodedValueSet = new fhir.Reference(source.validCodedValueSet);
        }
    }
    /**
     * Check if the current ObservationDefinition contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ObservationDefinition from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new ObservationDefinition(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `ObservationDefinition is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the ObservationDefinition.qualifiedInterval.category field
 */
export var ObservationDefinitionQualifiedIntervalCategoryEnum;
(function (ObservationDefinitionQualifiedIntervalCategoryEnum) {
    ObservationDefinitionQualifiedIntervalCategoryEnum["REFERENCE"] = "reference";
    ObservationDefinitionQualifiedIntervalCategoryEnum["CRITICAL"] = "critical";
    ObservationDefinitionQualifiedIntervalCategoryEnum["ABSOLUTE"] = "absolute";
})(ObservationDefinitionQualifiedIntervalCategoryEnum || (ObservationDefinitionQualifiedIntervalCategoryEnum = {}));
/**
 * Code Values for the ObservationDefinition.qualifiedInterval.gender field
 */
export var ObservationDefinitionQualifiedIntervalGenderEnum;
(function (ObservationDefinitionQualifiedIntervalGenderEnum) {
    ObservationDefinitionQualifiedIntervalGenderEnum["MALE"] = "male";
    ObservationDefinitionQualifiedIntervalGenderEnum["FEMALE"] = "female";
    ObservationDefinitionQualifiedIntervalGenderEnum["OTHER"] = "other";
    ObservationDefinitionQualifiedIntervalGenderEnum["UNKNOWN"] = "unknown";
})(ObservationDefinitionQualifiedIntervalGenderEnum || (ObservationDefinitionQualifiedIntervalGenderEnum = {}));
/**
 * Code Values for the ObservationDefinition.permittedDataType field
 */
export var ObservationDefinitionPermittedDataTypeEnum;
(function (ObservationDefinitionPermittedDataTypeEnum) {
    ObservationDefinitionPermittedDataTypeEnum["QUANTITY"] = "Quantity";
    ObservationDefinitionPermittedDataTypeEnum["CODEABLECONCEPT"] = "CodeableConcept";
    ObservationDefinitionPermittedDataTypeEnum["STRING"] = "string";
    ObservationDefinitionPermittedDataTypeEnum["BOOLEAN"] = "boolean";
    ObservationDefinitionPermittedDataTypeEnum["INTEGER"] = "integer";
    ObservationDefinitionPermittedDataTypeEnum["RANGE"] = "Range";
    ObservationDefinitionPermittedDataTypeEnum["RATIO"] = "Ratio";
    ObservationDefinitionPermittedDataTypeEnum["SAMPLEDDATA"] = "SampledData";
    ObservationDefinitionPermittedDataTypeEnum["TIME"] = "time";
    ObservationDefinitionPermittedDataTypeEnum["DATETIME"] = "dateTime";
    ObservationDefinitionPermittedDataTypeEnum["PERIOD"] = "Period";
})(ObservationDefinitionPermittedDataTypeEnum || (ObservationDefinitionPermittedDataTypeEnum = {}));
//# sourceMappingURL=ObservationDefinition.js.map