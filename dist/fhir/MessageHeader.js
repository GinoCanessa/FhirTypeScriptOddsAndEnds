// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * There SHOULD be at least one destination, but in some circumstances, the source system is unaware of any particular destination system.
 */
export class MessageHeaderDestination extends fhir.BackboneElement {
    /**
     * Default constructor for MessageHeaderDestination - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.endpoint = null;
        if (source["endpoint"]) {
            this.endpoint = source.endpoint;
        }
        if (this.endpoint === undefined) {
            this.endpoint = null;
        }
        if (source["_endpoint"]) {
            this._endpoint = new fhir.FhirElement(source._endpoint);
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["receiver"]) {
            this.receiver = new fhir.Reference(source.receiver);
        }
        if (source["target"]) {
            this.target = new fhir.Reference(source.target);
        }
    }
    /**
     * Check if the current MessageHeaderDestination contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["endpoint"] === undefined) {
            missingElements.push("endpoint");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MessageHeaderDestination from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MessageHeaderDestination(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MessageHeaderDestination is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The source application from which this message originated.
 */
export class MessageHeaderSource extends fhir.BackboneElement {
    /**
     * Default constructor for MessageHeaderSource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["contact"]) {
            this.contact = new fhir.ContactPoint(source.contact);
        }
        this.endpoint = null;
        if (source["endpoint"]) {
            this.endpoint = source.endpoint;
        }
        if (this.endpoint === undefined) {
            this.endpoint = null;
        }
        if (source["_endpoint"]) {
            this._endpoint = new fhir.FhirElement(source._endpoint);
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["software"]) {
            this.software = source.software;
        }
        if (source["_software"]) {
            this._software = new fhir.FhirElement(source._software);
        }
        if (source["version"]) {
            this.version = source.version;
        }
        if (source["_version"]) {
            this._version = new fhir.FhirElement(source._version);
        }
    }
    /**
     * Check if the current MessageHeaderSource contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["endpoint"] === undefined) {
            missingElements.push("endpoint");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MessageHeaderSource from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MessageHeaderSource(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MessageHeaderSource is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Information about the message that this message is a response to.  Only present if this message is a response.
 */
export class MessageHeaderResponse extends fhir.BackboneElement {
    /**
     * Default constructor for MessageHeaderResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.code = null;
        if (source["code"]) {
            this.code = source.code;
        }
        if (this.code === undefined) {
            this.code = null;
        }
        if (source["_code"]) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source["details"]) {
            this.details = new fhir.Reference(source.details);
        }
        this.identifier = null;
        if (source["identifier"]) {
            this.identifier = source.identifier;
        }
        if (this.identifier === undefined) {
            this.identifier = null;
        }
        if (source["_identifier"]) {
            this._identifier = new fhir.FhirElement(source._identifier);
        }
    }
    /**
     * Check if the current MessageHeaderResponse contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["code"] === undefined) {
            missingElements.push("code");
        }
        if (this["identifier"] === undefined) {
            missingElements.push("identifier");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MessageHeaderResponse from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MessageHeaderResponse(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MessageHeaderResponse is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
 */
export class MessageHeader extends fhir.DomainResource {
    /**
     * Default constructor for MessageHeader - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'MessageHeader';
        if (source["author"]) {
            this.author = new fhir.Reference(source.author);
        }
        if (source["definition"]) {
            this.definition = source.definition;
        }
        if (source["_definition"]) {
            this._definition = new fhir.FhirElement(source._definition);
        }
        if (source["destination"]) {
            this.destination = source.destination.map((x) => new fhir.MessageHeaderDestination(x));
        }
        if (source["enterer"]) {
            this.enterer = new fhir.Reference(source.enterer);
        }
        if (source["eventCoding"]) {
            this.eventCoding = new fhir.Coding(source.eventCoding);
        }
        if (source["eventUri"]) {
            this.eventUri = source.eventUri;
        }
        if (source["_eventUri"]) {
            this._eventUri = new fhir.FhirElement(source._eventUri);
        }
        if (source["focus"]) {
            this.focus = source.focus.map((x) => new fhir.Reference(x));
        }
        if (source["reason"]) {
            this.reason = new fhir.CodeableConcept(source.reason);
        }
        if (source["response"]) {
            this.response = new fhir.MessageHeaderResponse(source.response);
        }
        if (source["responsible"]) {
            this.responsible = new fhir.Reference(source.responsible);
        }
        if (source["sender"]) {
            this.sender = new fhir.Reference(source.sender);
        }
        this.source = null;
        if (source["source"]) {
            this.source = new fhir.MessageHeaderSource(source.source);
        }
        if (this.source === undefined) {
            this.source = null;
        }
    }
    /**
     * Check if the current MessageHeader contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["source"] === undefined) {
            missingElements.push("source");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a MessageHeader from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new MessageHeader(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `MessageHeader is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the MessageHeader.response.code field
 */
export var MessageHeaderResponseCodeEnum;
(function (MessageHeaderResponseCodeEnum) {
    MessageHeaderResponseCodeEnum["OK"] = "ok";
    MessageHeaderResponseCodeEnum["TRANSIENT_ERROR"] = "transient-error";
    MessageHeaderResponseCodeEnum["FATAL_ERROR"] = "fatal-error";
})(MessageHeaderResponseCodeEnum || (MessageHeaderResponseCodeEnum = {}));
//# sourceMappingURL=MessageHeader.js.map