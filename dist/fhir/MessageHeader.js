// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MessageHeader
import * as fhir from '../fhir.js';
import { ResponseCodeValueSet } from '../fhirValueSets/ResponseCodeValueSet.js';
import { MessageReasonEncounterValueSet } from '../fhirValueSets/MessageReasonEncounterValueSet.js';
/**
 * There SHOULD be at least one destination, but in some circumstances, the source system is unaware of any particular destination system.
 */
export class MessageHeaderDestination extends fhir.BackboneElement {
    /**
     * Default constructor for MessageHeaderDestination - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['target']) {
            this.target = new fhir.Reference(source.target);
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint;
        }
        else {
            this.endpoint = null;
        }
        if (source['_endpoint']) {
            this._endpoint = new fhir.FhirElement(source._endpoint);
        }
        if (source['receiver']) {
            this.receiver = new fhir.Reference(source.receiver);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["target"]) {
            results.push(...this.target.doModelValidation());
        }
        if (!this["endpoint"]) {
            results.push(["endpoint", 'Missing required element: MessageHeader.destination.endpoint']);
        }
        if (this["_endpoint"]) {
            results.push(...this._endpoint.doModelValidation());
        }
        if (this["receiver"]) {
            results.push(...this.receiver.doModelValidation());
        }
        return results;
    }
}
/**
 * The source application from which this message originated.
 */
export class MessageHeaderSource extends fhir.BackboneElement {
    /**
     * Default constructor for MessageHeaderSource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['software']) {
            this.software = source.software;
        }
        if (source['_software']) {
            this._software = new fhir.FhirElement(source._software);
        }
        if (source['version']) {
            this.version = source.version;
        }
        if (source['_version']) {
            this._version = new fhir.FhirElement(source._version);
        }
        if (source['contact']) {
            this.contact = new fhir.ContactPoint(source.contact);
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint;
        }
        else {
            this.endpoint = null;
        }
        if (source['_endpoint']) {
            this._endpoint = new fhir.FhirElement(source._endpoint);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_software"]) {
            results.push(...this._software.doModelValidation());
        }
        if (this["_version"]) {
            results.push(...this._version.doModelValidation());
        }
        if (this["contact"]) {
            results.push(...this.contact.doModelValidation());
        }
        if (!this["endpoint"]) {
            results.push(["endpoint", 'Missing required element: MessageHeader.source.endpoint']);
        }
        if (this["_endpoint"]) {
            results.push(...this._endpoint.doModelValidation());
        }
        return results;
    }
}
/**
 * Information about the message that this message is a response to.  Only present if this message is a response.
 */
export class MessageHeaderResponse extends fhir.BackboneElement {
    /**
     * Default constructor for MessageHeaderResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['identifier']) {
            this.identifier = source.identifier;
        }
        else {
            this.identifier = null;
        }
        if (source['_identifier']) {
            this._identifier = new fhir.FhirElement(source._identifier);
        }
        if (source['code']) {
            this.code = source.code;
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source['details']) {
            this.details = new fhir.Reference(source.details);
        }
    }
    /**
     * Required-bound Value Set for code
     */
    codeRequiredValueSet() {
        return ResponseCodeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["identifier"]) {
            results.push(["identifier", 'Missing required element: MessageHeader.response.identifier']);
        }
        if (this["_identifier"]) {
            results.push(...this._identifier.doModelValidation());
        }
        if (!this["code"]) {
            results.push(["code", 'Missing required element: MessageHeader.response.code']);
        }
        if (this["_code"]) {
            results.push(...this._code.doModelValidation());
        }
        if (this["details"]) {
            results.push(...this.details.doModelValidation());
        }
        return results;
    }
}
/**
 * The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
 */
export class MessageHeader extends fhir.DomainResource {
    /**
     * Default constructor for MessageHeader - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'MessageHeader';
        if (source['eventCoding']) {
            this.eventCoding = new fhir.Coding(source.eventCoding);
        }
        if (source['eventUri']) {
            this.eventUri = source.eventUri;
        }
        if (source['_eventUri']) {
            this._eventUri = new fhir.FhirElement(source._eventUri);
        }
        if (source['destination']) {
            this.destination = source.destination.map((x) => new fhir.MessageHeaderDestination(x));
        }
        if (source['sender']) {
            this.sender = new fhir.Reference(source.sender);
        }
        if (source['enterer']) {
            this.enterer = new fhir.Reference(source.enterer);
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author);
        }
        if (source['source']) {
            this.source = new fhir.MessageHeaderSource(source.source);
        }
        else {
            this.source = null;
        }
        if (source['responsible']) {
            this.responsible = new fhir.Reference(source.responsible);
        }
        if (source['reason']) {
            this.reason = new fhir.CodeableConcept(source.reason);
        }
        if (source['response']) {
            this.response = new fhir.MessageHeaderResponse(source.response);
        }
        if (source['focus']) {
            this.focus = source.focus.map((x) => new fhir.Reference(x));
        }
        if (source['definition']) {
            this.definition = source.definition;
        }
        if (source['_definition']) {
            this._definition = new fhir.FhirElement(source._definition);
        }
    }
    /**
     * Example-bound Value Set for reason
     */
    reasonExampleValueSet() {
        return MessageReasonEncounterValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: MessageHeader.resourceType']);
        }
        if (this["eventCoding"]) {
            results.push(...this.eventCoding.doModelValidation());
        }
        if (this["_eventUri"]) {
            results.push(...this._eventUri.doModelValidation());
        }
        if (this["destination"]) {
            this.destination.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["sender"]) {
            results.push(...this.sender.doModelValidation());
        }
        if (this["enterer"]) {
            results.push(...this.enterer.doModelValidation());
        }
        if (this["author"]) {
            results.push(...this.author.doModelValidation());
        }
        if (!this["source"]) {
            results.push(["source", 'Missing required element: MessageHeader.source']);
        }
        if (this["source"]) {
            results.push(...this.source.doModelValidation());
        }
        if (this["responsible"]) {
            results.push(...this.responsible.doModelValidation());
        }
        if (this["reason"]) {
            results.push(...this.reason.doModelValidation());
        }
        if (this["response"]) {
            results.push(...this.response.doModelValidation());
        }
        if (this["focus"]) {
            this.focus.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_definition"]) {
            results.push(...this._definition.doModelValidation());
        }
        return results;
    }
}
//# sourceMappingURL=MessageHeader.js.map