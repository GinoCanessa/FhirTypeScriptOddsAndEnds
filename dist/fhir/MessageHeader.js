// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MessageHeader
import * as fhir from '../fhir.js';
import { ResponseCodeValueSet, } from '../fhirValueSets/ResponseCodeValueSet.js';
import { MessageReasonEncounterValueSet, } from '../fhirValueSets/MessageReasonEncounterValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * There SHOULD be at least one destination, but in some circumstances, the source system is unaware of any particular destination system.
 */
export class MessageHeaderDestination extends fhir.BackboneElement {
    /**
     * Default constructor for MessageHeaderDestination - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MessageHeaderDestination';
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['target']) {
            this.target = new fhir.Reference(source.target);
        }
        if (source['endpoint']) {
            this.endpoint = new fhir.FhirUrl({ value: source.endpoint });
        }
        else {
            this.endpoint = null;
        }
        if (source['receiver']) {
            this.receiver = new fhir.Reference(source.receiver);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["name"]) {
            outcome.issue.push(...this.name.doModelValidation().issue);
        }
        if (this["target"]) {
            outcome.issue.push(...this.target.doModelValidation().issue);
        }
        if (!this['endpoint']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property endpoint:fhir.FhirUrl fhir: MessageHeader.destination.endpoint:url", }));
        }
        if (this["endpoint"]) {
            outcome.issue.push(...this.endpoint.doModelValidation().issue);
        }
        if (this["receiver"]) {
            outcome.issue.push(...this.receiver.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * The source application from which this message originated.
 */
export class MessageHeaderSource extends fhir.BackboneElement {
    /**
     * Default constructor for MessageHeaderSource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MessageHeaderSource';
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['software']) {
            this.software = new fhir.FhirString({ value: source.software });
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['contact']) {
            this.contact = new fhir.ContactPoint(source.contact);
        }
        if (source['endpoint']) {
            this.endpoint = new fhir.FhirUrl({ value: source.endpoint });
        }
        else {
            this.endpoint = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["name"]) {
            outcome.issue.push(...this.name.doModelValidation().issue);
        }
        if (this["software"]) {
            outcome.issue.push(...this.software.doModelValidation().issue);
        }
        if (this["version"]) {
            outcome.issue.push(...this.version.doModelValidation().issue);
        }
        if (this["contact"]) {
            outcome.issue.push(...this.contact.doModelValidation().issue);
        }
        if (!this['endpoint']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property endpoint:fhir.FhirUrl fhir: MessageHeader.source.endpoint:url", }));
        }
        if (this["endpoint"]) {
            outcome.issue.push(...this.endpoint.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Information about the message that this message is a response to.  Only present if this message is a response.
 */
export class MessageHeaderResponse extends fhir.BackboneElement {
    /**
     * Default constructor for MessageHeaderResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MessageHeaderResponse';
        if (source['identifier']) {
            this.identifier = new fhir.FhirId({ value: source.identifier });
        }
        else {
            this.identifier = null;
        }
        if (source['code']) {
            this.code = source.code;
        }
        else {
            this.code = null;
        }
        if (source['details']) {
            this.details = new fhir.Reference(source.details);
        }
    }
    /**
     * Required-bound Value Set for code
     */
    static codeRequiredValueSet() {
        return ResponseCodeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['identifier']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property identifier:fhir.FhirId fhir: MessageHeader.response.identifier:id", }));
        }
        if (this["identifier"]) {
            outcome.issue.push(...this.identifier.doModelValidation().issue);
        }
        if (!this['code']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property code:ResponseCodeValueSetEnum fhir: MessageHeader.response.code:code", }));
        }
        if (this["details"]) {
            outcome.issue.push(...this.details.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
 */
export class MessageHeader extends fhir.DomainResource {
    /**
     * Default constructor for MessageHeader - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'MessageHeader';
        this.__eventIsChoice = true;
        /**
         * There SHOULD be at least one destination, but in some circumstances, the source system is unaware of any particular destination system.
         */
        this.destination = [];
        /**
         * The data is defined where the transaction type is defined. The transaction data is always included in the bundle that is the full message.  Only the root resource is specified.  The resources it references should be contained in the bundle but are not also listed here.  Multiple repetitions are allowed to cater for merges and other situations with multiple focal targets.
         */
        this.focus = [];
        this.resourceType = 'MessageHeader';
        if (source['event']) {
            this.event = source.event;
        }
        else if (source['eventCoding']) {
            this.event = new fhir.Coding(source.eventCoding);
        }
        else if (source['eventUri']) {
            this.event = new fhir.FhirUri({ value: source.eventUri });
        }
        else {
            this.event = null;
        }
        if (source['destination']) {
            this.destination = source.destination.map((x) => new fhir.MessageHeaderDestination(x));
        }
        if (source['sender']) {
            this.sender = new fhir.Reference(source.sender);
        }
        if (source['enterer']) {
            this.enterer = new fhir.Reference(source.enterer);
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author);
        }
        if (source['source']) {
            this.source = new fhir.MessageHeaderSource(source.source);
        }
        else {
            this.source = null;
        }
        if (source['responsible']) {
            this.responsible = new fhir.Reference(source.responsible);
        }
        if (source['reason']) {
            this.reason = new fhir.CodeableConcept(source.reason);
        }
        if (source['response']) {
            this.response = new fhir.MessageHeaderResponse(source.response);
        }
        if (source['focus']) {
            this.focus = source.focus.map((x) => new fhir.Reference(x));
        }
        if (source['definition']) {
            this.definition = new fhir.FhirCanonical({ value: source.definition });
        }
    }
    /**
     * Example-bound Value Set for reason
     */
    static reasonExampleValueSet() {
        return MessageReasonEncounterValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'MessageHeader' fhir: MessageHeader.resourceType:'MessageHeader'", }));
        }
        if (!this['event']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property event: fhir: MessageHeader.event[x]:", }));
        }
        if (this["destination"]) {
            this.destination.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["sender"]) {
            outcome.issue.push(...this.sender.doModelValidation().issue);
        }
        if (this["enterer"]) {
            outcome.issue.push(...this.enterer.doModelValidation().issue);
        }
        if (this["author"]) {
            outcome.issue.push(...this.author.doModelValidation().issue);
        }
        if (!this['source']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property source:fhir.MessageHeaderSource fhir: MessageHeader.source:source", }));
        }
        if (this["source"]) {
            outcome.issue.push(...this.source.doModelValidation().issue);
        }
        if (this["responsible"]) {
            outcome.issue.push(...this.responsible.doModelValidation().issue);
        }
        if (this["reason"]) {
            outcome.issue.push(...this.reason.doModelValidation().issue);
        }
        if (this["response"]) {
            outcome.issue.push(...this.response.doModelValidation().issue);
        }
        if (this["focus"]) {
            this.focus.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["definition"]) {
            outcome.issue.push(...this.definition.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=MessageHeader.js.map