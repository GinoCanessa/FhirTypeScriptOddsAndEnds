// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: ProdCharacteristic
import * as fhir from '../fhir.js';
/**
 * The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available.
 */
export class ProdCharacteristic extends fhir.BackboneElement {
    /**
     * Default constructor for ProdCharacteristic - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'ProdCharacteristic';
        /**
         * Where applicable, the color can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.
         */
        this.color = [];
        /**
         * Where applicable, the imprint can be specified as text.
         */
        this.imprint = [];
        /**
         * Where applicable, the image can be provided The format of the image attachment shall be specified by regional implementations.
         */
        this.image = [];
        if (source['height']) {
            this.height = new fhir.Quantity(source.height);
        }
        if (source['width']) {
            this.width = new fhir.Quantity(source.width);
        }
        if (source['depth']) {
            this.depth = new fhir.Quantity(source.depth);
        }
        if (source['weight']) {
            this.weight = new fhir.Quantity(source.weight);
        }
        if (source['nominalVolume']) {
            this.nominalVolume = new fhir.Quantity(source.nominalVolume);
        }
        if (source['externalDiameter']) {
            this.externalDiameter = new fhir.Quantity(source.externalDiameter);
        }
        if (source['shape']) {
            this.shape = new fhir.FhirString({ value: source.shape });
        }
        if (source['color']) {
            this.color = source.color.map((x) => new fhir.FhirString({ value: x }));
        }
        if (source['imprint']) {
            this.imprint = source.imprint.map((x) => new fhir.FhirString({ value: x }));
        }
        if (source['image']) {
            this.image = source.image.map((x) => new fhir.Attachment(x));
        }
        if (source['scoring']) {
            this.scoring = new fhir.CodeableConcept(source.scoring);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["height"]) {
            outcome.issue.push(...this.height.doModelValidation().issue);
        }
        if (this["width"]) {
            outcome.issue.push(...this.width.doModelValidation().issue);
        }
        if (this["depth"]) {
            outcome.issue.push(...this.depth.doModelValidation().issue);
        }
        if (this["weight"]) {
            outcome.issue.push(...this.weight.doModelValidation().issue);
        }
        if (this["nominalVolume"]) {
            outcome.issue.push(...this.nominalVolume.doModelValidation().issue);
        }
        if (this["externalDiameter"]) {
            outcome.issue.push(...this.externalDiameter.doModelValidation().issue);
        }
        if (this["shape"]) {
            outcome.issue.push(...this.shape.doModelValidation().issue);
        }
        if (this["color"]) {
            this.color.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["imprint"]) {
            this.imprint.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["image"]) {
            this.image.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["scoring"]) {
            outcome.issue.push(...this.scoring.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=ProdCharacteristic.js.map