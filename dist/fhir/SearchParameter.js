// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SearchParameter
import * as fhir from '../fhir.js';
import { PublicationStatusValueSet } from '../fhirValueSets/PublicationStatusValueSet.js';
import { ResourceTypesValueSet } from '../fhirValueSets/ResourceTypesValueSet.js';
import { SearchParamTypeValueSet } from '../fhirValueSets/SearchParamTypeValueSet.js';
import { SearchXpathUsageValueSet } from '../fhirValueSets/SearchXpathUsageValueSet.js';
import { SearchComparatorValueSet } from '../fhirValueSets/SearchComparatorValueSet.js';
import { SearchModifierCodeValueSet } from '../fhirValueSets/SearchModifierCodeValueSet.js';
/**
 * Used to define the parts of a composite search parameter.
 */
export class SearchParameterComponent extends fhir.BackboneElement {
    /**
     * Default constructor for SearchParameterComponent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['definition']) {
            this.definition = source.definition;
        }
        else {
            this.definition = null;
        }
        if (source['_definition']) {
            this._definition = new fhir.FhirElement(source._definition);
        }
        if (source['expression']) {
            this.expression = source.expression;
        }
        else {
            this.expression = null;
        }
        if (source['_expression']) {
            this._expression = new fhir.FhirElement(source._expression);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["definition"]) {
            results.push(["definition", 'Missing required element: SearchParameter.component.definition']);
        }
        if (this["_definition"]) {
            results.push(...this._definition.doModelValidation());
        }
        if (!this["expression"]) {
            results.push(["expression", 'Missing required element: SearchParameter.component.expression']);
        }
        if (this["_expression"]) {
            results.push(...this._expression.doModelValidation());
        }
        return results;
    }
}
/**
 * A search parameter that defines a named search item that can be used to search/filter on a resource.
 */
export class SearchParameter extends fhir.DomainResource {
    /**
     * Default constructor for SearchParameter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'SearchParameter';
        if (source['url']) {
            this.url = source.url;
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            this._url = new fhir.FhirElement(source._url);
        }
        if (source['version']) {
            this.version = source.version;
        }
        if (source['_version']) {
            this._version = new fhir.FhirElement(source._version);
        }
        if (source['name']) {
            this.name = source.name;
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['derivedFrom']) {
            this.derivedFrom = source.derivedFrom;
        }
        if (source['_derivedFrom']) {
            this._derivedFrom = new fhir.FhirElement(source._derivedFrom);
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['experimental']) {
            this.experimental = source.experimental;
        }
        if (source['_experimental']) {
            this._experimental = new fhir.FhirElement(source._experimental);
        }
        if (source['date']) {
            this.date = source.date;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['publisher']) {
            this.publisher = source.publisher;
        }
        if (source['_publisher']) {
            this._publisher = new fhir.FhirElement(source._publisher);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        if (source['description']) {
            this.description = source.description;
        }
        else {
            this.description = null;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['purpose']) {
            this.purpose = source.purpose;
        }
        if (source['_purpose']) {
            this._purpose = new fhir.FhirElement(source._purpose);
        }
        if (source['code']) {
            this.code = source.code;
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source['base']) {
            this.base = source.base.map((x) => (x));
        }
        else {
            this.base = null;
        }
        if (source['_base']) {
            this._base = source._base.map((x) => new fhir.FhirElement(x));
        }
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source['expression']) {
            this.expression = source.expression;
        }
        if (source['_expression']) {
            this._expression = new fhir.FhirElement(source._expression);
        }
        if (source['xpath']) {
            this.xpath = source.xpath;
        }
        if (source['_xpath']) {
            this._xpath = new fhir.FhirElement(source._xpath);
        }
        if (source['xpathUsage']) {
            this.xpathUsage = source.xpathUsage;
        }
        if (source['_xpathUsage']) {
            this._xpathUsage = new fhir.FhirElement(source._xpathUsage);
        }
        if (source['target']) {
            this.target = source.target.map((x) => (x));
        }
        if (source['_target']) {
            this._target = source._target.map((x) => new fhir.FhirElement(x));
        }
        if (source['multipleOr']) {
            this.multipleOr = source.multipleOr;
        }
        if (source['_multipleOr']) {
            this._multipleOr = new fhir.FhirElement(source._multipleOr);
        }
        if (source['multipleAnd']) {
            this.multipleAnd = source.multipleAnd;
        }
        if (source['_multipleAnd']) {
            this._multipleAnd = new fhir.FhirElement(source._multipleAnd);
        }
        if (source['comparator']) {
            this.comparator = source.comparator.map((x) => (x));
        }
        if (source['_comparator']) {
            this._comparator = source._comparator.map((x) => new fhir.FhirElement(x));
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => (x));
        }
        if (source['_modifier']) {
            this._modifier = source._modifier.map((x) => new fhir.FhirElement(x));
        }
        if (source['chain']) {
            this.chain = source.chain.map((x) => (x));
        }
        if (source['_chain']) {
            this._chain = source._chain.map((x) => new fhir.FhirElement(x));
        }
        if (source['component']) {
            this.component = source.component.map((x) => new fhir.SearchParameterComponent(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return PublicationStatusValueSet;
    }
    /**
     * Required-bound Value Set for base
     */
    static baseRequiredValueSet() {
        return ResourceTypesValueSet;
    }
    /**
     * Required-bound Value Set for type
     */
    static typeRequiredValueSet() {
        return SearchParamTypeValueSet;
    }
    /**
     * Required-bound Value Set for xpathUsage
     */
    static xpathUsageRequiredValueSet() {
        return SearchXpathUsageValueSet;
    }
    /**
     * Required-bound Value Set for target
     */
    static targetRequiredValueSet() {
        return ResourceTypesValueSet;
    }
    /**
     * Required-bound Value Set for comparator
     */
    static comparatorRequiredValueSet() {
        return SearchComparatorValueSet;
    }
    /**
     * Required-bound Value Set for modifier
     */
    static modifierRequiredValueSet() {
        return SearchModifierCodeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: SearchParameter.resourceType']);
        }
        if (!this["url"]) {
            results.push(["url", 'Missing required element: SearchParameter.url']);
        }
        if (this["_url"]) {
            results.push(...this._url.doModelValidation());
        }
        if (this["_version"]) {
            results.push(...this._version.doModelValidation());
        }
        if (!this["name"]) {
            results.push(["name", 'Missing required element: SearchParameter.name']);
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_derivedFrom"]) {
            results.push(...this._derivedFrom.doModelValidation());
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: SearchParameter.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["_experimental"]) {
            results.push(...this._experimental.doModelValidation());
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["_publisher"]) {
            results.push(...this._publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["description"]) {
            results.push(["description", 'Missing required element: SearchParameter.description']);
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_purpose"]) {
            results.push(...this._purpose.doModelValidation());
        }
        if (!this["code"]) {
            results.push(["code", 'Missing required element: SearchParameter.code']);
        }
        if (this["_code"]) {
            results.push(...this._code.doModelValidation());
        }
        if ((!this["base"]) || (this["base"].length === 0)) {
            results.push(["base", 'Missing required element: SearchParameter.base']);
        }
        if (this["_base"]) {
            this._base.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["type"]) {
            results.push(["type", 'Missing required element: SearchParameter.type']);
        }
        if (this["_type"]) {
            results.push(...this._type.doModelValidation());
        }
        if (this["_expression"]) {
            results.push(...this._expression.doModelValidation());
        }
        if (this["_xpath"]) {
            results.push(...this._xpath.doModelValidation());
        }
        if (this["_xpathUsage"]) {
            results.push(...this._xpathUsage.doModelValidation());
        }
        if (this["_target"]) {
            this._target.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_multipleOr"]) {
            results.push(...this._multipleOr.doModelValidation());
        }
        if (this["_multipleAnd"]) {
            results.push(...this._multipleAnd.doModelValidation());
        }
        if (this["_comparator"]) {
            this._comparator.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_modifier"]) {
            this._modifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_chain"]) {
            this._chain.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["component"]) {
            this.component.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=SearchParameter.js.map