// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * A reference to a code defined by a terminology system.
 */
export class Coding extends fhir.FhirElement {
    /**
     * Default constructor for Coding - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["code"]) {
            this.code = source.code;
        }
        if (source["_code"]) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source["display"]) {
            this.display = source.display;
        }
        if (source["_display"]) {
            this._display = new fhir.FhirElement(source._display);
        }
        if (source["system"]) {
            this.system = source.system;
        }
        if (source["_system"]) {
            this._system = new fhir.FhirElement(source._system);
        }
        if (source["userSelected"]) {
            this.userSelected = source.userSelected;
        }
        if (source["_userSelected"]) {
            this._userSelected = new fhir.FhirElement(source._userSelected);
        }
        if (source["version"]) {
            this.version = source.version;
        }
        if (source["_version"]) {
            this._version = new fhir.FhirElement(source._version);
        }
    }
    /**
     * Check if the current Coding contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Coding from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new Coding(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `Coding is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
//# sourceMappingURL=Coding.js.map