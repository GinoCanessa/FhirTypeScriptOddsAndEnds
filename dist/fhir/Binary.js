// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Binary
import * as fhir from '../fhir.js';
/**
 * A resource that represents the data of a single raw artifact as digital content accessible in its native format.  A Binary resource can contain any content, whether text, image, pdf, zip archive, etc.
 */
export class Binary extends fhir.Resource {
    /**
     * Default constructor for Binary - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Binary';
        if (source['contentType']) {
            this.contentType = source.contentType;
        }
        else {
            this.contentType = null;
        }
        if (source['_contentType']) {
            this._contentType = new fhir.FhirElement(source._contentType);
        }
        if (source['securityContext']) {
            this.securityContext = new fhir.Reference(source.securityContext);
        }
        if (source['data']) {
            this.data = source.data;
        }
        if (source['_data']) {
            this._data = new fhir.FhirElement(source._data);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: Binary.resourceType']);
        }
        if (!this["contentType"]) {
            results.push(["contentType", 'Missing required element: Binary.contentType']);
        }
        if (this["_contentType"]) {
            results.push(...this._contentType.doModelValidation());
        }
        if (this["securityContext"]) {
            results.push(...this.securityContext.doModelValidation());
        }
        if (this["_data"]) {
            results.push(...this._data.doModelValidation());
        }
        return results;
    }
}
//# sourceMappingURL=Binary.js.map