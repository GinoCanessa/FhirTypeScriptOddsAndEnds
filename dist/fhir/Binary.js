// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * A resource that represents the data of a single raw artifact as digital content accessible in its native format.  A Binary resource can contain any content, whether text, image, pdf, zip archive, etc.
 */
export class Binary extends fhir.Resource {
    /**
     * Default constructor for Binary - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Binary';
        this.contentType = null;
        if (source["contentType"]) {
            this.contentType = source.contentType;
        }
        if (this.contentType === undefined) {
            this.contentType = null;
        }
        if (source["_contentType"]) {
            this._contentType = new fhir.FhirElement(source._contentType);
        }
        if (source["data"]) {
            this.data = source.data;
        }
        if (source["_data"]) {
            this._data = new fhir.FhirElement(source._data);
        }
        if (source["securityContext"]) {
            this.securityContext = new fhir.Reference(source.securityContext);
        }
    }
    /**
     * Check if the current Binary contains all required elements.
     */
    CheckRequiredElements() {
        var missingElements = [];
        if (this["contentType"] === undefined) {
            missingElements.push("contentType");
        }
        var parentMissing = super.CheckRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a Binary from an object that MUST contain all required elements.
     */
    static FromStrict(source) {
        var dest = new Binary(source);
        var missingElements = dest.CheckRequiredElements();
        if (missingElements.length !== 0) {
            throw `Binary is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
//# sourceMappingURL=Binary.js.map