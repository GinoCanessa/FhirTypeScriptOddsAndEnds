// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ImmunizationRecommendation
import * as fhir from '../fhir.js';
import { ImmunizationRecommendationDateCriterionValueSet } from '../fhirValueSets/ImmunizationRecommendationDateCriterionValueSet.js';
import { VaccineCodeValueSet } from '../fhirValueSets/VaccineCodeValueSet.js';
import { ImmunizationRecommendationTargetDiseaseValueSet } from '../fhirValueSets/ImmunizationRecommendationTargetDiseaseValueSet.js';
import { ImmunizationRecommendationStatusValueSet } from '../fhirValueSets/ImmunizationRecommendationStatusValueSet.js';
import { ImmunizationRecommendationReasonValueSet } from '../fhirValueSets/ImmunizationRecommendationReasonValueSet.js';
/**
 * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
 */
export class ImmunizationRecommendationRecommendationDateCriterion extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationRecommendationRecommendationDateCriterion - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['value']) {
            this.value = source.value;
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            this._value = new fhir.FhirElement(source._value);
        }
    }
    /**
     * Example-bound Value Set for code
     */
    codeExampleValueSet() {
        return ImmunizationRecommendationDateCriterionValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["code"]) {
            results.push(["code", 'Missing required element: ImmunizationRecommendation.recommendation.dateCriterion.code']);
        }
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (!this["value"]) {
            results.push(["value", 'Missing required element: ImmunizationRecommendation.recommendation.dateCriterion.value']);
        }
        if (this["_value"]) {
            results.push(...this._value.doModelValidation());
        }
        return results;
    }
}
/**
 * Vaccine administration recommendations.
 */
export class ImmunizationRecommendationRecommendation extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationRecommendationRecommendation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['vaccineCode']) {
            this.vaccineCode = source.vaccineCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['targetDisease']) {
            this.targetDisease = new fhir.CodeableConcept(source.targetDisease);
        }
        if (source['contraindicatedVaccineCode']) {
            this.contraindicatedVaccineCode = source.contraindicatedVaccineCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['forecastStatus']) {
            this.forecastStatus = new fhir.CodeableConcept(source.forecastStatus);
        }
        else {
            this.forecastStatus = null;
        }
        if (source['forecastReason']) {
            this.forecastReason = source.forecastReason.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['dateCriterion']) {
            this.dateCriterion = source.dateCriterion.map((x) => new fhir.ImmunizationRecommendationRecommendationDateCriterion(x));
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['series']) {
            this.series = source.series;
        }
        if (source['_series']) {
            this._series = new fhir.FhirElement(source._series);
        }
        if (source['doseNumberPositiveInt']) {
            this.doseNumberPositiveInt = source.doseNumberPositiveInt;
        }
        if (source['_doseNumberPositiveInt']) {
            this._doseNumberPositiveInt = new fhir.FhirElement(source._doseNumberPositiveInt);
        }
        if (source['doseNumberString']) {
            this.doseNumberString = source.doseNumberString;
        }
        if (source['_doseNumberString']) {
            this._doseNumberString = new fhir.FhirElement(source._doseNumberString);
        }
        if (source['seriesDosesPositiveInt']) {
            this.seriesDosesPositiveInt = source.seriesDosesPositiveInt;
        }
        if (source['_seriesDosesPositiveInt']) {
            this._seriesDosesPositiveInt = new fhir.FhirElement(source._seriesDosesPositiveInt);
        }
        if (source['seriesDosesString']) {
            this.seriesDosesString = source.seriesDosesString;
        }
        if (source['_seriesDosesString']) {
            this._seriesDosesString = new fhir.FhirElement(source._seriesDosesString);
        }
        if (source['supportingImmunization']) {
            this.supportingImmunization = source.supportingImmunization.map((x) => new fhir.Reference(x));
        }
        if (source['supportingPatientInformation']) {
            this.supportingPatientInformation = source.supportingPatientInformation.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Example-bound Value Set for vaccineCode
     */
    vaccineCodeExampleValueSet() {
        return VaccineCodeValueSet;
    }
    /**
     * Example-bound Value Set for targetDisease
     */
    targetDiseaseExampleValueSet() {
        return ImmunizationRecommendationTargetDiseaseValueSet;
    }
    /**
     * Example-bound Value Set for contraindicatedVaccineCode
     */
    contraindicatedVaccineCodeExampleValueSet() {
        return VaccineCodeValueSet;
    }
    /**
     * Example-bound Value Set for forecastStatus
     */
    forecastStatusExampleValueSet() {
        return ImmunizationRecommendationStatusValueSet;
    }
    /**
     * Example-bound Value Set for forecastReason
     */
    forecastReasonExampleValueSet() {
        return ImmunizationRecommendationReasonValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["vaccineCode"]) {
            this.vaccineCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["targetDisease"]) {
            results.push(...this.targetDisease.doModelValidation());
        }
        if (this["contraindicatedVaccineCode"]) {
            this.contraindicatedVaccineCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["forecastStatus"]) {
            results.push(["forecastStatus", 'Missing required element: ImmunizationRecommendation.recommendation.forecastStatus']);
        }
        if (this["forecastStatus"]) {
            results.push(...this.forecastStatus.doModelValidation());
        }
        if (this["forecastReason"]) {
            this.forecastReason.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["dateCriterion"]) {
            this.dateCriterion.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["_series"]) {
            results.push(...this._series.doModelValidation());
        }
        if (this["_doseNumberPositiveInt"]) {
            results.push(...this._doseNumberPositiveInt.doModelValidation());
        }
        if (this["_doseNumberString"]) {
            results.push(...this._doseNumberString.doModelValidation());
        }
        if (this["_seriesDosesPositiveInt"]) {
            results.push(...this._seriesDosesPositiveInt.doModelValidation());
        }
        if (this["_seriesDosesString"]) {
            results.push(...this._seriesDosesString.doModelValidation());
        }
        if (this["supportingImmunization"]) {
            this.supportingImmunization.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["supportingPatientInformation"]) {
            this.supportingPatientInformation.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification.
 */
export class ImmunizationRecommendation extends fhir.DomainResource {
    /**
     * Default constructor for ImmunizationRecommendation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'ImmunizationRecommendation';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['date']) {
            this.date = source.date;
        }
        else {
            this.date = null;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['authority']) {
            this.authority = new fhir.Reference(source.authority);
        }
        if (source['recommendation']) {
            this.recommendation = source.recommendation.map((x) => new fhir.ImmunizationRecommendationRecommendation(x));
        }
        else {
            this.recommendation = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: ImmunizationRecommendation.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["patient"]) {
            results.push(["patient", 'Missing required element: ImmunizationRecommendation.patient']);
        }
        if (this["patient"]) {
            results.push(...this.patient.doModelValidation());
        }
        if (!this["date"]) {
            results.push(["date", 'Missing required element: ImmunizationRecommendation.date']);
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["authority"]) {
            results.push(...this.authority.doModelValidation());
        }
        if ((!this["recommendation"]) || (this["recommendation"].length === 0)) {
            results.push(["recommendation", 'Missing required element: ImmunizationRecommendation.recommendation']);
        }
        if (this["recommendation"]) {
            this.recommendation.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=ImmunizationRecommendation.js.map