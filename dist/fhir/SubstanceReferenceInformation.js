// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SubstanceReferenceInformation
import * as fhir from '../fhir.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * Todo.
 */
export class SubstanceReferenceInformationGene extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceReferenceInformationGene - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'SubstanceReferenceInformationGene';
        /**
         * Todo.
         */
        this.source = [];
        if (source['geneSequenceOrigin']) {
            this.geneSequenceOrigin = new fhir.CodeableConcept(source.geneSequenceOrigin);
        }
        if (source['gene']) {
            this.gene = new fhir.CodeableConcept(source.gene);
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["geneSequenceOrigin"]) {
            outcome.issue.push(...this.geneSequenceOrigin.doModelValidation().issue);
        }
        if (this["gene"]) {
            outcome.issue.push(...this.gene.doModelValidation().issue);
        }
        if (this["source"]) {
            this.source.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Todo.
 */
export class SubstanceReferenceInformationGeneElement extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceReferenceInformationGeneElement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'SubstanceReferenceInformationGeneElement';
        /**
         * Todo.
         */
        this.source = [];
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['element']) {
            this.element = new fhir.Identifier(source.element);
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["element"]) {
            outcome.issue.push(...this.element.doModelValidation().issue);
        }
        if (this["source"]) {
            this.source.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Todo.
 */
export class SubstanceReferenceInformationClassification extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceReferenceInformationClassification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'SubstanceReferenceInformationClassification';
        /**
         * Todo.
         */
        this.subtype = [];
        /**
         * Todo.
         */
        this.source = [];
        if (source['domain']) {
            this.domain = new fhir.CodeableConcept(source.domain);
        }
        if (source['classification']) {
            this.classification = new fhir.CodeableConcept(source.classification);
        }
        if (source['subtype']) {
            this.subtype = source.subtype.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["domain"]) {
            outcome.issue.push(...this.domain.doModelValidation().issue);
        }
        if (this["classification"]) {
            outcome.issue.push(...this.classification.doModelValidation().issue);
        }
        if (this["subtype"]) {
            this.subtype.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["source"]) {
            this.source.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Todo.
 */
export class SubstanceReferenceInformationTarget extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceReferenceInformationTarget - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'SubstanceReferenceInformationTarget';
        this.__amountIsChoice = true;
        /**
         * Todo.
         */
        this.source = [];
        if (source['target']) {
            this.target = new fhir.Identifier(source.target);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['interaction']) {
            this.interaction = new fhir.CodeableConcept(source.interaction);
        }
        if (source['organism']) {
            this.organism = new fhir.CodeableConcept(source.organism);
        }
        if (source['organismType']) {
            this.organismType = new fhir.CodeableConcept(source.organismType);
        }
        if (source['amount']) {
            this.amount = source.amount;
        }
        else if (source['amountQuantity']) {
            this.amount = new fhir.Quantity(source.amountQuantity);
        }
        else if (source['amountRange']) {
            this.amount = new fhir.Range(source.amountRange);
        }
        else if (source['amountString']) {
            this.amount = new fhir.FhirString({ value: source.amountString });
        }
        if (source['amountType']) {
            this.amountType = new fhir.CodeableConcept(source.amountType);
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["target"]) {
            outcome.issue.push(...this.target.doModelValidation().issue);
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["interaction"]) {
            outcome.issue.push(...this.interaction.doModelValidation().issue);
        }
        if (this["organism"]) {
            outcome.issue.push(...this.organism.doModelValidation().issue);
        }
        if (this["organismType"]) {
            outcome.issue.push(...this.organismType.doModelValidation().issue);
        }
        if (this["amountType"]) {
            outcome.issue.push(...this.amountType.doModelValidation().issue);
        }
        if (this["source"]) {
            this.source.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Todo.
 */
export class SubstanceReferenceInformation extends fhir.DomainResource {
    /**
     * Default constructor for SubstanceReferenceInformation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'SubstanceReferenceInformation';
        /**
         * Todo.
         */
        this.gene = [];
        /**
         * Todo.
         */
        this.geneElement = [];
        /**
         * Todo.
         */
        this.classification = [];
        /**
         * Todo.
         */
        this.target = [];
        this.resourceType = 'SubstanceReferenceInformation';
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
        if (source['gene']) {
            this.gene = source.gene.map((x) => new fhir.SubstanceReferenceInformationGene(x));
        }
        if (source['geneElement']) {
            this.geneElement = source.geneElement.map((x) => new fhir.SubstanceReferenceInformationGeneElement(x));
        }
        if (source['classification']) {
            this.classification = source.classification.map((x) => new fhir.SubstanceReferenceInformationClassification(x));
        }
        if (source['target']) {
            this.target = source.target.map((x) => new fhir.SubstanceReferenceInformationTarget(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'SubstanceReferenceInformation' fhir: SubstanceReferenceInformation.resourceType:'SubstanceReferenceInformation'", }));
        }
        if (this["comment"]) {
            outcome.issue.push(...this.comment.doModelValidation().issue);
        }
        if (this["gene"]) {
            this.gene.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["geneElement"]) {
            this.geneElement.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["classification"]) {
            this.classification.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["target"]) {
            this.target.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=SubstanceReferenceInformation.js.map