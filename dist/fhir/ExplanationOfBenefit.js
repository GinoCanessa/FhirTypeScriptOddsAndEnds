// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ExplanationOfBenefit
import * as fhir from '../fhir.js';
import { RelatedClaimRelationshipValueSet } from '../fhirValueSets/RelatedClaimRelationshipValueSet.js';
import { PayeetypeValueSet } from '../fhirValueSets/PayeetypeValueSet.js';
import { ClaimCareteamroleValueSet } from '../fhirValueSets/ClaimCareteamroleValueSet.js';
import { ProviderQualificationValueSet } from '../fhirValueSets/ProviderQualificationValueSet.js';
import { ClaimInformationcategoryValueSet } from '../fhirValueSets/ClaimInformationcategoryValueSet.js';
import { ClaimExceptionValueSet } from '../fhirValueSets/ClaimExceptionValueSet.js';
import { MissingToothReasonValueSet } from '../fhirValueSets/MissingToothReasonValueSet.js';
import { ExDiagnosistypeValueSet } from '../fhirValueSets/ExDiagnosistypeValueSet.js';
import { ExDiagnosisOnAdmissionValueSet } from '../fhirValueSets/ExDiagnosisOnAdmissionValueSet.js';
import { ExDiagnosisrelatedgroupValueSet } from '../fhirValueSets/ExDiagnosisrelatedgroupValueSet.js';
import { ExProcedureTypeValueSet } from '../fhirValueSets/ExProcedureTypeValueSet.js';
import { Icd10ProceduresValueSet } from '../fhirValueSets/Icd10ProceduresValueSet.js';
import { V3ActIncidentCodeValueSet } from '../fhirValueSets/V3ActIncidentCodeValueSet.js';
import { AdjudicationValueSet } from '../fhirValueSets/AdjudicationValueSet.js';
import { AdjudicationReasonValueSet } from '../fhirValueSets/AdjudicationReasonValueSet.js';
import { ExRevenueCenterValueSet } from '../fhirValueSets/ExRevenueCenterValueSet.js';
import { ExBenefitcategoryValueSet } from '../fhirValueSets/ExBenefitcategoryValueSet.js';
import { ServiceUsclsValueSet } from '../fhirValueSets/ServiceUsclsValueSet.js';
import { ClaimModifiersValueSet } from '../fhirValueSets/ClaimModifiersValueSet.js';
import { ExProgramCodeValueSet } from '../fhirValueSets/ExProgramCodeValueSet.js';
import { ServicePlaceValueSet } from '../fhirValueSets/ServicePlaceValueSet.js';
import { ToothValueSet } from '../fhirValueSets/ToothValueSet.js';
import { SurfaceValueSet } from '../fhirValueSets/SurfaceValueSet.js';
import { ExPaymenttypeValueSet } from '../fhirValueSets/ExPaymenttypeValueSet.js';
import { PaymentAdjustmentReasonValueSet } from '../fhirValueSets/PaymentAdjustmentReasonValueSet.js';
import { NoteTypeValueSet } from '../fhirValueSets/NoteTypeValueSet.js';
import { LanguagesValueSet } from '../fhirValueSets/LanguagesValueSet.js';
import { BenefitTypeValueSet } from '../fhirValueSets/BenefitTypeValueSet.js';
import { BenefitNetworkValueSet } from '../fhirValueSets/BenefitNetworkValueSet.js';
import { BenefitUnitValueSet } from '../fhirValueSets/BenefitUnitValueSet.js';
import { BenefitTermValueSet } from '../fhirValueSets/BenefitTermValueSet.js';
import { ExplanationofbenefitStatusValueSet } from '../fhirValueSets/ExplanationofbenefitStatusValueSet.js';
import { ClaimTypeValueSet } from '../fhirValueSets/ClaimTypeValueSet.js';
import { ClaimSubtypeValueSet } from '../fhirValueSets/ClaimSubtypeValueSet.js';
import { ClaimUseValueSet } from '../fhirValueSets/ClaimUseValueSet.js';
import { FundsreserveValueSet } from '../fhirValueSets/FundsreserveValueSet.js';
import { RemittanceOutcomeValueSet } from '../fhirValueSets/RemittanceOutcomeValueSet.js';
import { FormsValueSet } from '../fhirValueSets/FormsValueSet.js';
/**
 * For example,  for the original treatment and follow-up exams.
 */
export class ExplanationOfBenefitRelated extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitRelated - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['claim']) {
            this.claim = new fhir.Reference(source.claim);
        }
        if (source['relationship']) {
            this.relationship = new fhir.CodeableConcept(source.relationship);
        }
        if (source['reference']) {
            this.reference = new fhir.Identifier(source.reference);
        }
    }
    /**
     * Example-bound Value Set for relationship
     */
    relationshipExampleValueSet() {
        return RelatedClaimRelationshipValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["claim"]) {
            results.push(...this.claim.doModelValidation());
        }
        if (this["relationship"]) {
            results.push(...this.relationship.doModelValidation());
        }
        if (this["reference"]) {
            results.push(...this.reference.doModelValidation());
        }
        return results;
    }
}
/**
 * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and may choose to pay the subscriber instead.
 */
export class ExplanationOfBenefitPayee extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitPayee - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['party']) {
            this.party = new fhir.Reference(source.party);
        }
    }
    /**
     * Example-bound Value Set for type
     */
    typeExampleValueSet() {
        return PayeetypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["party"]) {
            results.push(...this.party.doModelValidation());
        }
        return results;
    }
}
/**
 * The members of the team who provided the products and services.
 */
export class ExplanationOfBenefitCareTeam extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitCareTeam - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['sequence']) {
            this.sequence = source.sequence;
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider);
        }
        else {
            this.provider = null;
        }
        if (source['responsible']) {
            this.responsible = source.responsible;
        }
        if (source['_responsible']) {
            this._responsible = new fhir.FhirElement(source._responsible);
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        if (source['qualification']) {
            this.qualification = new fhir.CodeableConcept(source.qualification);
        }
    }
    /**
     * Example-bound Value Set for role
     */
    roleExampleValueSet() {
        return ClaimCareteamroleValueSet;
    }
    /**
     * Example-bound Value Set for qualification
     */
    qualificationExampleValueSet() {
        return ProviderQualificationValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["sequence"]) {
            results.push(["sequence", 'Missing required element: ExplanationOfBenefit.careTeam.sequence']);
        }
        if (this["_sequence"]) {
            results.push(...this._sequence.doModelValidation());
        }
        if (!this["provider"]) {
            results.push(["provider", 'Missing required element: ExplanationOfBenefit.careTeam.provider']);
        }
        if (this["provider"]) {
            results.push(...this.provider.doModelValidation());
        }
        if (this["_responsible"]) {
            results.push(...this._responsible.doModelValidation());
        }
        if (this["role"]) {
            results.push(...this.role.doModelValidation());
        }
        if (this["qualification"]) {
            results.push(...this.qualification.doModelValidation());
        }
        return results;
    }
}
/**
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
export class ExplanationOfBenefitSupportingInfo extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitSupportingInfo - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['sequence']) {
            this.sequence = source.sequence;
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        else {
            this.category = null;
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['timingDate']) {
            this.timingDate = source.timingDate;
        }
        if (source['_timingDate']) {
            this._timingDate = new fhir.FhirElement(source._timingDate);
        }
        if (source['timingPeriod']) {
            this.timingPeriod = new fhir.Period(source.timingPeriod);
        }
        if (source['valueBoolean']) {
            this.valueBoolean = source.valueBoolean;
        }
        if (source['_valueBoolean']) {
            this._valueBoolean = new fhir.FhirElement(source._valueBoolean);
        }
        if (source['valueString']) {
            this.valueString = source.valueString;
        }
        if (source['_valueString']) {
            this._valueString = new fhir.FhirElement(source._valueString);
        }
        if (source['valueQuantity']) {
            this.valueQuantity = new fhir.Quantity(source.valueQuantity);
        }
        if (source['valueAttachment']) {
            this.valueAttachment = new fhir.Attachment(source.valueAttachment);
        }
        if (source['valueReference']) {
            this.valueReference = new fhir.Reference(source.valueReference);
        }
        if (source['reason']) {
            this.reason = new fhir.Coding(source.reason);
        }
    }
    /**
     * Example-bound Value Set for category
     */
    categoryExampleValueSet() {
        return ClaimInformationcategoryValueSet;
    }
    /**
     * Example-bound Value Set for code
     */
    codeExampleValueSet() {
        return ClaimExceptionValueSet;
    }
    /**
     * Example-bound Value Set for reason
     */
    reasonExampleValueSet() {
        return MissingToothReasonValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["sequence"]) {
            results.push(["sequence", 'Missing required element: ExplanationOfBenefit.supportingInfo.sequence']);
        }
        if (this["_sequence"]) {
            results.push(...this._sequence.doModelValidation());
        }
        if (!this["category"]) {
            results.push(["category", 'Missing required element: ExplanationOfBenefit.supportingInfo.category']);
        }
        if (this["category"]) {
            results.push(...this.category.doModelValidation());
        }
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["_timingDate"]) {
            results.push(...this._timingDate.doModelValidation());
        }
        if (this["timingPeriod"]) {
            results.push(...this.timingPeriod.doModelValidation());
        }
        if (this["_valueBoolean"]) {
            results.push(...this._valueBoolean.doModelValidation());
        }
        if (this["_valueString"]) {
            results.push(...this._valueString.doModelValidation());
        }
        if (this["valueQuantity"]) {
            results.push(...this.valueQuantity.doModelValidation());
        }
        if (this["valueAttachment"]) {
            results.push(...this.valueAttachment.doModelValidation());
        }
        if (this["valueReference"]) {
            results.push(...this.valueReference.doModelValidation());
        }
        if (this["reason"]) {
            results.push(...this.reason.doModelValidation());
        }
        return results;
    }
}
/**
 * Information about diagnoses relevant to the claim items.
 */
export class ExplanationOfBenefitDiagnosis extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitDiagnosis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['sequence']) {
            this.sequence = source.sequence;
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source['diagnosisCodeableConcept']) {
            this.diagnosisCodeableConcept = new fhir.CodeableConcept(source.diagnosisCodeableConcept);
        }
        if (source['diagnosisReference']) {
            this.diagnosisReference = new fhir.Reference(source.diagnosisReference);
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['onAdmission']) {
            this.onAdmission = new fhir.CodeableConcept(source.onAdmission);
        }
        if (source['packageCode']) {
            this.packageCode = new fhir.CodeableConcept(source.packageCode);
        }
    }
    /**
     * Example-bound Value Set for type
     */
    typeExampleValueSet() {
        return ExDiagnosistypeValueSet;
    }
    /**
     * Example-bound Value Set for onAdmission
     */
    onAdmissionExampleValueSet() {
        return ExDiagnosisOnAdmissionValueSet;
    }
    /**
     * Example-bound Value Set for packageCode
     */
    packageCodeExampleValueSet() {
        return ExDiagnosisrelatedgroupValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["sequence"]) {
            results.push(["sequence", 'Missing required element: ExplanationOfBenefit.diagnosis.sequence']);
        }
        if (this["_sequence"]) {
            results.push(...this._sequence.doModelValidation());
        }
        if (this["diagnosisCodeableConcept"]) {
            results.push(...this.diagnosisCodeableConcept.doModelValidation());
        }
        if (this["diagnosisReference"]) {
            results.push(...this.diagnosisReference.doModelValidation());
        }
        if (this["type"]) {
            this.type.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["onAdmission"]) {
            results.push(...this.onAdmission.doModelValidation());
        }
        if (this["packageCode"]) {
            results.push(...this.packageCode.doModelValidation());
        }
        return results;
    }
}
/**
 * Procedures performed on the patient relevant to the billing items with the claim.
 */
export class ExplanationOfBenefitProcedure extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitProcedure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['sequence']) {
            this.sequence = source.sequence;
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['date']) {
            this.date = source.date;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['procedureCodeableConcept']) {
            this.procedureCodeableConcept = new fhir.CodeableConcept(source.procedureCodeableConcept);
        }
        if (source['procedureReference']) {
            this.procedureReference = new fhir.Reference(source.procedureReference);
        }
        if (source['udi']) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Example-bound Value Set for type
     */
    typeExampleValueSet() {
        return ExProcedureTypeValueSet;
    }
    /**
     * Example-bound Value Set for procedureCodeableConcept
     */
    procedureCodeableConceptExampleValueSet() {
        return Icd10ProceduresValueSet;
    }
    /**
     * Example-bound Value Set for procedureReference
     */
    procedureReferenceExampleValueSet() {
        return Icd10ProceduresValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["sequence"]) {
            results.push(["sequence", 'Missing required element: ExplanationOfBenefit.procedure.sequence']);
        }
        if (this["_sequence"]) {
            results.push(...this._sequence.doModelValidation());
        }
        if (this["type"]) {
            this.type.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["procedureCodeableConcept"]) {
            results.push(...this.procedureCodeableConcept.doModelValidation());
        }
        if (this["procedureReference"]) {
            results.push(...this.procedureReference.doModelValidation());
        }
        if (this["udi"]) {
            this.udi.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export class ExplanationOfBenefitInsurance extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitInsurance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['focal']) {
            this.focal = source.focal;
        }
        else {
            this.focal = null;
        }
        if (source['_focal']) {
            this._focal = new fhir.FhirElement(source._focal);
        }
        if (source['coverage']) {
            this.coverage = new fhir.Reference(source.coverage);
        }
        else {
            this.coverage = null;
        }
        if (source['preAuthRef']) {
            this.preAuthRef = source.preAuthRef.map((x) => (x));
        }
        if (source['_preAuthRef']) {
            this._preAuthRef = source._preAuthRef.map((x) => new fhir.FhirElement(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["focal"]) {
            results.push(["focal", 'Missing required element: ExplanationOfBenefit.insurance.focal']);
        }
        if (this["_focal"]) {
            results.push(...this._focal.doModelValidation());
        }
        if (!this["coverage"]) {
            results.push(["coverage", 'Missing required element: ExplanationOfBenefit.insurance.coverage']);
        }
        if (this["coverage"]) {
            results.push(...this.coverage.doModelValidation());
        }
        if (this["_preAuthRef"]) {
            this._preAuthRef.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Details of a accident which resulted in injuries which required the products and services listed in the claim.
 */
export class ExplanationOfBenefitAccident extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitAccident - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['date']) {
            this.date = source.date;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['locationAddress']) {
            this.locationAddress = new fhir.Address(source.locationAddress);
        }
        if (source['locationReference']) {
            this.locationReference = new fhir.Reference(source.locationReference);
        }
    }
    /**
     * Extensible-bound Value Set for type
     */
    typeExtensibleValueSet() {
        return V3ActIncidentCodeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["locationAddress"]) {
            results.push(...this.locationAddress.doModelValidation());
        }
        if (this["locationReference"]) {
            results.push(...this.locationReference.doModelValidation());
        }
        return results;
    }
}
/**
 * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
 */
export class ExplanationOfBenefitItemAdjudication extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitItemAdjudication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        else {
            this.category = null;
        }
        if (source['reason']) {
            this.reason = new fhir.CodeableConcept(source.reason);
        }
        if (source['amount']) {
            this.amount = new fhir.Money(source.amount);
        }
        if (source['value']) {
            this.value = source.value;
        }
        if (source['_value']) {
            this._value = new fhir.FhirElement(source._value);
        }
    }
    /**
     * Example-bound Value Set for category
     */
    categoryExampleValueSet() {
        return AdjudicationValueSet;
    }
    /**
     * Example-bound Value Set for reason
     */
    reasonExampleValueSet() {
        return AdjudicationReasonValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["category"]) {
            results.push(["category", 'Missing required element: ExplanationOfBenefit.item.adjudication.category']);
        }
        if (this["category"]) {
            results.push(...this.category.doModelValidation());
        }
        if (this["reason"]) {
            results.push(...this.reason.doModelValidation());
        }
        if (this["amount"]) {
            results.push(...this.amount.doModelValidation());
        }
        if (this["_value"]) {
            results.push(...this._value.doModelValidation());
        }
        return results;
    }
}
/**
 * Third-tier of goods and services.
 */
export class ExplanationOfBenefitItemDetailSubDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitItemDetailSubDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['sequence']) {
            this.sequence = source.sequence;
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source['revenue']) {
            this.revenue = new fhir.CodeableConcept(source.revenue);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['programCode']) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = source.factor;
        }
        if (source['_factor']) {
            this._factor = new fhir.FhirElement(source._factor);
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['udi']) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source['_noteNumber']) {
            this._noteNumber = source._noteNumber.map((x) => new fhir.FhirElement(x));
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
    }
    /**
     * Example-bound Value Set for revenue
     */
    revenueExampleValueSet() {
        return ExRevenueCenterValueSet;
    }
    /**
     * Example-bound Value Set for category
     */
    categoryExampleValueSet() {
        return ExBenefitcategoryValueSet;
    }
    /**
     * Example-bound Value Set for productOrService
     */
    productOrServiceExampleValueSet() {
        return ServiceUsclsValueSet;
    }
    /**
     * Example-bound Value Set for modifier
     */
    modifierExampleValueSet() {
        return ClaimModifiersValueSet;
    }
    /**
     * Example-bound Value Set for programCode
     */
    programCodeExampleValueSet() {
        return ExProgramCodeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["sequence"]) {
            results.push(["sequence", 'Missing required element: ExplanationOfBenefit.item.detail.subDetail.sequence']);
        }
        if (this["_sequence"]) {
            results.push(...this._sequence.doModelValidation());
        }
        if (this["revenue"]) {
            results.push(...this.revenue.doModelValidation());
        }
        if (this["category"]) {
            results.push(...this.category.doModelValidation());
        }
        if (!this["productOrService"]) {
            results.push(["productOrService", 'Missing required element: ExplanationOfBenefit.item.detail.subDetail.productOrService']);
        }
        if (this["productOrService"]) {
            results.push(...this.productOrService.doModelValidation());
        }
        if (this["modifier"]) {
            this.modifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["programCode"]) {
            this.programCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["quantity"]) {
            results.push(...this.quantity.doModelValidation());
        }
        if (this["unitPrice"]) {
            results.push(...this.unitPrice.doModelValidation());
        }
        if (this["_factor"]) {
            results.push(...this._factor.doModelValidation());
        }
        if (this["net"]) {
            results.push(...this.net.doModelValidation());
        }
        if (this["udi"]) {
            this.udi.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_noteNumber"]) {
            this._noteNumber.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["adjudication"]) {
            this.adjudication.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Second-tier of goods and services.
 */
export class ExplanationOfBenefitItemDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitItemDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['sequence']) {
            this.sequence = source.sequence;
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source['revenue']) {
            this.revenue = new fhir.CodeableConcept(source.revenue);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['programCode']) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = source.factor;
        }
        if (source['_factor']) {
            this._factor = new fhir.FhirElement(source._factor);
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['udi']) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source['_noteNumber']) {
            this._noteNumber = source._noteNumber.map((x) => new fhir.FhirElement(x));
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
        if (source['subDetail']) {
            this.subDetail = source.subDetail.map((x) => new fhir.ExplanationOfBenefitItemDetailSubDetail(x));
        }
    }
    /**
     * Example-bound Value Set for revenue
     */
    revenueExampleValueSet() {
        return ExRevenueCenterValueSet;
    }
    /**
     * Example-bound Value Set for category
     */
    categoryExampleValueSet() {
        return ExBenefitcategoryValueSet;
    }
    /**
     * Example-bound Value Set for productOrService
     */
    productOrServiceExampleValueSet() {
        return ServiceUsclsValueSet;
    }
    /**
     * Example-bound Value Set for modifier
     */
    modifierExampleValueSet() {
        return ClaimModifiersValueSet;
    }
    /**
     * Example-bound Value Set for programCode
     */
    programCodeExampleValueSet() {
        return ExProgramCodeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["sequence"]) {
            results.push(["sequence", 'Missing required element: ExplanationOfBenefit.item.detail.sequence']);
        }
        if (this["_sequence"]) {
            results.push(...this._sequence.doModelValidation());
        }
        if (this["revenue"]) {
            results.push(...this.revenue.doModelValidation());
        }
        if (this["category"]) {
            results.push(...this.category.doModelValidation());
        }
        if (!this["productOrService"]) {
            results.push(["productOrService", 'Missing required element: ExplanationOfBenefit.item.detail.productOrService']);
        }
        if (this["productOrService"]) {
            results.push(...this.productOrService.doModelValidation());
        }
        if (this["modifier"]) {
            this.modifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["programCode"]) {
            this.programCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["quantity"]) {
            results.push(...this.quantity.doModelValidation());
        }
        if (this["unitPrice"]) {
            results.push(...this.unitPrice.doModelValidation());
        }
        if (this["_factor"]) {
            results.push(...this._factor.doModelValidation());
        }
        if (this["net"]) {
            results.push(...this.net.doModelValidation());
        }
        if (this["udi"]) {
            this.udi.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_noteNumber"]) {
            this._noteNumber.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["adjudication"]) {
            this.adjudication.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["subDetail"]) {
            this.subDetail.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
 */
export class ExplanationOfBenefitItem extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['sequence']) {
            this.sequence = source.sequence;
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source['careTeamSequence']) {
            this.careTeamSequence = source.careTeamSequence.map((x) => (x));
        }
        if (source['_careTeamSequence']) {
            this._careTeamSequence = source._careTeamSequence.map((x) => new fhir.FhirElement(x));
        }
        if (source['diagnosisSequence']) {
            this.diagnosisSequence = source.diagnosisSequence.map((x) => (x));
        }
        if (source['_diagnosisSequence']) {
            this._diagnosisSequence = source._diagnosisSequence.map((x) => new fhir.FhirElement(x));
        }
        if (source['procedureSequence']) {
            this.procedureSequence = source.procedureSequence.map((x) => (x));
        }
        if (source['_procedureSequence']) {
            this._procedureSequence = source._procedureSequence.map((x) => new fhir.FhirElement(x));
        }
        if (source['informationSequence']) {
            this.informationSequence = source.informationSequence.map((x) => (x));
        }
        if (source['_informationSequence']) {
            this._informationSequence = source._informationSequence.map((x) => new fhir.FhirElement(x));
        }
        if (source['revenue']) {
            this.revenue = new fhir.CodeableConcept(source.revenue);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['programCode']) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['servicedDate']) {
            this.servicedDate = source.servicedDate;
        }
        if (source['_servicedDate']) {
            this._servicedDate = new fhir.FhirElement(source._servicedDate);
        }
        if (source['servicedPeriod']) {
            this.servicedPeriod = new fhir.Period(source.servicedPeriod);
        }
        if (source['locationCodeableConcept']) {
            this.locationCodeableConcept = new fhir.CodeableConcept(source.locationCodeableConcept);
        }
        if (source['locationAddress']) {
            this.locationAddress = new fhir.Address(source.locationAddress);
        }
        if (source['locationReference']) {
            this.locationReference = new fhir.Reference(source.locationReference);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = source.factor;
        }
        if (source['_factor']) {
            this._factor = new fhir.FhirElement(source._factor);
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['udi']) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite);
        }
        if (source['subSite']) {
            this.subSite = source.subSite.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['encounter']) {
            this.encounter = source.encounter.map((x) => new fhir.Reference(x));
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source['_noteNumber']) {
            this._noteNumber = source._noteNumber.map((x) => new fhir.FhirElement(x));
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.ExplanationOfBenefitItemDetail(x));
        }
    }
    /**
     * Example-bound Value Set for revenue
     */
    revenueExampleValueSet() {
        return ExRevenueCenterValueSet;
    }
    /**
     * Example-bound Value Set for category
     */
    categoryExampleValueSet() {
        return ExBenefitcategoryValueSet;
    }
    /**
     * Example-bound Value Set for productOrService
     */
    productOrServiceExampleValueSet() {
        return ServiceUsclsValueSet;
    }
    /**
     * Example-bound Value Set for modifier
     */
    modifierExampleValueSet() {
        return ClaimModifiersValueSet;
    }
    /**
     * Example-bound Value Set for programCode
     */
    programCodeExampleValueSet() {
        return ExProgramCodeValueSet;
    }
    /**
     * Example-bound Value Set for locationCodeableConcept
     */
    locationCodeableConceptExampleValueSet() {
        return ServicePlaceValueSet;
    }
    /**
     * Example-bound Value Set for locationAddress
     */
    locationAddressExampleValueSet() {
        return ServicePlaceValueSet;
    }
    /**
     * Example-bound Value Set for locationReference
     */
    locationReferenceExampleValueSet() {
        return ServicePlaceValueSet;
    }
    /**
     * Example-bound Value Set for bodySite
     */
    bodySiteExampleValueSet() {
        return ToothValueSet;
    }
    /**
     * Example-bound Value Set for subSite
     */
    subSiteExampleValueSet() {
        return SurfaceValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["sequence"]) {
            results.push(["sequence", 'Missing required element: ExplanationOfBenefit.item.sequence']);
        }
        if (this["_sequence"]) {
            results.push(...this._sequence.doModelValidation());
        }
        if (this["_careTeamSequence"]) {
            this._careTeamSequence.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_diagnosisSequence"]) {
            this._diagnosisSequence.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_procedureSequence"]) {
            this._procedureSequence.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_informationSequence"]) {
            this._informationSequence.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["revenue"]) {
            results.push(...this.revenue.doModelValidation());
        }
        if (this["category"]) {
            results.push(...this.category.doModelValidation());
        }
        if (!this["productOrService"]) {
            results.push(["productOrService", 'Missing required element: ExplanationOfBenefit.item.productOrService']);
        }
        if (this["productOrService"]) {
            results.push(...this.productOrService.doModelValidation());
        }
        if (this["modifier"]) {
            this.modifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["programCode"]) {
            this.programCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_servicedDate"]) {
            results.push(...this._servicedDate.doModelValidation());
        }
        if (this["servicedPeriod"]) {
            results.push(...this.servicedPeriod.doModelValidation());
        }
        if (this["locationCodeableConcept"]) {
            results.push(...this.locationCodeableConcept.doModelValidation());
        }
        if (this["locationAddress"]) {
            results.push(...this.locationAddress.doModelValidation());
        }
        if (this["locationReference"]) {
            results.push(...this.locationReference.doModelValidation());
        }
        if (this["quantity"]) {
            results.push(...this.quantity.doModelValidation());
        }
        if (this["unitPrice"]) {
            results.push(...this.unitPrice.doModelValidation());
        }
        if (this["_factor"]) {
            results.push(...this._factor.doModelValidation());
        }
        if (this["net"]) {
            results.push(...this.net.doModelValidation());
        }
        if (this["udi"]) {
            this.udi.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["bodySite"]) {
            results.push(...this.bodySite.doModelValidation());
        }
        if (this["subSite"]) {
            this.subSite.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["encounter"]) {
            this.encounter.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_noteNumber"]) {
            this._noteNumber.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["adjudication"]) {
            this.adjudication.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["detail"]) {
            this.detail.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * The third-tier service adjudications for payor added services.
 */
export class ExplanationOfBenefitAddItemDetailSubDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitAddItemDetailSubDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = source.factor;
        }
        if (source['_factor']) {
            this._factor = new fhir.FhirElement(source._factor);
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source['_noteNumber']) {
            this._noteNumber = source._noteNumber.map((x) => new fhir.FhirElement(x));
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
    }
    /**
     * Example-bound Value Set for productOrService
     */
    productOrServiceExampleValueSet() {
        return ServiceUsclsValueSet;
    }
    /**
     * Example-bound Value Set for modifier
     */
    modifierExampleValueSet() {
        return ClaimModifiersValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["productOrService"]) {
            results.push(["productOrService", 'Missing required element: ExplanationOfBenefit.addItem.detail.subDetail.productOrService']);
        }
        if (this["productOrService"]) {
            results.push(...this.productOrService.doModelValidation());
        }
        if (this["modifier"]) {
            this.modifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["quantity"]) {
            results.push(...this.quantity.doModelValidation());
        }
        if (this["unitPrice"]) {
            results.push(...this.unitPrice.doModelValidation());
        }
        if (this["_factor"]) {
            results.push(...this._factor.doModelValidation());
        }
        if (this["net"]) {
            results.push(...this.net.doModelValidation());
        }
        if (this["_noteNumber"]) {
            this._noteNumber.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["adjudication"]) {
            this.adjudication.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * The second-tier service adjudications for payor added services.
 */
export class ExplanationOfBenefitAddItemDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitAddItemDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = source.factor;
        }
        if (source['_factor']) {
            this._factor = new fhir.FhirElement(source._factor);
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source['_noteNumber']) {
            this._noteNumber = source._noteNumber.map((x) => new fhir.FhirElement(x));
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
        if (source['subDetail']) {
            this.subDetail = source.subDetail.map((x) => new fhir.ExplanationOfBenefitAddItemDetailSubDetail(x));
        }
    }
    /**
     * Example-bound Value Set for productOrService
     */
    productOrServiceExampleValueSet() {
        return ServiceUsclsValueSet;
    }
    /**
     * Example-bound Value Set for modifier
     */
    modifierExampleValueSet() {
        return ClaimModifiersValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["productOrService"]) {
            results.push(["productOrService", 'Missing required element: ExplanationOfBenefit.addItem.detail.productOrService']);
        }
        if (this["productOrService"]) {
            results.push(...this.productOrService.doModelValidation());
        }
        if (this["modifier"]) {
            this.modifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["quantity"]) {
            results.push(...this.quantity.doModelValidation());
        }
        if (this["unitPrice"]) {
            results.push(...this.unitPrice.doModelValidation());
        }
        if (this["_factor"]) {
            results.push(...this._factor.doModelValidation());
        }
        if (this["net"]) {
            results.push(...this.net.doModelValidation());
        }
        if (this["_noteNumber"]) {
            this._noteNumber.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["adjudication"]) {
            this.adjudication.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["subDetail"]) {
            this.subDetail.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * The first-tier service adjudications for payor added product or service lines.
 */
export class ExplanationOfBenefitAddItem extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitAddItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['itemSequence']) {
            this.itemSequence = source.itemSequence.map((x) => (x));
        }
        if (source['_itemSequence']) {
            this._itemSequence = source._itemSequence.map((x) => new fhir.FhirElement(x));
        }
        if (source['detailSequence']) {
            this.detailSequence = source.detailSequence.map((x) => (x));
        }
        if (source['_detailSequence']) {
            this._detailSequence = source._detailSequence.map((x) => new fhir.FhirElement(x));
        }
        if (source['subDetailSequence']) {
            this.subDetailSequence = source.subDetailSequence.map((x) => (x));
        }
        if (source['_subDetailSequence']) {
            this._subDetailSequence = source._subDetailSequence.map((x) => new fhir.FhirElement(x));
        }
        if (source['provider']) {
            this.provider = source.provider.map((x) => new fhir.Reference(x));
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['programCode']) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['servicedDate']) {
            this.servicedDate = source.servicedDate;
        }
        if (source['_servicedDate']) {
            this._servicedDate = new fhir.FhirElement(source._servicedDate);
        }
        if (source['servicedPeriod']) {
            this.servicedPeriod = new fhir.Period(source.servicedPeriod);
        }
        if (source['locationCodeableConcept']) {
            this.locationCodeableConcept = new fhir.CodeableConcept(source.locationCodeableConcept);
        }
        if (source['locationAddress']) {
            this.locationAddress = new fhir.Address(source.locationAddress);
        }
        if (source['locationReference']) {
            this.locationReference = new fhir.Reference(source.locationReference);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = source.factor;
        }
        if (source['_factor']) {
            this._factor = new fhir.FhirElement(source._factor);
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite);
        }
        if (source['subSite']) {
            this.subSite = source.subSite.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source['_noteNumber']) {
            this._noteNumber = source._noteNumber.map((x) => new fhir.FhirElement(x));
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.ExplanationOfBenefitAddItemDetail(x));
        }
    }
    /**
     * Example-bound Value Set for productOrService
     */
    productOrServiceExampleValueSet() {
        return ServiceUsclsValueSet;
    }
    /**
     * Example-bound Value Set for modifier
     */
    modifierExampleValueSet() {
        return ClaimModifiersValueSet;
    }
    /**
     * Example-bound Value Set for programCode
     */
    programCodeExampleValueSet() {
        return ExProgramCodeValueSet;
    }
    /**
     * Example-bound Value Set for locationCodeableConcept
     */
    locationCodeableConceptExampleValueSet() {
        return ServicePlaceValueSet;
    }
    /**
     * Example-bound Value Set for locationAddress
     */
    locationAddressExampleValueSet() {
        return ServicePlaceValueSet;
    }
    /**
     * Example-bound Value Set for locationReference
     */
    locationReferenceExampleValueSet() {
        return ServicePlaceValueSet;
    }
    /**
     * Example-bound Value Set for bodySite
     */
    bodySiteExampleValueSet() {
        return ToothValueSet;
    }
    /**
     * Example-bound Value Set for subSite
     */
    subSiteExampleValueSet() {
        return SurfaceValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_itemSequence"]) {
            this._itemSequence.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_detailSequence"]) {
            this._detailSequence.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_subDetailSequence"]) {
            this._subDetailSequence.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["provider"]) {
            this.provider.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["productOrService"]) {
            results.push(["productOrService", 'Missing required element: ExplanationOfBenefit.addItem.productOrService']);
        }
        if (this["productOrService"]) {
            results.push(...this.productOrService.doModelValidation());
        }
        if (this["modifier"]) {
            this.modifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["programCode"]) {
            this.programCode.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_servicedDate"]) {
            results.push(...this._servicedDate.doModelValidation());
        }
        if (this["servicedPeriod"]) {
            results.push(...this.servicedPeriod.doModelValidation());
        }
        if (this["locationCodeableConcept"]) {
            results.push(...this.locationCodeableConcept.doModelValidation());
        }
        if (this["locationAddress"]) {
            results.push(...this.locationAddress.doModelValidation());
        }
        if (this["locationReference"]) {
            results.push(...this.locationReference.doModelValidation());
        }
        if (this["quantity"]) {
            results.push(...this.quantity.doModelValidation());
        }
        if (this["unitPrice"]) {
            results.push(...this.unitPrice.doModelValidation());
        }
        if (this["_factor"]) {
            results.push(...this._factor.doModelValidation());
        }
        if (this["net"]) {
            results.push(...this.net.doModelValidation());
        }
        if (this["bodySite"]) {
            results.push(...this.bodySite.doModelValidation());
        }
        if (this["subSite"]) {
            this.subSite.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_noteNumber"]) {
            this._noteNumber.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["adjudication"]) {
            this.adjudication.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["detail"]) {
            this.detail.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Totals for amounts submitted, co-pays, benefits payable etc.
 */
export class ExplanationOfBenefitTotal extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitTotal - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        else {
            this.category = null;
        }
        if (source['amount']) {
            this.amount = new fhir.Money(source.amount);
        }
        else {
            this.amount = null;
        }
    }
    /**
     * Example-bound Value Set for category
     */
    categoryExampleValueSet() {
        return AdjudicationValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["category"]) {
            results.push(["category", 'Missing required element: ExplanationOfBenefit.total.category']);
        }
        if (this["category"]) {
            results.push(...this.category.doModelValidation());
        }
        if (!this["amount"]) {
            results.push(["amount", 'Missing required element: ExplanationOfBenefit.total.amount']);
        }
        if (this["amount"]) {
            results.push(...this.amount.doModelValidation());
        }
        return results;
    }
}
/**
 * Payment details for the adjudication of the claim.
 */
export class ExplanationOfBenefitPayment extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitPayment - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['adjustment']) {
            this.adjustment = new fhir.Money(source.adjustment);
        }
        if (source['adjustmentReason']) {
            this.adjustmentReason = new fhir.CodeableConcept(source.adjustmentReason);
        }
        if (source['date']) {
            this.date = source.date;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['amount']) {
            this.amount = new fhir.Money(source.amount);
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
    }
    /**
     * Example-bound Value Set for type
     */
    typeExampleValueSet() {
        return ExPaymenttypeValueSet;
    }
    /**
     * Example-bound Value Set for adjustmentReason
     */
    adjustmentReasonExampleValueSet() {
        return PaymentAdjustmentReasonValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["adjustment"]) {
            results.push(...this.adjustment.doModelValidation());
        }
        if (this["adjustmentReason"]) {
            results.push(...this.adjustmentReason.doModelValidation());
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if (this["amount"]) {
            results.push(...this.amount.doModelValidation());
        }
        if (this["identifier"]) {
            results.push(...this.identifier.doModelValidation());
        }
        return results;
    }
}
/**
 * A note that describes or explains adjudication results in a human readable form.
 */
export class ExplanationOfBenefitProcessNote extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitProcessNote - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['number']) {
            this.number = source.number;
        }
        if (source['_number']) {
            this._number = new fhir.FhirElement(source._number);
        }
        if (source['type']) {
            this.type = source.type;
        }
        if (source['_type']) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source['text']) {
            this.text = source.text;
        }
        if (source['_text']) {
            this._text = new fhir.FhirElement(source._text);
        }
        if (source['language']) {
            this.language = new fhir.CodeableConcept(source.language);
        }
    }
    /**
     * Required-bound Value Set for type
     */
    typeRequiredValueSet() {
        return NoteTypeValueSet;
    }
    /**
     * Preferred-bound Value Set for language
     */
    languagePreferredValueSet() {
        return LanguagesValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_number"]) {
            results.push(...this._number.doModelValidation());
        }
        if (this["_type"]) {
            results.push(...this._type.doModelValidation());
        }
        if (this["_text"]) {
            results.push(...this._text.doModelValidation());
        }
        if (this["language"]) {
            results.push(...this.language.doModelValidation());
        }
        return results;
    }
}
/**
 * Benefits Used to date.
 */
export class ExplanationOfBenefitBenefitBalanceFinancial extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitBenefitBalanceFinancial - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['allowedUnsignedInt']) {
            this.allowedUnsignedInt = source.allowedUnsignedInt;
        }
        if (source['_allowedUnsignedInt']) {
            this._allowedUnsignedInt = new fhir.FhirElement(source._allowedUnsignedInt);
        }
        if (source['allowedString']) {
            this.allowedString = source.allowedString;
        }
        if (source['_allowedString']) {
            this._allowedString = new fhir.FhirElement(source._allowedString);
        }
        if (source['allowedMoney']) {
            this.allowedMoney = new fhir.Money(source.allowedMoney);
        }
        if (source['usedUnsignedInt']) {
            this.usedUnsignedInt = source.usedUnsignedInt;
        }
        if (source['_usedUnsignedInt']) {
            this._usedUnsignedInt = new fhir.FhirElement(source._usedUnsignedInt);
        }
        if (source['usedMoney']) {
            this.usedMoney = new fhir.Money(source.usedMoney);
        }
    }
    /**
     * Example-bound Value Set for type
     */
    typeExampleValueSet() {
        return BenefitTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["type"]) {
            results.push(["type", 'Missing required element: ExplanationOfBenefit.benefitBalance.financial.type']);
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["_allowedUnsignedInt"]) {
            results.push(...this._allowedUnsignedInt.doModelValidation());
        }
        if (this["_allowedString"]) {
            results.push(...this._allowedString.doModelValidation());
        }
        if (this["allowedMoney"]) {
            results.push(...this.allowedMoney.doModelValidation());
        }
        if (this["_usedUnsignedInt"]) {
            results.push(...this._usedUnsignedInt.doModelValidation());
        }
        if (this["usedMoney"]) {
            results.push(...this.usedMoney.doModelValidation());
        }
        return results;
    }
}
/**
 * Balance by Benefit Category.
 */
export class ExplanationOfBenefitBenefitBalance extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitBenefitBalance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        else {
            this.category = null;
        }
        if (source['excluded']) {
            this.excluded = source.excluded;
        }
        if (source['_excluded']) {
            this._excluded = new fhir.FhirElement(source._excluded);
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['description']) {
            this.description = source.description;
        }
        if (source['_description']) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source['network']) {
            this.network = new fhir.CodeableConcept(source.network);
        }
        if (source['unit']) {
            this.unit = new fhir.CodeableConcept(source.unit);
        }
        if (source['term']) {
            this.term = new fhir.CodeableConcept(source.term);
        }
        if (source['financial']) {
            this.financial = source.financial.map((x) => new fhir.ExplanationOfBenefitBenefitBalanceFinancial(x));
        }
    }
    /**
     * Example-bound Value Set for category
     */
    categoryExampleValueSet() {
        return ExBenefitcategoryValueSet;
    }
    /**
     * Example-bound Value Set for network
     */
    networkExampleValueSet() {
        return BenefitNetworkValueSet;
    }
    /**
     * Example-bound Value Set for unit
     */
    unitExampleValueSet() {
        return BenefitUnitValueSet;
    }
    /**
     * Example-bound Value Set for term
     */
    termExampleValueSet() {
        return BenefitTermValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["category"]) {
            results.push(["category", 'Missing required element: ExplanationOfBenefit.benefitBalance.category']);
        }
        if (this["category"]) {
            results.push(...this.category.doModelValidation());
        }
        if (this["_excluded"]) {
            results.push(...this._excluded.doModelValidation());
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["_description"]) {
            results.push(...this._description.doModelValidation());
        }
        if (this["network"]) {
            results.push(...this.network.doModelValidation());
        }
        if (this["unit"]) {
            results.push(...this.unit.doModelValidation());
        }
        if (this["term"]) {
            results.push(...this.term.doModelValidation());
        }
        if (this["financial"]) {
            this.financial.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
export class ExplanationOfBenefit extends fhir.DomainResource {
    /**
     * Default constructor for ExplanationOfBenefit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'ExplanationOfBenefit';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['subType']) {
            this.subType = new fhir.CodeableConcept(source.subType);
        }
        if (source['use']) {
            this.use = source.use;
        }
        else {
            this.use = null;
        }
        if (source['_use']) {
            this._use = new fhir.FhirElement(source._use);
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['billablePeriod']) {
            this.billablePeriod = new fhir.Period(source.billablePeriod);
        }
        if (source['created']) {
            this.created = source.created;
        }
        else {
            this.created = null;
        }
        if (source['_created']) {
            this._created = new fhir.FhirElement(source._created);
        }
        if (source['enterer']) {
            this.enterer = new fhir.Reference(source.enterer);
        }
        if (source['insurer']) {
            this.insurer = new fhir.Reference(source.insurer);
        }
        else {
            this.insurer = null;
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider);
        }
        else {
            this.provider = null;
        }
        if (source['priority']) {
            this.priority = new fhir.CodeableConcept(source.priority);
        }
        if (source['fundsReserveRequested']) {
            this.fundsReserveRequested = new fhir.CodeableConcept(source.fundsReserveRequested);
        }
        if (source['fundsReserve']) {
            this.fundsReserve = new fhir.CodeableConcept(source.fundsReserve);
        }
        if (source['related']) {
            this.related = source.related.map((x) => new fhir.ExplanationOfBenefitRelated(x));
        }
        if (source['prescription']) {
            this.prescription = new fhir.Reference(source.prescription);
        }
        if (source['originalPrescription']) {
            this.originalPrescription = new fhir.Reference(source.originalPrescription);
        }
        if (source['payee']) {
            this.payee = new fhir.ExplanationOfBenefitPayee(source.payee);
        }
        if (source['referral']) {
            this.referral = new fhir.Reference(source.referral);
        }
        if (source['facility']) {
            this.facility = new fhir.Reference(source.facility);
        }
        if (source['claim']) {
            this.claim = new fhir.Reference(source.claim);
        }
        if (source['claimResponse']) {
            this.claimResponse = new fhir.Reference(source.claimResponse);
        }
        if (source['outcome']) {
            this.outcome = source.outcome;
        }
        else {
            this.outcome = null;
        }
        if (source['_outcome']) {
            this._outcome = new fhir.FhirElement(source._outcome);
        }
        if (source['disposition']) {
            this.disposition = source.disposition;
        }
        if (source['_disposition']) {
            this._disposition = new fhir.FhirElement(source._disposition);
        }
        if (source['preAuthRef']) {
            this.preAuthRef = source.preAuthRef.map((x) => (x));
        }
        if (source['_preAuthRef']) {
            this._preAuthRef = source._preAuthRef.map((x) => new fhir.FhirElement(x));
        }
        if (source['preAuthRefPeriod']) {
            this.preAuthRefPeriod = source.preAuthRefPeriod.map((x) => new fhir.Period(x));
        }
        if (source['careTeam']) {
            this.careTeam = source.careTeam.map((x) => new fhir.ExplanationOfBenefitCareTeam(x));
        }
        if (source['supportingInfo']) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.ExplanationOfBenefitSupportingInfo(x));
        }
        if (source['diagnosis']) {
            this.diagnosis = source.diagnosis.map((x) => new fhir.ExplanationOfBenefitDiagnosis(x));
        }
        if (source['procedure']) {
            this.procedure = source.procedure.map((x) => new fhir.ExplanationOfBenefitProcedure(x));
        }
        if (source['precedence']) {
            this.precedence = source.precedence;
        }
        if (source['_precedence']) {
            this._precedence = new fhir.FhirElement(source._precedence);
        }
        if (source['insurance']) {
            this.insurance = source.insurance.map((x) => new fhir.ExplanationOfBenefitInsurance(x));
        }
        else {
            this.insurance = null;
        }
        if (source['accident']) {
            this.accident = new fhir.ExplanationOfBenefitAccident(source.accident);
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.ExplanationOfBenefitItem(x));
        }
        if (source['addItem']) {
            this.addItem = source.addItem.map((x) => new fhir.ExplanationOfBenefitAddItem(x));
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
        if (source['total']) {
            this.total = source.total.map((x) => new fhir.ExplanationOfBenefitTotal(x));
        }
        if (source['payment']) {
            this.payment = new fhir.ExplanationOfBenefitPayment(source.payment);
        }
        if (source['formCode']) {
            this.formCode = new fhir.CodeableConcept(source.formCode);
        }
        if (source['form']) {
            this.form = new fhir.Attachment(source.form);
        }
        if (source['processNote']) {
            this.processNote = source.processNote.map((x) => new fhir.ExplanationOfBenefitProcessNote(x));
        }
        if (source['benefitPeriod']) {
            this.benefitPeriod = new fhir.Period(source.benefitPeriod);
        }
        if (source['benefitBalance']) {
            this.benefitBalance = source.benefitBalance.map((x) => new fhir.ExplanationOfBenefitBenefitBalance(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return ExplanationofbenefitStatusValueSet;
    }
    /**
     * Extensible-bound Value Set for type
     */
    typeExtensibleValueSet() {
        return ClaimTypeValueSet;
    }
    /**
     * Example-bound Value Set for subType
     */
    subTypeExampleValueSet() {
        return ClaimSubtypeValueSet;
    }
    /**
     * Required-bound Value Set for use
     */
    useRequiredValueSet() {
        return ClaimUseValueSet;
    }
    /**
     * Example-bound Value Set for fundsReserveRequested
     */
    fundsReserveRequestedExampleValueSet() {
        return FundsreserveValueSet;
    }
    /**
     * Example-bound Value Set for fundsReserve
     */
    fundsReserveExampleValueSet() {
        return FundsreserveValueSet;
    }
    /**
     * Required-bound Value Set for outcome
     */
    outcomeRequiredValueSet() {
        return RemittanceOutcomeValueSet;
    }
    /**
     * Example-bound Value Set for formCode
     */
    formCodeExampleValueSet() {
        return FormsValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: ExplanationOfBenefit.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: ExplanationOfBenefit.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (!this["type"]) {
            results.push(["type", 'Missing required element: ExplanationOfBenefit.type']);
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["subType"]) {
            results.push(...this.subType.doModelValidation());
        }
        if (!this["use"]) {
            results.push(["use", 'Missing required element: ExplanationOfBenefit.use']);
        }
        if (this["_use"]) {
            results.push(...this._use.doModelValidation());
        }
        if (!this["patient"]) {
            results.push(["patient", 'Missing required element: ExplanationOfBenefit.patient']);
        }
        if (this["patient"]) {
            results.push(...this.patient.doModelValidation());
        }
        if (this["billablePeriod"]) {
            results.push(...this.billablePeriod.doModelValidation());
        }
        if (!this["created"]) {
            results.push(["created", 'Missing required element: ExplanationOfBenefit.created']);
        }
        if (this["_created"]) {
            results.push(...this._created.doModelValidation());
        }
        if (this["enterer"]) {
            results.push(...this.enterer.doModelValidation());
        }
        if (!this["insurer"]) {
            results.push(["insurer", 'Missing required element: ExplanationOfBenefit.insurer']);
        }
        if (this["insurer"]) {
            results.push(...this.insurer.doModelValidation());
        }
        if (!this["provider"]) {
            results.push(["provider", 'Missing required element: ExplanationOfBenefit.provider']);
        }
        if (this["provider"]) {
            results.push(...this.provider.doModelValidation());
        }
        if (this["priority"]) {
            results.push(...this.priority.doModelValidation());
        }
        if (this["fundsReserveRequested"]) {
            results.push(...this.fundsReserveRequested.doModelValidation());
        }
        if (this["fundsReserve"]) {
            results.push(...this.fundsReserve.doModelValidation());
        }
        if (this["related"]) {
            this.related.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["prescription"]) {
            results.push(...this.prescription.doModelValidation());
        }
        if (this["originalPrescription"]) {
            results.push(...this.originalPrescription.doModelValidation());
        }
        if (this["payee"]) {
            results.push(...this.payee.doModelValidation());
        }
        if (this["referral"]) {
            results.push(...this.referral.doModelValidation());
        }
        if (this["facility"]) {
            results.push(...this.facility.doModelValidation());
        }
        if (this["claim"]) {
            results.push(...this.claim.doModelValidation());
        }
        if (this["claimResponse"]) {
            results.push(...this.claimResponse.doModelValidation());
        }
        if (!this["outcome"]) {
            results.push(["outcome", 'Missing required element: ExplanationOfBenefit.outcome']);
        }
        if (this["_outcome"]) {
            results.push(...this._outcome.doModelValidation());
        }
        if (this["_disposition"]) {
            results.push(...this._disposition.doModelValidation());
        }
        if (this["_preAuthRef"]) {
            this._preAuthRef.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["preAuthRefPeriod"]) {
            this.preAuthRefPeriod.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["careTeam"]) {
            this.careTeam.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["supportingInfo"]) {
            this.supportingInfo.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["diagnosis"]) {
            this.diagnosis.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["procedure"]) {
            this.procedure.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_precedence"]) {
            results.push(...this._precedence.doModelValidation());
        }
        if ((!this["insurance"]) || (this["insurance"].length === 0)) {
            results.push(["insurance", 'Missing required element: ExplanationOfBenefit.insurance']);
        }
        if (this["insurance"]) {
            this.insurance.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["accident"]) {
            results.push(...this.accident.doModelValidation());
        }
        if (this["item"]) {
            this.item.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["addItem"]) {
            this.addItem.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["adjudication"]) {
            this.adjudication.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["total"]) {
            this.total.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["payment"]) {
            results.push(...this.payment.doModelValidation());
        }
        if (this["formCode"]) {
            results.push(...this.formCode.doModelValidation());
        }
        if (this["form"]) {
            results.push(...this.form.doModelValidation());
        }
        if (this["processNote"]) {
            this.processNote.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["benefitPeriod"]) {
            results.push(...this.benefitPeriod.doModelValidation());
        }
        if (this["benefitBalance"]) {
            this.benefitBalance.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=ExplanationOfBenefit.js.map