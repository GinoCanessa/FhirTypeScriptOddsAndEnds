// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * For example,  for the original treatment and follow-up exams.
 */
export class ExplanationOfBenefitRelated extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitRelated - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["claim"]) {
            this.claim = new fhir.Reference(source.claim);
        }
        if (source["reference"]) {
            this.reference = new fhir.Identifier(source.reference);
        }
        if (source["relationship"]) {
            this.relationship = new fhir.CodeableConcept(source.relationship);
        }
    }
    /**
     * Check if the current ExplanationOfBenefitRelated contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExplanationOfBenefitRelated from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExplanationOfBenefitRelated(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExplanationOfBenefitRelated is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and may choose to pay the subscriber instead.
 */
export class ExplanationOfBenefitPayee extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitPayee - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["party"]) {
            this.party = new fhir.Reference(source.party);
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current ExplanationOfBenefitPayee contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExplanationOfBenefitPayee from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExplanationOfBenefitPayee(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExplanationOfBenefitPayee is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The members of the team who provided the products and services.
 */
export class ExplanationOfBenefitCareTeam extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitCareTeam - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.provider = null;
        if (source["provider"]) {
            this.provider = new fhir.Reference(source.provider);
        }
        if (this.provider === undefined) {
            this.provider = null;
        }
        if (source["qualification"]) {
            this.qualification = new fhir.CodeableConcept(source.qualification);
        }
        if (source["responsible"]) {
            this.responsible = source.responsible;
        }
        if (source["_responsible"]) {
            this._responsible = new fhir.FhirElement(source._responsible);
        }
        if (source["role"]) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        this.sequence = null;
        if (source["sequence"]) {
            this.sequence = source.sequence;
        }
        if (this.sequence === undefined) {
            this.sequence = null;
        }
        if (source["_sequence"]) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
    }
    /**
     * Check if the current ExplanationOfBenefitCareTeam contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["provider"] === undefined) {
            missingElements.push("provider");
        }
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExplanationOfBenefitCareTeam from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExplanationOfBenefitCareTeam(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExplanationOfBenefitCareTeam is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
export class ExplanationOfBenefitSupportingInfo extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitSupportingInfo - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.category = null;
        if (source["category"]) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (this.category === undefined) {
            this.category = null;
        }
        if (source["code"]) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source["reason"]) {
            this.reason = new fhir.Coding(source.reason);
        }
        this.sequence = null;
        if (source["sequence"]) {
            this.sequence = source.sequence;
        }
        if (this.sequence === undefined) {
            this.sequence = null;
        }
        if (source["_sequence"]) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source["timingDate"]) {
            this.timingDate = source.timingDate;
        }
        if (source["_timingDate"]) {
            this._timingDate = new fhir.FhirElement(source._timingDate);
        }
        if (source["timingPeriod"]) {
            this.timingPeriod = new fhir.Period(source.timingPeriod);
        }
        if (source["valueBoolean"]) {
            this.valueBoolean = source.valueBoolean;
        }
        if (source["_valueBoolean"]) {
            this._valueBoolean = new fhir.FhirElement(source._valueBoolean);
        }
        if (source["valueString"]) {
            this.valueString = source.valueString;
        }
        if (source["_valueString"]) {
            this._valueString = new fhir.FhirElement(source._valueString);
        }
        if (source["valueQuantity"]) {
            this.valueQuantity = new fhir.Quantity(source.valueQuantity);
        }
        if (source["valueAttachment"]) {
            this.valueAttachment = new fhir.Attachment(source.valueAttachment);
        }
        if (source["valueReference"]) {
            this.valueReference = new fhir.Reference(source.valueReference);
        }
    }
    /**
     * Check if the current ExplanationOfBenefitSupportingInfo contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["category"] === undefined) {
            missingElements.push("category");
        }
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExplanationOfBenefitSupportingInfo from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExplanationOfBenefitSupportingInfo(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExplanationOfBenefitSupportingInfo is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Information about diagnoses relevant to the claim items.
 */
export class ExplanationOfBenefitDiagnosis extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitDiagnosis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["diagnosisCodeableConcept"]) {
            this.diagnosisCodeableConcept = new fhir.CodeableConcept(source.diagnosisCodeableConcept);
        }
        if (source["diagnosisReference"]) {
            this.diagnosisReference = new fhir.Reference(source.diagnosisReference);
        }
        if (source["onAdmission"]) {
            this.onAdmission = new fhir.CodeableConcept(source.onAdmission);
        }
        if (source["packageCode"]) {
            this.packageCode = new fhir.CodeableConcept(source.packageCode);
        }
        this.sequence = null;
        if (source["sequence"]) {
            this.sequence = source.sequence;
        }
        if (this.sequence === undefined) {
            this.sequence = null;
        }
        if (source["_sequence"]) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source["type"]) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
    }
    /**
     * Check if the current ExplanationOfBenefitDiagnosis contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExplanationOfBenefitDiagnosis from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExplanationOfBenefitDiagnosis(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExplanationOfBenefitDiagnosis is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Procedures performed on the patient relevant to the billing items with the claim.
 */
export class ExplanationOfBenefitProcedure extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitProcedure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["date"]) {
            this.date = source.date;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["procedureCodeableConcept"]) {
            this.procedureCodeableConcept = new fhir.CodeableConcept(source.procedureCodeableConcept);
        }
        if (source["procedureReference"]) {
            this.procedureReference = new fhir.Reference(source.procedureReference);
        }
        this.sequence = null;
        if (source["sequence"]) {
            this.sequence = source.sequence;
        }
        if (this.sequence === undefined) {
            this.sequence = null;
        }
        if (source["_sequence"]) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source["type"]) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["udi"]) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Check if the current ExplanationOfBenefitProcedure contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExplanationOfBenefitProcedure from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExplanationOfBenefitProcedure(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExplanationOfBenefitProcedure is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export class ExplanationOfBenefitInsurance extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitInsurance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.coverage = null;
        if (source["coverage"]) {
            this.coverage = new fhir.Reference(source.coverage);
        }
        if (this.coverage === undefined) {
            this.coverage = null;
        }
        this.focal = null;
        if (source["focal"]) {
            this.focal = source.focal;
        }
        if (this.focal === undefined) {
            this.focal = null;
        }
        if (source["_focal"]) {
            this._focal = new fhir.FhirElement(source._focal);
        }
        if (source["preAuthRef"]) {
            this.preAuthRef = source.preAuthRef.map((x) => (x));
        }
        if (source["_preAuthRef"]) {
            this._preAuthRef = source._preAuthRef.map((x) => new fhir.FhirElement(x));
        }
    }
    /**
     * Check if the current ExplanationOfBenefitInsurance contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["coverage"] === undefined) {
            missingElements.push("coverage");
        }
        if (this["focal"] === undefined) {
            missingElements.push("focal");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExplanationOfBenefitInsurance from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExplanationOfBenefitInsurance(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExplanationOfBenefitInsurance is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Details of a accident which resulted in injuries which required the products and services listed in the claim.
 */
export class ExplanationOfBenefitAccident extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitAccident - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["date"]) {
            this.date = source.date;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["locationAddress"]) {
            this.locationAddress = new fhir.Address(source.locationAddress);
        }
        if (source["locationReference"]) {
            this.locationReference = new fhir.Reference(source.locationReference);
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current ExplanationOfBenefitAccident contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExplanationOfBenefitAccident from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExplanationOfBenefitAccident(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExplanationOfBenefitAccident is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
 */
export class ExplanationOfBenefitItemAdjudication extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitItemAdjudication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["amount"]) {
            this.amount = new fhir.Money(source.amount);
        }
        this.category = null;
        if (source["category"]) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (this.category === undefined) {
            this.category = null;
        }
        if (source["reason"]) {
            this.reason = new fhir.CodeableConcept(source.reason);
        }
        if (source["value"]) {
            this.value = source.value;
        }
        if (source["_value"]) {
            this._value = new fhir.FhirElement(source._value);
        }
    }
    /**
     * Check if the current ExplanationOfBenefitItemAdjudication contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["category"] === undefined) {
            missingElements.push("category");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExplanationOfBenefitItemAdjudication from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExplanationOfBenefitItemAdjudication(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExplanationOfBenefitItemAdjudication is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Third-tier of goods and services.
 */
export class ExplanationOfBenefitItemDetailSubDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitItemDetailSubDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["adjudication"]) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
        if (source["category"]) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source["factor"]) {
            this.factor = source.factor;
        }
        if (source["_factor"]) {
            this._factor = new fhir.FhirElement(source._factor);
        }
        if (source["modifier"]) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["net"]) {
            this.net = new fhir.Money(source.net);
        }
        if (source["noteNumber"]) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source["_noteNumber"]) {
            this._noteNumber = source._noteNumber.map((x) => new fhir.FhirElement(x));
        }
        this.productOrService = null;
        if (source["productOrService"]) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        if (this.productOrService === undefined) {
            this.productOrService = null;
        }
        if (source["programCode"]) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["quantity"]) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source["revenue"]) {
            this.revenue = new fhir.CodeableConcept(source.revenue);
        }
        this.sequence = null;
        if (source["sequence"]) {
            this.sequence = source.sequence;
        }
        if (this.sequence === undefined) {
            this.sequence = null;
        }
        if (source["_sequence"]) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source["udi"]) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
        if (source["unitPrice"]) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
    }
    /**
     * Check if the current ExplanationOfBenefitItemDetailSubDetail contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["productOrService"] === undefined) {
            missingElements.push("productOrService");
        }
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExplanationOfBenefitItemDetailSubDetail from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExplanationOfBenefitItemDetailSubDetail(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExplanationOfBenefitItemDetailSubDetail is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Second-tier of goods and services.
 */
export class ExplanationOfBenefitItemDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitItemDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["adjudication"]) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
        if (source["category"]) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source["factor"]) {
            this.factor = source.factor;
        }
        if (source["_factor"]) {
            this._factor = new fhir.FhirElement(source._factor);
        }
        if (source["modifier"]) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["net"]) {
            this.net = new fhir.Money(source.net);
        }
        if (source["noteNumber"]) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source["_noteNumber"]) {
            this._noteNumber = source._noteNumber.map((x) => new fhir.FhirElement(x));
        }
        this.productOrService = null;
        if (source["productOrService"]) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        if (this.productOrService === undefined) {
            this.productOrService = null;
        }
        if (source["programCode"]) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["quantity"]) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source["revenue"]) {
            this.revenue = new fhir.CodeableConcept(source.revenue);
        }
        this.sequence = null;
        if (source["sequence"]) {
            this.sequence = source.sequence;
        }
        if (this.sequence === undefined) {
            this.sequence = null;
        }
        if (source["_sequence"]) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source["subDetail"]) {
            this.subDetail = source.subDetail.map((x) => new fhir.ExplanationOfBenefitItemDetailSubDetail(x));
        }
        if (source["udi"]) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
        if (source["unitPrice"]) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
    }
    /**
     * Check if the current ExplanationOfBenefitItemDetail contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["productOrService"] === undefined) {
            missingElements.push("productOrService");
        }
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExplanationOfBenefitItemDetail from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExplanationOfBenefitItemDetail(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExplanationOfBenefitItemDetail is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
 */
export class ExplanationOfBenefitItem extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["adjudication"]) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
        if (source["bodySite"]) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite);
        }
        if (source["careTeamSequence"]) {
            this.careTeamSequence = source.careTeamSequence.map((x) => (x));
        }
        if (source["_careTeamSequence"]) {
            this._careTeamSequence = source._careTeamSequence.map((x) => new fhir.FhirElement(x));
        }
        if (source["category"]) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source["detail"]) {
            this.detail = source.detail.map((x) => new fhir.ExplanationOfBenefitItemDetail(x));
        }
        if (source["diagnosisSequence"]) {
            this.diagnosisSequence = source.diagnosisSequence.map((x) => (x));
        }
        if (source["_diagnosisSequence"]) {
            this._diagnosisSequence = source._diagnosisSequence.map((x) => new fhir.FhirElement(x));
        }
        if (source["encounter"]) {
            this.encounter = source.encounter.map((x) => new fhir.Reference(x));
        }
        if (source["factor"]) {
            this.factor = source.factor;
        }
        if (source["_factor"]) {
            this._factor = new fhir.FhirElement(source._factor);
        }
        if (source["informationSequence"]) {
            this.informationSequence = source.informationSequence.map((x) => (x));
        }
        if (source["_informationSequence"]) {
            this._informationSequence = source._informationSequence.map((x) => new fhir.FhirElement(x));
        }
        if (source["locationCodeableConcept"]) {
            this.locationCodeableConcept = new fhir.CodeableConcept(source.locationCodeableConcept);
        }
        if (source["locationAddress"]) {
            this.locationAddress = new fhir.Address(source.locationAddress);
        }
        if (source["locationReference"]) {
            this.locationReference = new fhir.Reference(source.locationReference);
        }
        if (source["modifier"]) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["net"]) {
            this.net = new fhir.Money(source.net);
        }
        if (source["noteNumber"]) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source["_noteNumber"]) {
            this._noteNumber = source._noteNumber.map((x) => new fhir.FhirElement(x));
        }
        if (source["procedureSequence"]) {
            this.procedureSequence = source.procedureSequence.map((x) => (x));
        }
        if (source["_procedureSequence"]) {
            this._procedureSequence = source._procedureSequence.map((x) => new fhir.FhirElement(x));
        }
        this.productOrService = null;
        if (source["productOrService"]) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        if (this.productOrService === undefined) {
            this.productOrService = null;
        }
        if (source["programCode"]) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["quantity"]) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source["revenue"]) {
            this.revenue = new fhir.CodeableConcept(source.revenue);
        }
        this.sequence = null;
        if (source["sequence"]) {
            this.sequence = source.sequence;
        }
        if (this.sequence === undefined) {
            this.sequence = null;
        }
        if (source["_sequence"]) {
            this._sequence = new fhir.FhirElement(source._sequence);
        }
        if (source["servicedDate"]) {
            this.servicedDate = source.servicedDate;
        }
        if (source["_servicedDate"]) {
            this._servicedDate = new fhir.FhirElement(source._servicedDate);
        }
        if (source["servicedPeriod"]) {
            this.servicedPeriod = new fhir.Period(source.servicedPeriod);
        }
        if (source["subSite"]) {
            this.subSite = source.subSite.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["udi"]) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
        if (source["unitPrice"]) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
    }
    /**
     * Check if the current ExplanationOfBenefitItem contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["productOrService"] === undefined) {
            missingElements.push("productOrService");
        }
        if (this["sequence"] === undefined) {
            missingElements.push("sequence");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExplanationOfBenefitItem from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExplanationOfBenefitItem(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExplanationOfBenefitItem is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The third-tier service adjudications for payor added services.
 */
export class ExplanationOfBenefitAddItemDetailSubDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitAddItemDetailSubDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["adjudication"]) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
        if (source["factor"]) {
            this.factor = source.factor;
        }
        if (source["_factor"]) {
            this._factor = new fhir.FhirElement(source._factor);
        }
        if (source["modifier"]) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["net"]) {
            this.net = new fhir.Money(source.net);
        }
        if (source["noteNumber"]) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source["_noteNumber"]) {
            this._noteNumber = source._noteNumber.map((x) => new fhir.FhirElement(x));
        }
        this.productOrService = null;
        if (source["productOrService"]) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        if (this.productOrService === undefined) {
            this.productOrService = null;
        }
        if (source["quantity"]) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source["unitPrice"]) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
    }
    /**
     * Check if the current ExplanationOfBenefitAddItemDetailSubDetail contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["productOrService"] === undefined) {
            missingElements.push("productOrService");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExplanationOfBenefitAddItemDetailSubDetail from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExplanationOfBenefitAddItemDetailSubDetail(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExplanationOfBenefitAddItemDetailSubDetail is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The second-tier service adjudications for payor added services.
 */
export class ExplanationOfBenefitAddItemDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitAddItemDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["adjudication"]) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
        if (source["factor"]) {
            this.factor = source.factor;
        }
        if (source["_factor"]) {
            this._factor = new fhir.FhirElement(source._factor);
        }
        if (source["modifier"]) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["net"]) {
            this.net = new fhir.Money(source.net);
        }
        if (source["noteNumber"]) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source["_noteNumber"]) {
            this._noteNumber = source._noteNumber.map((x) => new fhir.FhirElement(x));
        }
        this.productOrService = null;
        if (source["productOrService"]) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        if (this.productOrService === undefined) {
            this.productOrService = null;
        }
        if (source["quantity"]) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source["subDetail"]) {
            this.subDetail = source.subDetail.map((x) => new fhir.ExplanationOfBenefitAddItemDetailSubDetail(x));
        }
        if (source["unitPrice"]) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
    }
    /**
     * Check if the current ExplanationOfBenefitAddItemDetail contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["productOrService"] === undefined) {
            missingElements.push("productOrService");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExplanationOfBenefitAddItemDetail from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExplanationOfBenefitAddItemDetail(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExplanationOfBenefitAddItemDetail is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * The first-tier service adjudications for payor added product or service lines.
 */
export class ExplanationOfBenefitAddItem extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitAddItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["adjudication"]) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
        if (source["bodySite"]) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite);
        }
        if (source["detail"]) {
            this.detail = source.detail.map((x) => new fhir.ExplanationOfBenefitAddItemDetail(x));
        }
        if (source["detailSequence"]) {
            this.detailSequence = source.detailSequence.map((x) => (x));
        }
        if (source["_detailSequence"]) {
            this._detailSequence = source._detailSequence.map((x) => new fhir.FhirElement(x));
        }
        if (source["factor"]) {
            this.factor = source.factor;
        }
        if (source["_factor"]) {
            this._factor = new fhir.FhirElement(source._factor);
        }
        if (source["itemSequence"]) {
            this.itemSequence = source.itemSequence.map((x) => (x));
        }
        if (source["_itemSequence"]) {
            this._itemSequence = source._itemSequence.map((x) => new fhir.FhirElement(x));
        }
        if (source["locationCodeableConcept"]) {
            this.locationCodeableConcept = new fhir.CodeableConcept(source.locationCodeableConcept);
        }
        if (source["locationAddress"]) {
            this.locationAddress = new fhir.Address(source.locationAddress);
        }
        if (source["locationReference"]) {
            this.locationReference = new fhir.Reference(source.locationReference);
        }
        if (source["modifier"]) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["net"]) {
            this.net = new fhir.Money(source.net);
        }
        if (source["noteNumber"]) {
            this.noteNumber = source.noteNumber.map((x) => (x));
        }
        if (source["_noteNumber"]) {
            this._noteNumber = source._noteNumber.map((x) => new fhir.FhirElement(x));
        }
        this.productOrService = null;
        if (source["productOrService"]) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        if (this.productOrService === undefined) {
            this.productOrService = null;
        }
        if (source["programCode"]) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["provider"]) {
            this.provider = source.provider.map((x) => new fhir.Reference(x));
        }
        if (source["quantity"]) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source["servicedDate"]) {
            this.servicedDate = source.servicedDate;
        }
        if (source["_servicedDate"]) {
            this._servicedDate = new fhir.FhirElement(source._servicedDate);
        }
        if (source["servicedPeriod"]) {
            this.servicedPeriod = new fhir.Period(source.servicedPeriod);
        }
        if (source["subDetailSequence"]) {
            this.subDetailSequence = source.subDetailSequence.map((x) => (x));
        }
        if (source["_subDetailSequence"]) {
            this._subDetailSequence = source._subDetailSequence.map((x) => new fhir.FhirElement(x));
        }
        if (source["subSite"]) {
            this.subSite = source.subSite.map((x) => new fhir.CodeableConcept(x));
        }
        if (source["unitPrice"]) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
    }
    /**
     * Check if the current ExplanationOfBenefitAddItem contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["productOrService"] === undefined) {
            missingElements.push("productOrService");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExplanationOfBenefitAddItem from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExplanationOfBenefitAddItem(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExplanationOfBenefitAddItem is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Totals for amounts submitted, co-pays, benefits payable etc.
 */
export class ExplanationOfBenefitTotal extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitTotal - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.amount = null;
        if (source["amount"]) {
            this.amount = new fhir.Money(source.amount);
        }
        if (this.amount === undefined) {
            this.amount = null;
        }
        this.category = null;
        if (source["category"]) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (this.category === undefined) {
            this.category = null;
        }
    }
    /**
     * Check if the current ExplanationOfBenefitTotal contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["amount"] === undefined) {
            missingElements.push("amount");
        }
        if (this["category"] === undefined) {
            missingElements.push("category");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExplanationOfBenefitTotal from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExplanationOfBenefitTotal(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExplanationOfBenefitTotal is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Payment details for the adjudication of the claim.
 */
export class ExplanationOfBenefitPayment extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitPayment - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["adjustment"]) {
            this.adjustment = new fhir.Money(source.adjustment);
        }
        if (source["adjustmentReason"]) {
            this.adjustmentReason = new fhir.CodeableConcept(source.adjustmentReason);
        }
        if (source["amount"]) {
            this.amount = new fhir.Money(source.amount);
        }
        if (source["date"]) {
            this.date = source.date;
        }
        if (source["_date"]) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source["identifier"]) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Check if the current ExplanationOfBenefitPayment contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExplanationOfBenefitPayment from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExplanationOfBenefitPayment(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExplanationOfBenefitPayment is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * A note that describes or explains adjudication results in a human readable form.
 */
export class ExplanationOfBenefitProcessNote extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitProcessNote - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["language"]) {
            this.language = new fhir.CodeableConcept(source.language);
        }
        if (source["number"]) {
            this.number = source.number;
        }
        if (source["_number"]) {
            this._number = new fhir.FhirElement(source._number);
        }
        if (source["text"]) {
            this.text = source.text;
        }
        if (source["_text"]) {
            this._text = new fhir.FhirElement(source._text);
        }
        if (source["type"]) {
            this.type = source.type;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
    }
    /**
     * Check if the current ExplanationOfBenefitProcessNote contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExplanationOfBenefitProcessNote from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExplanationOfBenefitProcessNote(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExplanationOfBenefitProcessNote is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Benefits Used to date.
 */
export class ExplanationOfBenefitBenefitBalanceFinancial extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitBenefitBalanceFinancial - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["allowedUnsignedInt"]) {
            this.allowedUnsignedInt = source.allowedUnsignedInt;
        }
        if (source["_allowedUnsignedInt"]) {
            this._allowedUnsignedInt = new fhir.FhirElement(source._allowedUnsignedInt);
        }
        if (source["allowedString"]) {
            this.allowedString = source.allowedString;
        }
        if (source["_allowedString"]) {
            this._allowedString = new fhir.FhirElement(source._allowedString);
        }
        if (source["allowedMoney"]) {
            this.allowedMoney = new fhir.Money(source.allowedMoney);
        }
        this.type = null;
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (this.type === undefined) {
            this.type = null;
        }
        if (source["usedUnsignedInt"]) {
            this.usedUnsignedInt = source.usedUnsignedInt;
        }
        if (source["_usedUnsignedInt"]) {
            this._usedUnsignedInt = new fhir.FhirElement(source._usedUnsignedInt);
        }
        if (source["usedMoney"]) {
            this.usedMoney = new fhir.Money(source.usedMoney);
        }
    }
    /**
     * Check if the current ExplanationOfBenefitBenefitBalanceFinancial contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExplanationOfBenefitBenefitBalanceFinancial from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExplanationOfBenefitBenefitBalanceFinancial(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExplanationOfBenefitBenefitBalanceFinancial is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Balance by Benefit Category.
 */
export class ExplanationOfBenefitBenefitBalance extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitBenefitBalance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.category = null;
        if (source["category"]) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (this.category === undefined) {
            this.category = null;
        }
        if (source["description"]) {
            this.description = source.description;
        }
        if (source["_description"]) {
            this._description = new fhir.FhirElement(source._description);
        }
        if (source["excluded"]) {
            this.excluded = source.excluded;
        }
        if (source["_excluded"]) {
            this._excluded = new fhir.FhirElement(source._excluded);
        }
        if (source["financial"]) {
            this.financial = source.financial.map((x) => new fhir.ExplanationOfBenefitBenefitBalanceFinancial(x));
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["network"]) {
            this.network = new fhir.CodeableConcept(source.network);
        }
        if (source["term"]) {
            this.term = new fhir.CodeableConcept(source.term);
        }
        if (source["unit"]) {
            this.unit = new fhir.CodeableConcept(source.unit);
        }
    }
    /**
     * Check if the current ExplanationOfBenefitBenefitBalance contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["category"] === undefined) {
            missingElements.push("category");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExplanationOfBenefitBenefitBalance from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExplanationOfBenefitBenefitBalance(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExplanationOfBenefitBenefitBalance is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
export class ExplanationOfBenefit extends fhir.DomainResource {
    /**
     * Default constructor for ExplanationOfBenefit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'ExplanationOfBenefit';
        if (source["accident"]) {
            this.accident = new fhir.ExplanationOfBenefitAccident(source.accident);
        }
        if (source["addItem"]) {
            this.addItem = source.addItem.map((x) => new fhir.ExplanationOfBenefitAddItem(x));
        }
        if (source["adjudication"]) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
        if (source["benefitBalance"]) {
            this.benefitBalance = source.benefitBalance.map((x) => new fhir.ExplanationOfBenefitBenefitBalance(x));
        }
        if (source["benefitPeriod"]) {
            this.benefitPeriod = new fhir.Period(source.benefitPeriod);
        }
        if (source["billablePeriod"]) {
            this.billablePeriod = new fhir.Period(source.billablePeriod);
        }
        if (source["careTeam"]) {
            this.careTeam = source.careTeam.map((x) => new fhir.ExplanationOfBenefitCareTeam(x));
        }
        if (source["claim"]) {
            this.claim = new fhir.Reference(source.claim);
        }
        if (source["claimResponse"]) {
            this.claimResponse = new fhir.Reference(source.claimResponse);
        }
        this.created = null;
        if (source["created"]) {
            this.created = source.created;
        }
        if (this.created === undefined) {
            this.created = null;
        }
        if (source["_created"]) {
            this._created = new fhir.FhirElement(source._created);
        }
        if (source["diagnosis"]) {
            this.diagnosis = source.diagnosis.map((x) => new fhir.ExplanationOfBenefitDiagnosis(x));
        }
        if (source["disposition"]) {
            this.disposition = source.disposition;
        }
        if (source["_disposition"]) {
            this._disposition = new fhir.FhirElement(source._disposition);
        }
        if (source["enterer"]) {
            this.enterer = new fhir.Reference(source.enterer);
        }
        if (source["facility"]) {
            this.facility = new fhir.Reference(source.facility);
        }
        if (source["form"]) {
            this.form = new fhir.Attachment(source.form);
        }
        if (source["formCode"]) {
            this.formCode = new fhir.CodeableConcept(source.formCode);
        }
        if (source["fundsReserve"]) {
            this.fundsReserve = new fhir.CodeableConcept(source.fundsReserve);
        }
        if (source["fundsReserveRequested"]) {
            this.fundsReserveRequested = new fhir.CodeableConcept(source.fundsReserveRequested);
        }
        if (source["identifier"]) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        this.insurance = null;
        if (source["insurance"]) {
            this.insurance = source.insurance.map((x) => new fhir.ExplanationOfBenefitInsurance(x));
        }
        if (this.insurance === undefined) {
            this.insurance = null;
        }
        this.insurer = null;
        if (source["insurer"]) {
            this.insurer = new fhir.Reference(source.insurer);
        }
        if (this.insurer === undefined) {
            this.insurer = null;
        }
        if (source["item"]) {
            this.item = source.item.map((x) => new fhir.ExplanationOfBenefitItem(x));
        }
        if (source["originalPrescription"]) {
            this.originalPrescription = new fhir.Reference(source.originalPrescription);
        }
        this.outcome = null;
        if (source["outcome"]) {
            this.outcome = source.outcome;
        }
        if (this.outcome === undefined) {
            this.outcome = null;
        }
        if (source["_outcome"]) {
            this._outcome = new fhir.FhirElement(source._outcome);
        }
        this.patient = null;
        if (source["patient"]) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (this.patient === undefined) {
            this.patient = null;
        }
        if (source["payee"]) {
            this.payee = new fhir.ExplanationOfBenefitPayee(source.payee);
        }
        if (source["payment"]) {
            this.payment = new fhir.ExplanationOfBenefitPayment(source.payment);
        }
        if (source["preAuthRef"]) {
            this.preAuthRef = source.preAuthRef.map((x) => (x));
        }
        if (source["_preAuthRef"]) {
            this._preAuthRef = source._preAuthRef.map((x) => new fhir.FhirElement(x));
        }
        if (source["preAuthRefPeriod"]) {
            this.preAuthRefPeriod = source.preAuthRefPeriod.map((x) => new fhir.Period(x));
        }
        if (source["precedence"]) {
            this.precedence = source.precedence;
        }
        if (source["_precedence"]) {
            this._precedence = new fhir.FhirElement(source._precedence);
        }
        if (source["prescription"]) {
            this.prescription = new fhir.Reference(source.prescription);
        }
        if (source["priority"]) {
            this.priority = new fhir.CodeableConcept(source.priority);
        }
        if (source["procedure"]) {
            this.procedure = source.procedure.map((x) => new fhir.ExplanationOfBenefitProcedure(x));
        }
        if (source["processNote"]) {
            this.processNote = source.processNote.map((x) => new fhir.ExplanationOfBenefitProcessNote(x));
        }
        this.provider = null;
        if (source["provider"]) {
            this.provider = new fhir.Reference(source.provider);
        }
        if (this.provider === undefined) {
            this.provider = null;
        }
        if (source["referral"]) {
            this.referral = new fhir.Reference(source.referral);
        }
        if (source["related"]) {
            this.related = source.related.map((x) => new fhir.ExplanationOfBenefitRelated(x));
        }
        this.status = null;
        if (source["status"]) {
            this.status = source.status;
        }
        if (this.status === undefined) {
            this.status = null;
        }
        if (source["_status"]) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source["subType"]) {
            this.subType = new fhir.CodeableConcept(source.subType);
        }
        if (source["supportingInfo"]) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.ExplanationOfBenefitSupportingInfo(x));
        }
        if (source["total"]) {
            this.total = source.total.map((x) => new fhir.ExplanationOfBenefitTotal(x));
        }
        this.type = null;
        if (source["type"]) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (this.type === undefined) {
            this.type = null;
        }
        this.use = null;
        if (source["use"]) {
            this.use = source.use;
        }
        if (this.use === undefined) {
            this.use = null;
        }
        if (source["_use"]) {
            this._use = new fhir.FhirElement(source._use);
        }
    }
    /**
     * Check if the current ExplanationOfBenefit contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["created"] === undefined) {
            missingElements.push("created");
        }
        if ((!this["insurance"]) || (this["insurance"].length === 0)) {
            missingElements.push("insurance");
        }
        if (this["insurer"] === undefined) {
            missingElements.push("insurer");
        }
        if (this["outcome"] === undefined) {
            missingElements.push("outcome");
        }
        if (this["patient"] === undefined) {
            missingElements.push("patient");
        }
        if (this["provider"] === undefined) {
            missingElements.push("provider");
        }
        if (this["status"] === undefined) {
            missingElements.push("status");
        }
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        if (this["use"] === undefined) {
            missingElements.push("use");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a ExplanationOfBenefit from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new ExplanationOfBenefit(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `ExplanationOfBenefit is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the ExplanationOfBenefit.processNote.type field
 */
export var ExplanationOfBenefitProcessNoteTypeEnum;
(function (ExplanationOfBenefitProcessNoteTypeEnum) {
    ExplanationOfBenefitProcessNoteTypeEnum["DISPLAY"] = "display";
    ExplanationOfBenefitProcessNoteTypeEnum["PRINT"] = "print";
    ExplanationOfBenefitProcessNoteTypeEnum["PRINTOPER"] = "printoper";
})(ExplanationOfBenefitProcessNoteTypeEnum || (ExplanationOfBenefitProcessNoteTypeEnum = {}));
/**
 * Code Values for the ExplanationOfBenefit.outcome field
 */
export var ExplanationOfBenefitOutcomeEnum;
(function (ExplanationOfBenefitOutcomeEnum) {
    ExplanationOfBenefitOutcomeEnum["QUEUED"] = "queued";
    ExplanationOfBenefitOutcomeEnum["COMPLETE"] = "complete";
    ExplanationOfBenefitOutcomeEnum["ERROR"] = "error";
    ExplanationOfBenefitOutcomeEnum["PARTIAL"] = "partial";
})(ExplanationOfBenefitOutcomeEnum || (ExplanationOfBenefitOutcomeEnum = {}));
/**
 * Code Values for the ExplanationOfBenefit.status field
 */
export var ExplanationOfBenefitStatusEnum;
(function (ExplanationOfBenefitStatusEnum) {
    ExplanationOfBenefitStatusEnum["ACTIVE"] = "active";
    ExplanationOfBenefitStatusEnum["CANCELLED"] = "cancelled";
    ExplanationOfBenefitStatusEnum["DRAFT"] = "draft";
    ExplanationOfBenefitStatusEnum["ENTERED_IN_ERROR"] = "entered-in-error";
})(ExplanationOfBenefitStatusEnum || (ExplanationOfBenefitStatusEnum = {}));
/**
 * Code Values for the ExplanationOfBenefit.use field
 */
export var ExplanationOfBenefitUseEnum;
(function (ExplanationOfBenefitUseEnum) {
    ExplanationOfBenefitUseEnum["CLAIM"] = "claim";
    ExplanationOfBenefitUseEnum["PREAUTHORIZATION"] = "preauthorization";
    ExplanationOfBenefitUseEnum["PREDETERMINATION"] = "predetermination";
})(ExplanationOfBenefitUseEnum || (ExplanationOfBenefitUseEnum = {}));
//# sourceMappingURL=ExplanationOfBenefit.js.map