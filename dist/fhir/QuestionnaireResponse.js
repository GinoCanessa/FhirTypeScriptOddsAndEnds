// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: QuestionnaireResponse
import * as fhir from '../fhir.js';
import { QuestionnaireAnswersStatusValueSet } from '../fhirValueSets/QuestionnaireAnswersStatusValueSet.js';
/**
 * The value is nested because we cannot have a repeating structure that has variable type.
 */
export class QuestionnaireResponseItemAnswer extends fhir.BackboneElement {
    /**
     * Default constructor for QuestionnaireResponseItemAnswer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['valueBoolean']) {
            this.valueBoolean = source.valueBoolean;
        }
        if (source['_valueBoolean']) {
            this._valueBoolean = new fhir.FhirElement(source._valueBoolean);
        }
        if (source['valueDecimal']) {
            this.valueDecimal = source.valueDecimal;
        }
        if (source['_valueDecimal']) {
            this._valueDecimal = new fhir.FhirElement(source._valueDecimal);
        }
        if (source['valueInteger']) {
            this.valueInteger = source.valueInteger;
        }
        if (source['_valueInteger']) {
            this._valueInteger = new fhir.FhirElement(source._valueInteger);
        }
        if (source['valueDate']) {
            this.valueDate = source.valueDate;
        }
        if (source['_valueDate']) {
            this._valueDate = new fhir.FhirElement(source._valueDate);
        }
        if (source['valueDateTime']) {
            this.valueDateTime = source.valueDateTime;
        }
        if (source['_valueDateTime']) {
            this._valueDateTime = new fhir.FhirElement(source._valueDateTime);
        }
        if (source['valueTime']) {
            this.valueTime = source.valueTime;
        }
        if (source['_valueTime']) {
            this._valueTime = new fhir.FhirElement(source._valueTime);
        }
        if (source['valueString']) {
            this.valueString = source.valueString;
        }
        if (source['_valueString']) {
            this._valueString = new fhir.FhirElement(source._valueString);
        }
        if (source['valueUri']) {
            this.valueUri = source.valueUri;
        }
        if (source['_valueUri']) {
            this._valueUri = new fhir.FhirElement(source._valueUri);
        }
        if (source['valueAttachment']) {
            this.valueAttachment = new fhir.Attachment(source.valueAttachment);
        }
        if (source['valueCoding']) {
            this.valueCoding = new fhir.Coding(source.valueCoding);
        }
        if (source['valueQuantity']) {
            this.valueQuantity = new fhir.Quantity(source.valueQuantity);
        }
        if (source['valueReference']) {
            this.valueReference = new fhir.Reference(source.valueReference);
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.QuestionnaireResponseItem(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_valueBoolean"]) {
            results.push(...this._valueBoolean.doModelValidation());
        }
        if (this["_valueDecimal"]) {
            results.push(...this._valueDecimal.doModelValidation());
        }
        if (this["_valueInteger"]) {
            results.push(...this._valueInteger.doModelValidation());
        }
        if (this["_valueDate"]) {
            results.push(...this._valueDate.doModelValidation());
        }
        if (this["_valueDateTime"]) {
            results.push(...this._valueDateTime.doModelValidation());
        }
        if (this["_valueTime"]) {
            results.push(...this._valueTime.doModelValidation());
        }
        if (this["_valueString"]) {
            results.push(...this._valueString.doModelValidation());
        }
        if (this["_valueUri"]) {
            results.push(...this._valueUri.doModelValidation());
        }
        if (this["valueAttachment"]) {
            results.push(...this.valueAttachment.doModelValidation());
        }
        if (this["valueCoding"]) {
            results.push(...this.valueCoding.doModelValidation());
        }
        if (this["valueQuantity"]) {
            results.push(...this.valueQuantity.doModelValidation());
        }
        if (this["valueReference"]) {
            results.push(...this.valueReference.doModelValidation());
        }
        if (this["item"]) {
            this.item.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Groups cannot have answers and therefore must nest directly within item. When dealing with questions, nesting must occur within each answer because some questions may have multiple answers (and the nesting occurs for each answer).
 */
export class QuestionnaireResponseItem extends fhir.BackboneElement {
    /**
     * Default constructor for QuestionnaireResponseItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['linkId']) {
            this.linkId = source.linkId;
        }
        else {
            this.linkId = null;
        }
        if (source['_linkId']) {
            this._linkId = new fhir.FhirElement(source._linkId);
        }
        if (source['definition']) {
            this.definition = source.definition;
        }
        if (source['_definition']) {
            this._definition = new fhir.FhirElement(source._definition);
        }
        if (source['text']) {
            this.text = source.text;
        }
        if (source['_text']) {
            this._text = new fhir.FhirElement(source._text);
        }
        if (source['answer']) {
            this.answer = source.answer.map((x) => new fhir.QuestionnaireResponseItemAnswer(x));
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.QuestionnaireResponseItem(x));
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["linkId"]) {
            results.push(["linkId", 'Missing required element: QuestionnaireResponse.item.linkId']);
        }
        if (this["_linkId"]) {
            results.push(...this._linkId.doModelValidation());
        }
        if (this["_definition"]) {
            results.push(...this._definition.doModelValidation());
        }
        if (this["_text"]) {
            results.push(...this._text.doModelValidation());
        }
        if (this["answer"]) {
            this.answer.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["item"]) {
            this.item.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to.
 */
export class QuestionnaireResponse extends fhir.DomainResource {
    /**
     * Default constructor for QuestionnaireResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'QuestionnaireResponse';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        if (source['questionnaire']) {
            this.questionnaire = source.questionnaire;
        }
        if (source['_questionnaire']) {
            this._questionnaire = new fhir.FhirElement(source._questionnaire);
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['authored']) {
            this.authored = source.authored;
        }
        if (source['_authored']) {
            this._authored = new fhir.FhirElement(source._authored);
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author);
        }
        if (source['source']) {
            this.source = new fhir.Reference(source.source);
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.QuestionnaireResponseItem(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return QuestionnaireAnswersStatusValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: QuestionnaireResponse.resourceType']);
        }
        if (this["identifier"]) {
            results.push(...this.identifier.doModelValidation());
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["partOf"]) {
            this.partOf.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_questionnaire"]) {
            results.push(...this._questionnaire.doModelValidation());
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: QuestionnaireResponse.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["subject"]) {
            results.push(...this.subject.doModelValidation());
        }
        if (this["encounter"]) {
            results.push(...this.encounter.doModelValidation());
        }
        if (this["_authored"]) {
            results.push(...this._authored.doModelValidation());
        }
        if (this["author"]) {
            results.push(...this.author.doModelValidation());
        }
        if (this["source"]) {
            results.push(...this.source.doModelValidation());
        }
        if (this["item"]) {
            this.item.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=QuestionnaireResponse.js.map