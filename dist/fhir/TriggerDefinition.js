// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Primitive Naming Style: None
// Complex Type / Resource Naming Style: PascalCase
// Interaction Naming Style: None
// Extension Support: NonPrimitive
// Minimum TypeScript Version: 3.7
import * as fhir from '../fhir';
/**
 * A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.
 */
export class TriggerDefinition extends fhir.FhirElement {
    /**
     * Default constructor for TriggerDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source["condition"]) {
            this.condition = new fhir.Expression(source.condition);
        }
        if (source["data"]) {
            this.data = source.data.map((x) => new fhir.DataRequirement(x));
        }
        if (source["name"]) {
            this.name = source.name;
        }
        if (source["_name"]) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source["timingTiming"]) {
            this.timingTiming = new fhir.Timing(source.timingTiming);
        }
        if (source["timingReference"]) {
            this.timingReference = new fhir.Reference(source.timingReference);
        }
        if (source["timingDate"]) {
            this.timingDate = source.timingDate;
        }
        if (source["_timingDate"]) {
            this._timingDate = new fhir.FhirElement(source._timingDate);
        }
        if (source["timingDateTime"]) {
            this.timingDateTime = source.timingDateTime;
        }
        if (source["_timingDateTime"]) {
            this._timingDateTime = new fhir.FhirElement(source._timingDateTime);
        }
        this.type = null;
        if (source["type"]) {
            this.type = source.type;
        }
        if (this.type === undefined) {
            this.type = null;
        }
        if (source["_type"]) {
            this._type = new fhir.FhirElement(source._type);
        }
    }
    /**
     * Check if the current TriggerDefinition contains all required elements.
     */
    checkRequiredElements() {
        var missingElements = [];
        if (this["type"] === undefined) {
            missingElements.push("type");
        }
        var parentMissing = super.checkRequiredElements();
        missingElements.push(...parentMissing);
        return missingElements;
    }
    /**
     * Factory function to create a TriggerDefinition from an object that MUST contain all required elements.
     */
    static fromStrict(source) {
        var dest = new TriggerDefinition(source);
        var missingElements = dest.checkRequiredElements();
        if (missingElements.length !== 0) {
            throw `TriggerDefinition is missing elements: ${missingElements.join(", ")}`;
        }
        return dest;
    }
}
/**
 * Code Values for the TriggerDefinition.type field
 */
export var TriggerDefinitionTypeEnum;
(function (TriggerDefinitionTypeEnum) {
    TriggerDefinitionTypeEnum["NAMED_EVENT"] = "named-event";
    TriggerDefinitionTypeEnum["PERIODIC"] = "periodic";
    TriggerDefinitionTypeEnum["DATA_CHANGED"] = "data-changed";
    TriggerDefinitionTypeEnum["DATA_ADDED"] = "data-added";
    TriggerDefinitionTypeEnum["DATA_MODIFIED"] = "data-modified";
    TriggerDefinitionTypeEnum["DATA_REMOVED"] = "data-removed";
    TriggerDefinitionTypeEnum["DATA_ACCESSED"] = "data-accessed";
    TriggerDefinitionTypeEnum["DATA_ACCESS_ENDED"] = "data-access-ended";
})(TriggerDefinitionTypeEnum || (TriggerDefinitionTypeEnum = {}));
//# sourceMappingURL=TriggerDefinition.js.map