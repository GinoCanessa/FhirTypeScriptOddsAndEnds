// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: TriggerDefinition
import * as fhir from '../fhir.js';
import { TriggerTypeValueSet } from '../fhirValueSets/TriggerTypeValueSet.js';
/**
 * A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.
 */
export class TriggerDefinition extends fhir.FhirElement {
    /**
     * Default constructor for TriggerDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            this._type = new fhir.FhirElement(source._type);
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
        if (source['timingTiming']) {
            this.timingTiming = new fhir.Timing(source.timingTiming);
        }
        if (source['timingReference']) {
            this.timingReference = new fhir.Reference(source.timingReference);
        }
        if (source['timingDate']) {
            this.timingDate = source.timingDate;
        }
        if (source['_timingDate']) {
            this._timingDate = new fhir.FhirElement(source._timingDate);
        }
        if (source['timingDateTime']) {
            this.timingDateTime = source.timingDateTime;
        }
        if (source['_timingDateTime']) {
            this._timingDateTime = new fhir.FhirElement(source._timingDateTime);
        }
        if (source['data']) {
            this.data = source.data.map((x) => new fhir.DataRequirement(x));
        }
        if (source['condition']) {
            this.condition = new fhir.Expression(source.condition);
        }
    }
    /**
     * Required-bound Value Set for type
     */
    static typeRequiredValueSet() {
        return TriggerTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["type"]) {
            results.push(["type", 'Missing required element: TriggerDefinition.type']);
        }
        if (this["_type"]) {
            results.push(...this._type.doModelValidation());
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        if (this["timingTiming"]) {
            results.push(...this.timingTiming.doModelValidation());
        }
        if (this["timingReference"]) {
            results.push(...this.timingReference.doModelValidation());
        }
        if (this["_timingDate"]) {
            results.push(...this._timingDate.doModelValidation());
        }
        if (this["_timingDateTime"]) {
            results.push(...this._timingDateTime.doModelValidation());
        }
        if (this["data"]) {
            this.data.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["condition"]) {
            results.push(...this.condition.doModelValidation());
        }
        return results;
    }
}
//# sourceMappingURL=TriggerDefinition.js.map