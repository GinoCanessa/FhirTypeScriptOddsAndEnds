// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Composition
import * as fhir from '../fhir.js';
import { CompositionAttestationModeValueSet } from '../fhirValueSets/CompositionAttestationModeValueSet.js';
import { DocumentRelationshipTypeValueSet } from '../fhirValueSets/DocumentRelationshipTypeValueSet.js';
import { V3ActCodeValueSet } from '../fhirValueSets/V3ActCodeValueSet.js';
import { DocSectionCodesValueSet } from '../fhirValueSets/DocSectionCodesValueSet.js';
import { ListModeValueSet } from '../fhirValueSets/ListModeValueSet.js';
import { ListOrderValueSet } from '../fhirValueSets/ListOrderValueSet.js';
import { ListEmptyReasonValueSet } from '../fhirValueSets/ListEmptyReasonValueSet.js';
import { CompositionStatusValueSet } from '../fhirValueSets/CompositionStatusValueSet.js';
import { DocTypecodesValueSet } from '../fhirValueSets/DocTypecodesValueSet.js';
import { DocumentClasscodesValueSet } from '../fhirValueSets/DocumentClasscodesValueSet.js';
import { V3ConfidentialityClassificationValueSet } from '../fhirValueSets/V3ConfidentialityClassificationValueSet.js';
/**
 * Only list each attester once.
 */
export class CompositionAttester extends fhir.BackboneElement {
    /**
     * Default constructor for CompositionAttester - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['mode']) {
            this.mode = source.mode;
        }
        else {
            this.mode = null;
        }
        if (source['_mode']) {
            this._mode = new fhir.FhirElement(source._mode);
        }
        if (source['time']) {
            this.time = source.time;
        }
        if (source['_time']) {
            this._time = new fhir.FhirElement(source._time);
        }
        if (source['party']) {
            this.party = new fhir.Reference(source.party);
        }
    }
    /**
     * Required-bound Value Set for mode
     */
    static modeRequiredValueSet() {
        return CompositionAttestationModeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["mode"]) {
            results.push(["mode", 'Missing required element: Composition.attester.mode']);
        }
        if (this["_mode"]) {
            results.push(...this._mode.doModelValidation());
        }
        if (this["_time"]) {
            results.push(...this._time.doModelValidation());
        }
        if (this["party"]) {
            results.push(...this.party.doModelValidation());
        }
        return results;
    }
}
/**
 * A document is a version specific composition.
 */
export class CompositionRelatesTo extends fhir.BackboneElement {
    /**
     * Default constructor for CompositionRelatesTo - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = source.code;
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            this._code = new fhir.FhirElement(source._code);
        }
        if (source['targetIdentifier']) {
            this.targetIdentifier = new fhir.Identifier(source.targetIdentifier);
        }
        if (source['targetReference']) {
            this.targetReference = new fhir.Reference(source.targetReference);
        }
    }
    /**
     * Required-bound Value Set for code
     */
    static codeRequiredValueSet() {
        return DocumentRelationshipTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["code"]) {
            results.push(["code", 'Missing required element: Composition.relatesTo.code']);
        }
        if (this["_code"]) {
            results.push(...this._code.doModelValidation());
        }
        if (this["targetIdentifier"]) {
            results.push(...this.targetIdentifier.doModelValidation());
        }
        if (this["targetReference"]) {
            results.push(...this.targetReference.doModelValidation());
        }
        return results;
    }
}
/**
 * The event needs to be consistent with the type element, though can provide further information if desired.
 */
export class CompositionEvent extends fhir.BackboneElement {
    /**
     * Default constructor for CompositionEvent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Example-bound Value Set for code
     */
    static codeExampleValueSet() {
        return V3ActCodeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["code"]) {
            this.code.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["period"]) {
            results.push(...this.period.doModelValidation());
        }
        if (this["detail"]) {
            this.detail.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * The root of the sections that make up the composition.
 */
export class CompositionSection extends fhir.BackboneElement {
    /**
     * Default constructor for CompositionSection - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['title']) {
            this.title = source.title;
        }
        if (source['_title']) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.Reference(x));
        }
        if (source['focus']) {
            this.focus = new fhir.Reference(source.focus);
        }
        if (source['text']) {
            this.text = new fhir.Narrative(source.text);
        }
        if (source['mode']) {
            this.mode = source.mode;
        }
        if (source['_mode']) {
            this._mode = new fhir.FhirElement(source._mode);
        }
        if (source['orderedBy']) {
            this.orderedBy = new fhir.CodeableConcept(source.orderedBy);
        }
        if (source['entry']) {
            this.entry = source.entry.map((x) => new fhir.Reference(x));
        }
        if (source['emptyReason']) {
            this.emptyReason = new fhir.CodeableConcept(source.emptyReason);
        }
        if (source['section']) {
            this.section = source.section.map((x) => new fhir.CompositionSection(x));
        }
    }
    /**
     * Example-bound Value Set for code
     */
    static codeExampleValueSet() {
        return DocSectionCodesValueSet;
    }
    /**
     * Required-bound Value Set for mode
     */
    static modeRequiredValueSet() {
        return ListModeValueSet;
    }
    /**
     * Preferred-bound Value Set for orderedBy
     */
    static orderedByPreferredValueSet() {
        return ListOrderValueSet;
    }
    /**
     * Preferred-bound Value Set for emptyReason
     */
    static emptyReasonPreferredValueSet() {
        return ListEmptyReasonValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["_title"]) {
            results.push(...this._title.doModelValidation());
        }
        if (this["code"]) {
            results.push(...this.code.doModelValidation());
        }
        if (this["author"]) {
            this.author.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["focus"]) {
            results.push(...this.focus.doModelValidation());
        }
        if (this["text"]) {
            results.push(...this.text.doModelValidation());
        }
        if (this["_mode"]) {
            results.push(...this._mode.doModelValidation());
        }
        if (this["orderedBy"]) {
            results.push(...this.orderedBy.doModelValidation());
        }
        if (this["entry"]) {
            this.entry.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["emptyReason"]) {
            results.push(...this.emptyReason.doModelValidation());
        }
        if (this["section"]) {
            this.section.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.).
 */
export class Composition extends fhir.DomainResource {
    /**
     * Default constructor for Composition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Composition';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['date']) {
            this.date = source.date;
        }
        else {
            this.date = null;
        }
        if (source['_date']) {
            this._date = new fhir.FhirElement(source._date);
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.Reference(x));
        }
        else {
            this.author = null;
        }
        if (source['title']) {
            this.title = source.title;
        }
        else {
            this.title = null;
        }
        if (source['_title']) {
            this._title = new fhir.FhirElement(source._title);
        }
        if (source['confidentiality']) {
            this.confidentiality = source.confidentiality;
        }
        if (source['_confidentiality']) {
            this._confidentiality = new fhir.FhirElement(source._confidentiality);
        }
        if (source['attester']) {
            this.attester = source.attester.map((x) => new fhir.CompositionAttester(x));
        }
        if (source['custodian']) {
            this.custodian = new fhir.Reference(source.custodian);
        }
        if (source['relatesTo']) {
            this.relatesTo = source.relatesTo.map((x) => new fhir.CompositionRelatesTo(x));
        }
        if (source['event']) {
            this.event = source.event.map((x) => new fhir.CompositionEvent(x));
        }
        if (source['section']) {
            this.section = source.section.map((x) => new fhir.CompositionSection(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return CompositionStatusValueSet;
    }
    /**
     * Preferred-bound Value Set for type
     */
    static typePreferredValueSet() {
        return DocTypecodesValueSet;
    }
    /**
     * Example-bound Value Set for category
     */
    static categoryExampleValueSet() {
        return DocumentClasscodesValueSet;
    }
    /**
     * Required-bound Value Set for confidentiality
     */
    static confidentialityRequiredValueSet() {
        return V3ConfidentialityClassificationValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: Composition.resourceType']);
        }
        if (this["identifier"]) {
            results.push(...this.identifier.doModelValidation());
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: Composition.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (!this["type"]) {
            results.push(["type", 'Missing required element: Composition.type']);
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["category"]) {
            this.category.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["subject"]) {
            results.push(...this.subject.doModelValidation());
        }
        if (this["encounter"]) {
            results.push(...this.encounter.doModelValidation());
        }
        if (!this["date"]) {
            results.push(["date", 'Missing required element: Composition.date']);
        }
        if (this["_date"]) {
            results.push(...this._date.doModelValidation());
        }
        if ((!this["author"]) || (this["author"].length === 0)) {
            results.push(["author", 'Missing required element: Composition.author']);
        }
        if (this["author"]) {
            this.author.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["title"]) {
            results.push(["title", 'Missing required element: Composition.title']);
        }
        if (this["_title"]) {
            results.push(...this._title.doModelValidation());
        }
        if (this["_confidentiality"]) {
            results.push(...this._confidentiality.doModelValidation());
        }
        if (this["attester"]) {
            this.attester.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["custodian"]) {
            results.push(...this.custodian.doModelValidation());
        }
        if (this["relatesTo"]) {
            this.relatesTo.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["event"]) {
            this.event.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["section"]) {
            this.section.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=Composition.js.map