// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Coverage
import * as fhir from '../fhir.js';
import { CoverageClassValueSet, } from '../fhirValueSets/CoverageClassValueSet.js';
import { CoverageFinancialExceptionValueSet, } from '../fhirValueSets/CoverageFinancialExceptionValueSet.js';
import { CoverageCopayTypeValueSet, } from '../fhirValueSets/CoverageCopayTypeValueSet.js';
import { FmStatusValueSet, } from '../fhirValueSets/FmStatusValueSet.js';
import { CoverageTypeValueSet, } from '../fhirValueSets/CoverageTypeValueSet.js';
import { SubscriberRelationshipValueSet, } from '../fhirValueSets/SubscriberRelationshipValueSet.js';
import { IssueTypeValueSetEnum } from '../valueSetEnums.js';
import { IssueSeverityValueSetEnum } from '../valueSetEnums.js';
/**
 * For example may be used to identify a class of coverage or employer group, Policy, Plan.
 */
export class CoverageClass extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageClass - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'CoverageClass';
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        else {
            this.value = null;
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
    }
    /**
     * Extensible-bound Value Set for type
     */
    static typeExtensibleValueSet() {
        return CoverageClassValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['type']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property type:fhir.CodeableConcept fhir: Coverage.class.type:CodeableConcept", }));
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (!this['value']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property value:fhir.FhirString fhir: Coverage.class.value:string", }));
        }
        if (this["value"]) {
            outcome.issue.push(...this.value.doModelValidation().issue);
        }
        if (this["name"]) {
            outcome.issue.push(...this.name.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * A suite of codes indicating exceptions or reductions to patient costs and their effective periods.
 */
export class CoverageCostToBeneficiaryException extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageCostToBeneficiaryException - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'CoverageCostToBeneficiaryException';
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Example-bound Value Set for type
     */
    static typeExampleValueSet() {
        return CoverageFinancialExceptionValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['type']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property type:fhir.CodeableConcept fhir: Coverage.costToBeneficiary.exception.type:CodeableConcept", }));
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["period"]) {
            outcome.issue.push(...this.period.doModelValidation().issue);
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * For example by knowing the patient visit co-pay, the provider can collect the amount prior to undertaking treatment.
 */
export class CoverageCostToBeneficiary extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageCostToBeneficiary - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'CoverageCostToBeneficiary';
        this.__valueIsChoice = true;
        /**
         * A suite of codes indicating exceptions or reductions to patient costs and their effective periods.
         */
        this.exception = [];
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueMoney']) {
            this.value = new fhir.Money(source.valueMoney);
        }
        else {
            this.value = null;
        }
        if (source['exception']) {
            this.exception = source.exception.map((x) => new fhir.CoverageCostToBeneficiaryException(x));
        }
    }
    /**
     * Extensible-bound Value Set for type
     */
    static typeExtensibleValueSet() {
        return CoverageCopayTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (!this['value']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property value: fhir: Coverage.costToBeneficiary.value[x]:", }));
        }
        if (this["exception"]) {
            this.exception.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
/**
 * Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment.
 */
export class Coverage extends fhir.DomainResource {
    /**
     * Default constructor for Coverage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.__dataType = 'Coverage';
        /**
         * The main (and possibly only) identifier for the coverage - often referred to as a Member Id, Certificate number, Personal Health Number or Case ID. May be constructed as the concatenation of the Coverage.SubscriberID and the Coverage.dependant.
         */
        this.identifier = [];
        /**
         * May provide multiple identifiers such as insurance company identifier or business identifier (BIN number).
         * For selfpay it may provide multiple paying persons and/or organizations.
         */
        this.payor = [];
        /**
         * For example may be used to identify a class of coverage or employer group, Policy, Plan.
         */
        this.class = [];
        /**
         * For example by knowing the patient visit co-pay, the provider can collect the amount prior to undertaking treatment.
         */
        this.costToBeneficiary = [];
        /**
         * The policy(s) which constitute this insurance coverage.
         */
        this.contract = [];
        this.resourceType = 'Coverage';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['policyHolder']) {
            this.policyHolder = new fhir.Reference(source.policyHolder);
        }
        if (source['subscriber']) {
            this.subscriber = new fhir.Reference(source.subscriber);
        }
        if (source['subscriberId']) {
            this.subscriberId = new fhir.FhirString({ value: source.subscriberId });
        }
        if (source['beneficiary']) {
            this.beneficiary = new fhir.Reference(source.beneficiary);
        }
        else {
            this.beneficiary = null;
        }
        if (source['dependent']) {
            this.dependent = new fhir.FhirString({ value: source.dependent });
        }
        if (source['relationship']) {
            this.relationship = new fhir.CodeableConcept(source.relationship);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['payor']) {
            this.payor = source.payor.map((x) => new fhir.Reference(x));
        }
        else {
            this.payor = null;
        }
        if (source['class']) {
            this.class = source.class.map((x) => new fhir.CoverageClass(x));
        }
        if (source['order']) {
            this.order = new fhir.FhirPositiveInt({ value: source.order });
        }
        if (source['network']) {
            this.network = new fhir.FhirString({ value: source.network });
        }
        if (source['costToBeneficiary']) {
            this.costToBeneficiary = source.costToBeneficiary.map((x) => new fhir.CoverageCostToBeneficiary(x));
        }
        if (source['subrogation']) {
            this.subrogation = new fhir.FhirBoolean({ value: source.subrogation });
        }
        if (source['contract']) {
            this.contract = source.contract.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    static statusRequiredValueSet() {
        return FmStatusValueSet;
    }
    /**
     * Preferred-bound Value Set for type
     */
    static typePreferredValueSet() {
        return CoverageTypeValueSet;
    }
    /**
     * Extensible-bound Value Set for relationship
     */
    static relationshipExtensibleValueSet() {
        return SubscriberRelationshipValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var outcome = super.doModelValidation();
        if (!this['resourceType']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property resourceType:'Coverage' fhir: Coverage.resourceType:'Coverage'", }));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (!this['status']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property status:FmStatusValueSetEnum fhir: Coverage.status:code", }));
        }
        if (this["type"]) {
            outcome.issue.push(...this.type.doModelValidation().issue);
        }
        if (this["policyHolder"]) {
            outcome.issue.push(...this.policyHolder.doModelValidation().issue);
        }
        if (this["subscriber"]) {
            outcome.issue.push(...this.subscriber.doModelValidation().issue);
        }
        if (this["subscriberId"]) {
            outcome.issue.push(...this.subscriberId.doModelValidation().issue);
        }
        if (!this['beneficiary']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property beneficiary:fhir.Reference fhir: Coverage.beneficiary:Reference", }));
        }
        if (this["beneficiary"]) {
            outcome.issue.push(...this.beneficiary.doModelValidation().issue);
        }
        if (this["dependent"]) {
            outcome.issue.push(...this.dependent.doModelValidation().issue);
        }
        if (this["relationship"]) {
            outcome.issue.push(...this.relationship.doModelValidation().issue);
        }
        if (this["period"]) {
            outcome.issue.push(...this.period.doModelValidation().issue);
        }
        if (!this['payor']) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property payor:fhir.Reference[] fhir: Coverage.payor:Reference", }));
        }
        else if (!Array.isArray(this.payor)) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.StructuralIssue, diagnostics: "Found scalar in array property payor:fhir.Reference[] fhir: Coverage.payor:Reference", }));
        }
        else if (this.payor.length === 0) {
            outcome.issue.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityValueSetEnum.Error, code: IssueTypeValueSetEnum.RequiredElementMissing, diagnostics: "Missing required property payor:fhir.Reference[] fhir: Coverage.payor:Reference", }));
        }
        if (this["payor"]) {
            this.payor.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["class"]) {
            this.class.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["order"]) {
            outcome.issue.push(...this.order.doModelValidation().issue);
        }
        if (this["network"]) {
            outcome.issue.push(...this.network.doModelValidation().issue);
        }
        if (this["costToBeneficiary"]) {
            this.costToBeneficiary.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        if (this["subrogation"]) {
            outcome.issue.push(...this.subrogation.doModelValidation().issue);
        }
        if (this["contract"]) {
            this.contract.forEach((x) => { outcome.issue.push(...x.doModelValidation().issue); });
        }
        return outcome;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        return fhir.fhirToJson(this);
    }
}
//# sourceMappingURL=Coverage.js.map