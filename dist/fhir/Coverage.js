// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Coverage
import * as fhir from '../fhir.js';
import { CoverageClassValueSet } from '../fhirValueSets/CoverageClassValueSet.js';
import { CoverageFinancialExceptionValueSet } from '../fhirValueSets/CoverageFinancialExceptionValueSet.js';
import { CoverageCopayTypeValueSet } from '../fhirValueSets/CoverageCopayTypeValueSet.js';
import { FmStatusValueSet } from '../fhirValueSets/FmStatusValueSet.js';
import { CoverageTypeValueSet } from '../fhirValueSets/CoverageTypeValueSet.js';
import { SubscriberRelationshipValueSet } from '../fhirValueSets/SubscriberRelationshipValueSet.js';
/**
 * For example may be used to identify a class of coverage or employer group, Policy, Plan.
 */
export class CoverageClass extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageClass - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['value']) {
            this.value = source.value;
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            this._value = new fhir.FhirElement(source._value);
        }
        if (source['name']) {
            this.name = source.name;
        }
        if (source['_name']) {
            this._name = new fhir.FhirElement(source._name);
        }
    }
    /**
     * Extensible-bound Value Set for type
     */
    typeExtensibleValueSet() {
        return CoverageClassValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["type"]) {
            results.push(["type", 'Missing required element: Coverage.class.type']);
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (!this["value"]) {
            results.push(["value", 'Missing required element: Coverage.class.value']);
        }
        if (this["_value"]) {
            results.push(...this._value.doModelValidation());
        }
        if (this["_name"]) {
            results.push(...this._name.doModelValidation());
        }
        return results;
    }
}
/**
 * A suite of codes indicating exceptions or reductions to patient costs and their effective periods.
 */
export class CoverageCostToBeneficiaryException extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageCostToBeneficiaryException - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Example-bound Value Set for type
     */
    typeExampleValueSet() {
        return CoverageFinancialExceptionValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["type"]) {
            results.push(["type", 'Missing required element: Coverage.costToBeneficiary.exception.type']);
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["period"]) {
            results.push(...this.period.doModelValidation());
        }
        return results;
    }
}
/**
 * For example by knowing the patient visit co-pay, the provider can collect the amount prior to undertaking treatment.
 */
export class CoverageCostToBeneficiary extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageCostToBeneficiary - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['valueQuantity']) {
            this.valueQuantity = new fhir.Quantity(source.valueQuantity);
        }
        if (source['valueMoney']) {
            this.valueMoney = new fhir.Money(source.valueMoney);
        }
        if (source['exception']) {
            this.exception = source.exception.map((x) => new fhir.CoverageCostToBeneficiaryException(x));
        }
    }
    /**
     * Extensible-bound Value Set for type
     */
    typeExtensibleValueSet() {
        return CoverageCopayTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["valueQuantity"]) {
            results.push(...this.valueQuantity.doModelValidation());
        }
        if (this["valueMoney"]) {
            results.push(...this.valueMoney.doModelValidation());
        }
        if (this["exception"]) {
            this.exception.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
/**
 * Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment.
 */
export class Coverage extends fhir.DomainResource {
    /**
     * Default constructor for Coverage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        this.resourceType = 'Coverage';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            this._status = new fhir.FhirElement(source._status);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['policyHolder']) {
            this.policyHolder = new fhir.Reference(source.policyHolder);
        }
        if (source['subscriber']) {
            this.subscriber = new fhir.Reference(source.subscriber);
        }
        if (source['subscriberId']) {
            this.subscriberId = source.subscriberId;
        }
        if (source['_subscriberId']) {
            this._subscriberId = new fhir.FhirElement(source._subscriberId);
        }
        if (source['beneficiary']) {
            this.beneficiary = new fhir.Reference(source.beneficiary);
        }
        else {
            this.beneficiary = null;
        }
        if (source['dependent']) {
            this.dependent = source.dependent;
        }
        if (source['_dependent']) {
            this._dependent = new fhir.FhirElement(source._dependent);
        }
        if (source['relationship']) {
            this.relationship = new fhir.CodeableConcept(source.relationship);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['payor']) {
            this.payor = source.payor.map((x) => new fhir.Reference(x));
        }
        else {
            this.payor = null;
        }
        if (source['class']) {
            this.class = source.class.map((x) => new fhir.CoverageClass(x));
        }
        if (source['order']) {
            this.order = source.order;
        }
        if (source['_order']) {
            this._order = new fhir.FhirElement(source._order);
        }
        if (source['network']) {
            this.network = source.network;
        }
        if (source['_network']) {
            this._network = new fhir.FhirElement(source._network);
        }
        if (source['costToBeneficiary']) {
            this.costToBeneficiary = source.costToBeneficiary.map((x) => new fhir.CoverageCostToBeneficiary(x));
        }
        if (source['subrogation']) {
            this.subrogation = source.subrogation;
        }
        if (source['_subrogation']) {
            this._subrogation = new fhir.FhirElement(source._subrogation);
        }
        if (source['contract']) {
            this.contract = source.contract.map((x) => new fhir.Reference(x));
        }
    }
    /**
     * Required-bound Value Set for status
     */
    statusRequiredValueSet() {
        return FmStatusValueSet;
    }
    /**
     * Preferred-bound Value Set for type
     */
    typePreferredValueSet() {
        return CoverageTypeValueSet;
    }
    /**
     * Extensible-bound Value Set for relationship
     */
    relationshipExtensibleValueSet() {
        return SubscriberRelationshipValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if (!this["resourceType"]) {
            results.push(["resourceType", 'Missing required element: Coverage.resourceType']);
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["status"]) {
            results.push(["status", 'Missing required element: Coverage.status']);
        }
        if (this["_status"]) {
            results.push(...this._status.doModelValidation());
        }
        if (this["type"]) {
            results.push(...this.type.doModelValidation());
        }
        if (this["policyHolder"]) {
            results.push(...this.policyHolder.doModelValidation());
        }
        if (this["subscriber"]) {
            results.push(...this.subscriber.doModelValidation());
        }
        if (this["_subscriberId"]) {
            results.push(...this._subscriberId.doModelValidation());
        }
        if (!this["beneficiary"]) {
            results.push(["beneficiary", 'Missing required element: Coverage.beneficiary']);
        }
        if (this["beneficiary"]) {
            results.push(...this.beneficiary.doModelValidation());
        }
        if (this["_dependent"]) {
            results.push(...this._dependent.doModelValidation());
        }
        if (this["relationship"]) {
            results.push(...this.relationship.doModelValidation());
        }
        if (this["period"]) {
            results.push(...this.period.doModelValidation());
        }
        if ((!this["payor"]) || (this["payor"].length === 0)) {
            results.push(["payor", 'Missing required element: Coverage.payor']);
        }
        if (this["payor"]) {
            this.payor.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["class"]) {
            this.class.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_order"]) {
            results.push(...this._order.doModelValidation());
        }
        if (this["_network"]) {
            results.push(...this._network.doModelValidation());
        }
        if (this["costToBeneficiary"]) {
            this.costToBeneficiary.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (this["_subrogation"]) {
            results.push(...this._subrogation.doModelValidation());
        }
        if (this["contract"]) {
            this.contract.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        return results;
    }
}
//# sourceMappingURL=Coverage.js.map