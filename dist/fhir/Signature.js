// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Signature
import * as fhir from '../fhir.js';
import { SignatureTypeValueSet } from '../fhirValueSets/SignatureTypeValueSet.js';
/**
 * A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
 */
export class Signature extends fhir.FhirElement {
    /**
     * Default constructor for Signature - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}) {
        super(source);
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.Coding(x));
        }
        else {
            this.type = null;
        }
        if (source['when']) {
            this.when = source.when;
        }
        else {
            this.when = null;
        }
        if (source['_when']) {
            this._when = new fhir.FhirElement(source._when);
        }
        if (source['who']) {
            this.who = new fhir.Reference(source.who);
        }
        else {
            this.who = null;
        }
        if (source['onBehalfOf']) {
            this.onBehalfOf = new fhir.Reference(source.onBehalfOf);
        }
        if (source['targetFormat']) {
            this.targetFormat = source.targetFormat;
        }
        if (source['_targetFormat']) {
            this._targetFormat = new fhir.FhirElement(source._targetFormat);
        }
        if (source['sigFormat']) {
            this.sigFormat = source.sigFormat;
        }
        if (source['_sigFormat']) {
            this._sigFormat = new fhir.FhirElement(source._sigFormat);
        }
        if (source['data']) {
            this.data = source.data;
        }
        if (source['_data']) {
            this._data = new fhir.FhirElement(source._data);
        }
    }
    /**
     * Preferred-bound Value Set for type
     */
    static typePreferredValueSet() {
        return SignatureTypeValueSet;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        var results = super.doModelValidation();
        if ((!this["type"]) || (this["type"].length === 0)) {
            results.push(["type", 'Missing required element: Signature.type']);
        }
        if (this["type"]) {
            this.type.forEach((x) => { results.push(...x.doModelValidation()); });
        }
        if (!this["when"]) {
            results.push(["when", 'Missing required element: Signature.when']);
        }
        if (this["_when"]) {
            results.push(...this._when.doModelValidation());
        }
        if (!this["who"]) {
            results.push(["who", 'Missing required element: Signature.who']);
        }
        if (this["who"]) {
            results.push(...this.who.doModelValidation());
        }
        if (this["onBehalfOf"]) {
            results.push(...this.onBehalfOf.doModelValidation());
        }
        if (this["_targetFormat"]) {
            results.push(...this._targetFormat.doModelValidation());
        }
        if (this["_sigFormat"]) {
            results.push(...this._sigFormat.doModelValidation());
        }
        if (this["_data"]) {
            results.push(...this._data.doModelValidation());
        }
        return results;
    }
}
//# sourceMappingURL=Signature.js.map